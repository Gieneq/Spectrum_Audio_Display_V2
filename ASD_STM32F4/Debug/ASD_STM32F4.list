
ASD_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004df8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  08004fc8  08004fc8  00014fc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053c4  080053c4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053cc  080053cc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053cc  080053cc  000153cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080053d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001124  200001dc  080055b0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001300  080055b0  00021300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e82e  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a74  00000000  00000000  0002ea3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008b0  00000000  00000000  000314b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab8  00000000  00000000  00031d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023691  00000000  00000000  00032818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011693  00000000  00000000  00055ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7557  00000000  00000000  0006753c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013ea93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000266c  00000000  00000000  0013eae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00007d0d  00000000  00000000  00141150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004fb0 	.word	0x08004fb0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08004fb0 	.word	0x08004fb0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <ASD_FFT_Init>:
volatile static uint16_t samples_buffer[SAMPLES_BUFFER_LEN];


void ASD_FFT_Init(){
//	  HAL_ADCEx_Calibration_Start(&hadc1);
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples_buffer, SAMPLES_BUFFER_LEN);
 8000eec:	4902      	ldr	r1, [pc, #8]	; (8000ef8 <ASD_FFT_Init+0xc>)
 8000eee:	4803      	ldr	r0, [pc, #12]	; (8000efc <ASD_FFT_Init+0x10>)
 8000ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ef4:	f000 bb2a 	b.w	800154c <HAL_ADC_Start_DMA>
 8000ef8:	200001fc 	.word	0x200001fc
 8000efc:	200011fc 	.word	0x200011fc

08000f00 <ASD_Next_Sample_Aquired>:
//jakis index do sledzenia gdzie jest onwersja
}

void ASD_Next_Sample_Aquired(){
	current_sample++;
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <ASD_Next_Sample_Aquired+0x14>)
 8000f02:	6813      	ldr	r3, [r2, #0]
 8000f04:	3301      	adds	r3, #1
	if(current_sample >= SAMPLES_BUFFER_LEN)
 8000f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
		current_sample = 0;
 8000f0a:	bf24      	itt	cs
 8000f0c:	2300      	movcs	r3, #0
 8000f0e:	6013      	strcs	r3, [r2, #0]
	while(1);
 8000f10:	e7fe      	b.n	8000f10 <ASD_Next_Sample_Aquired+0x10>
 8000f12:	bf00      	nop
 8000f14:	200001f8 	.word	0x200001f8

08000f18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f18:	b530      	push	{r4, r5, lr}
 8000f1a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4668      	mov	r0, sp
 8000f22:	f001 fb25 	bl	8002570 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f26:	4813      	ldr	r0, [pc, #76]	; (8000f74 <MX_ADC1_Init+0x5c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f28:	4a13      	ldr	r2, [pc, #76]	; (8000f78 <MX_ADC1_Init+0x60>)
 8000f2a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f2e:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f30:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f32:	e9c0 2300 	strd	r2, r3, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <MX_ADC1_Init+0x64>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f38:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f3a:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f3c:	7605      	strb	r5, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f3e:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f42:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f44:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f46:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f48:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f4a:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4e:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f50:	f000 fa56 	bl	8001400 <HAL_ADC_Init>
 8000f54:	b108      	cbz	r0, 8000f5a <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8000f56:	f000 f8f7 	bl	8001148 <Error_Handler>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f5a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_ADC1_Init+0x5c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f5e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 8000f62:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f66:	f000 fbe3 	bl	8001730 <HAL_ADC_ConfigChannel>
 8000f6a:	b108      	cbz	r0, 8000f70 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 8000f6c:	f000 f8ec 	bl	8001148 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f70:	b005      	add	sp, #20
 8000f72:	bd30      	pop	{r4, r5, pc}
 8000f74:	200011fc 	.word	0x200011fc
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	0f000001 	.word	0x0f000001

08000f80 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	4606      	mov	r6, r0
 8000f84:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f86:	2214      	movs	r2, #20
 8000f88:	2100      	movs	r1, #0
 8000f8a:	a803      	add	r0, sp, #12
 8000f8c:	f001 faf0 	bl	8002570 <memset>
  if(adcHandle->Instance==ADC1)
 8000f90:	6832      	ldr	r2, [r6, #0]
 8000f92:	4b20      	ldr	r3, [pc, #128]	; (8001014 <HAL_ADC_MspInit+0x94>)
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d13a      	bne.n	800100e <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f98:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8000f9c:	2500      	movs	r5, #0
 8000f9e:	9501      	str	r5, [sp, #4]
 8000fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	481d      	ldr	r0, [pc, #116]	; (8001018 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000fa4:	4c1d      	ldr	r4, [pc, #116]	; (800101c <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000fa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000faa:	645a      	str	r2, [r3, #68]	; 0x44
 8000fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000fae:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000fb2:	9201      	str	r2, [sp, #4]
 8000fb4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	9502      	str	r5, [sp, #8]
 8000fb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000fba:	f042 0201 	orr.w	r2, r2, #1
 8000fbe:	631a      	str	r2, [r3, #48]	; 0x30
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	f000 fe3c 	bl	8001c50 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fda:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000fde:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fe6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fea:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ff2:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ff6:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff8:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ffc:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001000:	f000 fcae 	bl	8001960 <HAL_DMA_Init>
 8001004:	b108      	cbz	r0, 800100a <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8001006:	f000 f89f 	bl	8001148 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800100a:	63b4      	str	r4, [r6, #56]	; 0x38
 800100c:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800100e:	b008      	add	sp, #32
 8001010:	bd70      	pop	{r4, r5, r6, pc}
 8001012:	bf00      	nop
 8001014:	40012000 	.word	0x40012000
 8001018:	40020000 	.word	0x40020000
 800101c:	20001244 	.word	0x20001244
 8001020:	40026410 	.word	0x40026410

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001024:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001026:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_DMA_Init+0x30>)
 8001028:	2200      	movs	r2, #0
 800102a:	9201      	str	r2, [sp, #4]
 800102c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800102e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001032:	6319      	str	r1, [r3, #48]	; 0x30
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800103a:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800103c:	2102      	movs	r1, #2
 800103e:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001040:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001042:	f000 fc23 	bl	800188c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001046:	2038      	movs	r0, #56	; 0x38

}
 8001048:	b003      	add	sp, #12
 800104a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800104e:	f000 bc4f 	b.w	80018f0 <HAL_NVIC_EnableIRQ>
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001058:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_GPIO_Init+0x20>)
 8001060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001062:	f042 0201 	orr.w	r2, r2, #1
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	9301      	str	r3, [sp, #4]
 8001070:	9b01      	ldr	r3, [sp, #4]

}
 8001072:	b002      	add	sp, #8
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <HAL_ADC_ConvCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
	ASD_Next_Sample_Aquired();
 800107c:	f7ff bf40 	b.w	8000f00 <ASD_Next_Sample_Aquired>

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b510      	push	{r4, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001084:	2214      	movs	r2, #20
 8001086:	2100      	movs	r1, #0
 8001088:	a808      	add	r0, sp, #32
 800108a:	f001 fa71 	bl	8002570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108e:	2214      	movs	r2, #20
 8001090:	2100      	movs	r1, #0
 8001092:	a802      	add	r0, sp, #8
 8001094:	f001 fa6c 	bl	8002570 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	4a21      	ldr	r2, [pc, #132]	; (8001120 <SystemClock_Config+0xa0>)
 800109c:	9300      	str	r3, [sp, #0]
 800109e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80010a0:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80010a4:	6411      	str	r1, [r2, #64]	; 0x40
 80010a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010a8:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80010ac:	9200      	str	r2, [sp, #0]
 80010ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <SystemClock_Config+0xa4>)
 80010b2:	9301      	str	r3, [sp, #4]
 80010b4:	6811      	ldr	r1, [r2, #0]
 80010b6:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80010ba:	6011      	str	r1, [r2, #0]
 80010bc:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010be:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010c4:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c6:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ca:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 180;
 80010cc:	23b4      	movs	r3, #180	; 0xb4
 80010ce:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d2:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d4:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010d6:	2101      	movs	r1, #1
 80010d8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010da:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010dc:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e0:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010e4:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e6:	f000 ffc5 	bl	8002074 <HAL_RCC_OscConfig>
 80010ea:	b108      	cbz	r0, 80010f0 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010ee:	e7fe      	b.n	80010ee <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010f0:	f000 fe82 	bl	8001df8 <HAL_PWREx_EnableOverDrive>
 80010f4:	b108      	cbz	r0, 80010fa <SystemClock_Config+0x7a>
 80010f6:	b672      	cpsid	i
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fa:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010fc:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001102:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800110a:	2105      	movs	r1, #5
 800110c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001112:	f000 feab 	bl	8001e6c <HAL_RCC_ClockConfig>
 8001116:	b108      	cbz	r0, 800111c <SystemClock_Config+0x9c>
 8001118:	b672      	cpsid	i
  while (1)
 800111a:	e7fe      	b.n	800111a <SystemClock_Config+0x9a>
}
 800111c:	b014      	add	sp, #80	; 0x50
 800111e:	bd10      	pop	{r4, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <main>:
{
 8001128:	b508      	push	{r3, lr}
  HAL_Init();
 800112a:	f000 f93d 	bl	80013a8 <HAL_Init>
  SystemClock_Config();
 800112e:	f7ff ffa7 	bl	8001080 <SystemClock_Config>
  MX_GPIO_Init();
 8001132:	f7ff ff91 	bl	8001058 <MX_GPIO_Init>
  MX_DMA_Init();
 8001136:	f7ff ff75 	bl	8001024 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800113a:	f000 f895 	bl	8001268 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800113e:	f7ff feeb 	bl	8000f18 <MX_ADC1_Init>
  ASD_FFT_Init();
 8001142:	f7ff fed3 	bl	8000eec <ASD_FFT_Init>
  while (1)
 8001146:	e7fe      	b.n	8001146 <main+0x1e>

08001148 <Error_Handler>:
 8001148:	b672      	cpsid	i
  while (1)
 800114a:	e7fe      	b.n	800114a <Error_Handler+0x2>

0800114c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800114c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114e:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <HAL_MspInit+0x34>)
 8001150:	2100      	movs	r1, #0
 8001152:	9100      	str	r1, [sp, #0]
 8001154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800115a:	645a      	str	r2, [r3, #68]	; 0x44
 800115c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800115e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	9101      	str	r1, [sp, #4]
 8001168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800116a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800116e:	641a      	str	r2, [r3, #64]	; 0x40
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	b002      	add	sp, #8
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800

08001184 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <NMI_Handler>

08001186 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler>

08001188 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <MemManage_Handler>

0800118a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler>

0800118c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <UsageFault_Handler>

0800118e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800118e:	4770      	bx	lr

08001190 <DebugMon_Handler>:
 8001190:	4770      	bx	lr

08001192 <PendSV_Handler>:
 8001192:	4770      	bx	lr

08001194 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001194:	f000 b922 	b.w	80013dc <HAL_IncTick>

08001198 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001198:	4801      	ldr	r0, [pc, #4]	; (80011a0 <DMA2_Stream0_IRQHandler+0x8>)
 800119a:	f000 bc9b 	b.w	8001ad4 <HAL_DMA_IRQHandler>
 800119e:	bf00      	nop
 80011a0:	20001244 	.word	0x20001244

080011a4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80011a4:	2001      	movs	r0, #1
 80011a6:	4770      	bx	lr

080011a8 <_kill>:

int _kill(int pid, int sig)
{
 80011a8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80011aa:	f001 f9b7 	bl	800251c <__errno>
 80011ae:	2316      	movs	r3, #22
 80011b0:	6003      	str	r3, [r0, #0]
	return -1;
}
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	bd08      	pop	{r3, pc}

080011b8 <_exit>:

void _exit (int status)
{
 80011b8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80011ba:	f001 f9af 	bl	800251c <__errno>
 80011be:	2316      	movs	r3, #22
 80011c0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80011c2:	e7fe      	b.n	80011c2 <_exit+0xa>

080011c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	460d      	mov	r5, r1
 80011c8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011ca:	460e      	mov	r6, r1
 80011cc:	1b73      	subs	r3, r6, r5
 80011ce:	429c      	cmp	r4, r3
 80011d0:	dc01      	bgt.n	80011d6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80011d2:	4620      	mov	r0, r4
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80011d6:	f3af 8000 	nop.w
 80011da:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011de:	e7f5      	b.n	80011cc <_read+0x8>

080011e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011e0:	b570      	push	{r4, r5, r6, lr}
 80011e2:	460d      	mov	r5, r1
 80011e4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e6:	460e      	mov	r6, r1
 80011e8:	1b73      	subs	r3, r6, r5
 80011ea:	429c      	cmp	r4, r3
 80011ec:	dc01      	bgt.n	80011f2 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80011ee:	4620      	mov	r0, r4
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80011f2:	f816 0b01 	ldrb.w	r0, [r6], #1
 80011f6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011fa:	e7f5      	b.n	80011e8 <_write+0x8>

080011fc <_close>:

int _close(int file)
{
	return -1;
}
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	4770      	bx	lr

08001202 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001206:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001208:	2000      	movs	r0, #0
 800120a:	4770      	bx	lr

0800120c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800120c:	2001      	movs	r0, #1
 800120e:	4770      	bx	lr

08001210 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001210:	2000      	movs	r0, #0
 8001212:	4770      	bx	lr

08001214 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4a0b      	ldr	r2, [pc, #44]	; (8001244 <_sbrk+0x30>)
 8001216:	6811      	ldr	r1, [r2, #0]
{
 8001218:	b510      	push	{r4, lr}
 800121a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800121c:	b909      	cbnz	r1, 8001222 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800121e:	490a      	ldr	r1, [pc, #40]	; (8001248 <_sbrk+0x34>)
 8001220:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	6810      	ldr	r0, [r2, #0]
 8001224:	4909      	ldr	r1, [pc, #36]	; (800124c <_sbrk+0x38>)
 8001226:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <_sbrk+0x3c>)
 8001228:	4403      	add	r3, r0
 800122a:	1b09      	subs	r1, r1, r4
 800122c:	428b      	cmp	r3, r1
 800122e:	d906      	bls.n	800123e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001230:	f001 f974 	bl	800251c <__errno>
 8001234:	230c      	movs	r3, #12
 8001236:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001238:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800123c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800123e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001240:	e7fc      	b.n	800123c <_sbrk+0x28>
 8001242:	bf00      	nop
 8001244:	200012a4 	.word	0x200012a4
 8001248:	20001300 	.word	0x20001300
 800124c:	20020000 	.word	0x20020000
 8001250:	00000400 	.word	0x00000400

08001254 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4a03      	ldr	r2, [pc, #12]	; (8001264 <SystemInit+0x10>)
 8001256:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800125a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001262:	4770      	bx	lr
 8001264:	e000ed00 	.word	0xe000ed00

08001268 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001268:	480b      	ldr	r0, [pc, #44]	; (8001298 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800126a:	4a0c      	ldr	r2, [pc, #48]	; (800129c <MX_USART2_UART_Init+0x34>)
{
 800126c:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 800126e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001272:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001276:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001278:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800127a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127e:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001282:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001284:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	f001 f91b 	bl	80024c0 <HAL_UART_Init>
 800128a:	b118      	cbz	r0, 8001294 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800128c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001290:	f7ff bf5a 	b.w	8001148 <Error_Handler>
}
 8001294:	bd08      	pop	{r3, pc}
 8001296:	bf00      	nop
 8001298:	200012a8 	.word	0x200012a8
 800129c:	40004400 	.word	0x40004400

080012a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012a0:	b510      	push	{r4, lr}
 80012a2:	4604      	mov	r4, r0
 80012a4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	2214      	movs	r2, #20
 80012a8:	2100      	movs	r1, #0
 80012aa:	a803      	add	r0, sp, #12
 80012ac:	f001 f960 	bl	8002570 <memset>
  if(uartHandle->Instance==USART2)
 80012b0:	6822      	ldr	r2, [r4, #0]
 80012b2:	4b14      	ldr	r3, [pc, #80]	; (8001304 <HAL_UART_MspInit+0x64>)
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d122      	bne.n	80012fe <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80012bc:	2100      	movs	r1, #0
 80012be:	9101      	str	r1, [sp, #4]
 80012c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	4811      	ldr	r0, [pc, #68]	; (8001308 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80012c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80012c8:	641a      	str	r2, [r3, #64]	; 0x40
 80012ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012cc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80012d0:	9201      	str	r2, [sp, #4]
 80012d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d4:	9102      	str	r1, [sp, #8]
 80012d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012d8:	f042 0201 	orr.w	r2, r2, #1
 80012dc:	631a      	str	r2, [r3, #48]	; 0x30
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	f003 0301 	and.w	r3, r3, #1
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e8:	220c      	movs	r2, #12
 80012ea:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012ec:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f2:	2307      	movs	r3, #7
 80012f4:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	a903      	add	r1, sp, #12
 80012fa:	f000 fca9 	bl	8001c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80012fe:	b008      	add	sp, #32
 8001300:	bd10      	pop	{r4, pc}
 8001302:	bf00      	nop
 8001304:	40004400 	.word	0x40004400
 8001308:	40020000 	.word	0x40020000

0800130c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800130c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001344 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001310:	480d      	ldr	r0, [pc, #52]	; (8001348 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001312:	490e      	ldr	r1, [pc, #56]	; (800134c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001318:	e002      	b.n	8001320 <LoopCopyDataInit>

0800131a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800131a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800131c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131e:	3304      	adds	r3, #4

08001320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001324:	d3f9      	bcc.n	800131a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001328:	4c0b      	ldr	r4, [pc, #44]	; (8001358 <LoopFillZerobss+0x26>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800132c:	e001      	b.n	8001332 <LoopFillZerobss>

0800132e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001330:	3204      	adds	r2, #4

08001332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001334:	d3fb      	bcc.n	800132e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001336:	f7ff ff8d 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800133a:	f001 f8f5 	bl	8002528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800133e:	f7ff fef3 	bl	8001128 <main>
  bx  lr    
 8001342:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800134c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001350:	080053d4 	.word	0x080053d4
  ldr r2, =_sbss
 8001354:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001358:	20001300 	.word	0x20001300

0800135c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800135c:	e7fe      	b.n	800135c <ADC_IRQHandler>
	...

08001360 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001360:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001362:	4a0e      	ldr	r2, [pc, #56]	; (800139c <HAL_InitTick+0x3c>)
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <HAL_InitTick+0x40>)
{
 8001366:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001368:	7818      	ldrb	r0, [r3, #0]
 800136a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001372:	6810      	ldr	r0, [r2, #0]
 8001374:	fbb0 f0f3 	udiv	r0, r0, r3
 8001378:	f000 fac8 	bl	800190c <HAL_SYSTICK_Config>
 800137c:	4604      	mov	r4, r0
 800137e:	b958      	cbnz	r0, 8001398 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001380:	2d0f      	cmp	r5, #15
 8001382:	d809      	bhi.n	8001398 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001384:	4602      	mov	r2, r0
 8001386:	4629      	mov	r1, r5
 8001388:	f04f 30ff 	mov.w	r0, #4294967295
 800138c:	f000 fa7e 	bl	800188c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <HAL_InitTick+0x44>)
 8001392:	4620      	mov	r0, r4
 8001394:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001396:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001398:	2001      	movs	r0, #1
 800139a:	e7fc      	b.n	8001396 <HAL_InitTick+0x36>
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000004 	.word	0x20000004
 80013a4:	20000008 	.word	0x20000008

080013a8 <HAL_Init>:
{
 80013a8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013aa:	4b0b      	ldr	r3, [pc, #44]	; (80013d8 <HAL_Init+0x30>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013b2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80013ba:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80013c2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 fa4f 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	200f      	movs	r0, #15
 80013cc:	f7ff ffc8 	bl	8001360 <HAL_InitTick>
  HAL_MspInit();
 80013d0:	f7ff febc 	bl	800114c <HAL_MspInit>
}
 80013d4:	2000      	movs	r0, #0
 80013d6:	bd08      	pop	{r3, pc}
 80013d8:	40023c00 	.word	0x40023c00

080013dc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80013dc:	4a03      	ldr	r2, [pc, #12]	; (80013ec <HAL_IncTick+0x10>)
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <HAL_IncTick+0x14>)
 80013e0:	6811      	ldr	r1, [r2, #0]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	440b      	add	r3, r1
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	200012ec 	.word	0x200012ec
 80013f0:	20000004 	.word	0x20000004

080013f4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80013f4:	4b01      	ldr	r3, [pc, #4]	; (80013fc <HAL_GetTick+0x8>)
 80013f6:	6818      	ldr	r0, [r3, #0]
}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	200012ec 	.word	0x200012ec

08001400 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001400:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001402:	4604      	mov	r4, r0
 8001404:	2800      	cmp	r0, #0
 8001406:	f000 809b 	beq.w	8001540 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800140a:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800140c:	b925      	cbnz	r5, 8001418 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800140e:	f7ff fdb7 	bl	8000f80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001412:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001414:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001418:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800141a:	06db      	lsls	r3, r3, #27
 800141c:	f100 808e 	bmi.w	800153c <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001420:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001422:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001426:	f023 0302 	bic.w	r3, r3, #2
 800142a:	f043 0302 	orr.w	r3, r3, #2
 800142e:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001430:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_ADC_Init+0x144>)
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001438:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800143a:	685a      	ldr	r2, [r3, #4]
 800143c:	6861      	ldr	r1, [r4, #4]
 800143e:	430a      	orrs	r2, r1
 8001440:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001442:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001444:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800144c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001454:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001456:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001458:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800145a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800145e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	430a      	orrs	r2, r1
 8001464:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001466:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001468:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800146a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800146e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	430a      	orrs	r2, r1
 8001474:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001476:	4934      	ldr	r1, [pc, #208]	; (8001548 <HAL_ADC_Init+0x148>)
 8001478:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800147a:	428a      	cmp	r2, r1
 800147c:	d052      	beq.n	8001524 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001484:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001486:	6899      	ldr	r1, [r3, #8]
 8001488:	430a      	orrs	r2, r1
 800148a:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800148c:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800148e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001494:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800149a:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	f022 0202 	bic.w	r2, r2, #2
 80014a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014a4:	689a      	ldr	r2, [r3, #8]
 80014a6:	7e21      	ldrb	r1, [r4, #24]
 80014a8:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80014ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ae:	f894 2020 	ldrb.w	r2, [r4, #32]
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d03e      	beq.n	8001534 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014b6:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b8:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014c0:	685a      	ldr	r2, [r3, #4]
 80014c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014c8:	685a      	ldr	r2, [r3, #4]
 80014ca:	3901      	subs	r1, #1
 80014cc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014d0:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014d4:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80014da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014de:	3901      	subs	r1, #1
 80014e0:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80014e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014ee:	689a      	ldr	r2, [r3, #8]
 80014f0:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80014f4:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80014f8:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014fa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014fc:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001504:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001506:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001508:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 800150c:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800150e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001510:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001512:	f023 0303 	bic.w	r3, r3, #3
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 800151c:	2300      	movs	r3, #0
 800151e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001522:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800152a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001532:	e7b2      	b.n	800149a <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800153a:	e7c9      	b.n	80014d0 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 800153c:	2001      	movs	r0, #1
 800153e:	e7ed      	b.n	800151c <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001540:	2001      	movs	r0, #1
 8001542:	e7ee      	b.n	8001522 <HAL_ADC_Init+0x122>
 8001544:	40012300 	.word	0x40012300
 8001548:	0f000001 	.word	0x0f000001

0800154c <HAL_ADC_Start_DMA>:
{
 800154c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800154e:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001550:	2200      	movs	r2, #0
 8001552:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001554:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001558:	2a01      	cmp	r2, #1
{
 800155a:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 800155c:	f000 808c 	beq.w	8001678 <HAL_ADC_Start_DMA+0x12c>
 8001560:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001562:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 8001564:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001568:	68b2      	ldr	r2, [r6, #8]
 800156a:	07d4      	lsls	r4, r2, #31
 800156c:	d554      	bpl.n	8001618 <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800156e:	68b2      	ldr	r2, [r6, #8]
 8001570:	05d0      	lsls	r0, r2, #23
 8001572:	d464      	bmi.n	800163e <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001574:	68b4      	ldr	r4, [r6, #8]
 8001576:	f014 0401 	ands.w	r4, r4, #1
 800157a:	d074      	beq.n	8001666 <HAL_ADC_Start_DMA+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 800157c:	6c28      	ldr	r0, [r5, #64]	; 0x40
 800157e:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001582:	f020 0001 	bic.w	r0, r0, #1
 8001586:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 800158a:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800158c:	6872      	ldr	r2, [r6, #4]
 800158e:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001590:	bf41      	itttt	mi
 8001592:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 8001594:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001598:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 800159c:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015a0:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015a2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015a6:	bf1c      	itt	ne
 80015a8:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 80015aa:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80015ae:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80015b0:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015b2:	4a33      	ldr	r2, [pc, #204]	; (8001680 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 80015b4:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015b8:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015ba:	4a32      	ldr	r2, [pc, #200]	; (8001684 <HAL_ADC_Start_DMA+0x138>)
 80015bc:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015be:	4a32      	ldr	r2, [pc, #200]	; (8001688 <HAL_ADC_Start_DMA+0x13c>)
 80015c0:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015c2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015c6:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015c8:	6872      	ldr	r2, [r6, #4]
 80015ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015ce:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015d0:	68b2      	ldr	r2, [r6, #8]
 80015d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015d6:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015d8:	460a      	mov	r2, r1
 80015da:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 80015de:	f000 fa3f 	bl	8001a60 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015e2:	4a2a      	ldr	r2, [pc, #168]	; (800168c <HAL_ADC_Start_DMA+0x140>)
 80015e4:	682b      	ldr	r3, [r5, #0]
 80015e6:	6850      	ldr	r0, [r2, #4]
 80015e8:	4929      	ldr	r1, [pc, #164]	; (8001690 <HAL_ADC_Start_DMA+0x144>)
 80015ea:	f010 001f 	ands.w	r0, r0, #31
 80015ee:	d132      	bne.n	8001656 <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015f0:	428b      	cmp	r3, r1
 80015f2:	d007      	beq.n	8001604 <HAL_ADC_Start_DMA+0xb8>
 80015f4:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80015f8:	428b      	cmp	r3, r1
 80015fa:	d125      	bne.n	8001648 <HAL_ADC_Start_DMA+0xfc>
 80015fc:	6852      	ldr	r2, [r2, #4]
 80015fe:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001602:	d107      	bne.n	8001614 <HAL_ADC_Start_DMA+0xc8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001604:	6898      	ldr	r0, [r3, #8]
 8001606:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800160a:	d137      	bne.n	800167c <HAL_ADC_Start_DMA+0x130>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800160c:	689a      	ldr	r2, [r3, #8]
 800160e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001612:	609a      	str	r2, [r3, #8]
}
 8001614:	b002      	add	sp, #8
 8001616:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001618:	68b2      	ldr	r2, [r6, #8]
 800161a:	f042 0201 	orr.w	r2, r2, #1
 800161e:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001620:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <HAL_ADC_Start_DMA+0x148>)
 8001622:	6810      	ldr	r0, [r2, #0]
 8001624:	4a1c      	ldr	r2, [pc, #112]	; (8001698 <HAL_ADC_Start_DMA+0x14c>)
 8001626:	fbb0 f0f2 	udiv	r0, r0, r2
 800162a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800162e:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001630:	9a01      	ldr	r2, [sp, #4]
 8001632:	2a00      	cmp	r2, #0
 8001634:	d09b      	beq.n	800156e <HAL_ADC_Start_DMA+0x22>
      counter--;
 8001636:	9a01      	ldr	r2, [sp, #4]
 8001638:	3a01      	subs	r2, #1
 800163a:	9201      	str	r2, [sp, #4]
 800163c:	e7f8      	b.n	8001630 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800163e:	68b2      	ldr	r2, [r6, #8]
 8001640:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001644:	60b2      	str	r2, [r6, #8]
 8001646:	e795      	b.n	8001574 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001648:	4914      	ldr	r1, [pc, #80]	; (800169c <HAL_ADC_Start_DMA+0x150>)
 800164a:	428b      	cmp	r3, r1
 800164c:	d1e2      	bne.n	8001614 <HAL_ADC_Start_DMA+0xc8>
 800164e:	6852      	ldr	r2, [r2, #4]
 8001650:	f012 0f10 	tst.w	r2, #16
 8001654:	e7d5      	b.n	8001602 <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001656:	428b      	cmp	r3, r1
 8001658:	d110      	bne.n	800167c <HAL_ADC_Start_DMA+0x130>
 800165a:	6898      	ldr	r0, [r3, #8]
 800165c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001660:	d0d4      	beq.n	800160c <HAL_ADC_Start_DMA+0xc0>
  return HAL_OK;
 8001662:	4620      	mov	r0, r4
 8001664:	e7d6      	b.n	8001614 <HAL_ADC_Start_DMA+0xc8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001666:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001668:	f043 0310 	orr.w	r3, r3, #16
 800166c:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800166e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	646b      	str	r3, [r5, #68]	; 0x44
 8001676:	e7f4      	b.n	8001662 <HAL_ADC_Start_DMA+0x116>
  __HAL_LOCK(hadc);
 8001678:	2002      	movs	r0, #2
 800167a:	e7cb      	b.n	8001614 <HAL_ADC_Start_DMA+0xc8>
  return HAL_OK;
 800167c:	2000      	movs	r0, #0
 800167e:	e7c9      	b.n	8001614 <HAL_ADC_Start_DMA+0xc8>
 8001680:	080016c5 	.word	0x080016c5
 8001684:	080016a3 	.word	0x080016a3
 8001688:	080016af 	.word	0x080016af
 800168c:	40012300 	.word	0x40012300
 8001690:	40012000 	.word	0x40012000
 8001694:	20000000 	.word	0x20000000
 8001698:	000f4240 	.word	0x000f4240
 800169c:	40012200 	.word	0x40012200

080016a0 <HAL_ADC_ConvHalfCpltCallback>:
 80016a0:	4770      	bx	lr

080016a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80016a2:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80016a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80016a6:	f7ff fffb 	bl	80016a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016aa:	bd08      	pop	{r3, pc}

080016ac <HAL_ADC_ErrorCallback>:
 80016ac:	4770      	bx	lr

080016ae <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80016b0:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80016b2:	2340      	movs	r3, #64	; 0x40
 80016b4:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80016b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80016be:	f7ff fff5 	bl	80016ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80016c2:	bd08      	pop	{r3, pc}

080016c4 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80016c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016c8:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80016cc:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80016d0:	d123      	bne.n	800171a <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80016d6:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	6891      	ldr	r1, [r2, #8]
 80016dc:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 80016e0:	d117      	bne.n	8001712 <ADC_DMAConvCplt+0x4e>
 80016e2:	7e19      	ldrb	r1, [r3, #24]
 80016e4:	b9a9      	cbnz	r1, 8001712 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016e8:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80016ec:	d002      	beq.n	80016f4 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ee:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016f0:	0548      	lsls	r0, r1, #21
 80016f2:	d40e      	bmi.n	8001712 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016f4:	6851      	ldr	r1, [r2, #4]
 80016f6:	f021 0120 	bic.w	r1, r1, #32
 80016fa:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001702:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001706:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001708:	bf5e      	ittt	pl
 800170a:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 800170c:	f042 0201 	orrpl.w	r2, r2, #1
 8001710:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff fcb2 	bl	800107c <HAL_ADC_ConvCpltCallback>
}
 8001718:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800171a:	06d2      	lsls	r2, r2, #27
 800171c:	d503      	bpl.n	8001726 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ffc4 	bl	80016ac <HAL_ADC_ErrorCallback>
 8001724:	e7f8      	b.n	8001718 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4718      	bx	r3

08001730 <HAL_ADC_ConfigChannel>:
{
 8001730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001732:	2300      	movs	r3, #0
 8001734:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001736:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800173a:	2b01      	cmp	r3, #1
 800173c:	d069      	beq.n	8001812 <HAL_ADC_ConfigChannel+0xe2>
 800173e:	2301      	movs	r3, #1
 8001740:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001744:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001746:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001748:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 800174a:	2d09      	cmp	r5, #9
 800174c:	b2ac      	uxth	r4, r5
 800174e:	d934      	bls.n	80017ba <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001750:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001754:	68df      	ldr	r7, [r3, #12]
 8001756:	3a1e      	subs	r2, #30
 8001758:	f04f 0c07 	mov.w	ip, #7
 800175c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001760:	ea27 070c 	bic.w	r7, r7, ip
 8001764:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001766:	68df      	ldr	r7, [r3, #12]
 8001768:	fa06 f202 	lsl.w	r2, r6, r2
 800176c:	433a      	orrs	r2, r7
 800176e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001770:	6849      	ldr	r1, [r1, #4]
 8001772:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001774:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8001778:	d82f      	bhi.n	80017da <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800177a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177c:	3a05      	subs	r2, #5
 800177e:	261f      	movs	r6, #31
 8001780:	4096      	lsls	r6, r2
 8001782:	ea21 0106 	bic.w	r1, r1, r6
 8001786:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001788:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800178a:	fa04 f202 	lsl.w	r2, r4, r2
 800178e:	430a      	orrs	r2, r1
 8001790:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001792:	4a30      	ldr	r2, [pc, #192]	; (8001854 <HAL_ADC_ConfigChannel+0x124>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d10a      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x7e>
 8001798:	2d12      	cmp	r5, #18
 800179a:	d13c      	bne.n	8001816 <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800179c:	4b2e      	ldr	r3, [pc, #184]	; (8001858 <HAL_ADC_ConfigChannel+0x128>)
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80017a4:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80017ac:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 80017ae:	2300      	movs	r3, #0
 80017b0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80017b4:	4618      	mov	r0, r3
}
 80017b6:	b003      	add	sp, #12
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80017ba:	691f      	ldr	r7, [r3, #16]
 80017bc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 80017c0:	f04f 0c07 	mov.w	ip, #7
 80017c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80017c8:	ea27 070c 	bic.w	r7, r7, ip
 80017cc:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017ce:	691f      	ldr	r7, [r3, #16]
 80017d0:	fa06 f202 	lsl.w	r2, r6, r2
 80017d4:	433a      	orrs	r2, r7
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	e7ca      	b.n	8001770 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 80017da:	290c      	cmp	r1, #12
 80017dc:	f04f 011f 	mov.w	r1, #31
 80017e0:	d80b      	bhi.n	80017fa <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017e2:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80017e4:	3a23      	subs	r2, #35	; 0x23
 80017e6:	4091      	lsls	r1, r2
 80017e8:	ea26 0101 	bic.w	r1, r6, r1
 80017ec:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f0:	fa04 f202 	lsl.w	r2, r4, r2
 80017f4:	430a      	orrs	r2, r1
 80017f6:	631a      	str	r2, [r3, #48]	; 0x30
 80017f8:	e7cb      	b.n	8001792 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017fa:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80017fc:	3a41      	subs	r2, #65	; 0x41
 80017fe:	4091      	lsls	r1, r2
 8001800:	ea26 0101 	bic.w	r1, r6, r1
 8001804:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001806:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001808:	fa04 f202 	lsl.w	r2, r4, r2
 800180c:	430a      	orrs	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001810:	e7bf      	b.n	8001792 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001812:	2002      	movs	r0, #2
 8001814:	e7cf      	b.n	80017b6 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001816:	4b11      	ldr	r3, [pc, #68]	; (800185c <HAL_ADC_ConfigChannel+0x12c>)
 8001818:	429d      	cmp	r5, r3
 800181a:	d001      	beq.n	8001820 <HAL_ADC_ConfigChannel+0xf0>
 800181c:	2d11      	cmp	r5, #17
 800181e:	d1c6      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001820:	4b0d      	ldr	r3, [pc, #52]	; (8001858 <HAL_ADC_ConfigChannel+0x128>)
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001828:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001830:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001832:	4b0a      	ldr	r3, [pc, #40]	; (800185c <HAL_ADC_ConfigChannel+0x12c>)
 8001834:	429d      	cmp	r5, r3
 8001836:	d1ba      	bne.n	80017ae <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001838:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_ADC_ConfigChannel+0x130>)
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <HAL_ADC_ConfigChannel+0x134>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001842:	220a      	movs	r2, #10
 8001844:	4353      	muls	r3, r2
        counter--;
 8001846:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001848:	9b01      	ldr	r3, [sp, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0af      	beq.n	80017ae <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 800184e:	9b01      	ldr	r3, [sp, #4]
 8001850:	3b01      	subs	r3, #1
 8001852:	e7f8      	b.n	8001846 <HAL_ADC_ConfigChannel+0x116>
 8001854:	40012000 	.word	0x40012000
 8001858:	40012300 	.word	0x40012300
 800185c:	10000012 	.word	0x10000012
 8001860:	20000000 	.word	0x20000000
 8001864:	000f4240 	.word	0x000f4240

08001868 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4907      	ldr	r1, [pc, #28]	; (8001888 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800186a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001870:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001874:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001878:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800187c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001884:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800188e:	b530      	push	{r4, r5, lr}
 8001890:	68dc      	ldr	r4, [r3, #12]
 8001892:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001896:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	2d04      	cmp	r5, #4
 800189e:	bf28      	it	cs
 80018a0:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a2:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a4:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018a8:	bf8c      	ite	hi
 80018aa:	3c03      	subhi	r4, #3
 80018ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ae:	fa03 f505 	lsl.w	r5, r3, r5
 80018b2:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018b6:	40a3      	lsls	r3, r4
 80018b8:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80018be:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c4:	bfac      	ite	ge
 80018c6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	4a08      	ldrlt	r2, [pc, #32]	; (80018ec <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	bfb8      	it	lt
 80018d2:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	bfaa      	itet	ge
 80018da:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018e4:	bd30      	pop	{r4, r5, pc}
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00
 80018ec:	e000ed14 	.word	0xe000ed14

080018f0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80018f0:	2800      	cmp	r0, #0
 80018f2:	db08      	blt.n	8001906 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f4:	0942      	lsrs	r2, r0, #5
 80018f6:	2301      	movs	r3, #1
 80018f8:	f000 001f 	and.w	r0, r0, #31
 80018fc:	fa03 f000 	lsl.w	r0, r3, r0
 8001900:	4b01      	ldr	r3, [pc, #4]	; (8001908 <HAL_NVIC_EnableIRQ+0x18>)
 8001902:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100

0800190c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	3801      	subs	r0, #1
 800190e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001912:	d20b      	bcs.n	800192c <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001914:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	4a05      	ldr	r2, [pc, #20]	; (8001930 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	21f0      	movs	r1, #240	; 0xf0
 800191e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001922:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001924:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001926:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001928:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800192a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800192c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800192e:	4770      	bx	lr
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001934:	6803      	ldr	r3, [r0, #0]
{
 8001936:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001938:	4c08      	ldr	r4, [pc, #32]	; (800195c <DMA_CalcBaseAndBitshift+0x28>)
{
 800193a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800193c:	b2d9      	uxtb	r1, r3
 800193e:	3910      	subs	r1, #16
 8001940:	2018      	movs	r0, #24
 8001942:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001946:	5c20      	ldrb	r0, [r4, r0]
 8001948:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800194a:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 800194e:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8001952:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001954:	bf88      	it	hi
 8001956:	3004      	addhi	r0, #4
 8001958:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 800195a:	bd10      	pop	{r4, pc}
 800195c:	08004fe0 	.word	0x08004fe0

08001960 <HAL_DMA_Init>:
{
 8001960:	b570      	push	{r4, r5, r6, lr}
 8001962:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001964:	f7ff fd46 	bl	80013f4 <HAL_GetTick>
 8001968:	4605      	mov	r5, r0
  if(hdma == NULL)
 800196a:	2c00      	cmp	r4, #0
 800196c:	d073      	beq.n	8001a56 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 800196e:	2302      	movs	r3, #2
 8001970:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001974:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001976:	2300      	movs	r3, #0
 8001978:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800197c:	6813      	ldr	r3, [r2, #0]
 800197e:	f023 0301 	bic.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001984:	6821      	ldr	r1, [r4, #0]
 8001986:	680b      	ldr	r3, [r1, #0]
 8001988:	07d8      	lsls	r0, r3, #31
 800198a:	d42f      	bmi.n	80019ec <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 800198c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800198e:	4d33      	ldr	r5, [pc, #204]	; (8001a5c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001990:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001992:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001994:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001998:	4313      	orrs	r3, r2
 800199a:	68e2      	ldr	r2, [r4, #12]
 800199c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199e:	6922      	ldr	r2, [r4, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	6962      	ldr	r2, [r4, #20]
 80019a4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a6:	69e2      	ldr	r2, [r4, #28]
 80019a8:	4303      	orrs	r3, r0
 80019aa:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ac:	6a22      	ldr	r2, [r4, #32]
 80019ae:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80019b2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019b4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b8:	bf02      	ittt	eq
 80019ba:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80019be:	4335      	orreq	r5, r6
 80019c0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80019c2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80019c4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019c8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80019cc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019d0:	d133      	bne.n	8001a3a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80019d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019d4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80019d6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019d8:	b37d      	cbz	r5, 8001a3a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019da:	b990      	cbnz	r0, 8001a02 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80019dc:	2a01      	cmp	r2, #1
 80019de:	d021      	beq.n	8001a24 <HAL_DMA_Init+0xc4>
 80019e0:	f032 0202 	bics.w	r2, r2, #2
 80019e4:	d129      	bne.n	8001a3a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e6:	01ea      	lsls	r2, r5, #7
 80019e8:	d527      	bpl.n	8001a3a <HAL_DMA_Init+0xda>
 80019ea:	e01e      	b.n	8001a2a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019ec:	f7ff fd02 	bl	80013f4 <HAL_GetTick>
 80019f0:	1b40      	subs	r0, r0, r5
 80019f2:	2805      	cmp	r0, #5
 80019f4:	d9c6      	bls.n	8001984 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019f6:	2320      	movs	r3, #32
 80019f8:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019fa:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80019fc:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001a00:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a02:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001a06:	d114      	bne.n	8001a32 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8001a08:	2a03      	cmp	r2, #3
 8001a0a:	d816      	bhi.n	8001a3a <HAL_DMA_Init+0xda>
 8001a0c:	a001      	add	r0, pc, #4	; (adr r0, 8001a14 <HAL_DMA_Init+0xb4>)
 8001a0e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001a12:	bf00      	nop
 8001a14:	08001a2b 	.word	0x08001a2b
 8001a18:	080019e7 	.word	0x080019e7
 8001a1c:	08001a2b 	.word	0x08001a2b
 8001a20:	08001a25 	.word	0x08001a25
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a24:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001a28:	d107      	bne.n	8001a3a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a2a:	2340      	movs	r3, #64	; 0x40
 8001a2c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001a2e:	2001      	movs	r0, #1
 8001a30:	e7e4      	b.n	80019fc <HAL_DMA_Init+0x9c>
    switch (tmp)
 8001a32:	2a02      	cmp	r2, #2
 8001a34:	d9f9      	bls.n	8001a2a <HAL_DMA_Init+0xca>
 8001a36:	2a03      	cmp	r2, #3
 8001a38:	d0d5      	beq.n	80019e6 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8001a3a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff ff79 	bl	8001934 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a42:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001a44:	233f      	movs	r3, #63	; 0x3f
 8001a46:	4093      	lsls	r3, r2
 8001a48:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001a50:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001a54:	e7d4      	b.n	8001a00 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
 8001a58:	e7d2      	b.n	8001a00 <HAL_DMA_Init+0xa0>
 8001a5a:	bf00      	nop
 8001a5c:	f010803f 	.word	0xf010803f

08001a60 <HAL_DMA_Start_IT>:
{
 8001a60:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001a62:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a66:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001a68:	2c01      	cmp	r4, #1
 8001a6a:	d031      	beq.n	8001ad0 <HAL_DMA_Start_IT+0x70>
 8001a6c:	2401      	movs	r4, #1
 8001a6e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a72:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001a76:	2c01      	cmp	r4, #1
 8001a78:	f04f 0500 	mov.w	r5, #0
 8001a7c:	f04f 0402 	mov.w	r4, #2
 8001a80:	d124      	bne.n	8001acc <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a82:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a86:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a88:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a8a:	6825      	ldr	r5, [r4, #0]
 8001a8c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001a90:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001a92:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a94:	6883      	ldr	r3, [r0, #8]
 8001a96:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001a98:	bf0e      	itee	eq
 8001a9a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001a9c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a9e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001aa2:	bf08      	it	eq
 8001aa4:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa6:	233f      	movs	r3, #63	; 0x3f
 8001aa8:	4093      	lsls	r3, r2
 8001aaa:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	f043 0316 	orr.w	r3, r3, #22
 8001ab2:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001ab4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001ab6:	b11b      	cbz	r3, 8001ac0 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	f043 0308 	orr.w	r3, r3, #8
 8001abe:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	f043 0301 	orr.w	r3, r3, #1
 8001ac6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac8:	2000      	movs	r0, #0
}
 8001aca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001acc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	e7fa      	b.n	8001aca <HAL_DMA_Start_IT+0x6a>

08001ad4 <HAL_DMA_IRQHandler>:
{
 8001ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ada:	4b5c      	ldr	r3, [pc, #368]	; (8001c4c <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001adc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ade:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae0:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001ae2:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae4:	2208      	movs	r2, #8
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	4232      	tst	r2, r6
{
 8001aea:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001aec:	d00c      	beq.n	8001b08 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aee:	6801      	ldr	r1, [r0, #0]
 8001af0:	6808      	ldr	r0, [r1, #0]
 8001af2:	0740      	lsls	r0, r0, #29
 8001af4:	d508      	bpl.n	8001b08 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001af6:	6808      	ldr	r0, [r1, #0]
 8001af8:	f020 0004 	bic.w	r0, r0, #4
 8001afc:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001afe:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	409a      	lsls	r2, r3
 8001b0c:	4232      	tst	r2, r6
 8001b0e:	d008      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b10:	6821      	ldr	r1, [r4, #0]
 8001b12:	6949      	ldr	r1, [r1, #20]
 8001b14:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b16:	bf41      	itttt	mi
 8001b18:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b1a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001b1c:	f042 0202 	orrmi.w	r2, r2, #2
 8001b20:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b22:	2204      	movs	r2, #4
 8001b24:	409a      	lsls	r2, r3
 8001b26:	4232      	tst	r2, r6
 8001b28:	d008      	beq.n	8001b3c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b2a:	6821      	ldr	r1, [r4, #0]
 8001b2c:	6809      	ldr	r1, [r1, #0]
 8001b2e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b30:	bf41      	itttt	mi
 8001b32:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b34:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001b36:	f042 0204 	orrmi.w	r2, r2, #4
 8001b3a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	409a      	lsls	r2, r3
 8001b40:	4232      	tst	r2, r6
 8001b42:	d010      	beq.n	8001b66 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	6819      	ldr	r1, [r3, #0]
 8001b48:	0709      	lsls	r1, r1, #28
 8001b4a:	d50c      	bpl.n	8001b66 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b4c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	0350      	lsls	r0, r2, #13
 8001b52:	d537      	bpl.n	8001bc4 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0319      	lsls	r1, r3, #12
 8001b58:	d401      	bmi.n	8001b5e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001b5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b5c:	e000      	b.n	8001b60 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001b5e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001b60:	b10b      	cbz	r3, 8001b66 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001b62:	4620      	mov	r0, r4
 8001b64:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b66:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001b68:	2220      	movs	r2, #32
 8001b6a:	408a      	lsls	r2, r1
 8001b6c:	4232      	tst	r2, r6
 8001b6e:	d03a      	beq.n	8001be6 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	06c6      	lsls	r6, r0, #27
 8001b76:	d536      	bpl.n	8001be6 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b78:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b7a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001b7e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b80:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b82:	d127      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b84:	f022 0216 	bic.w	r2, r2, #22
 8001b88:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b8a:	695a      	ldr	r2, [r3, #20]
 8001b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b90:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b92:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001b94:	b90a      	cbnz	r2, 8001b9a <HAL_DMA_IRQHandler+0xc6>
 8001b96:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001b98:	b11a      	cbz	r2, 8001ba2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	f022 0208 	bic.w	r2, r2, #8
 8001ba0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba2:	233f      	movs	r3, #63	; 0x3f
 8001ba4:	408b      	lsls	r3, r1
 8001ba6:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8001bb4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d045      	beq.n	8001c46 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8001bba:	4620      	mov	r0, r4
}
 8001bbc:	b003      	add	sp, #12
 8001bbe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001bc2:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc8:	bf5e      	ittt	pl
 8001bca:	681a      	ldrpl	r2, [r3, #0]
 8001bcc:	f022 0208 	bicpl.w	r2, r2, #8
 8001bd0:	601a      	strpl	r2, [r3, #0]
 8001bd2:	e7c2      	b.n	8001b5a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bd4:	0350      	lsls	r0, r2, #13
 8001bd6:	d527      	bpl.n	8001c28 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	0319      	lsls	r1, r3, #12
 8001bdc:	d431      	bmi.n	8001c42 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8001bde:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001be0:	b10b      	cbz	r3, 8001be6 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8001be2:	4620      	mov	r0, r4
 8001be4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001be6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001be8:	b36b      	cbz	r3, 8001c46 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001bec:	07da      	lsls	r2, r3, #31
 8001bee:	d519      	bpl.n	8001c24 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8001bf0:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001bf2:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001bf6:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001c00:	6813      	ldr	r3, [r2, #0]
 8001c02:	f023 0301 	bic.w	r3, r3, #1
 8001c06:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8001c08:	9b01      	ldr	r3, [sp, #4]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	42bb      	cmp	r3, r7
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	d802      	bhi.n	8001c18 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c12:	6813      	ldr	r3, [r2, #0]
 8001c14:	07db      	lsls	r3, r3, #31
 8001c16:	d4f7      	bmi.n	8001c08 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8001c24:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001c26:	e7c6      	b.n	8001bb6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8001c2e:	d108      	bne.n	8001c42 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c30:	6819      	ldr	r1, [r3, #0]
 8001c32:	f021 0110 	bic.w	r1, r1, #16
 8001c36:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8001c3e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8001c42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001c44:	e7cc      	b.n	8001be0 <HAL_DMA_IRQHandler+0x10c>
}
 8001c46:	b003      	add	sp, #12
 8001c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000000 	.word	0x20000000

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c54:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8001df4 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c58:	4a64      	ldr	r2, [pc, #400]	; (8001dec <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8001c5e:	2401      	movs	r4, #1
 8001c60:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c62:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8001c66:	43ac      	bics	r4, r5
 8001c68:	f040 80ad 	bne.w	8001dc6 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c6c:	684d      	ldr	r5, [r1, #4]
 8001c6e:	f005 0403 	and.w	r4, r5, #3
 8001c72:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c76:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c78:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c7a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c84:	d834      	bhi.n	8001cf0 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8001c86:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c88:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c8c:	68cf      	ldr	r7, [r1, #12]
 8001c8e:	fa07 f708 	lsl.w	r7, r7, r8
 8001c92:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001c96:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001c98:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9a:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9e:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001ca2:	409f      	lsls	r7, r3
 8001ca4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001ca8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001caa:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cac:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb0:	688f      	ldr	r7, [r1, #8]
 8001cb2:	fa07 f708 	lsl.w	r7, r7, r8
 8001cb6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cba:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8001cbc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	d119      	bne.n	8001cf4 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8001cc0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001cc4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001ccc:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cd0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001cd4:	f04f 0e0f 	mov.w	lr, #15
 8001cd8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001cdc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce0:	690f      	ldr	r7, [r1, #16]
 8001ce2:	fa07 f70b 	lsl.w	r7, r7, fp
 8001ce6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8001cea:	f8ca 7020 	str.w	r7, [sl, #32]
 8001cee:	e001      	b.n	8001cf4 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cf0:	2c03      	cmp	r4, #3
 8001cf2:	d1da      	bne.n	8001caa <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8001cf4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf6:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cfa:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfc:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cfe:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001d02:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d04:	d05f      	beq.n	8001dc6 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	f04f 0a00 	mov.w	sl, #0
 8001d0a:	f8cd a004 	str.w	sl, [sp, #4]
 8001d0e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d12:	4c37      	ldr	r4, [pc, #220]	; (8001df0 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d14:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001d18:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8001d1c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8001d20:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001d24:	9601      	str	r6, [sp, #4]
 8001d26:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d28:	f023 0603 	bic.w	r6, r3, #3
 8001d2c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001d30:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d34:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001d38:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d3c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001d40:	270f      	movs	r7, #15
 8001d42:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d46:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d4c:	d042      	beq.n	8001dd4 <HAL_GPIO_Init+0x184>
 8001d4e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d52:	42a0      	cmp	r0, r4
 8001d54:	d040      	beq.n	8001dd8 <HAL_GPIO_Init+0x188>
 8001d56:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d5a:	42a0      	cmp	r0, r4
 8001d5c:	d03e      	beq.n	8001ddc <HAL_GPIO_Init+0x18c>
 8001d5e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d62:	42a0      	cmp	r0, r4
 8001d64:	d03c      	beq.n	8001de0 <HAL_GPIO_Init+0x190>
 8001d66:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d6a:	42a0      	cmp	r0, r4
 8001d6c:	d03a      	beq.n	8001de4 <HAL_GPIO_Init+0x194>
 8001d6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d72:	42a0      	cmp	r0, r4
 8001d74:	d038      	beq.n	8001de8 <HAL_GPIO_Init+0x198>
 8001d76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001d7a:	42a0      	cmp	r0, r4
 8001d7c:	bf0c      	ite	eq
 8001d7e:	2406      	moveq	r4, #6
 8001d80:	2407      	movne	r4, #7
 8001d82:	fa04 f40e 	lsl.w	r4, r4, lr
 8001d86:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d88:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8001d8a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d90:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8001d92:	bf54      	ite	pl
 8001d94:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001d96:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8001d9a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8001d9c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d9e:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8001da0:	bf54      	ite	pl
 8001da2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001da4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8001da8:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8001daa:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dac:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8001dae:	bf54      	ite	pl
 8001db0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001db2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8001db6:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dba:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8001dbc:	bf54      	ite	pl
 8001dbe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001dc0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001dc4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	f47f af47 	bne.w	8001c5c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001dce:	b003      	add	sp, #12
 8001dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dd4:	4654      	mov	r4, sl
 8001dd6:	e7d4      	b.n	8001d82 <HAL_GPIO_Init+0x132>
 8001dd8:	2401      	movs	r4, #1
 8001dda:	e7d2      	b.n	8001d82 <HAL_GPIO_Init+0x132>
 8001ddc:	2402      	movs	r4, #2
 8001dde:	e7d0      	b.n	8001d82 <HAL_GPIO_Init+0x132>
 8001de0:	2403      	movs	r4, #3
 8001de2:	e7ce      	b.n	8001d82 <HAL_GPIO_Init+0x132>
 8001de4:	2404      	movs	r4, #4
 8001de6:	e7cc      	b.n	8001d82 <HAL_GPIO_Init+0x132>
 8001de8:	2405      	movs	r4, #5
 8001dea:	e7ca      	b.n	8001d82 <HAL_GPIO_Init+0x132>
 8001dec:	40013c00 	.word	0x40013c00
 8001df0:	40020000 	.word	0x40020000
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001df8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	9301      	str	r3, [sp, #4]
 8001dfe:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e00:	4d18      	ldr	r5, [pc, #96]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e04:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e08:	641a      	str	r2, [r3, #64]	; 0x40
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e10:	9301      	str	r3, [sp, #4]
 8001e12:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <HAL_PWREx_EnableOverDrive+0x70>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8001e1a:	f7ff faeb 	bl	80013f4 <HAL_GetTick>
 8001e1e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e20:	686b      	ldr	r3, [r5, #4]
 8001e22:	03da      	lsls	r2, r3, #15
 8001e24:	d50b      	bpl.n	8001e3e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e28:	4d0e      	ldr	r5, [pc, #56]	; (8001e64 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8001e2e:	f7ff fae1 	bl	80013f4 <HAL_GetTick>
 8001e32:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e34:	686b      	ldr	r3, [r5, #4]
 8001e36:	039b      	lsls	r3, r3, #14
 8001e38:	d50a      	bpl.n	8001e50 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	e006      	b.n	8001e4c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e3e:	f7ff fad9 	bl	80013f4 <HAL_GetTick>
 8001e42:	1b00      	subs	r0, r0, r4
 8001e44:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e48:	d9ea      	bls.n	8001e20 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8001e4a:	2003      	movs	r0, #3
}
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e50:	f7ff fad0 	bl	80013f4 <HAL_GetTick>
 8001e54:	1b00      	subs	r0, r0, r4
 8001e56:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001e5a:	d9eb      	bls.n	8001e34 <HAL_PWREx_EnableOverDrive+0x3c>
 8001e5c:	e7f5      	b.n	8001e4a <HAL_PWREx_EnableOverDrive+0x52>
 8001e5e:	bf00      	nop
 8001e60:	40023800 	.word	0x40023800
 8001e64:	40007000 	.word	0x40007000
 8001e68:	420e0000 	.word	0x420e0000

08001e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e70:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e72:	4604      	mov	r4, r0
 8001e74:	b910      	cbnz	r0, 8001e7c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8001e76:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8001e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e7c:	4b44      	ldr	r3, [pc, #272]	; (8001f90 <HAL_RCC_ClockConfig+0x124>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	f002 020f 	and.w	r2, r2, #15
 8001e84:	428a      	cmp	r2, r1
 8001e86:	d328      	bcc.n	8001eda <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e88:	6822      	ldr	r2, [r4, #0]
 8001e8a:	0797      	lsls	r7, r2, #30
 8001e8c:	d42d      	bmi.n	8001eea <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8e:	07d0      	lsls	r0, r2, #31
 8001e90:	d441      	bmi.n	8001f16 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e92:	4b3f      	ldr	r3, [pc, #252]	; (8001f90 <HAL_RCC_ClockConfig+0x124>)
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	f002 020f 	and.w	r2, r2, #15
 8001e9a:	42aa      	cmp	r2, r5
 8001e9c:	d866      	bhi.n	8001f6c <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	6822      	ldr	r2, [r4, #0]
 8001ea0:	0751      	lsls	r1, r2, #29
 8001ea2:	d46c      	bmi.n	8001f7e <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	0713      	lsls	r3, r2, #28
 8001ea6:	d507      	bpl.n	8001eb8 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ea8:	4a3a      	ldr	r2, [pc, #232]	; (8001f94 <HAL_RCC_ClockConfig+0x128>)
 8001eaa:	6921      	ldr	r1, [r4, #16]
 8001eac:	6893      	ldr	r3, [r2, #8]
 8001eae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001eb2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001eb6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001eb8:	f000 f894 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001ebc:	4b35      	ldr	r3, [pc, #212]	; (8001f94 <HAL_RCC_ClockConfig+0x128>)
 8001ebe:	4a36      	ldr	r2, [pc, #216]	; (8001f98 <HAL_RCC_ClockConfig+0x12c>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ec6:	5cd3      	ldrb	r3, [r2, r3]
 8001ec8:	40d8      	lsrs	r0, r3
 8001eca:	4b34      	ldr	r3, [pc, #208]	; (8001f9c <HAL_RCC_ClockConfig+0x130>)
 8001ecc:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001ece:	4b34      	ldr	r3, [pc, #208]	; (8001fa0 <HAL_RCC_ClockConfig+0x134>)
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	f7ff fa45 	bl	8001360 <HAL_InitTick>
  return HAL_OK;
 8001ed6:	2000      	movs	r0, #0
 8001ed8:	e7ce      	b.n	8001e78 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eda:	b2ca      	uxtb	r2, r1
 8001edc:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	428b      	cmp	r3, r1
 8001ee6:	d1c6      	bne.n	8001e76 <HAL_RCC_ClockConfig+0xa>
 8001ee8:	e7ce      	b.n	8001e88 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eea:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <HAL_RCC_ClockConfig+0x128>)
 8001eec:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ef0:	bf1e      	ittt	ne
 8001ef2:	6899      	ldrne	r1, [r3, #8]
 8001ef4:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8001ef8:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001efc:	bf42      	ittt	mi
 8001efe:	6899      	ldrmi	r1, [r3, #8]
 8001f00:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8001f04:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f06:	4923      	ldr	r1, [pc, #140]	; (8001f94 <HAL_RCC_ClockConfig+0x128>)
 8001f08:	68a0      	ldr	r0, [r4, #8]
 8001f0a:	688b      	ldr	r3, [r1, #8]
 8001f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f10:	4303      	orrs	r3, r0
 8001f12:	608b      	str	r3, [r1, #8]
 8001f14:	e7bb      	b.n	8001e8e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	6862      	ldr	r2, [r4, #4]
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <HAL_RCC_ClockConfig+0x128>)
 8001f1a:	2a01      	cmp	r2, #1
 8001f1c:	d11c      	bne.n	8001f58 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f24:	d0a7      	beq.n	8001e76 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f26:	4e1b      	ldr	r6, [pc, #108]	; (8001f94 <HAL_RCC_ClockConfig+0x128>)
 8001f28:	68b3      	ldr	r3, [r6, #8]
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f32:	f7ff fa5f 	bl	80013f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f36:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f3a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f3c:	68b3      	ldr	r3, [r6, #8]
 8001f3e:	6862      	ldr	r2, [r4, #4]
 8001f40:	f003 030c 	and.w	r3, r3, #12
 8001f44:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f48:	d0a3      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4a:	f7ff fa53 	bl	80013f4 <HAL_GetTick>
 8001f4e:	1bc0      	subs	r0, r0, r7
 8001f50:	4540      	cmp	r0, r8
 8001f52:	d9f3      	bls.n	8001f3c <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8001f54:	2003      	movs	r0, #3
 8001f56:	e78f      	b.n	8001e78 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f58:	1e91      	subs	r1, r2, #2
 8001f5a:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f5c:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f5e:	d802      	bhi.n	8001f66 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001f64:	e7de      	b.n	8001f24 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f66:	f013 0f02 	tst.w	r3, #2
 8001f6a:	e7db      	b.n	8001f24 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6c:	b2ea      	uxtb	r2, r5
 8001f6e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 030f 	and.w	r3, r3, #15
 8001f76:	42ab      	cmp	r3, r5
 8001f78:	f47f af7d 	bne.w	8001e76 <HAL_RCC_ClockConfig+0xa>
 8001f7c:	e78f      	b.n	8001e9e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7e:	4905      	ldr	r1, [pc, #20]	; (8001f94 <HAL_RCC_ClockConfig+0x128>)
 8001f80:	68e0      	ldr	r0, [r4, #12]
 8001f82:	688b      	ldr	r3, [r1, #8]
 8001f84:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001f88:	4303      	orrs	r3, r0
 8001f8a:	608b      	str	r3, [r1, #8]
 8001f8c:	e78a      	b.n	8001ea4 <HAL_RCC_ClockConfig+0x38>
 8001f8e:	bf00      	nop
 8001f90:	40023c00 	.word	0x40023c00
 8001f94:	40023800 	.word	0x40023800
 8001f98:	08004fc8 	.word	0x08004fc8
 8001f9c:	20000000 	.word	0x20000000
 8001fa0:	20000008 	.word	0x20000008

08001fa4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001fa6:	4a05      	ldr	r2, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK1Freq+0x18>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001fb2:	6810      	ldr	r0, [r2, #0]
}
 8001fb4:	40d8      	lsrs	r0, r3
 8001fb6:	4770      	bx	lr
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	08004fd8 	.word	0x08004fd8
 8001fc0:	20000000 	.word	0x20000000

08001fc4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001fc6:	4a05      	ldr	r2, [pc, #20]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x18>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	4a03      	ldr	r2, [pc, #12]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001fd2:	6810      	ldr	r0, [r2, #0]
}
 8001fd4:	40d8      	lsrs	r0, r3
 8001fd6:	4770      	bx	lr
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	08004fd8 	.word	0x08004fd8
 8001fe0:	20000000 	.word	0x20000000

08001fe4 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe4:	4920      	ldr	r1, [pc, #128]	; (8002068 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8001fe6:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fe8:	688b      	ldr	r3, [r1, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d007      	beq.n	8002002 <HAL_RCC_GetSysClockFreq+0x1e>
 8001ff2:	2b0c      	cmp	r3, #12
 8001ff4:	d020      	beq.n	8002038 <HAL_RCC_GetSysClockFreq+0x54>
 8001ff6:	481d      	ldr	r0, [pc, #116]	; (800206c <HAL_RCC_GetSysClockFreq+0x88>)
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001ffa:	2b04      	cmp	r3, #4
 8001ffc:	bf08      	it	eq
 8001ffe:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002000:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002002:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002004:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002006:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002008:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200c:	bf14      	ite	ne
 800200e:	4818      	ldrne	r0, [pc, #96]	; (8002070 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002010:	4816      	ldreq	r0, [pc, #88]	; (800206c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002016:	bf18      	it	ne
 8002018:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800201a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201e:	fba1 0100 	umull	r0, r1, r1, r0
 8002022:	f7fe fde1 	bl	8000be8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_RCC_GetSysClockFreq+0x84>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800202e:	3301      	adds	r3, #1
 8002030:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8002032:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002036:	e7e3      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002038:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800203a:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800203c:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800203e:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002042:	bf14      	ite	ne
 8002044:	480a      	ldrne	r0, [pc, #40]	; (8002070 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002046:	4809      	ldreq	r0, [pc, #36]	; (800206c <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002048:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800204c:	bf18      	it	ne
 800204e:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002050:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002054:	fba1 0100 	umull	r0, r1, r1, r0
 8002058:	f7fe fdc6 	bl	8000be8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800205c:	4b02      	ldr	r3, [pc, #8]	; (8002068 <HAL_RCC_GetSysClockFreq+0x84>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002064:	e7e5      	b.n	8002032 <HAL_RCC_GetSysClockFreq+0x4e>
 8002066:	bf00      	nop
 8002068:	40023800 	.word	0x40023800
 800206c:	00f42400 	.word	0x00f42400
 8002070:	017d7840 	.word	0x017d7840

08002074 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002078:	4604      	mov	r4, r0
 800207a:	2800      	cmp	r0, #0
 800207c:	d030      	beq.n	80020e0 <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800207e:	6803      	ldr	r3, [r0, #0]
 8002080:	07df      	lsls	r7, r3, #31
 8002082:	d410      	bmi.n	80020a6 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	079e      	lsls	r6, r3, #30
 8002088:	d463      	bmi.n	8002152 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208a:	6823      	ldr	r3, [r4, #0]
 800208c:	071a      	lsls	r2, r3, #28
 800208e:	f100 80ad 	bmi.w	80021ec <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	075b      	lsls	r3, r3, #29
 8002096:	f100 80cd 	bmi.w	8002234 <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800209a:	69a0      	ldr	r0, [r4, #24]
 800209c:	2800      	cmp	r0, #0
 800209e:	f040 8135 	bne.w	800230c <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80020a2:	2000      	movs	r0, #0
 80020a4:	e034      	b.n	8002110 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020a6:	4b96      	ldr	r3, [pc, #600]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	f002 020c 	and.w	r2, r2, #12
 80020ae:	2a04      	cmp	r2, #4
 80020b0:	d00f      	beq.n	80020d2 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020b8:	2a08      	cmp	r2, #8
 80020ba:	d102      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	0255      	lsls	r5, r2, #9
 80020c0:	d407      	bmi.n	80020d2 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020c8:	2a0c      	cmp	r2, #12
 80020ca:	d10b      	bne.n	80020e4 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	0258      	lsls	r0, r3, #9
 80020d0:	d508      	bpl.n	80020e4 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020d2:	4b8b      	ldr	r3, [pc, #556]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0399      	lsls	r1, r3, #14
 80020d8:	d5d4      	bpl.n	8002084 <HAL_RCC_OscConfig+0x10>
 80020da:	6863      	ldr	r3, [r4, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d1d1      	bne.n	8002084 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80020e0:	2001      	movs	r0, #1
 80020e2:	e015      	b.n	8002110 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020e4:	6863      	ldr	r3, [r4, #4]
 80020e6:	4d86      	ldr	r5, [pc, #536]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d113      	bne.n	8002116 <HAL_RCC_OscConfig+0xa2>
 80020ee:	682b      	ldr	r3, [r5, #0]
 80020f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80020f6:	f7ff f97d 	bl	80013f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4e81      	ldr	r6, [pc, #516]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80020fc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	6833      	ldr	r3, [r6, #0]
 8002100:	039a      	lsls	r2, r3, #14
 8002102:	d4bf      	bmi.n	8002084 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002104:	f7ff f976 	bl	80013f4 <HAL_GetTick>
 8002108:	1b40      	subs	r0, r0, r5
 800210a:	2864      	cmp	r0, #100	; 0x64
 800210c:	d9f7      	bls.n	80020fe <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800210e:	2003      	movs	r0, #3
}
 8002110:	b002      	add	sp, #8
 8002112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002116:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211a:	d104      	bne.n	8002126 <HAL_RCC_OscConfig+0xb2>
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	602b      	str	r3, [r5, #0]
 8002124:	e7e3      	b.n	80020ee <HAL_RCC_OscConfig+0x7a>
 8002126:	682a      	ldr	r2, [r5, #0]
 8002128:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800212c:	602a      	str	r2, [r5, #0]
 800212e:	682a      	ldr	r2, [r5, #0]
 8002130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002134:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1dd      	bne.n	80020f6 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800213a:	f7ff f95b 	bl	80013f4 <HAL_GetTick>
 800213e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002140:	682b      	ldr	r3, [r5, #0]
 8002142:	039b      	lsls	r3, r3, #14
 8002144:	d59e      	bpl.n	8002084 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002146:	f7ff f955 	bl	80013f4 <HAL_GetTick>
 800214a:	1b80      	subs	r0, r0, r6
 800214c:	2864      	cmp	r0, #100	; 0x64
 800214e:	d9f7      	bls.n	8002140 <HAL_RCC_OscConfig+0xcc>
 8002150:	e7dd      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002152:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	f012 0f0c 	tst.w	r2, #12
 800215a:	d00f      	beq.n	800217c <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002162:	2a08      	cmp	r2, #8
 8002164:	d102      	bne.n	800216c <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	0257      	lsls	r7, r2, #9
 800216a:	d507      	bpl.n	800217c <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002172:	2a0c      	cmp	r2, #12
 8002174:	d111      	bne.n	800219a <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	025e      	lsls	r6, r3, #9
 800217a:	d40e      	bmi.n	800219a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217c:	4a60      	ldr	r2, [pc, #384]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	079d      	lsls	r5, r3, #30
 8002182:	d502      	bpl.n	800218a <HAL_RCC_OscConfig+0x116>
 8002184:	68e3      	ldr	r3, [r4, #12]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d1aa      	bne.n	80020e0 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218a:	6813      	ldr	r3, [r2, #0]
 800218c:	6921      	ldr	r1, [r4, #16]
 800218e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002192:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002196:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002198:	e777      	b.n	800208a <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800219a:	68e2      	ldr	r2, [r4, #12]
 800219c:	4b59      	ldr	r3, [pc, #356]	; (8002304 <HAL_RCC_OscConfig+0x290>)
 800219e:	b1b2      	cbz	r2, 80021ce <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 80021a0:	2201      	movs	r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021a4:	f7ff f926 	bl	80013f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	4d55      	ldr	r5, [pc, #340]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80021aa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ac:	682b      	ldr	r3, [r5, #0]
 80021ae:	0798      	lsls	r0, r3, #30
 80021b0:	d507      	bpl.n	80021c2 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b2:	682b      	ldr	r3, [r5, #0]
 80021b4:	6922      	ldr	r2, [r4, #16]
 80021b6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80021ba:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80021be:	602b      	str	r3, [r5, #0]
 80021c0:	e763      	b.n	800208a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021c2:	f7ff f917 	bl	80013f4 <HAL_GetTick>
 80021c6:	1b80      	subs	r0, r0, r6
 80021c8:	2802      	cmp	r0, #2
 80021ca:	d9ef      	bls.n	80021ac <HAL_RCC_OscConfig+0x138>
 80021cc:	e79f      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80021ce:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021d0:	f7ff f910 	bl	80013f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d4:	4e4a      	ldr	r6, [pc, #296]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80021d6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d8:	6833      	ldr	r3, [r6, #0]
 80021da:	0799      	lsls	r1, r3, #30
 80021dc:	f57f af55 	bpl.w	800208a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021e0:	f7ff f908 	bl	80013f4 <HAL_GetTick>
 80021e4:	1b40      	subs	r0, r0, r5
 80021e6:	2802      	cmp	r0, #2
 80021e8:	d9f6      	bls.n	80021d8 <HAL_RCC_OscConfig+0x164>
 80021ea:	e790      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80021ec:	6962      	ldr	r2, [r4, #20]
 80021ee:	4b45      	ldr	r3, [pc, #276]	; (8002304 <HAL_RCC_OscConfig+0x290>)
 80021f0:	b182      	cbz	r2, 8002214 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 80021f2:	2201      	movs	r2, #1
 80021f4:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80021f8:	f7ff f8fc 	bl	80013f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fc:	4e40      	ldr	r6, [pc, #256]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80021fe:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002200:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002202:	079f      	lsls	r7, r3, #30
 8002204:	f53f af45 	bmi.w	8002092 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002208:	f7ff f8f4 	bl	80013f4 <HAL_GetTick>
 800220c:	1b40      	subs	r0, r0, r5
 800220e:	2802      	cmp	r0, #2
 8002210:	d9f6      	bls.n	8002200 <HAL_RCC_OscConfig+0x18c>
 8002212:	e77c      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8002214:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002218:	f7ff f8ec 	bl	80013f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221c:	4e38      	ldr	r6, [pc, #224]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800221e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002222:	0798      	lsls	r0, r3, #30
 8002224:	f57f af35 	bpl.w	8002092 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff f8e4 	bl	80013f4 <HAL_GetTick>
 800222c:	1b40      	subs	r0, r0, r5
 800222e:	2802      	cmp	r0, #2
 8002230:	d9f6      	bls.n	8002220 <HAL_RCC_OscConfig+0x1ac>
 8002232:	e76c      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002234:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
 8002236:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002238:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 800223c:	d128      	bne.n	8002290 <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	9201      	str	r2, [sp, #4]
 8002240:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002242:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002246:	641a      	str	r2, [r3, #64]	; 0x40
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	9301      	str	r3, [sp, #4]
 8002250:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002252:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002254:	4d2c      	ldr	r5, [pc, #176]	; (8002308 <HAL_RCC_OscConfig+0x294>)
 8002256:	682b      	ldr	r3, [r5, #0]
 8002258:	05d9      	lsls	r1, r3, #23
 800225a:	d51b      	bpl.n	8002294 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225c:	68a3      	ldr	r3, [r4, #8]
 800225e:	4d28      	ldr	r5, [pc, #160]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
 8002260:	2b01      	cmp	r3, #1
 8002262:	d127      	bne.n	80022b4 <HAL_RCC_OscConfig+0x240>
 8002264:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002266:	f043 0301 	orr.w	r3, r3, #1
 800226a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800226c:	f7ff f8c2 	bl	80013f4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002270:	4e23      	ldr	r6, [pc, #140]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002272:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002274:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002278:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800227a:	079b      	lsls	r3, r3, #30
 800227c:	d539      	bpl.n	80022f2 <HAL_RCC_OscConfig+0x27e>
    if(pwrclkchanged == SET)
 800227e:	2f00      	cmp	r7, #0
 8002280:	f43f af0b 	beq.w	800209a <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4a1e      	ldr	r2, [pc, #120]	; (8002300 <HAL_RCC_OscConfig+0x28c>)
 8002286:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228c:	6413      	str	r3, [r2, #64]	; 0x40
 800228e:	e704      	b.n	800209a <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8002290:	2700      	movs	r7, #0
 8002292:	e7df      	b.n	8002254 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002294:	682b      	ldr	r3, [r5, #0]
 8002296:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800229c:	f7ff f8aa 	bl	80013f4 <HAL_GetTick>
 80022a0:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	682b      	ldr	r3, [r5, #0]
 80022a4:	05da      	lsls	r2, r3, #23
 80022a6:	d4d9      	bmi.n	800225c <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a8:	f7ff f8a4 	bl	80013f4 <HAL_GetTick>
 80022ac:	1b80      	subs	r0, r0, r6
 80022ae:	2802      	cmp	r0, #2
 80022b0:	d9f7      	bls.n	80022a2 <HAL_RCC_OscConfig+0x22e>
 80022b2:	e72c      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	d104      	bne.n	80022c2 <HAL_RCC_OscConfig+0x24e>
 80022b8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022ba:	f043 0304 	orr.w	r3, r3, #4
 80022be:	672b      	str	r3, [r5, #112]	; 0x70
 80022c0:	e7d0      	b.n	8002264 <HAL_RCC_OscConfig+0x1f0>
 80022c2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80022c4:	f022 0201 	bic.w	r2, r2, #1
 80022c8:	672a      	str	r2, [r5, #112]	; 0x70
 80022ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80022cc:	f022 0204 	bic.w	r2, r2, #4
 80022d0:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1ca      	bne.n	800226c <HAL_RCC_OscConfig+0x1f8>
      tickstart = HAL_GetTick();
 80022d6:	f7ff f88d 	bl	80013f4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022da:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80022de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80022e2:	0798      	lsls	r0, r3, #30
 80022e4:	d5cb      	bpl.n	800227e <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e6:	f7ff f885 	bl	80013f4 <HAL_GetTick>
 80022ea:	1b80      	subs	r0, r0, r6
 80022ec:	4540      	cmp	r0, r8
 80022ee:	d9f7      	bls.n	80022e0 <HAL_RCC_OscConfig+0x26c>
 80022f0:	e70d      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022f2:	f7ff f87f 	bl	80013f4 <HAL_GetTick>
 80022f6:	1b40      	subs	r0, r0, r5
 80022f8:	4540      	cmp	r0, r8
 80022fa:	d9bd      	bls.n	8002278 <HAL_RCC_OscConfig+0x204>
 80022fc:	e707      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	42470000 	.word	0x42470000
 8002308:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800230c:	4d3b      	ldr	r5, [pc, #236]	; (80023fc <HAL_RCC_OscConfig+0x388>)
 800230e:	68ab      	ldr	r3, [r5, #8]
 8002310:	f003 030c 	and.w	r3, r3, #12
 8002314:	2b08      	cmp	r3, #8
 8002316:	d040      	beq.n	800239a <HAL_RCC_OscConfig+0x326>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002318:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_OscConfig+0x38c>)
 800231a:	2200      	movs	r2, #0
 800231c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800231e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	d12e      	bne.n	8002380 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8002322:	f7ff f867 	bl	80013f4 <HAL_GetTick>
 8002326:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002328:	682b      	ldr	r3, [r5, #0]
 800232a:	0199      	lsls	r1, r3, #6
 800232c:	d422      	bmi.n	8002374 <HAL_RCC_OscConfig+0x300>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800232e:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002332:	4313      	orrs	r3, r2
 8002334:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002336:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800233a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800233c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002340:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002342:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002346:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002348:	0852      	lsrs	r2, r2, #1
 800234a:	3a01      	subs	r2, #1
 800234c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002350:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002352:	4b2b      	ldr	r3, [pc, #172]	; (8002400 <HAL_RCC_OscConfig+0x38c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002354:	4d29      	ldr	r5, [pc, #164]	; (80023fc <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_ENABLE();
 8002356:	2201      	movs	r2, #1
 8002358:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800235a:	f7ff f84b 	bl	80013f4 <HAL_GetTick>
 800235e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	019a      	lsls	r2, r3, #6
 8002364:	f53f ae9d 	bmi.w	80020a2 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002368:	f7ff f844 	bl	80013f4 <HAL_GetTick>
 800236c:	1b00      	subs	r0, r0, r4
 800236e:	2802      	cmp	r0, #2
 8002370:	d9f6      	bls.n	8002360 <HAL_RCC_OscConfig+0x2ec>
 8002372:	e6cc      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002374:	f7ff f83e 	bl	80013f4 <HAL_GetTick>
 8002378:	1b80      	subs	r0, r0, r6
 800237a:	2802      	cmp	r0, #2
 800237c:	d9d4      	bls.n	8002328 <HAL_RCC_OscConfig+0x2b4>
 800237e:	e6c6      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8002380:	f7ff f838 	bl	80013f4 <HAL_GetTick>
 8002384:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002386:	682b      	ldr	r3, [r5, #0]
 8002388:	019b      	lsls	r3, r3, #6
 800238a:	f57f ae8a 	bpl.w	80020a2 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238e:	f7ff f831 	bl	80013f4 <HAL_GetTick>
 8002392:	1b00      	subs	r0, r0, r4
 8002394:	2802      	cmp	r0, #2
 8002396:	d9f6      	bls.n	8002386 <HAL_RCC_OscConfig+0x312>
 8002398:	e6b9      	b.n	800210e <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239a:	2801      	cmp	r0, #1
 800239c:	f43f aeb8 	beq.w	8002110 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 80023a0:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a2:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a4:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023a8:	4291      	cmp	r1, r2
 80023aa:	f47f ae99 	bne.w	80020e0 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ae:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b4:	428a      	cmp	r2, r1
 80023b6:	f47f ae93 	bne.w	80020e0 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023bc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80023c0:	401a      	ands	r2, r3
 80023c2:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80023c6:	f47f ae8b 	bne.w	80020e0 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023cc:	0852      	lsrs	r2, r2, #1
 80023ce:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80023d2:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023d4:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80023d8:	f47f ae82 	bne.w	80020e0 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023dc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80023de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023e2:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80023e6:	f47f ae7b 	bne.w	80020e0 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80023ea:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80023ec:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80023f0:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80023f4:	f43f ae55 	beq.w	80020a2 <HAL_RCC_OscConfig+0x2e>
 80023f8:	e672      	b.n	80020e0 <HAL_RCC_OscConfig+0x6c>
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470000 	.word	0x42470000

08002404 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002404:	6802      	ldr	r2, [r0, #0]
 8002406:	68c1      	ldr	r1, [r0, #12]
 8002408:	6913      	ldr	r3, [r2, #16]
 800240a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800240e:	430b      	orrs	r3, r1
{
 8002410:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002412:	6113      	str	r3, [r2, #16]
{
 8002414:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002416:	6883      	ldr	r3, [r0, #8]
 8002418:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800241a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800241c:	4303      	orrs	r3, r0
 800241e:	6968      	ldr	r0, [r5, #20]
 8002420:	4303      	orrs	r3, r0
 8002422:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002424:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002428:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800242c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800242e:	430b      	orrs	r3, r1
 8002430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002432:	6953      	ldr	r3, [r2, #20]
 8002434:	69a9      	ldr	r1, [r5, #24]
 8002436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243a:	430b      	orrs	r3, r1
 800243c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <UART_SetConfig+0xb8>)
 8002440:	429a      	cmp	r2, r3
 8002442:	d003      	beq.n	800244c <UART_SetConfig+0x48>
 8002444:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002448:	429a      	cmp	r2, r3
 800244a:	d123      	bne.n	8002494 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800244c:	f7ff fdba 	bl	8001fc4 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002450:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002452:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002458:	e9d5 4600 	ldrd	r4, r6, [r5]
 800245c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002460:	d11b      	bne.n	800249a <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002462:	19b2      	adds	r2, r6, r6
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	415b      	adcs	r3, r3
 800246a:	f7fe fbbd 	bl	8000be8 <__aeabi_uldivmod>
 800246e:	2164      	movs	r1, #100	; 0x64
 8002470:	fbb0 f5f1 	udiv	r5, r0, r1
 8002474:	fb01 0315 	mls	r3, r1, r5, r0
 8002478:	00db      	lsls	r3, r3, #3
 800247a:	3332      	adds	r3, #50	; 0x32
 800247c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002480:	f003 0207 	and.w	r2, r3, #7
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800248a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800248e:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002490:	60a3      	str	r3, [r4, #8]
  }
}
 8002492:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002494:	f7ff fd86 	bl	8001fa4 <HAL_RCC_GetPCLK1Freq>
 8002498:	e7da      	b.n	8002450 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800249a:	00b2      	lsls	r2, r6, #2
 800249c:	0fb3      	lsrs	r3, r6, #30
 800249e:	f7fe fba3 	bl	8000be8 <__aeabi_uldivmod>
 80024a2:	2264      	movs	r2, #100	; 0x64
 80024a4:	fbb0 f1f2 	udiv	r1, r0, r2
 80024a8:	fb02 0311 	mls	r3, r2, r1, r0
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	3332      	adds	r3, #50	; 0x32
 80024b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80024b4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80024b8:	e7ea      	b.n	8002490 <UART_SetConfig+0x8c>
 80024ba:	bf00      	nop
 80024bc:	40011000 	.word	0x40011000

080024c0 <HAL_UART_Init>:
{
 80024c0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80024c2:	4604      	mov	r4, r0
 80024c4:	b340      	cbz	r0, 8002518 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80024c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80024ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80024ce:	b91b      	cbnz	r3, 80024d8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80024d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80024d4:	f7fe fee4 	bl	80012a0 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80024d8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80024da:	2324      	movs	r3, #36	; 0x24
 80024dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80024e0:	68d3      	ldr	r3, [r2, #12]
 80024e2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80024e6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7ff ff8b 	bl	8002404 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	691a      	ldr	r2, [r3, #16]
 80024f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024f6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024fe:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002506:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002508:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800250a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250c:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800250e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002512:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002516:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002518:	2001      	movs	r0, #1
 800251a:	e7fc      	b.n	8002516 <HAL_UART_Init+0x56>

0800251c <__errno>:
 800251c:	4b01      	ldr	r3, [pc, #4]	; (8002524 <__errno+0x8>)
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000000c 	.word	0x2000000c

08002528 <__libc_init_array>:
 8002528:	b570      	push	{r4, r5, r6, lr}
 800252a:	4d0d      	ldr	r5, [pc, #52]	; (8002560 <__libc_init_array+0x38>)
 800252c:	4c0d      	ldr	r4, [pc, #52]	; (8002564 <__libc_init_array+0x3c>)
 800252e:	1b64      	subs	r4, r4, r5
 8002530:	10a4      	asrs	r4, r4, #2
 8002532:	2600      	movs	r6, #0
 8002534:	42a6      	cmp	r6, r4
 8002536:	d109      	bne.n	800254c <__libc_init_array+0x24>
 8002538:	4d0b      	ldr	r5, [pc, #44]	; (8002568 <__libc_init_array+0x40>)
 800253a:	4c0c      	ldr	r4, [pc, #48]	; (800256c <__libc_init_array+0x44>)
 800253c:	f002 fd38 	bl	8004fb0 <_init>
 8002540:	1b64      	subs	r4, r4, r5
 8002542:	10a4      	asrs	r4, r4, #2
 8002544:	2600      	movs	r6, #0
 8002546:	42a6      	cmp	r6, r4
 8002548:	d105      	bne.n	8002556 <__libc_init_array+0x2e>
 800254a:	bd70      	pop	{r4, r5, r6, pc}
 800254c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002550:	4798      	blx	r3
 8002552:	3601      	adds	r6, #1
 8002554:	e7ee      	b.n	8002534 <__libc_init_array+0xc>
 8002556:	f855 3b04 	ldr.w	r3, [r5], #4
 800255a:	4798      	blx	r3
 800255c:	3601      	adds	r6, #1
 800255e:	e7f2      	b.n	8002546 <__libc_init_array+0x1e>
 8002560:	080053cc 	.word	0x080053cc
 8002564:	080053cc 	.word	0x080053cc
 8002568:	080053cc 	.word	0x080053cc
 800256c:	080053d0 	.word	0x080053d0

08002570 <memset>:
 8002570:	4402      	add	r2, r0
 8002572:	4603      	mov	r3, r0
 8002574:	4293      	cmp	r3, r2
 8002576:	d100      	bne.n	800257a <memset+0xa>
 8002578:	4770      	bx	lr
 800257a:	f803 1b01 	strb.w	r1, [r3], #1
 800257e:	e7f9      	b.n	8002574 <memset+0x4>

08002580 <__cvt>:
 8002580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002584:	ec55 4b10 	vmov	r4, r5, d0
 8002588:	2d00      	cmp	r5, #0
 800258a:	460e      	mov	r6, r1
 800258c:	4619      	mov	r1, r3
 800258e:	462b      	mov	r3, r5
 8002590:	bfbb      	ittet	lt
 8002592:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002596:	461d      	movlt	r5, r3
 8002598:	2300      	movge	r3, #0
 800259a:	232d      	movlt	r3, #45	; 0x2d
 800259c:	700b      	strb	r3, [r1, #0]
 800259e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80025a4:	4691      	mov	r9, r2
 80025a6:	f023 0820 	bic.w	r8, r3, #32
 80025aa:	bfbc      	itt	lt
 80025ac:	4622      	movlt	r2, r4
 80025ae:	4614      	movlt	r4, r2
 80025b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80025b4:	d005      	beq.n	80025c2 <__cvt+0x42>
 80025b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80025ba:	d100      	bne.n	80025be <__cvt+0x3e>
 80025bc:	3601      	adds	r6, #1
 80025be:	2102      	movs	r1, #2
 80025c0:	e000      	b.n	80025c4 <__cvt+0x44>
 80025c2:	2103      	movs	r1, #3
 80025c4:	ab03      	add	r3, sp, #12
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	ab02      	add	r3, sp, #8
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	ec45 4b10 	vmov	d0, r4, r5
 80025d0:	4653      	mov	r3, sl
 80025d2:	4632      	mov	r2, r6
 80025d4:	f000 fccc 	bl	8002f70 <_dtoa_r>
 80025d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80025dc:	4607      	mov	r7, r0
 80025de:	d102      	bne.n	80025e6 <__cvt+0x66>
 80025e0:	f019 0f01 	tst.w	r9, #1
 80025e4:	d022      	beq.n	800262c <__cvt+0xac>
 80025e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80025ea:	eb07 0906 	add.w	r9, r7, r6
 80025ee:	d110      	bne.n	8002612 <__cvt+0x92>
 80025f0:	783b      	ldrb	r3, [r7, #0]
 80025f2:	2b30      	cmp	r3, #48	; 0x30
 80025f4:	d10a      	bne.n	800260c <__cvt+0x8c>
 80025f6:	2200      	movs	r2, #0
 80025f8:	2300      	movs	r3, #0
 80025fa:	4620      	mov	r0, r4
 80025fc:	4629      	mov	r1, r5
 80025fe:	f7fe fa83 	bl	8000b08 <__aeabi_dcmpeq>
 8002602:	b918      	cbnz	r0, 800260c <__cvt+0x8c>
 8002604:	f1c6 0601 	rsb	r6, r6, #1
 8002608:	f8ca 6000 	str.w	r6, [sl]
 800260c:	f8da 3000 	ldr.w	r3, [sl]
 8002610:	4499      	add	r9, r3
 8002612:	2200      	movs	r2, #0
 8002614:	2300      	movs	r3, #0
 8002616:	4620      	mov	r0, r4
 8002618:	4629      	mov	r1, r5
 800261a:	f7fe fa75 	bl	8000b08 <__aeabi_dcmpeq>
 800261e:	b108      	cbz	r0, 8002624 <__cvt+0xa4>
 8002620:	f8cd 900c 	str.w	r9, [sp, #12]
 8002624:	2230      	movs	r2, #48	; 0x30
 8002626:	9b03      	ldr	r3, [sp, #12]
 8002628:	454b      	cmp	r3, r9
 800262a:	d307      	bcc.n	800263c <__cvt+0xbc>
 800262c:	9b03      	ldr	r3, [sp, #12]
 800262e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002630:	1bdb      	subs	r3, r3, r7
 8002632:	4638      	mov	r0, r7
 8002634:	6013      	str	r3, [r2, #0]
 8002636:	b004      	add	sp, #16
 8002638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800263c:	1c59      	adds	r1, r3, #1
 800263e:	9103      	str	r1, [sp, #12]
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e7f0      	b.n	8002626 <__cvt+0xa6>

08002644 <__exponent>:
 8002644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002646:	4603      	mov	r3, r0
 8002648:	2900      	cmp	r1, #0
 800264a:	bfb8      	it	lt
 800264c:	4249      	neglt	r1, r1
 800264e:	f803 2b02 	strb.w	r2, [r3], #2
 8002652:	bfb4      	ite	lt
 8002654:	222d      	movlt	r2, #45	; 0x2d
 8002656:	222b      	movge	r2, #43	; 0x2b
 8002658:	2909      	cmp	r1, #9
 800265a:	7042      	strb	r2, [r0, #1]
 800265c:	dd2a      	ble.n	80026b4 <__exponent+0x70>
 800265e:	f10d 0407 	add.w	r4, sp, #7
 8002662:	46a4      	mov	ip, r4
 8002664:	270a      	movs	r7, #10
 8002666:	46a6      	mov	lr, r4
 8002668:	460a      	mov	r2, r1
 800266a:	fb91 f6f7 	sdiv	r6, r1, r7
 800266e:	fb07 1516 	mls	r5, r7, r6, r1
 8002672:	3530      	adds	r5, #48	; 0x30
 8002674:	2a63      	cmp	r2, #99	; 0x63
 8002676:	f104 34ff 	add.w	r4, r4, #4294967295
 800267a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800267e:	4631      	mov	r1, r6
 8002680:	dcf1      	bgt.n	8002666 <__exponent+0x22>
 8002682:	3130      	adds	r1, #48	; 0x30
 8002684:	f1ae 0502 	sub.w	r5, lr, #2
 8002688:	f804 1c01 	strb.w	r1, [r4, #-1]
 800268c:	1c44      	adds	r4, r0, #1
 800268e:	4629      	mov	r1, r5
 8002690:	4561      	cmp	r1, ip
 8002692:	d30a      	bcc.n	80026aa <__exponent+0x66>
 8002694:	f10d 0209 	add.w	r2, sp, #9
 8002698:	eba2 020e 	sub.w	r2, r2, lr
 800269c:	4565      	cmp	r5, ip
 800269e:	bf88      	it	hi
 80026a0:	2200      	movhi	r2, #0
 80026a2:	4413      	add	r3, r2
 80026a4:	1a18      	subs	r0, r3, r0
 80026a6:	b003      	add	sp, #12
 80026a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80026ae:	f804 2f01 	strb.w	r2, [r4, #1]!
 80026b2:	e7ed      	b.n	8002690 <__exponent+0x4c>
 80026b4:	2330      	movs	r3, #48	; 0x30
 80026b6:	3130      	adds	r1, #48	; 0x30
 80026b8:	7083      	strb	r3, [r0, #2]
 80026ba:	70c1      	strb	r1, [r0, #3]
 80026bc:	1d03      	adds	r3, r0, #4
 80026be:	e7f1      	b.n	80026a4 <__exponent+0x60>

080026c0 <_printf_float>:
 80026c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026c4:	ed2d 8b02 	vpush	{d8}
 80026c8:	b08d      	sub	sp, #52	; 0x34
 80026ca:	460c      	mov	r4, r1
 80026cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80026d0:	4616      	mov	r6, r2
 80026d2:	461f      	mov	r7, r3
 80026d4:	4605      	mov	r5, r0
 80026d6:	f001 fa39 	bl	8003b4c <_localeconv_r>
 80026da:	f8d0 a000 	ldr.w	sl, [r0]
 80026de:	4650      	mov	r0, sl
 80026e0:	f7fd fd96 	bl	8000210 <strlen>
 80026e4:	2300      	movs	r3, #0
 80026e6:	930a      	str	r3, [sp, #40]	; 0x28
 80026e8:	6823      	ldr	r3, [r4, #0]
 80026ea:	9305      	str	r3, [sp, #20]
 80026ec:	f8d8 3000 	ldr.w	r3, [r8]
 80026f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80026f4:	3307      	adds	r3, #7
 80026f6:	f023 0307 	bic.w	r3, r3, #7
 80026fa:	f103 0208 	add.w	r2, r3, #8
 80026fe:	f8c8 2000 	str.w	r2, [r8]
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800270a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800270e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002712:	9307      	str	r3, [sp, #28]
 8002714:	f8cd 8018 	str.w	r8, [sp, #24]
 8002718:	ee08 0a10 	vmov	s16, r0
 800271c:	4b9f      	ldr	r3, [pc, #636]	; (800299c <_printf_float+0x2dc>)
 800271e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002722:	f04f 32ff 	mov.w	r2, #4294967295
 8002726:	f7fe fa21 	bl	8000b6c <__aeabi_dcmpun>
 800272a:	bb88      	cbnz	r0, 8002790 <_printf_float+0xd0>
 800272c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002730:	4b9a      	ldr	r3, [pc, #616]	; (800299c <_printf_float+0x2dc>)
 8002732:	f04f 32ff 	mov.w	r2, #4294967295
 8002736:	f7fe f9fb 	bl	8000b30 <__aeabi_dcmple>
 800273a:	bb48      	cbnz	r0, 8002790 <_printf_float+0xd0>
 800273c:	2200      	movs	r2, #0
 800273e:	2300      	movs	r3, #0
 8002740:	4640      	mov	r0, r8
 8002742:	4649      	mov	r1, r9
 8002744:	f7fe f9ea 	bl	8000b1c <__aeabi_dcmplt>
 8002748:	b110      	cbz	r0, 8002750 <_printf_float+0x90>
 800274a:	232d      	movs	r3, #45	; 0x2d
 800274c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002750:	4b93      	ldr	r3, [pc, #588]	; (80029a0 <_printf_float+0x2e0>)
 8002752:	4894      	ldr	r0, [pc, #592]	; (80029a4 <_printf_float+0x2e4>)
 8002754:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8002758:	bf94      	ite	ls
 800275a:	4698      	movls	r8, r3
 800275c:	4680      	movhi	r8, r0
 800275e:	2303      	movs	r3, #3
 8002760:	6123      	str	r3, [r4, #16]
 8002762:	9b05      	ldr	r3, [sp, #20]
 8002764:	f023 0204 	bic.w	r2, r3, #4
 8002768:	6022      	str	r2, [r4, #0]
 800276a:	f04f 0900 	mov.w	r9, #0
 800276e:	9700      	str	r7, [sp, #0]
 8002770:	4633      	mov	r3, r6
 8002772:	aa0b      	add	r2, sp, #44	; 0x2c
 8002774:	4621      	mov	r1, r4
 8002776:	4628      	mov	r0, r5
 8002778:	f000 f9d8 	bl	8002b2c <_printf_common>
 800277c:	3001      	adds	r0, #1
 800277e:	f040 8090 	bne.w	80028a2 <_printf_float+0x1e2>
 8002782:	f04f 30ff 	mov.w	r0, #4294967295
 8002786:	b00d      	add	sp, #52	; 0x34
 8002788:	ecbd 8b02 	vpop	{d8}
 800278c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002790:	4642      	mov	r2, r8
 8002792:	464b      	mov	r3, r9
 8002794:	4640      	mov	r0, r8
 8002796:	4649      	mov	r1, r9
 8002798:	f7fe f9e8 	bl	8000b6c <__aeabi_dcmpun>
 800279c:	b140      	cbz	r0, 80027b0 <_printf_float+0xf0>
 800279e:	464b      	mov	r3, r9
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bfbc      	itt	lt
 80027a4:	232d      	movlt	r3, #45	; 0x2d
 80027a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80027aa:	487f      	ldr	r0, [pc, #508]	; (80029a8 <_printf_float+0x2e8>)
 80027ac:	4b7f      	ldr	r3, [pc, #508]	; (80029ac <_printf_float+0x2ec>)
 80027ae:	e7d1      	b.n	8002754 <_printf_float+0x94>
 80027b0:	6863      	ldr	r3, [r4, #4]
 80027b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80027b6:	9206      	str	r2, [sp, #24]
 80027b8:	1c5a      	adds	r2, r3, #1
 80027ba:	d13f      	bne.n	800283c <_printf_float+0x17c>
 80027bc:	2306      	movs	r3, #6
 80027be:	6063      	str	r3, [r4, #4]
 80027c0:	9b05      	ldr	r3, [sp, #20]
 80027c2:	6861      	ldr	r1, [r4, #4]
 80027c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80027c8:	2300      	movs	r3, #0
 80027ca:	9303      	str	r3, [sp, #12]
 80027cc:	ab0a      	add	r3, sp, #40	; 0x28
 80027ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 80027d2:	ab09      	add	r3, sp, #36	; 0x24
 80027d4:	ec49 8b10 	vmov	d0, r8, r9
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	6022      	str	r2, [r4, #0]
 80027dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7ff fecd 	bl	8002580 <__cvt>
 80027e6:	9b06      	ldr	r3, [sp, #24]
 80027e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80027ea:	2b47      	cmp	r3, #71	; 0x47
 80027ec:	4680      	mov	r8, r0
 80027ee:	d108      	bne.n	8002802 <_printf_float+0x142>
 80027f0:	1cc8      	adds	r0, r1, #3
 80027f2:	db02      	blt.n	80027fa <_printf_float+0x13a>
 80027f4:	6863      	ldr	r3, [r4, #4]
 80027f6:	4299      	cmp	r1, r3
 80027f8:	dd41      	ble.n	800287e <_printf_float+0x1be>
 80027fa:	f1ab 0b02 	sub.w	fp, fp, #2
 80027fe:	fa5f fb8b 	uxtb.w	fp, fp
 8002802:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8002806:	d820      	bhi.n	800284a <_printf_float+0x18a>
 8002808:	3901      	subs	r1, #1
 800280a:	465a      	mov	r2, fp
 800280c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002810:	9109      	str	r1, [sp, #36]	; 0x24
 8002812:	f7ff ff17 	bl	8002644 <__exponent>
 8002816:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002818:	1813      	adds	r3, r2, r0
 800281a:	2a01      	cmp	r2, #1
 800281c:	4681      	mov	r9, r0
 800281e:	6123      	str	r3, [r4, #16]
 8002820:	dc02      	bgt.n	8002828 <_printf_float+0x168>
 8002822:	6822      	ldr	r2, [r4, #0]
 8002824:	07d2      	lsls	r2, r2, #31
 8002826:	d501      	bpl.n	800282c <_printf_float+0x16c>
 8002828:	3301      	adds	r3, #1
 800282a:	6123      	str	r3, [r4, #16]
 800282c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002830:	2b00      	cmp	r3, #0
 8002832:	d09c      	beq.n	800276e <_printf_float+0xae>
 8002834:	232d      	movs	r3, #45	; 0x2d
 8002836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800283a:	e798      	b.n	800276e <_printf_float+0xae>
 800283c:	9a06      	ldr	r2, [sp, #24]
 800283e:	2a47      	cmp	r2, #71	; 0x47
 8002840:	d1be      	bne.n	80027c0 <_printf_float+0x100>
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1bc      	bne.n	80027c0 <_printf_float+0x100>
 8002846:	2301      	movs	r3, #1
 8002848:	e7b9      	b.n	80027be <_printf_float+0xfe>
 800284a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800284e:	d118      	bne.n	8002882 <_printf_float+0x1c2>
 8002850:	2900      	cmp	r1, #0
 8002852:	6863      	ldr	r3, [r4, #4]
 8002854:	dd0b      	ble.n	800286e <_printf_float+0x1ae>
 8002856:	6121      	str	r1, [r4, #16]
 8002858:	b913      	cbnz	r3, 8002860 <_printf_float+0x1a0>
 800285a:	6822      	ldr	r2, [r4, #0]
 800285c:	07d0      	lsls	r0, r2, #31
 800285e:	d502      	bpl.n	8002866 <_printf_float+0x1a6>
 8002860:	3301      	adds	r3, #1
 8002862:	440b      	add	r3, r1
 8002864:	6123      	str	r3, [r4, #16]
 8002866:	65a1      	str	r1, [r4, #88]	; 0x58
 8002868:	f04f 0900 	mov.w	r9, #0
 800286c:	e7de      	b.n	800282c <_printf_float+0x16c>
 800286e:	b913      	cbnz	r3, 8002876 <_printf_float+0x1b6>
 8002870:	6822      	ldr	r2, [r4, #0]
 8002872:	07d2      	lsls	r2, r2, #31
 8002874:	d501      	bpl.n	800287a <_printf_float+0x1ba>
 8002876:	3302      	adds	r3, #2
 8002878:	e7f4      	b.n	8002864 <_printf_float+0x1a4>
 800287a:	2301      	movs	r3, #1
 800287c:	e7f2      	b.n	8002864 <_printf_float+0x1a4>
 800287e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8002882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002884:	4299      	cmp	r1, r3
 8002886:	db05      	blt.n	8002894 <_printf_float+0x1d4>
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	6121      	str	r1, [r4, #16]
 800288c:	07d8      	lsls	r0, r3, #31
 800288e:	d5ea      	bpl.n	8002866 <_printf_float+0x1a6>
 8002890:	1c4b      	adds	r3, r1, #1
 8002892:	e7e7      	b.n	8002864 <_printf_float+0x1a4>
 8002894:	2900      	cmp	r1, #0
 8002896:	bfd4      	ite	le
 8002898:	f1c1 0202 	rsble	r2, r1, #2
 800289c:	2201      	movgt	r2, #1
 800289e:	4413      	add	r3, r2
 80028a0:	e7e0      	b.n	8002864 <_printf_float+0x1a4>
 80028a2:	6823      	ldr	r3, [r4, #0]
 80028a4:	055a      	lsls	r2, r3, #21
 80028a6:	d407      	bmi.n	80028b8 <_printf_float+0x1f8>
 80028a8:	6923      	ldr	r3, [r4, #16]
 80028aa:	4642      	mov	r2, r8
 80028ac:	4631      	mov	r1, r6
 80028ae:	4628      	mov	r0, r5
 80028b0:	47b8      	blx	r7
 80028b2:	3001      	adds	r0, #1
 80028b4:	d12c      	bne.n	8002910 <_printf_float+0x250>
 80028b6:	e764      	b.n	8002782 <_printf_float+0xc2>
 80028b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80028bc:	f240 80e0 	bls.w	8002a80 <_printf_float+0x3c0>
 80028c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80028c4:	2200      	movs	r2, #0
 80028c6:	2300      	movs	r3, #0
 80028c8:	f7fe f91e 	bl	8000b08 <__aeabi_dcmpeq>
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d034      	beq.n	800293a <_printf_float+0x27a>
 80028d0:	4a37      	ldr	r2, [pc, #220]	; (80029b0 <_printf_float+0x2f0>)
 80028d2:	2301      	movs	r3, #1
 80028d4:	4631      	mov	r1, r6
 80028d6:	4628      	mov	r0, r5
 80028d8:	47b8      	blx	r7
 80028da:	3001      	adds	r0, #1
 80028dc:	f43f af51 	beq.w	8002782 <_printf_float+0xc2>
 80028e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80028e4:	429a      	cmp	r2, r3
 80028e6:	db02      	blt.n	80028ee <_printf_float+0x22e>
 80028e8:	6823      	ldr	r3, [r4, #0]
 80028ea:	07d8      	lsls	r0, r3, #31
 80028ec:	d510      	bpl.n	8002910 <_printf_float+0x250>
 80028ee:	ee18 3a10 	vmov	r3, s16
 80028f2:	4652      	mov	r2, sl
 80028f4:	4631      	mov	r1, r6
 80028f6:	4628      	mov	r0, r5
 80028f8:	47b8      	blx	r7
 80028fa:	3001      	adds	r0, #1
 80028fc:	f43f af41 	beq.w	8002782 <_printf_float+0xc2>
 8002900:	f04f 0800 	mov.w	r8, #0
 8002904:	f104 091a 	add.w	r9, r4, #26
 8002908:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800290a:	3b01      	subs	r3, #1
 800290c:	4543      	cmp	r3, r8
 800290e:	dc09      	bgt.n	8002924 <_printf_float+0x264>
 8002910:	6823      	ldr	r3, [r4, #0]
 8002912:	079b      	lsls	r3, r3, #30
 8002914:	f100 8105 	bmi.w	8002b22 <_printf_float+0x462>
 8002918:	68e0      	ldr	r0, [r4, #12]
 800291a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800291c:	4298      	cmp	r0, r3
 800291e:	bfb8      	it	lt
 8002920:	4618      	movlt	r0, r3
 8002922:	e730      	b.n	8002786 <_printf_float+0xc6>
 8002924:	2301      	movs	r3, #1
 8002926:	464a      	mov	r2, r9
 8002928:	4631      	mov	r1, r6
 800292a:	4628      	mov	r0, r5
 800292c:	47b8      	blx	r7
 800292e:	3001      	adds	r0, #1
 8002930:	f43f af27 	beq.w	8002782 <_printf_float+0xc2>
 8002934:	f108 0801 	add.w	r8, r8, #1
 8002938:	e7e6      	b.n	8002908 <_printf_float+0x248>
 800293a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800293c:	2b00      	cmp	r3, #0
 800293e:	dc39      	bgt.n	80029b4 <_printf_float+0x2f4>
 8002940:	4a1b      	ldr	r2, [pc, #108]	; (80029b0 <_printf_float+0x2f0>)
 8002942:	2301      	movs	r3, #1
 8002944:	4631      	mov	r1, r6
 8002946:	4628      	mov	r0, r5
 8002948:	47b8      	blx	r7
 800294a:	3001      	adds	r0, #1
 800294c:	f43f af19 	beq.w	8002782 <_printf_float+0xc2>
 8002950:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002954:	4313      	orrs	r3, r2
 8002956:	d102      	bne.n	800295e <_printf_float+0x29e>
 8002958:	6823      	ldr	r3, [r4, #0]
 800295a:	07d9      	lsls	r1, r3, #31
 800295c:	d5d8      	bpl.n	8002910 <_printf_float+0x250>
 800295e:	ee18 3a10 	vmov	r3, s16
 8002962:	4652      	mov	r2, sl
 8002964:	4631      	mov	r1, r6
 8002966:	4628      	mov	r0, r5
 8002968:	47b8      	blx	r7
 800296a:	3001      	adds	r0, #1
 800296c:	f43f af09 	beq.w	8002782 <_printf_float+0xc2>
 8002970:	f04f 0900 	mov.w	r9, #0
 8002974:	f104 0a1a 	add.w	sl, r4, #26
 8002978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800297a:	425b      	negs	r3, r3
 800297c:	454b      	cmp	r3, r9
 800297e:	dc01      	bgt.n	8002984 <_printf_float+0x2c4>
 8002980:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002982:	e792      	b.n	80028aa <_printf_float+0x1ea>
 8002984:	2301      	movs	r3, #1
 8002986:	4652      	mov	r2, sl
 8002988:	4631      	mov	r1, r6
 800298a:	4628      	mov	r0, r5
 800298c:	47b8      	blx	r7
 800298e:	3001      	adds	r0, #1
 8002990:	f43f aef7 	beq.w	8002782 <_printf_float+0xc2>
 8002994:	f109 0901 	add.w	r9, r9, #1
 8002998:	e7ee      	b.n	8002978 <_printf_float+0x2b8>
 800299a:	bf00      	nop
 800299c:	7fefffff 	.word	0x7fefffff
 80029a0:	08004fec 	.word	0x08004fec
 80029a4:	08004ff0 	.word	0x08004ff0
 80029a8:	08004ff8 	.word	0x08004ff8
 80029ac:	08004ff4 	.word	0x08004ff4
 80029b0:	08004ffc 	.word	0x08004ffc
 80029b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80029b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029b8:	429a      	cmp	r2, r3
 80029ba:	bfa8      	it	ge
 80029bc:	461a      	movge	r2, r3
 80029be:	2a00      	cmp	r2, #0
 80029c0:	4691      	mov	r9, r2
 80029c2:	dc37      	bgt.n	8002a34 <_printf_float+0x374>
 80029c4:	f04f 0b00 	mov.w	fp, #0
 80029c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80029cc:	f104 021a 	add.w	r2, r4, #26
 80029d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80029d2:	9305      	str	r3, [sp, #20]
 80029d4:	eba3 0309 	sub.w	r3, r3, r9
 80029d8:	455b      	cmp	r3, fp
 80029da:	dc33      	bgt.n	8002a44 <_printf_float+0x384>
 80029dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80029e0:	429a      	cmp	r2, r3
 80029e2:	db3b      	blt.n	8002a5c <_printf_float+0x39c>
 80029e4:	6823      	ldr	r3, [r4, #0]
 80029e6:	07da      	lsls	r2, r3, #31
 80029e8:	d438      	bmi.n	8002a5c <_printf_float+0x39c>
 80029ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80029ec:	9a05      	ldr	r2, [sp, #20]
 80029ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80029f0:	1a9a      	subs	r2, r3, r2
 80029f2:	eba3 0901 	sub.w	r9, r3, r1
 80029f6:	4591      	cmp	r9, r2
 80029f8:	bfa8      	it	ge
 80029fa:	4691      	movge	r9, r2
 80029fc:	f1b9 0f00 	cmp.w	r9, #0
 8002a00:	dc35      	bgt.n	8002a6e <_printf_float+0x3ae>
 8002a02:	f04f 0800 	mov.w	r8, #0
 8002a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002a0a:	f104 0a1a 	add.w	sl, r4, #26
 8002a0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	eba3 0309 	sub.w	r3, r3, r9
 8002a18:	4543      	cmp	r3, r8
 8002a1a:	f77f af79 	ble.w	8002910 <_printf_float+0x250>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	4652      	mov	r2, sl
 8002a22:	4631      	mov	r1, r6
 8002a24:	4628      	mov	r0, r5
 8002a26:	47b8      	blx	r7
 8002a28:	3001      	adds	r0, #1
 8002a2a:	f43f aeaa 	beq.w	8002782 <_printf_float+0xc2>
 8002a2e:	f108 0801 	add.w	r8, r8, #1
 8002a32:	e7ec      	b.n	8002a0e <_printf_float+0x34e>
 8002a34:	4613      	mov	r3, r2
 8002a36:	4631      	mov	r1, r6
 8002a38:	4642      	mov	r2, r8
 8002a3a:	4628      	mov	r0, r5
 8002a3c:	47b8      	blx	r7
 8002a3e:	3001      	adds	r0, #1
 8002a40:	d1c0      	bne.n	80029c4 <_printf_float+0x304>
 8002a42:	e69e      	b.n	8002782 <_printf_float+0xc2>
 8002a44:	2301      	movs	r3, #1
 8002a46:	4631      	mov	r1, r6
 8002a48:	4628      	mov	r0, r5
 8002a4a:	9205      	str	r2, [sp, #20]
 8002a4c:	47b8      	blx	r7
 8002a4e:	3001      	adds	r0, #1
 8002a50:	f43f ae97 	beq.w	8002782 <_printf_float+0xc2>
 8002a54:	9a05      	ldr	r2, [sp, #20]
 8002a56:	f10b 0b01 	add.w	fp, fp, #1
 8002a5a:	e7b9      	b.n	80029d0 <_printf_float+0x310>
 8002a5c:	ee18 3a10 	vmov	r3, s16
 8002a60:	4652      	mov	r2, sl
 8002a62:	4631      	mov	r1, r6
 8002a64:	4628      	mov	r0, r5
 8002a66:	47b8      	blx	r7
 8002a68:	3001      	adds	r0, #1
 8002a6a:	d1be      	bne.n	80029ea <_printf_float+0x32a>
 8002a6c:	e689      	b.n	8002782 <_printf_float+0xc2>
 8002a6e:	9a05      	ldr	r2, [sp, #20]
 8002a70:	464b      	mov	r3, r9
 8002a72:	4442      	add	r2, r8
 8002a74:	4631      	mov	r1, r6
 8002a76:	4628      	mov	r0, r5
 8002a78:	47b8      	blx	r7
 8002a7a:	3001      	adds	r0, #1
 8002a7c:	d1c1      	bne.n	8002a02 <_printf_float+0x342>
 8002a7e:	e680      	b.n	8002782 <_printf_float+0xc2>
 8002a80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a82:	2a01      	cmp	r2, #1
 8002a84:	dc01      	bgt.n	8002a8a <_printf_float+0x3ca>
 8002a86:	07db      	lsls	r3, r3, #31
 8002a88:	d538      	bpl.n	8002afc <_printf_float+0x43c>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4642      	mov	r2, r8
 8002a8e:	4631      	mov	r1, r6
 8002a90:	4628      	mov	r0, r5
 8002a92:	47b8      	blx	r7
 8002a94:	3001      	adds	r0, #1
 8002a96:	f43f ae74 	beq.w	8002782 <_printf_float+0xc2>
 8002a9a:	ee18 3a10 	vmov	r3, s16
 8002a9e:	4652      	mov	r2, sl
 8002aa0:	4631      	mov	r1, r6
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	47b8      	blx	r7
 8002aa6:	3001      	adds	r0, #1
 8002aa8:	f43f ae6b 	beq.w	8002782 <_printf_float+0xc2>
 8002aac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f7fe f828 	bl	8000b08 <__aeabi_dcmpeq>
 8002ab8:	b9d8      	cbnz	r0, 8002af2 <_printf_float+0x432>
 8002aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002abc:	f108 0201 	add.w	r2, r8, #1
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	4631      	mov	r1, r6
 8002ac4:	4628      	mov	r0, r5
 8002ac6:	47b8      	blx	r7
 8002ac8:	3001      	adds	r0, #1
 8002aca:	d10e      	bne.n	8002aea <_printf_float+0x42a>
 8002acc:	e659      	b.n	8002782 <_printf_float+0xc2>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	4652      	mov	r2, sl
 8002ad2:	4631      	mov	r1, r6
 8002ad4:	4628      	mov	r0, r5
 8002ad6:	47b8      	blx	r7
 8002ad8:	3001      	adds	r0, #1
 8002ada:	f43f ae52 	beq.w	8002782 <_printf_float+0xc2>
 8002ade:	f108 0801 	add.w	r8, r8, #1
 8002ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	4543      	cmp	r3, r8
 8002ae8:	dcf1      	bgt.n	8002ace <_printf_float+0x40e>
 8002aea:	464b      	mov	r3, r9
 8002aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002af0:	e6dc      	b.n	80028ac <_printf_float+0x1ec>
 8002af2:	f04f 0800 	mov.w	r8, #0
 8002af6:	f104 0a1a 	add.w	sl, r4, #26
 8002afa:	e7f2      	b.n	8002ae2 <_printf_float+0x422>
 8002afc:	2301      	movs	r3, #1
 8002afe:	4642      	mov	r2, r8
 8002b00:	e7df      	b.n	8002ac2 <_printf_float+0x402>
 8002b02:	2301      	movs	r3, #1
 8002b04:	464a      	mov	r2, r9
 8002b06:	4631      	mov	r1, r6
 8002b08:	4628      	mov	r0, r5
 8002b0a:	47b8      	blx	r7
 8002b0c:	3001      	adds	r0, #1
 8002b0e:	f43f ae38 	beq.w	8002782 <_printf_float+0xc2>
 8002b12:	f108 0801 	add.w	r8, r8, #1
 8002b16:	68e3      	ldr	r3, [r4, #12]
 8002b18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002b1a:	1a5b      	subs	r3, r3, r1
 8002b1c:	4543      	cmp	r3, r8
 8002b1e:	dcf0      	bgt.n	8002b02 <_printf_float+0x442>
 8002b20:	e6fa      	b.n	8002918 <_printf_float+0x258>
 8002b22:	f04f 0800 	mov.w	r8, #0
 8002b26:	f104 0919 	add.w	r9, r4, #25
 8002b2a:	e7f4      	b.n	8002b16 <_printf_float+0x456>

08002b2c <_printf_common>:
 8002b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b30:	4616      	mov	r6, r2
 8002b32:	4699      	mov	r9, r3
 8002b34:	688a      	ldr	r2, [r1, #8]
 8002b36:	690b      	ldr	r3, [r1, #16]
 8002b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bfb8      	it	lt
 8002b40:	4613      	movlt	r3, r2
 8002b42:	6033      	str	r3, [r6, #0]
 8002b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b48:	4607      	mov	r7, r0
 8002b4a:	460c      	mov	r4, r1
 8002b4c:	b10a      	cbz	r2, 8002b52 <_printf_common+0x26>
 8002b4e:	3301      	adds	r3, #1
 8002b50:	6033      	str	r3, [r6, #0]
 8002b52:	6823      	ldr	r3, [r4, #0]
 8002b54:	0699      	lsls	r1, r3, #26
 8002b56:	bf42      	ittt	mi
 8002b58:	6833      	ldrmi	r3, [r6, #0]
 8002b5a:	3302      	addmi	r3, #2
 8002b5c:	6033      	strmi	r3, [r6, #0]
 8002b5e:	6825      	ldr	r5, [r4, #0]
 8002b60:	f015 0506 	ands.w	r5, r5, #6
 8002b64:	d106      	bne.n	8002b74 <_printf_common+0x48>
 8002b66:	f104 0a19 	add.w	sl, r4, #25
 8002b6a:	68e3      	ldr	r3, [r4, #12]
 8002b6c:	6832      	ldr	r2, [r6, #0]
 8002b6e:	1a9b      	subs	r3, r3, r2
 8002b70:	42ab      	cmp	r3, r5
 8002b72:	dc26      	bgt.n	8002bc2 <_printf_common+0x96>
 8002b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002b78:	1e13      	subs	r3, r2, #0
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	bf18      	it	ne
 8002b7e:	2301      	movne	r3, #1
 8002b80:	0692      	lsls	r2, r2, #26
 8002b82:	d42b      	bmi.n	8002bdc <_printf_common+0xb0>
 8002b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b88:	4649      	mov	r1, r9
 8002b8a:	4638      	mov	r0, r7
 8002b8c:	47c0      	blx	r8
 8002b8e:	3001      	adds	r0, #1
 8002b90:	d01e      	beq.n	8002bd0 <_printf_common+0xa4>
 8002b92:	6823      	ldr	r3, [r4, #0]
 8002b94:	68e5      	ldr	r5, [r4, #12]
 8002b96:	6832      	ldr	r2, [r6, #0]
 8002b98:	f003 0306 	and.w	r3, r3, #6
 8002b9c:	2b04      	cmp	r3, #4
 8002b9e:	bf08      	it	eq
 8002ba0:	1aad      	subeq	r5, r5, r2
 8002ba2:	68a3      	ldr	r3, [r4, #8]
 8002ba4:	6922      	ldr	r2, [r4, #16]
 8002ba6:	bf0c      	ite	eq
 8002ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bac:	2500      	movne	r5, #0
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	bfc4      	itt	gt
 8002bb2:	1a9b      	subgt	r3, r3, r2
 8002bb4:	18ed      	addgt	r5, r5, r3
 8002bb6:	2600      	movs	r6, #0
 8002bb8:	341a      	adds	r4, #26
 8002bba:	42b5      	cmp	r5, r6
 8002bbc:	d11a      	bne.n	8002bf4 <_printf_common+0xc8>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e008      	b.n	8002bd4 <_printf_common+0xa8>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	4652      	mov	r2, sl
 8002bc6:	4649      	mov	r1, r9
 8002bc8:	4638      	mov	r0, r7
 8002bca:	47c0      	blx	r8
 8002bcc:	3001      	adds	r0, #1
 8002bce:	d103      	bne.n	8002bd8 <_printf_common+0xac>
 8002bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bd8:	3501      	adds	r5, #1
 8002bda:	e7c6      	b.n	8002b6a <_printf_common+0x3e>
 8002bdc:	18e1      	adds	r1, r4, r3
 8002bde:	1c5a      	adds	r2, r3, #1
 8002be0:	2030      	movs	r0, #48	; 0x30
 8002be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002be6:	4422      	add	r2, r4
 8002be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002bf0:	3302      	adds	r3, #2
 8002bf2:	e7c7      	b.n	8002b84 <_printf_common+0x58>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	4622      	mov	r2, r4
 8002bf8:	4649      	mov	r1, r9
 8002bfa:	4638      	mov	r0, r7
 8002bfc:	47c0      	blx	r8
 8002bfe:	3001      	adds	r0, #1
 8002c00:	d0e6      	beq.n	8002bd0 <_printf_common+0xa4>
 8002c02:	3601      	adds	r6, #1
 8002c04:	e7d9      	b.n	8002bba <_printf_common+0x8e>
	...

08002c08 <_printf_i>:
 8002c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c0c:	7e0f      	ldrb	r7, [r1, #24]
 8002c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002c10:	2f78      	cmp	r7, #120	; 0x78
 8002c12:	4691      	mov	r9, r2
 8002c14:	4680      	mov	r8, r0
 8002c16:	460c      	mov	r4, r1
 8002c18:	469a      	mov	sl, r3
 8002c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002c1e:	d807      	bhi.n	8002c30 <_printf_i+0x28>
 8002c20:	2f62      	cmp	r7, #98	; 0x62
 8002c22:	d80a      	bhi.n	8002c3a <_printf_i+0x32>
 8002c24:	2f00      	cmp	r7, #0
 8002c26:	f000 80d8 	beq.w	8002dda <_printf_i+0x1d2>
 8002c2a:	2f58      	cmp	r7, #88	; 0x58
 8002c2c:	f000 80a3 	beq.w	8002d76 <_printf_i+0x16e>
 8002c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002c38:	e03a      	b.n	8002cb0 <_printf_i+0xa8>
 8002c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002c3e:	2b15      	cmp	r3, #21
 8002c40:	d8f6      	bhi.n	8002c30 <_printf_i+0x28>
 8002c42:	a101      	add	r1, pc, #4	; (adr r1, 8002c48 <_printf_i+0x40>)
 8002c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c48:	08002ca1 	.word	0x08002ca1
 8002c4c:	08002cb5 	.word	0x08002cb5
 8002c50:	08002c31 	.word	0x08002c31
 8002c54:	08002c31 	.word	0x08002c31
 8002c58:	08002c31 	.word	0x08002c31
 8002c5c:	08002c31 	.word	0x08002c31
 8002c60:	08002cb5 	.word	0x08002cb5
 8002c64:	08002c31 	.word	0x08002c31
 8002c68:	08002c31 	.word	0x08002c31
 8002c6c:	08002c31 	.word	0x08002c31
 8002c70:	08002c31 	.word	0x08002c31
 8002c74:	08002dc1 	.word	0x08002dc1
 8002c78:	08002ce5 	.word	0x08002ce5
 8002c7c:	08002da3 	.word	0x08002da3
 8002c80:	08002c31 	.word	0x08002c31
 8002c84:	08002c31 	.word	0x08002c31
 8002c88:	08002de3 	.word	0x08002de3
 8002c8c:	08002c31 	.word	0x08002c31
 8002c90:	08002ce5 	.word	0x08002ce5
 8002c94:	08002c31 	.word	0x08002c31
 8002c98:	08002c31 	.word	0x08002c31
 8002c9c:	08002dab 	.word	0x08002dab
 8002ca0:	682b      	ldr	r3, [r5, #0]
 8002ca2:	1d1a      	adds	r2, r3, #4
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	602a      	str	r2, [r5, #0]
 8002ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e0a3      	b.n	8002dfc <_printf_i+0x1f4>
 8002cb4:	6820      	ldr	r0, [r4, #0]
 8002cb6:	6829      	ldr	r1, [r5, #0]
 8002cb8:	0606      	lsls	r6, r0, #24
 8002cba:	f101 0304 	add.w	r3, r1, #4
 8002cbe:	d50a      	bpl.n	8002cd6 <_printf_i+0xce>
 8002cc0:	680e      	ldr	r6, [r1, #0]
 8002cc2:	602b      	str	r3, [r5, #0]
 8002cc4:	2e00      	cmp	r6, #0
 8002cc6:	da03      	bge.n	8002cd0 <_printf_i+0xc8>
 8002cc8:	232d      	movs	r3, #45	; 0x2d
 8002cca:	4276      	negs	r6, r6
 8002ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002cd0:	485e      	ldr	r0, [pc, #376]	; (8002e4c <_printf_i+0x244>)
 8002cd2:	230a      	movs	r3, #10
 8002cd4:	e019      	b.n	8002d0a <_printf_i+0x102>
 8002cd6:	680e      	ldr	r6, [r1, #0]
 8002cd8:	602b      	str	r3, [r5, #0]
 8002cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cde:	bf18      	it	ne
 8002ce0:	b236      	sxthne	r6, r6
 8002ce2:	e7ef      	b.n	8002cc4 <_printf_i+0xbc>
 8002ce4:	682b      	ldr	r3, [r5, #0]
 8002ce6:	6820      	ldr	r0, [r4, #0]
 8002ce8:	1d19      	adds	r1, r3, #4
 8002cea:	6029      	str	r1, [r5, #0]
 8002cec:	0601      	lsls	r1, r0, #24
 8002cee:	d501      	bpl.n	8002cf4 <_printf_i+0xec>
 8002cf0:	681e      	ldr	r6, [r3, #0]
 8002cf2:	e002      	b.n	8002cfa <_printf_i+0xf2>
 8002cf4:	0646      	lsls	r6, r0, #25
 8002cf6:	d5fb      	bpl.n	8002cf0 <_printf_i+0xe8>
 8002cf8:	881e      	ldrh	r6, [r3, #0]
 8002cfa:	4854      	ldr	r0, [pc, #336]	; (8002e4c <_printf_i+0x244>)
 8002cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8002cfe:	bf0c      	ite	eq
 8002d00:	2308      	moveq	r3, #8
 8002d02:	230a      	movne	r3, #10
 8002d04:	2100      	movs	r1, #0
 8002d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d0a:	6865      	ldr	r5, [r4, #4]
 8002d0c:	60a5      	str	r5, [r4, #8]
 8002d0e:	2d00      	cmp	r5, #0
 8002d10:	bfa2      	ittt	ge
 8002d12:	6821      	ldrge	r1, [r4, #0]
 8002d14:	f021 0104 	bicge.w	r1, r1, #4
 8002d18:	6021      	strge	r1, [r4, #0]
 8002d1a:	b90e      	cbnz	r6, 8002d20 <_printf_i+0x118>
 8002d1c:	2d00      	cmp	r5, #0
 8002d1e:	d04d      	beq.n	8002dbc <_printf_i+0x1b4>
 8002d20:	4615      	mov	r5, r2
 8002d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8002d26:	fb03 6711 	mls	r7, r3, r1, r6
 8002d2a:	5dc7      	ldrb	r7, [r0, r7]
 8002d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002d30:	4637      	mov	r7, r6
 8002d32:	42bb      	cmp	r3, r7
 8002d34:	460e      	mov	r6, r1
 8002d36:	d9f4      	bls.n	8002d22 <_printf_i+0x11a>
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d10b      	bne.n	8002d54 <_printf_i+0x14c>
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	07de      	lsls	r6, r3, #31
 8002d40:	d508      	bpl.n	8002d54 <_printf_i+0x14c>
 8002d42:	6923      	ldr	r3, [r4, #16]
 8002d44:	6861      	ldr	r1, [r4, #4]
 8002d46:	4299      	cmp	r1, r3
 8002d48:	bfde      	ittt	le
 8002d4a:	2330      	movle	r3, #48	; 0x30
 8002d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d54:	1b52      	subs	r2, r2, r5
 8002d56:	6122      	str	r2, [r4, #16]
 8002d58:	f8cd a000 	str.w	sl, [sp]
 8002d5c:	464b      	mov	r3, r9
 8002d5e:	aa03      	add	r2, sp, #12
 8002d60:	4621      	mov	r1, r4
 8002d62:	4640      	mov	r0, r8
 8002d64:	f7ff fee2 	bl	8002b2c <_printf_common>
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d14c      	bne.n	8002e06 <_printf_i+0x1fe>
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	b004      	add	sp, #16
 8002d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d76:	4835      	ldr	r0, [pc, #212]	; (8002e4c <_printf_i+0x244>)
 8002d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002d7c:	6829      	ldr	r1, [r5, #0]
 8002d7e:	6823      	ldr	r3, [r4, #0]
 8002d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8002d84:	6029      	str	r1, [r5, #0]
 8002d86:	061d      	lsls	r5, r3, #24
 8002d88:	d514      	bpl.n	8002db4 <_printf_i+0x1ac>
 8002d8a:	07df      	lsls	r7, r3, #31
 8002d8c:	bf44      	itt	mi
 8002d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8002d92:	6023      	strmi	r3, [r4, #0]
 8002d94:	b91e      	cbnz	r6, 8002d9e <_printf_i+0x196>
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	f023 0320 	bic.w	r3, r3, #32
 8002d9c:	6023      	str	r3, [r4, #0]
 8002d9e:	2310      	movs	r3, #16
 8002da0:	e7b0      	b.n	8002d04 <_printf_i+0xfc>
 8002da2:	6823      	ldr	r3, [r4, #0]
 8002da4:	f043 0320 	orr.w	r3, r3, #32
 8002da8:	6023      	str	r3, [r4, #0]
 8002daa:	2378      	movs	r3, #120	; 0x78
 8002dac:	4828      	ldr	r0, [pc, #160]	; (8002e50 <_printf_i+0x248>)
 8002dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002db2:	e7e3      	b.n	8002d7c <_printf_i+0x174>
 8002db4:	0659      	lsls	r1, r3, #25
 8002db6:	bf48      	it	mi
 8002db8:	b2b6      	uxthmi	r6, r6
 8002dba:	e7e6      	b.n	8002d8a <_printf_i+0x182>
 8002dbc:	4615      	mov	r5, r2
 8002dbe:	e7bb      	b.n	8002d38 <_printf_i+0x130>
 8002dc0:	682b      	ldr	r3, [r5, #0]
 8002dc2:	6826      	ldr	r6, [r4, #0]
 8002dc4:	6961      	ldr	r1, [r4, #20]
 8002dc6:	1d18      	adds	r0, r3, #4
 8002dc8:	6028      	str	r0, [r5, #0]
 8002dca:	0635      	lsls	r5, r6, #24
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	d501      	bpl.n	8002dd4 <_printf_i+0x1cc>
 8002dd0:	6019      	str	r1, [r3, #0]
 8002dd2:	e002      	b.n	8002dda <_printf_i+0x1d2>
 8002dd4:	0670      	lsls	r0, r6, #25
 8002dd6:	d5fb      	bpl.n	8002dd0 <_printf_i+0x1c8>
 8002dd8:	8019      	strh	r1, [r3, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	6123      	str	r3, [r4, #16]
 8002dde:	4615      	mov	r5, r2
 8002de0:	e7ba      	b.n	8002d58 <_printf_i+0x150>
 8002de2:	682b      	ldr	r3, [r5, #0]
 8002de4:	1d1a      	adds	r2, r3, #4
 8002de6:	602a      	str	r2, [r5, #0]
 8002de8:	681d      	ldr	r5, [r3, #0]
 8002dea:	6862      	ldr	r2, [r4, #4]
 8002dec:	2100      	movs	r1, #0
 8002dee:	4628      	mov	r0, r5
 8002df0:	f7fd fa16 	bl	8000220 <memchr>
 8002df4:	b108      	cbz	r0, 8002dfa <_printf_i+0x1f2>
 8002df6:	1b40      	subs	r0, r0, r5
 8002df8:	6060      	str	r0, [r4, #4]
 8002dfa:	6863      	ldr	r3, [r4, #4]
 8002dfc:	6123      	str	r3, [r4, #16]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e04:	e7a8      	b.n	8002d58 <_printf_i+0x150>
 8002e06:	6923      	ldr	r3, [r4, #16]
 8002e08:	462a      	mov	r2, r5
 8002e0a:	4649      	mov	r1, r9
 8002e0c:	4640      	mov	r0, r8
 8002e0e:	47d0      	blx	sl
 8002e10:	3001      	adds	r0, #1
 8002e12:	d0ab      	beq.n	8002d6c <_printf_i+0x164>
 8002e14:	6823      	ldr	r3, [r4, #0]
 8002e16:	079b      	lsls	r3, r3, #30
 8002e18:	d413      	bmi.n	8002e42 <_printf_i+0x23a>
 8002e1a:	68e0      	ldr	r0, [r4, #12]
 8002e1c:	9b03      	ldr	r3, [sp, #12]
 8002e1e:	4298      	cmp	r0, r3
 8002e20:	bfb8      	it	lt
 8002e22:	4618      	movlt	r0, r3
 8002e24:	e7a4      	b.n	8002d70 <_printf_i+0x168>
 8002e26:	2301      	movs	r3, #1
 8002e28:	4632      	mov	r2, r6
 8002e2a:	4649      	mov	r1, r9
 8002e2c:	4640      	mov	r0, r8
 8002e2e:	47d0      	blx	sl
 8002e30:	3001      	adds	r0, #1
 8002e32:	d09b      	beq.n	8002d6c <_printf_i+0x164>
 8002e34:	3501      	adds	r5, #1
 8002e36:	68e3      	ldr	r3, [r4, #12]
 8002e38:	9903      	ldr	r1, [sp, #12]
 8002e3a:	1a5b      	subs	r3, r3, r1
 8002e3c:	42ab      	cmp	r3, r5
 8002e3e:	dcf2      	bgt.n	8002e26 <_printf_i+0x21e>
 8002e40:	e7eb      	b.n	8002e1a <_printf_i+0x212>
 8002e42:	2500      	movs	r5, #0
 8002e44:	f104 0619 	add.w	r6, r4, #25
 8002e48:	e7f5      	b.n	8002e36 <_printf_i+0x22e>
 8002e4a:	bf00      	nop
 8002e4c:	08004ffe 	.word	0x08004ffe
 8002e50:	0800500f 	.word	0x0800500f

08002e54 <quorem>:
 8002e54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e58:	6903      	ldr	r3, [r0, #16]
 8002e5a:	690c      	ldr	r4, [r1, #16]
 8002e5c:	42a3      	cmp	r3, r4
 8002e5e:	4607      	mov	r7, r0
 8002e60:	f2c0 8081 	blt.w	8002f66 <quorem+0x112>
 8002e64:	3c01      	subs	r4, #1
 8002e66:	f101 0814 	add.w	r8, r1, #20
 8002e6a:	f100 0514 	add.w	r5, r0, #20
 8002e6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002e78:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002e84:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002e88:	fbb2 f6f3 	udiv	r6, r2, r3
 8002e8c:	d331      	bcc.n	8002ef2 <quorem+0x9e>
 8002e8e:	f04f 0e00 	mov.w	lr, #0
 8002e92:	4640      	mov	r0, r8
 8002e94:	46ac      	mov	ip, r5
 8002e96:	46f2      	mov	sl, lr
 8002e98:	f850 2b04 	ldr.w	r2, [r0], #4
 8002e9c:	b293      	uxth	r3, r2
 8002e9e:	fb06 e303 	mla	r3, r6, r3, lr
 8002ea2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	ebaa 0303 	sub.w	r3, sl, r3
 8002eac:	f8dc a000 	ldr.w	sl, [ip]
 8002eb0:	0c12      	lsrs	r2, r2, #16
 8002eb2:	fa13 f38a 	uxtah	r3, r3, sl
 8002eb6:	fb06 e202 	mla	r2, r6, r2, lr
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	9b00      	ldr	r3, [sp, #0]
 8002ebe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002ec2:	b292      	uxth	r2, r2
 8002ec4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8002ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002ecc:	f8bd 3000 	ldrh.w	r3, [sp]
 8002ed0:	4581      	cmp	r9, r0
 8002ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002ed6:	f84c 3b04 	str.w	r3, [ip], #4
 8002eda:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002ede:	d2db      	bcs.n	8002e98 <quorem+0x44>
 8002ee0:	f855 300b 	ldr.w	r3, [r5, fp]
 8002ee4:	b92b      	cbnz	r3, 8002ef2 <quorem+0x9e>
 8002ee6:	9b01      	ldr	r3, [sp, #4]
 8002ee8:	3b04      	subs	r3, #4
 8002eea:	429d      	cmp	r5, r3
 8002eec:	461a      	mov	r2, r3
 8002eee:	d32e      	bcc.n	8002f4e <quorem+0xfa>
 8002ef0:	613c      	str	r4, [r7, #16]
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f001 f8c6 	bl	8004084 <__mcmp>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	db24      	blt.n	8002f46 <quorem+0xf2>
 8002efc:	3601      	adds	r6, #1
 8002efe:	4628      	mov	r0, r5
 8002f00:	f04f 0c00 	mov.w	ip, #0
 8002f04:	f858 2b04 	ldr.w	r2, [r8], #4
 8002f08:	f8d0 e000 	ldr.w	lr, [r0]
 8002f0c:	b293      	uxth	r3, r2
 8002f0e:	ebac 0303 	sub.w	r3, ip, r3
 8002f12:	0c12      	lsrs	r2, r2, #16
 8002f14:	fa13 f38e 	uxtah	r3, r3, lr
 8002f18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002f1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002f26:	45c1      	cmp	r9, r8
 8002f28:	f840 3b04 	str.w	r3, [r0], #4
 8002f2c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002f30:	d2e8      	bcs.n	8002f04 <quorem+0xb0>
 8002f32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002f36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002f3a:	b922      	cbnz	r2, 8002f46 <quorem+0xf2>
 8002f3c:	3b04      	subs	r3, #4
 8002f3e:	429d      	cmp	r5, r3
 8002f40:	461a      	mov	r2, r3
 8002f42:	d30a      	bcc.n	8002f5a <quorem+0x106>
 8002f44:	613c      	str	r4, [r7, #16]
 8002f46:	4630      	mov	r0, r6
 8002f48:	b003      	add	sp, #12
 8002f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f4e:	6812      	ldr	r2, [r2, #0]
 8002f50:	3b04      	subs	r3, #4
 8002f52:	2a00      	cmp	r2, #0
 8002f54:	d1cc      	bne.n	8002ef0 <quorem+0x9c>
 8002f56:	3c01      	subs	r4, #1
 8002f58:	e7c7      	b.n	8002eea <quorem+0x96>
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	3b04      	subs	r3, #4
 8002f5e:	2a00      	cmp	r2, #0
 8002f60:	d1f0      	bne.n	8002f44 <quorem+0xf0>
 8002f62:	3c01      	subs	r4, #1
 8002f64:	e7eb      	b.n	8002f3e <quorem+0xea>
 8002f66:	2000      	movs	r0, #0
 8002f68:	e7ee      	b.n	8002f48 <quorem+0xf4>
 8002f6a:	0000      	movs	r0, r0
 8002f6c:	0000      	movs	r0, r0
	...

08002f70 <_dtoa_r>:
 8002f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f74:	ed2d 8b04 	vpush	{d8-d9}
 8002f78:	ec57 6b10 	vmov	r6, r7, d0
 8002f7c:	b093      	sub	sp, #76	; 0x4c
 8002f7e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002f80:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8002f84:	9106      	str	r1, [sp, #24]
 8002f86:	ee10 aa10 	vmov	sl, s0
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8002f8e:	930c      	str	r3, [sp, #48]	; 0x30
 8002f90:	46bb      	mov	fp, r7
 8002f92:	b975      	cbnz	r5, 8002fb2 <_dtoa_r+0x42>
 8002f94:	2010      	movs	r0, #16
 8002f96:	f000 fddd 	bl	8003b54 <malloc>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	6260      	str	r0, [r4, #36]	; 0x24
 8002f9e:	b920      	cbnz	r0, 8002faa <_dtoa_r+0x3a>
 8002fa0:	4ba7      	ldr	r3, [pc, #668]	; (8003240 <_dtoa_r+0x2d0>)
 8002fa2:	21ea      	movs	r1, #234	; 0xea
 8002fa4:	48a7      	ldr	r0, [pc, #668]	; (8003244 <_dtoa_r+0x2d4>)
 8002fa6:	f001 fa75 	bl	8004494 <__assert_func>
 8002faa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002fae:	6005      	str	r5, [r0, #0]
 8002fb0:	60c5      	str	r5, [r0, #12]
 8002fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	b151      	cbz	r1, 8002fce <_dtoa_r+0x5e>
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	604a      	str	r2, [r1, #4]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	4093      	lsls	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f000 fe1c 	bl	8003c00 <_Bfree>
 8002fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	1e3b      	subs	r3, r7, #0
 8002fd0:	bfaa      	itet	ge
 8002fd2:	2300      	movge	r3, #0
 8002fd4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8002fd8:	f8c8 3000 	strge.w	r3, [r8]
 8002fdc:	4b9a      	ldr	r3, [pc, #616]	; (8003248 <_dtoa_r+0x2d8>)
 8002fde:	bfbc      	itt	lt
 8002fe0:	2201      	movlt	r2, #1
 8002fe2:	f8c8 2000 	strlt.w	r2, [r8]
 8002fe6:	ea33 030b 	bics.w	r3, r3, fp
 8002fea:	d11b      	bne.n	8003024 <_dtoa_r+0xb4>
 8002fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002fee:	f242 730f 	movw	r3, #9999	; 0x270f
 8002ff2:	6013      	str	r3, [r2, #0]
 8002ff4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8002ff8:	4333      	orrs	r3, r6
 8002ffa:	f000 8592 	beq.w	8003b22 <_dtoa_r+0xbb2>
 8002ffe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003000:	b963      	cbnz	r3, 800301c <_dtoa_r+0xac>
 8003002:	4b92      	ldr	r3, [pc, #584]	; (800324c <_dtoa_r+0x2dc>)
 8003004:	e022      	b.n	800304c <_dtoa_r+0xdc>
 8003006:	4b92      	ldr	r3, [pc, #584]	; (8003250 <_dtoa_r+0x2e0>)
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	3308      	adds	r3, #8
 800300c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	9801      	ldr	r0, [sp, #4]
 8003012:	b013      	add	sp, #76	; 0x4c
 8003014:	ecbd 8b04 	vpop	{d8-d9}
 8003018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800301c:	4b8b      	ldr	r3, [pc, #556]	; (800324c <_dtoa_r+0x2dc>)
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	3303      	adds	r3, #3
 8003022:	e7f3      	b.n	800300c <_dtoa_r+0x9c>
 8003024:	2200      	movs	r2, #0
 8003026:	2300      	movs	r3, #0
 8003028:	4650      	mov	r0, sl
 800302a:	4659      	mov	r1, fp
 800302c:	f7fd fd6c 	bl	8000b08 <__aeabi_dcmpeq>
 8003030:	ec4b ab19 	vmov	d9, sl, fp
 8003034:	4680      	mov	r8, r0
 8003036:	b158      	cbz	r0, 8003050 <_dtoa_r+0xe0>
 8003038:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800303a:	2301      	movs	r3, #1
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003040:	2b00      	cmp	r3, #0
 8003042:	f000 856b 	beq.w	8003b1c <_dtoa_r+0xbac>
 8003046:	4883      	ldr	r0, [pc, #524]	; (8003254 <_dtoa_r+0x2e4>)
 8003048:	6018      	str	r0, [r3, #0]
 800304a:	1e43      	subs	r3, r0, #1
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	e7df      	b.n	8003010 <_dtoa_r+0xa0>
 8003050:	ec4b ab10 	vmov	d0, sl, fp
 8003054:	aa10      	add	r2, sp, #64	; 0x40
 8003056:	a911      	add	r1, sp, #68	; 0x44
 8003058:	4620      	mov	r0, r4
 800305a:	f001 f8b9 	bl	80041d0 <__d2b>
 800305e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003062:	ee08 0a10 	vmov	s16, r0
 8003066:	2d00      	cmp	r5, #0
 8003068:	f000 8084 	beq.w	8003174 <_dtoa_r+0x204>
 800306c:	ee19 3a90 	vmov	r3, s19
 8003070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003074:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003078:	4656      	mov	r6, sl
 800307a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800307e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003082:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003086:	4b74      	ldr	r3, [pc, #464]	; (8003258 <_dtoa_r+0x2e8>)
 8003088:	2200      	movs	r2, #0
 800308a:	4630      	mov	r0, r6
 800308c:	4639      	mov	r1, r7
 800308e:	f7fd f91b 	bl	80002c8 <__aeabi_dsub>
 8003092:	a365      	add	r3, pc, #404	; (adr r3, 8003228 <_dtoa_r+0x2b8>)
 8003094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003098:	f7fd face 	bl	8000638 <__aeabi_dmul>
 800309c:	a364      	add	r3, pc, #400	; (adr r3, 8003230 <_dtoa_r+0x2c0>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd f913 	bl	80002cc <__adddf3>
 80030a6:	4606      	mov	r6, r0
 80030a8:	4628      	mov	r0, r5
 80030aa:	460f      	mov	r7, r1
 80030ac:	f7fd fa5a 	bl	8000564 <__aeabi_i2d>
 80030b0:	a361      	add	r3, pc, #388	; (adr r3, 8003238 <_dtoa_r+0x2c8>)
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f7fd fabf 	bl	8000638 <__aeabi_dmul>
 80030ba:	4602      	mov	r2, r0
 80030bc:	460b      	mov	r3, r1
 80030be:	4630      	mov	r0, r6
 80030c0:	4639      	mov	r1, r7
 80030c2:	f7fd f903 	bl	80002cc <__adddf3>
 80030c6:	4606      	mov	r6, r0
 80030c8:	460f      	mov	r7, r1
 80030ca:	f7fd fd65 	bl	8000b98 <__aeabi_d2iz>
 80030ce:	2200      	movs	r2, #0
 80030d0:	9000      	str	r0, [sp, #0]
 80030d2:	2300      	movs	r3, #0
 80030d4:	4630      	mov	r0, r6
 80030d6:	4639      	mov	r1, r7
 80030d8:	f7fd fd20 	bl	8000b1c <__aeabi_dcmplt>
 80030dc:	b150      	cbz	r0, 80030f4 <_dtoa_r+0x184>
 80030de:	9800      	ldr	r0, [sp, #0]
 80030e0:	f7fd fa40 	bl	8000564 <__aeabi_i2d>
 80030e4:	4632      	mov	r2, r6
 80030e6:	463b      	mov	r3, r7
 80030e8:	f7fd fd0e 	bl	8000b08 <__aeabi_dcmpeq>
 80030ec:	b910      	cbnz	r0, 80030f4 <_dtoa_r+0x184>
 80030ee:	9b00      	ldr	r3, [sp, #0]
 80030f0:	3b01      	subs	r3, #1
 80030f2:	9300      	str	r3, [sp, #0]
 80030f4:	9b00      	ldr	r3, [sp, #0]
 80030f6:	2b16      	cmp	r3, #22
 80030f8:	d85a      	bhi.n	80031b0 <_dtoa_r+0x240>
 80030fa:	9a00      	ldr	r2, [sp, #0]
 80030fc:	4b57      	ldr	r3, [pc, #348]	; (800325c <_dtoa_r+0x2ec>)
 80030fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003106:	ec51 0b19 	vmov	r0, r1, d9
 800310a:	f7fd fd07 	bl	8000b1c <__aeabi_dcmplt>
 800310e:	2800      	cmp	r0, #0
 8003110:	d050      	beq.n	80031b4 <_dtoa_r+0x244>
 8003112:	9b00      	ldr	r3, [sp, #0]
 8003114:	3b01      	subs	r3, #1
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	2300      	movs	r3, #0
 800311a:	930b      	str	r3, [sp, #44]	; 0x2c
 800311c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800311e:	1b5d      	subs	r5, r3, r5
 8003120:	1e6b      	subs	r3, r5, #1
 8003122:	9305      	str	r3, [sp, #20]
 8003124:	bf45      	ittet	mi
 8003126:	f1c5 0301 	rsbmi	r3, r5, #1
 800312a:	9304      	strmi	r3, [sp, #16]
 800312c:	2300      	movpl	r3, #0
 800312e:	2300      	movmi	r3, #0
 8003130:	bf4c      	ite	mi
 8003132:	9305      	strmi	r3, [sp, #20]
 8003134:	9304      	strpl	r3, [sp, #16]
 8003136:	9b00      	ldr	r3, [sp, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	db3d      	blt.n	80031b8 <_dtoa_r+0x248>
 800313c:	9b05      	ldr	r3, [sp, #20]
 800313e:	9a00      	ldr	r2, [sp, #0]
 8003140:	920a      	str	r2, [sp, #40]	; 0x28
 8003142:	4413      	add	r3, r2
 8003144:	9305      	str	r3, [sp, #20]
 8003146:	2300      	movs	r3, #0
 8003148:	9307      	str	r3, [sp, #28]
 800314a:	9b06      	ldr	r3, [sp, #24]
 800314c:	2b09      	cmp	r3, #9
 800314e:	f200 8089 	bhi.w	8003264 <_dtoa_r+0x2f4>
 8003152:	2b05      	cmp	r3, #5
 8003154:	bfc4      	itt	gt
 8003156:	3b04      	subgt	r3, #4
 8003158:	9306      	strgt	r3, [sp, #24]
 800315a:	9b06      	ldr	r3, [sp, #24]
 800315c:	f1a3 0302 	sub.w	r3, r3, #2
 8003160:	bfcc      	ite	gt
 8003162:	2500      	movgt	r5, #0
 8003164:	2501      	movle	r5, #1
 8003166:	2b03      	cmp	r3, #3
 8003168:	f200 8087 	bhi.w	800327a <_dtoa_r+0x30a>
 800316c:	e8df f003 	tbb	[pc, r3]
 8003170:	59383a2d 	.word	0x59383a2d
 8003174:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8003178:	441d      	add	r5, r3
 800317a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800317e:	2b20      	cmp	r3, #32
 8003180:	bfc1      	itttt	gt
 8003182:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003186:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800318a:	fa0b f303 	lslgt.w	r3, fp, r3
 800318e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8003192:	bfda      	itte	le
 8003194:	f1c3 0320 	rsble	r3, r3, #32
 8003198:	fa06 f003 	lslle.w	r0, r6, r3
 800319c:	4318      	orrgt	r0, r3
 800319e:	f7fd f9d1 	bl	8000544 <__aeabi_ui2d>
 80031a2:	2301      	movs	r3, #1
 80031a4:	4606      	mov	r6, r0
 80031a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80031aa:	3d01      	subs	r5, #1
 80031ac:	930e      	str	r3, [sp, #56]	; 0x38
 80031ae:	e76a      	b.n	8003086 <_dtoa_r+0x116>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e7b2      	b.n	800311a <_dtoa_r+0x1aa>
 80031b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80031b6:	e7b1      	b.n	800311c <_dtoa_r+0x1ac>
 80031b8:	9b04      	ldr	r3, [sp, #16]
 80031ba:	9a00      	ldr	r2, [sp, #0]
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	9304      	str	r3, [sp, #16]
 80031c0:	4253      	negs	r3, r2
 80031c2:	9307      	str	r3, [sp, #28]
 80031c4:	2300      	movs	r3, #0
 80031c6:	930a      	str	r3, [sp, #40]	; 0x28
 80031c8:	e7bf      	b.n	800314a <_dtoa_r+0x1da>
 80031ca:	2300      	movs	r3, #0
 80031cc:	9308      	str	r3, [sp, #32]
 80031ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	dc55      	bgt.n	8003280 <_dtoa_r+0x310>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80031da:	461a      	mov	r2, r3
 80031dc:	9209      	str	r2, [sp, #36]	; 0x24
 80031de:	e00c      	b.n	80031fa <_dtoa_r+0x28a>
 80031e0:	2301      	movs	r3, #1
 80031e2:	e7f3      	b.n	80031cc <_dtoa_r+0x25c>
 80031e4:	2300      	movs	r3, #0
 80031e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031e8:	9308      	str	r3, [sp, #32]
 80031ea:	9b00      	ldr	r3, [sp, #0]
 80031ec:	4413      	add	r3, r2
 80031ee:	9302      	str	r3, [sp, #8]
 80031f0:	3301      	adds	r3, #1
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	9303      	str	r3, [sp, #12]
 80031f6:	bfb8      	it	lt
 80031f8:	2301      	movlt	r3, #1
 80031fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80031fc:	2200      	movs	r2, #0
 80031fe:	6042      	str	r2, [r0, #4]
 8003200:	2204      	movs	r2, #4
 8003202:	f102 0614 	add.w	r6, r2, #20
 8003206:	429e      	cmp	r6, r3
 8003208:	6841      	ldr	r1, [r0, #4]
 800320a:	d93d      	bls.n	8003288 <_dtoa_r+0x318>
 800320c:	4620      	mov	r0, r4
 800320e:	f000 fcb7 	bl	8003b80 <_Balloc>
 8003212:	9001      	str	r0, [sp, #4]
 8003214:	2800      	cmp	r0, #0
 8003216:	d13b      	bne.n	8003290 <_dtoa_r+0x320>
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <_dtoa_r+0x2f0>)
 800321a:	4602      	mov	r2, r0
 800321c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003220:	e6c0      	b.n	8002fa4 <_dtoa_r+0x34>
 8003222:	2301      	movs	r3, #1
 8003224:	e7df      	b.n	80031e6 <_dtoa_r+0x276>
 8003226:	bf00      	nop
 8003228:	636f4361 	.word	0x636f4361
 800322c:	3fd287a7 	.word	0x3fd287a7
 8003230:	8b60c8b3 	.word	0x8b60c8b3
 8003234:	3fc68a28 	.word	0x3fc68a28
 8003238:	509f79fb 	.word	0x509f79fb
 800323c:	3fd34413 	.word	0x3fd34413
 8003240:	0800502d 	.word	0x0800502d
 8003244:	08005044 	.word	0x08005044
 8003248:	7ff00000 	.word	0x7ff00000
 800324c:	08005029 	.word	0x08005029
 8003250:	08005020 	.word	0x08005020
 8003254:	08004ffd 	.word	0x08004ffd
 8003258:	3ff80000 	.word	0x3ff80000
 800325c:	08005138 	.word	0x08005138
 8003260:	0800509f 	.word	0x0800509f
 8003264:	2501      	movs	r5, #1
 8003266:	2300      	movs	r3, #0
 8003268:	9306      	str	r3, [sp, #24]
 800326a:	9508      	str	r5, [sp, #32]
 800326c:	f04f 33ff 	mov.w	r3, #4294967295
 8003270:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003274:	2200      	movs	r2, #0
 8003276:	2312      	movs	r3, #18
 8003278:	e7b0      	b.n	80031dc <_dtoa_r+0x26c>
 800327a:	2301      	movs	r3, #1
 800327c:	9308      	str	r3, [sp, #32]
 800327e:	e7f5      	b.n	800326c <_dtoa_r+0x2fc>
 8003280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003282:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003286:	e7b8      	b.n	80031fa <_dtoa_r+0x28a>
 8003288:	3101      	adds	r1, #1
 800328a:	6041      	str	r1, [r0, #4]
 800328c:	0052      	lsls	r2, r2, #1
 800328e:	e7b8      	b.n	8003202 <_dtoa_r+0x292>
 8003290:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003292:	9a01      	ldr	r2, [sp, #4]
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	9b03      	ldr	r3, [sp, #12]
 8003298:	2b0e      	cmp	r3, #14
 800329a:	f200 809d 	bhi.w	80033d8 <_dtoa_r+0x468>
 800329e:	2d00      	cmp	r5, #0
 80032a0:	f000 809a 	beq.w	80033d8 <_dtoa_r+0x468>
 80032a4:	9b00      	ldr	r3, [sp, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	dd32      	ble.n	8003310 <_dtoa_r+0x3a0>
 80032aa:	4ab7      	ldr	r2, [pc, #732]	; (8003588 <_dtoa_r+0x618>)
 80032ac:	f003 030f 	and.w	r3, r3, #15
 80032b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80032b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80032b8:	9b00      	ldr	r3, [sp, #0]
 80032ba:	05d8      	lsls	r0, r3, #23
 80032bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80032c0:	d516      	bpl.n	80032f0 <_dtoa_r+0x380>
 80032c2:	4bb2      	ldr	r3, [pc, #712]	; (800358c <_dtoa_r+0x61c>)
 80032c4:	ec51 0b19 	vmov	r0, r1, d9
 80032c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80032cc:	f7fd fade 	bl	800088c <__aeabi_ddiv>
 80032d0:	f007 070f 	and.w	r7, r7, #15
 80032d4:	4682      	mov	sl, r0
 80032d6:	468b      	mov	fp, r1
 80032d8:	2503      	movs	r5, #3
 80032da:	4eac      	ldr	r6, [pc, #688]	; (800358c <_dtoa_r+0x61c>)
 80032dc:	b957      	cbnz	r7, 80032f4 <_dtoa_r+0x384>
 80032de:	4642      	mov	r2, r8
 80032e0:	464b      	mov	r3, r9
 80032e2:	4650      	mov	r0, sl
 80032e4:	4659      	mov	r1, fp
 80032e6:	f7fd fad1 	bl	800088c <__aeabi_ddiv>
 80032ea:	4682      	mov	sl, r0
 80032ec:	468b      	mov	fp, r1
 80032ee:	e028      	b.n	8003342 <_dtoa_r+0x3d2>
 80032f0:	2502      	movs	r5, #2
 80032f2:	e7f2      	b.n	80032da <_dtoa_r+0x36a>
 80032f4:	07f9      	lsls	r1, r7, #31
 80032f6:	d508      	bpl.n	800330a <_dtoa_r+0x39a>
 80032f8:	4640      	mov	r0, r8
 80032fa:	4649      	mov	r1, r9
 80032fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8003300:	f7fd f99a 	bl	8000638 <__aeabi_dmul>
 8003304:	3501      	adds	r5, #1
 8003306:	4680      	mov	r8, r0
 8003308:	4689      	mov	r9, r1
 800330a:	107f      	asrs	r7, r7, #1
 800330c:	3608      	adds	r6, #8
 800330e:	e7e5      	b.n	80032dc <_dtoa_r+0x36c>
 8003310:	f000 809b 	beq.w	800344a <_dtoa_r+0x4da>
 8003314:	9b00      	ldr	r3, [sp, #0]
 8003316:	4f9d      	ldr	r7, [pc, #628]	; (800358c <_dtoa_r+0x61c>)
 8003318:	425e      	negs	r6, r3
 800331a:	4b9b      	ldr	r3, [pc, #620]	; (8003588 <_dtoa_r+0x618>)
 800331c:	f006 020f 	and.w	r2, r6, #15
 8003320:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003328:	ec51 0b19 	vmov	r0, r1, d9
 800332c:	f7fd f984 	bl	8000638 <__aeabi_dmul>
 8003330:	1136      	asrs	r6, r6, #4
 8003332:	4682      	mov	sl, r0
 8003334:	468b      	mov	fp, r1
 8003336:	2300      	movs	r3, #0
 8003338:	2502      	movs	r5, #2
 800333a:	2e00      	cmp	r6, #0
 800333c:	d17a      	bne.n	8003434 <_dtoa_r+0x4c4>
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1d3      	bne.n	80032ea <_dtoa_r+0x37a>
 8003342:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8082 	beq.w	800344e <_dtoa_r+0x4de>
 800334a:	4b91      	ldr	r3, [pc, #580]	; (8003590 <_dtoa_r+0x620>)
 800334c:	2200      	movs	r2, #0
 800334e:	4650      	mov	r0, sl
 8003350:	4659      	mov	r1, fp
 8003352:	f7fd fbe3 	bl	8000b1c <__aeabi_dcmplt>
 8003356:	2800      	cmp	r0, #0
 8003358:	d079      	beq.n	800344e <_dtoa_r+0x4de>
 800335a:	9b03      	ldr	r3, [sp, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d076      	beq.n	800344e <_dtoa_r+0x4de>
 8003360:	9b02      	ldr	r3, [sp, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	dd36      	ble.n	80033d4 <_dtoa_r+0x464>
 8003366:	9b00      	ldr	r3, [sp, #0]
 8003368:	4650      	mov	r0, sl
 800336a:	4659      	mov	r1, fp
 800336c:	1e5f      	subs	r7, r3, #1
 800336e:	2200      	movs	r2, #0
 8003370:	4b88      	ldr	r3, [pc, #544]	; (8003594 <_dtoa_r+0x624>)
 8003372:	f7fd f961 	bl	8000638 <__aeabi_dmul>
 8003376:	9e02      	ldr	r6, [sp, #8]
 8003378:	4682      	mov	sl, r0
 800337a:	468b      	mov	fp, r1
 800337c:	3501      	adds	r5, #1
 800337e:	4628      	mov	r0, r5
 8003380:	f7fd f8f0 	bl	8000564 <__aeabi_i2d>
 8003384:	4652      	mov	r2, sl
 8003386:	465b      	mov	r3, fp
 8003388:	f7fd f956 	bl	8000638 <__aeabi_dmul>
 800338c:	4b82      	ldr	r3, [pc, #520]	; (8003598 <_dtoa_r+0x628>)
 800338e:	2200      	movs	r2, #0
 8003390:	f7fc ff9c 	bl	80002cc <__adddf3>
 8003394:	46d0      	mov	r8, sl
 8003396:	46d9      	mov	r9, fp
 8003398:	4682      	mov	sl, r0
 800339a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800339e:	2e00      	cmp	r6, #0
 80033a0:	d158      	bne.n	8003454 <_dtoa_r+0x4e4>
 80033a2:	4b7e      	ldr	r3, [pc, #504]	; (800359c <_dtoa_r+0x62c>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	4640      	mov	r0, r8
 80033a8:	4649      	mov	r1, r9
 80033aa:	f7fc ff8d 	bl	80002c8 <__aeabi_dsub>
 80033ae:	4652      	mov	r2, sl
 80033b0:	465b      	mov	r3, fp
 80033b2:	4680      	mov	r8, r0
 80033b4:	4689      	mov	r9, r1
 80033b6:	f7fd fbcf 	bl	8000b58 <__aeabi_dcmpgt>
 80033ba:	2800      	cmp	r0, #0
 80033bc:	f040 8295 	bne.w	80038ea <_dtoa_r+0x97a>
 80033c0:	4652      	mov	r2, sl
 80033c2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80033c6:	4640      	mov	r0, r8
 80033c8:	4649      	mov	r1, r9
 80033ca:	f7fd fba7 	bl	8000b1c <__aeabi_dcmplt>
 80033ce:	2800      	cmp	r0, #0
 80033d0:	f040 8289 	bne.w	80038e6 <_dtoa_r+0x976>
 80033d4:	ec5b ab19 	vmov	sl, fp, d9
 80033d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f2c0 8148 	blt.w	8003670 <_dtoa_r+0x700>
 80033e0:	9a00      	ldr	r2, [sp, #0]
 80033e2:	2a0e      	cmp	r2, #14
 80033e4:	f300 8144 	bgt.w	8003670 <_dtoa_r+0x700>
 80033e8:	4b67      	ldr	r3, [pc, #412]	; (8003588 <_dtoa_r+0x618>)
 80033ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80033f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f280 80d5 	bge.w	80035a4 <_dtoa_r+0x634>
 80033fa:	9b03      	ldr	r3, [sp, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f300 80d1 	bgt.w	80035a4 <_dtoa_r+0x634>
 8003402:	f040 826f 	bne.w	80038e4 <_dtoa_r+0x974>
 8003406:	4b65      	ldr	r3, [pc, #404]	; (800359c <_dtoa_r+0x62c>)
 8003408:	2200      	movs	r2, #0
 800340a:	4640      	mov	r0, r8
 800340c:	4649      	mov	r1, r9
 800340e:	f7fd f913 	bl	8000638 <__aeabi_dmul>
 8003412:	4652      	mov	r2, sl
 8003414:	465b      	mov	r3, fp
 8003416:	f7fd fb95 	bl	8000b44 <__aeabi_dcmpge>
 800341a:	9e03      	ldr	r6, [sp, #12]
 800341c:	4637      	mov	r7, r6
 800341e:	2800      	cmp	r0, #0
 8003420:	f040 8245 	bne.w	80038ae <_dtoa_r+0x93e>
 8003424:	9d01      	ldr	r5, [sp, #4]
 8003426:	2331      	movs	r3, #49	; 0x31
 8003428:	f805 3b01 	strb.w	r3, [r5], #1
 800342c:	9b00      	ldr	r3, [sp, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	e240      	b.n	80038b6 <_dtoa_r+0x946>
 8003434:	07f2      	lsls	r2, r6, #31
 8003436:	d505      	bpl.n	8003444 <_dtoa_r+0x4d4>
 8003438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800343c:	f7fd f8fc 	bl	8000638 <__aeabi_dmul>
 8003440:	3501      	adds	r5, #1
 8003442:	2301      	movs	r3, #1
 8003444:	1076      	asrs	r6, r6, #1
 8003446:	3708      	adds	r7, #8
 8003448:	e777      	b.n	800333a <_dtoa_r+0x3ca>
 800344a:	2502      	movs	r5, #2
 800344c:	e779      	b.n	8003342 <_dtoa_r+0x3d2>
 800344e:	9f00      	ldr	r7, [sp, #0]
 8003450:	9e03      	ldr	r6, [sp, #12]
 8003452:	e794      	b.n	800337e <_dtoa_r+0x40e>
 8003454:	9901      	ldr	r1, [sp, #4]
 8003456:	4b4c      	ldr	r3, [pc, #304]	; (8003588 <_dtoa_r+0x618>)
 8003458:	4431      	add	r1, r6
 800345a:	910d      	str	r1, [sp, #52]	; 0x34
 800345c:	9908      	ldr	r1, [sp, #32]
 800345e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003462:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8003466:	2900      	cmp	r1, #0
 8003468:	d043      	beq.n	80034f2 <_dtoa_r+0x582>
 800346a:	494d      	ldr	r1, [pc, #308]	; (80035a0 <_dtoa_r+0x630>)
 800346c:	2000      	movs	r0, #0
 800346e:	f7fd fa0d 	bl	800088c <__aeabi_ddiv>
 8003472:	4652      	mov	r2, sl
 8003474:	465b      	mov	r3, fp
 8003476:	f7fc ff27 	bl	80002c8 <__aeabi_dsub>
 800347a:	9d01      	ldr	r5, [sp, #4]
 800347c:	4682      	mov	sl, r0
 800347e:	468b      	mov	fp, r1
 8003480:	4649      	mov	r1, r9
 8003482:	4640      	mov	r0, r8
 8003484:	f7fd fb88 	bl	8000b98 <__aeabi_d2iz>
 8003488:	4606      	mov	r6, r0
 800348a:	f7fd f86b 	bl	8000564 <__aeabi_i2d>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4640      	mov	r0, r8
 8003494:	4649      	mov	r1, r9
 8003496:	f7fc ff17 	bl	80002c8 <__aeabi_dsub>
 800349a:	3630      	adds	r6, #48	; 0x30
 800349c:	f805 6b01 	strb.w	r6, [r5], #1
 80034a0:	4652      	mov	r2, sl
 80034a2:	465b      	mov	r3, fp
 80034a4:	4680      	mov	r8, r0
 80034a6:	4689      	mov	r9, r1
 80034a8:	f7fd fb38 	bl	8000b1c <__aeabi_dcmplt>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d163      	bne.n	8003578 <_dtoa_r+0x608>
 80034b0:	4642      	mov	r2, r8
 80034b2:	464b      	mov	r3, r9
 80034b4:	4936      	ldr	r1, [pc, #216]	; (8003590 <_dtoa_r+0x620>)
 80034b6:	2000      	movs	r0, #0
 80034b8:	f7fc ff06 	bl	80002c8 <__aeabi_dsub>
 80034bc:	4652      	mov	r2, sl
 80034be:	465b      	mov	r3, fp
 80034c0:	f7fd fb2c 	bl	8000b1c <__aeabi_dcmplt>
 80034c4:	2800      	cmp	r0, #0
 80034c6:	f040 80b5 	bne.w	8003634 <_dtoa_r+0x6c4>
 80034ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034cc:	429d      	cmp	r5, r3
 80034ce:	d081      	beq.n	80033d4 <_dtoa_r+0x464>
 80034d0:	4b30      	ldr	r3, [pc, #192]	; (8003594 <_dtoa_r+0x624>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	4650      	mov	r0, sl
 80034d6:	4659      	mov	r1, fp
 80034d8:	f7fd f8ae 	bl	8000638 <__aeabi_dmul>
 80034dc:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <_dtoa_r+0x624>)
 80034de:	4682      	mov	sl, r0
 80034e0:	468b      	mov	fp, r1
 80034e2:	4640      	mov	r0, r8
 80034e4:	4649      	mov	r1, r9
 80034e6:	2200      	movs	r2, #0
 80034e8:	f7fd f8a6 	bl	8000638 <__aeabi_dmul>
 80034ec:	4680      	mov	r8, r0
 80034ee:	4689      	mov	r9, r1
 80034f0:	e7c6      	b.n	8003480 <_dtoa_r+0x510>
 80034f2:	4650      	mov	r0, sl
 80034f4:	4659      	mov	r1, fp
 80034f6:	f7fd f89f 	bl	8000638 <__aeabi_dmul>
 80034fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80034fc:	9d01      	ldr	r5, [sp, #4]
 80034fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8003500:	4682      	mov	sl, r0
 8003502:	468b      	mov	fp, r1
 8003504:	4649      	mov	r1, r9
 8003506:	4640      	mov	r0, r8
 8003508:	f7fd fb46 	bl	8000b98 <__aeabi_d2iz>
 800350c:	4606      	mov	r6, r0
 800350e:	f7fd f829 	bl	8000564 <__aeabi_i2d>
 8003512:	3630      	adds	r6, #48	; 0x30
 8003514:	4602      	mov	r2, r0
 8003516:	460b      	mov	r3, r1
 8003518:	4640      	mov	r0, r8
 800351a:	4649      	mov	r1, r9
 800351c:	f7fc fed4 	bl	80002c8 <__aeabi_dsub>
 8003520:	f805 6b01 	strb.w	r6, [r5], #1
 8003524:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003526:	429d      	cmp	r5, r3
 8003528:	4680      	mov	r8, r0
 800352a:	4689      	mov	r9, r1
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	d124      	bne.n	800357c <_dtoa_r+0x60c>
 8003532:	4b1b      	ldr	r3, [pc, #108]	; (80035a0 <_dtoa_r+0x630>)
 8003534:	4650      	mov	r0, sl
 8003536:	4659      	mov	r1, fp
 8003538:	f7fc fec8 	bl	80002cc <__adddf3>
 800353c:	4602      	mov	r2, r0
 800353e:	460b      	mov	r3, r1
 8003540:	4640      	mov	r0, r8
 8003542:	4649      	mov	r1, r9
 8003544:	f7fd fb08 	bl	8000b58 <__aeabi_dcmpgt>
 8003548:	2800      	cmp	r0, #0
 800354a:	d173      	bne.n	8003634 <_dtoa_r+0x6c4>
 800354c:	4652      	mov	r2, sl
 800354e:	465b      	mov	r3, fp
 8003550:	4913      	ldr	r1, [pc, #76]	; (80035a0 <_dtoa_r+0x630>)
 8003552:	2000      	movs	r0, #0
 8003554:	f7fc feb8 	bl	80002c8 <__aeabi_dsub>
 8003558:	4602      	mov	r2, r0
 800355a:	460b      	mov	r3, r1
 800355c:	4640      	mov	r0, r8
 800355e:	4649      	mov	r1, r9
 8003560:	f7fd fadc 	bl	8000b1c <__aeabi_dcmplt>
 8003564:	2800      	cmp	r0, #0
 8003566:	f43f af35 	beq.w	80033d4 <_dtoa_r+0x464>
 800356a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800356c:	1e6b      	subs	r3, r5, #1
 800356e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003570:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003574:	2b30      	cmp	r3, #48	; 0x30
 8003576:	d0f8      	beq.n	800356a <_dtoa_r+0x5fa>
 8003578:	9700      	str	r7, [sp, #0]
 800357a:	e049      	b.n	8003610 <_dtoa_r+0x6a0>
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <_dtoa_r+0x624>)
 800357e:	f7fd f85b 	bl	8000638 <__aeabi_dmul>
 8003582:	4680      	mov	r8, r0
 8003584:	4689      	mov	r9, r1
 8003586:	e7bd      	b.n	8003504 <_dtoa_r+0x594>
 8003588:	08005138 	.word	0x08005138
 800358c:	08005110 	.word	0x08005110
 8003590:	3ff00000 	.word	0x3ff00000
 8003594:	40240000 	.word	0x40240000
 8003598:	401c0000 	.word	0x401c0000
 800359c:	40140000 	.word	0x40140000
 80035a0:	3fe00000 	.word	0x3fe00000
 80035a4:	9d01      	ldr	r5, [sp, #4]
 80035a6:	4656      	mov	r6, sl
 80035a8:	465f      	mov	r7, fp
 80035aa:	4642      	mov	r2, r8
 80035ac:	464b      	mov	r3, r9
 80035ae:	4630      	mov	r0, r6
 80035b0:	4639      	mov	r1, r7
 80035b2:	f7fd f96b 	bl	800088c <__aeabi_ddiv>
 80035b6:	f7fd faef 	bl	8000b98 <__aeabi_d2iz>
 80035ba:	4682      	mov	sl, r0
 80035bc:	f7fc ffd2 	bl	8000564 <__aeabi_i2d>
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	f7fd f838 	bl	8000638 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4630      	mov	r0, r6
 80035ce:	4639      	mov	r1, r7
 80035d0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80035d4:	f7fc fe78 	bl	80002c8 <__aeabi_dsub>
 80035d8:	f805 6b01 	strb.w	r6, [r5], #1
 80035dc:	9e01      	ldr	r6, [sp, #4]
 80035de:	9f03      	ldr	r7, [sp, #12]
 80035e0:	1bae      	subs	r6, r5, r6
 80035e2:	42b7      	cmp	r7, r6
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	d135      	bne.n	8003656 <_dtoa_r+0x6e6>
 80035ea:	f7fc fe6f 	bl	80002cc <__adddf3>
 80035ee:	4642      	mov	r2, r8
 80035f0:	464b      	mov	r3, r9
 80035f2:	4606      	mov	r6, r0
 80035f4:	460f      	mov	r7, r1
 80035f6:	f7fd faaf 	bl	8000b58 <__aeabi_dcmpgt>
 80035fa:	b9d0      	cbnz	r0, 8003632 <_dtoa_r+0x6c2>
 80035fc:	4642      	mov	r2, r8
 80035fe:	464b      	mov	r3, r9
 8003600:	4630      	mov	r0, r6
 8003602:	4639      	mov	r1, r7
 8003604:	f7fd fa80 	bl	8000b08 <__aeabi_dcmpeq>
 8003608:	b110      	cbz	r0, 8003610 <_dtoa_r+0x6a0>
 800360a:	f01a 0f01 	tst.w	sl, #1
 800360e:	d110      	bne.n	8003632 <_dtoa_r+0x6c2>
 8003610:	4620      	mov	r0, r4
 8003612:	ee18 1a10 	vmov	r1, s16
 8003616:	f000 faf3 	bl	8003c00 <_Bfree>
 800361a:	2300      	movs	r3, #0
 800361c:	9800      	ldr	r0, [sp, #0]
 800361e:	702b      	strb	r3, [r5, #0]
 8003620:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003622:	3001      	adds	r0, #1
 8003624:	6018      	str	r0, [r3, #0]
 8003626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003628:	2b00      	cmp	r3, #0
 800362a:	f43f acf1 	beq.w	8003010 <_dtoa_r+0xa0>
 800362e:	601d      	str	r5, [r3, #0]
 8003630:	e4ee      	b.n	8003010 <_dtoa_r+0xa0>
 8003632:	9f00      	ldr	r7, [sp, #0]
 8003634:	462b      	mov	r3, r5
 8003636:	461d      	mov	r5, r3
 8003638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800363c:	2a39      	cmp	r2, #57	; 0x39
 800363e:	d106      	bne.n	800364e <_dtoa_r+0x6de>
 8003640:	9a01      	ldr	r2, [sp, #4]
 8003642:	429a      	cmp	r2, r3
 8003644:	d1f7      	bne.n	8003636 <_dtoa_r+0x6c6>
 8003646:	9901      	ldr	r1, [sp, #4]
 8003648:	2230      	movs	r2, #48	; 0x30
 800364a:	3701      	adds	r7, #1
 800364c:	700a      	strb	r2, [r1, #0]
 800364e:	781a      	ldrb	r2, [r3, #0]
 8003650:	3201      	adds	r2, #1
 8003652:	701a      	strb	r2, [r3, #0]
 8003654:	e790      	b.n	8003578 <_dtoa_r+0x608>
 8003656:	4ba6      	ldr	r3, [pc, #664]	; (80038f0 <_dtoa_r+0x980>)
 8003658:	2200      	movs	r2, #0
 800365a:	f7fc ffed 	bl	8000638 <__aeabi_dmul>
 800365e:	2200      	movs	r2, #0
 8003660:	2300      	movs	r3, #0
 8003662:	4606      	mov	r6, r0
 8003664:	460f      	mov	r7, r1
 8003666:	f7fd fa4f 	bl	8000b08 <__aeabi_dcmpeq>
 800366a:	2800      	cmp	r0, #0
 800366c:	d09d      	beq.n	80035aa <_dtoa_r+0x63a>
 800366e:	e7cf      	b.n	8003610 <_dtoa_r+0x6a0>
 8003670:	9a08      	ldr	r2, [sp, #32]
 8003672:	2a00      	cmp	r2, #0
 8003674:	f000 80d7 	beq.w	8003826 <_dtoa_r+0x8b6>
 8003678:	9a06      	ldr	r2, [sp, #24]
 800367a:	2a01      	cmp	r2, #1
 800367c:	f300 80ba 	bgt.w	80037f4 <_dtoa_r+0x884>
 8003680:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003682:	2a00      	cmp	r2, #0
 8003684:	f000 80b2 	beq.w	80037ec <_dtoa_r+0x87c>
 8003688:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800368c:	9e07      	ldr	r6, [sp, #28]
 800368e:	9d04      	ldr	r5, [sp, #16]
 8003690:	9a04      	ldr	r2, [sp, #16]
 8003692:	441a      	add	r2, r3
 8003694:	9204      	str	r2, [sp, #16]
 8003696:	9a05      	ldr	r2, [sp, #20]
 8003698:	2101      	movs	r1, #1
 800369a:	441a      	add	r2, r3
 800369c:	4620      	mov	r0, r4
 800369e:	9205      	str	r2, [sp, #20]
 80036a0:	f000 fb66 	bl	8003d70 <__i2b>
 80036a4:	4607      	mov	r7, r0
 80036a6:	2d00      	cmp	r5, #0
 80036a8:	dd0c      	ble.n	80036c4 <_dtoa_r+0x754>
 80036aa:	9b05      	ldr	r3, [sp, #20]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	dd09      	ble.n	80036c4 <_dtoa_r+0x754>
 80036b0:	42ab      	cmp	r3, r5
 80036b2:	9a04      	ldr	r2, [sp, #16]
 80036b4:	bfa8      	it	ge
 80036b6:	462b      	movge	r3, r5
 80036b8:	1ad2      	subs	r2, r2, r3
 80036ba:	9204      	str	r2, [sp, #16]
 80036bc:	9a05      	ldr	r2, [sp, #20]
 80036be:	1aed      	subs	r5, r5, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	9305      	str	r3, [sp, #20]
 80036c4:	9b07      	ldr	r3, [sp, #28]
 80036c6:	b31b      	cbz	r3, 8003710 <_dtoa_r+0x7a0>
 80036c8:	9b08      	ldr	r3, [sp, #32]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80af 	beq.w	800382e <_dtoa_r+0x8be>
 80036d0:	2e00      	cmp	r6, #0
 80036d2:	dd13      	ble.n	80036fc <_dtoa_r+0x78c>
 80036d4:	4639      	mov	r1, r7
 80036d6:	4632      	mov	r2, r6
 80036d8:	4620      	mov	r0, r4
 80036da:	f000 fc09 	bl	8003ef0 <__pow5mult>
 80036de:	ee18 2a10 	vmov	r2, s16
 80036e2:	4601      	mov	r1, r0
 80036e4:	4607      	mov	r7, r0
 80036e6:	4620      	mov	r0, r4
 80036e8:	f000 fb58 	bl	8003d9c <__multiply>
 80036ec:	ee18 1a10 	vmov	r1, s16
 80036f0:	4680      	mov	r8, r0
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 fa84 	bl	8003c00 <_Bfree>
 80036f8:	ee08 8a10 	vmov	s16, r8
 80036fc:	9b07      	ldr	r3, [sp, #28]
 80036fe:	1b9a      	subs	r2, r3, r6
 8003700:	d006      	beq.n	8003710 <_dtoa_r+0x7a0>
 8003702:	ee18 1a10 	vmov	r1, s16
 8003706:	4620      	mov	r0, r4
 8003708:	f000 fbf2 	bl	8003ef0 <__pow5mult>
 800370c:	ee08 0a10 	vmov	s16, r0
 8003710:	2101      	movs	r1, #1
 8003712:	4620      	mov	r0, r4
 8003714:	f000 fb2c 	bl	8003d70 <__i2b>
 8003718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	4606      	mov	r6, r0
 800371e:	f340 8088 	ble.w	8003832 <_dtoa_r+0x8c2>
 8003722:	461a      	mov	r2, r3
 8003724:	4601      	mov	r1, r0
 8003726:	4620      	mov	r0, r4
 8003728:	f000 fbe2 	bl	8003ef0 <__pow5mult>
 800372c:	9b06      	ldr	r3, [sp, #24]
 800372e:	2b01      	cmp	r3, #1
 8003730:	4606      	mov	r6, r0
 8003732:	f340 8081 	ble.w	8003838 <_dtoa_r+0x8c8>
 8003736:	f04f 0800 	mov.w	r8, #0
 800373a:	6933      	ldr	r3, [r6, #16]
 800373c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003740:	6918      	ldr	r0, [r3, #16]
 8003742:	f000 fac5 	bl	8003cd0 <__hi0bits>
 8003746:	f1c0 0020 	rsb	r0, r0, #32
 800374a:	9b05      	ldr	r3, [sp, #20]
 800374c:	4418      	add	r0, r3
 800374e:	f010 001f 	ands.w	r0, r0, #31
 8003752:	f000 8092 	beq.w	800387a <_dtoa_r+0x90a>
 8003756:	f1c0 0320 	rsb	r3, r0, #32
 800375a:	2b04      	cmp	r3, #4
 800375c:	f340 808a 	ble.w	8003874 <_dtoa_r+0x904>
 8003760:	f1c0 001c 	rsb	r0, r0, #28
 8003764:	9b04      	ldr	r3, [sp, #16]
 8003766:	4403      	add	r3, r0
 8003768:	9304      	str	r3, [sp, #16]
 800376a:	9b05      	ldr	r3, [sp, #20]
 800376c:	4403      	add	r3, r0
 800376e:	4405      	add	r5, r0
 8003770:	9305      	str	r3, [sp, #20]
 8003772:	9b04      	ldr	r3, [sp, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	dd07      	ble.n	8003788 <_dtoa_r+0x818>
 8003778:	ee18 1a10 	vmov	r1, s16
 800377c:	461a      	mov	r2, r3
 800377e:	4620      	mov	r0, r4
 8003780:	f000 fc10 	bl	8003fa4 <__lshift>
 8003784:	ee08 0a10 	vmov	s16, r0
 8003788:	9b05      	ldr	r3, [sp, #20]
 800378a:	2b00      	cmp	r3, #0
 800378c:	dd05      	ble.n	800379a <_dtoa_r+0x82a>
 800378e:	4631      	mov	r1, r6
 8003790:	461a      	mov	r2, r3
 8003792:	4620      	mov	r0, r4
 8003794:	f000 fc06 	bl	8003fa4 <__lshift>
 8003798:	4606      	mov	r6, r0
 800379a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800379c:	2b00      	cmp	r3, #0
 800379e:	d06e      	beq.n	800387e <_dtoa_r+0x90e>
 80037a0:	ee18 0a10 	vmov	r0, s16
 80037a4:	4631      	mov	r1, r6
 80037a6:	f000 fc6d 	bl	8004084 <__mcmp>
 80037aa:	2800      	cmp	r0, #0
 80037ac:	da67      	bge.n	800387e <_dtoa_r+0x90e>
 80037ae:	9b00      	ldr	r3, [sp, #0]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	ee18 1a10 	vmov	r1, s16
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	220a      	movs	r2, #10
 80037ba:	2300      	movs	r3, #0
 80037bc:	4620      	mov	r0, r4
 80037be:	f000 fa41 	bl	8003c44 <__multadd>
 80037c2:	9b08      	ldr	r3, [sp, #32]
 80037c4:	ee08 0a10 	vmov	s16, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 81b1 	beq.w	8003b30 <_dtoa_r+0xbc0>
 80037ce:	2300      	movs	r3, #0
 80037d0:	4639      	mov	r1, r7
 80037d2:	220a      	movs	r2, #10
 80037d4:	4620      	mov	r0, r4
 80037d6:	f000 fa35 	bl	8003c44 <__multadd>
 80037da:	9b02      	ldr	r3, [sp, #8]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	4607      	mov	r7, r0
 80037e0:	f300 808e 	bgt.w	8003900 <_dtoa_r+0x990>
 80037e4:	9b06      	ldr	r3, [sp, #24]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	dc51      	bgt.n	800388e <_dtoa_r+0x91e>
 80037ea:	e089      	b.n	8003900 <_dtoa_r+0x990>
 80037ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80037ee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80037f2:	e74b      	b.n	800368c <_dtoa_r+0x71c>
 80037f4:	9b03      	ldr	r3, [sp, #12]
 80037f6:	1e5e      	subs	r6, r3, #1
 80037f8:	9b07      	ldr	r3, [sp, #28]
 80037fa:	42b3      	cmp	r3, r6
 80037fc:	bfbf      	itttt	lt
 80037fe:	9b07      	ldrlt	r3, [sp, #28]
 8003800:	9607      	strlt	r6, [sp, #28]
 8003802:	1af2      	sublt	r2, r6, r3
 8003804:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8003806:	bfb6      	itet	lt
 8003808:	189b      	addlt	r3, r3, r2
 800380a:	1b9e      	subge	r6, r3, r6
 800380c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800380e:	9b03      	ldr	r3, [sp, #12]
 8003810:	bfb8      	it	lt
 8003812:	2600      	movlt	r6, #0
 8003814:	2b00      	cmp	r3, #0
 8003816:	bfb7      	itett	lt
 8003818:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800381c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8003820:	1a9d      	sublt	r5, r3, r2
 8003822:	2300      	movlt	r3, #0
 8003824:	e734      	b.n	8003690 <_dtoa_r+0x720>
 8003826:	9e07      	ldr	r6, [sp, #28]
 8003828:	9d04      	ldr	r5, [sp, #16]
 800382a:	9f08      	ldr	r7, [sp, #32]
 800382c:	e73b      	b.n	80036a6 <_dtoa_r+0x736>
 800382e:	9a07      	ldr	r2, [sp, #28]
 8003830:	e767      	b.n	8003702 <_dtoa_r+0x792>
 8003832:	9b06      	ldr	r3, [sp, #24]
 8003834:	2b01      	cmp	r3, #1
 8003836:	dc18      	bgt.n	800386a <_dtoa_r+0x8fa>
 8003838:	f1ba 0f00 	cmp.w	sl, #0
 800383c:	d115      	bne.n	800386a <_dtoa_r+0x8fa>
 800383e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003842:	b993      	cbnz	r3, 800386a <_dtoa_r+0x8fa>
 8003844:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8003848:	0d1b      	lsrs	r3, r3, #20
 800384a:	051b      	lsls	r3, r3, #20
 800384c:	b183      	cbz	r3, 8003870 <_dtoa_r+0x900>
 800384e:	9b04      	ldr	r3, [sp, #16]
 8003850:	3301      	adds	r3, #1
 8003852:	9304      	str	r3, [sp, #16]
 8003854:	9b05      	ldr	r3, [sp, #20]
 8003856:	3301      	adds	r3, #1
 8003858:	9305      	str	r3, [sp, #20]
 800385a:	f04f 0801 	mov.w	r8, #1
 800385e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	f47f af6a 	bne.w	800373a <_dtoa_r+0x7ca>
 8003866:	2001      	movs	r0, #1
 8003868:	e76f      	b.n	800374a <_dtoa_r+0x7da>
 800386a:	f04f 0800 	mov.w	r8, #0
 800386e:	e7f6      	b.n	800385e <_dtoa_r+0x8ee>
 8003870:	4698      	mov	r8, r3
 8003872:	e7f4      	b.n	800385e <_dtoa_r+0x8ee>
 8003874:	f43f af7d 	beq.w	8003772 <_dtoa_r+0x802>
 8003878:	4618      	mov	r0, r3
 800387a:	301c      	adds	r0, #28
 800387c:	e772      	b.n	8003764 <_dtoa_r+0x7f4>
 800387e:	9b03      	ldr	r3, [sp, #12]
 8003880:	2b00      	cmp	r3, #0
 8003882:	dc37      	bgt.n	80038f4 <_dtoa_r+0x984>
 8003884:	9b06      	ldr	r3, [sp, #24]
 8003886:	2b02      	cmp	r3, #2
 8003888:	dd34      	ble.n	80038f4 <_dtoa_r+0x984>
 800388a:	9b03      	ldr	r3, [sp, #12]
 800388c:	9302      	str	r3, [sp, #8]
 800388e:	9b02      	ldr	r3, [sp, #8]
 8003890:	b96b      	cbnz	r3, 80038ae <_dtoa_r+0x93e>
 8003892:	4631      	mov	r1, r6
 8003894:	2205      	movs	r2, #5
 8003896:	4620      	mov	r0, r4
 8003898:	f000 f9d4 	bl	8003c44 <__multadd>
 800389c:	4601      	mov	r1, r0
 800389e:	4606      	mov	r6, r0
 80038a0:	ee18 0a10 	vmov	r0, s16
 80038a4:	f000 fbee 	bl	8004084 <__mcmp>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	f73f adbb 	bgt.w	8003424 <_dtoa_r+0x4b4>
 80038ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038b0:	9d01      	ldr	r5, [sp, #4]
 80038b2:	43db      	mvns	r3, r3
 80038b4:	9300      	str	r3, [sp, #0]
 80038b6:	f04f 0800 	mov.w	r8, #0
 80038ba:	4631      	mov	r1, r6
 80038bc:	4620      	mov	r0, r4
 80038be:	f000 f99f 	bl	8003c00 <_Bfree>
 80038c2:	2f00      	cmp	r7, #0
 80038c4:	f43f aea4 	beq.w	8003610 <_dtoa_r+0x6a0>
 80038c8:	f1b8 0f00 	cmp.w	r8, #0
 80038cc:	d005      	beq.n	80038da <_dtoa_r+0x96a>
 80038ce:	45b8      	cmp	r8, r7
 80038d0:	d003      	beq.n	80038da <_dtoa_r+0x96a>
 80038d2:	4641      	mov	r1, r8
 80038d4:	4620      	mov	r0, r4
 80038d6:	f000 f993 	bl	8003c00 <_Bfree>
 80038da:	4639      	mov	r1, r7
 80038dc:	4620      	mov	r0, r4
 80038de:	f000 f98f 	bl	8003c00 <_Bfree>
 80038e2:	e695      	b.n	8003610 <_dtoa_r+0x6a0>
 80038e4:	2600      	movs	r6, #0
 80038e6:	4637      	mov	r7, r6
 80038e8:	e7e1      	b.n	80038ae <_dtoa_r+0x93e>
 80038ea:	9700      	str	r7, [sp, #0]
 80038ec:	4637      	mov	r7, r6
 80038ee:	e599      	b.n	8003424 <_dtoa_r+0x4b4>
 80038f0:	40240000 	.word	0x40240000
 80038f4:	9b08      	ldr	r3, [sp, #32]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	f000 80ca 	beq.w	8003a90 <_dtoa_r+0xb20>
 80038fc:	9b03      	ldr	r3, [sp, #12]
 80038fe:	9302      	str	r3, [sp, #8]
 8003900:	2d00      	cmp	r5, #0
 8003902:	dd05      	ble.n	8003910 <_dtoa_r+0x9a0>
 8003904:	4639      	mov	r1, r7
 8003906:	462a      	mov	r2, r5
 8003908:	4620      	mov	r0, r4
 800390a:	f000 fb4b 	bl	8003fa4 <__lshift>
 800390e:	4607      	mov	r7, r0
 8003910:	f1b8 0f00 	cmp.w	r8, #0
 8003914:	d05b      	beq.n	80039ce <_dtoa_r+0xa5e>
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4620      	mov	r0, r4
 800391a:	f000 f931 	bl	8003b80 <_Balloc>
 800391e:	4605      	mov	r5, r0
 8003920:	b928      	cbnz	r0, 800392e <_dtoa_r+0x9be>
 8003922:	4b87      	ldr	r3, [pc, #540]	; (8003b40 <_dtoa_r+0xbd0>)
 8003924:	4602      	mov	r2, r0
 8003926:	f240 21ea 	movw	r1, #746	; 0x2ea
 800392a:	f7ff bb3b 	b.w	8002fa4 <_dtoa_r+0x34>
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	3202      	adds	r2, #2
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	f107 010c 	add.w	r1, r7, #12
 8003938:	300c      	adds	r0, #12
 800393a:	f000 f913 	bl	8003b64 <memcpy>
 800393e:	2201      	movs	r2, #1
 8003940:	4629      	mov	r1, r5
 8003942:	4620      	mov	r0, r4
 8003944:	f000 fb2e 	bl	8003fa4 <__lshift>
 8003948:	9b01      	ldr	r3, [sp, #4]
 800394a:	f103 0901 	add.w	r9, r3, #1
 800394e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8003952:	4413      	add	r3, r2
 8003954:	9305      	str	r3, [sp, #20]
 8003956:	f00a 0301 	and.w	r3, sl, #1
 800395a:	46b8      	mov	r8, r7
 800395c:	9304      	str	r3, [sp, #16]
 800395e:	4607      	mov	r7, r0
 8003960:	4631      	mov	r1, r6
 8003962:	ee18 0a10 	vmov	r0, s16
 8003966:	f7ff fa75 	bl	8002e54 <quorem>
 800396a:	4641      	mov	r1, r8
 800396c:	9002      	str	r0, [sp, #8]
 800396e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003972:	ee18 0a10 	vmov	r0, s16
 8003976:	f000 fb85 	bl	8004084 <__mcmp>
 800397a:	463a      	mov	r2, r7
 800397c:	9003      	str	r0, [sp, #12]
 800397e:	4631      	mov	r1, r6
 8003980:	4620      	mov	r0, r4
 8003982:	f000 fb9b 	bl	80040bc <__mdiff>
 8003986:	68c2      	ldr	r2, [r0, #12]
 8003988:	f109 3bff 	add.w	fp, r9, #4294967295
 800398c:	4605      	mov	r5, r0
 800398e:	bb02      	cbnz	r2, 80039d2 <_dtoa_r+0xa62>
 8003990:	4601      	mov	r1, r0
 8003992:	ee18 0a10 	vmov	r0, s16
 8003996:	f000 fb75 	bl	8004084 <__mcmp>
 800399a:	4602      	mov	r2, r0
 800399c:	4629      	mov	r1, r5
 800399e:	4620      	mov	r0, r4
 80039a0:	9207      	str	r2, [sp, #28]
 80039a2:	f000 f92d 	bl	8003c00 <_Bfree>
 80039a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80039aa:	ea43 0102 	orr.w	r1, r3, r2
 80039ae:	9b04      	ldr	r3, [sp, #16]
 80039b0:	430b      	orrs	r3, r1
 80039b2:	464d      	mov	r5, r9
 80039b4:	d10f      	bne.n	80039d6 <_dtoa_r+0xa66>
 80039b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80039ba:	d02a      	beq.n	8003a12 <_dtoa_r+0xaa2>
 80039bc:	9b03      	ldr	r3, [sp, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	dd02      	ble.n	80039c8 <_dtoa_r+0xa58>
 80039c2:	9b02      	ldr	r3, [sp, #8]
 80039c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80039c8:	f88b a000 	strb.w	sl, [fp]
 80039cc:	e775      	b.n	80038ba <_dtoa_r+0x94a>
 80039ce:	4638      	mov	r0, r7
 80039d0:	e7ba      	b.n	8003948 <_dtoa_r+0x9d8>
 80039d2:	2201      	movs	r2, #1
 80039d4:	e7e2      	b.n	800399c <_dtoa_r+0xa2c>
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	db04      	blt.n	80039e6 <_dtoa_r+0xa76>
 80039dc:	9906      	ldr	r1, [sp, #24]
 80039de:	430b      	orrs	r3, r1
 80039e0:	9904      	ldr	r1, [sp, #16]
 80039e2:	430b      	orrs	r3, r1
 80039e4:	d122      	bne.n	8003a2c <_dtoa_r+0xabc>
 80039e6:	2a00      	cmp	r2, #0
 80039e8:	ddee      	ble.n	80039c8 <_dtoa_r+0xa58>
 80039ea:	ee18 1a10 	vmov	r1, s16
 80039ee:	2201      	movs	r2, #1
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 fad7 	bl	8003fa4 <__lshift>
 80039f6:	4631      	mov	r1, r6
 80039f8:	ee08 0a10 	vmov	s16, r0
 80039fc:	f000 fb42 	bl	8004084 <__mcmp>
 8003a00:	2800      	cmp	r0, #0
 8003a02:	dc03      	bgt.n	8003a0c <_dtoa_r+0xa9c>
 8003a04:	d1e0      	bne.n	80039c8 <_dtoa_r+0xa58>
 8003a06:	f01a 0f01 	tst.w	sl, #1
 8003a0a:	d0dd      	beq.n	80039c8 <_dtoa_r+0xa58>
 8003a0c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003a10:	d1d7      	bne.n	80039c2 <_dtoa_r+0xa52>
 8003a12:	2339      	movs	r3, #57	; 0x39
 8003a14:	f88b 3000 	strb.w	r3, [fp]
 8003a18:	462b      	mov	r3, r5
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003a22:	2a39      	cmp	r2, #57	; 0x39
 8003a24:	d071      	beq.n	8003b0a <_dtoa_r+0xb9a>
 8003a26:	3201      	adds	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
 8003a2a:	e746      	b.n	80038ba <_dtoa_r+0x94a>
 8003a2c:	2a00      	cmp	r2, #0
 8003a2e:	dd07      	ble.n	8003a40 <_dtoa_r+0xad0>
 8003a30:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8003a34:	d0ed      	beq.n	8003a12 <_dtoa_r+0xaa2>
 8003a36:	f10a 0301 	add.w	r3, sl, #1
 8003a3a:	f88b 3000 	strb.w	r3, [fp]
 8003a3e:	e73c      	b.n	80038ba <_dtoa_r+0x94a>
 8003a40:	9b05      	ldr	r3, [sp, #20]
 8003a42:	f809 ac01 	strb.w	sl, [r9, #-1]
 8003a46:	4599      	cmp	r9, r3
 8003a48:	d047      	beq.n	8003ada <_dtoa_r+0xb6a>
 8003a4a:	ee18 1a10 	vmov	r1, s16
 8003a4e:	2300      	movs	r3, #0
 8003a50:	220a      	movs	r2, #10
 8003a52:	4620      	mov	r0, r4
 8003a54:	f000 f8f6 	bl	8003c44 <__multadd>
 8003a58:	45b8      	cmp	r8, r7
 8003a5a:	ee08 0a10 	vmov	s16, r0
 8003a5e:	f04f 0300 	mov.w	r3, #0
 8003a62:	f04f 020a 	mov.w	r2, #10
 8003a66:	4641      	mov	r1, r8
 8003a68:	4620      	mov	r0, r4
 8003a6a:	d106      	bne.n	8003a7a <_dtoa_r+0xb0a>
 8003a6c:	f000 f8ea 	bl	8003c44 <__multadd>
 8003a70:	4680      	mov	r8, r0
 8003a72:	4607      	mov	r7, r0
 8003a74:	f109 0901 	add.w	r9, r9, #1
 8003a78:	e772      	b.n	8003960 <_dtoa_r+0x9f0>
 8003a7a:	f000 f8e3 	bl	8003c44 <__multadd>
 8003a7e:	4639      	mov	r1, r7
 8003a80:	4680      	mov	r8, r0
 8003a82:	2300      	movs	r3, #0
 8003a84:	220a      	movs	r2, #10
 8003a86:	4620      	mov	r0, r4
 8003a88:	f000 f8dc 	bl	8003c44 <__multadd>
 8003a8c:	4607      	mov	r7, r0
 8003a8e:	e7f1      	b.n	8003a74 <_dtoa_r+0xb04>
 8003a90:	9b03      	ldr	r3, [sp, #12]
 8003a92:	9302      	str	r3, [sp, #8]
 8003a94:	9d01      	ldr	r5, [sp, #4]
 8003a96:	ee18 0a10 	vmov	r0, s16
 8003a9a:	4631      	mov	r1, r6
 8003a9c:	f7ff f9da 	bl	8002e54 <quorem>
 8003aa0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8003aa4:	9b01      	ldr	r3, [sp, #4]
 8003aa6:	f805 ab01 	strb.w	sl, [r5], #1
 8003aaa:	1aea      	subs	r2, r5, r3
 8003aac:	9b02      	ldr	r3, [sp, #8]
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	dd09      	ble.n	8003ac6 <_dtoa_r+0xb56>
 8003ab2:	ee18 1a10 	vmov	r1, s16
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	220a      	movs	r2, #10
 8003aba:	4620      	mov	r0, r4
 8003abc:	f000 f8c2 	bl	8003c44 <__multadd>
 8003ac0:	ee08 0a10 	vmov	s16, r0
 8003ac4:	e7e7      	b.n	8003a96 <_dtoa_r+0xb26>
 8003ac6:	9b02      	ldr	r3, [sp, #8]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	bfc8      	it	gt
 8003acc:	461d      	movgt	r5, r3
 8003ace:	9b01      	ldr	r3, [sp, #4]
 8003ad0:	bfd8      	it	le
 8003ad2:	2501      	movle	r5, #1
 8003ad4:	441d      	add	r5, r3
 8003ad6:	f04f 0800 	mov.w	r8, #0
 8003ada:	ee18 1a10 	vmov	r1, s16
 8003ade:	2201      	movs	r2, #1
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	f000 fa5f 	bl	8003fa4 <__lshift>
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	ee08 0a10 	vmov	s16, r0
 8003aec:	f000 faca 	bl	8004084 <__mcmp>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	dc91      	bgt.n	8003a18 <_dtoa_r+0xaa8>
 8003af4:	d102      	bne.n	8003afc <_dtoa_r+0xb8c>
 8003af6:	f01a 0f01 	tst.w	sl, #1
 8003afa:	d18d      	bne.n	8003a18 <_dtoa_r+0xaa8>
 8003afc:	462b      	mov	r3, r5
 8003afe:	461d      	mov	r5, r3
 8003b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003b04:	2a30      	cmp	r2, #48	; 0x30
 8003b06:	d0fa      	beq.n	8003afe <_dtoa_r+0xb8e>
 8003b08:	e6d7      	b.n	80038ba <_dtoa_r+0x94a>
 8003b0a:	9a01      	ldr	r2, [sp, #4]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d184      	bne.n	8003a1a <_dtoa_r+0xaaa>
 8003b10:	9b00      	ldr	r3, [sp, #0]
 8003b12:	3301      	adds	r3, #1
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2331      	movs	r3, #49	; 0x31
 8003b18:	7013      	strb	r3, [r2, #0]
 8003b1a:	e6ce      	b.n	80038ba <_dtoa_r+0x94a>
 8003b1c:	4b09      	ldr	r3, [pc, #36]	; (8003b44 <_dtoa_r+0xbd4>)
 8003b1e:	f7ff ba95 	b.w	800304c <_dtoa_r+0xdc>
 8003b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f47f aa6e 	bne.w	8003006 <_dtoa_r+0x96>
 8003b2a:	4b07      	ldr	r3, [pc, #28]	; (8003b48 <_dtoa_r+0xbd8>)
 8003b2c:	f7ff ba8e 	b.w	800304c <_dtoa_r+0xdc>
 8003b30:	9b02      	ldr	r3, [sp, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	dcae      	bgt.n	8003a94 <_dtoa_r+0xb24>
 8003b36:	9b06      	ldr	r3, [sp, #24]
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	f73f aea8 	bgt.w	800388e <_dtoa_r+0x91e>
 8003b3e:	e7a9      	b.n	8003a94 <_dtoa_r+0xb24>
 8003b40:	0800509f 	.word	0x0800509f
 8003b44:	08004ffc 	.word	0x08004ffc
 8003b48:	08005020 	.word	0x08005020

08003b4c <_localeconv_r>:
 8003b4c:	4800      	ldr	r0, [pc, #0]	; (8003b50 <_localeconv_r+0x4>)
 8003b4e:	4770      	bx	lr
 8003b50:	20000160 	.word	0x20000160

08003b54 <malloc>:
 8003b54:	4b02      	ldr	r3, [pc, #8]	; (8003b60 <malloc+0xc>)
 8003b56:	4601      	mov	r1, r0
 8003b58:	6818      	ldr	r0, [r3, #0]
 8003b5a:	f000 bc17 	b.w	800438c <_malloc_r>
 8003b5e:	bf00      	nop
 8003b60:	2000000c 	.word	0x2000000c

08003b64 <memcpy>:
 8003b64:	440a      	add	r2, r1
 8003b66:	4291      	cmp	r1, r2
 8003b68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b6c:	d100      	bne.n	8003b70 <memcpy+0xc>
 8003b6e:	4770      	bx	lr
 8003b70:	b510      	push	{r4, lr}
 8003b72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b7a:	4291      	cmp	r1, r2
 8003b7c:	d1f9      	bne.n	8003b72 <memcpy+0xe>
 8003b7e:	bd10      	pop	{r4, pc}

08003b80 <_Balloc>:
 8003b80:	b570      	push	{r4, r5, r6, lr}
 8003b82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003b84:	4604      	mov	r4, r0
 8003b86:	460d      	mov	r5, r1
 8003b88:	b976      	cbnz	r6, 8003ba8 <_Balloc+0x28>
 8003b8a:	2010      	movs	r0, #16
 8003b8c:	f7ff ffe2 	bl	8003b54 <malloc>
 8003b90:	4602      	mov	r2, r0
 8003b92:	6260      	str	r0, [r4, #36]	; 0x24
 8003b94:	b920      	cbnz	r0, 8003ba0 <_Balloc+0x20>
 8003b96:	4b18      	ldr	r3, [pc, #96]	; (8003bf8 <_Balloc+0x78>)
 8003b98:	4818      	ldr	r0, [pc, #96]	; (8003bfc <_Balloc+0x7c>)
 8003b9a:	2166      	movs	r1, #102	; 0x66
 8003b9c:	f000 fc7a 	bl	8004494 <__assert_func>
 8003ba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003ba4:	6006      	str	r6, [r0, #0]
 8003ba6:	60c6      	str	r6, [r0, #12]
 8003ba8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003baa:	68f3      	ldr	r3, [r6, #12]
 8003bac:	b183      	cbz	r3, 8003bd0 <_Balloc+0x50>
 8003bae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003bb6:	b9b8      	cbnz	r0, 8003be8 <_Balloc+0x68>
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f605 	lsl.w	r6, r1, r5
 8003bbe:	1d72      	adds	r2, r6, #5
 8003bc0:	0092      	lsls	r2, r2, #2
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	f000 fb60 	bl	8004288 <_calloc_r>
 8003bc8:	b160      	cbz	r0, 8003be4 <_Balloc+0x64>
 8003bca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003bce:	e00e      	b.n	8003bee <_Balloc+0x6e>
 8003bd0:	2221      	movs	r2, #33	; 0x21
 8003bd2:	2104      	movs	r1, #4
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f000 fb57 	bl	8004288 <_calloc_r>
 8003bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bdc:	60f0      	str	r0, [r6, #12]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e4      	bne.n	8003bae <_Balloc+0x2e>
 8003be4:	2000      	movs	r0, #0
 8003be6:	bd70      	pop	{r4, r5, r6, pc}
 8003be8:	6802      	ldr	r2, [r0, #0]
 8003bea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003bf4:	e7f7      	b.n	8003be6 <_Balloc+0x66>
 8003bf6:	bf00      	nop
 8003bf8:	0800502d 	.word	0x0800502d
 8003bfc:	080050b0 	.word	0x080050b0

08003c00 <_Bfree>:
 8003c00:	b570      	push	{r4, r5, r6, lr}
 8003c02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003c04:	4605      	mov	r5, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	b976      	cbnz	r6, 8003c28 <_Bfree+0x28>
 8003c0a:	2010      	movs	r0, #16
 8003c0c:	f7ff ffa2 	bl	8003b54 <malloc>
 8003c10:	4602      	mov	r2, r0
 8003c12:	6268      	str	r0, [r5, #36]	; 0x24
 8003c14:	b920      	cbnz	r0, 8003c20 <_Bfree+0x20>
 8003c16:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <_Bfree+0x3c>)
 8003c18:	4809      	ldr	r0, [pc, #36]	; (8003c40 <_Bfree+0x40>)
 8003c1a:	218a      	movs	r1, #138	; 0x8a
 8003c1c:	f000 fc3a 	bl	8004494 <__assert_func>
 8003c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003c24:	6006      	str	r6, [r0, #0]
 8003c26:	60c6      	str	r6, [r0, #12]
 8003c28:	b13c      	cbz	r4, 8003c3a <_Bfree+0x3a>
 8003c2a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003c2c:	6862      	ldr	r2, [r4, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c34:	6021      	str	r1, [r4, #0]
 8003c36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	0800502d 	.word	0x0800502d
 8003c40:	080050b0 	.word	0x080050b0

08003c44 <__multadd>:
 8003c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c48:	690d      	ldr	r5, [r1, #16]
 8003c4a:	4607      	mov	r7, r0
 8003c4c:	460c      	mov	r4, r1
 8003c4e:	461e      	mov	r6, r3
 8003c50:	f101 0c14 	add.w	ip, r1, #20
 8003c54:	2000      	movs	r0, #0
 8003c56:	f8dc 3000 	ldr.w	r3, [ip]
 8003c5a:	b299      	uxth	r1, r3
 8003c5c:	fb02 6101 	mla	r1, r2, r1, r6
 8003c60:	0c1e      	lsrs	r6, r3, #16
 8003c62:	0c0b      	lsrs	r3, r1, #16
 8003c64:	fb02 3306 	mla	r3, r2, r6, r3
 8003c68:	b289      	uxth	r1, r1
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003c70:	4285      	cmp	r5, r0
 8003c72:	f84c 1b04 	str.w	r1, [ip], #4
 8003c76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003c7a:	dcec      	bgt.n	8003c56 <__multadd+0x12>
 8003c7c:	b30e      	cbz	r6, 8003cc2 <__multadd+0x7e>
 8003c7e:	68a3      	ldr	r3, [r4, #8]
 8003c80:	42ab      	cmp	r3, r5
 8003c82:	dc19      	bgt.n	8003cb8 <__multadd+0x74>
 8003c84:	6861      	ldr	r1, [r4, #4]
 8003c86:	4638      	mov	r0, r7
 8003c88:	3101      	adds	r1, #1
 8003c8a:	f7ff ff79 	bl	8003b80 <_Balloc>
 8003c8e:	4680      	mov	r8, r0
 8003c90:	b928      	cbnz	r0, 8003c9e <__multadd+0x5a>
 8003c92:	4602      	mov	r2, r0
 8003c94:	4b0c      	ldr	r3, [pc, #48]	; (8003cc8 <__multadd+0x84>)
 8003c96:	480d      	ldr	r0, [pc, #52]	; (8003ccc <__multadd+0x88>)
 8003c98:	21b5      	movs	r1, #181	; 0xb5
 8003c9a:	f000 fbfb 	bl	8004494 <__assert_func>
 8003c9e:	6922      	ldr	r2, [r4, #16]
 8003ca0:	3202      	adds	r2, #2
 8003ca2:	f104 010c 	add.w	r1, r4, #12
 8003ca6:	0092      	lsls	r2, r2, #2
 8003ca8:	300c      	adds	r0, #12
 8003caa:	f7ff ff5b 	bl	8003b64 <memcpy>
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4638      	mov	r0, r7
 8003cb2:	f7ff ffa5 	bl	8003c00 <_Bfree>
 8003cb6:	4644      	mov	r4, r8
 8003cb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003cbc:	3501      	adds	r5, #1
 8003cbe:	615e      	str	r6, [r3, #20]
 8003cc0:	6125      	str	r5, [r4, #16]
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003cc8:	0800509f 	.word	0x0800509f
 8003ccc:	080050b0 	.word	0x080050b0

08003cd0 <__hi0bits>:
 8003cd0:	0c03      	lsrs	r3, r0, #16
 8003cd2:	041b      	lsls	r3, r3, #16
 8003cd4:	b9d3      	cbnz	r3, 8003d0c <__hi0bits+0x3c>
 8003cd6:	0400      	lsls	r0, r0, #16
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003cde:	bf04      	itt	eq
 8003ce0:	0200      	lsleq	r0, r0, #8
 8003ce2:	3308      	addeq	r3, #8
 8003ce4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003ce8:	bf04      	itt	eq
 8003cea:	0100      	lsleq	r0, r0, #4
 8003cec:	3304      	addeq	r3, #4
 8003cee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003cf2:	bf04      	itt	eq
 8003cf4:	0080      	lsleq	r0, r0, #2
 8003cf6:	3302      	addeq	r3, #2
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	db05      	blt.n	8003d08 <__hi0bits+0x38>
 8003cfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003d00:	f103 0301 	add.w	r3, r3, #1
 8003d04:	bf08      	it	eq
 8003d06:	2320      	moveq	r3, #32
 8003d08:	4618      	mov	r0, r3
 8003d0a:	4770      	bx	lr
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	e7e4      	b.n	8003cda <__hi0bits+0xa>

08003d10 <__lo0bits>:
 8003d10:	6803      	ldr	r3, [r0, #0]
 8003d12:	f013 0207 	ands.w	r2, r3, #7
 8003d16:	4601      	mov	r1, r0
 8003d18:	d00b      	beq.n	8003d32 <__lo0bits+0x22>
 8003d1a:	07da      	lsls	r2, r3, #31
 8003d1c:	d423      	bmi.n	8003d66 <__lo0bits+0x56>
 8003d1e:	0798      	lsls	r0, r3, #30
 8003d20:	bf49      	itett	mi
 8003d22:	085b      	lsrmi	r3, r3, #1
 8003d24:	089b      	lsrpl	r3, r3, #2
 8003d26:	2001      	movmi	r0, #1
 8003d28:	600b      	strmi	r3, [r1, #0]
 8003d2a:	bf5c      	itt	pl
 8003d2c:	600b      	strpl	r3, [r1, #0]
 8003d2e:	2002      	movpl	r0, #2
 8003d30:	4770      	bx	lr
 8003d32:	b298      	uxth	r0, r3
 8003d34:	b9a8      	cbnz	r0, 8003d62 <__lo0bits+0x52>
 8003d36:	0c1b      	lsrs	r3, r3, #16
 8003d38:	2010      	movs	r0, #16
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	b90a      	cbnz	r2, 8003d42 <__lo0bits+0x32>
 8003d3e:	3008      	adds	r0, #8
 8003d40:	0a1b      	lsrs	r3, r3, #8
 8003d42:	071a      	lsls	r2, r3, #28
 8003d44:	bf04      	itt	eq
 8003d46:	091b      	lsreq	r3, r3, #4
 8003d48:	3004      	addeq	r0, #4
 8003d4a:	079a      	lsls	r2, r3, #30
 8003d4c:	bf04      	itt	eq
 8003d4e:	089b      	lsreq	r3, r3, #2
 8003d50:	3002      	addeq	r0, #2
 8003d52:	07da      	lsls	r2, r3, #31
 8003d54:	d403      	bmi.n	8003d5e <__lo0bits+0x4e>
 8003d56:	085b      	lsrs	r3, r3, #1
 8003d58:	f100 0001 	add.w	r0, r0, #1
 8003d5c:	d005      	beq.n	8003d6a <__lo0bits+0x5a>
 8003d5e:	600b      	str	r3, [r1, #0]
 8003d60:	4770      	bx	lr
 8003d62:	4610      	mov	r0, r2
 8003d64:	e7e9      	b.n	8003d3a <__lo0bits+0x2a>
 8003d66:	2000      	movs	r0, #0
 8003d68:	4770      	bx	lr
 8003d6a:	2020      	movs	r0, #32
 8003d6c:	4770      	bx	lr
	...

08003d70 <__i2b>:
 8003d70:	b510      	push	{r4, lr}
 8003d72:	460c      	mov	r4, r1
 8003d74:	2101      	movs	r1, #1
 8003d76:	f7ff ff03 	bl	8003b80 <_Balloc>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	b928      	cbnz	r0, 8003d8a <__i2b+0x1a>
 8003d7e:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <__i2b+0x24>)
 8003d80:	4805      	ldr	r0, [pc, #20]	; (8003d98 <__i2b+0x28>)
 8003d82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003d86:	f000 fb85 	bl	8004494 <__assert_func>
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	6144      	str	r4, [r0, #20]
 8003d8e:	6103      	str	r3, [r0, #16]
 8003d90:	bd10      	pop	{r4, pc}
 8003d92:	bf00      	nop
 8003d94:	0800509f 	.word	0x0800509f
 8003d98:	080050b0 	.word	0x080050b0

08003d9c <__multiply>:
 8003d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da0:	4691      	mov	r9, r2
 8003da2:	690a      	ldr	r2, [r1, #16]
 8003da4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	bfb8      	it	lt
 8003dac:	460b      	movlt	r3, r1
 8003dae:	460c      	mov	r4, r1
 8003db0:	bfbc      	itt	lt
 8003db2:	464c      	movlt	r4, r9
 8003db4:	4699      	movlt	r9, r3
 8003db6:	6927      	ldr	r7, [r4, #16]
 8003db8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8003dbc:	68a3      	ldr	r3, [r4, #8]
 8003dbe:	6861      	ldr	r1, [r4, #4]
 8003dc0:	eb07 060a 	add.w	r6, r7, sl
 8003dc4:	42b3      	cmp	r3, r6
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	bfb8      	it	lt
 8003dca:	3101      	addlt	r1, #1
 8003dcc:	f7ff fed8 	bl	8003b80 <_Balloc>
 8003dd0:	b930      	cbnz	r0, 8003de0 <__multiply+0x44>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	4b44      	ldr	r3, [pc, #272]	; (8003ee8 <__multiply+0x14c>)
 8003dd6:	4845      	ldr	r0, [pc, #276]	; (8003eec <__multiply+0x150>)
 8003dd8:	f240 115d 	movw	r1, #349	; 0x15d
 8003ddc:	f000 fb5a 	bl	8004494 <__assert_func>
 8003de0:	f100 0514 	add.w	r5, r0, #20
 8003de4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003de8:	462b      	mov	r3, r5
 8003dea:	2200      	movs	r2, #0
 8003dec:	4543      	cmp	r3, r8
 8003dee:	d321      	bcc.n	8003e34 <__multiply+0x98>
 8003df0:	f104 0314 	add.w	r3, r4, #20
 8003df4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8003df8:	f109 0314 	add.w	r3, r9, #20
 8003dfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8003e00:	9202      	str	r2, [sp, #8]
 8003e02:	1b3a      	subs	r2, r7, r4
 8003e04:	3a15      	subs	r2, #21
 8003e06:	f022 0203 	bic.w	r2, r2, #3
 8003e0a:	3204      	adds	r2, #4
 8003e0c:	f104 0115 	add.w	r1, r4, #21
 8003e10:	428f      	cmp	r7, r1
 8003e12:	bf38      	it	cc
 8003e14:	2204      	movcc	r2, #4
 8003e16:	9201      	str	r2, [sp, #4]
 8003e18:	9a02      	ldr	r2, [sp, #8]
 8003e1a:	9303      	str	r3, [sp, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d80c      	bhi.n	8003e3a <__multiply+0x9e>
 8003e20:	2e00      	cmp	r6, #0
 8003e22:	dd03      	ble.n	8003e2c <__multiply+0x90>
 8003e24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d05a      	beq.n	8003ee2 <__multiply+0x146>
 8003e2c:	6106      	str	r6, [r0, #16]
 8003e2e:	b005      	add	sp, #20
 8003e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e34:	f843 2b04 	str.w	r2, [r3], #4
 8003e38:	e7d8      	b.n	8003dec <__multiply+0x50>
 8003e3a:	f8b3 a000 	ldrh.w	sl, [r3]
 8003e3e:	f1ba 0f00 	cmp.w	sl, #0
 8003e42:	d024      	beq.n	8003e8e <__multiply+0xf2>
 8003e44:	f104 0e14 	add.w	lr, r4, #20
 8003e48:	46a9      	mov	r9, r5
 8003e4a:	f04f 0c00 	mov.w	ip, #0
 8003e4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8003e52:	f8d9 1000 	ldr.w	r1, [r9]
 8003e56:	fa1f fb82 	uxth.w	fp, r2
 8003e5a:	b289      	uxth	r1, r1
 8003e5c:	fb0a 110b 	mla	r1, sl, fp, r1
 8003e60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8003e64:	f8d9 2000 	ldr.w	r2, [r9]
 8003e68:	4461      	add	r1, ip
 8003e6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003e6e:	fb0a c20b 	mla	r2, sl, fp, ip
 8003e72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8003e76:	b289      	uxth	r1, r1
 8003e78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003e7c:	4577      	cmp	r7, lr
 8003e7e:	f849 1b04 	str.w	r1, [r9], #4
 8003e82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8003e86:	d8e2      	bhi.n	8003e4e <__multiply+0xb2>
 8003e88:	9a01      	ldr	r2, [sp, #4]
 8003e8a:	f845 c002 	str.w	ip, [r5, r2]
 8003e8e:	9a03      	ldr	r2, [sp, #12]
 8003e90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003e94:	3304      	adds	r3, #4
 8003e96:	f1b9 0f00 	cmp.w	r9, #0
 8003e9a:	d020      	beq.n	8003ede <__multiply+0x142>
 8003e9c:	6829      	ldr	r1, [r5, #0]
 8003e9e:	f104 0c14 	add.w	ip, r4, #20
 8003ea2:	46ae      	mov	lr, r5
 8003ea4:	f04f 0a00 	mov.w	sl, #0
 8003ea8:	f8bc b000 	ldrh.w	fp, [ip]
 8003eac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8003eb0:	fb09 220b 	mla	r2, r9, fp, r2
 8003eb4:	4492      	add	sl, r2
 8003eb6:	b289      	uxth	r1, r1
 8003eb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8003ebc:	f84e 1b04 	str.w	r1, [lr], #4
 8003ec0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8003ec4:	f8be 1000 	ldrh.w	r1, [lr]
 8003ec8:	0c12      	lsrs	r2, r2, #16
 8003eca:	fb09 1102 	mla	r1, r9, r2, r1
 8003ece:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8003ed2:	4567      	cmp	r7, ip
 8003ed4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8003ed8:	d8e6      	bhi.n	8003ea8 <__multiply+0x10c>
 8003eda:	9a01      	ldr	r2, [sp, #4]
 8003edc:	50a9      	str	r1, [r5, r2]
 8003ede:	3504      	adds	r5, #4
 8003ee0:	e79a      	b.n	8003e18 <__multiply+0x7c>
 8003ee2:	3e01      	subs	r6, #1
 8003ee4:	e79c      	b.n	8003e20 <__multiply+0x84>
 8003ee6:	bf00      	nop
 8003ee8:	0800509f 	.word	0x0800509f
 8003eec:	080050b0 	.word	0x080050b0

08003ef0 <__pow5mult>:
 8003ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ef4:	4615      	mov	r5, r2
 8003ef6:	f012 0203 	ands.w	r2, r2, #3
 8003efa:	4606      	mov	r6, r0
 8003efc:	460f      	mov	r7, r1
 8003efe:	d007      	beq.n	8003f10 <__pow5mult+0x20>
 8003f00:	4c25      	ldr	r4, [pc, #148]	; (8003f98 <__pow5mult+0xa8>)
 8003f02:	3a01      	subs	r2, #1
 8003f04:	2300      	movs	r3, #0
 8003f06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003f0a:	f7ff fe9b 	bl	8003c44 <__multadd>
 8003f0e:	4607      	mov	r7, r0
 8003f10:	10ad      	asrs	r5, r5, #2
 8003f12:	d03d      	beq.n	8003f90 <__pow5mult+0xa0>
 8003f14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003f16:	b97c      	cbnz	r4, 8003f38 <__pow5mult+0x48>
 8003f18:	2010      	movs	r0, #16
 8003f1a:	f7ff fe1b 	bl	8003b54 <malloc>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	6270      	str	r0, [r6, #36]	; 0x24
 8003f22:	b928      	cbnz	r0, 8003f30 <__pow5mult+0x40>
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <__pow5mult+0xac>)
 8003f26:	481e      	ldr	r0, [pc, #120]	; (8003fa0 <__pow5mult+0xb0>)
 8003f28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003f2c:	f000 fab2 	bl	8004494 <__assert_func>
 8003f30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003f34:	6004      	str	r4, [r0, #0]
 8003f36:	60c4      	str	r4, [r0, #12]
 8003f38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003f3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003f40:	b94c      	cbnz	r4, 8003f56 <__pow5mult+0x66>
 8003f42:	f240 2171 	movw	r1, #625	; 0x271
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff ff12 	bl	8003d70 <__i2b>
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003f52:	4604      	mov	r4, r0
 8003f54:	6003      	str	r3, [r0, #0]
 8003f56:	f04f 0900 	mov.w	r9, #0
 8003f5a:	07eb      	lsls	r3, r5, #31
 8003f5c:	d50a      	bpl.n	8003f74 <__pow5mult+0x84>
 8003f5e:	4639      	mov	r1, r7
 8003f60:	4622      	mov	r2, r4
 8003f62:	4630      	mov	r0, r6
 8003f64:	f7ff ff1a 	bl	8003d9c <__multiply>
 8003f68:	4639      	mov	r1, r7
 8003f6a:	4680      	mov	r8, r0
 8003f6c:	4630      	mov	r0, r6
 8003f6e:	f7ff fe47 	bl	8003c00 <_Bfree>
 8003f72:	4647      	mov	r7, r8
 8003f74:	106d      	asrs	r5, r5, #1
 8003f76:	d00b      	beq.n	8003f90 <__pow5mult+0xa0>
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	b938      	cbnz	r0, 8003f8c <__pow5mult+0x9c>
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	4621      	mov	r1, r4
 8003f80:	4630      	mov	r0, r6
 8003f82:	f7ff ff0b 	bl	8003d9c <__multiply>
 8003f86:	6020      	str	r0, [r4, #0]
 8003f88:	f8c0 9000 	str.w	r9, [r0]
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	e7e4      	b.n	8003f5a <__pow5mult+0x6a>
 8003f90:	4638      	mov	r0, r7
 8003f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f96:	bf00      	nop
 8003f98:	08005200 	.word	0x08005200
 8003f9c:	0800502d 	.word	0x0800502d
 8003fa0:	080050b0 	.word	0x080050b0

08003fa4 <__lshift>:
 8003fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	460c      	mov	r4, r1
 8003faa:	6849      	ldr	r1, [r1, #4]
 8003fac:	6923      	ldr	r3, [r4, #16]
 8003fae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003fb2:	68a3      	ldr	r3, [r4, #8]
 8003fb4:	4607      	mov	r7, r0
 8003fb6:	4691      	mov	r9, r2
 8003fb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003fbc:	f108 0601 	add.w	r6, r8, #1
 8003fc0:	42b3      	cmp	r3, r6
 8003fc2:	db0b      	blt.n	8003fdc <__lshift+0x38>
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	f7ff fddb 	bl	8003b80 <_Balloc>
 8003fca:	4605      	mov	r5, r0
 8003fcc:	b948      	cbnz	r0, 8003fe2 <__lshift+0x3e>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <__lshift+0xd8>)
 8003fd2:	482b      	ldr	r0, [pc, #172]	; (8004080 <__lshift+0xdc>)
 8003fd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003fd8:	f000 fa5c 	bl	8004494 <__assert_func>
 8003fdc:	3101      	adds	r1, #1
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	e7ee      	b.n	8003fc0 <__lshift+0x1c>
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f100 0114 	add.w	r1, r0, #20
 8003fe8:	f100 0210 	add.w	r2, r0, #16
 8003fec:	4618      	mov	r0, r3
 8003fee:	4553      	cmp	r3, sl
 8003ff0:	db37      	blt.n	8004062 <__lshift+0xbe>
 8003ff2:	6920      	ldr	r0, [r4, #16]
 8003ff4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ff8:	f104 0314 	add.w	r3, r4, #20
 8003ffc:	f019 091f 	ands.w	r9, r9, #31
 8004000:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004004:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004008:	d02f      	beq.n	800406a <__lshift+0xc6>
 800400a:	f1c9 0e20 	rsb	lr, r9, #32
 800400e:	468a      	mov	sl, r1
 8004010:	f04f 0c00 	mov.w	ip, #0
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	fa02 f209 	lsl.w	r2, r2, r9
 800401a:	ea42 020c 	orr.w	r2, r2, ip
 800401e:	f84a 2b04 	str.w	r2, [sl], #4
 8004022:	f853 2b04 	ldr.w	r2, [r3], #4
 8004026:	4298      	cmp	r0, r3
 8004028:	fa22 fc0e 	lsr.w	ip, r2, lr
 800402c:	d8f2      	bhi.n	8004014 <__lshift+0x70>
 800402e:	1b03      	subs	r3, r0, r4
 8004030:	3b15      	subs	r3, #21
 8004032:	f023 0303 	bic.w	r3, r3, #3
 8004036:	3304      	adds	r3, #4
 8004038:	f104 0215 	add.w	r2, r4, #21
 800403c:	4290      	cmp	r0, r2
 800403e:	bf38      	it	cc
 8004040:	2304      	movcc	r3, #4
 8004042:	f841 c003 	str.w	ip, [r1, r3]
 8004046:	f1bc 0f00 	cmp.w	ip, #0
 800404a:	d001      	beq.n	8004050 <__lshift+0xac>
 800404c:	f108 0602 	add.w	r6, r8, #2
 8004050:	3e01      	subs	r6, #1
 8004052:	4638      	mov	r0, r7
 8004054:	612e      	str	r6, [r5, #16]
 8004056:	4621      	mov	r1, r4
 8004058:	f7ff fdd2 	bl	8003c00 <_Bfree>
 800405c:	4628      	mov	r0, r5
 800405e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004062:	f842 0f04 	str.w	r0, [r2, #4]!
 8004066:	3301      	adds	r3, #1
 8004068:	e7c1      	b.n	8003fee <__lshift+0x4a>
 800406a:	3904      	subs	r1, #4
 800406c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004070:	f841 2f04 	str.w	r2, [r1, #4]!
 8004074:	4298      	cmp	r0, r3
 8004076:	d8f9      	bhi.n	800406c <__lshift+0xc8>
 8004078:	e7ea      	b.n	8004050 <__lshift+0xac>
 800407a:	bf00      	nop
 800407c:	0800509f 	.word	0x0800509f
 8004080:	080050b0 	.word	0x080050b0

08004084 <__mcmp>:
 8004084:	b530      	push	{r4, r5, lr}
 8004086:	6902      	ldr	r2, [r0, #16]
 8004088:	690c      	ldr	r4, [r1, #16]
 800408a:	1b12      	subs	r2, r2, r4
 800408c:	d10e      	bne.n	80040ac <__mcmp+0x28>
 800408e:	f100 0314 	add.w	r3, r0, #20
 8004092:	3114      	adds	r1, #20
 8004094:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004098:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800409c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80040a0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80040a4:	42a5      	cmp	r5, r4
 80040a6:	d003      	beq.n	80040b0 <__mcmp+0x2c>
 80040a8:	d305      	bcc.n	80040b6 <__mcmp+0x32>
 80040aa:	2201      	movs	r2, #1
 80040ac:	4610      	mov	r0, r2
 80040ae:	bd30      	pop	{r4, r5, pc}
 80040b0:	4283      	cmp	r3, r0
 80040b2:	d3f3      	bcc.n	800409c <__mcmp+0x18>
 80040b4:	e7fa      	b.n	80040ac <__mcmp+0x28>
 80040b6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ba:	e7f7      	b.n	80040ac <__mcmp+0x28>

080040bc <__mdiff>:
 80040bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c0:	460c      	mov	r4, r1
 80040c2:	4606      	mov	r6, r0
 80040c4:	4611      	mov	r1, r2
 80040c6:	4620      	mov	r0, r4
 80040c8:	4690      	mov	r8, r2
 80040ca:	f7ff ffdb 	bl	8004084 <__mcmp>
 80040ce:	1e05      	subs	r5, r0, #0
 80040d0:	d110      	bne.n	80040f4 <__mdiff+0x38>
 80040d2:	4629      	mov	r1, r5
 80040d4:	4630      	mov	r0, r6
 80040d6:	f7ff fd53 	bl	8003b80 <_Balloc>
 80040da:	b930      	cbnz	r0, 80040ea <__mdiff+0x2e>
 80040dc:	4b3a      	ldr	r3, [pc, #232]	; (80041c8 <__mdiff+0x10c>)
 80040de:	4602      	mov	r2, r0
 80040e0:	f240 2132 	movw	r1, #562	; 0x232
 80040e4:	4839      	ldr	r0, [pc, #228]	; (80041cc <__mdiff+0x110>)
 80040e6:	f000 f9d5 	bl	8004494 <__assert_func>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80040f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040f4:	bfa4      	itt	ge
 80040f6:	4643      	movge	r3, r8
 80040f8:	46a0      	movge	r8, r4
 80040fa:	4630      	mov	r0, r6
 80040fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004100:	bfa6      	itte	ge
 8004102:	461c      	movge	r4, r3
 8004104:	2500      	movge	r5, #0
 8004106:	2501      	movlt	r5, #1
 8004108:	f7ff fd3a 	bl	8003b80 <_Balloc>
 800410c:	b920      	cbnz	r0, 8004118 <__mdiff+0x5c>
 800410e:	4b2e      	ldr	r3, [pc, #184]	; (80041c8 <__mdiff+0x10c>)
 8004110:	4602      	mov	r2, r0
 8004112:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004116:	e7e5      	b.n	80040e4 <__mdiff+0x28>
 8004118:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800411c:	6926      	ldr	r6, [r4, #16]
 800411e:	60c5      	str	r5, [r0, #12]
 8004120:	f104 0914 	add.w	r9, r4, #20
 8004124:	f108 0514 	add.w	r5, r8, #20
 8004128:	f100 0e14 	add.w	lr, r0, #20
 800412c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8004130:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8004134:	f108 0210 	add.w	r2, r8, #16
 8004138:	46f2      	mov	sl, lr
 800413a:	2100      	movs	r1, #0
 800413c:	f859 3b04 	ldr.w	r3, [r9], #4
 8004140:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8004144:	fa1f f883 	uxth.w	r8, r3
 8004148:	fa11 f18b 	uxtah	r1, r1, fp
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	eba1 0808 	sub.w	r8, r1, r8
 8004152:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8004156:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800415a:	fa1f f888 	uxth.w	r8, r8
 800415e:	1419      	asrs	r1, r3, #16
 8004160:	454e      	cmp	r6, r9
 8004162:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8004166:	f84a 3b04 	str.w	r3, [sl], #4
 800416a:	d8e7      	bhi.n	800413c <__mdiff+0x80>
 800416c:	1b33      	subs	r3, r6, r4
 800416e:	3b15      	subs	r3, #21
 8004170:	f023 0303 	bic.w	r3, r3, #3
 8004174:	3304      	adds	r3, #4
 8004176:	3415      	adds	r4, #21
 8004178:	42a6      	cmp	r6, r4
 800417a:	bf38      	it	cc
 800417c:	2304      	movcc	r3, #4
 800417e:	441d      	add	r5, r3
 8004180:	4473      	add	r3, lr
 8004182:	469e      	mov	lr, r3
 8004184:	462e      	mov	r6, r5
 8004186:	4566      	cmp	r6, ip
 8004188:	d30e      	bcc.n	80041a8 <__mdiff+0xec>
 800418a:	f10c 0203 	add.w	r2, ip, #3
 800418e:	1b52      	subs	r2, r2, r5
 8004190:	f022 0203 	bic.w	r2, r2, #3
 8004194:	3d03      	subs	r5, #3
 8004196:	45ac      	cmp	ip, r5
 8004198:	bf38      	it	cc
 800419a:	2200      	movcc	r2, #0
 800419c:	441a      	add	r2, r3
 800419e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80041a2:	b17b      	cbz	r3, 80041c4 <__mdiff+0x108>
 80041a4:	6107      	str	r7, [r0, #16]
 80041a6:	e7a3      	b.n	80040f0 <__mdiff+0x34>
 80041a8:	f856 8b04 	ldr.w	r8, [r6], #4
 80041ac:	fa11 f288 	uxtah	r2, r1, r8
 80041b0:	1414      	asrs	r4, r2, #16
 80041b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80041b6:	b292      	uxth	r2, r2
 80041b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80041bc:	f84e 2b04 	str.w	r2, [lr], #4
 80041c0:	1421      	asrs	r1, r4, #16
 80041c2:	e7e0      	b.n	8004186 <__mdiff+0xca>
 80041c4:	3f01      	subs	r7, #1
 80041c6:	e7ea      	b.n	800419e <__mdiff+0xe2>
 80041c8:	0800509f 	.word	0x0800509f
 80041cc:	080050b0 	.word	0x080050b0

080041d0 <__d2b>:
 80041d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80041d4:	4689      	mov	r9, r1
 80041d6:	2101      	movs	r1, #1
 80041d8:	ec57 6b10 	vmov	r6, r7, d0
 80041dc:	4690      	mov	r8, r2
 80041de:	f7ff fccf 	bl	8003b80 <_Balloc>
 80041e2:	4604      	mov	r4, r0
 80041e4:	b930      	cbnz	r0, 80041f4 <__d2b+0x24>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <__d2b+0xb0>)
 80041ea:	4826      	ldr	r0, [pc, #152]	; (8004284 <__d2b+0xb4>)
 80041ec:	f240 310a 	movw	r1, #778	; 0x30a
 80041f0:	f000 f950 	bl	8004494 <__assert_func>
 80041f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80041f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80041fc:	bb35      	cbnz	r5, 800424c <__d2b+0x7c>
 80041fe:	2e00      	cmp	r6, #0
 8004200:	9301      	str	r3, [sp, #4]
 8004202:	d028      	beq.n	8004256 <__d2b+0x86>
 8004204:	4668      	mov	r0, sp
 8004206:	9600      	str	r6, [sp, #0]
 8004208:	f7ff fd82 	bl	8003d10 <__lo0bits>
 800420c:	9900      	ldr	r1, [sp, #0]
 800420e:	b300      	cbz	r0, 8004252 <__d2b+0x82>
 8004210:	9a01      	ldr	r2, [sp, #4]
 8004212:	f1c0 0320 	rsb	r3, r0, #32
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	430b      	orrs	r3, r1
 800421c:	40c2      	lsrs	r2, r0
 800421e:	6163      	str	r3, [r4, #20]
 8004220:	9201      	str	r2, [sp, #4]
 8004222:	9b01      	ldr	r3, [sp, #4]
 8004224:	61a3      	str	r3, [r4, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf14      	ite	ne
 800422a:	2202      	movne	r2, #2
 800422c:	2201      	moveq	r2, #1
 800422e:	6122      	str	r2, [r4, #16]
 8004230:	b1d5      	cbz	r5, 8004268 <__d2b+0x98>
 8004232:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8004236:	4405      	add	r5, r0
 8004238:	f8c9 5000 	str.w	r5, [r9]
 800423c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004240:	f8c8 0000 	str.w	r0, [r8]
 8004244:	4620      	mov	r0, r4
 8004246:	b003      	add	sp, #12
 8004248:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800424c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004250:	e7d5      	b.n	80041fe <__d2b+0x2e>
 8004252:	6161      	str	r1, [r4, #20]
 8004254:	e7e5      	b.n	8004222 <__d2b+0x52>
 8004256:	a801      	add	r0, sp, #4
 8004258:	f7ff fd5a 	bl	8003d10 <__lo0bits>
 800425c:	9b01      	ldr	r3, [sp, #4]
 800425e:	6163      	str	r3, [r4, #20]
 8004260:	2201      	movs	r2, #1
 8004262:	6122      	str	r2, [r4, #16]
 8004264:	3020      	adds	r0, #32
 8004266:	e7e3      	b.n	8004230 <__d2b+0x60>
 8004268:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800426c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004270:	f8c9 0000 	str.w	r0, [r9]
 8004274:	6918      	ldr	r0, [r3, #16]
 8004276:	f7ff fd2b 	bl	8003cd0 <__hi0bits>
 800427a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800427e:	e7df      	b.n	8004240 <__d2b+0x70>
 8004280:	0800509f 	.word	0x0800509f
 8004284:	080050b0 	.word	0x080050b0

08004288 <_calloc_r>:
 8004288:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800428a:	fba1 2402 	umull	r2, r4, r1, r2
 800428e:	b94c      	cbnz	r4, 80042a4 <_calloc_r+0x1c>
 8004290:	4611      	mov	r1, r2
 8004292:	9201      	str	r2, [sp, #4]
 8004294:	f000 f87a 	bl	800438c <_malloc_r>
 8004298:	9a01      	ldr	r2, [sp, #4]
 800429a:	4605      	mov	r5, r0
 800429c:	b930      	cbnz	r0, 80042ac <_calloc_r+0x24>
 800429e:	4628      	mov	r0, r5
 80042a0:	b003      	add	sp, #12
 80042a2:	bd30      	pop	{r4, r5, pc}
 80042a4:	220c      	movs	r2, #12
 80042a6:	6002      	str	r2, [r0, #0]
 80042a8:	2500      	movs	r5, #0
 80042aa:	e7f8      	b.n	800429e <_calloc_r+0x16>
 80042ac:	4621      	mov	r1, r4
 80042ae:	f7fe f95f 	bl	8002570 <memset>
 80042b2:	e7f4      	b.n	800429e <_calloc_r+0x16>

080042b4 <_free_r>:
 80042b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80042b6:	2900      	cmp	r1, #0
 80042b8:	d044      	beq.n	8004344 <_free_r+0x90>
 80042ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042be:	9001      	str	r0, [sp, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f1a1 0404 	sub.w	r4, r1, #4
 80042c6:	bfb8      	it	lt
 80042c8:	18e4      	addlt	r4, r4, r3
 80042ca:	f000 f925 	bl	8004518 <__malloc_lock>
 80042ce:	4a1e      	ldr	r2, [pc, #120]	; (8004348 <_free_r+0x94>)
 80042d0:	9801      	ldr	r0, [sp, #4]
 80042d2:	6813      	ldr	r3, [r2, #0]
 80042d4:	b933      	cbnz	r3, 80042e4 <_free_r+0x30>
 80042d6:	6063      	str	r3, [r4, #4]
 80042d8:	6014      	str	r4, [r2, #0]
 80042da:	b003      	add	sp, #12
 80042dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80042e0:	f000 b920 	b.w	8004524 <__malloc_unlock>
 80042e4:	42a3      	cmp	r3, r4
 80042e6:	d908      	bls.n	80042fa <_free_r+0x46>
 80042e8:	6825      	ldr	r5, [r4, #0]
 80042ea:	1961      	adds	r1, r4, r5
 80042ec:	428b      	cmp	r3, r1
 80042ee:	bf01      	itttt	eq
 80042f0:	6819      	ldreq	r1, [r3, #0]
 80042f2:	685b      	ldreq	r3, [r3, #4]
 80042f4:	1949      	addeq	r1, r1, r5
 80042f6:	6021      	streq	r1, [r4, #0]
 80042f8:	e7ed      	b.n	80042d6 <_free_r+0x22>
 80042fa:	461a      	mov	r2, r3
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	b10b      	cbz	r3, 8004304 <_free_r+0x50>
 8004300:	42a3      	cmp	r3, r4
 8004302:	d9fa      	bls.n	80042fa <_free_r+0x46>
 8004304:	6811      	ldr	r1, [r2, #0]
 8004306:	1855      	adds	r5, r2, r1
 8004308:	42a5      	cmp	r5, r4
 800430a:	d10b      	bne.n	8004324 <_free_r+0x70>
 800430c:	6824      	ldr	r4, [r4, #0]
 800430e:	4421      	add	r1, r4
 8004310:	1854      	adds	r4, r2, r1
 8004312:	42a3      	cmp	r3, r4
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	d1e0      	bne.n	80042da <_free_r+0x26>
 8004318:	681c      	ldr	r4, [r3, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	6053      	str	r3, [r2, #4]
 800431e:	4421      	add	r1, r4
 8004320:	6011      	str	r1, [r2, #0]
 8004322:	e7da      	b.n	80042da <_free_r+0x26>
 8004324:	d902      	bls.n	800432c <_free_r+0x78>
 8004326:	230c      	movs	r3, #12
 8004328:	6003      	str	r3, [r0, #0]
 800432a:	e7d6      	b.n	80042da <_free_r+0x26>
 800432c:	6825      	ldr	r5, [r4, #0]
 800432e:	1961      	adds	r1, r4, r5
 8004330:	428b      	cmp	r3, r1
 8004332:	bf04      	itt	eq
 8004334:	6819      	ldreq	r1, [r3, #0]
 8004336:	685b      	ldreq	r3, [r3, #4]
 8004338:	6063      	str	r3, [r4, #4]
 800433a:	bf04      	itt	eq
 800433c:	1949      	addeq	r1, r1, r5
 800433e:	6021      	streq	r1, [r4, #0]
 8004340:	6054      	str	r4, [r2, #4]
 8004342:	e7ca      	b.n	80042da <_free_r+0x26>
 8004344:	b003      	add	sp, #12
 8004346:	bd30      	pop	{r4, r5, pc}
 8004348:	200012f0 	.word	0x200012f0

0800434c <sbrk_aligned>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	4e0e      	ldr	r6, [pc, #56]	; (8004388 <sbrk_aligned+0x3c>)
 8004350:	460c      	mov	r4, r1
 8004352:	6831      	ldr	r1, [r6, #0]
 8004354:	4605      	mov	r5, r0
 8004356:	b911      	cbnz	r1, 800435e <sbrk_aligned+0x12>
 8004358:	f000 f88c 	bl	8004474 <_sbrk_r>
 800435c:	6030      	str	r0, [r6, #0]
 800435e:	4621      	mov	r1, r4
 8004360:	4628      	mov	r0, r5
 8004362:	f000 f887 	bl	8004474 <_sbrk_r>
 8004366:	1c43      	adds	r3, r0, #1
 8004368:	d00a      	beq.n	8004380 <sbrk_aligned+0x34>
 800436a:	1cc4      	adds	r4, r0, #3
 800436c:	f024 0403 	bic.w	r4, r4, #3
 8004370:	42a0      	cmp	r0, r4
 8004372:	d007      	beq.n	8004384 <sbrk_aligned+0x38>
 8004374:	1a21      	subs	r1, r4, r0
 8004376:	4628      	mov	r0, r5
 8004378:	f000 f87c 	bl	8004474 <_sbrk_r>
 800437c:	3001      	adds	r0, #1
 800437e:	d101      	bne.n	8004384 <sbrk_aligned+0x38>
 8004380:	f04f 34ff 	mov.w	r4, #4294967295
 8004384:	4620      	mov	r0, r4
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	200012f4 	.word	0x200012f4

0800438c <_malloc_r>:
 800438c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004390:	1ccd      	adds	r5, r1, #3
 8004392:	f025 0503 	bic.w	r5, r5, #3
 8004396:	3508      	adds	r5, #8
 8004398:	2d0c      	cmp	r5, #12
 800439a:	bf38      	it	cc
 800439c:	250c      	movcc	r5, #12
 800439e:	2d00      	cmp	r5, #0
 80043a0:	4607      	mov	r7, r0
 80043a2:	db01      	blt.n	80043a8 <_malloc_r+0x1c>
 80043a4:	42a9      	cmp	r1, r5
 80043a6:	d905      	bls.n	80043b4 <_malloc_r+0x28>
 80043a8:	230c      	movs	r3, #12
 80043aa:	603b      	str	r3, [r7, #0]
 80043ac:	2600      	movs	r6, #0
 80043ae:	4630      	mov	r0, r6
 80043b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043b4:	4e2e      	ldr	r6, [pc, #184]	; (8004470 <_malloc_r+0xe4>)
 80043b6:	f000 f8af 	bl	8004518 <__malloc_lock>
 80043ba:	6833      	ldr	r3, [r6, #0]
 80043bc:	461c      	mov	r4, r3
 80043be:	bb34      	cbnz	r4, 800440e <_malloc_r+0x82>
 80043c0:	4629      	mov	r1, r5
 80043c2:	4638      	mov	r0, r7
 80043c4:	f7ff ffc2 	bl	800434c <sbrk_aligned>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	4604      	mov	r4, r0
 80043cc:	d14d      	bne.n	800446a <_malloc_r+0xde>
 80043ce:	6834      	ldr	r4, [r6, #0]
 80043d0:	4626      	mov	r6, r4
 80043d2:	2e00      	cmp	r6, #0
 80043d4:	d140      	bne.n	8004458 <_malloc_r+0xcc>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	4631      	mov	r1, r6
 80043da:	4638      	mov	r0, r7
 80043dc:	eb04 0803 	add.w	r8, r4, r3
 80043e0:	f000 f848 	bl	8004474 <_sbrk_r>
 80043e4:	4580      	cmp	r8, r0
 80043e6:	d13a      	bne.n	800445e <_malloc_r+0xd2>
 80043e8:	6821      	ldr	r1, [r4, #0]
 80043ea:	3503      	adds	r5, #3
 80043ec:	1a6d      	subs	r5, r5, r1
 80043ee:	f025 0503 	bic.w	r5, r5, #3
 80043f2:	3508      	adds	r5, #8
 80043f4:	2d0c      	cmp	r5, #12
 80043f6:	bf38      	it	cc
 80043f8:	250c      	movcc	r5, #12
 80043fa:	4629      	mov	r1, r5
 80043fc:	4638      	mov	r0, r7
 80043fe:	f7ff ffa5 	bl	800434c <sbrk_aligned>
 8004402:	3001      	adds	r0, #1
 8004404:	d02b      	beq.n	800445e <_malloc_r+0xd2>
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	442b      	add	r3, r5
 800440a:	6023      	str	r3, [r4, #0]
 800440c:	e00e      	b.n	800442c <_malloc_r+0xa0>
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	1b52      	subs	r2, r2, r5
 8004412:	d41e      	bmi.n	8004452 <_malloc_r+0xc6>
 8004414:	2a0b      	cmp	r2, #11
 8004416:	d916      	bls.n	8004446 <_malloc_r+0xba>
 8004418:	1961      	adds	r1, r4, r5
 800441a:	42a3      	cmp	r3, r4
 800441c:	6025      	str	r5, [r4, #0]
 800441e:	bf18      	it	ne
 8004420:	6059      	strne	r1, [r3, #4]
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	bf08      	it	eq
 8004426:	6031      	streq	r1, [r6, #0]
 8004428:	5162      	str	r2, [r4, r5]
 800442a:	604b      	str	r3, [r1, #4]
 800442c:	4638      	mov	r0, r7
 800442e:	f104 060b 	add.w	r6, r4, #11
 8004432:	f000 f877 	bl	8004524 <__malloc_unlock>
 8004436:	f026 0607 	bic.w	r6, r6, #7
 800443a:	1d23      	adds	r3, r4, #4
 800443c:	1af2      	subs	r2, r6, r3
 800443e:	d0b6      	beq.n	80043ae <_malloc_r+0x22>
 8004440:	1b9b      	subs	r3, r3, r6
 8004442:	50a3      	str	r3, [r4, r2]
 8004444:	e7b3      	b.n	80043ae <_malloc_r+0x22>
 8004446:	6862      	ldr	r2, [r4, #4]
 8004448:	42a3      	cmp	r3, r4
 800444a:	bf0c      	ite	eq
 800444c:	6032      	streq	r2, [r6, #0]
 800444e:	605a      	strne	r2, [r3, #4]
 8004450:	e7ec      	b.n	800442c <_malloc_r+0xa0>
 8004452:	4623      	mov	r3, r4
 8004454:	6864      	ldr	r4, [r4, #4]
 8004456:	e7b2      	b.n	80043be <_malloc_r+0x32>
 8004458:	4634      	mov	r4, r6
 800445a:	6876      	ldr	r6, [r6, #4]
 800445c:	e7b9      	b.n	80043d2 <_malloc_r+0x46>
 800445e:	230c      	movs	r3, #12
 8004460:	603b      	str	r3, [r7, #0]
 8004462:	4638      	mov	r0, r7
 8004464:	f000 f85e 	bl	8004524 <__malloc_unlock>
 8004468:	e7a1      	b.n	80043ae <_malloc_r+0x22>
 800446a:	6025      	str	r5, [r4, #0]
 800446c:	e7de      	b.n	800442c <_malloc_r+0xa0>
 800446e:	bf00      	nop
 8004470:	200012f0 	.word	0x200012f0

08004474 <_sbrk_r>:
 8004474:	b538      	push	{r3, r4, r5, lr}
 8004476:	4d06      	ldr	r5, [pc, #24]	; (8004490 <_sbrk_r+0x1c>)
 8004478:	2300      	movs	r3, #0
 800447a:	4604      	mov	r4, r0
 800447c:	4608      	mov	r0, r1
 800447e:	602b      	str	r3, [r5, #0]
 8004480:	f7fc fec8 	bl	8001214 <_sbrk>
 8004484:	1c43      	adds	r3, r0, #1
 8004486:	d102      	bne.n	800448e <_sbrk_r+0x1a>
 8004488:	682b      	ldr	r3, [r5, #0]
 800448a:	b103      	cbz	r3, 800448e <_sbrk_r+0x1a>
 800448c:	6023      	str	r3, [r4, #0]
 800448e:	bd38      	pop	{r3, r4, r5, pc}
 8004490:	200012f8 	.word	0x200012f8

08004494 <__assert_func>:
 8004494:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004496:	4614      	mov	r4, r2
 8004498:	461a      	mov	r2, r3
 800449a:	4b09      	ldr	r3, [pc, #36]	; (80044c0 <__assert_func+0x2c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4605      	mov	r5, r0
 80044a0:	68d8      	ldr	r0, [r3, #12]
 80044a2:	b14c      	cbz	r4, 80044b8 <__assert_func+0x24>
 80044a4:	4b07      	ldr	r3, [pc, #28]	; (80044c4 <__assert_func+0x30>)
 80044a6:	9100      	str	r1, [sp, #0]
 80044a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80044ac:	4906      	ldr	r1, [pc, #24]	; (80044c8 <__assert_func+0x34>)
 80044ae:	462b      	mov	r3, r5
 80044b0:	f000 f80e 	bl	80044d0 <fiprintf>
 80044b4:	f000 fa64 	bl	8004980 <abort>
 80044b8:	4b04      	ldr	r3, [pc, #16]	; (80044cc <__assert_func+0x38>)
 80044ba:	461c      	mov	r4, r3
 80044bc:	e7f3      	b.n	80044a6 <__assert_func+0x12>
 80044be:	bf00      	nop
 80044c0:	2000000c 	.word	0x2000000c
 80044c4:	0800520c 	.word	0x0800520c
 80044c8:	08005219 	.word	0x08005219
 80044cc:	08005247 	.word	0x08005247

080044d0 <fiprintf>:
 80044d0:	b40e      	push	{r1, r2, r3}
 80044d2:	b503      	push	{r0, r1, lr}
 80044d4:	4601      	mov	r1, r0
 80044d6:	ab03      	add	r3, sp, #12
 80044d8:	4805      	ldr	r0, [pc, #20]	; (80044f0 <fiprintf+0x20>)
 80044da:	f853 2b04 	ldr.w	r2, [r3], #4
 80044de:	6800      	ldr	r0, [r0, #0]
 80044e0:	9301      	str	r3, [sp, #4]
 80044e2:	f000 f84f 	bl	8004584 <_vfiprintf_r>
 80044e6:	b002      	add	sp, #8
 80044e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80044ec:	b003      	add	sp, #12
 80044ee:	4770      	bx	lr
 80044f0:	2000000c 	.word	0x2000000c

080044f4 <__ascii_mbtowc>:
 80044f4:	b082      	sub	sp, #8
 80044f6:	b901      	cbnz	r1, 80044fa <__ascii_mbtowc+0x6>
 80044f8:	a901      	add	r1, sp, #4
 80044fa:	b142      	cbz	r2, 800450e <__ascii_mbtowc+0x1a>
 80044fc:	b14b      	cbz	r3, 8004512 <__ascii_mbtowc+0x1e>
 80044fe:	7813      	ldrb	r3, [r2, #0]
 8004500:	600b      	str	r3, [r1, #0]
 8004502:	7812      	ldrb	r2, [r2, #0]
 8004504:	1e10      	subs	r0, r2, #0
 8004506:	bf18      	it	ne
 8004508:	2001      	movne	r0, #1
 800450a:	b002      	add	sp, #8
 800450c:	4770      	bx	lr
 800450e:	4610      	mov	r0, r2
 8004510:	e7fb      	b.n	800450a <__ascii_mbtowc+0x16>
 8004512:	f06f 0001 	mvn.w	r0, #1
 8004516:	e7f8      	b.n	800450a <__ascii_mbtowc+0x16>

08004518 <__malloc_lock>:
 8004518:	4801      	ldr	r0, [pc, #4]	; (8004520 <__malloc_lock+0x8>)
 800451a:	f000 bbf1 	b.w	8004d00 <__retarget_lock_acquire_recursive>
 800451e:	bf00      	nop
 8004520:	200012fc 	.word	0x200012fc

08004524 <__malloc_unlock>:
 8004524:	4801      	ldr	r0, [pc, #4]	; (800452c <__malloc_unlock+0x8>)
 8004526:	f000 bbec 	b.w	8004d02 <__retarget_lock_release_recursive>
 800452a:	bf00      	nop
 800452c:	200012fc 	.word	0x200012fc

08004530 <__sfputc_r>:
 8004530:	6893      	ldr	r3, [r2, #8]
 8004532:	3b01      	subs	r3, #1
 8004534:	2b00      	cmp	r3, #0
 8004536:	b410      	push	{r4}
 8004538:	6093      	str	r3, [r2, #8]
 800453a:	da08      	bge.n	800454e <__sfputc_r+0x1e>
 800453c:	6994      	ldr	r4, [r2, #24]
 800453e:	42a3      	cmp	r3, r4
 8004540:	db01      	blt.n	8004546 <__sfputc_r+0x16>
 8004542:	290a      	cmp	r1, #10
 8004544:	d103      	bne.n	800454e <__sfputc_r+0x1e>
 8004546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800454a:	f000 b94b 	b.w	80047e4 <__swbuf_r>
 800454e:	6813      	ldr	r3, [r2, #0]
 8004550:	1c58      	adds	r0, r3, #1
 8004552:	6010      	str	r0, [r2, #0]
 8004554:	7019      	strb	r1, [r3, #0]
 8004556:	4608      	mov	r0, r1
 8004558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800455c:	4770      	bx	lr

0800455e <__sfputs_r>:
 800455e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004560:	4606      	mov	r6, r0
 8004562:	460f      	mov	r7, r1
 8004564:	4614      	mov	r4, r2
 8004566:	18d5      	adds	r5, r2, r3
 8004568:	42ac      	cmp	r4, r5
 800456a:	d101      	bne.n	8004570 <__sfputs_r+0x12>
 800456c:	2000      	movs	r0, #0
 800456e:	e007      	b.n	8004580 <__sfputs_r+0x22>
 8004570:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004574:	463a      	mov	r2, r7
 8004576:	4630      	mov	r0, r6
 8004578:	f7ff ffda 	bl	8004530 <__sfputc_r>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d1f3      	bne.n	8004568 <__sfputs_r+0xa>
 8004580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004584 <_vfiprintf_r>:
 8004584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004588:	460d      	mov	r5, r1
 800458a:	b09d      	sub	sp, #116	; 0x74
 800458c:	4614      	mov	r4, r2
 800458e:	4698      	mov	r8, r3
 8004590:	4606      	mov	r6, r0
 8004592:	b118      	cbz	r0, 800459c <_vfiprintf_r+0x18>
 8004594:	6983      	ldr	r3, [r0, #24]
 8004596:	b90b      	cbnz	r3, 800459c <_vfiprintf_r+0x18>
 8004598:	f000 fb14 	bl	8004bc4 <__sinit>
 800459c:	4b89      	ldr	r3, [pc, #548]	; (80047c4 <_vfiprintf_r+0x240>)
 800459e:	429d      	cmp	r5, r3
 80045a0:	d11b      	bne.n	80045da <_vfiprintf_r+0x56>
 80045a2:	6875      	ldr	r5, [r6, #4]
 80045a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045a6:	07d9      	lsls	r1, r3, #31
 80045a8:	d405      	bmi.n	80045b6 <_vfiprintf_r+0x32>
 80045aa:	89ab      	ldrh	r3, [r5, #12]
 80045ac:	059a      	lsls	r2, r3, #22
 80045ae:	d402      	bmi.n	80045b6 <_vfiprintf_r+0x32>
 80045b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045b2:	f000 fba5 	bl	8004d00 <__retarget_lock_acquire_recursive>
 80045b6:	89ab      	ldrh	r3, [r5, #12]
 80045b8:	071b      	lsls	r3, r3, #28
 80045ba:	d501      	bpl.n	80045c0 <_vfiprintf_r+0x3c>
 80045bc:	692b      	ldr	r3, [r5, #16]
 80045be:	b9eb      	cbnz	r3, 80045fc <_vfiprintf_r+0x78>
 80045c0:	4629      	mov	r1, r5
 80045c2:	4630      	mov	r0, r6
 80045c4:	f000 f96e 	bl	80048a4 <__swsetup_r>
 80045c8:	b1c0      	cbz	r0, 80045fc <_vfiprintf_r+0x78>
 80045ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80045cc:	07dc      	lsls	r4, r3, #31
 80045ce:	d50e      	bpl.n	80045ee <_vfiprintf_r+0x6a>
 80045d0:	f04f 30ff 	mov.w	r0, #4294967295
 80045d4:	b01d      	add	sp, #116	; 0x74
 80045d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045da:	4b7b      	ldr	r3, [pc, #492]	; (80047c8 <_vfiprintf_r+0x244>)
 80045dc:	429d      	cmp	r5, r3
 80045de:	d101      	bne.n	80045e4 <_vfiprintf_r+0x60>
 80045e0:	68b5      	ldr	r5, [r6, #8]
 80045e2:	e7df      	b.n	80045a4 <_vfiprintf_r+0x20>
 80045e4:	4b79      	ldr	r3, [pc, #484]	; (80047cc <_vfiprintf_r+0x248>)
 80045e6:	429d      	cmp	r5, r3
 80045e8:	bf08      	it	eq
 80045ea:	68f5      	ldreq	r5, [r6, #12]
 80045ec:	e7da      	b.n	80045a4 <_vfiprintf_r+0x20>
 80045ee:	89ab      	ldrh	r3, [r5, #12]
 80045f0:	0598      	lsls	r0, r3, #22
 80045f2:	d4ed      	bmi.n	80045d0 <_vfiprintf_r+0x4c>
 80045f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80045f6:	f000 fb84 	bl	8004d02 <__retarget_lock_release_recursive>
 80045fa:	e7e9      	b.n	80045d0 <_vfiprintf_r+0x4c>
 80045fc:	2300      	movs	r3, #0
 80045fe:	9309      	str	r3, [sp, #36]	; 0x24
 8004600:	2320      	movs	r3, #32
 8004602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004606:	f8cd 800c 	str.w	r8, [sp, #12]
 800460a:	2330      	movs	r3, #48	; 0x30
 800460c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80047d0 <_vfiprintf_r+0x24c>
 8004610:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004614:	f04f 0901 	mov.w	r9, #1
 8004618:	4623      	mov	r3, r4
 800461a:	469a      	mov	sl, r3
 800461c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004620:	b10a      	cbz	r2, 8004626 <_vfiprintf_r+0xa2>
 8004622:	2a25      	cmp	r2, #37	; 0x25
 8004624:	d1f9      	bne.n	800461a <_vfiprintf_r+0x96>
 8004626:	ebba 0b04 	subs.w	fp, sl, r4
 800462a:	d00b      	beq.n	8004644 <_vfiprintf_r+0xc0>
 800462c:	465b      	mov	r3, fp
 800462e:	4622      	mov	r2, r4
 8004630:	4629      	mov	r1, r5
 8004632:	4630      	mov	r0, r6
 8004634:	f7ff ff93 	bl	800455e <__sfputs_r>
 8004638:	3001      	adds	r0, #1
 800463a:	f000 80aa 	beq.w	8004792 <_vfiprintf_r+0x20e>
 800463e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004640:	445a      	add	r2, fp
 8004642:	9209      	str	r2, [sp, #36]	; 0x24
 8004644:	f89a 3000 	ldrb.w	r3, [sl]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 80a2 	beq.w	8004792 <_vfiprintf_r+0x20e>
 800464e:	2300      	movs	r3, #0
 8004650:	f04f 32ff 	mov.w	r2, #4294967295
 8004654:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004658:	f10a 0a01 	add.w	sl, sl, #1
 800465c:	9304      	str	r3, [sp, #16]
 800465e:	9307      	str	r3, [sp, #28]
 8004660:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004664:	931a      	str	r3, [sp, #104]	; 0x68
 8004666:	4654      	mov	r4, sl
 8004668:	2205      	movs	r2, #5
 800466a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800466e:	4858      	ldr	r0, [pc, #352]	; (80047d0 <_vfiprintf_r+0x24c>)
 8004670:	f7fb fdd6 	bl	8000220 <memchr>
 8004674:	9a04      	ldr	r2, [sp, #16]
 8004676:	b9d8      	cbnz	r0, 80046b0 <_vfiprintf_r+0x12c>
 8004678:	06d1      	lsls	r1, r2, #27
 800467a:	bf44      	itt	mi
 800467c:	2320      	movmi	r3, #32
 800467e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004682:	0713      	lsls	r3, r2, #28
 8004684:	bf44      	itt	mi
 8004686:	232b      	movmi	r3, #43	; 0x2b
 8004688:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800468c:	f89a 3000 	ldrb.w	r3, [sl]
 8004690:	2b2a      	cmp	r3, #42	; 0x2a
 8004692:	d015      	beq.n	80046c0 <_vfiprintf_r+0x13c>
 8004694:	9a07      	ldr	r2, [sp, #28]
 8004696:	4654      	mov	r4, sl
 8004698:	2000      	movs	r0, #0
 800469a:	f04f 0c0a 	mov.w	ip, #10
 800469e:	4621      	mov	r1, r4
 80046a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046a4:	3b30      	subs	r3, #48	; 0x30
 80046a6:	2b09      	cmp	r3, #9
 80046a8:	d94e      	bls.n	8004748 <_vfiprintf_r+0x1c4>
 80046aa:	b1b0      	cbz	r0, 80046da <_vfiprintf_r+0x156>
 80046ac:	9207      	str	r2, [sp, #28]
 80046ae:	e014      	b.n	80046da <_vfiprintf_r+0x156>
 80046b0:	eba0 0308 	sub.w	r3, r0, r8
 80046b4:	fa09 f303 	lsl.w	r3, r9, r3
 80046b8:	4313      	orrs	r3, r2
 80046ba:	9304      	str	r3, [sp, #16]
 80046bc:	46a2      	mov	sl, r4
 80046be:	e7d2      	b.n	8004666 <_vfiprintf_r+0xe2>
 80046c0:	9b03      	ldr	r3, [sp, #12]
 80046c2:	1d19      	adds	r1, r3, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	9103      	str	r1, [sp, #12]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bfbb      	ittet	lt
 80046cc:	425b      	neglt	r3, r3
 80046ce:	f042 0202 	orrlt.w	r2, r2, #2
 80046d2:	9307      	strge	r3, [sp, #28]
 80046d4:	9307      	strlt	r3, [sp, #28]
 80046d6:	bfb8      	it	lt
 80046d8:	9204      	strlt	r2, [sp, #16]
 80046da:	7823      	ldrb	r3, [r4, #0]
 80046dc:	2b2e      	cmp	r3, #46	; 0x2e
 80046de:	d10c      	bne.n	80046fa <_vfiprintf_r+0x176>
 80046e0:	7863      	ldrb	r3, [r4, #1]
 80046e2:	2b2a      	cmp	r3, #42	; 0x2a
 80046e4:	d135      	bne.n	8004752 <_vfiprintf_r+0x1ce>
 80046e6:	9b03      	ldr	r3, [sp, #12]
 80046e8:	1d1a      	adds	r2, r3, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9203      	str	r2, [sp, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfb8      	it	lt
 80046f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80046f6:	3402      	adds	r4, #2
 80046f8:	9305      	str	r3, [sp, #20]
 80046fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80047e0 <_vfiprintf_r+0x25c>
 80046fe:	7821      	ldrb	r1, [r4, #0]
 8004700:	2203      	movs	r2, #3
 8004702:	4650      	mov	r0, sl
 8004704:	f7fb fd8c 	bl	8000220 <memchr>
 8004708:	b140      	cbz	r0, 800471c <_vfiprintf_r+0x198>
 800470a:	2340      	movs	r3, #64	; 0x40
 800470c:	eba0 000a 	sub.w	r0, r0, sl
 8004710:	fa03 f000 	lsl.w	r0, r3, r0
 8004714:	9b04      	ldr	r3, [sp, #16]
 8004716:	4303      	orrs	r3, r0
 8004718:	3401      	adds	r4, #1
 800471a:	9304      	str	r3, [sp, #16]
 800471c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004720:	482c      	ldr	r0, [pc, #176]	; (80047d4 <_vfiprintf_r+0x250>)
 8004722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004726:	2206      	movs	r2, #6
 8004728:	f7fb fd7a 	bl	8000220 <memchr>
 800472c:	2800      	cmp	r0, #0
 800472e:	d03f      	beq.n	80047b0 <_vfiprintf_r+0x22c>
 8004730:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <_vfiprintf_r+0x254>)
 8004732:	bb1b      	cbnz	r3, 800477c <_vfiprintf_r+0x1f8>
 8004734:	9b03      	ldr	r3, [sp, #12]
 8004736:	3307      	adds	r3, #7
 8004738:	f023 0307 	bic.w	r3, r3, #7
 800473c:	3308      	adds	r3, #8
 800473e:	9303      	str	r3, [sp, #12]
 8004740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004742:	443b      	add	r3, r7
 8004744:	9309      	str	r3, [sp, #36]	; 0x24
 8004746:	e767      	b.n	8004618 <_vfiprintf_r+0x94>
 8004748:	fb0c 3202 	mla	r2, ip, r2, r3
 800474c:	460c      	mov	r4, r1
 800474e:	2001      	movs	r0, #1
 8004750:	e7a5      	b.n	800469e <_vfiprintf_r+0x11a>
 8004752:	2300      	movs	r3, #0
 8004754:	3401      	adds	r4, #1
 8004756:	9305      	str	r3, [sp, #20]
 8004758:	4619      	mov	r1, r3
 800475a:	f04f 0c0a 	mov.w	ip, #10
 800475e:	4620      	mov	r0, r4
 8004760:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004764:	3a30      	subs	r2, #48	; 0x30
 8004766:	2a09      	cmp	r2, #9
 8004768:	d903      	bls.n	8004772 <_vfiprintf_r+0x1ee>
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0c5      	beq.n	80046fa <_vfiprintf_r+0x176>
 800476e:	9105      	str	r1, [sp, #20]
 8004770:	e7c3      	b.n	80046fa <_vfiprintf_r+0x176>
 8004772:	fb0c 2101 	mla	r1, ip, r1, r2
 8004776:	4604      	mov	r4, r0
 8004778:	2301      	movs	r3, #1
 800477a:	e7f0      	b.n	800475e <_vfiprintf_r+0x1da>
 800477c:	ab03      	add	r3, sp, #12
 800477e:	9300      	str	r3, [sp, #0]
 8004780:	462a      	mov	r2, r5
 8004782:	4b16      	ldr	r3, [pc, #88]	; (80047dc <_vfiprintf_r+0x258>)
 8004784:	a904      	add	r1, sp, #16
 8004786:	4630      	mov	r0, r6
 8004788:	f7fd ff9a 	bl	80026c0 <_printf_float>
 800478c:	4607      	mov	r7, r0
 800478e:	1c78      	adds	r0, r7, #1
 8004790:	d1d6      	bne.n	8004740 <_vfiprintf_r+0x1bc>
 8004792:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004794:	07d9      	lsls	r1, r3, #31
 8004796:	d405      	bmi.n	80047a4 <_vfiprintf_r+0x220>
 8004798:	89ab      	ldrh	r3, [r5, #12]
 800479a:	059a      	lsls	r2, r3, #22
 800479c:	d402      	bmi.n	80047a4 <_vfiprintf_r+0x220>
 800479e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047a0:	f000 faaf 	bl	8004d02 <__retarget_lock_release_recursive>
 80047a4:	89ab      	ldrh	r3, [r5, #12]
 80047a6:	065b      	lsls	r3, r3, #25
 80047a8:	f53f af12 	bmi.w	80045d0 <_vfiprintf_r+0x4c>
 80047ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047ae:	e711      	b.n	80045d4 <_vfiprintf_r+0x50>
 80047b0:	ab03      	add	r3, sp, #12
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	462a      	mov	r2, r5
 80047b6:	4b09      	ldr	r3, [pc, #36]	; (80047dc <_vfiprintf_r+0x258>)
 80047b8:	a904      	add	r1, sp, #16
 80047ba:	4630      	mov	r0, r6
 80047bc:	f7fe fa24 	bl	8002c08 <_printf_i>
 80047c0:	e7e4      	b.n	800478c <_vfiprintf_r+0x208>
 80047c2:	bf00      	nop
 80047c4:	08005384 	.word	0x08005384
 80047c8:	080053a4 	.word	0x080053a4
 80047cc:	08005364 	.word	0x08005364
 80047d0:	08005252 	.word	0x08005252
 80047d4:	0800525c 	.word	0x0800525c
 80047d8:	080026c1 	.word	0x080026c1
 80047dc:	0800455f 	.word	0x0800455f
 80047e0:	08005258 	.word	0x08005258

080047e4 <__swbuf_r>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	460e      	mov	r6, r1
 80047e8:	4614      	mov	r4, r2
 80047ea:	4605      	mov	r5, r0
 80047ec:	b118      	cbz	r0, 80047f6 <__swbuf_r+0x12>
 80047ee:	6983      	ldr	r3, [r0, #24]
 80047f0:	b90b      	cbnz	r3, 80047f6 <__swbuf_r+0x12>
 80047f2:	f000 f9e7 	bl	8004bc4 <__sinit>
 80047f6:	4b21      	ldr	r3, [pc, #132]	; (800487c <__swbuf_r+0x98>)
 80047f8:	429c      	cmp	r4, r3
 80047fa:	d12b      	bne.n	8004854 <__swbuf_r+0x70>
 80047fc:	686c      	ldr	r4, [r5, #4]
 80047fe:	69a3      	ldr	r3, [r4, #24]
 8004800:	60a3      	str	r3, [r4, #8]
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	071a      	lsls	r2, r3, #28
 8004806:	d52f      	bpl.n	8004868 <__swbuf_r+0x84>
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	b36b      	cbz	r3, 8004868 <__swbuf_r+0x84>
 800480c:	6923      	ldr	r3, [r4, #16]
 800480e:	6820      	ldr	r0, [r4, #0]
 8004810:	1ac0      	subs	r0, r0, r3
 8004812:	6963      	ldr	r3, [r4, #20]
 8004814:	b2f6      	uxtb	r6, r6
 8004816:	4283      	cmp	r3, r0
 8004818:	4637      	mov	r7, r6
 800481a:	dc04      	bgt.n	8004826 <__swbuf_r+0x42>
 800481c:	4621      	mov	r1, r4
 800481e:	4628      	mov	r0, r5
 8004820:	f000 f93c 	bl	8004a9c <_fflush_r>
 8004824:	bb30      	cbnz	r0, 8004874 <__swbuf_r+0x90>
 8004826:	68a3      	ldr	r3, [r4, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	60a3      	str	r3, [r4, #8]
 800482c:	6823      	ldr	r3, [r4, #0]
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	6022      	str	r2, [r4, #0]
 8004832:	701e      	strb	r6, [r3, #0]
 8004834:	6963      	ldr	r3, [r4, #20]
 8004836:	3001      	adds	r0, #1
 8004838:	4283      	cmp	r3, r0
 800483a:	d004      	beq.n	8004846 <__swbuf_r+0x62>
 800483c:	89a3      	ldrh	r3, [r4, #12]
 800483e:	07db      	lsls	r3, r3, #31
 8004840:	d506      	bpl.n	8004850 <__swbuf_r+0x6c>
 8004842:	2e0a      	cmp	r6, #10
 8004844:	d104      	bne.n	8004850 <__swbuf_r+0x6c>
 8004846:	4621      	mov	r1, r4
 8004848:	4628      	mov	r0, r5
 800484a:	f000 f927 	bl	8004a9c <_fflush_r>
 800484e:	b988      	cbnz	r0, 8004874 <__swbuf_r+0x90>
 8004850:	4638      	mov	r0, r7
 8004852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004854:	4b0a      	ldr	r3, [pc, #40]	; (8004880 <__swbuf_r+0x9c>)
 8004856:	429c      	cmp	r4, r3
 8004858:	d101      	bne.n	800485e <__swbuf_r+0x7a>
 800485a:	68ac      	ldr	r4, [r5, #8]
 800485c:	e7cf      	b.n	80047fe <__swbuf_r+0x1a>
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <__swbuf_r+0xa0>)
 8004860:	429c      	cmp	r4, r3
 8004862:	bf08      	it	eq
 8004864:	68ec      	ldreq	r4, [r5, #12]
 8004866:	e7ca      	b.n	80047fe <__swbuf_r+0x1a>
 8004868:	4621      	mov	r1, r4
 800486a:	4628      	mov	r0, r5
 800486c:	f000 f81a 	bl	80048a4 <__swsetup_r>
 8004870:	2800      	cmp	r0, #0
 8004872:	d0cb      	beq.n	800480c <__swbuf_r+0x28>
 8004874:	f04f 37ff 	mov.w	r7, #4294967295
 8004878:	e7ea      	b.n	8004850 <__swbuf_r+0x6c>
 800487a:	bf00      	nop
 800487c:	08005384 	.word	0x08005384
 8004880:	080053a4 	.word	0x080053a4
 8004884:	08005364 	.word	0x08005364

08004888 <__ascii_wctomb>:
 8004888:	b149      	cbz	r1, 800489e <__ascii_wctomb+0x16>
 800488a:	2aff      	cmp	r2, #255	; 0xff
 800488c:	bf85      	ittet	hi
 800488e:	238a      	movhi	r3, #138	; 0x8a
 8004890:	6003      	strhi	r3, [r0, #0]
 8004892:	700a      	strbls	r2, [r1, #0]
 8004894:	f04f 30ff 	movhi.w	r0, #4294967295
 8004898:	bf98      	it	ls
 800489a:	2001      	movls	r0, #1
 800489c:	4770      	bx	lr
 800489e:	4608      	mov	r0, r1
 80048a0:	4770      	bx	lr
	...

080048a4 <__swsetup_r>:
 80048a4:	4b32      	ldr	r3, [pc, #200]	; (8004970 <__swsetup_r+0xcc>)
 80048a6:	b570      	push	{r4, r5, r6, lr}
 80048a8:	681d      	ldr	r5, [r3, #0]
 80048aa:	4606      	mov	r6, r0
 80048ac:	460c      	mov	r4, r1
 80048ae:	b125      	cbz	r5, 80048ba <__swsetup_r+0x16>
 80048b0:	69ab      	ldr	r3, [r5, #24]
 80048b2:	b913      	cbnz	r3, 80048ba <__swsetup_r+0x16>
 80048b4:	4628      	mov	r0, r5
 80048b6:	f000 f985 	bl	8004bc4 <__sinit>
 80048ba:	4b2e      	ldr	r3, [pc, #184]	; (8004974 <__swsetup_r+0xd0>)
 80048bc:	429c      	cmp	r4, r3
 80048be:	d10f      	bne.n	80048e0 <__swsetup_r+0x3c>
 80048c0:	686c      	ldr	r4, [r5, #4]
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048c8:	0719      	lsls	r1, r3, #28
 80048ca:	d42c      	bmi.n	8004926 <__swsetup_r+0x82>
 80048cc:	06dd      	lsls	r5, r3, #27
 80048ce:	d411      	bmi.n	80048f4 <__swsetup_r+0x50>
 80048d0:	2309      	movs	r3, #9
 80048d2:	6033      	str	r3, [r6, #0]
 80048d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048d8:	81a3      	strh	r3, [r4, #12]
 80048da:	f04f 30ff 	mov.w	r0, #4294967295
 80048de:	e03e      	b.n	800495e <__swsetup_r+0xba>
 80048e0:	4b25      	ldr	r3, [pc, #148]	; (8004978 <__swsetup_r+0xd4>)
 80048e2:	429c      	cmp	r4, r3
 80048e4:	d101      	bne.n	80048ea <__swsetup_r+0x46>
 80048e6:	68ac      	ldr	r4, [r5, #8]
 80048e8:	e7eb      	b.n	80048c2 <__swsetup_r+0x1e>
 80048ea:	4b24      	ldr	r3, [pc, #144]	; (800497c <__swsetup_r+0xd8>)
 80048ec:	429c      	cmp	r4, r3
 80048ee:	bf08      	it	eq
 80048f0:	68ec      	ldreq	r4, [r5, #12]
 80048f2:	e7e6      	b.n	80048c2 <__swsetup_r+0x1e>
 80048f4:	0758      	lsls	r0, r3, #29
 80048f6:	d512      	bpl.n	800491e <__swsetup_r+0x7a>
 80048f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048fa:	b141      	cbz	r1, 800490e <__swsetup_r+0x6a>
 80048fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004900:	4299      	cmp	r1, r3
 8004902:	d002      	beq.n	800490a <__swsetup_r+0x66>
 8004904:	4630      	mov	r0, r6
 8004906:	f7ff fcd5 	bl	80042b4 <_free_r>
 800490a:	2300      	movs	r3, #0
 800490c:	6363      	str	r3, [r4, #52]	; 0x34
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004914:	81a3      	strh	r3, [r4, #12]
 8004916:	2300      	movs	r3, #0
 8004918:	6063      	str	r3, [r4, #4]
 800491a:	6923      	ldr	r3, [r4, #16]
 800491c:	6023      	str	r3, [r4, #0]
 800491e:	89a3      	ldrh	r3, [r4, #12]
 8004920:	f043 0308 	orr.w	r3, r3, #8
 8004924:	81a3      	strh	r3, [r4, #12]
 8004926:	6923      	ldr	r3, [r4, #16]
 8004928:	b94b      	cbnz	r3, 800493e <__swsetup_r+0x9a>
 800492a:	89a3      	ldrh	r3, [r4, #12]
 800492c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004934:	d003      	beq.n	800493e <__swsetup_r+0x9a>
 8004936:	4621      	mov	r1, r4
 8004938:	4630      	mov	r0, r6
 800493a:	f000 fa09 	bl	8004d50 <__smakebuf_r>
 800493e:	89a0      	ldrh	r0, [r4, #12]
 8004940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004944:	f010 0301 	ands.w	r3, r0, #1
 8004948:	d00a      	beq.n	8004960 <__swsetup_r+0xbc>
 800494a:	2300      	movs	r3, #0
 800494c:	60a3      	str	r3, [r4, #8]
 800494e:	6963      	ldr	r3, [r4, #20]
 8004950:	425b      	negs	r3, r3
 8004952:	61a3      	str	r3, [r4, #24]
 8004954:	6923      	ldr	r3, [r4, #16]
 8004956:	b943      	cbnz	r3, 800496a <__swsetup_r+0xc6>
 8004958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800495c:	d1ba      	bne.n	80048d4 <__swsetup_r+0x30>
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	0781      	lsls	r1, r0, #30
 8004962:	bf58      	it	pl
 8004964:	6963      	ldrpl	r3, [r4, #20]
 8004966:	60a3      	str	r3, [r4, #8]
 8004968:	e7f4      	b.n	8004954 <__swsetup_r+0xb0>
 800496a:	2000      	movs	r0, #0
 800496c:	e7f7      	b.n	800495e <__swsetup_r+0xba>
 800496e:	bf00      	nop
 8004970:	2000000c 	.word	0x2000000c
 8004974:	08005384 	.word	0x08005384
 8004978:	080053a4 	.word	0x080053a4
 800497c:	08005364 	.word	0x08005364

08004980 <abort>:
 8004980:	b508      	push	{r3, lr}
 8004982:	2006      	movs	r0, #6
 8004984:	f000 fa4c 	bl	8004e20 <raise>
 8004988:	2001      	movs	r0, #1
 800498a:	f7fc fc15 	bl	80011b8 <_exit>
	...

08004990 <__sflush_r>:
 8004990:	898a      	ldrh	r2, [r1, #12]
 8004992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004996:	4605      	mov	r5, r0
 8004998:	0710      	lsls	r0, r2, #28
 800499a:	460c      	mov	r4, r1
 800499c:	d458      	bmi.n	8004a50 <__sflush_r+0xc0>
 800499e:	684b      	ldr	r3, [r1, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	dc05      	bgt.n	80049b0 <__sflush_r+0x20>
 80049a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	dc02      	bgt.n	80049b0 <__sflush_r+0x20>
 80049aa:	2000      	movs	r0, #0
 80049ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049b2:	2e00      	cmp	r6, #0
 80049b4:	d0f9      	beq.n	80049aa <__sflush_r+0x1a>
 80049b6:	2300      	movs	r3, #0
 80049b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80049bc:	682f      	ldr	r7, [r5, #0]
 80049be:	602b      	str	r3, [r5, #0]
 80049c0:	d032      	beq.n	8004a28 <__sflush_r+0x98>
 80049c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80049c4:	89a3      	ldrh	r3, [r4, #12]
 80049c6:	075a      	lsls	r2, r3, #29
 80049c8:	d505      	bpl.n	80049d6 <__sflush_r+0x46>
 80049ca:	6863      	ldr	r3, [r4, #4]
 80049cc:	1ac0      	subs	r0, r0, r3
 80049ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80049d0:	b10b      	cbz	r3, 80049d6 <__sflush_r+0x46>
 80049d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80049d4:	1ac0      	subs	r0, r0, r3
 80049d6:	2300      	movs	r3, #0
 80049d8:	4602      	mov	r2, r0
 80049da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80049dc:	6a21      	ldr	r1, [r4, #32]
 80049de:	4628      	mov	r0, r5
 80049e0:	47b0      	blx	r6
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	d106      	bne.n	80049f6 <__sflush_r+0x66>
 80049e8:	6829      	ldr	r1, [r5, #0]
 80049ea:	291d      	cmp	r1, #29
 80049ec:	d82c      	bhi.n	8004a48 <__sflush_r+0xb8>
 80049ee:	4a2a      	ldr	r2, [pc, #168]	; (8004a98 <__sflush_r+0x108>)
 80049f0:	40ca      	lsrs	r2, r1
 80049f2:	07d6      	lsls	r6, r2, #31
 80049f4:	d528      	bpl.n	8004a48 <__sflush_r+0xb8>
 80049f6:	2200      	movs	r2, #0
 80049f8:	6062      	str	r2, [r4, #4]
 80049fa:	04d9      	lsls	r1, r3, #19
 80049fc:	6922      	ldr	r2, [r4, #16]
 80049fe:	6022      	str	r2, [r4, #0]
 8004a00:	d504      	bpl.n	8004a0c <__sflush_r+0x7c>
 8004a02:	1c42      	adds	r2, r0, #1
 8004a04:	d101      	bne.n	8004a0a <__sflush_r+0x7a>
 8004a06:	682b      	ldr	r3, [r5, #0]
 8004a08:	b903      	cbnz	r3, 8004a0c <__sflush_r+0x7c>
 8004a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8004a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a0e:	602f      	str	r7, [r5, #0]
 8004a10:	2900      	cmp	r1, #0
 8004a12:	d0ca      	beq.n	80049aa <__sflush_r+0x1a>
 8004a14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a18:	4299      	cmp	r1, r3
 8004a1a:	d002      	beq.n	8004a22 <__sflush_r+0x92>
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	f7ff fc49 	bl	80042b4 <_free_r>
 8004a22:	2000      	movs	r0, #0
 8004a24:	6360      	str	r0, [r4, #52]	; 0x34
 8004a26:	e7c1      	b.n	80049ac <__sflush_r+0x1c>
 8004a28:	6a21      	ldr	r1, [r4, #32]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	47b0      	blx	r6
 8004a30:	1c41      	adds	r1, r0, #1
 8004a32:	d1c7      	bne.n	80049c4 <__sflush_r+0x34>
 8004a34:	682b      	ldr	r3, [r5, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d0c4      	beq.n	80049c4 <__sflush_r+0x34>
 8004a3a:	2b1d      	cmp	r3, #29
 8004a3c:	d001      	beq.n	8004a42 <__sflush_r+0xb2>
 8004a3e:	2b16      	cmp	r3, #22
 8004a40:	d101      	bne.n	8004a46 <__sflush_r+0xb6>
 8004a42:	602f      	str	r7, [r5, #0]
 8004a44:	e7b1      	b.n	80049aa <__sflush_r+0x1a>
 8004a46:	89a3      	ldrh	r3, [r4, #12]
 8004a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a4c:	81a3      	strh	r3, [r4, #12]
 8004a4e:	e7ad      	b.n	80049ac <__sflush_r+0x1c>
 8004a50:	690f      	ldr	r7, [r1, #16]
 8004a52:	2f00      	cmp	r7, #0
 8004a54:	d0a9      	beq.n	80049aa <__sflush_r+0x1a>
 8004a56:	0793      	lsls	r3, r2, #30
 8004a58:	680e      	ldr	r6, [r1, #0]
 8004a5a:	bf08      	it	eq
 8004a5c:	694b      	ldreq	r3, [r1, #20]
 8004a5e:	600f      	str	r7, [r1, #0]
 8004a60:	bf18      	it	ne
 8004a62:	2300      	movne	r3, #0
 8004a64:	eba6 0807 	sub.w	r8, r6, r7
 8004a68:	608b      	str	r3, [r1, #8]
 8004a6a:	f1b8 0f00 	cmp.w	r8, #0
 8004a6e:	dd9c      	ble.n	80049aa <__sflush_r+0x1a>
 8004a70:	6a21      	ldr	r1, [r4, #32]
 8004a72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004a74:	4643      	mov	r3, r8
 8004a76:	463a      	mov	r2, r7
 8004a78:	4628      	mov	r0, r5
 8004a7a:	47b0      	blx	r6
 8004a7c:	2800      	cmp	r0, #0
 8004a7e:	dc06      	bgt.n	8004a8e <__sflush_r+0xfe>
 8004a80:	89a3      	ldrh	r3, [r4, #12]
 8004a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a86:	81a3      	strh	r3, [r4, #12]
 8004a88:	f04f 30ff 	mov.w	r0, #4294967295
 8004a8c:	e78e      	b.n	80049ac <__sflush_r+0x1c>
 8004a8e:	4407      	add	r7, r0
 8004a90:	eba8 0800 	sub.w	r8, r8, r0
 8004a94:	e7e9      	b.n	8004a6a <__sflush_r+0xda>
 8004a96:	bf00      	nop
 8004a98:	20400001 	.word	0x20400001

08004a9c <_fflush_r>:
 8004a9c:	b538      	push	{r3, r4, r5, lr}
 8004a9e:	690b      	ldr	r3, [r1, #16]
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	460c      	mov	r4, r1
 8004aa4:	b913      	cbnz	r3, 8004aac <_fflush_r+0x10>
 8004aa6:	2500      	movs	r5, #0
 8004aa8:	4628      	mov	r0, r5
 8004aaa:	bd38      	pop	{r3, r4, r5, pc}
 8004aac:	b118      	cbz	r0, 8004ab6 <_fflush_r+0x1a>
 8004aae:	6983      	ldr	r3, [r0, #24]
 8004ab0:	b90b      	cbnz	r3, 8004ab6 <_fflush_r+0x1a>
 8004ab2:	f000 f887 	bl	8004bc4 <__sinit>
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <_fflush_r+0x6c>)
 8004ab8:	429c      	cmp	r4, r3
 8004aba:	d11b      	bne.n	8004af4 <_fflush_r+0x58>
 8004abc:	686c      	ldr	r4, [r5, #4]
 8004abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0ef      	beq.n	8004aa6 <_fflush_r+0xa>
 8004ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004ac8:	07d0      	lsls	r0, r2, #31
 8004aca:	d404      	bmi.n	8004ad6 <_fflush_r+0x3a>
 8004acc:	0599      	lsls	r1, r3, #22
 8004ace:	d402      	bmi.n	8004ad6 <_fflush_r+0x3a>
 8004ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ad2:	f000 f915 	bl	8004d00 <__retarget_lock_acquire_recursive>
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	4621      	mov	r1, r4
 8004ada:	f7ff ff59 	bl	8004990 <__sflush_r>
 8004ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ae0:	07da      	lsls	r2, r3, #31
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	d4e0      	bmi.n	8004aa8 <_fflush_r+0xc>
 8004ae6:	89a3      	ldrh	r3, [r4, #12]
 8004ae8:	059b      	lsls	r3, r3, #22
 8004aea:	d4dd      	bmi.n	8004aa8 <_fflush_r+0xc>
 8004aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aee:	f000 f908 	bl	8004d02 <__retarget_lock_release_recursive>
 8004af2:	e7d9      	b.n	8004aa8 <_fflush_r+0xc>
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <_fflush_r+0x70>)
 8004af6:	429c      	cmp	r4, r3
 8004af8:	d101      	bne.n	8004afe <_fflush_r+0x62>
 8004afa:	68ac      	ldr	r4, [r5, #8]
 8004afc:	e7df      	b.n	8004abe <_fflush_r+0x22>
 8004afe:	4b04      	ldr	r3, [pc, #16]	; (8004b10 <_fflush_r+0x74>)
 8004b00:	429c      	cmp	r4, r3
 8004b02:	bf08      	it	eq
 8004b04:	68ec      	ldreq	r4, [r5, #12]
 8004b06:	e7da      	b.n	8004abe <_fflush_r+0x22>
 8004b08:	08005384 	.word	0x08005384
 8004b0c:	080053a4 	.word	0x080053a4
 8004b10:	08005364 	.word	0x08005364

08004b14 <std>:
 8004b14:	2300      	movs	r3, #0
 8004b16:	b510      	push	{r4, lr}
 8004b18:	4604      	mov	r4, r0
 8004b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8004b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b22:	6083      	str	r3, [r0, #8]
 8004b24:	8181      	strh	r1, [r0, #12]
 8004b26:	6643      	str	r3, [r0, #100]	; 0x64
 8004b28:	81c2      	strh	r2, [r0, #14]
 8004b2a:	6183      	str	r3, [r0, #24]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	2208      	movs	r2, #8
 8004b30:	305c      	adds	r0, #92	; 0x5c
 8004b32:	f7fd fd1d 	bl	8002570 <memset>
 8004b36:	4b05      	ldr	r3, [pc, #20]	; (8004b4c <std+0x38>)
 8004b38:	6263      	str	r3, [r4, #36]	; 0x24
 8004b3a:	4b05      	ldr	r3, [pc, #20]	; (8004b50 <std+0x3c>)
 8004b3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <std+0x40>)
 8004b40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004b42:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <std+0x44>)
 8004b44:	6224      	str	r4, [r4, #32]
 8004b46:	6323      	str	r3, [r4, #48]	; 0x30
 8004b48:	bd10      	pop	{r4, pc}
 8004b4a:	bf00      	nop
 8004b4c:	08004e59 	.word	0x08004e59
 8004b50:	08004e7b 	.word	0x08004e7b
 8004b54:	08004eb3 	.word	0x08004eb3
 8004b58:	08004ed7 	.word	0x08004ed7

08004b5c <_cleanup_r>:
 8004b5c:	4901      	ldr	r1, [pc, #4]	; (8004b64 <_cleanup_r+0x8>)
 8004b5e:	f000 b8af 	b.w	8004cc0 <_fwalk_reent>
 8004b62:	bf00      	nop
 8004b64:	08004a9d 	.word	0x08004a9d

08004b68 <__sfmoreglue>:
 8004b68:	b570      	push	{r4, r5, r6, lr}
 8004b6a:	2268      	movs	r2, #104	; 0x68
 8004b6c:	1e4d      	subs	r5, r1, #1
 8004b6e:	4355      	muls	r5, r2
 8004b70:	460e      	mov	r6, r1
 8004b72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004b76:	f7ff fc09 	bl	800438c <_malloc_r>
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	b140      	cbz	r0, 8004b90 <__sfmoreglue+0x28>
 8004b7e:	2100      	movs	r1, #0
 8004b80:	e9c0 1600 	strd	r1, r6, [r0]
 8004b84:	300c      	adds	r0, #12
 8004b86:	60a0      	str	r0, [r4, #8]
 8004b88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004b8c:	f7fd fcf0 	bl	8002570 <memset>
 8004b90:	4620      	mov	r0, r4
 8004b92:	bd70      	pop	{r4, r5, r6, pc}

08004b94 <__sfp_lock_acquire>:
 8004b94:	4801      	ldr	r0, [pc, #4]	; (8004b9c <__sfp_lock_acquire+0x8>)
 8004b96:	f000 b8b3 	b.w	8004d00 <__retarget_lock_acquire_recursive>
 8004b9a:	bf00      	nop
 8004b9c:	200012fd 	.word	0x200012fd

08004ba0 <__sfp_lock_release>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	; (8004ba8 <__sfp_lock_release+0x8>)
 8004ba2:	f000 b8ae 	b.w	8004d02 <__retarget_lock_release_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	200012fd 	.word	0x200012fd

08004bac <__sinit_lock_acquire>:
 8004bac:	4801      	ldr	r0, [pc, #4]	; (8004bb4 <__sinit_lock_acquire+0x8>)
 8004bae:	f000 b8a7 	b.w	8004d00 <__retarget_lock_acquire_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	200012fe 	.word	0x200012fe

08004bb8 <__sinit_lock_release>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	; (8004bc0 <__sinit_lock_release+0x8>)
 8004bba:	f000 b8a2 	b.w	8004d02 <__retarget_lock_release_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	200012fe 	.word	0x200012fe

08004bc4 <__sinit>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	4604      	mov	r4, r0
 8004bc8:	f7ff fff0 	bl	8004bac <__sinit_lock_acquire>
 8004bcc:	69a3      	ldr	r3, [r4, #24]
 8004bce:	b11b      	cbz	r3, 8004bd8 <__sinit+0x14>
 8004bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bd4:	f7ff bff0 	b.w	8004bb8 <__sinit_lock_release>
 8004bd8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004bdc:	6523      	str	r3, [r4, #80]	; 0x50
 8004bde:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <__sinit+0x68>)
 8004be0:	4a13      	ldr	r2, [pc, #76]	; (8004c30 <__sinit+0x6c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004be6:	42a3      	cmp	r3, r4
 8004be8:	bf04      	itt	eq
 8004bea:	2301      	moveq	r3, #1
 8004bec:	61a3      	streq	r3, [r4, #24]
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 f820 	bl	8004c34 <__sfp>
 8004bf4:	6060      	str	r0, [r4, #4]
 8004bf6:	4620      	mov	r0, r4
 8004bf8:	f000 f81c 	bl	8004c34 <__sfp>
 8004bfc:	60a0      	str	r0, [r4, #8]
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f000 f818 	bl	8004c34 <__sfp>
 8004c04:	2200      	movs	r2, #0
 8004c06:	60e0      	str	r0, [r4, #12]
 8004c08:	2104      	movs	r1, #4
 8004c0a:	6860      	ldr	r0, [r4, #4]
 8004c0c:	f7ff ff82 	bl	8004b14 <std>
 8004c10:	68a0      	ldr	r0, [r4, #8]
 8004c12:	2201      	movs	r2, #1
 8004c14:	2109      	movs	r1, #9
 8004c16:	f7ff ff7d 	bl	8004b14 <std>
 8004c1a:	68e0      	ldr	r0, [r4, #12]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	2112      	movs	r1, #18
 8004c20:	f7ff ff78 	bl	8004b14 <std>
 8004c24:	2301      	movs	r3, #1
 8004c26:	61a3      	str	r3, [r4, #24]
 8004c28:	e7d2      	b.n	8004bd0 <__sinit+0xc>
 8004c2a:	bf00      	nop
 8004c2c:	08004fe8 	.word	0x08004fe8
 8004c30:	08004b5d 	.word	0x08004b5d

08004c34 <__sfp>:
 8004c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c36:	4607      	mov	r7, r0
 8004c38:	f7ff ffac 	bl	8004b94 <__sfp_lock_acquire>
 8004c3c:	4b1e      	ldr	r3, [pc, #120]	; (8004cb8 <__sfp+0x84>)
 8004c3e:	681e      	ldr	r6, [r3, #0]
 8004c40:	69b3      	ldr	r3, [r6, #24]
 8004c42:	b913      	cbnz	r3, 8004c4a <__sfp+0x16>
 8004c44:	4630      	mov	r0, r6
 8004c46:	f7ff ffbd 	bl	8004bc4 <__sinit>
 8004c4a:	3648      	adds	r6, #72	; 0x48
 8004c4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004c50:	3b01      	subs	r3, #1
 8004c52:	d503      	bpl.n	8004c5c <__sfp+0x28>
 8004c54:	6833      	ldr	r3, [r6, #0]
 8004c56:	b30b      	cbz	r3, 8004c9c <__sfp+0x68>
 8004c58:	6836      	ldr	r6, [r6, #0]
 8004c5a:	e7f7      	b.n	8004c4c <__sfp+0x18>
 8004c5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004c60:	b9d5      	cbnz	r5, 8004c98 <__sfp+0x64>
 8004c62:	4b16      	ldr	r3, [pc, #88]	; (8004cbc <__sfp+0x88>)
 8004c64:	60e3      	str	r3, [r4, #12]
 8004c66:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004c6a:	6665      	str	r5, [r4, #100]	; 0x64
 8004c6c:	f000 f847 	bl	8004cfe <__retarget_lock_init_recursive>
 8004c70:	f7ff ff96 	bl	8004ba0 <__sfp_lock_release>
 8004c74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004c78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004c7c:	6025      	str	r5, [r4, #0]
 8004c7e:	61a5      	str	r5, [r4, #24]
 8004c80:	2208      	movs	r2, #8
 8004c82:	4629      	mov	r1, r5
 8004c84:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004c88:	f7fd fc72 	bl	8002570 <memset>
 8004c8c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004c90:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004c94:	4620      	mov	r0, r4
 8004c96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c98:	3468      	adds	r4, #104	; 0x68
 8004c9a:	e7d9      	b.n	8004c50 <__sfp+0x1c>
 8004c9c:	2104      	movs	r1, #4
 8004c9e:	4638      	mov	r0, r7
 8004ca0:	f7ff ff62 	bl	8004b68 <__sfmoreglue>
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	6030      	str	r0, [r6, #0]
 8004ca8:	2800      	cmp	r0, #0
 8004caa:	d1d5      	bne.n	8004c58 <__sfp+0x24>
 8004cac:	f7ff ff78 	bl	8004ba0 <__sfp_lock_release>
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	e7ee      	b.n	8004c94 <__sfp+0x60>
 8004cb6:	bf00      	nop
 8004cb8:	08004fe8 	.word	0x08004fe8
 8004cbc:	ffff0001 	.word	0xffff0001

08004cc0 <_fwalk_reent>:
 8004cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cc4:	4606      	mov	r6, r0
 8004cc6:	4688      	mov	r8, r1
 8004cc8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ccc:	2700      	movs	r7, #0
 8004cce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004cd2:	f1b9 0901 	subs.w	r9, r9, #1
 8004cd6:	d505      	bpl.n	8004ce4 <_fwalk_reent+0x24>
 8004cd8:	6824      	ldr	r4, [r4, #0]
 8004cda:	2c00      	cmp	r4, #0
 8004cdc:	d1f7      	bne.n	8004cce <_fwalk_reent+0xe>
 8004cde:	4638      	mov	r0, r7
 8004ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce4:	89ab      	ldrh	r3, [r5, #12]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d907      	bls.n	8004cfa <_fwalk_reent+0x3a>
 8004cea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004cee:	3301      	adds	r3, #1
 8004cf0:	d003      	beq.n	8004cfa <_fwalk_reent+0x3a>
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	47c0      	blx	r8
 8004cf8:	4307      	orrs	r7, r0
 8004cfa:	3568      	adds	r5, #104	; 0x68
 8004cfc:	e7e9      	b.n	8004cd2 <_fwalk_reent+0x12>

08004cfe <__retarget_lock_init_recursive>:
 8004cfe:	4770      	bx	lr

08004d00 <__retarget_lock_acquire_recursive>:
 8004d00:	4770      	bx	lr

08004d02 <__retarget_lock_release_recursive>:
 8004d02:	4770      	bx	lr

08004d04 <__swhatbuf_r>:
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	460e      	mov	r6, r1
 8004d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0c:	2900      	cmp	r1, #0
 8004d0e:	b096      	sub	sp, #88	; 0x58
 8004d10:	4614      	mov	r4, r2
 8004d12:	461d      	mov	r5, r3
 8004d14:	da08      	bge.n	8004d28 <__swhatbuf_r+0x24>
 8004d16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	602a      	str	r2, [r5, #0]
 8004d1e:	061a      	lsls	r2, r3, #24
 8004d20:	d410      	bmi.n	8004d44 <__swhatbuf_r+0x40>
 8004d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d26:	e00e      	b.n	8004d46 <__swhatbuf_r+0x42>
 8004d28:	466a      	mov	r2, sp
 8004d2a:	f000 f8fb 	bl	8004f24 <_fstat_r>
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	dbf1      	blt.n	8004d16 <__swhatbuf_r+0x12>
 8004d32:	9a01      	ldr	r2, [sp, #4]
 8004d34:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004d38:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004d3c:	425a      	negs	r2, r3
 8004d3e:	415a      	adcs	r2, r3
 8004d40:	602a      	str	r2, [r5, #0]
 8004d42:	e7ee      	b.n	8004d22 <__swhatbuf_r+0x1e>
 8004d44:	2340      	movs	r3, #64	; 0x40
 8004d46:	2000      	movs	r0, #0
 8004d48:	6023      	str	r3, [r4, #0]
 8004d4a:	b016      	add	sp, #88	; 0x58
 8004d4c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d50 <__smakebuf_r>:
 8004d50:	898b      	ldrh	r3, [r1, #12]
 8004d52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d54:	079d      	lsls	r5, r3, #30
 8004d56:	4606      	mov	r6, r0
 8004d58:	460c      	mov	r4, r1
 8004d5a:	d507      	bpl.n	8004d6c <__smakebuf_r+0x1c>
 8004d5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d60:	6023      	str	r3, [r4, #0]
 8004d62:	6123      	str	r3, [r4, #16]
 8004d64:	2301      	movs	r3, #1
 8004d66:	6163      	str	r3, [r4, #20]
 8004d68:	b002      	add	sp, #8
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	ab01      	add	r3, sp, #4
 8004d6e:	466a      	mov	r2, sp
 8004d70:	f7ff ffc8 	bl	8004d04 <__swhatbuf_r>
 8004d74:	9900      	ldr	r1, [sp, #0]
 8004d76:	4605      	mov	r5, r0
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f7ff fb07 	bl	800438c <_malloc_r>
 8004d7e:	b948      	cbnz	r0, 8004d94 <__smakebuf_r+0x44>
 8004d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d84:	059a      	lsls	r2, r3, #22
 8004d86:	d4ef      	bmi.n	8004d68 <__smakebuf_r+0x18>
 8004d88:	f023 0303 	bic.w	r3, r3, #3
 8004d8c:	f043 0302 	orr.w	r3, r3, #2
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	e7e3      	b.n	8004d5c <__smakebuf_r+0xc>
 8004d94:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <__smakebuf_r+0x7c>)
 8004d96:	62b3      	str	r3, [r6, #40]	; 0x28
 8004d98:	89a3      	ldrh	r3, [r4, #12]
 8004d9a:	6020      	str	r0, [r4, #0]
 8004d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004da0:	81a3      	strh	r3, [r4, #12]
 8004da2:	9b00      	ldr	r3, [sp, #0]
 8004da4:	6163      	str	r3, [r4, #20]
 8004da6:	9b01      	ldr	r3, [sp, #4]
 8004da8:	6120      	str	r0, [r4, #16]
 8004daa:	b15b      	cbz	r3, 8004dc4 <__smakebuf_r+0x74>
 8004dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004db0:	4630      	mov	r0, r6
 8004db2:	f000 f8c9 	bl	8004f48 <_isatty_r>
 8004db6:	b128      	cbz	r0, 8004dc4 <__smakebuf_r+0x74>
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	f023 0303 	bic.w	r3, r3, #3
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	81a3      	strh	r3, [r4, #12]
 8004dc4:	89a0      	ldrh	r0, [r4, #12]
 8004dc6:	4305      	orrs	r5, r0
 8004dc8:	81a5      	strh	r5, [r4, #12]
 8004dca:	e7cd      	b.n	8004d68 <__smakebuf_r+0x18>
 8004dcc:	08004b5d 	.word	0x08004b5d

08004dd0 <_raise_r>:
 8004dd0:	291f      	cmp	r1, #31
 8004dd2:	b538      	push	{r3, r4, r5, lr}
 8004dd4:	4604      	mov	r4, r0
 8004dd6:	460d      	mov	r5, r1
 8004dd8:	d904      	bls.n	8004de4 <_raise_r+0x14>
 8004dda:	2316      	movs	r3, #22
 8004ddc:	6003      	str	r3, [r0, #0]
 8004dde:	f04f 30ff 	mov.w	r0, #4294967295
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004de6:	b112      	cbz	r2, 8004dee <_raise_r+0x1e>
 8004de8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004dec:	b94b      	cbnz	r3, 8004e02 <_raise_r+0x32>
 8004dee:	4620      	mov	r0, r4
 8004df0:	f000 f830 	bl	8004e54 <_getpid_r>
 8004df4:	462a      	mov	r2, r5
 8004df6:	4601      	mov	r1, r0
 8004df8:	4620      	mov	r0, r4
 8004dfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dfe:	f000 b817 	b.w	8004e30 <_kill_r>
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d00a      	beq.n	8004e1c <_raise_r+0x4c>
 8004e06:	1c59      	adds	r1, r3, #1
 8004e08:	d103      	bne.n	8004e12 <_raise_r+0x42>
 8004e0a:	2316      	movs	r3, #22
 8004e0c:	6003      	str	r3, [r0, #0]
 8004e0e:	2001      	movs	r0, #1
 8004e10:	e7e7      	b.n	8004de2 <_raise_r+0x12>
 8004e12:	2400      	movs	r4, #0
 8004e14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004e18:	4628      	mov	r0, r5
 8004e1a:	4798      	blx	r3
 8004e1c:	2000      	movs	r0, #0
 8004e1e:	e7e0      	b.n	8004de2 <_raise_r+0x12>

08004e20 <raise>:
 8004e20:	4b02      	ldr	r3, [pc, #8]	; (8004e2c <raise+0xc>)
 8004e22:	4601      	mov	r1, r0
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	f7ff bfd3 	b.w	8004dd0 <_raise_r>
 8004e2a:	bf00      	nop
 8004e2c:	2000000c 	.word	0x2000000c

08004e30 <_kill_r>:
 8004e30:	b538      	push	{r3, r4, r5, lr}
 8004e32:	4d07      	ldr	r5, [pc, #28]	; (8004e50 <_kill_r+0x20>)
 8004e34:	2300      	movs	r3, #0
 8004e36:	4604      	mov	r4, r0
 8004e38:	4608      	mov	r0, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	602b      	str	r3, [r5, #0]
 8004e3e:	f7fc f9b3 	bl	80011a8 <_kill>
 8004e42:	1c43      	adds	r3, r0, #1
 8004e44:	d102      	bne.n	8004e4c <_kill_r+0x1c>
 8004e46:	682b      	ldr	r3, [r5, #0]
 8004e48:	b103      	cbz	r3, 8004e4c <_kill_r+0x1c>
 8004e4a:	6023      	str	r3, [r4, #0]
 8004e4c:	bd38      	pop	{r3, r4, r5, pc}
 8004e4e:	bf00      	nop
 8004e50:	200012f8 	.word	0x200012f8

08004e54 <_getpid_r>:
 8004e54:	f7fc b9a6 	b.w	80011a4 <_getpid>

08004e58 <__sread>:
 8004e58:	b510      	push	{r4, lr}
 8004e5a:	460c      	mov	r4, r1
 8004e5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e60:	f000 f894 	bl	8004f8c <_read_r>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	bfab      	itete	ge
 8004e68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e6a:	89a3      	ldrhlt	r3, [r4, #12]
 8004e6c:	181b      	addge	r3, r3, r0
 8004e6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e72:	bfac      	ite	ge
 8004e74:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e76:	81a3      	strhlt	r3, [r4, #12]
 8004e78:	bd10      	pop	{r4, pc}

08004e7a <__swrite>:
 8004e7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7e:	461f      	mov	r7, r3
 8004e80:	898b      	ldrh	r3, [r1, #12]
 8004e82:	05db      	lsls	r3, r3, #23
 8004e84:	4605      	mov	r5, r0
 8004e86:	460c      	mov	r4, r1
 8004e88:	4616      	mov	r6, r2
 8004e8a:	d505      	bpl.n	8004e98 <__swrite+0x1e>
 8004e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e90:	2302      	movs	r3, #2
 8004e92:	2200      	movs	r2, #0
 8004e94:	f000 f868 	bl	8004f68 <_lseek_r>
 8004e98:	89a3      	ldrh	r3, [r4, #12]
 8004e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ea2:	81a3      	strh	r3, [r4, #12]
 8004ea4:	4632      	mov	r2, r6
 8004ea6:	463b      	mov	r3, r7
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eae:	f000 b817 	b.w	8004ee0 <_write_r>

08004eb2 <__sseek>:
 8004eb2:	b510      	push	{r4, lr}
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eba:	f000 f855 	bl	8004f68 <_lseek_r>
 8004ebe:	1c43      	adds	r3, r0, #1
 8004ec0:	89a3      	ldrh	r3, [r4, #12]
 8004ec2:	bf15      	itete	ne
 8004ec4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ec6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004eca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ece:	81a3      	strheq	r3, [r4, #12]
 8004ed0:	bf18      	it	ne
 8004ed2:	81a3      	strhne	r3, [r4, #12]
 8004ed4:	bd10      	pop	{r4, pc}

08004ed6 <__sclose>:
 8004ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004eda:	f000 b813 	b.w	8004f04 <_close_r>
	...

08004ee0 <_write_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4d07      	ldr	r5, [pc, #28]	; (8004f00 <_write_r+0x20>)
 8004ee4:	4604      	mov	r4, r0
 8004ee6:	4608      	mov	r0, r1
 8004ee8:	4611      	mov	r1, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	602a      	str	r2, [r5, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f7fc f976 	bl	80011e0 <_write>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_write_r+0x1e>
 8004ef8:	682b      	ldr	r3, [r5, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_write_r+0x1e>
 8004efc:	6023      	str	r3, [r4, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	200012f8 	.word	0x200012f8

08004f04 <_close_r>:
 8004f04:	b538      	push	{r3, r4, r5, lr}
 8004f06:	4d06      	ldr	r5, [pc, #24]	; (8004f20 <_close_r+0x1c>)
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4604      	mov	r4, r0
 8004f0c:	4608      	mov	r0, r1
 8004f0e:	602b      	str	r3, [r5, #0]
 8004f10:	f7fc f974 	bl	80011fc <_close>
 8004f14:	1c43      	adds	r3, r0, #1
 8004f16:	d102      	bne.n	8004f1e <_close_r+0x1a>
 8004f18:	682b      	ldr	r3, [r5, #0]
 8004f1a:	b103      	cbz	r3, 8004f1e <_close_r+0x1a>
 8004f1c:	6023      	str	r3, [r4, #0]
 8004f1e:	bd38      	pop	{r3, r4, r5, pc}
 8004f20:	200012f8 	.word	0x200012f8

08004f24 <_fstat_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4d07      	ldr	r5, [pc, #28]	; (8004f44 <_fstat_r+0x20>)
 8004f28:	2300      	movs	r3, #0
 8004f2a:	4604      	mov	r4, r0
 8004f2c:	4608      	mov	r0, r1
 8004f2e:	4611      	mov	r1, r2
 8004f30:	602b      	str	r3, [r5, #0]
 8004f32:	f7fc f966 	bl	8001202 <_fstat>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	d102      	bne.n	8004f40 <_fstat_r+0x1c>
 8004f3a:	682b      	ldr	r3, [r5, #0]
 8004f3c:	b103      	cbz	r3, 8004f40 <_fstat_r+0x1c>
 8004f3e:	6023      	str	r3, [r4, #0]
 8004f40:	bd38      	pop	{r3, r4, r5, pc}
 8004f42:	bf00      	nop
 8004f44:	200012f8 	.word	0x200012f8

08004f48 <_isatty_r>:
 8004f48:	b538      	push	{r3, r4, r5, lr}
 8004f4a:	4d06      	ldr	r5, [pc, #24]	; (8004f64 <_isatty_r+0x1c>)
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	4604      	mov	r4, r0
 8004f50:	4608      	mov	r0, r1
 8004f52:	602b      	str	r3, [r5, #0]
 8004f54:	f7fc f95a 	bl	800120c <_isatty>
 8004f58:	1c43      	adds	r3, r0, #1
 8004f5a:	d102      	bne.n	8004f62 <_isatty_r+0x1a>
 8004f5c:	682b      	ldr	r3, [r5, #0]
 8004f5e:	b103      	cbz	r3, 8004f62 <_isatty_r+0x1a>
 8004f60:	6023      	str	r3, [r4, #0]
 8004f62:	bd38      	pop	{r3, r4, r5, pc}
 8004f64:	200012f8 	.word	0x200012f8

08004f68 <_lseek_r>:
 8004f68:	b538      	push	{r3, r4, r5, lr}
 8004f6a:	4d07      	ldr	r5, [pc, #28]	; (8004f88 <_lseek_r+0x20>)
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	4608      	mov	r0, r1
 8004f70:	4611      	mov	r1, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	602a      	str	r2, [r5, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	f7fc f94a 	bl	8001210 <_lseek>
 8004f7c:	1c43      	adds	r3, r0, #1
 8004f7e:	d102      	bne.n	8004f86 <_lseek_r+0x1e>
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	b103      	cbz	r3, 8004f86 <_lseek_r+0x1e>
 8004f84:	6023      	str	r3, [r4, #0]
 8004f86:	bd38      	pop	{r3, r4, r5, pc}
 8004f88:	200012f8 	.word	0x200012f8

08004f8c <_read_r>:
 8004f8c:	b538      	push	{r3, r4, r5, lr}
 8004f8e:	4d07      	ldr	r5, [pc, #28]	; (8004fac <_read_r+0x20>)
 8004f90:	4604      	mov	r4, r0
 8004f92:	4608      	mov	r0, r1
 8004f94:	4611      	mov	r1, r2
 8004f96:	2200      	movs	r2, #0
 8004f98:	602a      	str	r2, [r5, #0]
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f7fc f912 	bl	80011c4 <_read>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_read_r+0x1e>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_read_r+0x1e>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	200012f8 	.word	0x200012f8

08004fb0 <_init>:
 8004fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fb2:	bf00      	nop
 8004fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fb6:	bc08      	pop	{r3}
 8004fb8:	469e      	mov	lr, r3
 8004fba:	4770      	bx	lr

08004fbc <_fini>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	bf00      	nop
 8004fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fc2:	bc08      	pop	{r3}
 8004fc4:	469e      	mov	lr, r3
 8004fc6:	4770      	bx	lr
