
ASD_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ad4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004ff4  08007ca8  08007ca8  00017ca8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc9c  0800cc9c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc9c  0800cc9c  0001cc9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cca4  0800cca4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cca4  0800cca4  0001cca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cca8  0800cca8  0001cca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ccac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000776c  200001e4  0800ce90  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007950  0800ce90  00027950  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f592  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004bd0  00000000  00000000  0003f7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0001243a  00000000  00000000  00044376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001100  00000000  00000000  000567b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015f8  00000000  00000000  000578b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002844b  00000000  00000000  00058ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022878  00000000  00000000  000812f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c36  00000000  00000000  000a3b6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  001887a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004288  00000000  00000000  00188860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007c8c 	.word	0x08007c8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08007c8c 	.word	0x08007c8c

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2uiz>:
 8000ca8:	004a      	lsls	r2, r1, #1
 8000caa:	d211      	bcs.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb0:	d211      	bcs.n	8000cd6 <__aeabi_d2uiz+0x2e>
 8000cb2:	d50d      	bpl.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d40e      	bmi.n	8000cdc <__aeabi_d2uiz+0x34>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	fa23 f002 	lsr.w	r0, r3, r2
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cda:	d102      	bne.n	8000ce2 <__aeabi_d2uiz+0x3a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b974 	b.w	8000fe8 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	4604      	mov	r4, r0
 8000d20:	468e      	mov	lr, r1
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d14d      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d26:	428a      	cmp	r2, r1
 8000d28:	4694      	mov	ip, r2
 8000d2a:	d969      	bls.n	8000e00 <__udivmoddi4+0xe8>
 8000d2c:	fab2 f282 	clz	r2, r2
 8000d30:	b152      	cbz	r2, 8000d48 <__udivmoddi4+0x30>
 8000d32:	fa01 f302 	lsl.w	r3, r1, r2
 8000d36:	f1c2 0120 	rsb	r1, r2, #32
 8000d3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d42:	ea41 0e03 	orr.w	lr, r1, r3
 8000d46:	4094      	lsls	r4, r2
 8000d48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d4c:	0c21      	lsrs	r1, r4, #16
 8000d4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d52:	fa1f f78c 	uxth.w	r7, ip
 8000d56:	fb08 e316 	mls	r3, r8, r6, lr
 8000d5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5e:	fb06 f107 	mul.w	r1, r6, r7
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6e:	f080 811f 	bcs.w	8000fb0 <__udivmoddi4+0x298>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 811c 	bls.w	8000fb0 <__udivmoddi4+0x298>
 8000d78:	3e02      	subs	r6, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3310 	mls	r3, r8, r0, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb00 f707 	mul.w	r7, r0, r7
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	d90a      	bls.n	8000daa <__udivmoddi4+0x92>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d9c:	f080 810a 	bcs.w	8000fb4 <__udivmoddi4+0x29c>
 8000da0:	42a7      	cmp	r7, r4
 8000da2:	f240 8107 	bls.w	8000fb4 <__udivmoddi4+0x29c>
 8000da6:	4464      	add	r4, ip
 8000da8:	3802      	subs	r0, #2
 8000daa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dae:	1be4      	subs	r4, r4, r7
 8000db0:	2600      	movs	r6, #0
 8000db2:	b11d      	cbz	r5, 8000dbc <__udivmoddi4+0xa4>
 8000db4:	40d4      	lsrs	r4, r2
 8000db6:	2300      	movs	r3, #0
 8000db8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dbc:	4631      	mov	r1, r6
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d909      	bls.n	8000dda <__udivmoddi4+0xc2>
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	f000 80ef 	beq.w	8000faa <__udivmoddi4+0x292>
 8000dcc:	2600      	movs	r6, #0
 8000dce:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	fab3 f683 	clz	r6, r3
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	d14a      	bne.n	8000e78 <__udivmoddi4+0x160>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xd4>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 80f9 	bhi.w	8000fde <__udivmoddi4+0x2c6>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb61 0303 	sbc.w	r3, r1, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	469e      	mov	lr, r3
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e0      	beq.n	8000dbc <__udivmoddi4+0xa4>
 8000dfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfe:	e7dd      	b.n	8000dbc <__udivmoddi4+0xa4>
 8000e00:	b902      	cbnz	r2, 8000e04 <__udivmoddi4+0xec>
 8000e02:	deff      	udf	#255	; 0xff
 8000e04:	fab2 f282 	clz	r2, r2
 8000e08:	2a00      	cmp	r2, #0
 8000e0a:	f040 8092 	bne.w	8000f32 <__udivmoddi4+0x21a>
 8000e0e:	eba1 010c 	sub.w	r1, r1, ip
 8000e12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e16:	fa1f fe8c 	uxth.w	lr, ip
 8000e1a:	2601      	movs	r6, #1
 8000e1c:	0c20      	lsrs	r0, r4, #16
 8000e1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e22:	fb07 1113 	mls	r1, r7, r3, r1
 8000e26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2a:	fb0e f003 	mul.w	r0, lr, r3
 8000e2e:	4288      	cmp	r0, r1
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x12c>
 8000e32:	eb1c 0101 	adds.w	r1, ip, r1
 8000e36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x12a>
 8000e3c:	4288      	cmp	r0, r1
 8000e3e:	f200 80cb 	bhi.w	8000fd8 <__udivmoddi4+0x2c0>
 8000e42:	4643      	mov	r3, r8
 8000e44:	1a09      	subs	r1, r1, r0
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e54:	fb0e fe00 	mul.w	lr, lr, r0
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d908      	bls.n	8000e6e <__udivmoddi4+0x156>
 8000e5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e64:	d202      	bcs.n	8000e6c <__udivmoddi4+0x154>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f200 80bb 	bhi.w	8000fe2 <__udivmoddi4+0x2ca>
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	eba4 040e 	sub.w	r4, r4, lr
 8000e72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e76:	e79c      	b.n	8000db2 <__udivmoddi4+0x9a>
 8000e78:	f1c6 0720 	rsb	r7, r6, #32
 8000e7c:	40b3      	lsls	r3, r6
 8000e7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e86:	fa20 f407 	lsr.w	r4, r0, r7
 8000e8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8e:	431c      	orrs	r4, r3
 8000e90:	40f9      	lsrs	r1, r7
 8000e92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e96:	fa00 f306 	lsl.w	r3, r0, r6
 8000e9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9e:	0c20      	lsrs	r0, r4, #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	fb08 f00e 	mul.w	r0, r8, lr
 8000eb0:	4288      	cmp	r0, r1
 8000eb2:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb6:	d90b      	bls.n	8000ed0 <__udivmoddi4+0x1b8>
 8000eb8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ebc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec0:	f080 8088 	bcs.w	8000fd4 <__udivmoddi4+0x2bc>
 8000ec4:	4288      	cmp	r0, r1
 8000ec6:	f240 8085 	bls.w	8000fd4 <__udivmoddi4+0x2bc>
 8000eca:	f1a8 0802 	sub.w	r8, r8, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1a09      	subs	r1, r1, r0
 8000ed2:	b2a4      	uxth	r4, r4
 8000ed4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed8:	fb09 1110 	mls	r1, r9, r0, r1
 8000edc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ee0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee4:	458e      	cmp	lr, r1
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x1e2>
 8000ee8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef0:	d26c      	bcs.n	8000fcc <__udivmoddi4+0x2b4>
 8000ef2:	458e      	cmp	lr, r1
 8000ef4:	d96a      	bls.n	8000fcc <__udivmoddi4+0x2b4>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4461      	add	r1, ip
 8000efa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efe:	fba0 9402 	umull	r9, r4, r0, r2
 8000f02:	eba1 010e 	sub.w	r1, r1, lr
 8000f06:	42a1      	cmp	r1, r4
 8000f08:	46c8      	mov	r8, r9
 8000f0a:	46a6      	mov	lr, r4
 8000f0c:	d356      	bcc.n	8000fbc <__udivmoddi4+0x2a4>
 8000f0e:	d053      	beq.n	8000fb8 <__udivmoddi4+0x2a0>
 8000f10:	b15d      	cbz	r5, 8000f2a <__udivmoddi4+0x212>
 8000f12:	ebb3 0208 	subs.w	r2, r3, r8
 8000f16:	eb61 010e 	sbc.w	r1, r1, lr
 8000f1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f22:	40f1      	lsrs	r1, r6
 8000f24:	431f      	orrs	r7, r3
 8000f26:	e9c5 7100 	strd	r7, r1, [r5]
 8000f2a:	2600      	movs	r6, #0
 8000f2c:	4631      	mov	r1, r6
 8000f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f32:	f1c2 0320 	rsb	r3, r2, #32
 8000f36:	40d8      	lsrs	r0, r3
 8000f38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f40:	4091      	lsls	r1, r2
 8000f42:	4301      	orrs	r1, r0
 8000f44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f48:	fa1f fe8c 	uxth.w	lr, ip
 8000f4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f50:	fb07 3610 	mls	r6, r7, r0, r3
 8000f54:	0c0b      	lsrs	r3, r1, #16
 8000f56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5e:	429e      	cmp	r6, r3
 8000f60:	fa04 f402 	lsl.w	r4, r4, r2
 8000f64:	d908      	bls.n	8000f78 <__udivmoddi4+0x260>
 8000f66:	eb1c 0303 	adds.w	r3, ip, r3
 8000f6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6e:	d22f      	bcs.n	8000fd0 <__udivmoddi4+0x2b8>
 8000f70:	429e      	cmp	r6, r3
 8000f72:	d92d      	bls.n	8000fd0 <__udivmoddi4+0x2b8>
 8000f74:	3802      	subs	r0, #2
 8000f76:	4463      	add	r3, ip
 8000f78:	1b9b      	subs	r3, r3, r6
 8000f7a:	b289      	uxth	r1, r1
 8000f7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f80:	fb07 3316 	mls	r3, r7, r6, r3
 8000f84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f88:	fb06 f30e 	mul.w	r3, r6, lr
 8000f8c:	428b      	cmp	r3, r1
 8000f8e:	d908      	bls.n	8000fa2 <__udivmoddi4+0x28a>
 8000f90:	eb1c 0101 	adds.w	r1, ip, r1
 8000f94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f98:	d216      	bcs.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f9a:	428b      	cmp	r3, r1
 8000f9c:	d914      	bls.n	8000fc8 <__udivmoddi4+0x2b0>
 8000f9e:	3e02      	subs	r6, #2
 8000fa0:	4461      	add	r1, ip
 8000fa2:	1ac9      	subs	r1, r1, r3
 8000fa4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa8:	e738      	b.n	8000e1c <__udivmoddi4+0x104>
 8000faa:	462e      	mov	r6, r5
 8000fac:	4628      	mov	r0, r5
 8000fae:	e705      	b.n	8000dbc <__udivmoddi4+0xa4>
 8000fb0:	4606      	mov	r6, r0
 8000fb2:	e6e3      	b.n	8000d7c <__udivmoddi4+0x64>
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	e6f8      	b.n	8000daa <__udivmoddi4+0x92>
 8000fb8:	454b      	cmp	r3, r9
 8000fba:	d2a9      	bcs.n	8000f10 <__udivmoddi4+0x1f8>
 8000fbc:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc4:	3801      	subs	r0, #1
 8000fc6:	e7a3      	b.n	8000f10 <__udivmoddi4+0x1f8>
 8000fc8:	4646      	mov	r6, r8
 8000fca:	e7ea      	b.n	8000fa2 <__udivmoddi4+0x28a>
 8000fcc:	4620      	mov	r0, r4
 8000fce:	e794      	b.n	8000efa <__udivmoddi4+0x1e2>
 8000fd0:	4640      	mov	r0, r8
 8000fd2:	e7d1      	b.n	8000f78 <__udivmoddi4+0x260>
 8000fd4:	46d0      	mov	r8, sl
 8000fd6:	e77b      	b.n	8000ed0 <__udivmoddi4+0x1b8>
 8000fd8:	3b02      	subs	r3, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	e732      	b.n	8000e44 <__udivmoddi4+0x12c>
 8000fde:	4630      	mov	r0, r6
 8000fe0:	e709      	b.n	8000df6 <__udivmoddi4+0xde>
 8000fe2:	4464      	add	r4, ip
 8000fe4:	3802      	subs	r0, #2
 8000fe6:	e742      	b.n	8000e6e <__udivmoddi4+0x156>

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <ASD_animate>:
float _barAccelerations[BANDS_COUNT];


//int barHeights[BANDS_COUNT] = { 21, 20, 19, 6, 1, 5, 0, 0, 0, 0, 0, 3, 0, 11, 18, 16, 15, 12, 4 };

void ASD_animate(bounds_t *bouds) {
 8000fec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ff0:	4a44      	ldr	r2, [pc, #272]	; (8001104 <ASD_animate+0x118>)
	float32_t dt = bouds->dt_sec;
 8000ff2:	ed90 7a39 	vldr	s14, [r0, #228]	; 0xe4

	//todo uciac zeby nie migalo na dole - minimalna zmiana to 2 wysokosci albo cos takiego - hisereza?

	/* Acceleration */
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
		_barAccelerations[ix] = - 1e-11;
 8000ff6:	4c44      	ldr	r4, [pc, #272]	; (8001108 <ASD_animate+0x11c>)
	float32_t dt = bouds->dt_sec;
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	2313      	movs	r3, #19
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8000ffc:	3b01      	subs	r3, #1
		_barAccelerations[ix] = - 1e-11;
 8000ffe:	f841 4b04 	str.w	r4, [r1], #4
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8001002:	d1fb      	bne.n	8000ffc <ASD_animate+0x10>
 8001004:	4941      	ldr	r1, [pc, #260]	; (800110c <ASD_animate+0x120>)
 8001006:	4d3f      	ldr	r5, [pc, #252]	; (8001104 <ASD_animate+0x118>)
 8001008:	460c      	mov	r4, r1
 800100a:	2313      	movs	r3, #19
	}

	/* Velocity */
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
		_barVelocity[ix] += _barAccelerations[ix] * dt;
 800100c:	edd4 7a00 	vldr	s15, [r4]
 8001010:	ecf5 6a01 	vldmia	r5!, {s13}
 8001014:	eee6 7a87 	vfma.f32	s15, s13, s14
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8001018:	3b01      	subs	r3, #1
		_barVelocity[ix] += _barAccelerations[ix] * dt;
 800101a:	ece4 7a01 	vstmia	r4!, {s15}
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 800101e:	d1f5      	bne.n	800100c <ASD_animate+0x20>
 8001020:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8001114 <ASD_animate+0x128>
 8001024:	f100 054c 	add.w	r5, r0, #76	; 0x4c
 8001028:	4643      	mov	r3, r8
 800102a:	2400      	movs	r4, #0
	}

	/* Position */
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
		_barHeights[ix] += _barVelocity[ix] * dt;
 800102c:	ecf1 6a01 	vldmia	r1!, {s13}
 8001030:	edd3 7a00 	vldr	s15, [r3]
 8001034:	eee6 7a87 	vfma.f32	s15, s13, s14
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8001038:	3204      	adds	r2, #4
		_barHeights[ix] += _barVelocity[ix] * dt;
 800103a:	ece3 7a01 	vstmia	r3!, {s15}

		if(bouds->heights[ix] > _barHeights[ix]) {
 800103e:	ecf0 6a01 	vldmia	r0!, {s13}
 8001042:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			_barHeights[ix] = bouds->heights[ix];
 800104a:	bf48      	it	mi
 800104c:	ed43 6a01 	vstrmi	s13, [r3, #-4]
			_barVelocity[ix] = 0;//todo alboz roznicy polozen albo ze struktury
			_barAccelerations[ix] = 0;//todo inertia
		}

		if(_barHeights[ix] <= 0.0) {
 8001050:	ed53 7a01 	vldr	s15, [r3, #-4]
			_barAccelerations[ix] = 0;//todo inertia
 8001054:	bf48      	it	mi
 8001056:	f842 4c04 	strmi.w	r4, [r2, #-4]
		if(_barHeights[ix] <= 0.0) {
 800105a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
			_barVelocity[ix] = 0;//todo alboz roznicy polozen albo ze struktury
 800105e:	bf48      	it	mi
 8001060:	f841 4c04 	strmi.w	r4, [r1, #-4]
		if(_barHeights[ix] <= 0.0) {
 8001064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			_barHeights[ix] = 0.0;
			_barVelocity[ix] = 0;
			_barAccelerations[ix] = 0;
 8001068:	bf9e      	ittt	ls
 800106a:	f842 4c04 	strls.w	r4, [r2, #-4]
			_barHeights[ix] = 0.0;
 800106e:	f843 4c04 	strls.w	r4, [r3, #-4]
			_barVelocity[ix] = 0;
 8001072:	f841 4c04 	strls.w	r4, [r1, #-4]
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8001076:	42a8      	cmp	r0, r5
 8001078:	d1d8      	bne.n	800102c <ASD_animate+0x40>
		}
	}


	//clear
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 800107a:	2400      	movs	r4, #0
		for (int iy = 0; iy < DISPLAY_HEIGHT; iy++) {
			ASD_DISP_setPixel(ix, iy, 0, 255, 0);
 800107c:	4626      	mov	r6, r4
		for (int iy = 0; iy < DISPLAY_HEIGHT; iy++) {
 800107e:	2500      	movs	r5, #0
			ASD_DISP_setPixel(ix, iy, 0, 255, 0);
 8001080:	4629      	mov	r1, r5
 8001082:	9600      	str	r6, [sp, #0]
 8001084:	23ff      	movs	r3, #255	; 0xff
 8001086:	2200      	movs	r2, #0
 8001088:	4620      	mov	r0, r4
		for (int iy = 0; iy < DISPLAY_HEIGHT; iy++) {
 800108a:	3501      	adds	r5, #1
			ASD_DISP_setPixel(ix, iy, 0, 255, 0);
 800108c:	f000 f93a 	bl	8001304 <ASD_DISP_setPixel>
		for (int iy = 0; iy < DISPLAY_HEIGHT; iy++) {
 8001090:	2d15      	cmp	r5, #21
 8001092:	d1f5      	bne.n	8001080 <ASD_animate+0x94>
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8001094:	3401      	adds	r4, #1
 8001096:	2c13      	cmp	r4, #19
 8001098:	d1f1      	bne.n	800107e <ASD_animate+0x92>
		}
	}


	uint16_t i = 0;
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 800109a:	2400      	movs	r4, #0
		int barHeight = (int)(60.0 * _barHeights[ix]); //drawable
 800109c:	4f1c      	ldr	r7, [pc, #112]	; (8001110 <ASD_animate+0x124>)
	uint16_t i = 0;
 800109e:	4625      	mov	r5, r4
		int barHeight = (int)(60.0 * _barHeights[ix]); //drawable
 80010a0:	2600      	movs	r6, #0
		if(barHeight >= DISPLAY_HEIGHT)
			barHeight = DISPLAY_HEIGHT-1;

		//err barHeight
		for (int iy = 0; iy < barHeight; iy++) {
			ASD_DISP_setPixel(ix, iy, i % 255, 255, 255);
 80010a2:	f04f 0aff 	mov.w	sl, #255	; 0xff
		int barHeight = (int)(60.0 * _barHeights[ix]); //drawable
 80010a6:	f858 0b04 	ldr.w	r0, [r8], #4
 80010aa:	f7ff facd 	bl	8000648 <__aeabi_f2d>
 80010ae:	4632      	mov	r2, r6
 80010b0:	463b      	mov	r3, r7
 80010b2:	f7ff fb21 	bl	80006f8 <__aeabi_dmul>
 80010b6:	f7ff fdcf 	bl	8000c58 <__aeabi_d2iz>
		if(barHeight >= DISPLAY_HEIGHT)
 80010ba:	2814      	cmp	r0, #20
 80010bc:	bfa8      	it	ge
 80010be:	2014      	movge	r0, #20
 80010c0:	4681      	mov	r9, r0
		for (int iy = 0; iy < barHeight; iy++) {
 80010c2:	f04f 0b00 	mov.w	fp, #0
 80010c6:	eb05 020b 	add.w	r2, r5, fp
 80010ca:	45d9      	cmp	r9, fp
 80010cc:	b292      	uxth	r2, r2
 80010ce:	dc0a      	bgt.n	80010e6 <ASD_animate+0xfa>
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 80010d0:	3401      	adds	r4, #1
 80010d2:	f1b9 0f00 	cmp.w	r9, #0
 80010d6:	bfa8      	it	ge
 80010d8:	444d      	addge	r5, r9
 80010da:	2c13      	cmp	r4, #19
 80010dc:	b2ad      	uxth	r5, r5
 80010de:	d1e2      	bne.n	80010a6 <ASD_animate+0xba>
			i++;
		}
	}
	//reszta wypalana
}
 80010e0:	b003      	add	sp, #12
 80010e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ASD_DISP_setPixel(ix, iy, i % 255, 255, 255);
 80010e6:	fbb2 f3fa 	udiv	r3, r2, sl
 80010ea:	441a      	add	r2, r3
 80010ec:	4659      	mov	r1, fp
 80010ee:	f8cd a000 	str.w	sl, [sp]
 80010f2:	23ff      	movs	r3, #255	; 0xff
 80010f4:	b2d2      	uxtb	r2, r2
 80010f6:	4620      	mov	r0, r4
 80010f8:	f000 f904 	bl	8001304 <ASD_DISP_setPixel>
		for (int iy = 0; iy < barHeight; iy++) {
 80010fc:	f10b 0b01 	add.w	fp, fp, #1
 8001100:	e7e1      	b.n	80010c6 <ASD_animate+0xda>
 8001102:	bf00      	nop
 8001104:	20000200 	.word	0x20000200
 8001108:	ad2febff 	.word	0xad2febff
 800110c:	20000298 	.word	0x20000298
 8001110:	404e0000 	.word	0x404e0000
 8001114:	2000024c 	.word	0x2000024c

08001118 <ASD_CORE_init>:
//
//int _swipe_tick;
//int _swipe_current_tick;


void ASD_CORE_init() {
 8001118:	b513      	push	{r0, r1, r4, lr}
	ASD_FFT_init();
 800111a:	f000 f967 	bl	80013ec <ASD_FFT_init>

	HAL_TIM_Base_Start(&htim6); //timing
 800111e:	480e      	ldr	r0, [pc, #56]	; (8001158 <ASD_CORE_init+0x40>)

	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);

	// https://deepbluembedded.com/stm32-dac-sine-wave-generation-stm32-dac-dma-timer-example/
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)DAC_SINE_SAMPLES, DAC_SINE_SAMPLES_COUNT, DAC_ALIGN_12B_R);
    HAL_TIM_Base_Start(&htim2); //DAC trigger event
 8001120:	4c0e      	ldr	r4, [pc, #56]	; (800115c <ASD_CORE_init+0x44>)
	HAL_TIM_Base_Start(&htim6); //timing
 8001122:	f002 fa65 	bl	80035f0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7); // swipe animation
 8001126:	480e      	ldr	r0, [pc, #56]	; (8001160 <ASD_CORE_init+0x48>)
 8001128:	f002 fa98 	bl	800365c <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
 800112c:	480d      	ldr	r0, [pc, #52]	; (8001164 <ASD_CORE_init+0x4c>)
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	f001 fdf1 	bl	8002d18 <HAL_GPIO_WritePin>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)DAC_SINE_SAMPLES, DAC_SINE_SAMPLES_COUNT, DAC_ALIGN_12B_R);
 8001136:	2100      	movs	r1, #0
 8001138:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <ASD_CORE_init+0x50>)
 800113a:	9100      	str	r1, [sp, #0]
 800113c:	2380      	movs	r3, #128	; 0x80
 800113e:	480b      	ldr	r0, [pc, #44]	; (800116c <ASD_CORE_init+0x54>)
 8001140:	f001 fa68 	bl	8002614 <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2); //DAC trigger event
 8001144:	4620      	mov	r0, r4
 8001146:	f002 fa53 	bl	80035f0 <HAL_TIM_Base_Start>
	if(freq > 0) {
		if(freq > DAC_TIM2_FREQ_SINE)
			freq = DAC_TIM2_FREQ_SINE;
		//todo limit wynikajacy z sampling freq
		uint32_t arr = (uint32_t)(DAC_TIM2_FREQ_SINE/freq);
		__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 800114a:	6822      	ldr	r2, [r4, #0]
 800114c:	231b      	movs	r3, #27
 800114e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001150:	60e3      	str	r3, [r4, #12]
}
 8001152:	b002      	add	sp, #8
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	20007868 	.word	0x20007868
 800115c:	20007820 	.word	0x20007820
 8001160:	200078b0 	.word	0x200078b0
 8001164:	40020800 	.word	0x40020800
 8001168:	08007ca8 	.word	0x08007ca8
 800116c:	200076f0 	.word	0x200076f0

08001170 <ASD_CORE_processSignal>:
void ASD_CORE_processSignal() {
 8001170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_samplingTimeMicros = __HAL_TIM_GET_COUNTER(&htim6);
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <ASD_CORE_processSignal+0x70>)
 8001174:	4e1b      	ldr	r6, [pc, #108]	; (80011e4 <ASD_CORE_processSignal+0x74>)
 8001176:	681b      	ldr	r3, [r3, #0]
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_SET);
 8001178:	4c1b      	ldr	r4, [pc, #108]	; (80011e8 <ASD_CORE_processSignal+0x78>)
	_samplingTimeMicros = __HAL_TIM_GET_COUNTER(&htim6);
 800117a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800117c:	8030      	strh	r0, [r6, #0]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 800117e:	2500      	movs	r5, #0
 8001180:	625d      	str	r5, [r3, #36]	; 0x24
	_samplingFrequency = 1000.0 * FFT_SAMPLES_COUNT / _samplingTimeMicros;
 8001182:	b280      	uxth	r0, r0
 8001184:	f7ff fa4e 	bl	8000624 <__aeabi_i2d>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	2000      	movs	r0, #0
 800118e:	4917      	ldr	r1, [pc, #92]	; (80011ec <ASD_CORE_processSignal+0x7c>)
	ASD_FFT_evalFFT(bands);
 8001190:	4f17      	ldr	r7, [pc, #92]	; (80011f0 <ASD_CORE_processSignal+0x80>)
	_samplingFrequency = 1000.0 * FFT_SAMPLES_COUNT / _samplingTimeMicros;
 8001192:	f7ff fbdb 	bl	800094c <__aeabi_ddiv>
 8001196:	f7ff fd87 	bl	8000ca8 <__aeabi_d2uiz>
 800119a:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <ASD_CORE_processSignal+0x84>)
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_SET);
 800119c:	2201      	movs	r2, #1
 800119e:	4611      	mov	r1, r2
	_samplingFrequency = 1000.0 * FFT_SAMPLES_COUNT / _samplingTimeMicros;
 80011a0:	8018      	strh	r0, [r3, #0]
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_SET);
 80011a2:	4620      	mov	r0, r4
 80011a4:	f001 fdb8 	bl	8002d18 <HAL_GPIO_WritePin>
	ASD_FFT_toggleBuffers();
 80011a8:	f000 f950 	bl	800144c <ASD_FFT_toggleBuffers>
	ASD_FFT_evalFFT(bands);
 80011ac:	4638      	mov	r0, r7
 80011ae:	f000 f96f 	bl	8001490 <ASD_FFT_evalFFT>
	ASD_FFT_evalDynamics(bands, &bounds, _samplingTimeMicros);
 80011b2:	8833      	ldrh	r3, [r6, #0]
 80011b4:	4e10      	ldr	r6, [pc, #64]	; (80011f8 <ASD_CORE_processSignal+0x88>)
 80011b6:	ee00 3a10 	vmov	s0, r3
 80011ba:	4631      	mov	r1, r6
 80011bc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80011c0:	4638      	mov	r0, r7
 80011c2:	f000 fa23 	bl	800160c <ASD_FFT_evalDynamics>
	ASD_animate(&bounds);
 80011c6:	4630      	mov	r0, r6
 80011c8:	f7ff ff10 	bl	8000fec <ASD_animate>
	ASD_DISP_prepare();
 80011cc:	f000 f8b4 	bl	8001338 <ASD_DISP_prepare>
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
 80011d0:	462a      	mov	r2, r5
 80011d2:	4620      	mov	r0, r4
 80011d4:	2101      	movs	r1, #1
}
 80011d6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
 80011da:	f001 bd9d 	b.w	8002d18 <HAL_GPIO_WritePin>
 80011de:	bf00      	nop
 80011e0:	20007868 	.word	0x20007868
 80011e4:	20000002 	.word	0x20000002
 80011e8:	40020800 	.word	0x40020800
 80011ec:	412f4000 	.word	0x412f4000
 80011f0:	200002f0 	.word	0x200002f0
 80011f4:	20000000 	.word	0x20000000
 80011f8:	2000033c 	.word	0x2000033c

080011fc <ASD_CORE_render>:
	ASD_DISP_render();
 80011fc:	f000 b8dc 	b.w	80013b8 <ASD_DISP_render>

08001200 <ASD_CORE_setGeneratorFrequency>:
	if(freq > 0) {
 8001200:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001208:	dd12      	ble.n	8001230 <ASD_CORE_setGeneratorFrequency+0x30>
		if(freq > DAC_TIM2_FREQ_SINE)
 800120a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001234 <ASD_CORE_setGeneratorFrequency+0x34>
		__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 800120e:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <ASD_CORE_setGeneratorFrequency+0x38>)
			freq = DAC_TIM2_FREQ_SINE;
 8001210:	eeb4 0a47 	vcmp.f32	s0, s14
 8001214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001218:	bfc8      	it	gt
 800121a:	eeb0 0a47 	vmovgt.f32	s0, s14
		uint32_t arr = (uint32_t)(DAC_TIM2_FREQ_SINE/freq);
 800121e:	eec7 7a00 	vdiv.f32	s15, s14, s0
		__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001222:	6811      	ldr	r1, [r2, #0]
		uint32_t arr = (uint32_t)(DAC_TIM2_FREQ_SINE/freq);
 8001224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001228:	edc1 7a0b 	vstr	s15, [r1, #44]	; 0x2c
 800122c:	edc2 7a03 	vstr	s15, [r2, #12]
	}
}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	48c65d40 	.word	0x48c65d40
 8001238:	20007820 	.word	0x20007820

0800123c <ASD_CORE_asyncUpdate>:
void ASD_CORE_asyncUpdate() {
 800123c:	b508      	push	{r3, lr}
	if(_swipesCount != 0) {
 800123e:	4b11      	ldr	r3, [pc, #68]	; (8001284 <ASD_CORE_asyncUpdate+0x48>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	b1c3      	cbz	r3, 8001276 <ASD_CORE_asyncUpdate+0x3a>
		if(_swipeNextCounter > 10) {
 8001244:	4810      	ldr	r0, [pc, #64]	; (8001288 <ASD_CORE_asyncUpdate+0x4c>)
 8001246:	6803      	ldr	r3, [r0, #0]
 8001248:	2b0a      	cmp	r3, #10
 800124a:	dd11      	ble.n	8001270 <ASD_CORE_asyncUpdate+0x34>
			if(_swipeCurrentFreq >= SWIPE_STEPS) {
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <ASD_CORE_asyncUpdate+0x50>)
 800124e:	6819      	ldr	r1, [r3, #0]
			_swipeNextCounter = 0;
 8001250:	2200      	movs	r2, #0
			if(_swipeCurrentFreq >= SWIPE_STEPS) {
 8001252:	2931      	cmp	r1, #49	; 0x31
				_swipeCurrentFreq = 0;
 8001254:	bfc8      	it	gt
 8001256:	601a      	strgt	r2, [r3, #0]
			ASD_CORE_setGeneratorFrequency(SWIPE_FREQS[_swipeCurrentFreq]);
 8001258:	6819      	ldr	r1, [r3, #0]
			_swipeNextCounter = 0;
 800125a:	6002      	str	r2, [r0, #0]
			ASD_CORE_setGeneratorFrequency(SWIPE_FREQS[_swipeCurrentFreq]);
 800125c:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <ASD_CORE_asyncUpdate+0x54>)
 800125e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001262:	ed92 0a00 	vldr	s0, [r2]
 8001266:	f7ff ffcb 	bl	8001200 <ASD_CORE_setGeneratorFrequency>
			_swipeCurrentFreq++;
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	3201      	adds	r2, #1
 800126e:	601a      	str	r2, [r3, #0]
		_swipeNextCounter++;
 8001270:	6803      	ldr	r3, [r0, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	6003      	str	r3, [r0, #0]
}
 8001276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_GPIO_TogglePin(SWIPE_NEXT_GPIO_Port, SWIPE_NEXT_Pin);
 800127a:	4806      	ldr	r0, [pc, #24]	; (8001294 <ASD_CORE_asyncUpdate+0x58>)
 800127c:	2101      	movs	r1, #1
 800127e:	f001 bd50 	b.w	8002d22 <HAL_GPIO_TogglePin>
 8001282:	bf00      	nop
 8001284:	200002ec 	.word	0x200002ec
 8001288:	200002e8 	.word	0x200002e8
 800128c:	200002e4 	.word	0x200002e4
 8001290:	08007da8 	.word	0x08007da8
 8001294:	40020400 	.word	0x40020400

08001298 <ASD_CORE_setSwipe>:

/* Not working, I don't know why. Toggle signal is uneven on oscilloscope */
void ASD_CORE_setSwipe(int swipesCount) {
	_swipesCount = swipesCount;
 8001298:	4b01      	ldr	r3, [pc, #4]	; (80012a0 <ASD_CORE_setSwipe+0x8>)
 800129a:	6018      	str	r0, [r3, #0]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200002ec 	.word	0x200002ec

080012a4 <ASD_CORE_selectSignalSource>:

void ASD_CORE_selectSignalSource(source_t source) {
	//todo some relay to switch signal to ADC
}
 80012a4:	4770      	bx	lr

080012a6 <hsv2rgb_raw_C>:
    uint8_t value = APPLY_DIMMING( hsv->val);
    uint8_t saturation = hsv->sat;

    // The brightness floor is minimum number that all of
    // R, G, and B will be set to.
    uint8_t invsat = APPLY_DIMMING( 255 - saturation);
 80012a6:	7843      	ldrb	r3, [r0, #1]
{
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t invsat = APPLY_DIMMING( 255 - saturation);
 80012aa:	43db      	mvns	r3, r3
    uint8_t value = APPLY_DIMMING( hsv->val);
 80012ac:	7887      	ldrb	r7, [r0, #2]
    // create the specific hue desired.
    uint8_t color_amplitude = value - brightness_floor;

    // Figure out which section of the hue wheel we're in,
    // and how far offset we are withing that section
    uint8_t section = hsv->hue / HSV_SECTION_3; // 0..2
 80012ae:	7805      	ldrb	r5, [r0, #0]
    uint8_t brightness_floor = (value * invsat) / 256;
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	fb13 f407 	smulbb	r4, r3, r7
    uint8_t offset = hsv->hue % HSV_SECTION_3;  // 0..63
 80012b6:	f005 023f 	and.w	r2, r5, #63	; 0x3f
    uint8_t color_amplitude = value - brightness_floor;
 80012ba:	eba7 2714 	sub.w	r7, r7, r4, lsr #8

    uint8_t rampup = offset; // 0..63
    uint8_t rampdown = (HSV_SECTION_3 - 1) - offset; // 63..0
 80012be:	f1c2 033f 	rsb	r3, r2, #63	; 0x3f
    uint8_t color_amplitude = value - brightness_floor;
 80012c2:	b2ff      	uxtb	r7, r7

    //  //rampdown *= 4; // 0..252

    // compute color-amplitude-scaled-down versions of rampup and rampdown
    uint8_t rampup_amp_adj   = (rampup   * color_amplitude) / (256 / 4);
    uint8_t rampdown_amp_adj = (rampdown * color_amplitude) / (256 / 4);
 80012c4:	b2db      	uxtb	r3, r3
    uint8_t rampup_amp_adj   = (rampup   * color_amplitude) / (256 / 4);
 80012c6:	fb12 f007 	smulbb	r0, r2, r7
    uint8_t rampdown_amp_adj = (rampdown * color_amplitude) / (256 / 4);
 80012ca:	fb13 f307 	smulbb	r3, r3, r7
    uint8_t rampup_amp_adj   = (rampup   * color_amplitude) / (256 / 4);
 80012ce:	1180      	asrs	r0, r0, #6
    uint8_t rampdown_amp_adj = (rampdown * color_amplitude) / (256 / 4);
 80012d0:	119b      	asrs	r3, r3, #6

    // add brightness_floor offset to everything
    uint8_t rampup_adj_with_floor   = rampup_amp_adj   + brightness_floor;
 80012d2:	eb00 2014 	add.w	r0, r0, r4, lsr #8
    uint8_t rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor;
 80012d6:	eb03 2314 	add.w	r3, r3, r4, lsr #8


    if( section ) {
 80012da:	2d3f      	cmp	r5, #63	; 0x3f
    uint8_t brightness_floor = (value * invsat) / 256;
 80012dc:	ea4f 2614 	mov.w	r6, r4, lsr #8
    uint8_t rampup_adj_with_floor   = rampup_amp_adj   + brightness_floor;
 80012e0:	b2c0      	uxtb	r0, r0
    uint8_t rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor;
 80012e2:	b2db      	uxtb	r3, r3
    if( section ) {
 80012e4:	d90a      	bls.n	80012fc <hsv2rgb_raw_C+0x56>
        if( section == 1) {
 80012e6:	3d40      	subs	r5, #64	; 0x40
 80012e8:	2d3f      	cmp	r5, #63	; 0x3f
            // section 1: 0x40..0x7F
            rgb->r = brightness_floor;
 80012ea:	bf9d      	ittte	ls
 80012ec:	700e      	strbls	r6, [r1, #0]
            rgb->g = rampdown_adj_with_floor;
 80012ee:	704b      	strbls	r3, [r1, #1]
            rgb->b = rampup_adj_with_floor;
 80012f0:	7088      	strbls	r0, [r1, #2]
        } else {
            // section 2; 0x80..0xBF
            rgb->r = rampup_adj_with_floor;
 80012f2:	7008      	strbhi	r0, [r1, #0]
            rgb->g = brightness_floor;
 80012f4:	bf84      	itt	hi
 80012f6:	704e      	strbhi	r6, [r1, #1]
            rgb->b = rampdown_adj_with_floor;
 80012f8:	708b      	strbhi	r3, [r1, #2]
        // section 0: 0x00..0x3F
        rgb->r = rampdown_adj_with_floor;
        rgb->g = rampup_adj_with_floor;
        rgb->b = brightness_floor;
    }
}
 80012fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rgb->r = rampdown_adj_with_floor;
 80012fc:	700b      	strb	r3, [r1, #0]
        rgb->g = rampup_adj_with_floor;
 80012fe:	7048      	strb	r0, [r1, #1]
        rgb->b = brightness_floor;
 8001300:	708e      	strb	r6, [r1, #2]
}
 8001302:	e7fa      	b.n	80012fa <hsv2rgb_raw_C+0x54>

08001304 <ASD_DISP_setPixel>:
//	rgb_data.red += (uint8_t) (fM * 255);
//	rgb_data.green += (uint8_t) (fM * 255);
//	rgb_data.blue += (uint8_t) (fM * 255);
//}

void ASD_DISP_setPixel(int x, int y, uint8_t hue, uint8_t saturation, uint8_t value) {
 8001304:	b510      	push	{r4, lr}
	x = BANDS_COUNT - x - 1;
 8001306:	f1c0 0412 	rsb	r4, r0, #18
	y = (x%2?DISPLAY_HEIGHT-y-1:y);
 800130a:	07c0      	lsls	r0, r0, #31
 800130c:	bf48      	it	mi
 800130e:	f1c1 0114 	rsbmi	r1, r1, #20
	int idx = y + x * DISPLAY_HEIGHT;
 8001312:	2015      	movs	r0, #21
 8001314:	fb00 1104 	mla	r1, r0, r4, r1

	if(idx > 399)
 8001318:	f5b1 7fc8 	cmp.w	r1, #400	; 0x190
 800131c:	da08      	bge.n	8001330 <ASD_DISP_setPixel+0x2c>
		return;

	_draw_hsv_buffer[idx].hue = hue;
 800131e:	4c05      	ldr	r4, [pc, #20]	; (8001334 <ASD_DISP_setPixel+0x30>)
 8001320:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001324:	1860      	adds	r0, r4, r1
 8001326:	5462      	strb	r2, [r4, r1]
	_draw_hsv_buffer[idx].saturation = saturation;
 8001328:	7043      	strb	r3, [r0, #1]
	_draw_hsv_buffer[idx].value = value;
 800132a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800132e:	7083      	strb	r3, [r0, #2]
}
 8001330:	bd10      	pop	{r4, pc}
 8001332:	bf00      	nop
 8001334:	20000424 	.word	0x20000424

08001338 <ASD_DISP_prepare>:

void ASD_DISP_prepare() {
 8001338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Clear transmit buffer */
	for(int i = 0; i < 1245; i++)
		_transmit_buffer[i] = 0;
 800133c:	4819      	ldr	r0, [pc, #100]	; (80013a4 <ASD_DISP_prepare+0x6c>)
 800133e:	4c19      	ldr	r4, [pc, #100]	; (80013a4 <ASD_DISP_prepare+0x6c>)
//
	for(int pixel_idx = 0; pixel_idx < 399; pixel_idx++) {
		hsvData = _draw_hsv_buffer[pixel_idx];
 8001340:	4f19      	ldr	r7, [pc, #100]	; (80013a8 <ASD_DISP_prepare+0x70>)
 8001342:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80013b4 <ASD_DISP_prepare+0x7c>
		hsv2rgb_raw_C(&hsvData, &rgbData);
 8001346:	4e19      	ldr	r6, [pc, #100]	; (80013ac <ASD_DISP_prepare+0x74>)
		_transmit_buffer[i] = 0;
 8001348:	f241 3274 	movw	r2, #4980	; 0x1374
 800134c:	2100      	movs	r1, #0
 800134e:	f003 fef7 	bl	8005140 <memset>
 8001352:	2500      	movs	r5, #0
		hsvData = _draw_hsv_buffer[pixel_idx];
 8001354:	eb08 0305 	add.w	r3, r8, r5
 8001358:	f838 2005 	ldrh.w	r2, [r8, r5]
 800135c:	789b      	ldrb	r3, [r3, #2]
		hsv2rgb_raw_C(&hsvData, &rgbData);
 800135e:	4913      	ldr	r1, [pc, #76]	; (80013ac <ASD_DISP_prepare+0x74>)
 8001360:	4811      	ldr	r0, [pc, #68]	; (80013a8 <ASD_DISP_prepare+0x70>)
		hsvData = _draw_hsv_buffer[pixel_idx];
 8001362:	803a      	strh	r2, [r7, #0]
 8001364:	70bb      	strb	r3, [r7, #2]
		hsv2rgb_raw_C(&hsvData, &rgbData);
 8001366:	f7ff ff9e 	bl	80012a6 <hsv2rgb_raw_C>
//		//convert rgb to protocol data each pixel send as 3xuint32_t
		int green_transmit_data_idx = pixel_idx * 3 + 0;
		int red_transmit_data_idx   = pixel_idx * 3 + 1;
		int blue_transmit_data_idx  = pixel_idx * 3 + 2;
//
		_transmit_buffer[green_transmit_data_idx] |=  COLOR_LUT[rgbData.g];
 800136a:	4a11      	ldr	r2, [pc, #68]	; (80013b0 <ASD_DISP_prepare+0x78>)
 800136c:	7871      	ldrb	r1, [r6, #1]
 800136e:	6823      	ldr	r3, [r4, #0]
 8001370:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001374:	430b      	orrs	r3, r1
		_transmit_buffer[red_transmit_data_idx]   |=  COLOR_LUT[rgbData.r];
 8001376:	7831      	ldrb	r1, [r6, #0]
		_transmit_buffer[green_transmit_data_idx] |=  COLOR_LUT[rgbData.g];
 8001378:	6023      	str	r3, [r4, #0]
		_transmit_buffer[red_transmit_data_idx]   |=  COLOR_LUT[rgbData.r];
 800137a:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800137e:	6863      	ldr	r3, [r4, #4]
 8001380:	430b      	orrs	r3, r1
		_transmit_buffer[blue_transmit_data_idx]  |=  COLOR_LUT[rgbData.b];
 8001382:	78b1      	ldrb	r1, [r6, #2]
		_transmit_buffer[red_transmit_data_idx]   |=  COLOR_LUT[rgbData.r];
 8001384:	6063      	str	r3, [r4, #4]
		_transmit_buffer[blue_transmit_data_idx]  |=  COLOR_LUT[rgbData.b];
 8001386:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800138a:	68a3      	ldr	r3, [r4, #8]
 800138c:	4313      	orrs	r3, r2
 800138e:	60a3      	str	r3, [r4, #8]
	for(int pixel_idx = 0; pixel_idx < 399; pixel_idx++) {
 8001390:	3503      	adds	r5, #3
 8001392:	f240 43ad 	movw	r3, #1197	; 0x4ad
 8001396:	429d      	cmp	r5, r3
 8001398:	f104 040c 	add.w	r4, r4, #12
 800139c:	d1da      	bne.n	8001354 <ASD_DISP_prepare+0x1c>
	}
//	//RES always zeros
}
 800139e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a2:	bf00      	nop
 80013a4:	200008d8 	.word	0x200008d8
 80013a8:	20001c4c 	.word	0x20001c4c
 80013ac:	20001c4f 	.word	0x20001c4f
 80013b0:	08007e70 	.word	0x08007e70
 80013b4:	20000424 	.word	0x20000424

080013b8 <ASD_DISP_render>:

void ASD_DISP_render() {
 80013b8:	b508      	push	{r3, lr}
	if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_BUSY)
 80013ba:	4807      	ldr	r0, [pc, #28]	; (80013d8 <ASD_DISP_render+0x20>)
 80013bc:	f002 f914 	bl	80035e8 <HAL_SPI_GetState>
 80013c0:	2802      	cmp	r0, #2
 80013c2:	d007      	beq.n	80013d4 <ASD_DISP_render+0x1c>
		HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)(_transmit_buffer), 4980);
}
 80013c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)(_transmit_buffer), 4980);
 80013c8:	4904      	ldr	r1, [pc, #16]	; (80013dc <ASD_DISP_render+0x24>)
 80013ca:	4803      	ldr	r0, [pc, #12]	; (80013d8 <ASD_DISP_render+0x20>)
 80013cc:	f241 3274 	movw	r2, #4980	; 0x1374
 80013d0:	f002 b858 	b.w	8003484 <HAL_SPI_Transmit_DMA>
}
 80013d4:	bd08      	pop	{r3, pc}
 80013d6:	bf00      	nop
 80013d8:	200077c4 	.word	0x200077c4
 80013dc:	200008d8 	.word	0x200008d8

080013e0 <ASD_DISP_setMaxBrightness>:

void ASD_DISP_setMaxBrightness(float32_t brightness) {
	_maxBrightness = brightness;
 80013e0:	4b01      	ldr	r3, [pc, #4]	; (80013e8 <ASD_DISP_setMaxBrightness+0x8>)
 80013e2:	ed83 0a00 	vstr	s0, [r3]
}
 80013e6:	4770      	bx	lr
 80013e8:	200008d4 	.word	0x200008d4

080013ec <ASD_FFT_init>:
float32_t bounds_acceleration[BANDS_COUNT];


void ASD_FFT_init() {
	/* Key points used in double buffering */
	_keySamples[0] = (uint16_t *)(&_samplesBuffer[0]);
 80013ec:	490f      	ldr	r1, [pc, #60]	; (800142c <ASD_FFT_init+0x40>)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <ASD_FFT_init+0x44>)
	_keySamples[1] = (uint16_t *)(&_samplesBuffer[FFT_SAMPLES_COUNT]);
 80013f0:	f501 6200 	add.w	r2, r1, #2048	; 0x800
	_keySamples[0] = (uint16_t *)(&_samplesBuffer[0]);
 80013f4:	6019      	str	r1, [r3, #0]
	_keySamples[1] = (uint16_t *)(&_samplesBuffer[FFT_SAMPLES_COUNT]);
 80013f6:	605a      	str	r2, [r3, #4]
	_samplesBufferIndex = 1;
 80013f8:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <ASD_FFT_init+0x48>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

	_keyMagnitudes[0] = (float32_t *)(&_magnitudes[0]);
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <ASD_FFT_init+0x4c>)
 8001400:	4b0e      	ldr	r3, [pc, #56]	; (800143c <ASD_FFT_init+0x50>)
 8001402:	6013      	str	r3, [r2, #0]
	_keyMagnitudes[1] = (float32_t *)(&_magnitudes[FFT_SAMPLES_COUNT]);
 8001404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001408:	6053      	str	r3, [r2, #4]
	_magnitudesBufferIndex = 0;
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <ASD_FFT_init+0x54>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]

	/* Preset samples of test signal. 2x1024 samples for 1024FFT feed */
	for(int i = 0; i < 2048; i++)
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <ASD_FFT_init+0x58>)
		_samplesBuffer[i] = ADC_SAMPLES[i];
 8001412:	f833 0b02 	ldrh.w	r0, [r3], #2
 8001416:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
	for(int i = 0; i < 2048; i++)
 800141a:	3201      	adds	r2, #1
 800141c:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001420:	d1f7      	bne.n	8001412 <ASD_FFT_init+0x26>

	/* Use _samplesBuffer_hole to use test data */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)_samplesBuffer, FFT_SAMPLES_COUNT * 2);
 8001422:	4902      	ldr	r1, [pc, #8]	; (800142c <ASD_FFT_init+0x40>)
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <ASD_FFT_init+0x5c>)
 8001426:	f000 beed 	b.w	8002204 <HAL_ADC_Start_DMA>
 800142a:	bf00      	nop
 800142c:	20005cc0 	.word	0x20005cc0
 8001430:	20001cb4 	.word	0x20001cb4
 8001434:	20000004 	.word	0x20000004
 8001438:	20001cac 	.word	0x20001cac
 800143c:	20001cbc 	.word	0x20001cbc
 8001440:	20003cbc 	.word	0x20003cbc
 8001444:	08008270 	.word	0x08008270
 8001448:	20007648 	.word	0x20007648

0800144c <ASD_FFT_toggleBuffers>:
}


void ASD_FFT_toggleBuffers() {
	/* Toggle buffers */
	_samplesBufferIndex ^= 1;
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <ASD_FFT_toggleBuffers+0x2c>)
 800144e:	6813      	ldr	r3, [r2, #0]
 8001450:	f083 0301 	eor.w	r3, r3, #1
 8001454:	6013      	str	r3, [r2, #0]
	_selectedSamplesBuffer = _keySamples[_samplesBufferIndex];
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <ASD_FFT_toggleBuffers+0x30>)
 8001458:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <ASD_FFT_toggleBuffers+0x34>)
 800145e:	601a      	str	r2, [r3, #0]

	_magnitudesBufferIndex ^= 1;
 8001460:	4a08      	ldr	r2, [pc, #32]	; (8001484 <ASD_FFT_toggleBuffers+0x38>)
 8001462:	6813      	ldr	r3, [r2, #0]
 8001464:	f083 0301 	eor.w	r3, r3, #1
 8001468:	6013      	str	r3, [r2, #0]
	_selectedMagnitudes = _keyMagnitudes[_magnitudesBufferIndex];
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <ASD_FFT_toggleBuffers+0x3c>)
 800146c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <ASD_FFT_toggleBuffers+0x40>)
 8001472:	601a      	str	r2, [r3, #0]
}
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	20000004 	.word	0x20000004
 800147c:	20001cb4 	.word	0x20001cb4
 8001480:	20006cc4 	.word	0x20006cc4
 8001484:	20003cbc 	.word	0x20003cbc
 8001488:	20001cac 	.word	0x20001cac
 800148c:	20006cc0 	.word	0x20006cc0

08001490 <ASD_FFT_evalFFT>:

float32_t* ASD_FFT_evalFFT(float32_t* boundHeights) {
 8001490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001492:	4b4e      	ldr	r3, [pc, #312]	; (80015cc <ASD_FFT_evalFFT+0x13c>)
 8001494:	ed2d 8b02 	vpush	{d8}

	/* Image part */
	for(int i = 1; i < FFT_SAMPLES_COUNT * 2; i+=2)
		_processingSamples[i] = 0.0;
 8001498:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 80015d0 <ASD_FFT_evalFFT+0x140>
float32_t* ASD_FFT_evalFFT(float32_t* boundHeights) {
 800149c:	4605      	mov	r5, r0
 800149e:	4619      	mov	r1, r3
	for(int i = 1; i < FFT_SAMPLES_COUNT * 2; i+=2)
 80014a0:	2201      	movs	r2, #1
 80014a2:	f640 0001 	movw	r0, #2049	; 0x801
 80014a6:	3202      	adds	r2, #2
 80014a8:	4282      	cmp	r2, r0
		_processingSamples[i] = 0.0;
 80014aa:	ed81 8a01 	vstr	s16, [r1, #4]
	for(int i = 1; i < FFT_SAMPLES_COUNT * 2; i+=2)
 80014ae:	f101 0108 	add.w	r1, r1, #8
 80014b2:	d1f8      	bne.n	80014a6 <ASD_FFT_evalFFT+0x16>

	/* Real part */
	mean = 0.0;
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
		float32_t smple = (float32_t)(_selectedSamplesBuffer[i/2]) / 2048.0 ;
 80014b4:	4a47      	ldr	r2, [pc, #284]	; (80015d4 <ASD_FFT_evalFFT+0x144>)
 80014b6:	4945      	ldr	r1, [pc, #276]	; (80015cc <ASD_FFT_evalFFT+0x13c>)
 80014b8:	eddf 7a45 	vldr	s15, [pc, #276]	; 80015d0 <ASD_FFT_evalFFT+0x140>
 80014bc:	eddf 6a46 	vldr	s13, [pc, #280]	; 80015d8 <ASD_FFT_evalFFT+0x148>
 80014c0:	6810      	ldr	r0, [r2, #0]
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
 80014c2:	2200      	movs	r2, #0
		float32_t smple = (float32_t)(_selectedSamplesBuffer[i/2]) / 2048.0 ;
 80014c4:	1054      	asrs	r4, r2, #1
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
 80014c6:	3202      	adds	r2, #2
		float32_t smple = (float32_t)(_selectedSamplesBuffer[i/2]) / 2048.0 ;
 80014c8:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 80014cc:	ee07 4a10 	vmov	s14, r4
 80014d0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		_processingSamples[i] = smple;
 80014d4:	460c      	mov	r4, r1
		float32_t smple = (float32_t)(_selectedSamplesBuffer[i/2]) / 2048.0 ;
 80014d6:	ee27 7a26 	vmul.f32	s14, s14, s13
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
 80014da:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
		mean += smple;
 80014de:	ee77 7a87 	vadd.f32	s15, s15, s14
		_processingSamples[i] = smple;
 80014e2:	f101 0108 	add.w	r1, r1, #8
 80014e6:	ed84 7a00 	vstr	s14, [r4]
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
 80014ea:	d1eb      	bne.n	80014c4 <ASD_FFT_evalFFT+0x34>
	}
	mean /= FFT_SAMPLES_COUNT;
 80014ec:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80015dc <ASD_FFT_evalFFT+0x14c>
 80014f0:	4a3b      	ldr	r2, [pc, #236]	; (80015e0 <ASD_FFT_evalFFT+0x150>)
 80014f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f6:	edc2 7a00 	vstr	s15, [r2]

	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2)
 80014fa:	2200      	movs	r2, #0
		_processingSamples[i] -= mean;
 80014fc:	ed93 7a00 	vldr	s14, [r3]
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2)
 8001500:	3202      	adds	r2, #2
		_processingSamples[i] -= mean;
 8001502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001506:	4619      	mov	r1, r3
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2)
 8001508:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
		_processingSamples[i] -= mean;
 800150c:	f103 0308 	add.w	r3, r3, #8
 8001510:	ed81 7a00 	vstr	s14, [r1]
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2)
 8001514:	d1f2      	bne.n	80014fc <ASD_FFT_evalFFT+0x6c>

	/* Magnitudes */
	for(int i = 0; i < FFT_SAMPLES_COUNT; i++)
		_selectedMagnitudes[i] = 0.0;
 8001516:	4c33      	ldr	r4, [pc, #204]	; (80015e4 <ASD_FFT_evalFFT+0x154>)
 8001518:	4e33      	ldr	r6, [pc, #204]	; (80015e8 <ASD_FFT_evalFFT+0x158>)
 800151a:	6820      	ldr	r0, [r4, #0]
 800151c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001520:	2100      	movs	r1, #0
 8001522:	f003 fe0d 	bl	8005140 <memset>

	// 1024, 1024*2, 0, 1
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, _processingSamples, 0, 1);
 8001526:	2301      	movs	r3, #1
 8001528:	4928      	ldr	r1, [pc, #160]	; (80015cc <ASD_FFT_evalFFT+0x13c>)
 800152a:	4830      	ldr	r0, [pc, #192]	; (80015ec <ASD_FFT_evalFFT+0x15c>)
 800152c:	2200      	movs	r2, #0
 800152e:	f003 f97b 	bl	8004828 <arm_cfft_f32>

	// 1024*2, 1024, 1024
	arm_cmplx_mag_f32(_processingSamples, _selectedMagnitudes, FFT_SAMPLES_COUNT);
 8001532:	6821      	ldr	r1, [r4, #0]
 8001534:	4825      	ldr	r0, [pc, #148]	; (80015cc <ASD_FFT_evalFFT+0x13c>)
 8001536:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153a:	f003 f9ef 	bl	800491c <arm_cmplx_mag_f32>

	arm_max_f32(_selectedMagnitudes, FFT_SAMPLES_COUNT, &_boundsMaxHeight, &_boundsMaxHeightIndex);
 800153e:	4b2c      	ldr	r3, [pc, #176]	; (80015f0 <ASD_FFT_evalFFT+0x160>)
 8001540:	4a2c      	ldr	r2, [pc, #176]	; (80015f4 <ASD_FFT_evalFFT+0x164>)
 8001542:	6820      	ldr	r0, [r4, #0]
 8001544:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001548:	f002 fdd8 	bl	80040fc <arm_max_f32>
	//efective magnitudes: fft_magnitudes.length / 2. For 1024 samples it is 512. Use this number in bounds
	for(int i = 0; i < BINS_COUNT; i++)
 800154c:	6823      	ldr	r3, [r4, #0]
		_usableMagnitudes[i] = 2.0/FFT_SAMPLES_COUNT * _selectedMagnitudes[i];
 800154e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80015f8 <ASD_FFT_evalFFT+0x168>
 8001552:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001556:	4632      	mov	r2, r6
 8001558:	ecf3 7a01 	vldmia	r3!, {s15}
 800155c:	ee67 7a87 	vmul.f32	s15, s15, s14
	for(int i = 0; i < BINS_COUNT; i++)
 8001560:	4299      	cmp	r1, r3
		_usableMagnitudes[i] = 2.0/FFT_SAMPLES_COUNT * _selectedMagnitudes[i];
 8001562:	ece2 7a01 	vstmia	r2!, {s15}
	for(int i = 0; i < BINS_COUNT; i++)
 8001566:	d1f7      	bne.n	8001558 <ASD_FFT_evalFFT+0xc8>
	_currentAveragingIndex++;
	if(_currentAveragingIndex >= AVERAGING_COUNT)
		_currentAveragingIndex = 0;

	for(int i = 0; i < BANDS_COUNT; i++)
		_boundsHeightsAveraging[i + BANDS_COUNT * _currentAveragingIndex] = 0;
 8001568:	4f24      	ldr	r7, [pc, #144]	; (80015fc <ASD_FFT_evalFFT+0x16c>)
		_currentAveragingIndex = 0;
 800156a:	4b25      	ldr	r3, [pc, #148]	; (8001600 <ASD_FFT_evalFFT+0x170>)
 800156c:	2400      	movs	r4, #0
		_boundsHeightsAveraging[i + BANDS_COUNT * _currentAveragingIndex] = 0;
 800156e:	224c      	movs	r2, #76	; 0x4c
 8001570:	4621      	mov	r1, r4
 8001572:	4638      	mov	r0, r7
		_currentAveragingIndex = 0;
 8001574:	801c      	strh	r4, [r3, #0]
		_boundsHeightsAveraging[i + BANDS_COUNT * _currentAveragingIndex] = 0;
 8001576:	f003 fde3 	bl	8005140 <memset>

	for(int i = 0; i < BINS_COUNT; i++) {
		/* Nosie removal, 0.01 should be fine */
		float32_t threshold = 0.005;//0.075*(BINS_COUNT-i-1)/BINS_COUNT;
		if(_usableMagnitudes[i] > threshold)
 800157a:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001604 <ASD_FFT_evalFFT+0x174>
			_boundsHeightsAveraging[BINS_IDXS[i] + BANDS_COUNT * _currentAveragingIndex] += _usableMagnitudes[i];
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <ASD_FFT_evalFFT+0x178>)
	for(int i = 0; i < BINS_COUNT; i++) {
 8001580:	4621      	mov	r1, r4
		if(_usableMagnitudes[i] > threshold)
 8001582:	ecb6 7a01 	vldmia	r6!, {s14}
 8001586:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800158a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800158e:	dd09      	ble.n	80015a4 <ASD_FFT_evalFFT+0x114>
			_boundsHeightsAveraging[BINS_IDXS[i] + BANDS_COUNT * _currentAveragingIndex] += _usableMagnitudes[i];
 8001590:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001594:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015a0:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < BINS_COUNT; i++) {
 80015a4:	3101      	adds	r1, #1
 80015a6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80015aa:	d1ea      	bne.n	8001582 <ASD_FFT_evalFFT+0xf2>
 80015ac:	4a13      	ldr	r2, [pc, #76]	; (80015fc <ASD_FFT_evalFFT+0x16c>)
 80015ae:	462b      	mov	r3, r5
 80015b0:	f105 014c 	add.w	r1, r5, #76	; 0x4c

	float32_t average = 0.0;
	for(int i = 0; i < BANDS_COUNT; i++) {
		average = 0.0;
		for(int j = 0; j < AVERAGING_COUNT; j++)
			average += _boundsHeightsAveraging[i + BANDS_COUNT * j];
 80015b4:	ecf2 7a01 	vldmia	r2!, {s15}
 80015b8:	ee77 7a88 	vadd.f32	s15, s15, s16
		boundHeights[i] = average / AVERAGING_COUNT;
 80015bc:	ece3 7a01 	vstmia	r3!, {s15}
	for(int i = 0; i < BANDS_COUNT; i++) {
 80015c0:	428b      	cmp	r3, r1
 80015c2:	d1f7      	bne.n	80015b4 <ASD_FFT_evalFFT+0x124>
	}

	return boundHeights;
}
 80015c4:	ecbd 8b02 	vpop	{d8}
 80015c8:	4628      	mov	r0, r5
 80015ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80015cc:	20003cc0 	.word	0x20003cc0
 80015d0:	00000000 	.word	0x00000000
 80015d4:	20006cc4 	.word	0x20006cc4
 80015d8:	3a000000 	.word	0x3a000000
 80015dc:	3a800000 	.word	0x3a800000
 80015e0:	20007644 	.word	0x20007644
 80015e4:	20006cc0 	.word	0x20006cc0
 80015e8:	20006cc8 	.word	0x20006cc8
 80015ec:	08009aa0 	.word	0x08009aa0
 80015f0:	20001ca4 	.word	0x20001ca4
 80015f4:	20001ca0 	.word	0x20001ca0
 80015f8:	3b000000 	.word	0x3b000000
 80015fc:	20001c54 	.word	0x20001c54
 8001600:	20001ca8 	.word	0x20001ca8
 8001604:	3ba3d70a 	.word	0x3ba3d70a
 8001608:	08009270 	.word	0x08009270

0800160c <ASD_FFT_evalDynamics>:

void ASD_FFT_evalDynamics(float32_t* boundHeights, bounds_t* bounds, float32_t dts) {
 800160c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001610:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80016b4 <ASD_FFT_evalDynamics+0xa8>
 8001614:	4d24      	ldr	r5, [pc, #144]	; (80016a8 <ASD_FFT_evalDynamics+0x9c>)
 8001616:	4f25      	ldr	r7, [pc, #148]	; (80016ac <ASD_FFT_evalDynamics+0xa0>)
 8001618:	ed2d 8b02 	vpush	{d8}
 800161c:	460e      	mov	r6, r1
 800161e:	eeb0 8a40 	vmov.f32	s16, s0
 8001622:	463a      	mov	r2, r7
 8001624:	4629      	mov	r1, r5
 8001626:	4644      	mov	r4, r8
 8001628:	2313      	movs	r3, #19
		//current ACCELERATION evaluated on previous values
		for(int i = 0; i < BANDS_COUNT; i++)
			bounds_acceleration[i] = (bounds_velocity[i] - bounds_last_velocity[i]) / dts;
 800162a:	ecb1 7a01 	vldmia	r1!, {s14}
 800162e:	ecf4 7a01 	vldmia	r4!, {s15}
 8001632:	ee77 7ac7 	vsub.f32	s15, s15, s14
		for(int i = 0; i < BANDS_COUNT; i++)
 8001636:	3b01      	subs	r3, #1
			bounds_acceleration[i] = (bounds_velocity[i] - bounds_last_velocity[i]) / dts;
 8001638:	ee87 7a88 	vdiv.f32	s14, s15, s16
 800163c:	eca2 7a01 	vstmia	r2!, {s14}
		for(int i = 0; i < BANDS_COUNT; i++)
 8001640:	d1f3      	bne.n	800162a <ASD_FFT_evalDynamics+0x1e>
 8001642:	491b      	ldr	r1, [pc, #108]	; (80016b0 <ASD_FFT_evalDynamics+0xa4>)
 8001644:	4a1b      	ldr	r2, [pc, #108]	; (80016b4 <ASD_FFT_evalDynamics+0xa8>)
 8001646:	4604      	mov	r4, r0
 8001648:	f100 094c 	add.w	r9, r0, #76	; 0x4c
 800164c:	4603      	mov	r3, r0

		//current VELOCITY evaluated on previous values and save discarded as last
		for(int i = 0; i < BANDS_COUNT; i++) {
			bounds_last_velocity[i] = bounds_velocity[i];
 800164e:	6810      	ldr	r0, [r2, #0]
 8001650:	f845 0b04 	str.w	r0, [r5], #4
			bounds_velocity[i] = (boundHeights[i] - bounds_last_heights[i]) / dts;
 8001654:	ecb1 7a01 	vldmia	r1!, {s14}
 8001658:	ecf3 7a01 	vldmia	r3!, {s15}
 800165c:	ee77 7ac7 	vsub.f32	s15, s15, s14
		for(int i = 0; i < BANDS_COUNT; i++) {
 8001660:	454b      	cmp	r3, r9
			bounds_velocity[i] = (boundHeights[i] - bounds_last_heights[i]) / dts;
 8001662:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8001666:	eca2 7a01 	vstmia	r2!, {s14}
		for(int i = 0; i < BANDS_COUNT; i++) {
 800166a:	d1f0      	bne.n	800164e <ASD_FFT_evalDynamics+0x42>
		}

		//current HEIGHT(POSITION) and save discarded as last
		for(int i = 0; i < BANDS_COUNT; i++) {
			bounds_last_heights[i] = bounds_heights[i];
 800166c:	4912      	ldr	r1, [pc, #72]	; (80016b8 <ASD_FFT_evalDynamics+0xac>)
 800166e:	4810      	ldr	r0, [pc, #64]	; (80016b0 <ASD_FFT_evalDynamics+0xa4>)
 8001670:	224c      	movs	r2, #76	; 0x4c
 8001672:	f003 fd57 	bl	8005124 <memcpy>
			bounds_heights[i] = 0;
 8001676:	4810      	ldr	r0, [pc, #64]	; (80016b8 <ASD_FFT_evalDynamics+0xac>)
 8001678:	224c      	movs	r2, #76	; 0x4c
 800167a:	2100      	movs	r1, #0
 800167c:	f003 fd60 	bl	8005140 <memset>
 8001680:	4633      	mov	r3, r6
		}

		for(int i = 0; i < BANDS_COUNT; i++) {
			bounds->heights[i] = boundHeights[i];
 8001682:	f854 2b04 	ldr.w	r2, [r4], #4
 8001686:	f843 2b04 	str.w	r2, [r3], #4
			bounds->velocities[i] = bounds_velocity[i];
 800168a:	f858 2b04 	ldr.w	r2, [r8], #4
 800168e:	649a      	str	r2, [r3, #72]	; 0x48
			bounds->accelerations[i] = bounds_acceleration[i];
 8001690:	f857 2b04 	ldr.w	r2, [r7], #4
 8001694:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		for(int i = 0; i < BANDS_COUNT; i++) {
 8001698:	454c      	cmp	r4, r9
 800169a:	d1f2      	bne.n	8001682 <ASD_FFT_evalDynamics+0x76>
		}
		bounds->dt_sec = dts;
 800169c:	ed86 8a39 	vstr	s16, [r6, #228]	; 0xe4
}
 80016a0:	ecbd 8b02 	vpop	{d8}
 80016a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016a8:	200075ac 	.word	0x200075ac
 80016ac:	200074c8 	.word	0x200074c8
 80016b0:	20007560 	.word	0x20007560
 80016b4:	200075f8 	.word	0x200075f8
 80016b8:	20007514 	.word	0x20007514

080016bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80016bc:	b530      	push	{r4, r5, lr}
 80016be:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c0:	2210      	movs	r2, #16
 80016c2:	2100      	movs	r1, #0
 80016c4:	4668      	mov	r0, sp
 80016c6:	f003 fd3b 	bl	8005140 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016ca:	4813      	ldr	r0, [pc, #76]	; (8001718 <MX_ADC1_Init+0x5c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80016cc:	4a13      	ldr	r2, [pc, #76]	; (800171c <MX_ADC1_Init+0x60>)
 80016ce:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d2:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016d4:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80016d6:	e9c0 2300 	strd	r2, r3, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <MX_ADC1_Init+0x64>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016dc:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016de:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016e0:	7605      	strb	r5, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e2:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016e8:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016ea:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016ec:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016ee:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016f2:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016f4:	f000 fce0 	bl	80020b8 <HAL_ADC_Init>
 80016f8:	b108      	cbz	r0, 80016fe <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80016fa:	f000 fa05 	bl	8001b08 <Error_Handler>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80016fe:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001700:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_ADC1_Init+0x5c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001702:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001704:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 8001706:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800170a:	f000 fe6d 	bl	80023e8 <HAL_ADC_ConfigChannel>
 800170e:	b108      	cbz	r0, 8001714 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 8001710:	f000 f9fa 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001714:	b005      	add	sp, #20
 8001716:	bd30      	pop	{r4, r5, pc}
 8001718:	20007648 	.word	0x20007648
 800171c:	40012000 	.word	0x40012000
 8001720:	0f000001 	.word	0x0f000001

08001724 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001724:	b570      	push	{r4, r5, r6, lr}
 8001726:	4606      	mov	r6, r0
 8001728:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172a:	2214      	movs	r2, #20
 800172c:	2100      	movs	r1, #0
 800172e:	a803      	add	r0, sp, #12
 8001730:	f003 fd06 	bl	8005140 <memset>
  if(adcHandle->Instance==ADC1)
 8001734:	6832      	ldr	r2, [r6, #0]
 8001736:	4b20      	ldr	r3, [pc, #128]	; (80017b8 <HAL_ADC_MspInit+0x94>)
 8001738:	429a      	cmp	r2, r3
 800173a:	d13a      	bne.n	80017b2 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800173c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001740:	2500      	movs	r5, #0
 8001742:	9501      	str	r5, [sp, #4]
 8001744:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001746:	481d      	ldr	r0, [pc, #116]	; (80017bc <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001748:	4c1d      	ldr	r4, [pc, #116]	; (80017c0 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 800174a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800174e:	645a      	str	r2, [r3, #68]	; 0x44
 8001750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001752:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001756:	9201      	str	r2, [sp, #4]
 8001758:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	9502      	str	r5, [sp, #8]
 800175c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	631a      	str	r2, [r3, #48]	; 0x30
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	9302      	str	r3, [sp, #8]
 800176c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800176e:	2201      	movs	r2, #1
 8001770:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001774:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f001 f9fa 	bl	8002b70 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800177e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001782:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001786:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800178a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800178e:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001792:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001796:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800179a:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800179c:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a0:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017a4:	f001 f816 	bl	80027d4 <HAL_DMA_Init>
 80017a8:	b108      	cbz	r0, 80017ae <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 80017aa:	f000 f9ad 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80017ae:	63b4      	str	r4, [r6, #56]	; 0x38
 80017b0:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80017b2:	b008      	add	sp, #32
 80017b4:	bd70      	pop	{r4, r5, r6, pc}
 80017b6:	bf00      	nop
 80017b8:	40012000 	.word	0x40012000
 80017bc:	40020000 	.word	0x40020000
 80017c0:	20007690 	.word	0x20007690
 80017c4:	40026410 	.word	0x40026410

080017c8 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 80017c8:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80017ca:	480c      	ldr	r0, [pc, #48]	; (80017fc <MX_DAC_Init+0x34>)
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <MX_DAC_Init+0x38>)
 80017ce:	6003      	str	r3, [r0, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 80017d0:	2400      	movs	r4, #0
 80017d2:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80017d6:	f000 ff09 	bl	80025ec <HAL_DAC_Init>
 80017da:	b108      	cbz	r0, 80017e0 <MX_DAC_Init+0x18>
  {
    Error_Handler();
 80017dc:	f000 f994 	bl	8001b08 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80017e0:	2324      	movs	r3, #36	; 0x24
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017e2:	4806      	ldr	r0, [pc, #24]	; (80017fc <MX_DAC_Init+0x34>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	4669      	mov	r1, sp
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80017e8:	e9cd 3400 	strd	r3, r4, [sp]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80017ec:	f000 ff9c 	bl	8002728 <HAL_DAC_ConfigChannel>
 80017f0:	b108      	cbz	r0, 80017f6 <MX_DAC_Init+0x2e>
  {
    Error_Handler();
 80017f2:	f000 f989 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80017f6:	b002      	add	sp, #8
 80017f8:	bd10      	pop	{r4, pc}
 80017fa:	bf00      	nop
 80017fc:	200076f0 	.word	0x200076f0
 8001800:	40007400 	.word	0x40007400

08001804 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001804:	b570      	push	{r4, r5, r6, lr}
 8001806:	4605      	mov	r5, r0
 8001808:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	2214      	movs	r2, #20
 800180c:	2100      	movs	r1, #0
 800180e:	a803      	add	r0, sp, #12
 8001810:	f003 fc96 	bl	8005140 <memset>
  if(dacHandle->Instance==DAC)
 8001814:	682a      	ldr	r2, [r5, #0]
 8001816:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_DAC_MspInit+0x98>)
 8001818:	429a      	cmp	r2, r3
 800181a:	d13d      	bne.n	8001898 <HAL_DAC_MspInit+0x94>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800181c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001820:	2600      	movs	r6, #0
 8001822:	9601      	str	r6, [sp, #4]
 8001824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	481e      	ldr	r0, [pc, #120]	; (80018a0 <HAL_DAC_MspInit+0x9c>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001828:	4c1e      	ldr	r4, [pc, #120]	; (80018a4 <HAL_DAC_MspInit+0xa0>)
    __HAL_RCC_DAC_CLK_ENABLE();
 800182a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
 8001830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001832:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001836:	9201      	str	r2, [sp, #4]
 8001838:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183a:	9602      	str	r6, [sp, #8]
 800183c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	9302      	str	r3, [sp, #8]
 800184c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2210      	movs	r2, #16
 8001850:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001854:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f001 f98a 	bl	8002b70 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800185c:	4912      	ldr	r1, [pc, #72]	; (80018a8 <HAL_DAC_MspInit+0xa4>)
 800185e:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8001862:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001866:	2340      	movs	r3, #64	; 0x40
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001868:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800186c:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001870:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001874:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001878:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 800187c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001880:	4620      	mov	r0, r4
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001882:	e9c4 c306 	strd	ip, r3, [r4, #24]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001886:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800188a:	f000 ffa3 	bl	80027d4 <HAL_DMA_Init>
 800188e:	b108      	cbz	r0, 8001894 <HAL_DAC_MspInit+0x90>
    {
      Error_Handler();
 8001890:	f000 f93a 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001894:	60ac      	str	r4, [r5, #8]
 8001896:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001898:	b008      	add	sp, #32
 800189a:	bd70      	pop	{r4, r5, r6, pc}
 800189c:	40007400 	.word	0x40007400
 80018a0:	40020000 	.word	0x40020000
 80018a4:	20007704 	.word	0x20007704
 80018a8:	40026088 	.word	0x40026088

080018ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80018ac:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80018ae:	4b18      	ldr	r3, [pc, #96]	; (8001910 <MX_DMA_Init+0x64>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	9200      	str	r2, [sp, #0]
 80018b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018b6:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 80018ba:	6319      	str	r1, [r3, #48]	; 0x30
 80018bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018be:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018c2:	9100      	str	r1, [sp, #0]
 80018c4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018c6:	9201      	str	r2, [sp, #4]
 80018c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018ca:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 80018ce:	6319      	str	r1, [r3, #48]	; 0x30
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018d6:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018d8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018da:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 80018dc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80018de:	f000 fe31 	bl	8002544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f000 fe60 	bl	80025a8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 80018e8:	2200      	movs	r2, #0
 80018ea:	2103      	movs	r1, #3
 80018ec:	2010      	movs	r0, #16
 80018ee:	f000 fe29 	bl	8002544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80018f2:	2010      	movs	r0, #16
 80018f4:	f000 fe58 	bl	80025a8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2102      	movs	r1, #2
 80018fc:	2038      	movs	r0, #56	; 0x38
 80018fe:	f000 fe21 	bl	8002544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001902:	2038      	movs	r0, #56	; 0x38

}
 8001904:	b003      	add	sp, #12
 8001906:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800190a:	f000 be4d 	b.w	80025a8 <HAL_NVIC_EnableIRQ>
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800

08001914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001916:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	2214      	movs	r2, #20
 800191a:	2100      	movs	r1, #0
 800191c:	a803      	add	r0, sp, #12
 800191e:	f003 fc0f 	bl	8005140 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	2400      	movs	r4, #0
 8001924:	4b1e      	ldr	r3, [pc, #120]	; (80019a0 <MX_GPIO_Init+0x8c>)
 8001926:	9400      	str	r4, [sp, #0]
 8001928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
 800192a:	4f1e      	ldr	r7, [pc, #120]	; (80019a4 <MX_GPIO_Init+0x90>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SWIPE_NEXT_GPIO_Port, SWIPE_NEXT_Pin, GPIO_PIN_RESET);
 800192c:	4e1e      	ldr	r6, [pc, #120]	; (80019a8 <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	f042 0204 	orr.w	r2, r2, #4
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
 8001934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001936:	f002 0204 	and.w	r2, r2, #4
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	9401      	str	r4, [sp, #4]
 8001940:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001942:	f042 0201 	orr.w	r2, r2, #1
 8001946:	631a      	str	r2, [r3, #48]	; 0x30
 8001948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800194a:	f002 0201 	and.w	r2, r2, #1
 800194e:	9201      	str	r2, [sp, #4]
 8001950:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	9402      	str	r4, [sp, #8]
 8001954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001956:	f042 0202 	orr.w	r2, r2, #2
 800195a:	631a      	str	r2, [r3, #48]	; 0x30
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
 8001964:	4622      	mov	r2, r4
 8001966:	4638      	mov	r0, r7
 8001968:	2101      	movs	r1, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800196a:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
 800196c:	f001 f9d4 	bl	8002d18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SWIPE_NEXT_GPIO_Port, SWIPE_NEXT_Pin, GPIO_PIN_RESET);
 8001970:	4622      	mov	r2, r4
 8001972:	4630      	mov	r0, r6
 8001974:	2101      	movs	r1, #1
 8001976:	f001 f9cf 	bl	8002d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BATCH_DONE_Pin;
 800197a:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(BATCH_DONE_GPIO_Port, &GPIO_InitStruct);
 800197c:	a903      	add	r1, sp, #12
 800197e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001980:	e9cd 5503 	strd	r5, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(BATCH_DONE_GPIO_Port, &GPIO_InitStruct);
 8001988:	f001 f8f2 	bl	8002b70 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SWIPE_NEXT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SWIPE_NEXT_GPIO_Port, &GPIO_InitStruct);
 800198c:	a903      	add	r1, sp, #12
 800198e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	e9cd 5503 	strd	r5, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(SWIPE_NEXT_GPIO_Port, &GPIO_InitStruct);
 8001998:	f001 f8ea 	bl	8002b70 <HAL_GPIO_Init>

}
 800199c:	b009      	add	sp, #36	; 0x24
 800199e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020400 	.word	0x40020400

080019ac <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80019ac:	b507      	push	{r0, r1, r2, lr}
  if (ch == '\n') {
 80019ae:	280a      	cmp	r0, #10
int __io_putchar(int ch) {
 80019b0:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 80019b2:	d102      	bne.n	80019ba <__io_putchar+0xe>
    __io_putchar('\r');
 80019b4:	200d      	movs	r0, #13
 80019b6:	f7ff fff9 	bl	80019ac <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80019ba:	f04f 33ff 	mov.w	r3, #4294967295
 80019be:	2201      	movs	r2, #1
 80019c0:	a901      	add	r1, sp, #4
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <__io_putchar+0x24>)
 80019c4:	f002 f992 	bl	8003cec <HAL_UART_Transmit>
  return 1;
}
 80019c8:	2001      	movs	r0, #1
 80019ca:	b003      	add	sp, #12
 80019cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80019d0:	200078f8 	.word	0x200078f8

080019d4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
  if (htim == &htim7) {
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80019d6:	4283      	cmp	r3, r0
 80019d8:	d101      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0xa>
	  //1ms timer
	  ASD_CORE_asyncUpdate();
 80019da:	f7ff bc2f 	b.w	800123c <ASD_CORE_asyncUpdate>
  }
}
 80019de:	4770      	bx	lr
 80019e0:	200078b0 	.word	0x200078b0

080019e4 <HAL_ADC_ConvCpltCallback>:
		ASD_CORE_processSignal();
		ASD_CORE_render();
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 80019e4:	b508      	push	{r3, lr}
	if(AdcHandle == &hadc1) {
 80019e6:	4b05      	ldr	r3, [pc, #20]	; (80019fc <HAL_ADC_ConvCpltCallback+0x18>)
 80019e8:	4283      	cmp	r3, r0
 80019ea:	d105      	bne.n	80019f8 <HAL_ADC_ConvCpltCallback+0x14>
		ASD_CORE_processSignal();
 80019ec:	f7ff fbc0 	bl	8001170 <ASD_CORE_processSignal>
		ASD_CORE_render();
	}
}
 80019f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ASD_CORE_render();
 80019f4:	f7ff bc02 	b.w	80011fc <ASD_CORE_render>
}
 80019f8:	bd08      	pop	{r3, pc}
 80019fa:	bf00      	nop
 80019fc:	20007648 	.word	0x20007648

08001a00 <HAL_ADC_ConvHalfCpltCallback>:
 8001a00:	f7ff bff0 	b.w	80019e4 <HAL_ADC_ConvCpltCallback>

08001a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a04:	b510      	push	{r4, lr}
 8001a06:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a08:	2214      	movs	r2, #20
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	a808      	add	r0, sp, #32
 8001a0e:	f003 fb97 	bl	8005140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a12:	2214      	movs	r2, #20
 8001a14:	2100      	movs	r1, #0
 8001a16:	a802      	add	r0, sp, #8
 8001a18:	f003 fb92 	bl	8005140 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <SystemClock_Config+0x9c>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	9200      	str	r2, [sp, #0]
 8001a22:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a24:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001a28:	6419      	str	r1, [r3, #64]	; 0x40
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a2c:	491d      	ldr	r1, [pc, #116]	; (8001aa4 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a36:	9201      	str	r2, [sp, #4]
 8001a38:	680b      	ldr	r3, [r1, #0]
 8001a3a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a42:	600b      	str	r3, [r1, #0]
 8001a44:	680b      	ldr	r3, [r1, #0]
 8001a46:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4e:	2101      	movs	r1, #1
 8001a50:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 104;
 8001a52:	2008      	movs	r0, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a54:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 104;
 8001a58:	2368      	movs	r3, #104	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a5a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 104;
 8001a5c:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a62:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a66:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a6a:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a6c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6e:	f001 fa65 	bl	8002f3c <HAL_RCC_OscConfig>
 8001a72:	b108      	cbz	r0, 8001a78 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a78:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a7a:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7e:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a80:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8001a84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a88:	2103      	movs	r1, #3
 8001a8a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a90:	f001 f950 	bl	8002d34 <HAL_RCC_ClockConfig>
 8001a94:	b108      	cbz	r0, 8001a9a <SystemClock_Config+0x96>
 8001a96:	b672      	cpsid	i
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <SystemClock_Config+0x94>
}
 8001a9a:	b014      	add	sp, #80	; 0x50
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40007000 	.word	0x40007000

08001aa8 <main>:
{
 8001aa8:	b508      	push	{r3, lr}
  HAL_Init();
 8001aaa:	f000 fac5 	bl	8002038 <HAL_Init>
  SystemClock_Config();
 8001aae:	f7ff ffa9 	bl	8001a04 <SystemClock_Config>
  MX_GPIO_Init();
 8001ab2:	f7ff ff2f 	bl	8001914 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab6:	f7ff fef9 	bl	80018ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001aba:	f000 fa15 	bl	8001ee8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001abe:	f7ff fdfd 	bl	80016bc <MX_ADC1_Init>
  MX_TIM6_Init();
 8001ac2:	f000 f989 	bl	8001dd8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001ac6:	f000 f9a9 	bl	8001e1c <MX_TIM7_Init>
  MX_DAC_Init();
 8001aca:	f7ff fe7d 	bl	80017c8 <MX_DAC_Init>
  MX_TIM2_Init();
 8001ace:	f000 f94f 	bl	8001d70 <MX_TIM2_Init>
  MX_SPI2_Init();
 8001ad2:	f000 f81b 	bl	8001b0c <MX_SPI2_Init>
  HAL_Delay(1000);
 8001ad6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ada:	f000 fad9 	bl	8002090 <HAL_Delay>
  ASD_CORE_init();
 8001ade:	f7ff fb1b 	bl	8001118 <ASD_CORE_init>
  ASD_CORE_setSwipe(0);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff fbd8 	bl	8001298 <ASD_CORE_setSwipe>
  ASD_CORE_selectSignalSource(SOURCE_AUX);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f7ff fbdb 	bl	80012a4 <ASD_CORE_selectSignalSource>
  ASD_DISP_setMaxBrightness(0.1);
 8001aee:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8001b00 <main+0x58>
 8001af2:	f7ff fc75 	bl	80013e0 <ASD_DISP_setMaxBrightness>
  printf("Loop started\n");
 8001af6:	4803      	ldr	r0, [pc, #12]	; (8001b04 <main+0x5c>)
 8001af8:	f004 f802 	bl	8005b00 <puts>
  while (1)
 8001afc:	e7fe      	b.n	8001afc <main+0x54>
 8001afe:	bf00      	nop
 8001b00:	3dcccccd 	.word	0x3dcccccd
 8001b04:	08009a70 	.word	0x08009a70

08001b08 <Error_Handler>:
 8001b08:	b672      	cpsid	i
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <Error_Handler+0x2>

08001b0c <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001b0c:	480e      	ldr	r0, [pc, #56]	; (8001b48 <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <MX_SPI2_Init+0x40>)
{
 8001b10:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b12:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001b16:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b1a:	2300      	movs	r3, #0
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b1c:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b20:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b24:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b28:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b2c:	2210      	movs	r2, #16
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b2e:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b30:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001b32:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 8001b36:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b38:	f001 fc48 	bl	80033cc <HAL_SPI_Init>
 8001b3c:	b118      	cbz	r0, 8001b46 <MX_SPI2_Init+0x3a>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001b42:	f7ff bfe1 	b.w	8001b08 <Error_Handler>
}
 8001b46:	bd08      	pop	{r3, pc}
 8001b48:	200077c4 	.word	0x200077c4
 8001b4c:	40003800 	.word	0x40003800

08001b50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b54:	4606      	mov	r6, r0
 8001b56:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b58:	2214      	movs	r2, #20
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	a803      	add	r0, sp, #12
 8001b5e:	f003 faef 	bl	8005140 <memset>
  if(spiHandle->Instance==SPI2)
 8001b62:	6832      	ldr	r2, [r6, #0]
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <HAL_SPI_MspInit+0xc0>)
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d14e      	bne.n	8001c08 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b6a:	2500      	movs	r5, #0
 8001b6c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001b70:	9500      	str	r5, [sp, #0]
 8001b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b74:	4827      	ldr	r0, [pc, #156]	; (8001c14 <HAL_SPI_MspInit+0xc4>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8001b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b7e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001b82:	9200      	str	r2, [sp, #0]
 8001b84:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	9501      	str	r5, [sp, #4]
 8001b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8a:	f042 0204 	orr.w	r2, r2, #4
 8001b8e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b92:	f002 0204 	and.w	r2, r2, #4
 8001b96:	9201      	str	r2, [sp, #4]
 8001b98:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	9502      	str	r5, [sp, #8]
 8001b9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b9e:	f042 0202 	orr.w	r2, r2, #2
 8001ba2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001bac:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bb0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001bb2:	2307      	movs	r3, #7
 8001bb4:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bb8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	e9cd 4403 	strd	r4, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001bbe:	e9cd 8306 	strd	r8, r3, [sp, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bc2:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc6:	f000 ffd3 	bl	8002b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bca:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	4812      	ldr	r0, [pc, #72]	; (8001c18 <HAL_SPI_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001bce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd0:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd2:	e9cd 7403 	strd	r7, r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd6:	e9cd 5805 	strd	r5, r8, [sp, #20]

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001bda:	4c10      	ldr	r4, [pc, #64]	; (8001c1c <HAL_SPI_MspInit+0xcc>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bdc:	f000 ffc8 	bl	8002b70 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <HAL_SPI_MspInit+0xd0>)
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001be2:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001be4:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be8:	2340      	movs	r3, #64	; 0x40
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bea:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bee:	e9c4 7504 	strd	r7, r5, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001bf2:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bf6:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001bfa:	f000 fdeb 	bl	80027d4 <HAL_DMA_Init>
 8001bfe:	b108      	cbz	r0, 8001c04 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8001c00:	f7ff ff82 	bl	8001b08 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8001c04:	64b4      	str	r4, [r6, #72]	; 0x48
 8001c06:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001c08:	b008      	add	sp, #32
 8001c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c0e:	bf00      	nop
 8001c10:	40003800 	.word	0x40003800
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020400 	.word	0x40020400
 8001c1c:	20007764 	.word	0x20007764
 8001c20:	40026070 	.word	0x40026070

08001c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_MspInit+0x34>)
 8001c28:	2100      	movs	r1, #0
 8001c2a:	9100      	str	r1, [sp, #0]
 8001c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
 8001c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c36:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001c3a:	9200      	str	r2, [sp, #0]
 8001c3c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c3e:	9101      	str	r1, [sp, #4]
 8001c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c42:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c52:	b002      	add	sp, #8
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40023800 	.word	0x40023800

08001c5c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <NMI_Handler>

08001c5e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <HardFault_Handler>

08001c60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler>

08001c62 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler>

08001c64 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler>

08001c66 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c66:	4770      	bx	lr

08001c68 <DebugMon_Handler>:
 8001c68:	4770      	bx	lr

08001c6a <PendSV_Handler>:
 8001c6a:	4770      	bx	lr

08001c6c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c6c:	f000 b9fe 	b.w	800206c <HAL_IncTick>

08001c70 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001c70:	4801      	ldr	r0, [pc, #4]	; (8001c78 <DMA1_Stream4_IRQHandler+0x8>)
 8001c72:	f000 bebf 	b.w	80029f4 <HAL_DMA_IRQHandler>
 8001c76:	bf00      	nop
 8001c78:	20007764 	.word	0x20007764

08001c7c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001c7c:	4801      	ldr	r0, [pc, #4]	; (8001c84 <DMA1_Stream5_IRQHandler+0x8>)
 8001c7e:	f000 beb9 	b.w	80029f4 <HAL_DMA_IRQHandler>
 8001c82:	bf00      	nop
 8001c84:	20007704 	.word	0x20007704

08001c88 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c88:	4801      	ldr	r0, [pc, #4]	; (8001c90 <USART2_IRQHandler+0x8>)
 8001c8a:	f002 b8e7 	b.w	8003e5c <HAL_UART_IRQHandler>
 8001c8e:	bf00      	nop
 8001c90:	200078f8 	.word	0x200078f8

08001c94 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001c94:	4801      	ldr	r0, [pc, #4]	; (8001c9c <TIM7_IRQHandler+0x8>)
 8001c96:	f001 bd1f 	b.w	80036d8 <HAL_TIM_IRQHandler>
 8001c9a:	bf00      	nop
 8001c9c:	200078b0 	.word	0x200078b0

08001ca0 <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ca0:	4801      	ldr	r0, [pc, #4]	; (8001ca8 <DMA2_Stream0_IRQHandler+0x8>)
 8001ca2:	f000 bea7 	b.w	80029f4 <HAL_DMA_IRQHandler>
 8001ca6:	bf00      	nop
 8001ca8:	20007690 	.word	0x20007690

08001cac <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001cac:	2001      	movs	r0, #1
 8001cae:	4770      	bx	lr

08001cb0 <_kill>:

int _kill(int pid, int sig)
{
 8001cb0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cb2:	f003 fa0d 	bl	80050d0 <__errno>
 8001cb6:	2316      	movs	r3, #22
 8001cb8:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001cba:	f04f 30ff 	mov.w	r0, #4294967295
 8001cbe:	bd08      	pop	{r3, pc}

08001cc0 <_exit>:

void _exit (int status)
{
 8001cc0:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001cc2:	f003 fa05 	bl	80050d0 <__errno>
 8001cc6:	2316      	movs	r3, #22
 8001cc8:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001cca:	e7fe      	b.n	8001cca <_exit+0xa>

08001ccc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ccc:	b570      	push	{r4, r5, r6, lr}
 8001cce:	460d      	mov	r5, r1
 8001cd0:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	460e      	mov	r6, r1
 8001cd4:	1b73      	subs	r3, r6, r5
 8001cd6:	429c      	cmp	r4, r3
 8001cd8:	dc01      	bgt.n	8001cde <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001cda:	4620      	mov	r0, r4
 8001cdc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001cde:	f3af 8000 	nop.w
 8001ce2:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	e7f5      	b.n	8001cd4 <_read+0x8>

08001ce8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce8:	b570      	push	{r4, r5, r6, lr}
 8001cea:	460d      	mov	r5, r1
 8001cec:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	460e      	mov	r6, r1
 8001cf0:	1b73      	subs	r3, r6, r5
 8001cf2:	429c      	cmp	r4, r3
 8001cf4:	dc01      	bgt.n	8001cfa <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001cf6:	4620      	mov	r0, r4
 8001cf8:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001cfa:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001cfe:	f7ff fe55 	bl	80019ac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	e7f5      	b.n	8001cf0 <_write+0x8>

08001d04 <_close>:

int _close(int file)
{
	return -1;
}
 8001d04:	f04f 30ff 	mov.w	r0, #4294967295
 8001d08:	4770      	bx	lr

08001d0a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001d0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d0e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001d10:	2000      	movs	r0, #0
 8001d12:	4770      	bx	lr

08001d14 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001d14:	2001      	movs	r0, #1
 8001d16:	4770      	bx	lr

08001d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001d18:	2000      	movs	r0, #0
 8001d1a:	4770      	bx	lr

08001d1c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	; (8001d4c <_sbrk+0x30>)
 8001d1e:	6811      	ldr	r1, [r2, #0]
{
 8001d20:	b510      	push	{r4, lr}
 8001d22:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001d24:	b909      	cbnz	r1, 8001d2a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001d26:	490a      	ldr	r1, [pc, #40]	; (8001d50 <_sbrk+0x34>)
 8001d28:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d2a:	6810      	ldr	r0, [r2, #0]
 8001d2c:	4909      	ldr	r1, [pc, #36]	; (8001d54 <_sbrk+0x38>)
 8001d2e:	4c0a      	ldr	r4, [pc, #40]	; (8001d58 <_sbrk+0x3c>)
 8001d30:	4403      	add	r3, r0
 8001d32:	1b09      	subs	r1, r1, r4
 8001d34:	428b      	cmp	r3, r1
 8001d36:	d906      	bls.n	8001d46 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001d38:	f003 f9ca 	bl	80050d0 <__errno>
 8001d3c:	230c      	movs	r3, #12
 8001d3e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d40:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001d44:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001d46:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001d48:	e7fc      	b.n	8001d44 <_sbrk+0x28>
 8001d4a:	bf00      	nop
 8001d4c:	2000781c 	.word	0x2000781c
 8001d50:	20007950 	.word	0x20007950
 8001d54:	20020000 	.word	0x20020000
 8001d58:	00000400 	.word	0x00000400

08001d5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d5c:	4a03      	ldr	r2, [pc, #12]	; (8001d6c <SystemInit+0x10>)
 8001d5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d66:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d70:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d72:	2210      	movs	r2, #16
 8001d74:	2100      	movs	r1, #0
 8001d76:	a802      	add	r0, sp, #8
 8001d78:	f003 f9e2 	bl	8005140 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d7c:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <MX_TIM2_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7e:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 8001d80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001d84:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 203125-1;
 8001d88:	4a12      	ldr	r2, [pc, #72]	; (8001dd4 <MX_TIM2_Init+0x64>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8a:	6083      	str	r3, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d90:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d94:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d96:	f001 fda7 	bl	80038e8 <HAL_TIM_Base_Init>
 8001d9a:	b108      	cbz	r0, 8001da0 <MX_TIM2_Init+0x30>
  {
    Error_Handler();
 8001d9c:	f7ff feb4 	bl	8001b08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da6:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001da8:	a902      	add	r1, sp, #8
 8001daa:	f001 fdd3 	bl	8003954 <HAL_TIM_ConfigClockSource>
 8001dae:	b108      	cbz	r0, 8001db4 <MX_TIM2_Init+0x44>
  {
    Error_Handler();
 8001db0:	f7ff feaa 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db4:	2220      	movs	r2, #32
 8001db6:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001db8:	4805      	ldr	r0, [pc, #20]	; (8001dd0 <MX_TIM2_Init+0x60>)
 8001dba:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dbc:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001dc0:	f001 fe64 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001dc4:	b108      	cbz	r0, 8001dca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001dc6:	f7ff fe9f 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001dca:	b007      	add	sp, #28
 8001dcc:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dd0:	20007820 	.word	0x20007820
 8001dd4:	00031974 	.word	0x00031974

08001dd8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001dd8:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 90-1;
 8001dda:	4a0e      	ldr	r2, [pc, #56]	; (8001e14 <MX_TIM6_Init+0x3c>)
  htim6.Instance = TIM6;
 8001ddc:	480e      	ldr	r0, [pc, #56]	; (8001e18 <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = 90-1;
 8001dde:	2359      	movs	r3, #89	; 0x59
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de0:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 90-1;
 8001de2:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 8001de6:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dea:	e9cd 4400 	strd	r4, r4, [sp]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dee:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 65535;
 8001df0:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001df4:	f001 fd78 	bl	80038e8 <HAL_TIM_Base_Init>
 8001df8:	b108      	cbz	r0, 8001dfe <MX_TIM6_Init+0x26>
  {
    Error_Handler();
 8001dfa:	f7ff fe85 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dfe:	4806      	ldr	r0, [pc, #24]	; (8001e18 <MX_TIM6_Init+0x40>)
 8001e00:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e02:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e06:	f001 fe41 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001e0a:	b108      	cbz	r0, 8001e10 <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 8001e0c:	f7ff fe7c 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e10:	b002      	add	sp, #8
 8001e12:	bd10      	pop	{r4, pc}
 8001e14:	40001000 	.word	0x40001000
 8001e18:	20007868 	.word	0x20007868

08001e1c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001e1c:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 520-1;
 8001e1e:	4a0e      	ldr	r2, [pc, #56]	; (8001e58 <MX_TIM7_Init+0x3c>)
  htim7.Instance = TIM7;
 8001e20:	480e      	ldr	r0, [pc, #56]	; (8001e5c <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = 520-1;
 8001e22:	f240 2307 	movw	r3, #519	; 0x207
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e26:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 520-1;
 8001e28:	e9c0 2300 	strd	r2, r3, [r0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 100-1;
 8001e2c:	2363      	movs	r3, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e2e:	e9cd 4400 	strd	r4, r4, [sp]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e32:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 100-1;
 8001e34:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e36:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001e38:	f001 fd56 	bl	80038e8 <HAL_TIM_Base_Init>
 8001e3c:	b108      	cbz	r0, 8001e42 <MX_TIM7_Init+0x26>
  {
    Error_Handler();
 8001e3e:	f7ff fe63 	bl	8001b08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <MX_TIM7_Init+0x40>)
 8001e44:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001e4a:	f001 fe1f 	bl	8003a8c <HAL_TIMEx_MasterConfigSynchronization>
 8001e4e:	b108      	cbz	r0, 8001e54 <MX_TIM7_Init+0x38>
  {
    Error_Handler();
 8001e50:	f7ff fe5a 	bl	8001b08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001e54:	b002      	add	sp, #8
 8001e56:	bd10      	pop	{r4, pc}
 8001e58:	40001400 	.word	0x40001400
 8001e5c:	200078b0 	.word	0x200078b0

08001e60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e60:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 8001e62:	6803      	ldr	r3, [r0, #0]
 8001e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e68:	d10e      	bne.n	8001e88 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	9301      	str	r3, [sp, #4]
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_TIM_Base_MspInit+0x7c>)
 8001e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	641a      	str	r2, [r3, #64]	; 0x40
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	9301      	str	r3, [sp, #4]
 8001e80:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001e82:	b005      	add	sp, #20
 8001e84:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM6)
 8001e88:	4a15      	ldr	r2, [pc, #84]	; (8001ee0 <HAL_TIM_Base_MspInit+0x80>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_TIM_Base_MspInit+0x7c>)
 8001e94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e96:	f042 0210 	orr.w	r2, r2, #16
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f003 0310 	and.w	r3, r3, #16
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	9b02      	ldr	r3, [sp, #8]
 8001ea6:	e7ec      	b.n	8001e82 <HAL_TIM_Base_MspInit+0x22>
  else if(tim_baseHandle->Instance==TIM7)
 8001ea8:	4a0e      	ldr	r2, [pc, #56]	; (8001ee4 <HAL_TIM_Base_MspInit+0x84>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d1e9      	bne.n	8001e82 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_TIM_Base_MspInit+0x7c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	9203      	str	r2, [sp, #12]
 8001eb4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001eb6:	f041 0120 	orr.w	r1, r1, #32
 8001eba:	6419      	str	r1, [r3, #64]	; 0x40
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0320 	and.w	r3, r3, #32
 8001ec2:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001ec8:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8001eca:	f000 fb3b 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ece:	2037      	movs	r0, #55	; 0x37
}
 8001ed0:	b005      	add	sp, #20
 8001ed2:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ed6:	f000 bb67 	b.w	80025a8 <HAL_NVIC_EnableIRQ>
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40001000 	.word	0x40001000
 8001ee4:	40001400 	.word	0x40001400

08001ee8 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ee8:	480b      	ldr	r0, [pc, #44]	; (8001f18 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001eea:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <MX_USART2_UART_Init+0x34>)
{
 8001eec:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8001eee:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ef2:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ef6:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef8:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001efa:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efe:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f02:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f04:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f06:	f001 fec3 	bl	8003c90 <HAL_UART_Init>
 8001f0a:	b118      	cbz	r0, 8001f14 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001f10:	f7ff bdfa 	b.w	8001b08 <Error_Handler>
}
 8001f14:	bd08      	pop	{r3, pc}
 8001f16:	bf00      	nop
 8001f18:	200078f8 	.word	0x200078f8
 8001f1c:	40004400 	.word	0x40004400

08001f20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f20:	b510      	push	{r4, lr}
 8001f22:	4604      	mov	r4, r0
 8001f24:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	2214      	movs	r2, #20
 8001f28:	2100      	movs	r1, #0
 8001f2a:	a803      	add	r0, sp, #12
 8001f2c:	f003 f908 	bl	8005140 <memset>
  if(uartHandle->Instance==USART2)
 8001f30:	6822      	ldr	r2, [r4, #0]
 8001f32:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <HAL_UART_MspInit+0x74>)
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d12a      	bne.n	8001f8e <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f38:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001f3c:	2400      	movs	r4, #0
 8001f3e:	9401      	str	r4, [sp, #4]
 8001f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f42:	4815      	ldr	r0, [pc, #84]	; (8001f98 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f44:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001f48:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f4c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	9402      	str	r4, [sp, #8]
 8001f56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f68:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f70:	2103      	movs	r1, #3
 8001f72:	2307      	movs	r3, #7
 8001f74:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	a903      	add	r1, sp, #12
 8001f7a:	f000 fdf9 	bl	8002b70 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f7e:	2026      	movs	r0, #38	; 0x26
 8001f80:	4622      	mov	r2, r4
 8001f82:	4621      	mov	r1, r4
 8001f84:	f000 fade 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f88:	2026      	movs	r0, #38	; 0x26
 8001f8a:	f000 fb0d 	bl	80025a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f8e:	b008      	add	sp, #32
 8001f90:	bd10      	pop	{r4, pc}
 8001f92:	bf00      	nop
 8001f94:	40004400 	.word	0x40004400
 8001f98:	40020000 	.word	0x40020000

08001f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fa0:	480d      	ldr	r0, [pc, #52]	; (8001fd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fa2:	490e      	ldr	r1, [pc, #56]	; (8001fdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fa6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa8:	e002      	b.n	8001fb0 <LoopCopyDataInit>

08001faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fae:	3304      	adds	r3, #4

08001fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb4:	d3f9      	bcc.n	8001faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fb8:	4c0b      	ldr	r4, [pc, #44]	; (8001fe8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fbc:	e001      	b.n	8001fc2 <LoopFillZerobss>

08001fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fc0:	3204      	adds	r2, #4

08001fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc4:	d3fb      	bcc.n	8001fbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fc6:	f7ff fec9 	bl	8001d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fca:	f003 f887 	bl	80050dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fce:	f7ff fd6b 	bl	8001aa8 <main>
  bx  lr    
 8001fd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fdc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001fe0:	0800ccac 	.word	0x0800ccac
  ldr r2, =_sbss
 8001fe4:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001fe8:	20007950 	.word	0x20007950

08001fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fec:	e7fe      	b.n	8001fec <ADC_IRQHandler>
	...

08001ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <HAL_InitTick+0x3c>)
 8001ff4:	4b0e      	ldr	r3, [pc, #56]	; (8002030 <HAL_InitTick+0x40>)
{
 8001ff6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ff8:	7818      	ldrb	r0, [r3, #0]
 8001ffa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffe:	fbb3 f3f0 	udiv	r3, r3, r0
 8002002:	6810      	ldr	r0, [r2, #0]
 8002004:	fbb0 f0f3 	udiv	r0, r0, r3
 8002008:	f000 fadc 	bl	80025c4 <HAL_SYSTICK_Config>
 800200c:	4604      	mov	r4, r0
 800200e:	b958      	cbnz	r0, 8002028 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002010:	2d0f      	cmp	r5, #15
 8002012:	d809      	bhi.n	8002028 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002014:	4602      	mov	r2, r0
 8002016:	4629      	mov	r1, r5
 8002018:	f04f 30ff 	mov.w	r0, #4294967295
 800201c:	f000 fa92 	bl	8002544 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002020:	4b04      	ldr	r3, [pc, #16]	; (8002034 <HAL_InitTick+0x44>)
 8002022:	4620      	mov	r0, r4
 8002024:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8002026:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002028:	2001      	movs	r0, #1
 800202a:	e7fc      	b.n	8002026 <HAL_InitTick+0x36>
 800202c:	20000008 	.word	0x20000008
 8002030:	2000000c 	.word	0x2000000c
 8002034:	20000010 	.word	0x20000010

08002038 <HAL_Init>:
{
 8002038:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800203a:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_Init+0x30>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002042:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800204a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002052:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002054:	2003      	movs	r0, #3
 8002056:	f000 fa63 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800205a:	200f      	movs	r0, #15
 800205c:	f7ff ffc8 	bl	8001ff0 <HAL_InitTick>
  HAL_MspInit();
 8002060:	f7ff fde0 	bl	8001c24 <HAL_MspInit>
}
 8002064:	2000      	movs	r0, #0
 8002066:	bd08      	pop	{r3, pc}
 8002068:	40023c00 	.word	0x40023c00

0800206c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800206c:	4a03      	ldr	r2, [pc, #12]	; (800207c <HAL_IncTick+0x10>)
 800206e:	4b04      	ldr	r3, [pc, #16]	; (8002080 <HAL_IncTick+0x14>)
 8002070:	6811      	ldr	r1, [r2, #0]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	440b      	add	r3, r1
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	2000793c 	.word	0x2000793c
 8002080:	2000000c 	.word	0x2000000c

08002084 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002084:	4b01      	ldr	r3, [pc, #4]	; (800208c <HAL_GetTick+0x8>)
 8002086:	6818      	ldr	r0, [r3, #0]
}
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	2000793c 	.word	0x2000793c

08002090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002090:	b538      	push	{r3, r4, r5, lr}
 8002092:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002094:	f7ff fff6 	bl	8002084 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002098:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800209a:	bf1c      	itt	ne
 800209c:	4b05      	ldrne	r3, [pc, #20]	; (80020b4 <HAL_Delay+0x24>)
 800209e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80020a0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80020a2:	bf18      	it	ne
 80020a4:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020a6:	f7ff ffed 	bl	8002084 <HAL_GetTick>
 80020aa:	1b43      	subs	r3, r0, r5
 80020ac:	42a3      	cmp	r3, r4
 80020ae:	d3fa      	bcc.n	80020a6 <HAL_Delay+0x16>
  {
  }
}
 80020b0:	bd38      	pop	{r3, r4, r5, pc}
 80020b2:	bf00      	nop
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020b8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ba:	4604      	mov	r4, r0
 80020bc:	2800      	cmp	r0, #0
 80020be:	f000 809b 	beq.w	80021f8 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020c2:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80020c4:	b925      	cbnz	r5, 80020d0 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020c6:	f7ff fb2d 	bl	8001724 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020ca:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020cc:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020d2:	06db      	lsls	r3, r3, #27
 80020d4:	f100 808e 	bmi.w	80021f4 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80020da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020de:	f023 0302 	bic.w	r3, r3, #2
 80020e2:	f043 0302 	orr.w	r3, r3, #2
 80020e6:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80020e8:	4b44      	ldr	r3, [pc, #272]	; (80021fc <HAL_ADC_Init+0x144>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80020f0:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020f2:	685a      	ldr	r2, [r3, #4]
 80020f4:	6861      	ldr	r1, [r4, #4]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020fa:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020fc:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002104:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800210c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800210e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002110:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002112:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002116:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002118:	685a      	ldr	r2, [r3, #4]
 800211a:	430a      	orrs	r2, r1
 800211c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800211e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002120:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002126:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002128:	689a      	ldr	r2, [r3, #8]
 800212a:	430a      	orrs	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800212e:	4934      	ldr	r1, [pc, #208]	; (8002200 <HAL_ADC_Init+0x148>)
 8002130:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002132:	428a      	cmp	r2, r1
 8002134:	d052      	beq.n	80021dc <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 800213c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800213e:	6899      	ldr	r1, [r3, #8]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002144:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002146:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002148:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800214c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002152:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	f022 0202 	bic.w	r2, r2, #2
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	7e21      	ldrb	r1, [r4, #24]
 8002160:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8002164:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002166:	f894 2020 	ldrb.w	r2, [r4, #32]
 800216a:	2a00      	cmp	r2, #0
 800216c:	d03e      	beq.n	80021ec <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800216e:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002170:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002176:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800217e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	3901      	subs	r1, #1
 8002184:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002188:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800218a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800218c:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800218e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002192:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002196:	3901      	subs	r1, #1
 8002198:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800219c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80021a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80021a6:	689a      	ldr	r2, [r3, #8]
 80021a8:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 80021ac:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80021b0:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021b4:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80021b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021bc:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80021be:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80021c0:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 80021c4:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80021c6:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 80021c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 80021d4:	2300      	movs	r3, #0
 80021d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80021da:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021ea:	e7b2      	b.n	8002152 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f2:	e7c9      	b.n	8002188 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 80021f4:	2001      	movs	r0, #1
 80021f6:	e7ed      	b.n	80021d4 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 80021f8:	2001      	movs	r0, #1
 80021fa:	e7ee      	b.n	80021da <HAL_ADC_Init+0x122>
 80021fc:	40012300 	.word	0x40012300
 8002200:	0f000001 	.word	0x0f000001

08002204 <HAL_ADC_Start_DMA>:
{
 8002204:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002206:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8002208:	2200      	movs	r2, #0
 800220a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 800220c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002210:	2a01      	cmp	r2, #1
{
 8002212:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002214:	f000 808c 	beq.w	8002330 <HAL_ADC_Start_DMA+0x12c>
 8002218:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800221a:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 800221c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002220:	68b2      	ldr	r2, [r6, #8]
 8002222:	07d4      	lsls	r4, r2, #31
 8002224:	d554      	bpl.n	80022d0 <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002226:	68b2      	ldr	r2, [r6, #8]
 8002228:	05d0      	lsls	r0, r2, #23
 800222a:	d464      	bmi.n	80022f6 <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800222c:	68b4      	ldr	r4, [r6, #8]
 800222e:	f014 0401 	ands.w	r4, r4, #1
 8002232:	d074      	beq.n	800231e <HAL_ADC_Start_DMA+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8002234:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8002236:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 800223a:	f020 0001 	bic.w	r0, r0, #1
 800223e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8002242:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002244:	6872      	ldr	r2, [r6, #4]
 8002246:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002248:	bf41      	itttt	mi
 800224a:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 800224c:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8002250:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8002254:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002256:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002258:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800225a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800225e:	bf1c      	itt	ne
 8002260:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 8002262:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8002266:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8002268:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800226a:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 800226c:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002270:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002272:	4a32      	ldr	r2, [pc, #200]	; (800233c <HAL_ADC_Start_DMA+0x138>)
 8002274:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002276:	4a32      	ldr	r2, [pc, #200]	; (8002340 <HAL_ADC_Start_DMA+0x13c>)
 8002278:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800227a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800227e:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002280:	6872      	ldr	r2, [r6, #4]
 8002282:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002286:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002288:	68b2      	ldr	r2, [r6, #8]
 800228a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800228e:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002290:	460a      	mov	r2, r1
 8002292:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8002296:	f000 fb1d 	bl	80028d4 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800229a:	4a2a      	ldr	r2, [pc, #168]	; (8002344 <HAL_ADC_Start_DMA+0x140>)
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	6850      	ldr	r0, [r2, #4]
 80022a0:	4929      	ldr	r1, [pc, #164]	; (8002348 <HAL_ADC_Start_DMA+0x144>)
 80022a2:	f010 001f 	ands.w	r0, r0, #31
 80022a6:	d132      	bne.n	800230e <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80022a8:	428b      	cmp	r3, r1
 80022aa:	d007      	beq.n	80022bc <HAL_ADC_Start_DMA+0xb8>
 80022ac:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80022b0:	428b      	cmp	r3, r1
 80022b2:	d125      	bne.n	8002300 <HAL_ADC_Start_DMA+0xfc>
 80022b4:	6852      	ldr	r2, [r2, #4]
 80022b6:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022ba:	d107      	bne.n	80022cc <HAL_ADC_Start_DMA+0xc8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022bc:	6898      	ldr	r0, [r3, #8]
 80022be:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 80022c2:	d137      	bne.n	8002334 <HAL_ADC_Start_DMA+0x130>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022ca:	609a      	str	r2, [r3, #8]
}
 80022cc:	b002      	add	sp, #8
 80022ce:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80022d0:	68b2      	ldr	r2, [r6, #8]
 80022d2:	f042 0201 	orr.w	r2, r2, #1
 80022d6:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_ADC_Start_DMA+0x148>)
 80022da:	6810      	ldr	r0, [r2, #0]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <HAL_ADC_Start_DMA+0x14c>)
 80022de:	fbb0 f0f2 	udiv	r0, r0, r2
 80022e2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80022e6:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 80022e8:	9a01      	ldr	r2, [sp, #4]
 80022ea:	2a00      	cmp	r2, #0
 80022ec:	d09b      	beq.n	8002226 <HAL_ADC_Start_DMA+0x22>
      counter--;
 80022ee:	9a01      	ldr	r2, [sp, #4]
 80022f0:	3a01      	subs	r2, #1
 80022f2:	9201      	str	r2, [sp, #4]
 80022f4:	e7f8      	b.n	80022e8 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022f6:	68b2      	ldr	r2, [r6, #8]
 80022f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022fc:	60b2      	str	r2, [r6, #8]
 80022fe:	e795      	b.n	800222c <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002300:	4914      	ldr	r1, [pc, #80]	; (8002354 <HAL_ADC_Start_DMA+0x150>)
 8002302:	428b      	cmp	r3, r1
 8002304:	d1e2      	bne.n	80022cc <HAL_ADC_Start_DMA+0xc8>
 8002306:	6852      	ldr	r2, [r2, #4]
 8002308:	f012 0f10 	tst.w	r2, #16
 800230c:	e7d5      	b.n	80022ba <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800230e:	428b      	cmp	r3, r1
 8002310:	d110      	bne.n	8002334 <HAL_ADC_Start_DMA+0x130>
 8002312:	6898      	ldr	r0, [r3, #8]
 8002314:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002318:	d0d4      	beq.n	80022c4 <HAL_ADC_Start_DMA+0xc0>
  return HAL_OK;
 800231a:	4620      	mov	r0, r4
 800231c:	e7d6      	b.n	80022cc <HAL_ADC_Start_DMA+0xc8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800231e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002320:	f043 0310 	orr.w	r3, r3, #16
 8002324:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002326:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	646b      	str	r3, [r5, #68]	; 0x44
 800232e:	e7f4      	b.n	800231a <HAL_ADC_Start_DMA+0x116>
  __HAL_LOCK(hadc);
 8002330:	2002      	movs	r0, #2
 8002332:	e7cb      	b.n	80022cc <HAL_ADC_Start_DMA+0xc8>
  return HAL_OK;
 8002334:	2000      	movs	r0, #0
 8002336:	e7c9      	b.n	80022cc <HAL_ADC_Start_DMA+0xc8>
 8002338:	0800237b 	.word	0x0800237b
 800233c:	08002359 	.word	0x08002359
 8002340:	08002365 	.word	0x08002365
 8002344:	40012300 	.word	0x40012300
 8002348:	40012000 	.word	0x40012000
 800234c:	20000008 	.word	0x20000008
 8002350:	000f4240 	.word	0x000f4240
 8002354:	40012200 	.word	0x40012200

08002358 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002358:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800235a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800235c:	f7ff fb50 	bl	8001a00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002360:	bd08      	pop	{r3, pc}

08002362 <HAL_ADC_ErrorCallback>:
 8002362:	4770      	bx	lr

08002364 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002364:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002366:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002368:	2340      	movs	r3, #64	; 0x40
 800236a:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800236c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800236e:	f043 0304 	orr.w	r3, r3, #4
 8002372:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002374:	f7ff fff5 	bl	8002362 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002378:	bd08      	pop	{r3, pc}

0800237a <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800237a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800237c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237e:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8002382:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002384:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002386:	d123      	bne.n	80023d0 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002388:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238c:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	6891      	ldr	r1, [r2, #8]
 8002392:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8002396:	d117      	bne.n	80023c8 <ADC_DMAConvCplt+0x4e>
 8002398:	7e19      	ldrb	r1, [r3, #24]
 800239a:	b9a9      	cbnz	r1, 80023c8 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800239c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800239e:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 80023a2:	d002      	beq.n	80023aa <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80023a4:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80023a6:	0548      	lsls	r0, r1, #21
 80023a8:	d40e      	bmi.n	80023c8 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80023aa:	6851      	ldr	r1, [r2, #4]
 80023ac:	f021 0120 	bic.w	r1, r1, #32
 80023b0:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023bc:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023be:	bf5e      	ittt	pl
 80023c0:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 80023c2:	f042 0201 	orrpl.w	r2, r2, #1
 80023c6:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff fb0b 	bl	80019e4 <HAL_ADC_ConvCpltCallback>
}
 80023ce:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023d0:	06d2      	lsls	r2, r2, #27
 80023d2:	d503      	bpl.n	80023dc <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ffc4 	bl	8002362 <HAL_ADC_ErrorCallback>
 80023da:	e7f8      	b.n	80023ce <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 80023de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80023e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e4:	4718      	bx	r3
	...

080023e8 <HAL_ADC_ConfigChannel>:
{
 80023e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 80023ea:	2300      	movs	r3, #0
 80023ec:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80023ee:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d069      	beq.n	80024ca <HAL_ADC_ConfigChannel+0xe2>
 80023f6:	2301      	movs	r3, #1
 80023f8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80023fc:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80023fe:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002400:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002402:	2d09      	cmp	r5, #9
 8002404:	b2ac      	uxth	r4, r5
 8002406:	d934      	bls.n	8002472 <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002408:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800240c:	68df      	ldr	r7, [r3, #12]
 800240e:	3a1e      	subs	r2, #30
 8002410:	f04f 0c07 	mov.w	ip, #7
 8002414:	fa0c fc02 	lsl.w	ip, ip, r2
 8002418:	ea27 070c 	bic.w	r7, r7, ip
 800241c:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800241e:	68df      	ldr	r7, [r3, #12]
 8002420:	fa06 f202 	lsl.w	r2, r6, r2
 8002424:	433a      	orrs	r2, r7
 8002426:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002428:	6849      	ldr	r1, [r1, #4]
 800242a:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800242c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8002430:	d82f      	bhi.n	8002492 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002432:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002434:	3a05      	subs	r2, #5
 8002436:	261f      	movs	r6, #31
 8002438:	4096      	lsls	r6, r2
 800243a:	ea21 0106 	bic.w	r1, r1, r6
 800243e:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002440:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002442:	fa04 f202 	lsl.w	r2, r4, r2
 8002446:	430a      	orrs	r2, r1
 8002448:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800244a:	4a30      	ldr	r2, [pc, #192]	; (800250c <HAL_ADC_ConfigChannel+0x124>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d10a      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7e>
 8002450:	2d12      	cmp	r5, #18
 8002452:	d13c      	bne.n	80024ce <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <HAL_ADC_ConfigChannel+0x128>)
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800245c:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002464:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8002466:	2300      	movs	r3, #0
 8002468:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800246c:	4618      	mov	r0, r3
}
 800246e:	b003      	add	sp, #12
 8002470:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002472:	691f      	ldr	r7, [r3, #16]
 8002474:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002478:	f04f 0c07 	mov.w	ip, #7
 800247c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002480:	ea27 070c 	bic.w	r7, r7, ip
 8002484:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002486:	691f      	ldr	r7, [r3, #16]
 8002488:	fa06 f202 	lsl.w	r2, r6, r2
 800248c:	433a      	orrs	r2, r7
 800248e:	611a      	str	r2, [r3, #16]
 8002490:	e7ca      	b.n	8002428 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8002492:	290c      	cmp	r1, #12
 8002494:	f04f 011f 	mov.w	r1, #31
 8002498:	d80b      	bhi.n	80024b2 <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800249a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800249c:	3a23      	subs	r2, #35	; 0x23
 800249e:	4091      	lsls	r1, r2
 80024a0:	ea26 0101 	bic.w	r1, r6, r1
 80024a4:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024a8:	fa04 f202 	lsl.w	r2, r4, r2
 80024ac:	430a      	orrs	r2, r1
 80024ae:	631a      	str	r2, [r3, #48]	; 0x30
 80024b0:	e7cb      	b.n	800244a <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024b2:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80024b4:	3a41      	subs	r2, #65	; 0x41
 80024b6:	4091      	lsls	r1, r2
 80024b8:	ea26 0101 	bic.w	r1, r6, r1
 80024bc:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c0:	fa04 f202 	lsl.w	r2, r4, r2
 80024c4:	430a      	orrs	r2, r1
 80024c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80024c8:	e7bf      	b.n	800244a <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80024ca:	2002      	movs	r0, #2
 80024cc:	e7cf      	b.n	800246e <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <HAL_ADC_ConfigChannel+0x12c>)
 80024d0:	429d      	cmp	r5, r3
 80024d2:	d001      	beq.n	80024d8 <HAL_ADC_ConfigChannel+0xf0>
 80024d4:	2d11      	cmp	r5, #17
 80024d6:	d1c6      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_ADC_ConfigChannel+0x128>)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80024e0:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80024e8:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_ADC_ConfigChannel+0x12c>)
 80024ec:	429d      	cmp	r5, r3
 80024ee:	d1ba      	bne.n	8002466 <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_ADC_ConfigChannel+0x130>)
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_ADC_ConfigChannel+0x134>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80024fa:	220a      	movs	r2, #10
 80024fc:	4353      	muls	r3, r2
        counter--;
 80024fe:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002500:	9b01      	ldr	r3, [sp, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0af      	beq.n	8002466 <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 8002506:	9b01      	ldr	r3, [sp, #4]
 8002508:	3b01      	subs	r3, #1
 800250a:	e7f8      	b.n	80024fe <HAL_ADC_ConfigChannel+0x116>
 800250c:	40012000 	.word	0x40012000
 8002510:	40012300 	.word	0x40012300
 8002514:	10000012 	.word	0x10000012
 8002518:	20000008 	.word	0x20000008
 800251c:	000f4240 	.word	0x000f4240

08002520 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4907      	ldr	r1, [pc, #28]	; (8002540 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002522:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002524:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002530:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002532:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800253c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002544:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002546:	b530      	push	{r4, r5, lr}
 8002548:	68dc      	ldr	r4, [r3, #12]
 800254a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002552:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002554:	2d04      	cmp	r5, #4
 8002556:	bf28      	it	cs
 8002558:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800255c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002560:	bf8c      	ite	hi
 8002562:	3c03      	subhi	r4, #3
 8002564:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002566:	fa03 f505 	lsl.w	r5, r3, r5
 800256a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256e:	40a3      	lsls	r3, r4
 8002570:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002576:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002578:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	bfac      	ite	ge
 800257e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002582:	4a08      	ldrlt	r2, [pc, #32]	; (80025a4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002588:	bfb8      	it	lt
 800258a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258e:	b2db      	uxtb	r3, r3
 8002590:	bfaa      	itet	ge
 8002592:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002596:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002598:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800259c:	bd30      	pop	{r4, r5, pc}
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00
 80025a4:	e000ed14 	.word	0xe000ed14

080025a8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80025a8:	2800      	cmp	r0, #0
 80025aa:	db08      	blt.n	80025be <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ac:	0942      	lsrs	r2, r0, #5
 80025ae:	2301      	movs	r3, #1
 80025b0:	f000 001f 	and.w	r0, r0, #31
 80025b4:	fa03 f000 	lsl.w	r0, r3, r0
 80025b8:	4b01      	ldr	r3, [pc, #4]	; (80025c0 <HAL_NVIC_EnableIRQ+0x18>)
 80025ba:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80025be:	4770      	bx	lr
 80025c0:	e000e100 	.word	0xe000e100

080025c4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	3801      	subs	r0, #1
 80025c6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80025ca:	d20b      	bcs.n	80025e4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025cc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	21f0      	movs	r1, #240	; 0xf0
 80025d6:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025da:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025dc:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025de:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80025e4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80025e6:	4770      	bx	lr
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025ec:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 80025ee:	4604      	mov	r4, r0
 80025f0:	b168      	cbz	r0, 800260e <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025f2:	7903      	ldrb	r3, [r0, #4]
 80025f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025f8:	b913      	cbnz	r3, 8002600 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025fa:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025fc:	f7ff f902 	bl	8001804 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002600:	2302      	movs	r3, #2
 8002602:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002604:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002606:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002608:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800260a:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 800260c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800260e:	2001      	movs	r0, #1
 8002610:	e7fc      	b.n	800260c <HAL_DAC_Init+0x20>
	...

08002614 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002616:	460d      	mov	r5, r1
 8002618:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800261a:	7942      	ldrb	r2, [r0, #5]
{
 800261c:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdac);
 800261e:	2a01      	cmp	r2, #1
{
 8002620:	4604      	mov	r4, r0
 8002622:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002626:	d029      	beq.n	800267c <HAL_DAC_Start_DMA+0x68>
 8002628:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800262a:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 800262c:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800262e:	6820      	ldr	r0, [r4, #0]
  if (Channel == DAC_CHANNEL_1)
 8002630:	bb5d      	cbnz	r5, 800268a <HAL_DAC_Start_DMA+0x76>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002632:	68a2      	ldr	r2, [r4, #8]
 8002634:	4f28      	ldr	r7, [pc, #160]	; (80026d8 <HAL_DAC_Start_DMA+0xc4>)
 8002636:	63d7      	str	r7, [r2, #60]	; 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002638:	4f28      	ldr	r7, [pc, #160]	; (80026dc <HAL_DAC_Start_DMA+0xc8>)
 800263a:	6417      	str	r7, [r2, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800263c:	4f28      	ldr	r7, [pc, #160]	; (80026e0 <HAL_DAC_Start_DMA+0xcc>)
 800263e:	64d7      	str	r7, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002640:	6802      	ldr	r2, [r0, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002642:	2e04      	cmp	r6, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002644:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002648:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 800264a:	d018      	beq.n	800267e <HAL_DAC_Start_DMA+0x6a>
 800264c:	2e08      	cmp	r6, #8
 800264e:	d019      	beq.n	8002684 <HAL_DAC_Start_DMA+0x70>
 8002650:	2e00      	cmp	r6, #0
 8002652:	d138      	bne.n	80026c6 <HAL_DAC_Start_DMA+0xb2>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002654:	f100 0208 	add.w	r2, r0, #8

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002658:	6806      	ldr	r6, [r0, #0]
 800265a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 800265e:	6006      	str	r6, [r0, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002660:	68a0      	ldr	r0, [r4, #8]
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002662:	f000 f937 	bl	80028d4 <HAL_DMA_Start_IT>
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002666:	2300      	movs	r3, #0
 8002668:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800266a:	bb80      	cbnz	r0, 80026ce <HAL_DAC_Start_DMA+0xba>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	f005 0110 	and.w	r1, r5, #16
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	2501      	movs	r5, #1
 8002676:	408d      	lsls	r5, r1
 8002678:	4315      	orrs	r5, r2
 800267a:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 800267c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800267e:	f100 020c 	add.w	r2, r0, #12
        break;
 8002682:	e7e9      	b.n	8002658 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002684:	f100 0210 	add.w	r2, r0, #16
        break;
 8002688:	e7e6      	b.n	8002658 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800268a:	68e2      	ldr	r2, [r4, #12]
 800268c:	4f15      	ldr	r7, [pc, #84]	; (80026e4 <HAL_DAC_Start_DMA+0xd0>)
 800268e:	63d7      	str	r7, [r2, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002690:	4f15      	ldr	r7, [pc, #84]	; (80026e8 <HAL_DAC_Start_DMA+0xd4>)
 8002692:	6417      	str	r7, [r2, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002694:	4f15      	ldr	r7, [pc, #84]	; (80026ec <HAL_DAC_Start_DMA+0xd8>)
 8002696:	64d7      	str	r7, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002698:	6802      	ldr	r2, [r0, #0]
    switch (Alignment)
 800269a:	2e04      	cmp	r6, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800269c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026a0:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 80026a2:	d00a      	beq.n	80026ba <HAL_DAC_Start_DMA+0xa6>
 80026a4:	2e08      	cmp	r6, #8
 80026a6:	d00b      	beq.n	80026c0 <HAL_DAC_Start_DMA+0xac>
 80026a8:	b97e      	cbnz	r6, 80026ca <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80026aa:	f100 0214 	add.w	r2, r0, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026ae:	6806      	ldr	r6, [r0, #0]
 80026b0:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 80026b4:	6006      	str	r6, [r0, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80026b6:	68e0      	ldr	r0, [r4, #12]
 80026b8:	e7d3      	b.n	8002662 <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80026ba:	f100 0218 	add.w	r2, r0, #24
        break;
 80026be:	e7f6      	b.n	80026ae <HAL_DAC_Start_DMA+0x9a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80026c0:	f100 021c 	add.w	r2, r0, #28
        break;
 80026c4:	e7f3      	b.n	80026ae <HAL_DAC_Start_DMA+0x9a>
    switch (Alignment)
 80026c6:	462a      	mov	r2, r5
 80026c8:	e7c6      	b.n	8002658 <HAL_DAC_Start_DMA+0x44>
    switch (Alignment)
 80026ca:	2200      	movs	r2, #0
 80026cc:	e7ef      	b.n	80026ae <HAL_DAC_Start_DMA+0x9a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026ce:	6923      	ldr	r3, [r4, #16]
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6123      	str	r3, [r4, #16]
 80026d6:	e7d1      	b.n	800267c <HAL_DAC_Start_DMA+0x68>
 80026d8:	080026f3 	.word	0x080026f3
 80026dc:	08002705 	.word	0x08002705
 80026e0:	08002711 	.word	0x08002711
 80026e4:	08002775 	.word	0x08002775
 80026e8:	08002785 	.word	0x08002785
 80026ec:	0800278f 	.word	0x0800278f

080026f0 <HAL_DAC_ConvCpltCallbackCh1>:
 80026f0:	4770      	bx	lr

080026f2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80026f2:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f4:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80026f6:	4620      	mov	r0, r4
 80026f8:	f7ff fffa 	bl	80026f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80026fc:	2301      	movs	r3, #1
 80026fe:	7123      	strb	r3, [r4, #4]
}
 8002700:	bd10      	pop	{r4, pc}

08002702 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8002702:	4770      	bx	lr

08002704 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002704:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002706:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002708:	f7ff fffb 	bl	8002702 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800270c:	bd08      	pop	{r3, pc}

0800270e <HAL_DAC_ErrorCallbackCh1>:
 800270e:	4770      	bx	lr

08002710 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002710:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002712:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002714:	6923      	ldr	r3, [r4, #16]
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff fff6 	bl	800270e <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002722:	2301      	movs	r3, #1
 8002724:	7123      	strb	r3, [r4, #4]
}
 8002726:	bd10      	pop	{r4, pc}

08002728 <HAL_DAC_ConfigChannel>:
{
 8002728:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 800272a:	7943      	ldrb	r3, [r0, #5]
 800272c:	2b01      	cmp	r3, #1
 800272e:	f04f 0302 	mov.w	r3, #2
 8002732:	d01a      	beq.n	800276a <HAL_DAC_ConfigChannel+0x42>
  tmpreg1 = hdac->Instance->CR;
 8002734:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002736:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8002738:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800273a:	f002 0210 	and.w	r2, r2, #16
 800273e:	f640 75fe 	movw	r5, #4094	; 0xffe
 8002742:	4095      	lsls	r5, r2
 8002744:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002748:	e9d1 3100 	ldrd	r3, r1, [r1]
 800274c:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800274e:	4093      	lsls	r3, r2
 8002750:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8002752:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	21c0      	movs	r1, #192	; 0xc0
 8002758:	fa01 f202 	lsl.w	r2, r1, r2
 800275c:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8002760:	2301      	movs	r3, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002762:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002764:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8002766:	2300      	movs	r3, #0
 8002768:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 800276a:	4618      	mov	r0, r3
}
 800276c:	bd30      	pop	{r4, r5, pc}

0800276e <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800276e:	4770      	bx	lr

08002770 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8002770:	4770      	bx	lr

08002772 <HAL_DACEx_ErrorCallbackCh2>:
 8002772:	4770      	bx	lr

08002774 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002774:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002776:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002778:	4620      	mov	r0, r4
 800277a:	f7ff fff8 	bl	800276e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800277e:	2301      	movs	r3, #1
 8002780:	7123      	strb	r3, [r4, #4]
}
 8002782:	bd10      	pop	{r4, pc}

08002784 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002784:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002786:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002788:	f7ff fff2 	bl	8002770 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800278c:	bd08      	pop	{r3, pc}

0800278e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800278e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002790:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002792:	6923      	ldr	r3, [r4, #16]
 8002794:	f043 0304 	orr.w	r3, r3, #4
 8002798:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff ffe9 	bl	8002772 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027a0:	2301      	movs	r3, #1
 80027a2:	7123      	strb	r3, [r4, #4]
}
 80027a4:	bd10      	pop	{r4, pc}
	...

080027a8 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027a8:	6803      	ldr	r3, [r0, #0]
{
 80027aa:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ac:	4c08      	ldr	r4, [pc, #32]	; (80027d0 <DMA_CalcBaseAndBitshift+0x28>)
{
 80027ae:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80027b0:	b2d9      	uxtb	r1, r3
 80027b2:	3910      	subs	r1, #16
 80027b4:	2018      	movs	r0, #24
 80027b6:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80027ba:	5c20      	ldrb	r0, [r4, r0]
 80027bc:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027be:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 80027c2:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 80027c6:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80027c8:	bf88      	it	hi
 80027ca:	3004      	addhi	r0, #4
 80027cc:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80027ce:	bd10      	pop	{r4, pc}
 80027d0:	08009a95 	.word	0x08009a95

080027d4 <HAL_DMA_Init>:
{
 80027d4:	b570      	push	{r4, r5, r6, lr}
 80027d6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80027d8:	f7ff fc54 	bl	8002084 <HAL_GetTick>
 80027dc:	4605      	mov	r5, r0
  if(hdma == NULL)
 80027de:	2c00      	cmp	r4, #0
 80027e0:	d073      	beq.n	80028ca <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80027e8:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80027ea:	2300      	movs	r3, #0
 80027ec:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80027f0:	6813      	ldr	r3, [r2, #0]
 80027f2:	f023 0301 	bic.w	r3, r3, #1
 80027f6:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027f8:	6821      	ldr	r1, [r4, #0]
 80027fa:	680b      	ldr	r3, [r1, #0]
 80027fc:	07d8      	lsls	r0, r3, #31
 80027fe:	d42f      	bmi.n	8002860 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002800:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002802:	4d33      	ldr	r5, [pc, #204]	; (80028d0 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002806:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002808:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	68e2      	ldr	r2, [r4, #12]
 8002810:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002812:	6922      	ldr	r2, [r4, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	6962      	ldr	r2, [r4, #20]
 8002818:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800281a:	69e2      	ldr	r2, [r4, #28]
 800281c:	4303      	orrs	r3, r0
 800281e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002820:	6a22      	ldr	r2, [r4, #32]
 8002822:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002824:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002826:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002828:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800282c:	bf02      	ittt	eq
 800282e:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002832:	4335      	orreq	r5, r6
 8002834:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002836:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002838:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800283a:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800283c:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002840:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002844:	d133      	bne.n	80028ae <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002846:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002848:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 800284a:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800284c:	b37d      	cbz	r5, 80028ae <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800284e:	b990      	cbnz	r0, 8002876 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002850:	2a01      	cmp	r2, #1
 8002852:	d021      	beq.n	8002898 <HAL_DMA_Init+0xc4>
 8002854:	f032 0202 	bics.w	r2, r2, #2
 8002858:	d129      	bne.n	80028ae <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800285a:	01ea      	lsls	r2, r5, #7
 800285c:	d527      	bpl.n	80028ae <HAL_DMA_Init+0xda>
 800285e:	e01e      	b.n	800289e <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002860:	f7ff fc10 	bl	8002084 <HAL_GetTick>
 8002864:	1b40      	subs	r0, r0, r5
 8002866:	2805      	cmp	r0, #5
 8002868:	d9c6      	bls.n	80027f8 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800286a:	2320      	movs	r3, #32
 800286c:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800286e:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002870:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002874:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002876:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800287a:	d114      	bne.n	80028a6 <HAL_DMA_Init+0xd2>
    switch (tmp)
 800287c:	2a03      	cmp	r2, #3
 800287e:	d816      	bhi.n	80028ae <HAL_DMA_Init+0xda>
 8002880:	a001      	add	r0, pc, #4	; (adr r0, 8002888 <HAL_DMA_Init+0xb4>)
 8002882:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002886:	bf00      	nop
 8002888:	0800289f 	.word	0x0800289f
 800288c:	0800285b 	.word	0x0800285b
 8002890:	0800289f 	.word	0x0800289f
 8002894:	08002899 	.word	0x08002899
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002898:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800289c:	d107      	bne.n	80028ae <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800289e:	2340      	movs	r3, #64	; 0x40
 80028a0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80028a2:	2001      	movs	r0, #1
 80028a4:	e7e4      	b.n	8002870 <HAL_DMA_Init+0x9c>
    switch (tmp)
 80028a6:	2a02      	cmp	r2, #2
 80028a8:	d9f9      	bls.n	800289e <HAL_DMA_Init+0xca>
 80028aa:	2a03      	cmp	r2, #3
 80028ac:	d0d5      	beq.n	800285a <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 80028ae:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80028b0:	4620      	mov	r0, r4
 80028b2:	f7ff ff79 	bl	80027a8 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80028b8:	233f      	movs	r3, #63	; 0x3f
 80028ba:	4093      	lsls	r3, r2
 80028bc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028be:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80028c0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028c2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80028c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80028c8:	e7d4      	b.n	8002874 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 80028ca:	2001      	movs	r0, #1
 80028cc:	e7d2      	b.n	8002874 <HAL_DMA_Init+0xa0>
 80028ce:	bf00      	nop
 80028d0:	f010803f 	.word	0xf010803f

080028d4 <HAL_DMA_Start_IT>:
{
 80028d4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80028d6:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80028dc:	2c01      	cmp	r4, #1
 80028de:	d031      	beq.n	8002944 <HAL_DMA_Start_IT+0x70>
 80028e0:	2401      	movs	r4, #1
 80028e2:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80028e6:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80028ea:	2c01      	cmp	r4, #1
 80028ec:	f04f 0500 	mov.w	r5, #0
 80028f0:	f04f 0402 	mov.w	r4, #2
 80028f4:	d124      	bne.n	8002940 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f6:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028fa:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fc:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028fe:	6825      	ldr	r5, [r4, #0]
 8002900:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8002904:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8002906:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002908:	6883      	ldr	r3, [r0, #8]
 800290a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800290c:	bf0e      	itee	eq
 800290e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8002910:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8002912:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002914:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8002916:	bf08      	it	eq
 8002918:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291a:	233f      	movs	r3, #63	; 0x3f
 800291c:	4093      	lsls	r3, r2
 800291e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002920:	6823      	ldr	r3, [r4, #0]
 8002922:	f043 0316 	orr.w	r3, r3, #22
 8002926:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002928:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800292a:	b11b      	cbz	r3, 8002934 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	f043 0308 	orr.w	r3, r3, #8
 8002932:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002934:	6823      	ldr	r3, [r4, #0]
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800293c:	2000      	movs	r0, #0
}
 800293e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8002940:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002944:	2002      	movs	r0, #2
 8002946:	e7fa      	b.n	800293e <HAL_DMA_Start_IT+0x6a>

08002948 <HAL_DMA_Abort>:
{
 8002948:	b570      	push	{r4, r5, r6, lr}
 800294a:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800294c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800294e:	f7ff fb99 	bl	8002084 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002952:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002956:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8002958:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295a:	d006      	beq.n	800296a <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002960:	2300      	movs	r3, #0
 8002962:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002966:	2001      	movs	r0, #1
}
 8002968:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800296a:	6823      	ldr	r3, [r4, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	f022 0216 	bic.w	r2, r2, #22
 8002972:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800297a:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800297c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800297e:	b90a      	cbnz	r2, 8002984 <HAL_DMA_Abort+0x3c>
 8002980:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002982:	b11a      	cbz	r2, 800298c <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	f022 0208 	bic.w	r2, r2, #8
 800298a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	f022 0201 	bic.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002994:	6823      	ldr	r3, [r4, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f013 0301 	ands.w	r3, r3, #1
 800299c:	d10a      	bne.n	80029b4 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80029a0:	223f      	movs	r2, #63	; 0x3f
 80029a2:	408a      	lsls	r2, r1
 80029a4:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 80029a6:	2201      	movs	r2, #1
 80029a8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80029ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 80029b0:	4618      	mov	r0, r3
 80029b2:	e7d9      	b.n	8002968 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029b4:	f7ff fb66 	bl	8002084 <HAL_GetTick>
 80029b8:	1b40      	subs	r0, r0, r5
 80029ba:	2805      	cmp	r0, #5
 80029bc:	d9ea      	bls.n	8002994 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029be:	2320      	movs	r3, #32
 80029c0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80029c4:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029c6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80029ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80029ce:	e7cb      	b.n	8002968 <HAL_DMA_Abort+0x20>

080029d0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029d0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d003      	beq.n	80029e0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d8:	2380      	movs	r3, #128	; 0x80
 80029da:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80029dc:	2001      	movs	r0, #1
 80029de:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80029e0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80029e2:	2305      	movs	r3, #5
 80029e4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80029e8:	6813      	ldr	r3, [r2, #0]
 80029ea:	f023 0301 	bic.w	r3, r3, #1
 80029ee:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80029f0:	2000      	movs	r0, #0
}
 80029f2:	4770      	bx	lr

080029f4 <HAL_DMA_IRQHandler>:
{
 80029f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80029f6:	2300      	movs	r3, #0
 80029f8:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029fa:	4b5c      	ldr	r3, [pc, #368]	; (8002b6c <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fc:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80029fe:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8002a02:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a04:	2208      	movs	r2, #8
 8002a06:	409a      	lsls	r2, r3
 8002a08:	4232      	tst	r2, r6
{
 8002a0a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0c:	d00c      	beq.n	8002a28 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a0e:	6801      	ldr	r1, [r0, #0]
 8002a10:	6808      	ldr	r0, [r1, #0]
 8002a12:	0740      	lsls	r0, r0, #29
 8002a14:	d508      	bpl.n	8002a28 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a16:	6808      	ldr	r0, [r1, #0]
 8002a18:	f020 0004 	bic.w	r0, r0, #4
 8002a1c:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a1e:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a20:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002a22:	f042 0201 	orr.w	r2, r2, #1
 8002a26:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	4232      	tst	r2, r6
 8002a2e:	d008      	beq.n	8002a42 <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a30:	6821      	ldr	r1, [r4, #0]
 8002a32:	6949      	ldr	r1, [r1, #20]
 8002a34:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a36:	bf41      	itttt	mi
 8002a38:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a3a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002a3c:	f042 0202 	orrmi.w	r2, r2, #2
 8002a40:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	2204      	movs	r2, #4
 8002a44:	409a      	lsls	r2, r3
 8002a46:	4232      	tst	r2, r6
 8002a48:	d008      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a4a:	6821      	ldr	r1, [r4, #0]
 8002a4c:	6809      	ldr	r1, [r1, #0]
 8002a4e:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a50:	bf41      	itttt	mi
 8002a52:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a54:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002a56:	f042 0204 	orrmi.w	r2, r2, #4
 8002a5a:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	409a      	lsls	r2, r3
 8002a60:	4232      	tst	r2, r6
 8002a62:	d010      	beq.n	8002a86 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	0709      	lsls	r1, r1, #28
 8002a6a:	d50c      	bpl.n	8002a86 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a6c:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	0350      	lsls	r0, r2, #13
 8002a72:	d537      	bpl.n	8002ae4 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	0319      	lsls	r1, r3, #12
 8002a78:	d401      	bmi.n	8002a7e <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002a7a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a7c:	e000      	b.n	8002a80 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a7e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002a80:	b10b      	cbz	r3, 8002a86 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8002a82:	4620      	mov	r0, r4
 8002a84:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a86:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002a88:	2220      	movs	r2, #32
 8002a8a:	408a      	lsls	r2, r1
 8002a8c:	4232      	tst	r2, r6
 8002a8e:	d03a      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	06c6      	lsls	r6, r0, #27
 8002a96:	d536      	bpl.n	8002b06 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a98:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a9a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002a9e:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa0:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002aa2:	d127      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aa4:	f022 0216 	bic.w	r2, r2, #22
 8002aa8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab0:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002ab4:	b90a      	cbnz	r2, 8002aba <HAL_DMA_IRQHandler+0xc6>
 8002ab6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002ab8:	b11a      	cbz	r2, 8002ac2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	f022 0208 	bic.w	r2, r2, #8
 8002ac0:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac2:	233f      	movs	r3, #63	; 0x3f
 8002ac4:	408b      	lsls	r3, r1
 8002ac6:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002ad4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d045      	beq.n	8002b66 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8002ada:	4620      	mov	r0, r4
}
 8002adc:	b003      	add	sp, #12
 8002ade:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8002ae2:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ae8:	bf5e      	ittt	pl
 8002aea:	681a      	ldrpl	r2, [r3, #0]
 8002aec:	f022 0208 	bicpl.w	r2, r2, #8
 8002af0:	601a      	strpl	r2, [r3, #0]
 8002af2:	e7c2      	b.n	8002a7a <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af4:	0350      	lsls	r0, r2, #13
 8002af6:	d527      	bpl.n	8002b48 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	0319      	lsls	r1, r3, #12
 8002afc:	d431      	bmi.n	8002b62 <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 8002afe:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8002b00:	b10b      	cbz	r3, 8002b06 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 8002b02:	4620      	mov	r0, r4
 8002b04:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b06:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b08:	b36b      	cbz	r3, 8002b66 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b0a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002b0c:	07da      	lsls	r2, r3, #31
 8002b0e:	d519      	bpl.n	8002b44 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 8002b10:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b12:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002b16:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b1a:	2305      	movs	r3, #5
 8002b1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002b28:	9b01      	ldr	r3, [sp, #4]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	42bb      	cmp	r3, r7
 8002b2e:	9301      	str	r3, [sp, #4]
 8002b30:	d802      	bhi.n	8002b38 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b32:	6813      	ldr	r3, [r2, #0]
 8002b34:	07db      	lsls	r3, r3, #31
 8002b36:	d4f7      	bmi.n	8002b28 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002b44:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002b46:	e7c6      	b.n	8002ad6 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002b4e:	d108      	bne.n	8002b62 <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	f021 0110 	bic.w	r1, r1, #16
 8002b56:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002b5e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8002b62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b64:	e7cc      	b.n	8002b00 <HAL_DMA_IRQHandler+0x10c>
}
 8002b66:	b003      	add	sp, #12
 8002b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	20000008 	.word	0x20000008

08002b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b74:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8002d14 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b78:	4a64      	ldr	r2, [pc, #400]	; (8002d0c <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b7a:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b7c:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002b7e:	2401      	movs	r4, #1
 8002b80:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b82:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002b86:	43ac      	bics	r4, r5
 8002b88:	f040 80ad 	bne.w	8002ce6 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b8c:	684d      	ldr	r5, [r1, #4]
 8002b8e:	f005 0403 	and.w	r4, r5, #3
 8002b92:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b96:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b98:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b9a:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9e:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba0:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ba4:	d834      	bhi.n	8002c10 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002ba6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bac:	68cf      	ldr	r7, [r1, #12]
 8002bae:	fa07 f708 	lsl.w	r7, r7, r8
 8002bb2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002bb6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002bb8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bba:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bbe:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8002bc2:	409f      	lsls	r7, r3
 8002bc4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002bc8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002bca:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bcc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bd0:	688f      	ldr	r7, [r1, #8]
 8002bd2:	fa07 f708 	lsl.w	r7, r7, r8
 8002bd6:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bda:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002bdc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	d119      	bne.n	8002c14 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8002be0:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002be4:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002be8:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002bec:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002bf4:	f04f 0e0f 	mov.w	lr, #15
 8002bf8:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002bfc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c00:	690f      	ldr	r7, [r1, #16]
 8002c02:	fa07 f70b 	lsl.w	r7, r7, fp
 8002c06:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002c0a:	f8ca 7020 	str.w	r7, [sl, #32]
 8002c0e:	e001      	b.n	8002c14 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c10:	2c03      	cmp	r4, #3
 8002c12:	d1da      	bne.n	8002bca <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002c14:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c16:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c1a:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c1c:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c1e:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8002c22:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c24:	d05f      	beq.n	8002ce6 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c26:	f04f 0a00 	mov.w	sl, #0
 8002c2a:	f8cd a004 	str.w	sl, [sp, #4]
 8002c2e:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c32:	4c37      	ldr	r4, [pc, #220]	; (8002d10 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c34:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002c38:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002c3c:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002c40:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002c44:	9601      	str	r6, [sp, #4]
 8002c46:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c48:	f023 0603 	bic.w	r6, r3, #3
 8002c4c:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002c50:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c54:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002c58:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c5c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002c60:	270f      	movs	r7, #15
 8002c62:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c66:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c68:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c6c:	d042      	beq.n	8002cf4 <HAL_GPIO_Init+0x184>
 8002c6e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c72:	42a0      	cmp	r0, r4
 8002c74:	d040      	beq.n	8002cf8 <HAL_GPIO_Init+0x188>
 8002c76:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c7a:	42a0      	cmp	r0, r4
 8002c7c:	d03e      	beq.n	8002cfc <HAL_GPIO_Init+0x18c>
 8002c7e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c82:	42a0      	cmp	r0, r4
 8002c84:	d03c      	beq.n	8002d00 <HAL_GPIO_Init+0x190>
 8002c86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c8a:	42a0      	cmp	r0, r4
 8002c8c:	d03a      	beq.n	8002d04 <HAL_GPIO_Init+0x194>
 8002c8e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c92:	42a0      	cmp	r0, r4
 8002c94:	d038      	beq.n	8002d08 <HAL_GPIO_Init+0x198>
 8002c96:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c9a:	42a0      	cmp	r0, r4
 8002c9c:	bf0c      	ite	eq
 8002c9e:	2406      	moveq	r4, #6
 8002ca0:	2407      	movne	r4, #7
 8002ca2:	fa04 f40e 	lsl.w	r4, r4, lr
 8002ca6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8002caa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002cac:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cb0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8002cb2:	bf54      	ite	pl
 8002cb4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002cb6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002cba:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cbe:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	bf54      	ite	pl
 8002cc2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002cc4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002cc8:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8002cca:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ccc:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8002cce:	bf54      	ite	pl
 8002cd0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002cd2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002cd6:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cd8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cda:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002cdc:	bf54      	ite	pl
 8002cde:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002ce0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002ce4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	f47f af47 	bne.w	8002b7c <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8002cee:	b003      	add	sp, #12
 8002cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cf4:	4654      	mov	r4, sl
 8002cf6:	e7d4      	b.n	8002ca2 <HAL_GPIO_Init+0x132>
 8002cf8:	2401      	movs	r4, #1
 8002cfa:	e7d2      	b.n	8002ca2 <HAL_GPIO_Init+0x132>
 8002cfc:	2402      	movs	r4, #2
 8002cfe:	e7d0      	b.n	8002ca2 <HAL_GPIO_Init+0x132>
 8002d00:	2403      	movs	r4, #3
 8002d02:	e7ce      	b.n	8002ca2 <HAL_GPIO_Init+0x132>
 8002d04:	2404      	movs	r4, #4
 8002d06:	e7cc      	b.n	8002ca2 <HAL_GPIO_Init+0x132>
 8002d08:	2405      	movs	r4, #5
 8002d0a:	e7ca      	b.n	8002ca2 <HAL_GPIO_Init+0x132>
 8002d0c:	40013c00 	.word	0x40013c00
 8002d10:	40020000 	.word	0x40020000
 8002d14:	40023800 	.word	0x40023800

08002d18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d18:	b10a      	cbz	r2, 8002d1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1a:	6181      	str	r1, [r0, #24]
  }
}
 8002d1c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d1e:	0409      	lsls	r1, r1, #16
 8002d20:	e7fb      	b.n	8002d1a <HAL_GPIO_WritePin+0x2>

08002d22 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d22:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d24:	ea01 0203 	and.w	r2, r1, r3
 8002d28:	ea21 0103 	bic.w	r1, r1, r3
 8002d2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8002d30:	6181      	str	r1, [r0, #24]
}
 8002d32:	4770      	bx	lr

08002d34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d38:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	b910      	cbnz	r0, 8002d44 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8002d3e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b44      	ldr	r3, [pc, #272]	; (8002e58 <HAL_RCC_ClockConfig+0x124>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	f002 020f 	and.w	r2, r2, #15
 8002d4c:	428a      	cmp	r2, r1
 8002d4e:	d328      	bcc.n	8002da2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	6822      	ldr	r2, [r4, #0]
 8002d52:	0797      	lsls	r7, r2, #30
 8002d54:	d42d      	bmi.n	8002db2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d56:	07d0      	lsls	r0, r2, #31
 8002d58:	d441      	bmi.n	8002dde <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d5a:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <HAL_RCC_ClockConfig+0x124>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	f002 020f 	and.w	r2, r2, #15
 8002d62:	42aa      	cmp	r2, r5
 8002d64:	d866      	bhi.n	8002e34 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	0751      	lsls	r1, r2, #29
 8002d6a:	d46c      	bmi.n	8002e46 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d6c:	0713      	lsls	r3, r2, #28
 8002d6e:	d507      	bpl.n	8002d80 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d70:	4a3a      	ldr	r2, [pc, #232]	; (8002e5c <HAL_RCC_ClockConfig+0x128>)
 8002d72:	6921      	ldr	r1, [r4, #16]
 8002d74:	6893      	ldr	r3, [r2, #8]
 8002d76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002d7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002d7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d80:	f000 f894 	bl	8002eac <HAL_RCC_GetSysClockFreq>
 8002d84:	4b35      	ldr	r3, [pc, #212]	; (8002e5c <HAL_RCC_ClockConfig+0x128>)
 8002d86:	4a36      	ldr	r2, [pc, #216]	; (8002e60 <HAL_RCC_ClockConfig+0x12c>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	40d8      	lsrs	r0, r3
 8002d92:	4b34      	ldr	r3, [pc, #208]	; (8002e64 <HAL_RCC_ClockConfig+0x130>)
 8002d94:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002d96:	4b34      	ldr	r3, [pc, #208]	; (8002e68 <HAL_RCC_ClockConfig+0x134>)
 8002d98:	6818      	ldr	r0, [r3, #0]
 8002d9a:	f7ff f929 	bl	8001ff0 <HAL_InitTick>
  return HAL_OK;
 8002d9e:	2000      	movs	r0, #0
 8002da0:	e7ce      	b.n	8002d40 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da2:	b2ca      	uxtb	r2, r1
 8002da4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	428b      	cmp	r3, r1
 8002dae:	d1c6      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xa>
 8002db0:	e7ce      	b.n	8002d50 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db2:	4b2a      	ldr	r3, [pc, #168]	; (8002e5c <HAL_RCC_ClockConfig+0x128>)
 8002db4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002db8:	bf1e      	ittt	ne
 8002dba:	6899      	ldrne	r1, [r3, #8]
 8002dbc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002dc0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002dc4:	bf42      	ittt	mi
 8002dc6:	6899      	ldrmi	r1, [r3, #8]
 8002dc8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002dcc:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dce:	4923      	ldr	r1, [pc, #140]	; (8002e5c <HAL_RCC_ClockConfig+0x128>)
 8002dd0:	68a0      	ldr	r0, [r4, #8]
 8002dd2:	688b      	ldr	r3, [r1, #8]
 8002dd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dd8:	4303      	orrs	r3, r0
 8002dda:	608b      	str	r3, [r1, #8]
 8002ddc:	e7bb      	b.n	8002d56 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dde:	6862      	ldr	r2, [r4, #4]
 8002de0:	4b1e      	ldr	r3, [pc, #120]	; (8002e5c <HAL_RCC_ClockConfig+0x128>)
 8002de2:	2a01      	cmp	r2, #1
 8002de4:	d11c      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	d0a7      	beq.n	8002d3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002dee:	4e1b      	ldr	r6, [pc, #108]	; (8002e5c <HAL_RCC_ClockConfig+0x128>)
 8002df0:	68b3      	ldr	r3, [r6, #8]
 8002df2:	f023 0303 	bic.w	r3, r3, #3
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002dfa:	f7ff f943 	bl	8002084 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dfe:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002e02:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e04:	68b3      	ldr	r3, [r6, #8]
 8002e06:	6862      	ldr	r2, [r4, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002e10:	d0a3      	beq.n	8002d5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e12:	f7ff f937 	bl	8002084 <HAL_GetTick>
 8002e16:	1bc0      	subs	r0, r0, r7
 8002e18:	4540      	cmp	r0, r8
 8002e1a:	d9f3      	bls.n	8002e04 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	e78f      	b.n	8002d40 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e20:	1e91      	subs	r1, r2, #2
 8002e22:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e24:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e26:	d802      	bhi.n	8002e2e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e28:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002e2c:	e7de      	b.n	8002dec <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2e:	f013 0f02 	tst.w	r3, #2
 8002e32:	e7db      	b.n	8002dec <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e34:	b2ea      	uxtb	r2, r5
 8002e36:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	42ab      	cmp	r3, r5
 8002e40:	f47f af7d 	bne.w	8002d3e <HAL_RCC_ClockConfig+0xa>
 8002e44:	e78f      	b.n	8002d66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e46:	4905      	ldr	r1, [pc, #20]	; (8002e5c <HAL_RCC_ClockConfig+0x128>)
 8002e48:	68e0      	ldr	r0, [r4, #12]
 8002e4a:	688b      	ldr	r3, [r1, #8]
 8002e4c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002e50:	4303      	orrs	r3, r0
 8002e52:	608b      	str	r3, [r1, #8]
 8002e54:	e78a      	b.n	8002d6c <HAL_RCC_ClockConfig+0x38>
 8002e56:	bf00      	nop
 8002e58:	40023c00 	.word	0x40023c00
 8002e5c:	40023800 	.word	0x40023800
 8002e60:	08009a7d 	.word	0x08009a7d
 8002e64:	20000008 	.word	0x20000008
 8002e68:	20000010 	.word	0x20000010

08002e6c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e6c:	4b04      	ldr	r3, [pc, #16]	; (8002e80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002e6e:	4a05      	ldr	r2, [pc, #20]	; (8002e84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002e76:	5cd3      	ldrb	r3, [r2, r3]
 8002e78:	4a03      	ldr	r2, [pc, #12]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e7a:	6810      	ldr	r0, [r2, #0]
}
 8002e7c:	40d8      	lsrs	r0, r3
 8002e7e:	4770      	bx	lr
 8002e80:	40023800 	.word	0x40023800
 8002e84:	08009a8d 	.word	0x08009a8d
 8002e88:	20000008 	.word	0x20000008

08002e8c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e8c:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002e8e:	4a05      	ldr	r2, [pc, #20]	; (8002ea4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002e96:	5cd3      	ldrb	r3, [r2, r3]
 8002e98:	4a03      	ldr	r2, [pc, #12]	; (8002ea8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002e9a:	6810      	ldr	r0, [r2, #0]
}
 8002e9c:	40d8      	lsrs	r0, r3
 8002e9e:	4770      	bx	lr
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	08009a8d 	.word	0x08009a8d
 8002ea8:	20000008 	.word	0x20000008

08002eac <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eac:	4920      	ldr	r1, [pc, #128]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8002eae:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eb0:	688b      	ldr	r3, [r1, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d007      	beq.n	8002eca <HAL_RCC_GetSysClockFreq+0x1e>
 8002eba:	2b0c      	cmp	r3, #12
 8002ebc:	d020      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x54>
 8002ebe:	481d      	ldr	r0, [pc, #116]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x88>)
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	bf08      	it	eq
 8002ec6:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002ec8:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eca:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ecc:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ece:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ed0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed4:	bf14      	ite	ne
 8002ed6:	4818      	ldrne	r0, [pc, #96]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed8:	4816      	ldreq	r0, [pc, #88]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eda:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002ede:	bf18      	it	ne
 8002ee0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee6:	fba1 0100 	umull	r0, r1, r1, r0
 8002eea:	f7fd fefd 	bl	8000ce8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002eee:	4b10      	ldr	r3, [pc, #64]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x84>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8002efa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002efe:	e7e3      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f00:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f02:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f04:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f06:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0a:	bf14      	ite	ne
 8002f0c:	480a      	ldrne	r0, [pc, #40]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f0e:	4809      	ldreq	r0, [pc, #36]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f10:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002f14:	bf18      	it	ne
 8002f16:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f18:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1c:	fba1 0100 	umull	r0, r1, r1, r0
 8002f20:	f7fd fee2 	bl	8000ce8 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f24:	4b02      	ldr	r3, [pc, #8]	; (8002f30 <HAL_RCC_GetSysClockFreq+0x84>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002f2c:	e7e5      	b.n	8002efa <HAL_RCC_GetSysClockFreq+0x4e>
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	00f42400 	.word	0x00f42400
 8002f38:	017d7840 	.word	0x017d7840

08002f3c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f40:	4604      	mov	r4, r0
 8002f42:	2800      	cmp	r0, #0
 8002f44:	d030      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f46:	6803      	ldr	r3, [r0, #0]
 8002f48:	07df      	lsls	r7, r3, #31
 8002f4a:	d410      	bmi.n	8002f6e <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	079e      	lsls	r6, r3, #30
 8002f50:	d463      	bmi.n	800301a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	071a      	lsls	r2, r3, #28
 8002f56:	f100 80ad 	bmi.w	80030b4 <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	075b      	lsls	r3, r3, #29
 8002f5e:	f100 80cd 	bmi.w	80030fc <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f62:	69a0      	ldr	r0, [r4, #24]
 8002f64:	2800      	cmp	r0, #0
 8002f66:	f040 8135 	bne.w	80031d4 <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	e034      	b.n	8002fd8 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f6e:	4b96      	ldr	r3, [pc, #600]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	f002 020c 	and.w	r2, r2, #12
 8002f76:	2a04      	cmp	r2, #4
 8002f78:	d00f      	beq.n	8002f9a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002f80:	2a08      	cmp	r2, #8
 8002f82:	d102      	bne.n	8002f8a <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	0255      	lsls	r5, r2, #9
 8002f88:	d407      	bmi.n	8002f9a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002f90:	2a0c      	cmp	r2, #12
 8002f92:	d10b      	bne.n	8002fac <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	0258      	lsls	r0, r3, #9
 8002f98:	d508      	bpl.n	8002fac <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9a:	4b8b      	ldr	r3, [pc, #556]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	0399      	lsls	r1, r3, #14
 8002fa0:	d5d4      	bpl.n	8002f4c <HAL_RCC_OscConfig+0x10>
 8002fa2:	6863      	ldr	r3, [r4, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1d1      	bne.n	8002f4c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002fa8:	2001      	movs	r0, #1
 8002faa:	e015      	b.n	8002fd8 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fac:	6863      	ldr	r3, [r4, #4]
 8002fae:	4d86      	ldr	r5, [pc, #536]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
 8002fb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fb4:	d113      	bne.n	8002fde <HAL_RCC_OscConfig+0xa2>
 8002fb6:	682b      	ldr	r3, [r5, #0]
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002fbe:	f7ff f861 	bl	8002084 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4e81      	ldr	r6, [pc, #516]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002fc4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	6833      	ldr	r3, [r6, #0]
 8002fc8:	039a      	lsls	r2, r3, #14
 8002fca:	d4bf      	bmi.n	8002f4c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fcc:	f7ff f85a 	bl	8002084 <HAL_GetTick>
 8002fd0:	1b40      	subs	r0, r0, r5
 8002fd2:	2864      	cmp	r0, #100	; 0x64
 8002fd4:	d9f7      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8002fd6:	2003      	movs	r0, #3
}
 8002fd8:	b002      	add	sp, #8
 8002fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe2:	d104      	bne.n	8002fee <HAL_RCC_OscConfig+0xb2>
 8002fe4:	682b      	ldr	r3, [r5, #0]
 8002fe6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fea:	602b      	str	r3, [r5, #0]
 8002fec:	e7e3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x7a>
 8002fee:	682a      	ldr	r2, [r5, #0]
 8002ff0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ff4:	602a      	str	r2, [r5, #0]
 8002ff6:	682a      	ldr	r2, [r5, #0]
 8002ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ffc:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1dd      	bne.n	8002fbe <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8003002:	f7ff f83f 	bl	8002084 <HAL_GetTick>
 8003006:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003008:	682b      	ldr	r3, [r5, #0]
 800300a:	039b      	lsls	r3, r3, #14
 800300c:	d59e      	bpl.n	8002f4c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800300e:	f7ff f839 	bl	8002084 <HAL_GetTick>
 8003012:	1b80      	subs	r0, r0, r6
 8003014:	2864      	cmp	r0, #100	; 0x64
 8003016:	d9f7      	bls.n	8003008 <HAL_RCC_OscConfig+0xcc>
 8003018:	e7dd      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800301a:	4b6b      	ldr	r3, [pc, #428]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	f012 0f0c 	tst.w	r2, #12
 8003022:	d00f      	beq.n	8003044 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003024:	689a      	ldr	r2, [r3, #8]
 8003026:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800302a:	2a08      	cmp	r2, #8
 800302c:	d102      	bne.n	8003034 <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	0257      	lsls	r7, r2, #9
 8003032:	d507      	bpl.n	8003044 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003034:	689a      	ldr	r2, [r3, #8]
 8003036:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800303a:	2a0c      	cmp	r2, #12
 800303c:	d111      	bne.n	8003062 <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	025e      	lsls	r6, r3, #9
 8003042:	d40e      	bmi.n	8003062 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003044:	4a60      	ldr	r2, [pc, #384]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
 8003046:	6813      	ldr	r3, [r2, #0]
 8003048:	079d      	lsls	r5, r3, #30
 800304a:	d502      	bpl.n	8003052 <HAL_RCC_OscConfig+0x116>
 800304c:	68e3      	ldr	r3, [r4, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d1aa      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003052:	6813      	ldr	r3, [r2, #0]
 8003054:	6921      	ldr	r1, [r4, #16]
 8003056:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800305a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800305e:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003060:	e777      	b.n	8002f52 <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003062:	68e2      	ldr	r2, [r4, #12]
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <HAL_RCC_OscConfig+0x290>)
 8003066:	b1b2      	cbz	r2, 8003096 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 8003068:	2201      	movs	r2, #1
 800306a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800306c:	f7ff f80a 	bl	8002084 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003070:	4d55      	ldr	r5, [pc, #340]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8003072:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	682b      	ldr	r3, [r5, #0]
 8003076:	0798      	lsls	r0, r3, #30
 8003078:	d507      	bpl.n	800308a <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	682b      	ldr	r3, [r5, #0]
 800307c:	6922      	ldr	r2, [r4, #16]
 800307e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003082:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003086:	602b      	str	r3, [r5, #0]
 8003088:	e763      	b.n	8002f52 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308a:	f7fe fffb 	bl	8002084 <HAL_GetTick>
 800308e:	1b80      	subs	r0, r0, r6
 8003090:	2802      	cmp	r0, #2
 8003092:	d9ef      	bls.n	8003074 <HAL_RCC_OscConfig+0x138>
 8003094:	e79f      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8003096:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003098:	f7fe fff4 	bl	8002084 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309c:	4e4a      	ldr	r6, [pc, #296]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800309e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a0:	6833      	ldr	r3, [r6, #0]
 80030a2:	0799      	lsls	r1, r3, #30
 80030a4:	f57f af55 	bpl.w	8002f52 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a8:	f7fe ffec 	bl	8002084 <HAL_GetTick>
 80030ac:	1b40      	subs	r0, r0, r5
 80030ae:	2802      	cmp	r0, #2
 80030b0:	d9f6      	bls.n	80030a0 <HAL_RCC_OscConfig+0x164>
 80030b2:	e790      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030b4:	6962      	ldr	r2, [r4, #20]
 80030b6:	4b45      	ldr	r3, [pc, #276]	; (80031cc <HAL_RCC_OscConfig+0x290>)
 80030b8:	b182      	cbz	r2, 80030dc <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 80030ba:	2201      	movs	r2, #1
 80030bc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80030c0:	f7fe ffe0 	bl	8002084 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c4:	4e40      	ldr	r6, [pc, #256]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80030c6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80030ca:	079f      	lsls	r7, r3, #30
 80030cc:	f53f af45 	bmi.w	8002f5a <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe ffd8 	bl	8002084 <HAL_GetTick>
 80030d4:	1b40      	subs	r0, r0, r5
 80030d6:	2802      	cmp	r0, #2
 80030d8:	d9f6      	bls.n	80030c8 <HAL_RCC_OscConfig+0x18c>
 80030da:	e77c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80030dc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80030e0:	f7fe ffd0 	bl	8002084 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	4e38      	ldr	r6, [pc, #224]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80030e6:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80030ea:	0798      	lsls	r0, r3, #30
 80030ec:	f57f af35 	bpl.w	8002f5a <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f0:	f7fe ffc8 	bl	8002084 <HAL_GetTick>
 80030f4:	1b40      	subs	r0, r0, r5
 80030f6:	2802      	cmp	r0, #2
 80030f8:	d9f6      	bls.n	80030e8 <HAL_RCC_OscConfig+0x1ac>
 80030fa:	e76c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
 80030fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003100:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8003104:	d128      	bne.n	8003158 <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003106:	9201      	str	r2, [sp, #4]
 8003108:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800310a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800310e:	641a      	str	r2, [r3, #64]	; 0x40
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800311a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	4d2c      	ldr	r5, [pc, #176]	; (80031d0 <HAL_RCC_OscConfig+0x294>)
 800311e:	682b      	ldr	r3, [r5, #0]
 8003120:	05d9      	lsls	r1, r3, #23
 8003122:	d51b      	bpl.n	800315c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003124:	68a3      	ldr	r3, [r4, #8]
 8003126:	4d28      	ldr	r5, [pc, #160]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
 8003128:	2b01      	cmp	r3, #1
 800312a:	d127      	bne.n	800317c <HAL_RCC_OscConfig+0x240>
 800312c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003134:	f7fe ffa6 	bl	8002084 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003138:	4e23      	ldr	r6, [pc, #140]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800313a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003140:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003142:	079b      	lsls	r3, r3, #30
 8003144:	d539      	bpl.n	80031ba <HAL_RCC_OscConfig+0x27e>
    if(pwrclkchanged == SET)
 8003146:	2f00      	cmp	r7, #0
 8003148:	f43f af0b 	beq.w	8002f62 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 800314c:	4a1e      	ldr	r2, [pc, #120]	; (80031c8 <HAL_RCC_OscConfig+0x28c>)
 800314e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003154:	6413      	str	r3, [r2, #64]	; 0x40
 8003156:	e704      	b.n	8002f62 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8003158:	2700      	movs	r7, #0
 800315a:	e7df      	b.n	800311c <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315c:	682b      	ldr	r3, [r5, #0]
 800315e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003162:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003164:	f7fe ff8e 	bl	8002084 <HAL_GetTick>
 8003168:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316a:	682b      	ldr	r3, [r5, #0]
 800316c:	05da      	lsls	r2, r3, #23
 800316e:	d4d9      	bmi.n	8003124 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fe ff88 	bl	8002084 <HAL_GetTick>
 8003174:	1b80      	subs	r0, r0, r6
 8003176:	2802      	cmp	r0, #2
 8003178:	d9f7      	bls.n	800316a <HAL_RCC_OscConfig+0x22e>
 800317a:	e72c      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800317c:	2b05      	cmp	r3, #5
 800317e:	d104      	bne.n	800318a <HAL_RCC_OscConfig+0x24e>
 8003180:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003182:	f043 0304 	orr.w	r3, r3, #4
 8003186:	672b      	str	r3, [r5, #112]	; 0x70
 8003188:	e7d0      	b.n	800312c <HAL_RCC_OscConfig+0x1f0>
 800318a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800318c:	f022 0201 	bic.w	r2, r2, #1
 8003190:	672a      	str	r2, [r5, #112]	; 0x70
 8003192:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003194:	f022 0204 	bic.w	r2, r2, #4
 8003198:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1ca      	bne.n	8003134 <HAL_RCC_OscConfig+0x1f8>
      tickstart = HAL_GetTick();
 800319e:	f7fe ff71 	bl	8002084 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80031a6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80031aa:	0798      	lsls	r0, r3, #30
 80031ac:	d5cb      	bpl.n	8003146 <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ae:	f7fe ff69 	bl	8002084 <HAL_GetTick>
 80031b2:	1b80      	subs	r0, r0, r6
 80031b4:	4540      	cmp	r0, r8
 80031b6:	d9f7      	bls.n	80031a8 <HAL_RCC_OscConfig+0x26c>
 80031b8:	e70d      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ba:	f7fe ff63 	bl	8002084 <HAL_GetTick>
 80031be:	1b40      	subs	r0, r0, r5
 80031c0:	4540      	cmp	r0, r8
 80031c2:	d9bd      	bls.n	8003140 <HAL_RCC_OscConfig+0x204>
 80031c4:	e707      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800
 80031cc:	42470000 	.word	0x42470000
 80031d0:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031d4:	4d3b      	ldr	r5, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x388>)
 80031d6:	68ab      	ldr	r3, [r5, #8]
 80031d8:	f003 030c 	and.w	r3, r3, #12
 80031dc:	2b08      	cmp	r3, #8
 80031de:	d040      	beq.n	8003262 <HAL_RCC_OscConfig+0x326>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e0:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <HAL_RCC_OscConfig+0x38c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80031e6:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031e8:	d12e      	bne.n	8003248 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 80031ea:	f7fe ff4b 	bl	8002084 <HAL_GetTick>
 80031ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f0:	682b      	ldr	r3, [r5, #0]
 80031f2:	0199      	lsls	r1, r3, #6
 80031f4:	d422      	bmi.n	800323c <HAL_RCC_OscConfig+0x300>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031f6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80031fe:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003202:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003204:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003208:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800320a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800320e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003210:	0852      	lsrs	r2, r2, #1
 8003212:	3a01      	subs	r2, #1
 8003214:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003218:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <HAL_RCC_OscConfig+0x38c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800321c:	4d29      	ldr	r5, [pc, #164]	; (80032c4 <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_ENABLE();
 800321e:	2201      	movs	r2, #1
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003222:	f7fe ff2f 	bl	8002084 <HAL_GetTick>
 8003226:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003228:	682b      	ldr	r3, [r5, #0]
 800322a:	019a      	lsls	r2, r3, #6
 800322c:	f53f ae9d 	bmi.w	8002f6a <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003230:	f7fe ff28 	bl	8002084 <HAL_GetTick>
 8003234:	1b00      	subs	r0, r0, r4
 8003236:	2802      	cmp	r0, #2
 8003238:	d9f6      	bls.n	8003228 <HAL_RCC_OscConfig+0x2ec>
 800323a:	e6cc      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe ff22 	bl	8002084 <HAL_GetTick>
 8003240:	1b80      	subs	r0, r0, r6
 8003242:	2802      	cmp	r0, #2
 8003244:	d9d4      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2b4>
 8003246:	e6c6      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8003248:	f7fe ff1c 	bl	8002084 <HAL_GetTick>
 800324c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	682b      	ldr	r3, [r5, #0]
 8003250:	019b      	lsls	r3, r3, #6
 8003252:	f57f ae8a 	bpl.w	8002f6a <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003256:	f7fe ff15 	bl	8002084 <HAL_GetTick>
 800325a:	1b00      	subs	r0, r0, r4
 800325c:	2802      	cmp	r0, #2
 800325e:	d9f6      	bls.n	800324e <HAL_RCC_OscConfig+0x312>
 8003260:	e6b9      	b.n	8002fd6 <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003262:	2801      	cmp	r0, #1
 8003264:	f43f aeb8 	beq.w	8002fd8 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8003268:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800326a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800326c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003270:	4291      	cmp	r1, r2
 8003272:	f47f ae99 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003276:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003278:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327c:	428a      	cmp	r2, r1
 800327e:	f47f ae93 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003282:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003288:	401a      	ands	r2, r3
 800328a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800328e:	f47f ae8b 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003292:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003294:	0852      	lsrs	r2, r2, #1
 8003296:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800329a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80032a0:	f47f ae82 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80032a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032aa:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80032ae:	f47f ae7b 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80032b2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80032b4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80032b8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80032bc:	f43f ae55 	beq.w	8002f6a <HAL_RCC_OscConfig+0x2e>
 80032c0:	e672      	b.n	8002fa8 <HAL_RCC_OscConfig+0x6c>
 80032c2:	bf00      	nop
 80032c4:	40023800 	.word	0x40023800
 80032c8:	42470000 	.word	0x42470000

080032cc <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80032cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80032d0:	461d      	mov	r5, r3
 80032d2:	4617      	mov	r7, r2
 80032d4:	4688      	mov	r8, r1
 80032d6:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032d8:	f7fe fed4 	bl	8002084 <HAL_GetTick>
 80032dc:	443d      	add	r5, r7
 80032de:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 80032e0:	f7fe fed0 	bl	8002084 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032e4:	4b22      	ldr	r3, [pc, #136]	; (8003370 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 80032ec:	4605      	mov	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032ee:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f0:	6832      	ldr	r2, [r6, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80032f2:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032f4:	6893      	ldr	r3, [r2, #8]
 80032f6:	ea38 0303 	bics.w	r3, r8, r3
 80032fa:	d001      	beq.n	8003300 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80032fc:	2000      	movs	r0, #0
 80032fe:	e02d      	b.n	800335c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8003300:	1c7b      	adds	r3, r7, #1
 8003302:	d0f7      	beq.n	80032f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003304:	f7fe febe 	bl	8002084 <HAL_GetTick>
 8003308:	1b40      	subs	r0, r0, r5
 800330a:	42a0      	cmp	r0, r4
 800330c:	d329      	bcc.n	8003362 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800330e:	6833      	ldr	r3, [r6, #0]
 8003310:	685a      	ldr	r2, [r3, #4]
 8003312:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003316:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003318:	6872      	ldr	r2, [r6, #4]
 800331a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800331e:	d10a      	bne.n	8003336 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8003320:	68b2      	ldr	r2, [r6, #8]
 8003322:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003326:	d002      	beq.n	800332e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003328:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800332c:	d103      	bne.n	8003336 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003334:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003336:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003338:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800333c:	d107      	bne.n	800334e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800334c:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 800334e:	2301      	movs	r3, #1
 8003350:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003354:	2300      	movs	r3, #0
 8003356:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        return HAL_TIMEOUT;
 800335a:	2003      	movs	r0, #3
}
 800335c:	b002      	add	sp, #8
 800335e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8003362:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003364:	2b00      	cmp	r3, #0
      count--;
 8003366:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003368:	bf08      	it	eq
 800336a:	2400      	moveq	r4, #0
      count--;
 800336c:	3b01      	subs	r3, #1
 800336e:	e7bf      	b.n	80032f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8003370:	20000008 	.word	0x20000008

08003374 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003376:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <SPI_EndRxTxTransaction+0x50>)
 800337a:	6815      	ldr	r5, [r2, #0]
 800337c:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <SPI_EndRxTxTransaction+0x54>)
 800337e:	fbb5 f5f2 	udiv	r5, r5, r2
 8003382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003386:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003388:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800338a:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800338c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8003390:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003392:	d10b      	bne.n	80033ac <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	460a      	mov	r2, r1
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	f7ff ff98 	bl	80032cc <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800339c:	b178      	cbz	r0, 80033be <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800339e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80033a0:	f043 0320 	orr.w	r3, r3, #32
 80033a4:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80033a6:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 80033a8:	b003      	add	sp, #12
 80033aa:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 80033ac:	9b01      	ldr	r3, [sp, #4]
 80033ae:	b133      	cbz	r3, 80033be <SPI_EndRxTxTransaction+0x4a>
      count--;
 80033b0:	9b01      	ldr	r3, [sp, #4]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80033b6:	6823      	ldr	r3, [r4, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	061b      	lsls	r3, r3, #24
 80033bc:	d4f6      	bmi.n	80033ac <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 80033be:	2000      	movs	r0, #0
 80033c0:	e7f2      	b.n	80033a8 <SPI_EndRxTxTransaction+0x34>
 80033c2:	bf00      	nop
 80033c4:	20000008 	.word	0x20000008
 80033c8:	016e3600 	.word	0x016e3600

080033cc <HAL_SPI_Init>:
{
 80033cc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80033ce:	4604      	mov	r4, r0
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d055      	beq.n	8003480 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d14e      	bne.n	8003478 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033da:	6842      	ldr	r2, [r0, #4]
 80033dc:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80033e0:	d000      	beq.n	80033e4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033e2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033e4:	2300      	movs	r3, #0
 80033e6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80033e8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80033ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033f0:	b923      	cbnz	r3, 80033fc <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 80033f2:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 80033f6:	4620      	mov	r0, r4
 80033f8:	f7fe fbaa 	bl	8001b50 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80033fc:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033fe:	68a0      	ldr	r0, [r4, #8]
 8003400:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003402:	2302      	movs	r3, #2
 8003404:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003408:	680b      	ldr	r3, [r1, #0]
 800340a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800340e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003410:	6863      	ldr	r3, [r4, #4]
 8003412:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003416:	f403 7382 	and.w	r3, r3, #260	; 0x104
 800341a:	4303      	orrs	r3, r0
 800341c:	68e0      	ldr	r0, [r4, #12]
 800341e:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8003422:	4303      	orrs	r3, r0
 8003424:	6920      	ldr	r0, [r4, #16]
 8003426:	f000 0002 	and.w	r0, r0, #2
 800342a:	4303      	orrs	r3, r0
 800342c:	6960      	ldr	r0, [r4, #20]
 800342e:	f000 0001 	and.w	r0, r0, #1
 8003432:	4303      	orrs	r3, r0
 8003434:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8003438:	4303      	orrs	r3, r0
 800343a:	69e0      	ldr	r0, [r4, #28]
 800343c:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003440:	4303      	orrs	r3, r0
 8003442:	6a20      	ldr	r0, [r4, #32]
 8003444:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003448:	4303      	orrs	r3, r0
 800344a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800344c:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003450:	4303      	orrs	r3, r0
 8003452:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003454:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003456:	0c12      	lsrs	r2, r2, #16
 8003458:	f003 0310 	and.w	r3, r3, #16
 800345c:	f002 0204 	and.w	r2, r2, #4
 8003460:	431a      	orrs	r2, r3
 8003462:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003464:	69cb      	ldr	r3, [r1, #28]
 8003466:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800346a:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800346c:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800346e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003470:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003472:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003476:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003478:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800347a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800347e:	e7b1      	b.n	80033e4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003480:	2001      	movs	r0, #1
 8003482:	e7f8      	b.n	8003476 <HAL_SPI_Init+0xaa>

08003484 <HAL_SPI_Transmit_DMA>:
{
 8003484:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8003486:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800348a:	2b01      	cmp	r3, #1
{
 800348c:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800348e:	d054      	beq.n	800353a <HAL_SPI_Transmit_DMA+0xb6>
 8003490:	2301      	movs	r3, #1
 8003492:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8003496:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800349a:	2b01      	cmp	r3, #1
 800349c:	b2dd      	uxtb	r5, r3
 800349e:	d14a      	bne.n	8003536 <HAL_SPI_Transmit_DMA+0xb2>
  if ((pData == NULL) || (Size == 0U))
 80034a0:	2900      	cmp	r1, #0
 80034a2:	d031      	beq.n	8003508 <HAL_SPI_Transmit_DMA+0x84>
 80034a4:	2a00      	cmp	r2, #0
 80034a6:	d02f      	beq.n	8003508 <HAL_SPI_Transmit_DMA+0x84>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80034a8:	2303      	movs	r3, #3
 80034aa:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->RxISR       = NULL;
 80034b2:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
  hspi->TxXferCount = Size;
 80034b6:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80034b8:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80034ba:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80034bc:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034be:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 80034c0:	8682      	strh	r2, [r0, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 80034c6:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80034c8:	6301      	str	r1, [r0, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034ca:	d107      	bne.n	80034dc <HAL_SPI_Transmit_DMA+0x58>
    __HAL_SPI_DISABLE(hspi);
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034d2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 80034d4:	6813      	ldr	r3, [r2, #0]
 80034d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034da:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80034dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80034de:	4b18      	ldr	r3, [pc, #96]	; (8003540 <HAL_SPI_Transmit_DMA+0xbc>)
 80034e0:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80034e2:	4b18      	ldr	r3, [pc, #96]	; (8003544 <HAL_SPI_Transmit_DMA+0xc0>)
 80034e4:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80034e6:	4b18      	ldr	r3, [pc, #96]	; (8003548 <HAL_SPI_Transmit_DMA+0xc4>)
 80034e8:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	6503      	str	r3, [r0, #80]	; 0x50
                                 hspi->TxXferCount))
 80034ee:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80034f0:	320c      	adds	r2, #12
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f7ff f9ee 	bl	80028d4 <HAL_DMA_Start_IT>
 80034f8:	b158      	cbz	r0, 8003512 <HAL_SPI_Transmit_DMA+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80034fa:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80034fc:	f043 0310 	orr.w	r3, r3, #16
 8003500:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003502:	2301      	movs	r3, #1
 8003504:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003508:	2300      	movs	r3, #0
 800350a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800350e:	4628      	mov	r0, r5
 8003510:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003518:	bf5e      	ittt	pl
 800351a:	681a      	ldrpl	r2, [r3, #0]
 800351c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003520:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	f042 0220 	orr.w	r2, r2, #32
 8003528:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800352a:	685a      	ldr	r2, [r3, #4]
 800352c:	f042 0202 	orr.w	r2, r2, #2
 8003530:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003532:	2500      	movs	r5, #0
 8003534:	e7e8      	b.n	8003508 <HAL_SPI_Transmit_DMA+0x84>
    errorcode = HAL_BUSY;
 8003536:	2502      	movs	r5, #2
 8003538:	e7e6      	b.n	8003508 <HAL_SPI_Transmit_DMA+0x84>
  __HAL_LOCK(hspi);
 800353a:	2502      	movs	r5, #2
 800353c:	e7e7      	b.n	800350e <HAL_SPI_Transmit_DMA+0x8a>
 800353e:	bf00      	nop
 8003540:	08003551 	.word	0x08003551
 8003544:	0800357f 	.word	0x0800357f
 8003548:	0800355d 	.word	0x0800355d

0800354c <HAL_SPI_TxCpltCallback>:
 800354c:	4770      	bx	lr

0800354e <HAL_SPI_TxHalfCpltCallback>:
 800354e:	4770      	bx	lr

08003550 <SPI_DMAHalfTransmitCplt>:
{
 8003550:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003552:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003554:	f7ff fffb 	bl	800354e <HAL_SPI_TxHalfCpltCallback>
}
 8003558:	bd08      	pop	{r3, pc}

0800355a <HAL_SPI_ErrorCallback>:
 800355a:	4770      	bx	lr

0800355c <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800355c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800355e:	6802      	ldr	r2, [r0, #0]
{
 8003560:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003562:	6853      	ldr	r3, [r2, #4]
 8003564:	f023 0303 	bic.w	r3, r3, #3
 8003568:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800356a:	6d43      	ldr	r3, [r0, #84]	; 0x54
 800356c:	f043 0310 	orr.w	r3, r3, #16
 8003570:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003572:	2301      	movs	r3, #1
 8003574:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8003578:	f7ff ffef 	bl	800355a <HAL_SPI_ErrorCallback>
}
 800357c:	bd08      	pop	{r3, pc}

0800357e <SPI_DMATransmitCplt>:
{
 800357e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003580:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003582:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8003584:	f7fe fd7e 	bl	8002084 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003588:	682b      	ldr	r3, [r5, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 800358e:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003590:	d426      	bmi.n	80035e0 <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	6859      	ldr	r1, [r3, #4]
 8003596:	f021 0120 	bic.w	r1, r1, #32
 800359a:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	f021 0102 	bic.w	r1, r1, #2
 80035a2:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80035a4:	4620      	mov	r0, r4
 80035a6:	2164      	movs	r1, #100	; 0x64
 80035a8:	f7ff fee4 	bl	8003374 <SPI_EndRxTxTransaction>
 80035ac:	b118      	cbz	r0, 80035b6 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035b0:	f043 0320 	orr.w	r3, r3, #32
 80035b4:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035b6:	68a3      	ldr	r3, [r4, #8]
 80035b8:	b933      	cbnz	r3, 80035c8 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035ba:	9301      	str	r3, [sp, #4]
 80035bc:	6823      	ldr	r3, [r4, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	9201      	str	r2, [sp, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	9301      	str	r3, [sp, #4]
 80035c6:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 80035c8:	2300      	movs	r3, #0
 80035ca:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80035cc:	2301      	movs	r3, #1
 80035ce:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035d2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80035d4:	b123      	cbz	r3, 80035e0 <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 80035d6:	4620      	mov	r0, r4
 80035d8:	f7ff ffbf 	bl	800355a <HAL_SPI_ErrorCallback>
}
 80035dc:	b003      	add	sp, #12
 80035de:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 80035e0:	4620      	mov	r0, r4
 80035e2:	f7ff ffb3 	bl	800354c <HAL_SPI_TxCpltCallback>
 80035e6:	e7f9      	b.n	80035dc <SPI_DMATransmitCplt+0x5e>

080035e8 <HAL_SPI_GetState>:
  return hspi->State;
 80035e8:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 80035ec:	4770      	bx	lr
	...

080035f0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d12c      	bne.n	8003652 <HAL_TIM_Base_Start+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035fa:	4a17      	ldr	r2, [pc, #92]	; (8003658 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003600:	6803      	ldr	r3, [r0, #0]
 8003602:	4293      	cmp	r3, r2
 8003604:	d01a      	beq.n	800363c <HAL_TIM_Base_Start+0x4c>
 8003606:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360a:	d017      	beq.n	800363c <HAL_TIM_Base_Start+0x4c>
 800360c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003610:	4293      	cmp	r3, r2
 8003612:	d013      	beq.n	800363c <HAL_TIM_Base_Start+0x4c>
 8003614:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003618:	4293      	cmp	r3, r2
 800361a:	d00f      	beq.n	800363c <HAL_TIM_Base_Start+0x4c>
 800361c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003620:	4293      	cmp	r3, r2
 8003622:	d00b      	beq.n	800363c <HAL_TIM_Base_Start+0x4c>
 8003624:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <HAL_TIM_Base_Start+0x4c>
 800362c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <HAL_TIM_Base_Start+0x4c>
 8003634:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003638:	4293      	cmp	r3, r2
 800363a:	d104      	bne.n	8003646 <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003642:	2a06      	cmp	r2, #6
 8003644:	d003      	beq.n	800364e <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800364e:	2000      	movs	r0, #0
}
 8003650:	4770      	bx	lr
    return HAL_ERROR;
 8003652:	2001      	movs	r0, #1
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40010000 	.word	0x40010000

0800365c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800365c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003660:	2b01      	cmp	r3, #1
 8003662:	d130      	bne.n	80036c6 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003664:	2302      	movs	r3, #2
 8003666:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800366a:	6803      	ldr	r3, [r0, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003674:	4a15      	ldr	r2, [pc, #84]	; (80036cc <HAL_TIM_Base_Start_IT+0x70>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01a      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x54>
 800367a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800367e:	d017      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x54>
 8003680:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003684:	4293      	cmp	r3, r2
 8003686:	d013      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x54>
 8003688:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800368c:	4293      	cmp	r3, r2
 800368e:	d00f      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x54>
 8003690:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003694:	4293      	cmp	r3, r2
 8003696:	d00b      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x54>
 8003698:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800369c:	4293      	cmp	r3, r2
 800369e:	d007      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x54>
 80036a0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d003      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x54>
 80036a8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d104      	bne.n	80036ba <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b0:	689a      	ldr	r2, [r3, #8]
 80036b2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036b6:	2a06      	cmp	r2, #6
 80036b8:	d003      	beq.n	80036c2 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	f042 0201 	orr.w	r2, r2, #1
 80036c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036c2:	2000      	movs	r0, #0
}
 80036c4:	4770      	bx	lr
    return HAL_ERROR;
 80036c6:	2001      	movs	r0, #1
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40010000 	.word	0x40010000

080036d0 <HAL_TIM_OC_DelayElapsedCallback>:
 80036d0:	4770      	bx	lr

080036d2 <HAL_TIM_IC_CaptureCallback>:
 80036d2:	4770      	bx	lr

080036d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80036d4:	4770      	bx	lr

080036d6 <HAL_TIM_TriggerCallback>:
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036d8:	6803      	ldr	r3, [r0, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	0791      	lsls	r1, r2, #30
{
 80036de:	b510      	push	{r4, lr}
 80036e0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036e2:	d50e      	bpl.n	8003702 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	0792      	lsls	r2, r2, #30
 80036e8:	d50b      	bpl.n	8003702 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036ea:	f06f 0202 	mvn.w	r2, #2
 80036ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036f0:	2201      	movs	r2, #1
 80036f2:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	079b      	lsls	r3, r3, #30
 80036f8:	d077      	beq.n	80037ea <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036fa:	f7ff ffea 	bl	80036d2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036fe:	2300      	movs	r3, #0
 8003700:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003702:	6823      	ldr	r3, [r4, #0]
 8003704:	691a      	ldr	r2, [r3, #16]
 8003706:	0750      	lsls	r0, r2, #29
 8003708:	d510      	bpl.n	800372c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800370a:	68da      	ldr	r2, [r3, #12]
 800370c:	0751      	lsls	r1, r2, #29
 800370e:	d50d      	bpl.n	800372c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003710:	f06f 0204 	mvn.w	r2, #4
 8003714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003716:	2202      	movs	r2, #2
 8003718:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003720:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003722:	d068      	beq.n	80037f6 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003724:	f7ff ffd5 	bl	80036d2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003728:	2300      	movs	r3, #0
 800372a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800372c:	6823      	ldr	r3, [r4, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	0712      	lsls	r2, r2, #28
 8003732:	d50f      	bpl.n	8003754 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	0710      	lsls	r0, r2, #28
 8003738:	d50c      	bpl.n	8003754 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800373a:	f06f 0208 	mvn.w	r2, #8
 800373e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003740:	2204      	movs	r2, #4
 8003742:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003748:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800374a:	d05a      	beq.n	8003802 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800374c:	f7ff ffc1 	bl	80036d2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003750:	2300      	movs	r3, #0
 8003752:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003754:	6823      	ldr	r3, [r4, #0]
 8003756:	691a      	ldr	r2, [r3, #16]
 8003758:	06d2      	lsls	r2, r2, #27
 800375a:	d510      	bpl.n	800377e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800375c:	68da      	ldr	r2, [r3, #12]
 800375e:	06d0      	lsls	r0, r2, #27
 8003760:	d50d      	bpl.n	800377e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003762:	f06f 0210 	mvn.w	r2, #16
 8003766:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003768:	2208      	movs	r2, #8
 800376a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003772:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003774:	d04b      	beq.n	800380e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003776:	f7ff ffac 	bl	80036d2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800377a:	2300      	movs	r3, #0
 800377c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800377e:	6823      	ldr	r3, [r4, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	07d1      	lsls	r1, r2, #31
 8003784:	d508      	bpl.n	8003798 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	07d2      	lsls	r2, r2, #31
 800378a:	d505      	bpl.n	8003798 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800378c:	f06f 0201 	mvn.w	r2, #1
 8003790:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003792:	4620      	mov	r0, r4
 8003794:	f7fe f91e 	bl	80019d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003798:	6823      	ldr	r3, [r4, #0]
 800379a:	691a      	ldr	r2, [r3, #16]
 800379c:	0610      	lsls	r0, r2, #24
 800379e:	d508      	bpl.n	80037b2 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a0:	68da      	ldr	r2, [r3, #12]
 80037a2:	0611      	lsls	r1, r2, #24
 80037a4:	d505      	bpl.n	80037b2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037ac:	4620      	mov	r0, r4
 80037ae:	f000 f9ac 	bl	8003b0a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037b2:	6823      	ldr	r3, [r4, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	0652      	lsls	r2, r2, #25
 80037b8:	d508      	bpl.n	80037cc <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	0650      	lsls	r0, r2, #25
 80037be:	d505      	bpl.n	80037cc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037c6:	4620      	mov	r0, r4
 80037c8:	f7ff ff85 	bl	80036d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037cc:	6823      	ldr	r3, [r4, #0]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	0691      	lsls	r1, r2, #26
 80037d2:	d522      	bpl.n	800381a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	0692      	lsls	r2, r2, #26
 80037d8:	d51f      	bpl.n	800381a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037da:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037de:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037e0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80037e6:	f000 b98f 	b.w	8003b08 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	f7ff ff71 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037ee:	4620      	mov	r0, r4
 80037f0:	f7ff ff70 	bl	80036d4 <HAL_TIM_PWM_PulseFinishedCallback>
 80037f4:	e783      	b.n	80036fe <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f6:	f7ff ff6b 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fa:	4620      	mov	r0, r4
 80037fc:	f7ff ff6a 	bl	80036d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003800:	e792      	b.n	8003728 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003802:	f7ff ff65 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff ff64 	bl	80036d4 <HAL_TIM_PWM_PulseFinishedCallback>
 800380c:	e7a0      	b.n	8003750 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800380e:	f7ff ff5f 	bl	80036d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003812:	4620      	mov	r0, r4
 8003814:	f7ff ff5e 	bl	80036d4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003818:	e7af      	b.n	800377a <HAL_TIM_IRQHandler+0xa2>
}
 800381a:	bd10      	pop	{r4, pc}

0800381c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800381c:	4a30      	ldr	r2, [pc, #192]	; (80038e0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800381e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003820:	4290      	cmp	r0, r2
 8003822:	d012      	beq.n	800384a <TIM_Base_SetConfig+0x2e>
 8003824:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003828:	d00f      	beq.n	800384a <TIM_Base_SetConfig+0x2e>
 800382a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800382e:	4290      	cmp	r0, r2
 8003830:	d00b      	beq.n	800384a <TIM_Base_SetConfig+0x2e>
 8003832:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003836:	4290      	cmp	r0, r2
 8003838:	d007      	beq.n	800384a <TIM_Base_SetConfig+0x2e>
 800383a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800383e:	4290      	cmp	r0, r2
 8003840:	d003      	beq.n	800384a <TIM_Base_SetConfig+0x2e>
 8003842:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003846:	4290      	cmp	r0, r2
 8003848:	d119      	bne.n	800387e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800384a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800384c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003850:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003852:	4a23      	ldr	r2, [pc, #140]	; (80038e0 <TIM_Base_SetConfig+0xc4>)
 8003854:	4290      	cmp	r0, r2
 8003856:	d029      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 8003858:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800385c:	d026      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 800385e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003862:	4290      	cmp	r0, r2
 8003864:	d022      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 8003866:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800386a:	4290      	cmp	r0, r2
 800386c:	d01e      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 800386e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003872:	4290      	cmp	r0, r2
 8003874:	d01a      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 8003876:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800387a:	4290      	cmp	r0, r2
 800387c:	d016      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 800387e:	4a19      	ldr	r2, [pc, #100]	; (80038e4 <TIM_Base_SetConfig+0xc8>)
 8003880:	4290      	cmp	r0, r2
 8003882:	d013      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 8003884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003888:	4290      	cmp	r0, r2
 800388a:	d00f      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 800388c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003890:	4290      	cmp	r0, r2
 8003892:	d00b      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 8003894:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8003898:	4290      	cmp	r0, r2
 800389a:	d007      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 800389c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038a0:	4290      	cmp	r0, r2
 80038a2:	d003      	beq.n	80038ac <TIM_Base_SetConfig+0x90>
 80038a4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80038a8:	4290      	cmp	r0, r2
 80038aa:	d103      	bne.n	80038b4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038ac:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80038ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038b2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038b4:	694a      	ldr	r2, [r1, #20]
 80038b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038ba:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80038bc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038be:	688b      	ldr	r3, [r1, #8]
 80038c0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80038c2:	680b      	ldr	r3, [r1, #0]
 80038c4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <TIM_Base_SetConfig+0xc4>)
 80038c8:	4298      	cmp	r0, r3
 80038ca:	d003      	beq.n	80038d4 <TIM_Base_SetConfig+0xb8>
 80038cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038d0:	4298      	cmp	r0, r3
 80038d2:	d101      	bne.n	80038d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80038d4:	690b      	ldr	r3, [r1, #16]
 80038d6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80038d8:	2301      	movs	r3, #1
 80038da:	6143      	str	r3, [r0, #20]
}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	40010000 	.word	0x40010000
 80038e4:	40014000 	.word	0x40014000

080038e8 <HAL_TIM_Base_Init>:
{
 80038e8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80038ea:	4604      	mov	r4, r0
 80038ec:	b330      	cbz	r0, 800393c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80038ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80038f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80038f6:	b91b      	cbnz	r3, 8003900 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80038f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80038fc:	f7fe fab0 	bl	8001e60 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003900:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003902:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003908:	1d21      	adds	r1, r4, #4
 800390a:	f7ff ff87 	bl	800381c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800390e:	2301      	movs	r3, #1
 8003910:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003914:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800391a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800391e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003922:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003926:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800392a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800392e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003932:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003936:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800393a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800393c:	2001      	movs	r0, #1
 800393e:	e7fc      	b.n	800393a <HAL_TIM_Base_Init+0x52>

08003940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003940:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003942:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003944:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003946:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800394a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800394e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003950:	6083      	str	r3, [r0, #8]
}
 8003952:	bd10      	pop	{r4, pc}

08003954 <HAL_TIM_ConfigClockSource>:
{
 8003954:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003956:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800395a:	2b01      	cmp	r3, #1
{
 800395c:	4604      	mov	r4, r0
 800395e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003962:	f000 8091 	beq.w	8003a88 <HAL_TIM_ConfigClockSource+0x134>
 8003966:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003968:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800396c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003970:	6800      	ldr	r0, [r0, #0]
 8003972:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003978:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800397c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800397e:	680b      	ldr	r3, [r1, #0]
 8003980:	2b60      	cmp	r3, #96	; 0x60
 8003982:	d052      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0xd6>
 8003984:	d833      	bhi.n	80039ee <HAL_TIM_ConfigClockSource+0x9a>
 8003986:	2b40      	cmp	r3, #64	; 0x40
 8003988:	d067      	beq.n	8003a5a <HAL_TIM_ConfigClockSource+0x106>
 800398a:	d816      	bhi.n	80039ba <HAL_TIM_ConfigClockSource+0x66>
 800398c:	2b20      	cmp	r3, #32
 800398e:	d00d      	beq.n	80039ac <HAL_TIM_ConfigClockSource+0x58>
 8003990:	d80a      	bhi.n	80039a8 <HAL_TIM_ConfigClockSource+0x54>
 8003992:	f033 0110 	bics.w	r1, r3, #16
 8003996:	d009      	beq.n	80039ac <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8003998:	2301      	movs	r3, #1
 800399a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800399e:	2300      	movs	r3, #0
 80039a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80039a4:	4610      	mov	r0, r2
 80039a6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80039a8:	2b30      	cmp	r3, #48	; 0x30
 80039aa:	d1f5      	bne.n	8003998 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80039ac:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f043 0307 	orr.w	r3, r3, #7
 80039b8:	e017      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80039ba:	2b50      	cmp	r3, #80	; 0x50
 80039bc:	d1ec      	bne.n	8003998 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039be:	684a      	ldr	r2, [r1, #4]
 80039c0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80039c2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039c4:	6a05      	ldr	r5, [r0, #32]
 80039c6:	f025 0501 	bic.w	r5, r5, #1
 80039ca:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039cc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039ce:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039d6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80039da:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80039dc:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80039de:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80039e0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039e6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80039ea:	6083      	str	r3, [r0, #8]
 80039ec:	e011      	b.n	8003a12 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80039ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039f2:	d00e      	beq.n	8003a12 <HAL_TIM_ConfigClockSource+0xbe>
 80039f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039f8:	d00d      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xc2>
 80039fa:	2b70      	cmp	r3, #112	; 0x70
 80039fc:	d1cc      	bne.n	8003998 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80039fe:	68cb      	ldr	r3, [r1, #12]
 8003a00:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a04:	f7ff ff9c 	bl	8003940 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003a08:	6822      	ldr	r2, [r4, #0]
 8003a0a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a10:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003a12:	2200      	movs	r2, #0
 8003a14:	e7c0      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003a16:	68cb      	ldr	r3, [r1, #12]
 8003a18:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003a1c:	f7ff ff90 	bl	8003940 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a20:	6822      	ldr	r2, [r4, #0]
 8003a22:	6893      	ldr	r3, [r2, #8]
 8003a24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a28:	e7f2      	b.n	8003a10 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a2a:	684d      	ldr	r5, [r1, #4]
 8003a2c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a2e:	6a01      	ldr	r1, [r0, #32]
 8003a30:	f021 0110 	bic.w	r1, r1, #16
 8003a34:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a36:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003a38:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a3a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a42:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a46:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8003a4a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a4e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a54:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003a58:	e7c7      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a5a:	684a      	ldr	r2, [r1, #4]
 8003a5c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003a5e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a60:	6a05      	ldr	r5, [r0, #32]
 8003a62:	f025 0501 	bic.w	r5, r5, #1
 8003a66:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a68:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a6a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a72:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003a76:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003a78:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8003a7a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8003a7c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a82:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003a86:	e7b0      	b.n	80039ea <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003a88:	461a      	mov	r2, r3
 8003a8a:	e78b      	b.n	80039a4 <HAL_TIM_ConfigClockSource+0x50>

08003a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a8c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a8e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	f04f 0302 	mov.w	r3, #2
 8003a98:	d032      	beq.n	8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a9a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a9e:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aa0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8003aa2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8003aa4:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003aa6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003aaa:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aac:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aae:	4c15      	ldr	r4, [pc, #84]	; (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8003ab0:	42a3      	cmp	r3, r4
 8003ab2:	d01a      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab8:	d017      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003aba:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8003abe:	42a3      	cmp	r3, r4
 8003ac0:	d013      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ac2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ac6:	42a3      	cmp	r3, r4
 8003ac8:	d00f      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003aca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003ace:	42a3      	cmp	r3, r4
 8003ad0:	d00b      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ad2:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8003ad6:	42a3      	cmp	r3, r4
 8003ad8:	d007      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ada:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8003ade:	42a3      	cmp	r3, r4
 8003ae0:	d003      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8003ae2:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003ae6:	42a3      	cmp	r3, r4
 8003ae8:	d104      	bne.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003aea:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af0:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	2301      	movs	r3, #1
 8003af6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003afa:	2300      	movs	r3, #0
 8003afc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003b00:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003b02:	bd30      	pop	{r4, r5, pc}
 8003b04:	40010000 	.word	0x40010000

08003b08 <HAL_TIMEx_CommutCallback>:
 8003b08:	4770      	bx	lr

08003b0a <HAL_TIMEx_BreakCallback>:
 8003b0a:	4770      	bx	lr

08003b0c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b0c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b0e:	f102 030c 	add.w	r3, r2, #12
 8003b12:	e853 3f00 	ldrex	r3, [r3]
 8003b16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	320c      	adds	r2, #12
 8003b1c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003b20:	6802      	ldr	r2, [r0, #0]
 8003b22:	2900      	cmp	r1, #0
 8003b24:	d1f2      	bne.n	8003b0c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	f102 0314 	add.w	r3, r2, #20
 8003b2a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b32:	f102 0c14 	add.w	ip, r2, #20
 8003b36:	e84c 3100 	strex	r1, r3, [ip]
 8003b3a:	2900      	cmp	r1, #0
 8003b3c:	d1f3      	bne.n	8003b26 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d10b      	bne.n	8003b5c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b44:	f102 030c 	add.w	r3, r2, #12
 8003b48:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b4c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b50:	f102 0c0c 	add.w	ip, r2, #12
 8003b54:	e84c 3100 	strex	r1, r3, [ip]
 8003b58:	2900      	cmp	r1, #0
 8003b5a:	d1f3      	bne.n	8003b44 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	2320      	movs	r3, #32
 8003b5e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b62:	2300      	movs	r3, #0
 8003b64:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003b66:	4770      	bx	lr

08003b68 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b68:	6802      	ldr	r2, [r0, #0]
 8003b6a:	68c1      	ldr	r1, [r0, #12]
 8003b6c:	6913      	ldr	r3, [r2, #16]
 8003b6e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003b72:	430b      	orrs	r3, r1
{
 8003b74:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b76:	6113      	str	r3, [r2, #16]
{
 8003b78:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b7a:	6883      	ldr	r3, [r0, #8]
 8003b7c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003b7e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b80:	4303      	orrs	r3, r0
 8003b82:	6968      	ldr	r0, [r5, #20]
 8003b84:	4303      	orrs	r3, r0
 8003b86:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003b88:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8003b8c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b90:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003b92:	430b      	orrs	r3, r1
 8003b94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b96:	6953      	ldr	r3, [r2, #20]
 8003b98:	69a9      	ldr	r1, [r5, #24]
 8003b9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9e:	430b      	orrs	r3, r1
 8003ba0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ba2:	4b1f      	ldr	r3, [pc, #124]	; (8003c20 <UART_SetConfig+0xb8>)
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d003      	beq.n	8003bb0 <UART_SetConfig+0x48>
 8003ba8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d123      	bne.n	8003bf8 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7ff f96c 	bl	8002e8c <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb4:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bb6:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bbc:	e9d5 4600 	ldrd	r4, r6, [r5]
 8003bc0:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bc4:	d11b      	bne.n	8003bfe <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003bc6:	19b2      	adds	r2, r6, r6
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	415b      	adcs	r3, r3
 8003bce:	f7fd f88b 	bl	8000ce8 <__aeabi_uldivmod>
 8003bd2:	2164      	movs	r1, #100	; 0x64
 8003bd4:	fbb0 f5f1 	udiv	r5, r0, r1
 8003bd8:	fb01 0315 	mls	r3, r1, r5, r0
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be4:	f003 0207 	and.w	r2, r3, #7
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8003bee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003bf2:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bf4:	60a3      	str	r3, [r4, #8]
  }
}
 8003bf6:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7ff f938 	bl	8002e6c <HAL_RCC_GetPCLK1Freq>
 8003bfc:	e7da      	b.n	8003bb4 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003bfe:	00b2      	lsls	r2, r6, #2
 8003c00:	0fb3      	lsrs	r3, r6, #30
 8003c02:	f7fd f871 	bl	8000ce8 <__aeabi_uldivmod>
 8003c06:	2264      	movs	r2, #100	; 0x64
 8003c08:	fbb0 f1f2 	udiv	r1, r0, r2
 8003c0c:	fb02 0311 	mls	r3, r2, r1, r0
 8003c10:	011b      	lsls	r3, r3, #4
 8003c12:	3332      	adds	r3, #50	; 0x32
 8003c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c18:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003c1c:	e7ea      	b.n	8003bf4 <UART_SetConfig+0x8c>
 8003c1e:	bf00      	nop
 8003c20:	40011000 	.word	0x40011000

08003c24 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c26:	4604      	mov	r4, r0
 8003c28:	460e      	mov	r6, r1
 8003c2a:	4617      	mov	r7, r2
 8003c2c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	6813      	ldr	r3, [r2, #0]
 8003c32:	ea36 0303 	bics.w	r3, r6, r3
 8003c36:	d101      	bne.n	8003c3c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e028      	b.n	8003c8e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003c3c:	1c6b      	adds	r3, r5, #1
 8003c3e:	d0f7      	beq.n	8003c30 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c40:	b125      	cbz	r5, 8003c4c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8003c42:	f7fe fa1f 	bl	8002084 <HAL_GetTick>
 8003c46:	1bc0      	subs	r0, r0, r7
 8003c48:	4285      	cmp	r5, r0
 8003c4a:	d2f0      	bcs.n	8003c2e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c4c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c4e:	f102 030c 	add.w	r3, r2, #12
 8003c52:	e853 3f00 	ldrex	r3, [r3]
 8003c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c5a:	320c      	adds	r2, #12
 8003c5c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003c60:	6821      	ldr	r1, [r4, #0]
 8003c62:	2800      	cmp	r0, #0
 8003c64:	d1f2      	bne.n	8003c4c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c66:	f101 0314 	add.w	r3, r1, #20
 8003c6a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c6e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	f101 0014 	add.w	r0, r1, #20
 8003c76:	e840 3200 	strex	r2, r3, [r0]
 8003c7a:	2a00      	cmp	r2, #0
 8003c7c:	d1f3      	bne.n	8003c66 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8003c7e:	2320      	movs	r3, #32
 8003c80:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8003c84:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8003c88:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8003c8c:	2003      	movs	r0, #3
}
 8003c8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c90 <HAL_UART_Init>:
{
 8003c90:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003c92:	4604      	mov	r4, r0
 8003c94:	b340      	cbz	r0, 8003ce8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003c9a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003c9e:	b91b      	cbnz	r3, 8003ca8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003ca0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003ca4:	f7fe f93c 	bl	8001f20 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003ca8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003caa:	2324      	movs	r3, #36	; 0x24
 8003cac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003cb0:	68d3      	ldr	r3, [r2, #12]
 8003cb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cb6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003cb8:	4620      	mov	r0, r4
 8003cba:	f7ff ff55 	bl	8003b68 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cbe:	6823      	ldr	r3, [r4, #0]
 8003cc0:	691a      	ldr	r2, [r3, #16]
 8003cc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc8:	695a      	ldr	r2, [r3, #20]
 8003cca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003cda:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003ce6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003ce8:	2001      	movs	r0, #1
 8003cea:	e7fc      	b.n	8003ce6 <HAL_UART_Init+0x56>

08003cec <HAL_UART_Transmit>:
{
 8003cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003cee:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8003cf4:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf6:	2a20      	cmp	r2, #32
{
 8003cf8:	4604      	mov	r4, r0
 8003cfa:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003cfc:	d149      	bne.n	8003d92 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8003cfe:	2900      	cmp	r1, #0
 8003d00:	d045      	beq.n	8003d8e <HAL_UART_Transmit+0xa2>
 8003d02:	2f00      	cmp	r7, #0
 8003d04:	d043      	beq.n	8003d8e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8003d06:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003d0a:	2a01      	cmp	r2, #1
 8003d0c:	d041      	beq.n	8003d92 <HAL_UART_Transmit+0xa6>
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d16:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d18:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003d1e:	f7fe f9b1 	bl	8002084 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d22:	68a1      	ldr	r1, [r4, #8]
 8003d24:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8003d26:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d28:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003d2c:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8003d2e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d30:	d103      	bne.n	8003d3a <HAL_UART_Transmit+0x4e>
 8003d32:	6921      	ldr	r1, [r4, #16]
 8003d34:	b909      	cbnz	r1, 8003d3a <HAL_UART_Transmit+0x4e>
 8003d36:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003d38:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003d40:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003d42:	b289      	uxth	r1, r1
 8003d44:	b941      	cbnz	r1, 8003d58 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d46:	2140      	movs	r1, #64	; 0x40
 8003d48:	4620      	mov	r0, r4
 8003d4a:	f7ff ff6b 	bl	8003c24 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d4e:	b960      	cbnz	r0, 8003d6a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003d50:	2320      	movs	r3, #32
 8003d52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003d56:	e009      	b.n	8003d6c <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d58:	2180      	movs	r1, #128	; 0x80
 8003d5a:	4620      	mov	r0, r4
 8003d5c:	e9cd 2300 	strd	r2, r3, [sp]
 8003d60:	f7ff ff60 	bl	8003c24 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003d64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d68:	b110      	cbz	r0, 8003d70 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8003d6a:	2003      	movs	r0, #3
}
 8003d6c:	b003      	add	sp, #12
 8003d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d70:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8003d72:	b94e      	cbnz	r6, 8003d88 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d74:	f835 1b02 	ldrh.w	r1, [r5], #2
 8003d78:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d7c:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8003d7e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003d80:	3901      	subs	r1, #1
 8003d82:	b289      	uxth	r1, r1
 8003d84:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003d86:	e7db      	b.n	8003d40 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d88:	f816 1b01 	ldrb.w	r1, [r6], #1
 8003d8c:	e7f6      	b.n	8003d7c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003d8e:	2001      	movs	r0, #1
 8003d90:	e7ec      	b.n	8003d6c <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8003d92:	2002      	movs	r0, #2
 8003d94:	e7ea      	b.n	8003d6c <HAL_UART_Transmit+0x80>

08003d96 <HAL_UART_TxCpltCallback>:
 8003d96:	4770      	bx	lr

08003d98 <HAL_UART_RxCpltCallback>:
 8003d98:	4770      	bx	lr

08003d9a <HAL_UART_ErrorCallback>:
 8003d9a:	4770      	bx	lr

08003d9c <UART_DMAAbortOnError>:
{
 8003d9c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d9e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003da4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8003da6:	f7ff fff8 	bl	8003d9a <HAL_UART_ErrorCallback>
}
 8003daa:	bd08      	pop	{r3, pc}

08003dac <HAL_UARTEx_RxEventCallback>:
}
 8003dac:	4770      	bx	lr

08003dae <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8003dae:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db0:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003db2:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003db4:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8003dba:	d13e      	bne.n	8003e3a <UART_Receive_IT.part.0.isra.0+0x8c>
 8003dbc:	6901      	ldr	r1, [r0, #16]
 8003dbe:	2900      	cmp	r1, #0
 8003dc0:	d13e      	bne.n	8003e40 <UART_Receive_IT.part.0.isra.0+0x92>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003dc2:	6852      	ldr	r2, [r2, #4]
 8003dc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dc8:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 8003dcc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8003dce:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d12c      	bne.n	8003e34 <UART_Receive_IT.part.0.isra.0+0x86>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003dda:	6802      	ldr	r2, [r0, #0]
 8003ddc:	68d1      	ldr	r1, [r2, #12]
 8003dde:	f021 0120 	bic.w	r1, r1, #32
 8003de2:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003de4:	68d1      	ldr	r1, [r2, #12]
 8003de6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003dea:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dec:	6951      	ldr	r1, [r2, #20]
 8003dee:	f021 0101 	bic.w	r1, r1, #1
 8003df2:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003df4:	2220      	movs	r2, #32
 8003df6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dfa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003dfc:	2a01      	cmp	r2, #1
 8003dfe:	6802      	ldr	r2, [r0, #0]
 8003e00:	d128      	bne.n	8003e54 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e02:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	f102 030c 	add.w	r3, r2, #12
 8003e08:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e0c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	f102 0c0c 	add.w	ip, r2, #12
 8003e14:	e84c 3100 	strex	r1, r3, [ip]
 8003e18:	2900      	cmp	r1, #0
 8003e1a:	d1f3      	bne.n	8003e04 <UART_Receive_IT.part.0.isra.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e1c:	6813      	ldr	r3, [r2, #0]
 8003e1e:	06db      	lsls	r3, r3, #27
 8003e20:	d505      	bpl.n	8003e2e <UART_Receive_IT.part.0.isra.0+0x80>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e22:	9101      	str	r1, [sp, #4]
 8003e24:	6813      	ldr	r3, [r2, #0]
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	6853      	ldr	r3, [r2, #4]
 8003e2a:	9301      	str	r3, [sp, #4]
 8003e2c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e2e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003e30:	f7ff ffbc 	bl	8003dac <HAL_UARTEx_RxEventCallback>
}
 8003e34:	b003      	add	sp, #12
 8003e36:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e3a:	b939      	cbnz	r1, 8003e4c <UART_Receive_IT.part.0.isra.0+0x9e>
 8003e3c:	6901      	ldr	r1, [r0, #16]
 8003e3e:	b929      	cbnz	r1, 8003e4c <UART_Receive_IT.part.0.isra.0+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e40:	6852      	ldr	r2, [r2, #4]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8003e46:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003e48:	3301      	adds	r3, #1
 8003e4a:	e7bf      	b.n	8003dcc <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e4c:	6852      	ldr	r2, [r2, #4]
 8003e4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e52:	e7f7      	b.n	8003e44 <UART_Receive_IT.part.0.isra.0+0x96>
        HAL_UART_RxCpltCallback(huart);
 8003e54:	f7ff ffa0 	bl	8003d98 <HAL_UART_RxCpltCallback>
 8003e58:	e7ec      	b.n	8003e34 <UART_Receive_IT.part.0.isra.0+0x86>
	...

08003e5c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e5c:	6803      	ldr	r3, [r0, #0]
{
 8003e5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e60:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e62:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e64:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003e66:	f012 0f0f 	tst.w	r2, #15
{
 8003e6a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003e6c:	d10c      	bne.n	8003e88 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e6e:	0695      	lsls	r5, r2, #26
 8003e70:	d570      	bpl.n	8003f54 <HAL_UART_IRQHandler+0xf8>
 8003e72:	068d      	lsls	r5, r1, #26
 8003e74:	d56e      	bpl.n	8003f54 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e76:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003e7a:	2b22      	cmp	r3, #34	; 0x22
 8003e7c:	d164      	bne.n	8003f48 <HAL_UART_IRQHandler+0xec>
}
 8003e7e:	b003      	add	sp, #12
 8003e80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003e84:	f7ff bf93 	b.w	8003dae <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e88:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e8c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 8003e90:	4305      	orrs	r5, r0
 8003e92:	d05f      	beq.n	8003f54 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e94:	07d5      	lsls	r5, r2, #31
 8003e96:	d505      	bpl.n	8003ea4 <HAL_UART_IRQHandler+0x48>
 8003e98:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e9a:	bf42      	ittt	mi
 8003e9c:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 8003e9e:	f043 0301 	orrmi.w	r3, r3, #1
 8003ea2:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea4:	0755      	lsls	r5, r2, #29
 8003ea6:	d504      	bpl.n	8003eb2 <HAL_UART_IRQHandler+0x56>
 8003ea8:	b118      	cbz	r0, 8003eb2 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003eaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eac:	f043 0302 	orr.w	r3, r3, #2
 8003eb0:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eb2:	0793      	lsls	r3, r2, #30
 8003eb4:	d504      	bpl.n	8003ec0 <HAL_UART_IRQHandler+0x64>
 8003eb6:	b118      	cbz	r0, 8003ec0 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003eb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eba:	f043 0304 	orr.w	r3, r3, #4
 8003ebe:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ec0:	0715      	lsls	r5, r2, #28
 8003ec2:	d507      	bpl.n	8003ed4 <HAL_UART_IRQHandler+0x78>
 8003ec4:	f001 0320 	and.w	r3, r1, #32
 8003ec8:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eca:	bf1e      	ittt	ne
 8003ecc:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 8003ece:	f043 0308 	orrne.w	r3, r3, #8
 8003ed2:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d036      	beq.n	8003f48 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eda:	0690      	lsls	r0, r2, #26
 8003edc:	d508      	bpl.n	8003ef0 <HAL_UART_IRQHandler+0x94>
 8003ede:	068a      	lsls	r2, r1, #26
 8003ee0:	d506      	bpl.n	8003ef0 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003ee6:	2b22      	cmp	r3, #34	; 0x22
 8003ee8:	d102      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x94>
 8003eea:	4620      	mov	r0, r4
 8003eec:	f7ff ff5f 	bl	8003dae <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef0:	6823      	ldr	r3, [r4, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ef4:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efa:	f005 0508 	and.w	r5, r5, #8
 8003efe:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8003f00:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f02:	d023      	beq.n	8003f4c <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8003f04:	f7ff fe02 	bl	8003b0c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f08:	6822      	ldr	r2, [r4, #0]
 8003f0a:	6953      	ldr	r3, [r2, #20]
 8003f0c:	065b      	lsls	r3, r3, #25
 8003f0e:	d518      	bpl.n	8003f42 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f10:	f102 0314 	add.w	r3, r2, #20
 8003f14:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	f102 0014 	add.w	r0, r2, #20
 8003f20:	e840 3100 	strex	r1, r3, [r0]
 8003f24:	2900      	cmp	r1, #0
 8003f26:	d1f3      	bne.n	8003f10 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8003f28:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f2a:	b150      	cbz	r0, 8003f42 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f2c:	4b72      	ldr	r3, [pc, #456]	; (80040f8 <HAL_UART_IRQHandler+0x29c>)
 8003f2e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f30:	f7fe fd4e 	bl	80029d0 <HAL_DMA_Abort_IT>
 8003f34:	b140      	cbz	r0, 8003f48 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f36:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003f38:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8003f3a:	b003      	add	sp, #12
 8003f3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f40:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7ff ff29 	bl	8003d9a <HAL_UART_ErrorCallback>
}
 8003f48:	b003      	add	sp, #12
 8003f4a:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003f4c:	f7ff ff25 	bl	8003d9a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f50:	6425      	str	r5, [r4, #64]	; 0x40
 8003f52:	e7f9      	b.n	8003f48 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f54:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003f56:	2801      	cmp	r0, #1
 8003f58:	f040 8091 	bne.w	800407e <HAL_UART_IRQHandler+0x222>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f5c:	06d5      	lsls	r5, r2, #27
 8003f5e:	f140 808e 	bpl.w	800407e <HAL_UART_IRQHandler+0x222>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f62:	06c8      	lsls	r0, r1, #27
 8003f64:	f140 808b 	bpl.w	800407e <HAL_UART_IRQHandler+0x222>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f68:	2200      	movs	r2, #0
 8003f6a:	9201      	str	r2, [sp, #4]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	9201      	str	r2, [sp, #4]
 8003f70:	685a      	ldr	r2, [r3, #4]
 8003f72:	9201      	str	r2, [sp, #4]
 8003f74:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	0655      	lsls	r5, r2, #25
 8003f7a:	d54c      	bpl.n	8004016 <HAL_UART_IRQHandler+0x1ba>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f7c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003f7e:	680a      	ldr	r2, [r1, #0]
 8003f80:	6852      	ldr	r2, [r2, #4]
 8003f82:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	d0df      	beq.n	8003f48 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f88:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8003f8a:	4290      	cmp	r0, r2
 8003f8c:	d9dc      	bls.n	8003f48 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 8003f8e:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003f90:	69ca      	ldr	r2, [r1, #28]
 8003f92:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003f96:	d036      	beq.n	8004006 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f98:	f103 020c 	add.w	r2, r3, #12
 8003f9c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa4:	f103 000c 	add.w	r0, r3, #12
 8003fa8:	e840 2100 	strex	r1, r2, [r0]
 8003fac:	2900      	cmp	r1, #0
 8003fae:	d1f3      	bne.n	8003f98 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	f103 0214 	add.w	r2, r3, #20
 8003fb4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fb8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	f103 0014 	add.w	r0, r3, #20
 8003fc0:	e840 2100 	strex	r1, r2, [r0]
 8003fc4:	2900      	cmp	r1, #0
 8003fc6:	d1f3      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	f103 0214 	add.w	r2, r3, #20
 8003fcc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fd0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd4:	f103 0014 	add.w	r0, r3, #20
 8003fd8:	e840 2100 	strex	r1, r2, [r0]
 8003fdc:	2900      	cmp	r1, #0
 8003fde:	d1f3      	bne.n	8003fc8 <HAL_UART_IRQHandler+0x16c>
          huart->RxState = HAL_UART_STATE_READY;
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe6:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	f103 020c 	add.w	r2, r3, #12
 8003fec:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ff0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	f103 000c 	add.w	r0, r3, #12
 8003ff8:	e840 2100 	strex	r1, r2, [r0]
 8003ffc:	2900      	cmp	r1, #0
 8003ffe:	d1f3      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x18c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004000:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004002:	f7fe fca1 	bl	8002948 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004006:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8004008:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800400a:	1ac9      	subs	r1, r1, r3
 800400c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800400e:	4620      	mov	r0, r4
 8004010:	f7ff fecc 	bl	8003dac <HAL_UARTEx_RxEventCallback>
 8004014:	e798      	b.n	8003f48 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004016:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8004018:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 800401a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800401c:	b289      	uxth	r1, r1
 800401e:	2900      	cmp	r1, #0
 8004020:	d092      	beq.n	8003f48 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004022:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004024:	1a89      	subs	r1, r1, r2
 8004026:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8004028:	2900      	cmp	r1, #0
 800402a:	d08d      	beq.n	8003f48 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	f103 020c 	add.w	r2, r3, #12
 8004030:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004034:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004038:	f103 050c 	add.w	r5, r3, #12
 800403c:	e845 2000 	strex	r0, r2, [r5]
 8004040:	2800      	cmp	r0, #0
 8004042:	d1f3      	bne.n	800402c <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004044:	f103 0214 	add.w	r2, r3, #20
 8004048:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800404c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	f103 0514 	add.w	r5, r3, #20
 8004054:	e845 2000 	strex	r0, r2, [r5]
 8004058:	2800      	cmp	r0, #0
 800405a:	d1f3      	bne.n	8004044 <HAL_UART_IRQHandler+0x1e8>
        huart->RxState = HAL_UART_STATE_READY;
 800405c:	2220      	movs	r2, #32
 800405e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004062:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004064:	f103 020c 	add.w	r2, r3, #12
 8004068:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800406c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	f103 050c 	add.w	r5, r3, #12
 8004074:	e845 2000 	strex	r0, r2, [r5]
 8004078:	2800      	cmp	r0, #0
 800407a:	d1f3      	bne.n	8004064 <HAL_UART_IRQHandler+0x208>
 800407c:	e7c7      	b.n	800400e <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800407e:	0610      	lsls	r0, r2, #24
 8004080:	d528      	bpl.n	80040d4 <HAL_UART_IRQHandler+0x278>
 8004082:	060d      	lsls	r5, r1, #24
 8004084:	d526      	bpl.n	80040d4 <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004086:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800408a:	2a21      	cmp	r2, #33	; 0x21
 800408c:	f47f af5c 	bne.w	8003f48 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004090:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004092:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004094:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004098:	d117      	bne.n	80040ca <HAL_UART_IRQHandler+0x26e>
 800409a:	6921      	ldr	r1, [r4, #16]
 800409c:	b9a9      	cbnz	r1, 80040ca <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800409e:	f832 1b02 	ldrh.w	r1, [r2], #2
 80040a2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80040a6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80040a8:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80040aa:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80040ac:	3a01      	subs	r2, #1
 80040ae:	b292      	uxth	r2, r2
 80040b0:	84e2      	strh	r2, [r4, #38]	; 0x26
 80040b2:	2a00      	cmp	r2, #0
 80040b4:	f47f af48 	bne.w	8003f48 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80040b8:	68da      	ldr	r2, [r3, #12]
 80040ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040be:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	e73e      	b.n	8003f48 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80040ca:	1c51      	adds	r1, r2, #1
 80040cc:	6221      	str	r1, [r4, #32]
 80040ce:	7812      	ldrb	r2, [r2, #0]
 80040d0:	605a      	str	r2, [r3, #4]
 80040d2:	e7ea      	b.n	80040aa <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80040d4:	0650      	lsls	r0, r2, #25
 80040d6:	f57f af37 	bpl.w	8003f48 <HAL_UART_IRQHandler+0xec>
 80040da:	064a      	lsls	r2, r1, #25
 80040dc:	f57f af34 	bpl.w	8003f48 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80040e8:	2320      	movs	r3, #32
 80040ea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80040ee:	4620      	mov	r0, r4
 80040f0:	f7ff fe51 	bl	8003d96 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80040f4:	e728      	b.n	8003f48 <HAL_UART_IRQHandler+0xec>
 80040f6:	bf00      	nop
 80040f8:	08003d9d 	.word	0x08003d9d

080040fc <arm_max_f32>:
 80040fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004100:	1e4f      	subs	r7, r1, #1
 8004102:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8004106:	f100 0e04 	add.w	lr, r0, #4
 800410a:	edd0 7a00 	vldr	s15, [r0]
 800410e:	d058      	beq.n	80041c2 <arm_max_f32+0xc6>
 8004110:	3014      	adds	r0, #20
 8004112:	46c4      	mov	ip, r8
 8004114:	2604      	movs	r6, #4
 8004116:	2400      	movs	r4, #0
 8004118:	ed10 6a04 	vldr	s12, [r0, #-16]
 800411c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8004120:	ed10 7a02 	vldr	s14, [r0, #-8]
 8004124:	ed50 5a01 	vldr	s11, [r0, #-4]
 8004128:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	bfc8      	it	gt
 8004132:	eef0 7a46 	vmovgt.f32	s15, s12
 8004136:	f1a6 0503 	sub.w	r5, r6, #3
 800413a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800413e:	bfc8      	it	gt
 8004140:	462c      	movgt	r4, r5
 8004142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004146:	bf48      	it	mi
 8004148:	eef0 7a66 	vmovmi.f32	s15, s13
 800414c:	f1a6 0502 	sub.w	r5, r6, #2
 8004150:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004154:	bf48      	it	mi
 8004156:	462c      	movmi	r4, r5
 8004158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415c:	bf48      	it	mi
 800415e:	eef0 7a47 	vmovmi.f32	s15, s14
 8004162:	f106 35ff 	add.w	r5, r6, #4294967295
 8004166:	eef4 7ae5 	vcmpe.f32	s15, s11
 800416a:	bf48      	it	mi
 800416c:	462c      	movmi	r4, r5
 800416e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004172:	bf48      	it	mi
 8004174:	4634      	movmi	r4, r6
 8004176:	bf48      	it	mi
 8004178:	eef0 7a65 	vmovmi.f32	s15, s11
 800417c:	f1bc 0c01 	subs.w	ip, ip, #1
 8004180:	f100 0010 	add.w	r0, r0, #16
 8004184:	f106 0604 	add.w	r6, r6, #4
 8004188:	d1c6      	bne.n	8004118 <arm_max_f32+0x1c>
 800418a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800418e:	f017 0003 	ands.w	r0, r7, #3
 8004192:	d018      	beq.n	80041c6 <arm_max_f32+0xca>
 8004194:	1a08      	subs	r0, r1, r0
 8004196:	ecbe 7a01 	vldmia	lr!, {s14}
 800419a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	bfc8      	it	gt
 80041a4:	4604      	movgt	r4, r0
 80041a6:	f100 0001 	add.w	r0, r0, #1
 80041aa:	bfd8      	it	le
 80041ac:	eeb0 7a67 	vmovle.f32	s14, s15
 80041b0:	4281      	cmp	r1, r0
 80041b2:	eef0 7a47 	vmov.f32	s15, s14
 80041b6:	d1ee      	bne.n	8004196 <arm_max_f32+0x9a>
 80041b8:	ed82 7a00 	vstr	s14, [r2]
 80041bc:	601c      	str	r4, [r3, #0]
 80041be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041c2:	4644      	mov	r4, r8
 80041c4:	e7e3      	b.n	800418e <arm_max_f32+0x92>
 80041c6:	eeb0 7a67 	vmov.f32	s14, s15
 80041ca:	e7f5      	b.n	80041b8 <arm_max_f32+0xbc>

080041cc <arm_cfft_radix8by2_f32>:
 80041cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d0:	ed2d 8b08 	vpush	{d8-d11}
 80041d4:	4607      	mov	r7, r0
 80041d6:	4608      	mov	r0, r1
 80041d8:	f8b7 e000 	ldrh.w	lr, [r7]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80041e2:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80041e6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80041ea:	f000 80b0 	beq.w	800434e <arm_cfft_radix8by2_f32+0x182>
 80041ee:	008b      	lsls	r3, r1, #2
 80041f0:	3310      	adds	r3, #16
 80041f2:	18c6      	adds	r6, r0, r3
 80041f4:	3210      	adds	r2, #16
 80041f6:	4443      	add	r3, r8
 80041f8:	f100 0510 	add.w	r5, r0, #16
 80041fc:	f108 0410 	add.w	r4, r8, #16
 8004200:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004204:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004208:	ed13 4a04 	vldr	s8, [r3, #-16]
 800420c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004210:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004214:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004218:	ed14 0a02 	vldr	s0, [r4, #-8]
 800421c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004220:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004224:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004228:	ed15 6a03 	vldr	s12, [r5, #-12]
 800422c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004230:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004234:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004238:	ed16 1a01 	vldr	s2, [r6, #-4]
 800423c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004240:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004244:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004248:	ee37 aa27 	vadd.f32	s20, s14, s15
 800424c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004250:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004254:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004258:	ee74 aa80 	vadd.f32	s21, s9, s0
 800425c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004260:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004264:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004268:	ed45 aa02 	vstr	s21, [r5, #-8]
 800426c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004270:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004274:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004278:	ed06 9a03 	vstr	s18, [r6, #-12]
 800427c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004280:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004284:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004288:	ed12 6a03 	vldr	s12, [r2, #-12]
 800428c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004290:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004294:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004298:	ee26 8a86 	vmul.f32	s16, s13, s12
 800429c:	ee24 2a06 	vmul.f32	s4, s8, s12
 80042a0:	ee63 1a22 	vmul.f32	s3, s6, s5
 80042a4:	ee24 4a22 	vmul.f32	s8, s8, s5
 80042a8:	ee23 3a06 	vmul.f32	s6, s6, s12
 80042ac:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80042b0:	ee23 6a86 	vmul.f32	s12, s7, s12
 80042b4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80042b8:	ee36 6a04 	vadd.f32	s12, s12, s8
 80042bc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80042c0:	ee72 3a63 	vsub.f32	s7, s4, s7
 80042c4:	ee71 2a88 	vadd.f32	s5, s3, s16
 80042c8:	ed44 6a03 	vstr	s13, [r4, #-12]
 80042cc:	ed44 2a04 	vstr	s5, [r4, #-16]
 80042d0:	ed43 3a04 	vstr	s7, [r3, #-16]
 80042d4:	ed03 6a03 	vstr	s12, [r3, #-12]
 80042d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042dc:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80042e0:	ed12 7a01 	vldr	s14, [r2, #-4]
 80042e4:	ed52 5a02 	vldr	s11, [r2, #-8]
 80042e8:	ee35 6a41 	vsub.f32	s12, s10, s2
 80042ec:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80042f0:	ee67 3a87 	vmul.f32	s7, s15, s14
 80042f4:	ee26 5a87 	vmul.f32	s10, s13, s14
 80042f8:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80042fc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004300:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004304:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004308:	ee26 7a07 	vmul.f32	s14, s12, s14
 800430c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004310:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004314:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004318:	ee35 6a46 	vsub.f32	s12, s10, s12
 800431c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004320:	f1be 0e01 	subs.w	lr, lr, #1
 8004324:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004328:	f105 0510 	add.w	r5, r5, #16
 800432c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004330:	f106 0610 	add.w	r6, r6, #16
 8004334:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004338:	ed03 7a01 	vstr	s14, [r3, #-4]
 800433c:	f102 0210 	add.w	r2, r2, #16
 8004340:	f104 0410 	add.w	r4, r4, #16
 8004344:	f103 0310 	add.w	r3, r3, #16
 8004348:	f47f af5a 	bne.w	8004200 <arm_cfft_radix8by2_f32+0x34>
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	b28c      	uxth	r4, r1
 8004350:	4621      	mov	r1, r4
 8004352:	2302      	movs	r3, #2
 8004354:	f000 fbca 	bl	8004aec <arm_radix8_butterfly_f32>
 8004358:	ecbd 8b08 	vpop	{d8-d11}
 800435c:	4621      	mov	r1, r4
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4640      	mov	r0, r8
 8004362:	2302      	movs	r3, #2
 8004364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004368:	f000 bbc0 	b.w	8004aec <arm_radix8_butterfly_f32>

0800436c <arm_cfft_radix8by4_f32>:
 800436c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004370:	ed2d 8b0a 	vpush	{d8-d12}
 8004374:	8802      	ldrh	r2, [r0, #0]
 8004376:	ed91 6a00 	vldr	s12, [r1]
 800437a:	b08f      	sub	sp, #60	; 0x3c
 800437c:	460f      	mov	r7, r1
 800437e:	0852      	lsrs	r2, r2, #1
 8004380:	6841      	ldr	r1, [r0, #4]
 8004382:	900c      	str	r0, [sp, #48]	; 0x30
 8004384:	0093      	lsls	r3, r2, #2
 8004386:	4638      	mov	r0, r7
 8004388:	4418      	add	r0, r3
 800438a:	4606      	mov	r6, r0
 800438c:	9009      	str	r0, [sp, #36]	; 0x24
 800438e:	4418      	add	r0, r3
 8004390:	edd0 6a00 	vldr	s13, [r0]
 8004394:	ed96 4a00 	vldr	s8, [r6]
 8004398:	edd6 2a01 	vldr	s5, [r6, #4]
 800439c:	edd0 7a01 	vldr	s15, [r0, #4]
 80043a0:	900a      	str	r0, [sp, #40]	; 0x28
 80043a2:	ee76 5a26 	vadd.f32	s11, s12, s13
 80043a6:	4604      	mov	r4, r0
 80043a8:	4625      	mov	r5, r4
 80043aa:	441c      	add	r4, r3
 80043ac:	edd4 4a00 	vldr	s9, [r4]
 80043b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80043b4:	ed94 3a01 	vldr	s6, [r4, #4]
 80043b8:	9401      	str	r4, [sp, #4]
 80043ba:	ee35 5a84 	vadd.f32	s10, s11, s8
 80043be:	4630      	mov	r0, r6
 80043c0:	ee35 5a24 	vadd.f32	s10, s10, s9
 80043c4:	463e      	mov	r6, r7
 80043c6:	ee15 ea10 	vmov	lr, s10
 80043ca:	ee76 6a66 	vsub.f32	s13, s12, s13
 80043ce:	f846 eb08 	str.w	lr, [r6], #8
 80043d2:	ee37 6a27 	vadd.f32	s12, s14, s15
 80043d6:	ed90 5a01 	vldr	s10, [r0, #4]
 80043da:	9605      	str	r6, [sp, #20]
 80043dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043e0:	9e01      	ldr	r6, [sp, #4]
 80043e2:	9707      	str	r7, [sp, #28]
 80043e4:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80043e8:	ed96 2a01 	vldr	s4, [r6, #4]
 80043ec:	ee36 7a05 	vadd.f32	s14, s12, s10
 80043f0:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80043f4:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80043f8:	ee77 7a84 	vadd.f32	s15, s15, s8
 80043fc:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8004400:	4604      	mov	r4, r0
 8004402:	46a3      	mov	fp, r4
 8004404:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004408:	ee35 5a24 	vadd.f32	s10, s10, s9
 800440c:	ee14 8a10 	vmov	r8, s8
 8004410:	46a4      	mov	ip, r4
 8004412:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8004416:	ed87 7a01 	vstr	s14, [r7, #4]
 800441a:	f84b 8b08 	str.w	r8, [fp], #8
 800441e:	f1ac 0704 	sub.w	r7, ip, #4
 8004422:	ed8c 5a01 	vstr	s10, [ip, #4]
 8004426:	f101 0c08 	add.w	ip, r1, #8
 800442a:	462c      	mov	r4, r5
 800442c:	f8cd c010 	str.w	ip, [sp, #16]
 8004430:	ee15 ca90 	vmov	ip, s11
 8004434:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004438:	f844 cb08 	str.w	ip, [r4], #8
 800443c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004440:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004444:	9406      	str	r4, [sp, #24]
 8004446:	ee76 6a83 	vadd.f32	s13, s13, s6
 800444a:	f101 0410 	add.w	r4, r1, #16
 800444e:	0852      	lsrs	r2, r2, #1
 8004450:	9402      	str	r4, [sp, #8]
 8004452:	ed85 6a01 	vstr	s12, [r5, #4]
 8004456:	462c      	mov	r4, r5
 8004458:	f101 0518 	add.w	r5, r1, #24
 800445c:	920b      	str	r2, [sp, #44]	; 0x2c
 800445e:	46b2      	mov	sl, r6
 8004460:	9503      	str	r5, [sp, #12]
 8004462:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004466:	3a02      	subs	r2, #2
 8004468:	ee16 5a90 	vmov	r5, s13
 800446c:	46b6      	mov	lr, r6
 800446e:	4630      	mov	r0, r6
 8004470:	0852      	lsrs	r2, r2, #1
 8004472:	f84a 5b08 	str.w	r5, [sl], #8
 8004476:	f1a0 0604 	sub.w	r6, r0, #4
 800447a:	edce 7a01 	vstr	s15, [lr, #4]
 800447e:	9208      	str	r2, [sp, #32]
 8004480:	f000 8130 	beq.w	80046e4 <arm_cfft_radix8by4_f32+0x378>
 8004484:	4691      	mov	r9, r2
 8004486:	9a07      	ldr	r2, [sp, #28]
 8004488:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800448c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004490:	3b08      	subs	r3, #8
 8004492:	f102 0510 	add.w	r5, r2, #16
 8004496:	f101 0c20 	add.w	ip, r1, #32
 800449a:	f1a4 020c 	sub.w	r2, r4, #12
 800449e:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80044a2:	4433      	add	r3, r6
 80044a4:	3410      	adds	r4, #16
 80044a6:	4650      	mov	r0, sl
 80044a8:	4659      	mov	r1, fp
 80044aa:	ed55 3a02 	vldr	s7, [r5, #-8]
 80044ae:	ed14 5a02 	vldr	s10, [r4, #-8]
 80044b2:	ed91 7a00 	vldr	s14, [r1]
 80044b6:	edd0 7a00 	vldr	s15, [r0]
 80044ba:	ed54 5a01 	vldr	s11, [r4, #-4]
 80044be:	ed15 4a01 	vldr	s8, [r5, #-4]
 80044c2:	edd0 6a01 	vldr	s13, [r0, #4]
 80044c6:	ed91 6a01 	vldr	s12, [r1, #4]
 80044ca:	ee33 8a85 	vadd.f32	s16, s7, s10
 80044ce:	ee34 0a25 	vadd.f32	s0, s8, s11
 80044d2:	ee78 4a07 	vadd.f32	s9, s16, s14
 80044d6:	ee74 5a65 	vsub.f32	s11, s8, s11
 80044da:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80044de:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80044e2:	ed45 4a02 	vstr	s9, [r5, #-8]
 80044e6:	edd1 4a01 	vldr	s9, [r1, #4]
 80044ea:	ed90 4a01 	vldr	s8, [r0, #4]
 80044ee:	ee70 4a24 	vadd.f32	s9, s0, s9
 80044f2:	ee75 aa06 	vadd.f32	s21, s10, s12
 80044f6:	ee74 4a84 	vadd.f32	s9, s9, s8
 80044fa:	ee35 aac7 	vsub.f32	s20, s11, s14
 80044fe:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004502:	edd6 1a00 	vldr	s3, [r6]
 8004506:	edd7 0a00 	vldr	s1, [r7]
 800450a:	ed92 4a02 	vldr	s8, [r2, #8]
 800450e:	edd3 3a02 	vldr	s7, [r3, #8]
 8004512:	ed93 2a01 	vldr	s4, [r3, #4]
 8004516:	ed16 1a01 	vldr	s2, [r6, #-4]
 800451a:	edd2 2a01 	vldr	s5, [r2, #4]
 800451e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004522:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8004526:	ee39 3a81 	vadd.f32	s6, s19, s2
 800452a:	ee74 8a84 	vadd.f32	s17, s9, s8
 800452e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004532:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8004536:	ee7a aae6 	vsub.f32	s21, s21, s13
 800453a:	ee18 aa90 	vmov	sl, s17
 800453e:	f847 a908 	str.w	sl, [r7], #-8
 8004542:	edd2 8a01 	vldr	s17, [r2, #4]
 8004546:	ed93 9a01 	vldr	s18, [r3, #4]
 800454a:	ee73 8a28 	vadd.f32	s17, s6, s17
 800454e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004552:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004556:	ee74 0a63 	vsub.f32	s1, s8, s7
 800455a:	edc7 8a01 	vstr	s17, [r7, #4]
 800455e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8004562:	ed58 8a01 	vldr	s17, [r8, #-4]
 8004566:	ee39 1ac1 	vsub.f32	s2, s19, s2
 800456a:	ee6a ba28 	vmul.f32	s23, s20, s17
 800456e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8004572:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8004576:	ee31 9a20 	vadd.f32	s18, s2, s1
 800457a:	ee79 9a82 	vadd.f32	s19, s19, s4
 800457e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004582:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8004586:	ee69 baa8 	vmul.f32	s23, s19, s17
 800458a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800458e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8004592:	ee69 8a28 	vmul.f32	s17, s18, s17
 8004596:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800459a:	ee1c aa10 	vmov	sl, s24
 800459e:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80045a2:	f841 ab08 	str.w	sl, [r1], #8
 80045a6:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80045aa:	ee3b bacb 	vsub.f32	s22, s23, s22
 80045ae:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80045b2:	ee33 3a62 	vsub.f32	s6, s6, s5
 80045b6:	ed01 aa01 	vstr	s20, [r1, #-4]
 80045ba:	edc2 8a01 	vstr	s17, [r2, #4]
 80045be:	ed82 ba02 	vstr	s22, [r2, #8]
 80045c2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80045c6:	ee74 3a63 	vsub.f32	s7, s8, s7
 80045ca:	ee38 8a47 	vsub.f32	s16, s16, s14
 80045ce:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80045d2:	ee30 0a46 	vsub.f32	s0, s0, s12
 80045d6:	ee33 3a42 	vsub.f32	s6, s6, s4
 80045da:	ee38 8a67 	vsub.f32	s16, s16, s15
 80045de:	ee30 0a66 	vsub.f32	s0, s0, s13
 80045e2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80045e6:	ee63 8a04 	vmul.f32	s17, s6, s8
 80045ea:	ee28 aa24 	vmul.f32	s20, s16, s9
 80045ee:	ee60 9a04 	vmul.f32	s19, s0, s8
 80045f2:	ee28 8a04 	vmul.f32	s16, s16, s8
 80045f6:	ee20 0a24 	vmul.f32	s0, s0, s9
 80045fa:	ee63 3a84 	vmul.f32	s7, s7, s8
 80045fe:	ee39 4a68 	vsub.f32	s8, s18, s17
 8004602:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8004606:	ee14 aa10 	vmov	sl, s8
 800460a:	ee30 0a48 	vsub.f32	s0, s0, s16
 800460e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004612:	ed44 9a02 	vstr	s19, [r4, #-8]
 8004616:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800461a:	ed04 0a01 	vstr	s0, [r4, #-4]
 800461e:	f846 a908 	str.w	sl, [r6], #-8
 8004622:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004626:	ee35 7a87 	vadd.f32	s14, s11, s14
 800462a:	edc6 3a01 	vstr	s7, [r6, #4]
 800462e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8004632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004636:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 800463a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800463e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8004642:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004646:	ee72 2a62 	vsub.f32	s5, s4, s5
 800464a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800464e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8004652:	ee75 5a25 	vadd.f32	s11, s10, s11
 8004656:	ee62 0a86 	vmul.f32	s1, s5, s12
 800465a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800465e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004662:	ee21 6a06 	vmul.f32	s12, s2, s12
 8004666:	ee62 2a87 	vmul.f32	s5, s5, s14
 800466a:	ee21 1a07 	vmul.f32	s2, s2, s14
 800466e:	ee15 aa90 	vmov	sl, s11
 8004672:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004676:	f840 ab08 	str.w	sl, [r0], #8
 800467a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800467e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8004682:	f1b9 0901 	subs.w	r9, r9, #1
 8004686:	ed40 7a01 	vstr	s15, [r0, #-4]
 800468a:	f105 0508 	add.w	r5, r5, #8
 800468e:	ed83 1a02 	vstr	s2, [r3, #8]
 8004692:	edc3 2a01 	vstr	s5, [r3, #4]
 8004696:	f108 0808 	add.w	r8, r8, #8
 800469a:	f1a2 0208 	sub.w	r2, r2, #8
 800469e:	f10c 0c10 	add.w	ip, ip, #16
 80046a2:	f104 0408 	add.w	r4, r4, #8
 80046a6:	f10e 0e18 	add.w	lr, lr, #24
 80046aa:	f1a3 0308 	sub.w	r3, r3, #8
 80046ae:	f47f aefc 	bne.w	80044aa <arm_cfft_radix8by4_f32+0x13e>
 80046b2:	9908      	ldr	r1, [sp, #32]
 80046b4:	9802      	ldr	r0, [sp, #8]
 80046b6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80046ba:	00cb      	lsls	r3, r1, #3
 80046bc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80046c0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80046c4:	9102      	str	r1, [sp, #8]
 80046c6:	9905      	ldr	r1, [sp, #20]
 80046c8:	4419      	add	r1, r3
 80046ca:	9105      	str	r1, [sp, #20]
 80046cc:	9904      	ldr	r1, [sp, #16]
 80046ce:	4419      	add	r1, r3
 80046d0:	9104      	str	r1, [sp, #16]
 80046d2:	9906      	ldr	r1, [sp, #24]
 80046d4:	449b      	add	fp, r3
 80046d6:	4419      	add	r1, r3
 80046d8:	449a      	add	sl, r3
 80046da:	9b03      	ldr	r3, [sp, #12]
 80046dc:	9106      	str	r1, [sp, #24]
 80046de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80046e2:	9303      	str	r3, [sp, #12]
 80046e4:	9a05      	ldr	r2, [sp, #20]
 80046e6:	9806      	ldr	r0, [sp, #24]
 80046e8:	ed92 4a00 	vldr	s8, [r2]
 80046ec:	ed90 7a00 	vldr	s14, [r0]
 80046f0:	ed9b 3a00 	vldr	s6, [fp]
 80046f4:	edda 3a00 	vldr	s7, [sl]
 80046f8:	edd2 4a01 	vldr	s9, [r2, #4]
 80046fc:	edd0 6a01 	vldr	s13, [r0, #4]
 8004700:	ed9a 2a01 	vldr	s4, [sl, #4]
 8004704:	eddb 7a01 	vldr	s15, [fp, #4]
 8004708:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800470c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800470e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8004712:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8004716:	ee36 5a03 	vadd.f32	s10, s12, s6
 800471a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800471e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004722:	ee34 7a47 	vsub.f32	s14, s8, s14
 8004726:	ed82 5a00 	vstr	s10, [r2]
 800472a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800472e:	edda 4a01 	vldr	s9, [sl, #4]
 8004732:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004736:	ee37 4a27 	vadd.f32	s8, s14, s15
 800473a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800473e:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8004742:	ed82 5a01 	vstr	s10, [r2, #4]
 8004746:	9a04      	ldr	r2, [sp, #16]
 8004748:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800474c:	edd2 1a00 	vldr	s3, [r2]
 8004750:	edd2 2a01 	vldr	s5, [r2, #4]
 8004754:	9a02      	ldr	r2, [sp, #8]
 8004756:	ee34 4a42 	vsub.f32	s8, s8, s4
 800475a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800475e:	ee64 4a21 	vmul.f32	s9, s8, s3
 8004762:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004766:	ee65 2a22 	vmul.f32	s5, s10, s5
 800476a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800476e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004772:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004776:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800477a:	edcb 2a00 	vstr	s5, [fp]
 800477e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8004782:	ed92 4a01 	vldr	s8, [r2, #4]
 8004786:	ed92 5a00 	vldr	s10, [r2]
 800478a:	9a03      	ldr	r2, [sp, #12]
 800478c:	ee36 6a63 	vsub.f32	s12, s12, s7
 8004790:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8004794:	ee66 4a05 	vmul.f32	s9, s12, s10
 8004798:	ee25 5a85 	vmul.f32	s10, s11, s10
 800479c:	ee26 6a04 	vmul.f32	s12, s12, s8
 80047a0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80047a4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80047a8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80047ac:	ee76 6a83 	vadd.f32	s13, s13, s6
 80047b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047b4:	ed80 6a01 	vstr	s12, [r0, #4]
 80047b8:	edc0 5a00 	vstr	s11, [r0]
 80047bc:	edd2 5a01 	vldr	s11, [r2, #4]
 80047c0:	9807      	ldr	r0, [sp, #28]
 80047c2:	ee77 7a02 	vadd.f32	s15, s14, s4
 80047c6:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80047ca:	edd2 6a00 	vldr	s13, [r2]
 80047ce:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80047d2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80047d6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80047da:	ee27 7a25 	vmul.f32	s14, s14, s11
 80047de:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80047e2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80047e6:	edca 7a01 	vstr	s15, [sl, #4]
 80047ea:	ed8a 7a00 	vstr	s14, [sl]
 80047ee:	6872      	ldr	r2, [r6, #4]
 80047f0:	4621      	mov	r1, r4
 80047f2:	2304      	movs	r3, #4
 80047f4:	f000 f97a 	bl	8004aec <arm_radix8_butterfly_f32>
 80047f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80047fa:	6872      	ldr	r2, [r6, #4]
 80047fc:	4621      	mov	r1, r4
 80047fe:	2304      	movs	r3, #4
 8004800:	f000 f974 	bl	8004aec <arm_radix8_butterfly_f32>
 8004804:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004806:	6872      	ldr	r2, [r6, #4]
 8004808:	4621      	mov	r1, r4
 800480a:	2304      	movs	r3, #4
 800480c:	f000 f96e 	bl	8004aec <arm_radix8_butterfly_f32>
 8004810:	6872      	ldr	r2, [r6, #4]
 8004812:	9801      	ldr	r0, [sp, #4]
 8004814:	4621      	mov	r1, r4
 8004816:	2304      	movs	r3, #4
 8004818:	b00f      	add	sp, #60	; 0x3c
 800481a:	ecbd 8b0a 	vpop	{d8-d12}
 800481e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004822:	f000 b963 	b.w	8004aec <arm_radix8_butterfly_f32>
 8004826:	bf00      	nop

08004828 <arm_cfft_f32>:
 8004828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800482c:	2a01      	cmp	r2, #1
 800482e:	4606      	mov	r6, r0
 8004830:	4617      	mov	r7, r2
 8004832:	460c      	mov	r4, r1
 8004834:	4698      	mov	r8, r3
 8004836:	8805      	ldrh	r5, [r0, #0]
 8004838:	d054      	beq.n	80048e4 <arm_cfft_f32+0xbc>
 800483a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800483e:	d04c      	beq.n	80048da <arm_cfft_f32+0xb2>
 8004840:	d916      	bls.n	8004870 <arm_cfft_f32+0x48>
 8004842:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004846:	d01a      	beq.n	800487e <arm_cfft_f32+0x56>
 8004848:	d95c      	bls.n	8004904 <arm_cfft_f32+0xdc>
 800484a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800484e:	d044      	beq.n	80048da <arm_cfft_f32+0xb2>
 8004850:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004854:	d105      	bne.n	8004862 <arm_cfft_f32+0x3a>
 8004856:	2301      	movs	r3, #1
 8004858:	6872      	ldr	r2, [r6, #4]
 800485a:	4629      	mov	r1, r5
 800485c:	4620      	mov	r0, r4
 800485e:	f000 f945 	bl	8004aec <arm_radix8_butterfly_f32>
 8004862:	f1b8 0f00 	cmp.w	r8, #0
 8004866:	d111      	bne.n	800488c <arm_cfft_f32+0x64>
 8004868:	2f01      	cmp	r7, #1
 800486a:	d016      	beq.n	800489a <arm_cfft_f32+0x72>
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	2d20      	cmp	r5, #32
 8004872:	d032      	beq.n	80048da <arm_cfft_f32+0xb2>
 8004874:	d94a      	bls.n	800490c <arm_cfft_f32+0xe4>
 8004876:	2d40      	cmp	r5, #64	; 0x40
 8004878:	d0ed      	beq.n	8004856 <arm_cfft_f32+0x2e>
 800487a:	2d80      	cmp	r5, #128	; 0x80
 800487c:	d1f1      	bne.n	8004862 <arm_cfft_f32+0x3a>
 800487e:	4621      	mov	r1, r4
 8004880:	4630      	mov	r0, r6
 8004882:	f7ff fca3 	bl	80041cc <arm_cfft_radix8by2_f32>
 8004886:	f1b8 0f00 	cmp.w	r8, #0
 800488a:	d0ed      	beq.n	8004868 <arm_cfft_f32+0x40>
 800488c:	68b2      	ldr	r2, [r6, #8]
 800488e:	89b1      	ldrh	r1, [r6, #12]
 8004890:	4620      	mov	r0, r4
 8004892:	f7fb fcbd 	bl	8000210 <arm_bitreversal_32>
 8004896:	2f01      	cmp	r7, #1
 8004898:	d1e8      	bne.n	800486c <arm_cfft_f32+0x44>
 800489a:	ee07 5a90 	vmov	s15, r5
 800489e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80048aa:	2d00      	cmp	r5, #0
 80048ac:	d0de      	beq.n	800486c <arm_cfft_f32+0x44>
 80048ae:	f104 0108 	add.w	r1, r4, #8
 80048b2:	2300      	movs	r3, #0
 80048b4:	3301      	adds	r3, #1
 80048b6:	429d      	cmp	r5, r3
 80048b8:	f101 0108 	add.w	r1, r1, #8
 80048bc:	ed11 7a04 	vldr	s14, [r1, #-16]
 80048c0:	ed51 7a03 	vldr	s15, [r1, #-12]
 80048c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80048c8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80048cc:	ed01 7a04 	vstr	s14, [r1, #-16]
 80048d0:	ed41 7a03 	vstr	s15, [r1, #-12]
 80048d4:	d1ee      	bne.n	80048b4 <arm_cfft_f32+0x8c>
 80048d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048da:	4621      	mov	r1, r4
 80048dc:	4630      	mov	r0, r6
 80048de:	f7ff fd45 	bl	800436c <arm_cfft_radix8by4_f32>
 80048e2:	e7be      	b.n	8004862 <arm_cfft_f32+0x3a>
 80048e4:	b1ad      	cbz	r5, 8004912 <arm_cfft_f32+0xea>
 80048e6:	f101 030c 	add.w	r3, r1, #12
 80048ea:	2200      	movs	r2, #0
 80048ec:	ed53 7a02 	vldr	s15, [r3, #-8]
 80048f0:	3201      	adds	r2, #1
 80048f2:	eef1 7a67 	vneg.f32	s15, s15
 80048f6:	4295      	cmp	r5, r2
 80048f8:	ed43 7a02 	vstr	s15, [r3, #-8]
 80048fc:	f103 0308 	add.w	r3, r3, #8
 8004900:	d1f4      	bne.n	80048ec <arm_cfft_f32+0xc4>
 8004902:	e79a      	b.n	800483a <arm_cfft_f32+0x12>
 8004904:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004908:	d0a5      	beq.n	8004856 <arm_cfft_f32+0x2e>
 800490a:	e7aa      	b.n	8004862 <arm_cfft_f32+0x3a>
 800490c:	2d10      	cmp	r5, #16
 800490e:	d0b6      	beq.n	800487e <arm_cfft_f32+0x56>
 8004910:	e7a7      	b.n	8004862 <arm_cfft_f32+0x3a>
 8004912:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004916:	d894      	bhi.n	8004842 <arm_cfft_f32+0x1a>
 8004918:	e7aa      	b.n	8004870 <arm_cfft_f32+0x48>
 800491a:	bf00      	nop

0800491c <arm_cmplx_mag_f32>:
 800491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004920:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004924:	b084      	sub	sp, #16
 8004926:	d07f      	beq.n	8004a28 <arm_cmplx_mag_f32+0x10c>
 8004928:	2700      	movs	r7, #0
 800492a:	f100 0420 	add.w	r4, r0, #32
 800492e:	f101 0510 	add.w	r5, r1, #16
 8004932:	4646      	mov	r6, r8
 8004934:	e05a      	b.n	80049ec <arm_cmplx_mag_f32+0xd0>
 8004936:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800493a:	eeb4 0a40 	vcmp.f32	s0, s0
 800493e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004942:	f040 80a4 	bne.w	8004a8e <arm_cmplx_mag_f32+0x172>
 8004946:	ed05 0a04 	vstr	s0, [r5, #-16]
 800494a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800494e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8004952:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004956:	ee20 0a00 	vmul.f32	s0, s0, s0
 800495a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800495e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004966:	f2c0 808f 	blt.w	8004a88 <arm_cmplx_mag_f32+0x16c>
 800496a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800496e:	eeb4 0a40 	vcmp.f32	s0, s0
 8004972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004976:	f040 80af 	bne.w	8004ad8 <arm_cmplx_mag_f32+0x1bc>
 800497a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800497e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8004982:	ed14 0a03 	vldr	s0, [r4, #-12]
 8004986:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800498a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800498e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004992:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800499a:	db72      	blt.n	8004a82 <arm_cmplx_mag_f32+0x166>
 800499c:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80049a0:	eeb4 0a40 	vcmp.f32	s0, s0
 80049a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a8:	f040 808c 	bne.w	8004ac4 <arm_cmplx_mag_f32+0x1a8>
 80049ac:	ed05 0a02 	vstr	s0, [r5, #-8]
 80049b0:	ed54 7a02 	vldr	s15, [r4, #-8]
 80049b4:	ed14 0a01 	vldr	s0, [r4, #-4]
 80049b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80049bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80049c0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80049c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049cc:	db20      	blt.n	8004a10 <arm_cmplx_mag_f32+0xf4>
 80049ce:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80049d2:	eeb4 0a40 	vcmp.f32	s0, s0
 80049d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049da:	d169      	bne.n	8004ab0 <arm_cmplx_mag_f32+0x194>
 80049dc:	3e01      	subs	r6, #1
 80049de:	ed05 0a01 	vstr	s0, [r5, #-4]
 80049e2:	f104 0420 	add.w	r4, r4, #32
 80049e6:	f105 0510 	add.w	r5, r5, #16
 80049ea:	d019      	beq.n	8004a20 <arm_cmplx_mag_f32+0x104>
 80049ec:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80049f0:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80049f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80049f8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80049fc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004a00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	da95      	bge.n	8004936 <arm_cmplx_mag_f32+0x1a>
 8004a0a:	f845 7c10 	str.w	r7, [r5, #-16]
 8004a0e:	e79c      	b.n	800494a <arm_cmplx_mag_f32+0x2e>
 8004a10:	3e01      	subs	r6, #1
 8004a12:	f845 7c04 	str.w	r7, [r5, #-4]
 8004a16:	f104 0420 	add.w	r4, r4, #32
 8004a1a:	f105 0510 	add.w	r5, r5, #16
 8004a1e:	d1e5      	bne.n	80049ec <arm_cmplx_mag_f32+0xd0>
 8004a20:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8004a24:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8004a28:	f012 0503 	ands.w	r5, r2, #3
 8004a2c:	d026      	beq.n	8004a7c <arm_cmplx_mag_f32+0x160>
 8004a2e:	2600      	movs	r6, #0
 8004a30:	f100 0408 	add.w	r4, r0, #8
 8004a34:	e00c      	b.n	8004a50 <arm_cmplx_mag_f32+0x134>
 8004a36:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004a3a:	eeb4 0a40 	vcmp.f32	s0, s0
 8004a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a42:	d12e      	bne.n	8004aa2 <arm_cmplx_mag_f32+0x186>
 8004a44:	3d01      	subs	r5, #1
 8004a46:	ed01 0a01 	vstr	s0, [r1, #-4]
 8004a4a:	f104 0408 	add.w	r4, r4, #8
 8004a4e:	d015      	beq.n	8004a7c <arm_cmplx_mag_f32+0x160>
 8004a50:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004a54:	ed14 0a01 	vldr	s0, [r4, #-4]
 8004a58:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004a5c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004a60:	3104      	adds	r1, #4
 8004a62:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004a66:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6e:	dae2      	bge.n	8004a36 <arm_cmplx_mag_f32+0x11a>
 8004a70:	3d01      	subs	r5, #1
 8004a72:	f841 6c04 	str.w	r6, [r1, #-4]
 8004a76:	f104 0408 	add.w	r4, r4, #8
 8004a7a:	d1e9      	bne.n	8004a50 <arm_cmplx_mag_f32+0x134>
 8004a7c:	b004      	add	sp, #16
 8004a7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a82:	f845 7c08 	str.w	r7, [r5, #-8]
 8004a86:	e793      	b.n	80049b0 <arm_cmplx_mag_f32+0x94>
 8004a88:	f845 7c0c 	str.w	r7, [r5, #-12]
 8004a8c:	e777      	b.n	800497e <arm_cmplx_mag_f32+0x62>
 8004a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a92:	9203      	str	r2, [sp, #12]
 8004a94:	9102      	str	r1, [sp, #8]
 8004a96:	9001      	str	r0, [sp, #4]
 8004a98:	f003 f8d6 	bl	8007c48 <sqrtf>
 8004a9c:	a801      	add	r0, sp, #4
 8004a9e:	c807      	ldmia	r0, {r0, r1, r2}
 8004aa0:	e751      	b.n	8004946 <arm_cmplx_mag_f32+0x2a>
 8004aa2:	eeb0 0a67 	vmov.f32	s0, s15
 8004aa6:	9101      	str	r1, [sp, #4]
 8004aa8:	f003 f8ce 	bl	8007c48 <sqrtf>
 8004aac:	9901      	ldr	r1, [sp, #4]
 8004aae:	e7c9      	b.n	8004a44 <arm_cmplx_mag_f32+0x128>
 8004ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab4:	9203      	str	r2, [sp, #12]
 8004ab6:	9102      	str	r1, [sp, #8]
 8004ab8:	9001      	str	r0, [sp, #4]
 8004aba:	f003 f8c5 	bl	8007c48 <sqrtf>
 8004abe:	a801      	add	r0, sp, #4
 8004ac0:	c807      	ldmia	r0, {r0, r1, r2}
 8004ac2:	e78b      	b.n	80049dc <arm_cmplx_mag_f32+0xc0>
 8004ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac8:	9203      	str	r2, [sp, #12]
 8004aca:	9102      	str	r1, [sp, #8]
 8004acc:	9001      	str	r0, [sp, #4]
 8004ace:	f003 f8bb 	bl	8007c48 <sqrtf>
 8004ad2:	a801      	add	r0, sp, #4
 8004ad4:	c807      	ldmia	r0, {r0, r1, r2}
 8004ad6:	e769      	b.n	80049ac <arm_cmplx_mag_f32+0x90>
 8004ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8004adc:	9203      	str	r2, [sp, #12]
 8004ade:	9102      	str	r1, [sp, #8]
 8004ae0:	9001      	str	r0, [sp, #4]
 8004ae2:	f003 f8b1 	bl	8007c48 <sqrtf>
 8004ae6:	a801      	add	r0, sp, #4
 8004ae8:	c807      	ldmia	r0, {r0, r1, r2}
 8004aea:	e746      	b.n	800497a <arm_cmplx_mag_f32+0x5e>

08004aec <arm_radix8_butterfly_f32>:
 8004aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004af0:	ed2d 8b10 	vpush	{d8-d15}
 8004af4:	461c      	mov	r4, r3
 8004af6:	b09d      	sub	sp, #116	; 0x74
 8004af8:	4603      	mov	r3, r0
 8004afa:	3304      	adds	r3, #4
 8004afc:	ed9f bac4 	vldr	s22, [pc, #784]	; 8004e10 <arm_radix8_butterfly_f32+0x324>
 8004b00:	9019      	str	r0, [sp, #100]	; 0x64
 8004b02:	921a      	str	r2, [sp, #104]	; 0x68
 8004b04:	468b      	mov	fp, r1
 8004b06:	931b      	str	r3, [sp, #108]	; 0x6c
 8004b08:	468a      	mov	sl, r1
 8004b0a:	46a1      	mov	r9, r4
 8004b0c:	4607      	mov	r7, r0
 8004b0e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004b12:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004b16:	eb03 0508 	add.w	r5, r3, r8
 8004b1a:	195c      	adds	r4, r3, r5
 8004b1c:	00de      	lsls	r6, r3, #3
 8004b1e:	191a      	adds	r2, r3, r4
 8004b20:	9600      	str	r6, [sp, #0]
 8004b22:	1898      	adds	r0, r3, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	9e00      	ldr	r6, [sp, #0]
 8004b28:	9311      	str	r3, [sp, #68]	; 0x44
 8004b2a:	4401      	add	r1, r0
 8004b2c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004b30:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8004b34:	19be      	adds	r6, r7, r6
 8004b36:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8004b3a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8004b3e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8004b42:	9f00      	ldr	r7, [sp, #0]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	eb06 0e07 	add.w	lr, r6, r7
 8004b4a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004b4c:	9302      	str	r3, [sp, #8]
 8004b4e:	3204      	adds	r2, #4
 8004b50:	3104      	adds	r1, #4
 8004b52:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004b56:	f04f 0c00 	mov.w	ip, #0
 8004b5a:	edde 7a00 	vldr	s15, [lr]
 8004b5e:	edd6 6a00 	vldr	s13, [r6]
 8004b62:	ed95 2a00 	vldr	s4, [r5]
 8004b66:	ed17 aa01 	vldr	s20, [r7, #-4]
 8004b6a:	edd4 4a00 	vldr	s9, [r4]
 8004b6e:	ed90 5a00 	vldr	s10, [r0]
 8004b72:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004b76:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004b7a:	ee77 8a85 	vadd.f32	s17, s15, s10
 8004b7e:	ee76 3a87 	vadd.f32	s7, s13, s14
 8004b82:	ee32 4a20 	vadd.f32	s8, s4, s1
 8004b86:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8004b8a:	ee33 6a84 	vadd.f32	s12, s7, s8
 8004b8e:	ee73 5a28 	vadd.f32	s11, s6, s17
 8004b92:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004b96:	ee75 6a86 	vadd.f32	s13, s11, s12
 8004b9a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8004b9e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8004ba2:	edc4 5a00 	vstr	s11, [r4]
 8004ba6:	ed92 9a00 	vldr	s18, [r2]
 8004baa:	ed95 1a01 	vldr	s2, [r5, #4]
 8004bae:	edd6 5a01 	vldr	s11, [r6, #4]
 8004bb2:	ed91 6a00 	vldr	s12, [r1]
 8004bb6:	edd7 2a00 	vldr	s5, [r7]
 8004bba:	edd4 1a01 	vldr	s3, [r4, #4]
 8004bbe:	edde 6a01 	vldr	s13, [lr, #4]
 8004bc2:	edd0 9a01 	vldr	s19, [r0, #4]
 8004bc6:	ee72 0a60 	vsub.f32	s1, s4, s1
 8004bca:	ee71 aa46 	vsub.f32	s21, s2, s12
 8004bce:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8004bd2:	ee37 0a60 	vsub.f32	s0, s14, s1
 8004bd6:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8004bda:	ee37 7a20 	vadd.f32	s14, s14, s1
 8004bde:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8004be2:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8004be6:	ee75 5a89 	vadd.f32	s11, s11, s18
 8004bea:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8004bee:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8004bf2:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004bf6:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004bfa:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8004bfe:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004c02:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8004c06:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004c0a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8004c0e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004c12:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004c16:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004c1a:	ee75 8a86 	vadd.f32	s17, s11, s12
 8004c1e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004c22:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004c26:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8004c2a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8004c2e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004c32:	ee75 4a27 	vadd.f32	s9, s10, s15
 8004c36:	ee71 5a49 	vsub.f32	s11, s2, s18
 8004c3a:	ee31 2a09 	vadd.f32	s4, s2, s18
 8004c3e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004c42:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8004c46:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8004c4a:	ee73 0a06 	vadd.f32	s1, s6, s12
 8004c4e:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8004c52:	ee36 5a87 	vadd.f32	s10, s13, s14
 8004c56:	ee32 8a28 	vadd.f32	s16, s4, s17
 8004c5a:	ee33 6a46 	vsub.f32	s12, s6, s12
 8004c5e:	ee34 4a25 	vadd.f32	s8, s8, s11
 8004c62:	ee33 3a80 	vadd.f32	s6, s7, s0
 8004c66:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004c6a:	ee71 5a64 	vsub.f32	s11, s2, s9
 8004c6e:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8004c72:	ee32 2a68 	vsub.f32	s4, s4, s17
 8004c76:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004c7a:	ee74 4a81 	vadd.f32	s9, s9, s2
 8004c7e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8004c82:	44dc      	add	ip, fp
 8004c84:	45e2      	cmp	sl, ip
 8004c86:	ed87 8a00 	vstr	s16, [r7]
 8004c8a:	ed84 2a01 	vstr	s4, [r4, #4]
 8004c8e:	441f      	add	r7, r3
 8004c90:	edce 0a00 	vstr	s1, [lr]
 8004c94:	441c      	add	r4, r3
 8004c96:	ed80 6a00 	vstr	s12, [r0]
 8004c9a:	edce 1a01 	vstr	s3, [lr, #4]
 8004c9e:	ed80 4a01 	vstr	s8, [r0, #4]
 8004ca2:	449e      	add	lr, r3
 8004ca4:	ed86 3a00 	vstr	s6, [r6]
 8004ca8:	4418      	add	r0, r3
 8004caa:	ed41 3a01 	vstr	s7, [r1, #-4]
 8004cae:	ed02 5a01 	vstr	s10, [r2, #-4]
 8004cb2:	ed85 7a00 	vstr	s14, [r5]
 8004cb6:	edc6 5a01 	vstr	s11, [r6, #4]
 8004cba:	edc1 4a00 	vstr	s9, [r1]
 8004cbe:	441e      	add	r6, r3
 8004cc0:	edc2 6a00 	vstr	s13, [r2]
 8004cc4:	4419      	add	r1, r3
 8004cc6:	edc5 7a01 	vstr	s15, [r5, #4]
 8004cca:	441a      	add	r2, r3
 8004ccc:	441d      	add	r5, r3
 8004cce:	f63f af44 	bhi.w	8004b5a <arm_radix8_butterfly_f32+0x6e>
 8004cd2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004cd4:	2a07      	cmp	r2, #7
 8004cd6:	f240 81f5 	bls.w	80050c4 <arm_radix8_butterfly_f32+0x5d8>
 8004cda:	f108 0101 	add.w	r1, r8, #1
 8004cde:	188f      	adds	r7, r1, r2
 8004ce0:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8004ce4:	19d6      	adds	r6, r2, r7
 8004ce6:	eb08 0c09 	add.w	ip, r8, r9
 8004cea:	1994      	adds	r4, r2, r6
 8004cec:	eb0c 0e09 	add.w	lr, ip, r9
 8004cf0:	4610      	mov	r0, r2
 8004cf2:	9701      	str	r7, [sp, #4]
 8004cf4:	4420      	add	r0, r4
 8004cf6:	eb0e 0709 	add.w	r7, lr, r9
 8004cfa:	1815      	adds	r5, r2, r0
 8004cfc:	eb07 0209 	add.w	r2, r7, r9
 8004d00:	9203      	str	r2, [sp, #12]
 8004d02:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004d04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d08:	9117      	str	r1, [sp, #92]	; 0x5c
 8004d0a:	440a      	add	r2, r1
 8004d0c:	9900      	ldr	r1, [sp, #0]
 8004d0e:	3108      	adds	r1, #8
 8004d10:	9100      	str	r1, [sp, #0]
 8004d12:	9902      	ldr	r1, [sp, #8]
 8004d14:	3108      	adds	r1, #8
 8004d16:	9102      	str	r1, [sp, #8]
 8004d18:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004d1a:	00ff      	lsls	r7, r7, #3
 8004d1c:	9715      	str	r7, [sp, #84]	; 0x54
 8004d1e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8004d22:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004d26:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8004d2a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004d2c:	9903      	ldr	r1, [sp, #12]
 8004d2e:	19d7      	adds	r7, r2, r7
 8004d30:	00c9      	lsls	r1, r1, #3
 8004d32:	9114      	str	r1, [sp, #80]	; 0x50
 8004d34:	9710      	str	r7, [sp, #64]	; 0x40
 8004d36:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004d38:	9f00      	ldr	r7, [sp, #0]
 8004d3a:	19cf      	adds	r7, r1, r7
 8004d3c:	970d      	str	r7, [sp, #52]	; 0x34
 8004d3e:	9f02      	ldr	r7, [sp, #8]
 8004d40:	19cf      	adds	r7, r1, r7
 8004d42:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8004d46:	970c      	str	r7, [sp, #48]	; 0x30
 8004d48:	9f01      	ldr	r7, [sp, #4]
 8004d4a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8004d4e:	3504      	adds	r5, #4
 8004d50:	3004      	adds	r0, #4
 8004d52:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8004d56:	9508      	str	r5, [sp, #32]
 8004d58:	9009      	str	r0, [sp, #36]	; 0x24
 8004d5a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8004d5c:	981a      	ldr	r0, [sp, #104]	; 0x68
 8004d5e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8004d62:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004d66:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8004d6a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004d6c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004d70:	1945      	adds	r5, r0, r5
 8004d72:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004d76:	460f      	mov	r7, r1
 8004d78:	3404      	adds	r4, #4
 8004d7a:	4641      	mov	r1, r8
 8004d7c:	1841      	adds	r1, r0, r1
 8004d7e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8004d82:	940a      	str	r4, [sp, #40]	; 0x28
 8004d84:	eb00 0c06 	add.w	ip, r0, r6
 8004d88:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d8c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8004d8e:	9506      	str	r5, [sp, #24]
 8004d90:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8004d92:	9105      	str	r1, [sp, #20]
 8004d94:	4639      	mov	r1, r7
 8004d96:	1905      	adds	r5, r0, r4
 8004d98:	3108      	adds	r1, #8
 8004d9a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8004d9c:	9507      	str	r5, [sp, #28]
 8004d9e:	910f      	str	r1, [sp, #60]	; 0x3c
 8004da0:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8004da4:	2101      	movs	r1, #1
 8004da6:	eb00 0e06 	add.w	lr, r0, r6
 8004daa:	9518      	str	r5, [sp, #96]	; 0x60
 8004dac:	9404      	str	r4, [sp, #16]
 8004dae:	9103      	str	r1, [sp, #12]
 8004db0:	4620      	mov	r0, r4
 8004db2:	4689      	mov	r9, r1
 8004db4:	9e06      	ldr	r6, [sp, #24]
 8004db6:	ed90 fa00 	vldr	s30, [r0]
 8004dba:	edd6 7a01 	vldr	s15, [r6, #4]
 8004dbe:	edd0 ba01 	vldr	s23, [r0, #4]
 8004dc2:	edcd 7a00 	vstr	s15, [sp]
 8004dc6:	a80d      	add	r0, sp, #52	; 0x34
 8004dc8:	edde 7a01 	vldr	s15, [lr, #4]
 8004dcc:	9c05      	ldr	r4, [sp, #20]
 8004dce:	9d07      	ldr	r5, [sp, #28]
 8004dd0:	edd2 fa00 	vldr	s31, [r2]
 8004dd4:	ed92 ca01 	vldr	s24, [r2, #4]
 8004dd8:	edcd 7a01 	vstr	s15, [sp, #4]
 8004ddc:	c807      	ldmia	r0, {r0, r1, r2}
 8004dde:	eddc 7a01 	vldr	s15, [ip, #4]
 8004de2:	edd4 ea00 	vldr	s29, [r4]
 8004de6:	ed95 ea00 	vldr	s28, [r5]
 8004dea:	edd6 da00 	vldr	s27, [r6]
 8004dee:	edd4 aa01 	vldr	s21, [r4, #4]
 8004df2:	ed95 aa01 	vldr	s20, [r5, #4]
 8004df6:	ed9e da00 	vldr	s26, [lr]
 8004dfa:	eddc ca00 	vldr	s25, [ip]
 8004dfe:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004e04:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004e06:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004e08:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004e0a:	edcd 7a02 	vstr	s15, [sp, #8]
 8004e0e:	e001      	b.n	8004e14 <arm_radix8_butterfly_f32+0x328>
 8004e10:	3f3504f3 	.word	0x3f3504f3
 8004e14:	ed16 6a01 	vldr	s12, [r6, #-4]
 8004e18:	ed91 5a00 	vldr	s10, [r1]
 8004e1c:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004e20:	edd5 7a00 	vldr	s15, [r5]
 8004e24:	ed18 7a01 	vldr	s14, [r8, #-4]
 8004e28:	edd2 3a00 	vldr	s7, [r2]
 8004e2c:	ed94 3a00 	vldr	s6, [r4]
 8004e30:	ed90 2a00 	vldr	s4, [r0]
 8004e34:	ed92 0a01 	vldr	s0, [r2, #4]
 8004e38:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004e3c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004e40:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004e44:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004e48:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004e4c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004e50:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004e54:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004e58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004e5c:	ed82 6a00 	vstr	s12, [r2]
 8004e60:	edd5 8a01 	vldr	s17, [r5, #4]
 8004e64:	ed90 9a01 	vldr	s18, [r0, #4]
 8004e68:	edd6 2a00 	vldr	s5, [r6]
 8004e6c:	ed98 7a00 	vldr	s14, [r8]
 8004e70:	edd4 0a01 	vldr	s1, [r4, #4]
 8004e74:	ed91 6a01 	vldr	s12, [r1, #4]
 8004e78:	edd7 5a00 	vldr	s11, [r7]
 8004e7c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004e80:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004e84:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004e88:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8004e8c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8004e90:	ee38 7a87 	vadd.f32	s14, s17, s14
 8004e94:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8004e98:	ee79 2a22 	vadd.f32	s5, s18, s5
 8004e9c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8004ea0:	ee32 9a27 	vadd.f32	s18, s4, s15
 8004ea4:	ee35 5a29 	vadd.f32	s10, s10, s19
 8004ea8:	ee72 7a67 	vsub.f32	s15, s4, s15
 8004eac:	ee30 2a06 	vadd.f32	s4, s0, s12
 8004eb0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8004eb4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8004eb8:	ee32 9a08 	vadd.f32	s18, s4, s16
 8004ebc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8004ec0:	ee32 2a48 	vsub.f32	s4, s4, s16
 8004ec4:	ee71 4a64 	vsub.f32	s9, s2, s9
 8004ec8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8004ecc:	ee32 1a87 	vadd.f32	s2, s5, s14
 8004ed0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8004ed4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8004ed8:	ee30 6a46 	vsub.f32	s12, s0, s12
 8004edc:	ee73 0a29 	vadd.f32	s1, s6, s19
 8004ee0:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004ee4:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004ee8:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004eec:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004ef0:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004ef4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004ef8:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004efc:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004f00:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004f04:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004f08:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004f0c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004f10:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004f14:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004f18:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004f1c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004f20:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004f24:	ee30 0a80 	vadd.f32	s0, s1, s0
 8004f28:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004f2c:	ee33 6a06 	vadd.f32	s12, s6, s12
 8004f30:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004f34:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004f38:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004f3c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004f40:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004f44:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004f48:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004f4c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004f50:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004f54:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004f58:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004f5c:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004f60:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004f64:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004f68:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004f6c:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004f70:	ed82 1a01 	vstr	s2, [r2, #4]
 8004f74:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004f78:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004f7c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004f80:	ed81 3a00 	vstr	s6, [r1]
 8004f84:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004f88:	ee32 2a05 	vadd.f32	s4, s4, s10
 8004f8c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8004f90:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8004f94:	ee67 2a22 	vmul.f32	s5, s14, s5
 8004f98:	ee64 1a00 	vmul.f32	s3, s8, s0
 8004f9c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8004fa0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8004fa4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8004fa8:	ee64 8a28 	vmul.f32	s17, s8, s17
 8004fac:	ed9d 4a00 	vldr	s8, [sp]
 8004fb0:	edc1 6a01 	vstr	s13, [r1, #4]
 8004fb4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8004fb8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8004fbc:	ee64 9a29 	vmul.f32	s19, s8, s19
 8004fc0:	ee24 4a25 	vmul.f32	s8, s8, s11
 8004fc4:	ee30 7a87 	vadd.f32	s14, s1, s14
 8004fc8:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004fcc:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8004fd0:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8004fd4:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8004fd8:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8004fdc:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8004fe0:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004fe4:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004fe8:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004fec:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8004ff0:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004ff4:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004ff8:	44d9      	add	r9, fp
 8004ffa:	45ca      	cmp	sl, r9
 8004ffc:	ed84 9a00 	vstr	s18, [r4]
 8005000:	edc4 3a01 	vstr	s7, [r4, #4]
 8005004:	441a      	add	r2, r3
 8005006:	ed07 7a01 	vstr	s14, [r7, #-4]
 800500a:	edc7 2a00 	vstr	s5, [r7]
 800500e:	4419      	add	r1, r3
 8005010:	ed80 2a00 	vstr	s4, [r0]
 8005014:	ed80 8a01 	vstr	s16, [r0, #4]
 8005018:	441c      	add	r4, r3
 800501a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800501e:	ed88 0a00 	vstr	s0, [r8]
 8005022:	441f      	add	r7, r3
 8005024:	ed46 4a01 	vstr	s9, [r6, #-4]
 8005028:	4418      	add	r0, r3
 800502a:	edc6 9a00 	vstr	s19, [r6]
 800502e:	4498      	add	r8, r3
 8005030:	edc5 0a00 	vstr	s1, [r5]
 8005034:	ed85 6a01 	vstr	s12, [r5, #4]
 8005038:	441e      	add	r6, r3
 800503a:	441d      	add	r5, r3
 800503c:	f63f aeea 	bhi.w	8004e14 <arm_radix8_butterfly_f32+0x328>
 8005040:	9a03      	ldr	r2, [sp, #12]
 8005042:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005044:	3201      	adds	r2, #1
 8005046:	4611      	mov	r1, r2
 8005048:	9203      	str	r2, [sp, #12]
 800504a:	9a04      	ldr	r2, [sp, #16]
 800504c:	4402      	add	r2, r0
 800504e:	9204      	str	r2, [sp, #16]
 8005050:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8005052:	9a05      	ldr	r2, [sp, #20]
 8005054:	4402      	add	r2, r0
 8005056:	9205      	str	r2, [sp, #20]
 8005058:	9812      	ldr	r0, [sp, #72]	; 0x48
 800505a:	9a07      	ldr	r2, [sp, #28]
 800505c:	4402      	add	r2, r0
 800505e:	9207      	str	r2, [sp, #28]
 8005060:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005062:	9a06      	ldr	r2, [sp, #24]
 8005064:	4402      	add	r2, r0
 8005066:	9206      	str	r2, [sp, #24]
 8005068:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800506a:	4496      	add	lr, r2
 800506c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800506e:	4494      	add	ip, r2
 8005070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005072:	3208      	adds	r2, #8
 8005074:	920f      	str	r2, [sp, #60]	; 0x3c
 8005076:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005078:	3208      	adds	r2, #8
 800507a:	920e      	str	r2, [sp, #56]	; 0x38
 800507c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800507e:	3208      	adds	r2, #8
 8005080:	920d      	str	r2, [sp, #52]	; 0x34
 8005082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005084:	3208      	adds	r2, #8
 8005086:	920c      	str	r2, [sp, #48]	; 0x30
 8005088:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800508a:	3208      	adds	r2, #8
 800508c:	920b      	str	r2, [sp, #44]	; 0x2c
 800508e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005090:	3208      	adds	r2, #8
 8005092:	920a      	str	r2, [sp, #40]	; 0x28
 8005094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005096:	3208      	adds	r2, #8
 8005098:	9209      	str	r2, [sp, #36]	; 0x24
 800509a:	9a08      	ldr	r2, [sp, #32]
 800509c:	3208      	adds	r2, #8
 800509e:	9208      	str	r2, [sp, #32]
 80050a0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80050a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80050a4:	4288      	cmp	r0, r1
 80050a6:	4622      	mov	r2, r4
 80050a8:	d007      	beq.n	80050ba <arm_radix8_butterfly_f32+0x5ce>
 80050aa:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80050ac:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80050b0:	4621      	mov	r1, r4
 80050b2:	4401      	add	r1, r0
 80050b4:	9110      	str	r1, [sp, #64]	; 0x40
 80050b6:	9804      	ldr	r0, [sp, #16]
 80050b8:	e67c      	b.n	8004db4 <arm_radix8_butterfly_f32+0x2c8>
 80050ba:	4683      	mov	fp, r0
 80050bc:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80050c0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80050c2:	e524      	b.n	8004b0e <arm_radix8_butterfly_f32+0x22>
 80050c4:	b01d      	add	sp, #116	; 0x74
 80050c6:	ecbd 8b10 	vpop	{d8-d15}
 80050ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ce:	bf00      	nop

080050d0 <__errno>:
 80050d0:	4b01      	ldr	r3, [pc, #4]	; (80050d8 <__errno+0x8>)
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	4770      	bx	lr
 80050d6:	bf00      	nop
 80050d8:	20000014 	.word	0x20000014

080050dc <__libc_init_array>:
 80050dc:	b570      	push	{r4, r5, r6, lr}
 80050de:	4d0d      	ldr	r5, [pc, #52]	; (8005114 <__libc_init_array+0x38>)
 80050e0:	4c0d      	ldr	r4, [pc, #52]	; (8005118 <__libc_init_array+0x3c>)
 80050e2:	1b64      	subs	r4, r4, r5
 80050e4:	10a4      	asrs	r4, r4, #2
 80050e6:	2600      	movs	r6, #0
 80050e8:	42a6      	cmp	r6, r4
 80050ea:	d109      	bne.n	8005100 <__libc_init_array+0x24>
 80050ec:	4d0b      	ldr	r5, [pc, #44]	; (800511c <__libc_init_array+0x40>)
 80050ee:	4c0c      	ldr	r4, [pc, #48]	; (8005120 <__libc_init_array+0x44>)
 80050f0:	f002 fdcc 	bl	8007c8c <_init>
 80050f4:	1b64      	subs	r4, r4, r5
 80050f6:	10a4      	asrs	r4, r4, #2
 80050f8:	2600      	movs	r6, #0
 80050fa:	42a6      	cmp	r6, r4
 80050fc:	d105      	bne.n	800510a <__libc_init_array+0x2e>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	f855 3b04 	ldr.w	r3, [r5], #4
 8005104:	4798      	blx	r3
 8005106:	3601      	adds	r6, #1
 8005108:	e7ee      	b.n	80050e8 <__libc_init_array+0xc>
 800510a:	f855 3b04 	ldr.w	r3, [r5], #4
 800510e:	4798      	blx	r3
 8005110:	3601      	adds	r6, #1
 8005112:	e7f2      	b.n	80050fa <__libc_init_array+0x1e>
 8005114:	0800cca4 	.word	0x0800cca4
 8005118:	0800cca4 	.word	0x0800cca4
 800511c:	0800cca4 	.word	0x0800cca4
 8005120:	0800cca8 	.word	0x0800cca8

08005124 <memcpy>:
 8005124:	440a      	add	r2, r1
 8005126:	4291      	cmp	r1, r2
 8005128:	f100 33ff 	add.w	r3, r0, #4294967295
 800512c:	d100      	bne.n	8005130 <memcpy+0xc>
 800512e:	4770      	bx	lr
 8005130:	b510      	push	{r4, lr}
 8005132:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005136:	f803 4f01 	strb.w	r4, [r3, #1]!
 800513a:	4291      	cmp	r1, r2
 800513c:	d1f9      	bne.n	8005132 <memcpy+0xe>
 800513e:	bd10      	pop	{r4, pc}

08005140 <memset>:
 8005140:	4402      	add	r2, r0
 8005142:	4603      	mov	r3, r0
 8005144:	4293      	cmp	r3, r2
 8005146:	d100      	bne.n	800514a <memset+0xa>
 8005148:	4770      	bx	lr
 800514a:	f803 1b01 	strb.w	r1, [r3], #1
 800514e:	e7f9      	b.n	8005144 <memset+0x4>

08005150 <__cvt>:
 8005150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005154:	ec55 4b10 	vmov	r4, r5, d0
 8005158:	2d00      	cmp	r5, #0
 800515a:	460e      	mov	r6, r1
 800515c:	4619      	mov	r1, r3
 800515e:	462b      	mov	r3, r5
 8005160:	bfbb      	ittet	lt
 8005162:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005166:	461d      	movlt	r5, r3
 8005168:	2300      	movge	r3, #0
 800516a:	232d      	movlt	r3, #45	; 0x2d
 800516c:	700b      	strb	r3, [r1, #0]
 800516e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005170:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005174:	4691      	mov	r9, r2
 8005176:	f023 0820 	bic.w	r8, r3, #32
 800517a:	bfbc      	itt	lt
 800517c:	4622      	movlt	r2, r4
 800517e:	4614      	movlt	r4, r2
 8005180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005184:	d005      	beq.n	8005192 <__cvt+0x42>
 8005186:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800518a:	d100      	bne.n	800518e <__cvt+0x3e>
 800518c:	3601      	adds	r6, #1
 800518e:	2102      	movs	r1, #2
 8005190:	e000      	b.n	8005194 <__cvt+0x44>
 8005192:	2103      	movs	r1, #3
 8005194:	ab03      	add	r3, sp, #12
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	ab02      	add	r3, sp, #8
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	ec45 4b10 	vmov	d0, r4, r5
 80051a0:	4653      	mov	r3, sl
 80051a2:	4632      	mov	r2, r6
 80051a4:	f000 fe00 	bl	8005da8 <_dtoa_r>
 80051a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051ac:	4607      	mov	r7, r0
 80051ae:	d102      	bne.n	80051b6 <__cvt+0x66>
 80051b0:	f019 0f01 	tst.w	r9, #1
 80051b4:	d022      	beq.n	80051fc <__cvt+0xac>
 80051b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051ba:	eb07 0906 	add.w	r9, r7, r6
 80051be:	d110      	bne.n	80051e2 <__cvt+0x92>
 80051c0:	783b      	ldrb	r3, [r7, #0]
 80051c2:	2b30      	cmp	r3, #48	; 0x30
 80051c4:	d10a      	bne.n	80051dc <__cvt+0x8c>
 80051c6:	2200      	movs	r2, #0
 80051c8:	2300      	movs	r3, #0
 80051ca:	4620      	mov	r0, r4
 80051cc:	4629      	mov	r1, r5
 80051ce:	f7fb fcfb 	bl	8000bc8 <__aeabi_dcmpeq>
 80051d2:	b918      	cbnz	r0, 80051dc <__cvt+0x8c>
 80051d4:	f1c6 0601 	rsb	r6, r6, #1
 80051d8:	f8ca 6000 	str.w	r6, [sl]
 80051dc:	f8da 3000 	ldr.w	r3, [sl]
 80051e0:	4499      	add	r9, r3
 80051e2:	2200      	movs	r2, #0
 80051e4:	2300      	movs	r3, #0
 80051e6:	4620      	mov	r0, r4
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7fb fced 	bl	8000bc8 <__aeabi_dcmpeq>
 80051ee:	b108      	cbz	r0, 80051f4 <__cvt+0xa4>
 80051f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80051f4:	2230      	movs	r2, #48	; 0x30
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	454b      	cmp	r3, r9
 80051fa:	d307      	bcc.n	800520c <__cvt+0xbc>
 80051fc:	9b03      	ldr	r3, [sp, #12]
 80051fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005200:	1bdb      	subs	r3, r3, r7
 8005202:	4638      	mov	r0, r7
 8005204:	6013      	str	r3, [r2, #0]
 8005206:	b004      	add	sp, #16
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	1c59      	adds	r1, r3, #1
 800520e:	9103      	str	r1, [sp, #12]
 8005210:	701a      	strb	r2, [r3, #0]
 8005212:	e7f0      	b.n	80051f6 <__cvt+0xa6>

08005214 <__exponent>:
 8005214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005216:	4603      	mov	r3, r0
 8005218:	2900      	cmp	r1, #0
 800521a:	bfb8      	it	lt
 800521c:	4249      	neglt	r1, r1
 800521e:	f803 2b02 	strb.w	r2, [r3], #2
 8005222:	bfb4      	ite	lt
 8005224:	222d      	movlt	r2, #45	; 0x2d
 8005226:	222b      	movge	r2, #43	; 0x2b
 8005228:	2909      	cmp	r1, #9
 800522a:	7042      	strb	r2, [r0, #1]
 800522c:	dd2a      	ble.n	8005284 <__exponent+0x70>
 800522e:	f10d 0407 	add.w	r4, sp, #7
 8005232:	46a4      	mov	ip, r4
 8005234:	270a      	movs	r7, #10
 8005236:	46a6      	mov	lr, r4
 8005238:	460a      	mov	r2, r1
 800523a:	fb91 f6f7 	sdiv	r6, r1, r7
 800523e:	fb07 1516 	mls	r5, r7, r6, r1
 8005242:	3530      	adds	r5, #48	; 0x30
 8005244:	2a63      	cmp	r2, #99	; 0x63
 8005246:	f104 34ff 	add.w	r4, r4, #4294967295
 800524a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800524e:	4631      	mov	r1, r6
 8005250:	dcf1      	bgt.n	8005236 <__exponent+0x22>
 8005252:	3130      	adds	r1, #48	; 0x30
 8005254:	f1ae 0502 	sub.w	r5, lr, #2
 8005258:	f804 1c01 	strb.w	r1, [r4, #-1]
 800525c:	1c44      	adds	r4, r0, #1
 800525e:	4629      	mov	r1, r5
 8005260:	4561      	cmp	r1, ip
 8005262:	d30a      	bcc.n	800527a <__exponent+0x66>
 8005264:	f10d 0209 	add.w	r2, sp, #9
 8005268:	eba2 020e 	sub.w	r2, r2, lr
 800526c:	4565      	cmp	r5, ip
 800526e:	bf88      	it	hi
 8005270:	2200      	movhi	r2, #0
 8005272:	4413      	add	r3, r2
 8005274:	1a18      	subs	r0, r3, r0
 8005276:	b003      	add	sp, #12
 8005278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800527a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800527e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005282:	e7ed      	b.n	8005260 <__exponent+0x4c>
 8005284:	2330      	movs	r3, #48	; 0x30
 8005286:	3130      	adds	r1, #48	; 0x30
 8005288:	7083      	strb	r3, [r0, #2]
 800528a:	70c1      	strb	r1, [r0, #3]
 800528c:	1d03      	adds	r3, r0, #4
 800528e:	e7f1      	b.n	8005274 <__exponent+0x60>

08005290 <_printf_float>:
 8005290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005294:	ed2d 8b02 	vpush	{d8}
 8005298:	b08d      	sub	sp, #52	; 0x34
 800529a:	460c      	mov	r4, r1
 800529c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80052a0:	4616      	mov	r6, r2
 80052a2:	461f      	mov	r7, r3
 80052a4:	4605      	mov	r5, r0
 80052a6:	f001 fd25 	bl	8006cf4 <_localeconv_r>
 80052aa:	f8d0 a000 	ldr.w	sl, [r0]
 80052ae:	4650      	mov	r0, sl
 80052b0:	f7fb f80e 	bl	80002d0 <strlen>
 80052b4:	2300      	movs	r3, #0
 80052b6:	930a      	str	r3, [sp, #40]	; 0x28
 80052b8:	6823      	ldr	r3, [r4, #0]
 80052ba:	9305      	str	r3, [sp, #20]
 80052bc:	f8d8 3000 	ldr.w	r3, [r8]
 80052c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80052c4:	3307      	adds	r3, #7
 80052c6:	f023 0307 	bic.w	r3, r3, #7
 80052ca:	f103 0208 	add.w	r2, r3, #8
 80052ce:	f8c8 2000 	str.w	r2, [r8]
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80052de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80052e2:	9307      	str	r3, [sp, #28]
 80052e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80052e8:	ee08 0a10 	vmov	s16, r0
 80052ec:	4b9f      	ldr	r3, [pc, #636]	; (800556c <_printf_float+0x2dc>)
 80052ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80052f2:	f04f 32ff 	mov.w	r2, #4294967295
 80052f6:	f7fb fc99 	bl	8000c2c <__aeabi_dcmpun>
 80052fa:	bb88      	cbnz	r0, 8005360 <_printf_float+0xd0>
 80052fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005300:	4b9a      	ldr	r3, [pc, #616]	; (800556c <_printf_float+0x2dc>)
 8005302:	f04f 32ff 	mov.w	r2, #4294967295
 8005306:	f7fb fc73 	bl	8000bf0 <__aeabi_dcmple>
 800530a:	bb48      	cbnz	r0, 8005360 <_printf_float+0xd0>
 800530c:	2200      	movs	r2, #0
 800530e:	2300      	movs	r3, #0
 8005310:	4640      	mov	r0, r8
 8005312:	4649      	mov	r1, r9
 8005314:	f7fb fc62 	bl	8000bdc <__aeabi_dcmplt>
 8005318:	b110      	cbz	r0, 8005320 <_printf_float+0x90>
 800531a:	232d      	movs	r3, #45	; 0x2d
 800531c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005320:	4b93      	ldr	r3, [pc, #588]	; (8005570 <_printf_float+0x2e0>)
 8005322:	4894      	ldr	r0, [pc, #592]	; (8005574 <_printf_float+0x2e4>)
 8005324:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005328:	bf94      	ite	ls
 800532a:	4698      	movls	r8, r3
 800532c:	4680      	movhi	r8, r0
 800532e:	2303      	movs	r3, #3
 8005330:	6123      	str	r3, [r4, #16]
 8005332:	9b05      	ldr	r3, [sp, #20]
 8005334:	f023 0204 	bic.w	r2, r3, #4
 8005338:	6022      	str	r2, [r4, #0]
 800533a:	f04f 0900 	mov.w	r9, #0
 800533e:	9700      	str	r7, [sp, #0]
 8005340:	4633      	mov	r3, r6
 8005342:	aa0b      	add	r2, sp, #44	; 0x2c
 8005344:	4621      	mov	r1, r4
 8005346:	4628      	mov	r0, r5
 8005348:	f000 f9d8 	bl	80056fc <_printf_common>
 800534c:	3001      	adds	r0, #1
 800534e:	f040 8090 	bne.w	8005472 <_printf_float+0x1e2>
 8005352:	f04f 30ff 	mov.w	r0, #4294967295
 8005356:	b00d      	add	sp, #52	; 0x34
 8005358:	ecbd 8b02 	vpop	{d8}
 800535c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005360:	4642      	mov	r2, r8
 8005362:	464b      	mov	r3, r9
 8005364:	4640      	mov	r0, r8
 8005366:	4649      	mov	r1, r9
 8005368:	f7fb fc60 	bl	8000c2c <__aeabi_dcmpun>
 800536c:	b140      	cbz	r0, 8005380 <_printf_float+0xf0>
 800536e:	464b      	mov	r3, r9
 8005370:	2b00      	cmp	r3, #0
 8005372:	bfbc      	itt	lt
 8005374:	232d      	movlt	r3, #45	; 0x2d
 8005376:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800537a:	487f      	ldr	r0, [pc, #508]	; (8005578 <_printf_float+0x2e8>)
 800537c:	4b7f      	ldr	r3, [pc, #508]	; (800557c <_printf_float+0x2ec>)
 800537e:	e7d1      	b.n	8005324 <_printf_float+0x94>
 8005380:	6863      	ldr	r3, [r4, #4]
 8005382:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005386:	9206      	str	r2, [sp, #24]
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	d13f      	bne.n	800540c <_printf_float+0x17c>
 800538c:	2306      	movs	r3, #6
 800538e:	6063      	str	r3, [r4, #4]
 8005390:	9b05      	ldr	r3, [sp, #20]
 8005392:	6861      	ldr	r1, [r4, #4]
 8005394:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005398:	2300      	movs	r3, #0
 800539a:	9303      	str	r3, [sp, #12]
 800539c:	ab0a      	add	r3, sp, #40	; 0x28
 800539e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80053a2:	ab09      	add	r3, sp, #36	; 0x24
 80053a4:	ec49 8b10 	vmov	d0, r8, r9
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	6022      	str	r2, [r4, #0]
 80053ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff fecd 	bl	8005150 <__cvt>
 80053b6:	9b06      	ldr	r3, [sp, #24]
 80053b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ba:	2b47      	cmp	r3, #71	; 0x47
 80053bc:	4680      	mov	r8, r0
 80053be:	d108      	bne.n	80053d2 <_printf_float+0x142>
 80053c0:	1cc8      	adds	r0, r1, #3
 80053c2:	db02      	blt.n	80053ca <_printf_float+0x13a>
 80053c4:	6863      	ldr	r3, [r4, #4]
 80053c6:	4299      	cmp	r1, r3
 80053c8:	dd41      	ble.n	800544e <_printf_float+0x1be>
 80053ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80053ce:	fa5f fb8b 	uxtb.w	fp, fp
 80053d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80053d6:	d820      	bhi.n	800541a <_printf_float+0x18a>
 80053d8:	3901      	subs	r1, #1
 80053da:	465a      	mov	r2, fp
 80053dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053e0:	9109      	str	r1, [sp, #36]	; 0x24
 80053e2:	f7ff ff17 	bl	8005214 <__exponent>
 80053e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053e8:	1813      	adds	r3, r2, r0
 80053ea:	2a01      	cmp	r2, #1
 80053ec:	4681      	mov	r9, r0
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	dc02      	bgt.n	80053f8 <_printf_float+0x168>
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	07d2      	lsls	r2, r2, #31
 80053f6:	d501      	bpl.n	80053fc <_printf_float+0x16c>
 80053f8:	3301      	adds	r3, #1
 80053fa:	6123      	str	r3, [r4, #16]
 80053fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005400:	2b00      	cmp	r3, #0
 8005402:	d09c      	beq.n	800533e <_printf_float+0xae>
 8005404:	232d      	movs	r3, #45	; 0x2d
 8005406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800540a:	e798      	b.n	800533e <_printf_float+0xae>
 800540c:	9a06      	ldr	r2, [sp, #24]
 800540e:	2a47      	cmp	r2, #71	; 0x47
 8005410:	d1be      	bne.n	8005390 <_printf_float+0x100>
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1bc      	bne.n	8005390 <_printf_float+0x100>
 8005416:	2301      	movs	r3, #1
 8005418:	e7b9      	b.n	800538e <_printf_float+0xfe>
 800541a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800541e:	d118      	bne.n	8005452 <_printf_float+0x1c2>
 8005420:	2900      	cmp	r1, #0
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	dd0b      	ble.n	800543e <_printf_float+0x1ae>
 8005426:	6121      	str	r1, [r4, #16]
 8005428:	b913      	cbnz	r3, 8005430 <_printf_float+0x1a0>
 800542a:	6822      	ldr	r2, [r4, #0]
 800542c:	07d0      	lsls	r0, r2, #31
 800542e:	d502      	bpl.n	8005436 <_printf_float+0x1a6>
 8005430:	3301      	adds	r3, #1
 8005432:	440b      	add	r3, r1
 8005434:	6123      	str	r3, [r4, #16]
 8005436:	65a1      	str	r1, [r4, #88]	; 0x58
 8005438:	f04f 0900 	mov.w	r9, #0
 800543c:	e7de      	b.n	80053fc <_printf_float+0x16c>
 800543e:	b913      	cbnz	r3, 8005446 <_printf_float+0x1b6>
 8005440:	6822      	ldr	r2, [r4, #0]
 8005442:	07d2      	lsls	r2, r2, #31
 8005444:	d501      	bpl.n	800544a <_printf_float+0x1ba>
 8005446:	3302      	adds	r3, #2
 8005448:	e7f4      	b.n	8005434 <_printf_float+0x1a4>
 800544a:	2301      	movs	r3, #1
 800544c:	e7f2      	b.n	8005434 <_printf_float+0x1a4>
 800544e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005454:	4299      	cmp	r1, r3
 8005456:	db05      	blt.n	8005464 <_printf_float+0x1d4>
 8005458:	6823      	ldr	r3, [r4, #0]
 800545a:	6121      	str	r1, [r4, #16]
 800545c:	07d8      	lsls	r0, r3, #31
 800545e:	d5ea      	bpl.n	8005436 <_printf_float+0x1a6>
 8005460:	1c4b      	adds	r3, r1, #1
 8005462:	e7e7      	b.n	8005434 <_printf_float+0x1a4>
 8005464:	2900      	cmp	r1, #0
 8005466:	bfd4      	ite	le
 8005468:	f1c1 0202 	rsble	r2, r1, #2
 800546c:	2201      	movgt	r2, #1
 800546e:	4413      	add	r3, r2
 8005470:	e7e0      	b.n	8005434 <_printf_float+0x1a4>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	055a      	lsls	r2, r3, #21
 8005476:	d407      	bmi.n	8005488 <_printf_float+0x1f8>
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	4642      	mov	r2, r8
 800547c:	4631      	mov	r1, r6
 800547e:	4628      	mov	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	3001      	adds	r0, #1
 8005484:	d12c      	bne.n	80054e0 <_printf_float+0x250>
 8005486:	e764      	b.n	8005352 <_printf_float+0xc2>
 8005488:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800548c:	f240 80e0 	bls.w	8005650 <_printf_float+0x3c0>
 8005490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005494:	2200      	movs	r2, #0
 8005496:	2300      	movs	r3, #0
 8005498:	f7fb fb96 	bl	8000bc8 <__aeabi_dcmpeq>
 800549c:	2800      	cmp	r0, #0
 800549e:	d034      	beq.n	800550a <_printf_float+0x27a>
 80054a0:	4a37      	ldr	r2, [pc, #220]	; (8005580 <_printf_float+0x2f0>)
 80054a2:	2301      	movs	r3, #1
 80054a4:	4631      	mov	r1, r6
 80054a6:	4628      	mov	r0, r5
 80054a8:	47b8      	blx	r7
 80054aa:	3001      	adds	r0, #1
 80054ac:	f43f af51 	beq.w	8005352 <_printf_float+0xc2>
 80054b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054b4:	429a      	cmp	r2, r3
 80054b6:	db02      	blt.n	80054be <_printf_float+0x22e>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	07d8      	lsls	r0, r3, #31
 80054bc:	d510      	bpl.n	80054e0 <_printf_float+0x250>
 80054be:	ee18 3a10 	vmov	r3, s16
 80054c2:	4652      	mov	r2, sl
 80054c4:	4631      	mov	r1, r6
 80054c6:	4628      	mov	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	3001      	adds	r0, #1
 80054cc:	f43f af41 	beq.w	8005352 <_printf_float+0xc2>
 80054d0:	f04f 0800 	mov.w	r8, #0
 80054d4:	f104 091a 	add.w	r9, r4, #26
 80054d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054da:	3b01      	subs	r3, #1
 80054dc:	4543      	cmp	r3, r8
 80054de:	dc09      	bgt.n	80054f4 <_printf_float+0x264>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	079b      	lsls	r3, r3, #30
 80054e4:	f100 8105 	bmi.w	80056f2 <_printf_float+0x462>
 80054e8:	68e0      	ldr	r0, [r4, #12]
 80054ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ec:	4298      	cmp	r0, r3
 80054ee:	bfb8      	it	lt
 80054f0:	4618      	movlt	r0, r3
 80054f2:	e730      	b.n	8005356 <_printf_float+0xc6>
 80054f4:	2301      	movs	r3, #1
 80054f6:	464a      	mov	r2, r9
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	f43f af27 	beq.w	8005352 <_printf_float+0xc2>
 8005504:	f108 0801 	add.w	r8, r8, #1
 8005508:	e7e6      	b.n	80054d8 <_printf_float+0x248>
 800550a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	dc39      	bgt.n	8005584 <_printf_float+0x2f4>
 8005510:	4a1b      	ldr	r2, [pc, #108]	; (8005580 <_printf_float+0x2f0>)
 8005512:	2301      	movs	r3, #1
 8005514:	4631      	mov	r1, r6
 8005516:	4628      	mov	r0, r5
 8005518:	47b8      	blx	r7
 800551a:	3001      	adds	r0, #1
 800551c:	f43f af19 	beq.w	8005352 <_printf_float+0xc2>
 8005520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005524:	4313      	orrs	r3, r2
 8005526:	d102      	bne.n	800552e <_printf_float+0x29e>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	07d9      	lsls	r1, r3, #31
 800552c:	d5d8      	bpl.n	80054e0 <_printf_float+0x250>
 800552e:	ee18 3a10 	vmov	r3, s16
 8005532:	4652      	mov	r2, sl
 8005534:	4631      	mov	r1, r6
 8005536:	4628      	mov	r0, r5
 8005538:	47b8      	blx	r7
 800553a:	3001      	adds	r0, #1
 800553c:	f43f af09 	beq.w	8005352 <_printf_float+0xc2>
 8005540:	f04f 0900 	mov.w	r9, #0
 8005544:	f104 0a1a 	add.w	sl, r4, #26
 8005548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800554a:	425b      	negs	r3, r3
 800554c:	454b      	cmp	r3, r9
 800554e:	dc01      	bgt.n	8005554 <_printf_float+0x2c4>
 8005550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005552:	e792      	b.n	800547a <_printf_float+0x1ea>
 8005554:	2301      	movs	r3, #1
 8005556:	4652      	mov	r2, sl
 8005558:	4631      	mov	r1, r6
 800555a:	4628      	mov	r0, r5
 800555c:	47b8      	blx	r7
 800555e:	3001      	adds	r0, #1
 8005560:	f43f aef7 	beq.w	8005352 <_printf_float+0xc2>
 8005564:	f109 0901 	add.w	r9, r9, #1
 8005568:	e7ee      	b.n	8005548 <_printf_float+0x2b8>
 800556a:	bf00      	nop
 800556c:	7fefffff 	.word	0x7fefffff
 8005570:	0800c8c4 	.word	0x0800c8c4
 8005574:	0800c8c8 	.word	0x0800c8c8
 8005578:	0800c8d0 	.word	0x0800c8d0
 800557c:	0800c8cc 	.word	0x0800c8cc
 8005580:	0800c8d4 	.word	0x0800c8d4
 8005584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005588:	429a      	cmp	r2, r3
 800558a:	bfa8      	it	ge
 800558c:	461a      	movge	r2, r3
 800558e:	2a00      	cmp	r2, #0
 8005590:	4691      	mov	r9, r2
 8005592:	dc37      	bgt.n	8005604 <_printf_float+0x374>
 8005594:	f04f 0b00 	mov.w	fp, #0
 8005598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800559c:	f104 021a 	add.w	r2, r4, #26
 80055a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055a2:	9305      	str	r3, [sp, #20]
 80055a4:	eba3 0309 	sub.w	r3, r3, r9
 80055a8:	455b      	cmp	r3, fp
 80055aa:	dc33      	bgt.n	8005614 <_printf_float+0x384>
 80055ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055b0:	429a      	cmp	r2, r3
 80055b2:	db3b      	blt.n	800562c <_printf_float+0x39c>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	07da      	lsls	r2, r3, #31
 80055b8:	d438      	bmi.n	800562c <_printf_float+0x39c>
 80055ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055bc:	9a05      	ldr	r2, [sp, #20]
 80055be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80055c0:	1a9a      	subs	r2, r3, r2
 80055c2:	eba3 0901 	sub.w	r9, r3, r1
 80055c6:	4591      	cmp	r9, r2
 80055c8:	bfa8      	it	ge
 80055ca:	4691      	movge	r9, r2
 80055cc:	f1b9 0f00 	cmp.w	r9, #0
 80055d0:	dc35      	bgt.n	800563e <_printf_float+0x3ae>
 80055d2:	f04f 0800 	mov.w	r8, #0
 80055d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055da:	f104 0a1a 	add.w	sl, r4, #26
 80055de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	eba3 0309 	sub.w	r3, r3, r9
 80055e8:	4543      	cmp	r3, r8
 80055ea:	f77f af79 	ble.w	80054e0 <_printf_float+0x250>
 80055ee:	2301      	movs	r3, #1
 80055f0:	4652      	mov	r2, sl
 80055f2:	4631      	mov	r1, r6
 80055f4:	4628      	mov	r0, r5
 80055f6:	47b8      	blx	r7
 80055f8:	3001      	adds	r0, #1
 80055fa:	f43f aeaa 	beq.w	8005352 <_printf_float+0xc2>
 80055fe:	f108 0801 	add.w	r8, r8, #1
 8005602:	e7ec      	b.n	80055de <_printf_float+0x34e>
 8005604:	4613      	mov	r3, r2
 8005606:	4631      	mov	r1, r6
 8005608:	4642      	mov	r2, r8
 800560a:	4628      	mov	r0, r5
 800560c:	47b8      	blx	r7
 800560e:	3001      	adds	r0, #1
 8005610:	d1c0      	bne.n	8005594 <_printf_float+0x304>
 8005612:	e69e      	b.n	8005352 <_printf_float+0xc2>
 8005614:	2301      	movs	r3, #1
 8005616:	4631      	mov	r1, r6
 8005618:	4628      	mov	r0, r5
 800561a:	9205      	str	r2, [sp, #20]
 800561c:	47b8      	blx	r7
 800561e:	3001      	adds	r0, #1
 8005620:	f43f ae97 	beq.w	8005352 <_printf_float+0xc2>
 8005624:	9a05      	ldr	r2, [sp, #20]
 8005626:	f10b 0b01 	add.w	fp, fp, #1
 800562a:	e7b9      	b.n	80055a0 <_printf_float+0x310>
 800562c:	ee18 3a10 	vmov	r3, s16
 8005630:	4652      	mov	r2, sl
 8005632:	4631      	mov	r1, r6
 8005634:	4628      	mov	r0, r5
 8005636:	47b8      	blx	r7
 8005638:	3001      	adds	r0, #1
 800563a:	d1be      	bne.n	80055ba <_printf_float+0x32a>
 800563c:	e689      	b.n	8005352 <_printf_float+0xc2>
 800563e:	9a05      	ldr	r2, [sp, #20]
 8005640:	464b      	mov	r3, r9
 8005642:	4442      	add	r2, r8
 8005644:	4631      	mov	r1, r6
 8005646:	4628      	mov	r0, r5
 8005648:	47b8      	blx	r7
 800564a:	3001      	adds	r0, #1
 800564c:	d1c1      	bne.n	80055d2 <_printf_float+0x342>
 800564e:	e680      	b.n	8005352 <_printf_float+0xc2>
 8005650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005652:	2a01      	cmp	r2, #1
 8005654:	dc01      	bgt.n	800565a <_printf_float+0x3ca>
 8005656:	07db      	lsls	r3, r3, #31
 8005658:	d538      	bpl.n	80056cc <_printf_float+0x43c>
 800565a:	2301      	movs	r3, #1
 800565c:	4642      	mov	r2, r8
 800565e:	4631      	mov	r1, r6
 8005660:	4628      	mov	r0, r5
 8005662:	47b8      	blx	r7
 8005664:	3001      	adds	r0, #1
 8005666:	f43f ae74 	beq.w	8005352 <_printf_float+0xc2>
 800566a:	ee18 3a10 	vmov	r3, s16
 800566e:	4652      	mov	r2, sl
 8005670:	4631      	mov	r1, r6
 8005672:	4628      	mov	r0, r5
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f ae6b 	beq.w	8005352 <_printf_float+0xc2>
 800567c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005680:	2200      	movs	r2, #0
 8005682:	2300      	movs	r3, #0
 8005684:	f7fb faa0 	bl	8000bc8 <__aeabi_dcmpeq>
 8005688:	b9d8      	cbnz	r0, 80056c2 <_printf_float+0x432>
 800568a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800568c:	f108 0201 	add.w	r2, r8, #1
 8005690:	3b01      	subs	r3, #1
 8005692:	4631      	mov	r1, r6
 8005694:	4628      	mov	r0, r5
 8005696:	47b8      	blx	r7
 8005698:	3001      	adds	r0, #1
 800569a:	d10e      	bne.n	80056ba <_printf_float+0x42a>
 800569c:	e659      	b.n	8005352 <_printf_float+0xc2>
 800569e:	2301      	movs	r3, #1
 80056a0:	4652      	mov	r2, sl
 80056a2:	4631      	mov	r1, r6
 80056a4:	4628      	mov	r0, r5
 80056a6:	47b8      	blx	r7
 80056a8:	3001      	adds	r0, #1
 80056aa:	f43f ae52 	beq.w	8005352 <_printf_float+0xc2>
 80056ae:	f108 0801 	add.w	r8, r8, #1
 80056b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056b4:	3b01      	subs	r3, #1
 80056b6:	4543      	cmp	r3, r8
 80056b8:	dcf1      	bgt.n	800569e <_printf_float+0x40e>
 80056ba:	464b      	mov	r3, r9
 80056bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056c0:	e6dc      	b.n	800547c <_printf_float+0x1ec>
 80056c2:	f04f 0800 	mov.w	r8, #0
 80056c6:	f104 0a1a 	add.w	sl, r4, #26
 80056ca:	e7f2      	b.n	80056b2 <_printf_float+0x422>
 80056cc:	2301      	movs	r3, #1
 80056ce:	4642      	mov	r2, r8
 80056d0:	e7df      	b.n	8005692 <_printf_float+0x402>
 80056d2:	2301      	movs	r3, #1
 80056d4:	464a      	mov	r2, r9
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f ae38 	beq.w	8005352 <_printf_float+0xc2>
 80056e2:	f108 0801 	add.w	r8, r8, #1
 80056e6:	68e3      	ldr	r3, [r4, #12]
 80056e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80056ea:	1a5b      	subs	r3, r3, r1
 80056ec:	4543      	cmp	r3, r8
 80056ee:	dcf0      	bgt.n	80056d2 <_printf_float+0x442>
 80056f0:	e6fa      	b.n	80054e8 <_printf_float+0x258>
 80056f2:	f04f 0800 	mov.w	r8, #0
 80056f6:	f104 0919 	add.w	r9, r4, #25
 80056fa:	e7f4      	b.n	80056e6 <_printf_float+0x456>

080056fc <_printf_common>:
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	4616      	mov	r6, r2
 8005702:	4699      	mov	r9, r3
 8005704:	688a      	ldr	r2, [r1, #8]
 8005706:	690b      	ldr	r3, [r1, #16]
 8005708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800570c:	4293      	cmp	r3, r2
 800570e:	bfb8      	it	lt
 8005710:	4613      	movlt	r3, r2
 8005712:	6033      	str	r3, [r6, #0]
 8005714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005718:	4607      	mov	r7, r0
 800571a:	460c      	mov	r4, r1
 800571c:	b10a      	cbz	r2, 8005722 <_printf_common+0x26>
 800571e:	3301      	adds	r3, #1
 8005720:	6033      	str	r3, [r6, #0]
 8005722:	6823      	ldr	r3, [r4, #0]
 8005724:	0699      	lsls	r1, r3, #26
 8005726:	bf42      	ittt	mi
 8005728:	6833      	ldrmi	r3, [r6, #0]
 800572a:	3302      	addmi	r3, #2
 800572c:	6033      	strmi	r3, [r6, #0]
 800572e:	6825      	ldr	r5, [r4, #0]
 8005730:	f015 0506 	ands.w	r5, r5, #6
 8005734:	d106      	bne.n	8005744 <_printf_common+0x48>
 8005736:	f104 0a19 	add.w	sl, r4, #25
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	6832      	ldr	r2, [r6, #0]
 800573e:	1a9b      	subs	r3, r3, r2
 8005740:	42ab      	cmp	r3, r5
 8005742:	dc26      	bgt.n	8005792 <_printf_common+0x96>
 8005744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005748:	1e13      	subs	r3, r2, #0
 800574a:	6822      	ldr	r2, [r4, #0]
 800574c:	bf18      	it	ne
 800574e:	2301      	movne	r3, #1
 8005750:	0692      	lsls	r2, r2, #26
 8005752:	d42b      	bmi.n	80057ac <_printf_common+0xb0>
 8005754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005758:	4649      	mov	r1, r9
 800575a:	4638      	mov	r0, r7
 800575c:	47c0      	blx	r8
 800575e:	3001      	adds	r0, #1
 8005760:	d01e      	beq.n	80057a0 <_printf_common+0xa4>
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	68e5      	ldr	r5, [r4, #12]
 8005766:	6832      	ldr	r2, [r6, #0]
 8005768:	f003 0306 	and.w	r3, r3, #6
 800576c:	2b04      	cmp	r3, #4
 800576e:	bf08      	it	eq
 8005770:	1aad      	subeq	r5, r5, r2
 8005772:	68a3      	ldr	r3, [r4, #8]
 8005774:	6922      	ldr	r2, [r4, #16]
 8005776:	bf0c      	ite	eq
 8005778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800577c:	2500      	movne	r5, #0
 800577e:	4293      	cmp	r3, r2
 8005780:	bfc4      	itt	gt
 8005782:	1a9b      	subgt	r3, r3, r2
 8005784:	18ed      	addgt	r5, r5, r3
 8005786:	2600      	movs	r6, #0
 8005788:	341a      	adds	r4, #26
 800578a:	42b5      	cmp	r5, r6
 800578c:	d11a      	bne.n	80057c4 <_printf_common+0xc8>
 800578e:	2000      	movs	r0, #0
 8005790:	e008      	b.n	80057a4 <_printf_common+0xa8>
 8005792:	2301      	movs	r3, #1
 8005794:	4652      	mov	r2, sl
 8005796:	4649      	mov	r1, r9
 8005798:	4638      	mov	r0, r7
 800579a:	47c0      	blx	r8
 800579c:	3001      	adds	r0, #1
 800579e:	d103      	bne.n	80057a8 <_printf_common+0xac>
 80057a0:	f04f 30ff 	mov.w	r0, #4294967295
 80057a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a8:	3501      	adds	r5, #1
 80057aa:	e7c6      	b.n	800573a <_printf_common+0x3e>
 80057ac:	18e1      	adds	r1, r4, r3
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	2030      	movs	r0, #48	; 0x30
 80057b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b6:	4422      	add	r2, r4
 80057b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057c0:	3302      	adds	r3, #2
 80057c2:	e7c7      	b.n	8005754 <_printf_common+0x58>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4622      	mov	r2, r4
 80057c8:	4649      	mov	r1, r9
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	3001      	adds	r0, #1
 80057d0:	d0e6      	beq.n	80057a0 <_printf_common+0xa4>
 80057d2:	3601      	adds	r6, #1
 80057d4:	e7d9      	b.n	800578a <_printf_common+0x8e>
	...

080057d8 <_printf_i>:
 80057d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	7e0f      	ldrb	r7, [r1, #24]
 80057de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057e0:	2f78      	cmp	r7, #120	; 0x78
 80057e2:	4691      	mov	r9, r2
 80057e4:	4680      	mov	r8, r0
 80057e6:	460c      	mov	r4, r1
 80057e8:	469a      	mov	sl, r3
 80057ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ee:	d807      	bhi.n	8005800 <_printf_i+0x28>
 80057f0:	2f62      	cmp	r7, #98	; 0x62
 80057f2:	d80a      	bhi.n	800580a <_printf_i+0x32>
 80057f4:	2f00      	cmp	r7, #0
 80057f6:	f000 80d8 	beq.w	80059aa <_printf_i+0x1d2>
 80057fa:	2f58      	cmp	r7, #88	; 0x58
 80057fc:	f000 80a3 	beq.w	8005946 <_printf_i+0x16e>
 8005800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005808:	e03a      	b.n	8005880 <_printf_i+0xa8>
 800580a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800580e:	2b15      	cmp	r3, #21
 8005810:	d8f6      	bhi.n	8005800 <_printf_i+0x28>
 8005812:	a101      	add	r1, pc, #4	; (adr r1, 8005818 <_printf_i+0x40>)
 8005814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005818:	08005871 	.word	0x08005871
 800581c:	08005885 	.word	0x08005885
 8005820:	08005801 	.word	0x08005801
 8005824:	08005801 	.word	0x08005801
 8005828:	08005801 	.word	0x08005801
 800582c:	08005801 	.word	0x08005801
 8005830:	08005885 	.word	0x08005885
 8005834:	08005801 	.word	0x08005801
 8005838:	08005801 	.word	0x08005801
 800583c:	08005801 	.word	0x08005801
 8005840:	08005801 	.word	0x08005801
 8005844:	08005991 	.word	0x08005991
 8005848:	080058b5 	.word	0x080058b5
 800584c:	08005973 	.word	0x08005973
 8005850:	08005801 	.word	0x08005801
 8005854:	08005801 	.word	0x08005801
 8005858:	080059b3 	.word	0x080059b3
 800585c:	08005801 	.word	0x08005801
 8005860:	080058b5 	.word	0x080058b5
 8005864:	08005801 	.word	0x08005801
 8005868:	08005801 	.word	0x08005801
 800586c:	0800597b 	.word	0x0800597b
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	602a      	str	r2, [r5, #0]
 8005878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800587c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005880:	2301      	movs	r3, #1
 8005882:	e0a3      	b.n	80059cc <_printf_i+0x1f4>
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	6829      	ldr	r1, [r5, #0]
 8005888:	0606      	lsls	r6, r0, #24
 800588a:	f101 0304 	add.w	r3, r1, #4
 800588e:	d50a      	bpl.n	80058a6 <_printf_i+0xce>
 8005890:	680e      	ldr	r6, [r1, #0]
 8005892:	602b      	str	r3, [r5, #0]
 8005894:	2e00      	cmp	r6, #0
 8005896:	da03      	bge.n	80058a0 <_printf_i+0xc8>
 8005898:	232d      	movs	r3, #45	; 0x2d
 800589a:	4276      	negs	r6, r6
 800589c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058a0:	485e      	ldr	r0, [pc, #376]	; (8005a1c <_printf_i+0x244>)
 80058a2:	230a      	movs	r3, #10
 80058a4:	e019      	b.n	80058da <_printf_i+0x102>
 80058a6:	680e      	ldr	r6, [r1, #0]
 80058a8:	602b      	str	r3, [r5, #0]
 80058aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058ae:	bf18      	it	ne
 80058b0:	b236      	sxthne	r6, r6
 80058b2:	e7ef      	b.n	8005894 <_printf_i+0xbc>
 80058b4:	682b      	ldr	r3, [r5, #0]
 80058b6:	6820      	ldr	r0, [r4, #0]
 80058b8:	1d19      	adds	r1, r3, #4
 80058ba:	6029      	str	r1, [r5, #0]
 80058bc:	0601      	lsls	r1, r0, #24
 80058be:	d501      	bpl.n	80058c4 <_printf_i+0xec>
 80058c0:	681e      	ldr	r6, [r3, #0]
 80058c2:	e002      	b.n	80058ca <_printf_i+0xf2>
 80058c4:	0646      	lsls	r6, r0, #25
 80058c6:	d5fb      	bpl.n	80058c0 <_printf_i+0xe8>
 80058c8:	881e      	ldrh	r6, [r3, #0]
 80058ca:	4854      	ldr	r0, [pc, #336]	; (8005a1c <_printf_i+0x244>)
 80058cc:	2f6f      	cmp	r7, #111	; 0x6f
 80058ce:	bf0c      	ite	eq
 80058d0:	2308      	moveq	r3, #8
 80058d2:	230a      	movne	r3, #10
 80058d4:	2100      	movs	r1, #0
 80058d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058da:	6865      	ldr	r5, [r4, #4]
 80058dc:	60a5      	str	r5, [r4, #8]
 80058de:	2d00      	cmp	r5, #0
 80058e0:	bfa2      	ittt	ge
 80058e2:	6821      	ldrge	r1, [r4, #0]
 80058e4:	f021 0104 	bicge.w	r1, r1, #4
 80058e8:	6021      	strge	r1, [r4, #0]
 80058ea:	b90e      	cbnz	r6, 80058f0 <_printf_i+0x118>
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	d04d      	beq.n	800598c <_printf_i+0x1b4>
 80058f0:	4615      	mov	r5, r2
 80058f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80058f6:	fb03 6711 	mls	r7, r3, r1, r6
 80058fa:	5dc7      	ldrb	r7, [r0, r7]
 80058fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005900:	4637      	mov	r7, r6
 8005902:	42bb      	cmp	r3, r7
 8005904:	460e      	mov	r6, r1
 8005906:	d9f4      	bls.n	80058f2 <_printf_i+0x11a>
 8005908:	2b08      	cmp	r3, #8
 800590a:	d10b      	bne.n	8005924 <_printf_i+0x14c>
 800590c:	6823      	ldr	r3, [r4, #0]
 800590e:	07de      	lsls	r6, r3, #31
 8005910:	d508      	bpl.n	8005924 <_printf_i+0x14c>
 8005912:	6923      	ldr	r3, [r4, #16]
 8005914:	6861      	ldr	r1, [r4, #4]
 8005916:	4299      	cmp	r1, r3
 8005918:	bfde      	ittt	le
 800591a:	2330      	movle	r3, #48	; 0x30
 800591c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005924:	1b52      	subs	r2, r2, r5
 8005926:	6122      	str	r2, [r4, #16]
 8005928:	f8cd a000 	str.w	sl, [sp]
 800592c:	464b      	mov	r3, r9
 800592e:	aa03      	add	r2, sp, #12
 8005930:	4621      	mov	r1, r4
 8005932:	4640      	mov	r0, r8
 8005934:	f7ff fee2 	bl	80056fc <_printf_common>
 8005938:	3001      	adds	r0, #1
 800593a:	d14c      	bne.n	80059d6 <_printf_i+0x1fe>
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	b004      	add	sp, #16
 8005942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005946:	4835      	ldr	r0, [pc, #212]	; (8005a1c <_printf_i+0x244>)
 8005948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800594c:	6829      	ldr	r1, [r5, #0]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f851 6b04 	ldr.w	r6, [r1], #4
 8005954:	6029      	str	r1, [r5, #0]
 8005956:	061d      	lsls	r5, r3, #24
 8005958:	d514      	bpl.n	8005984 <_printf_i+0x1ac>
 800595a:	07df      	lsls	r7, r3, #31
 800595c:	bf44      	itt	mi
 800595e:	f043 0320 	orrmi.w	r3, r3, #32
 8005962:	6023      	strmi	r3, [r4, #0]
 8005964:	b91e      	cbnz	r6, 800596e <_printf_i+0x196>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	f023 0320 	bic.w	r3, r3, #32
 800596c:	6023      	str	r3, [r4, #0]
 800596e:	2310      	movs	r3, #16
 8005970:	e7b0      	b.n	80058d4 <_printf_i+0xfc>
 8005972:	6823      	ldr	r3, [r4, #0]
 8005974:	f043 0320 	orr.w	r3, r3, #32
 8005978:	6023      	str	r3, [r4, #0]
 800597a:	2378      	movs	r3, #120	; 0x78
 800597c:	4828      	ldr	r0, [pc, #160]	; (8005a20 <_printf_i+0x248>)
 800597e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005982:	e7e3      	b.n	800594c <_printf_i+0x174>
 8005984:	0659      	lsls	r1, r3, #25
 8005986:	bf48      	it	mi
 8005988:	b2b6      	uxthmi	r6, r6
 800598a:	e7e6      	b.n	800595a <_printf_i+0x182>
 800598c:	4615      	mov	r5, r2
 800598e:	e7bb      	b.n	8005908 <_printf_i+0x130>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	6826      	ldr	r6, [r4, #0]
 8005994:	6961      	ldr	r1, [r4, #20]
 8005996:	1d18      	adds	r0, r3, #4
 8005998:	6028      	str	r0, [r5, #0]
 800599a:	0635      	lsls	r5, r6, #24
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	d501      	bpl.n	80059a4 <_printf_i+0x1cc>
 80059a0:	6019      	str	r1, [r3, #0]
 80059a2:	e002      	b.n	80059aa <_printf_i+0x1d2>
 80059a4:	0670      	lsls	r0, r6, #25
 80059a6:	d5fb      	bpl.n	80059a0 <_printf_i+0x1c8>
 80059a8:	8019      	strh	r1, [r3, #0]
 80059aa:	2300      	movs	r3, #0
 80059ac:	6123      	str	r3, [r4, #16]
 80059ae:	4615      	mov	r5, r2
 80059b0:	e7ba      	b.n	8005928 <_printf_i+0x150>
 80059b2:	682b      	ldr	r3, [r5, #0]
 80059b4:	1d1a      	adds	r2, r3, #4
 80059b6:	602a      	str	r2, [r5, #0]
 80059b8:	681d      	ldr	r5, [r3, #0]
 80059ba:	6862      	ldr	r2, [r4, #4]
 80059bc:	2100      	movs	r1, #0
 80059be:	4628      	mov	r0, r5
 80059c0:	f7fa fc8e 	bl	80002e0 <memchr>
 80059c4:	b108      	cbz	r0, 80059ca <_printf_i+0x1f2>
 80059c6:	1b40      	subs	r0, r0, r5
 80059c8:	6060      	str	r0, [r4, #4]
 80059ca:	6863      	ldr	r3, [r4, #4]
 80059cc:	6123      	str	r3, [r4, #16]
 80059ce:	2300      	movs	r3, #0
 80059d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d4:	e7a8      	b.n	8005928 <_printf_i+0x150>
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	462a      	mov	r2, r5
 80059da:	4649      	mov	r1, r9
 80059dc:	4640      	mov	r0, r8
 80059de:	47d0      	blx	sl
 80059e0:	3001      	adds	r0, #1
 80059e2:	d0ab      	beq.n	800593c <_printf_i+0x164>
 80059e4:	6823      	ldr	r3, [r4, #0]
 80059e6:	079b      	lsls	r3, r3, #30
 80059e8:	d413      	bmi.n	8005a12 <_printf_i+0x23a>
 80059ea:	68e0      	ldr	r0, [r4, #12]
 80059ec:	9b03      	ldr	r3, [sp, #12]
 80059ee:	4298      	cmp	r0, r3
 80059f0:	bfb8      	it	lt
 80059f2:	4618      	movlt	r0, r3
 80059f4:	e7a4      	b.n	8005940 <_printf_i+0x168>
 80059f6:	2301      	movs	r3, #1
 80059f8:	4632      	mov	r2, r6
 80059fa:	4649      	mov	r1, r9
 80059fc:	4640      	mov	r0, r8
 80059fe:	47d0      	blx	sl
 8005a00:	3001      	adds	r0, #1
 8005a02:	d09b      	beq.n	800593c <_printf_i+0x164>
 8005a04:	3501      	adds	r5, #1
 8005a06:	68e3      	ldr	r3, [r4, #12]
 8005a08:	9903      	ldr	r1, [sp, #12]
 8005a0a:	1a5b      	subs	r3, r3, r1
 8005a0c:	42ab      	cmp	r3, r5
 8005a0e:	dcf2      	bgt.n	80059f6 <_printf_i+0x21e>
 8005a10:	e7eb      	b.n	80059ea <_printf_i+0x212>
 8005a12:	2500      	movs	r5, #0
 8005a14:	f104 0619 	add.w	r6, r4, #25
 8005a18:	e7f5      	b.n	8005a06 <_printf_i+0x22e>
 8005a1a:	bf00      	nop
 8005a1c:	0800c8d6 	.word	0x0800c8d6
 8005a20:	0800c8e7 	.word	0x0800c8e7

08005a24 <_puts_r>:
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	460e      	mov	r6, r1
 8005a28:	4605      	mov	r5, r0
 8005a2a:	b118      	cbz	r0, 8005a34 <_puts_r+0x10>
 8005a2c:	6983      	ldr	r3, [r0, #24]
 8005a2e:	b90b      	cbnz	r3, 8005a34 <_puts_r+0x10>
 8005a30:	f001 f8c2 	bl	8006bb8 <__sinit>
 8005a34:	69ab      	ldr	r3, [r5, #24]
 8005a36:	68ac      	ldr	r4, [r5, #8]
 8005a38:	b913      	cbnz	r3, 8005a40 <_puts_r+0x1c>
 8005a3a:	4628      	mov	r0, r5
 8005a3c:	f001 f8bc 	bl	8006bb8 <__sinit>
 8005a40:	4b2c      	ldr	r3, [pc, #176]	; (8005af4 <_puts_r+0xd0>)
 8005a42:	429c      	cmp	r4, r3
 8005a44:	d120      	bne.n	8005a88 <_puts_r+0x64>
 8005a46:	686c      	ldr	r4, [r5, #4]
 8005a48:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a4a:	07db      	lsls	r3, r3, #31
 8005a4c:	d405      	bmi.n	8005a5a <_puts_r+0x36>
 8005a4e:	89a3      	ldrh	r3, [r4, #12]
 8005a50:	0598      	lsls	r0, r3, #22
 8005a52:	d402      	bmi.n	8005a5a <_puts_r+0x36>
 8005a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a56:	f001 f952 	bl	8006cfe <__retarget_lock_acquire_recursive>
 8005a5a:	89a3      	ldrh	r3, [r4, #12]
 8005a5c:	0719      	lsls	r1, r3, #28
 8005a5e:	d51d      	bpl.n	8005a9c <_puts_r+0x78>
 8005a60:	6923      	ldr	r3, [r4, #16]
 8005a62:	b1db      	cbz	r3, 8005a9c <_puts_r+0x78>
 8005a64:	3e01      	subs	r6, #1
 8005a66:	68a3      	ldr	r3, [r4, #8]
 8005a68:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	60a3      	str	r3, [r4, #8]
 8005a70:	bb39      	cbnz	r1, 8005ac2 <_puts_r+0x9e>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da38      	bge.n	8005ae8 <_puts_r+0xc4>
 8005a76:	4622      	mov	r2, r4
 8005a78:	210a      	movs	r1, #10
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f848 	bl	8005b10 <__swbuf_r>
 8005a80:	3001      	adds	r0, #1
 8005a82:	d011      	beq.n	8005aa8 <_puts_r+0x84>
 8005a84:	250a      	movs	r5, #10
 8005a86:	e011      	b.n	8005aac <_puts_r+0x88>
 8005a88:	4b1b      	ldr	r3, [pc, #108]	; (8005af8 <_puts_r+0xd4>)
 8005a8a:	429c      	cmp	r4, r3
 8005a8c:	d101      	bne.n	8005a92 <_puts_r+0x6e>
 8005a8e:	68ac      	ldr	r4, [r5, #8]
 8005a90:	e7da      	b.n	8005a48 <_puts_r+0x24>
 8005a92:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <_puts_r+0xd8>)
 8005a94:	429c      	cmp	r4, r3
 8005a96:	bf08      	it	eq
 8005a98:	68ec      	ldreq	r4, [r5, #12]
 8005a9a:	e7d5      	b.n	8005a48 <_puts_r+0x24>
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 f888 	bl	8005bb4 <__swsetup_r>
 8005aa4:	2800      	cmp	r0, #0
 8005aa6:	d0dd      	beq.n	8005a64 <_puts_r+0x40>
 8005aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8005aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aae:	07da      	lsls	r2, r3, #31
 8005ab0:	d405      	bmi.n	8005abe <_puts_r+0x9a>
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	059b      	lsls	r3, r3, #22
 8005ab6:	d402      	bmi.n	8005abe <_puts_r+0x9a>
 8005ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005aba:	f001 f921 	bl	8006d00 <__retarget_lock_release_recursive>
 8005abe:	4628      	mov	r0, r5
 8005ac0:	bd70      	pop	{r4, r5, r6, pc}
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da04      	bge.n	8005ad0 <_puts_r+0xac>
 8005ac6:	69a2      	ldr	r2, [r4, #24]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	dc06      	bgt.n	8005ada <_puts_r+0xb6>
 8005acc:	290a      	cmp	r1, #10
 8005ace:	d004      	beq.n	8005ada <_puts_r+0xb6>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	1c5a      	adds	r2, r3, #1
 8005ad4:	6022      	str	r2, [r4, #0]
 8005ad6:	7019      	strb	r1, [r3, #0]
 8005ad8:	e7c5      	b.n	8005a66 <_puts_r+0x42>
 8005ada:	4622      	mov	r2, r4
 8005adc:	4628      	mov	r0, r5
 8005ade:	f000 f817 	bl	8005b10 <__swbuf_r>
 8005ae2:	3001      	adds	r0, #1
 8005ae4:	d1bf      	bne.n	8005a66 <_puts_r+0x42>
 8005ae6:	e7df      	b.n	8005aa8 <_puts_r+0x84>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	250a      	movs	r5, #10
 8005aec:	1c5a      	adds	r2, r3, #1
 8005aee:	6022      	str	r2, [r4, #0]
 8005af0:	701d      	strb	r5, [r3, #0]
 8005af2:	e7db      	b.n	8005aac <_puts_r+0x88>
 8005af4:	0800c9a8 	.word	0x0800c9a8
 8005af8:	0800c9c8 	.word	0x0800c9c8
 8005afc:	0800c988 	.word	0x0800c988

08005b00 <puts>:
 8005b00:	4b02      	ldr	r3, [pc, #8]	; (8005b0c <puts+0xc>)
 8005b02:	4601      	mov	r1, r0
 8005b04:	6818      	ldr	r0, [r3, #0]
 8005b06:	f7ff bf8d 	b.w	8005a24 <_puts_r>
 8005b0a:	bf00      	nop
 8005b0c:	20000014 	.word	0x20000014

08005b10 <__swbuf_r>:
 8005b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b12:	460e      	mov	r6, r1
 8005b14:	4614      	mov	r4, r2
 8005b16:	4605      	mov	r5, r0
 8005b18:	b118      	cbz	r0, 8005b22 <__swbuf_r+0x12>
 8005b1a:	6983      	ldr	r3, [r0, #24]
 8005b1c:	b90b      	cbnz	r3, 8005b22 <__swbuf_r+0x12>
 8005b1e:	f001 f84b 	bl	8006bb8 <__sinit>
 8005b22:	4b21      	ldr	r3, [pc, #132]	; (8005ba8 <__swbuf_r+0x98>)
 8005b24:	429c      	cmp	r4, r3
 8005b26:	d12b      	bne.n	8005b80 <__swbuf_r+0x70>
 8005b28:	686c      	ldr	r4, [r5, #4]
 8005b2a:	69a3      	ldr	r3, [r4, #24]
 8005b2c:	60a3      	str	r3, [r4, #8]
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	071a      	lsls	r2, r3, #28
 8005b32:	d52f      	bpl.n	8005b94 <__swbuf_r+0x84>
 8005b34:	6923      	ldr	r3, [r4, #16]
 8005b36:	b36b      	cbz	r3, 8005b94 <__swbuf_r+0x84>
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	1ac0      	subs	r0, r0, r3
 8005b3e:	6963      	ldr	r3, [r4, #20]
 8005b40:	b2f6      	uxtb	r6, r6
 8005b42:	4283      	cmp	r3, r0
 8005b44:	4637      	mov	r7, r6
 8005b46:	dc04      	bgt.n	8005b52 <__swbuf_r+0x42>
 8005b48:	4621      	mov	r1, r4
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 ffa0 	bl	8006a90 <_fflush_r>
 8005b50:	bb30      	cbnz	r0, 8005ba0 <__swbuf_r+0x90>
 8005b52:	68a3      	ldr	r3, [r4, #8]
 8005b54:	3b01      	subs	r3, #1
 8005b56:	60a3      	str	r3, [r4, #8]
 8005b58:	6823      	ldr	r3, [r4, #0]
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	6022      	str	r2, [r4, #0]
 8005b5e:	701e      	strb	r6, [r3, #0]
 8005b60:	6963      	ldr	r3, [r4, #20]
 8005b62:	3001      	adds	r0, #1
 8005b64:	4283      	cmp	r3, r0
 8005b66:	d004      	beq.n	8005b72 <__swbuf_r+0x62>
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	07db      	lsls	r3, r3, #31
 8005b6c:	d506      	bpl.n	8005b7c <__swbuf_r+0x6c>
 8005b6e:	2e0a      	cmp	r6, #10
 8005b70:	d104      	bne.n	8005b7c <__swbuf_r+0x6c>
 8005b72:	4621      	mov	r1, r4
 8005b74:	4628      	mov	r0, r5
 8005b76:	f000 ff8b 	bl	8006a90 <_fflush_r>
 8005b7a:	b988      	cbnz	r0, 8005ba0 <__swbuf_r+0x90>
 8005b7c:	4638      	mov	r0, r7
 8005b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <__swbuf_r+0x9c>)
 8005b82:	429c      	cmp	r4, r3
 8005b84:	d101      	bne.n	8005b8a <__swbuf_r+0x7a>
 8005b86:	68ac      	ldr	r4, [r5, #8]
 8005b88:	e7cf      	b.n	8005b2a <__swbuf_r+0x1a>
 8005b8a:	4b09      	ldr	r3, [pc, #36]	; (8005bb0 <__swbuf_r+0xa0>)
 8005b8c:	429c      	cmp	r4, r3
 8005b8e:	bf08      	it	eq
 8005b90:	68ec      	ldreq	r4, [r5, #12]
 8005b92:	e7ca      	b.n	8005b2a <__swbuf_r+0x1a>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4628      	mov	r0, r5
 8005b98:	f000 f80c 	bl	8005bb4 <__swsetup_r>
 8005b9c:	2800      	cmp	r0, #0
 8005b9e:	d0cb      	beq.n	8005b38 <__swbuf_r+0x28>
 8005ba0:	f04f 37ff 	mov.w	r7, #4294967295
 8005ba4:	e7ea      	b.n	8005b7c <__swbuf_r+0x6c>
 8005ba6:	bf00      	nop
 8005ba8:	0800c9a8 	.word	0x0800c9a8
 8005bac:	0800c9c8 	.word	0x0800c9c8
 8005bb0:	0800c988 	.word	0x0800c988

08005bb4 <__swsetup_r>:
 8005bb4:	4b32      	ldr	r3, [pc, #200]	; (8005c80 <__swsetup_r+0xcc>)
 8005bb6:	b570      	push	{r4, r5, r6, lr}
 8005bb8:	681d      	ldr	r5, [r3, #0]
 8005bba:	4606      	mov	r6, r0
 8005bbc:	460c      	mov	r4, r1
 8005bbe:	b125      	cbz	r5, 8005bca <__swsetup_r+0x16>
 8005bc0:	69ab      	ldr	r3, [r5, #24]
 8005bc2:	b913      	cbnz	r3, 8005bca <__swsetup_r+0x16>
 8005bc4:	4628      	mov	r0, r5
 8005bc6:	f000 fff7 	bl	8006bb8 <__sinit>
 8005bca:	4b2e      	ldr	r3, [pc, #184]	; (8005c84 <__swsetup_r+0xd0>)
 8005bcc:	429c      	cmp	r4, r3
 8005bce:	d10f      	bne.n	8005bf0 <__swsetup_r+0x3c>
 8005bd0:	686c      	ldr	r4, [r5, #4]
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005bd8:	0719      	lsls	r1, r3, #28
 8005bda:	d42c      	bmi.n	8005c36 <__swsetup_r+0x82>
 8005bdc:	06dd      	lsls	r5, r3, #27
 8005bde:	d411      	bmi.n	8005c04 <__swsetup_r+0x50>
 8005be0:	2309      	movs	r3, #9
 8005be2:	6033      	str	r3, [r6, #0]
 8005be4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005be8:	81a3      	strh	r3, [r4, #12]
 8005bea:	f04f 30ff 	mov.w	r0, #4294967295
 8005bee:	e03e      	b.n	8005c6e <__swsetup_r+0xba>
 8005bf0:	4b25      	ldr	r3, [pc, #148]	; (8005c88 <__swsetup_r+0xd4>)
 8005bf2:	429c      	cmp	r4, r3
 8005bf4:	d101      	bne.n	8005bfa <__swsetup_r+0x46>
 8005bf6:	68ac      	ldr	r4, [r5, #8]
 8005bf8:	e7eb      	b.n	8005bd2 <__swsetup_r+0x1e>
 8005bfa:	4b24      	ldr	r3, [pc, #144]	; (8005c8c <__swsetup_r+0xd8>)
 8005bfc:	429c      	cmp	r4, r3
 8005bfe:	bf08      	it	eq
 8005c00:	68ec      	ldreq	r4, [r5, #12]
 8005c02:	e7e6      	b.n	8005bd2 <__swsetup_r+0x1e>
 8005c04:	0758      	lsls	r0, r3, #29
 8005c06:	d512      	bpl.n	8005c2e <__swsetup_r+0x7a>
 8005c08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c0a:	b141      	cbz	r1, 8005c1e <__swsetup_r+0x6a>
 8005c0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c10:	4299      	cmp	r1, r3
 8005c12:	d002      	beq.n	8005c1a <__swsetup_r+0x66>
 8005c14:	4630      	mov	r0, r6
 8005c16:	f001 fc7b 	bl	8007510 <_free_r>
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	6363      	str	r3, [r4, #52]	; 0x34
 8005c1e:	89a3      	ldrh	r3, [r4, #12]
 8005c20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c24:	81a3      	strh	r3, [r4, #12]
 8005c26:	2300      	movs	r3, #0
 8005c28:	6063      	str	r3, [r4, #4]
 8005c2a:	6923      	ldr	r3, [r4, #16]
 8005c2c:	6023      	str	r3, [r4, #0]
 8005c2e:	89a3      	ldrh	r3, [r4, #12]
 8005c30:	f043 0308 	orr.w	r3, r3, #8
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	b94b      	cbnz	r3, 8005c4e <__swsetup_r+0x9a>
 8005c3a:	89a3      	ldrh	r3, [r4, #12]
 8005c3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c44:	d003      	beq.n	8005c4e <__swsetup_r+0x9a>
 8005c46:	4621      	mov	r1, r4
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f001 f87f 	bl	8006d4c <__smakebuf_r>
 8005c4e:	89a0      	ldrh	r0, [r4, #12]
 8005c50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c54:	f010 0301 	ands.w	r3, r0, #1
 8005c58:	d00a      	beq.n	8005c70 <__swsetup_r+0xbc>
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60a3      	str	r3, [r4, #8]
 8005c5e:	6963      	ldr	r3, [r4, #20]
 8005c60:	425b      	negs	r3, r3
 8005c62:	61a3      	str	r3, [r4, #24]
 8005c64:	6923      	ldr	r3, [r4, #16]
 8005c66:	b943      	cbnz	r3, 8005c7a <__swsetup_r+0xc6>
 8005c68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005c6c:	d1ba      	bne.n	8005be4 <__swsetup_r+0x30>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	0781      	lsls	r1, r0, #30
 8005c72:	bf58      	it	pl
 8005c74:	6963      	ldrpl	r3, [r4, #20]
 8005c76:	60a3      	str	r3, [r4, #8]
 8005c78:	e7f4      	b.n	8005c64 <__swsetup_r+0xb0>
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	e7f7      	b.n	8005c6e <__swsetup_r+0xba>
 8005c7e:	bf00      	nop
 8005c80:	20000014 	.word	0x20000014
 8005c84:	0800c9a8 	.word	0x0800c9a8
 8005c88:	0800c9c8 	.word	0x0800c9c8
 8005c8c:	0800c988 	.word	0x0800c988

08005c90 <quorem>:
 8005c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	6903      	ldr	r3, [r0, #16]
 8005c96:	690c      	ldr	r4, [r1, #16]
 8005c98:	42a3      	cmp	r3, r4
 8005c9a:	4607      	mov	r7, r0
 8005c9c:	f2c0 8081 	blt.w	8005da2 <quorem+0x112>
 8005ca0:	3c01      	subs	r4, #1
 8005ca2:	f101 0814 	add.w	r8, r1, #20
 8005ca6:	f100 0514 	add.w	r5, r0, #20
 8005caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005cc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005cc8:	d331      	bcc.n	8005d2e <quorem+0x9e>
 8005cca:	f04f 0e00 	mov.w	lr, #0
 8005cce:	4640      	mov	r0, r8
 8005cd0:	46ac      	mov	ip, r5
 8005cd2:	46f2      	mov	sl, lr
 8005cd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005cd8:	b293      	uxth	r3, r2
 8005cda:	fb06 e303 	mla	r3, r6, r3, lr
 8005cde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	ebaa 0303 	sub.w	r3, sl, r3
 8005ce8:	f8dc a000 	ldr.w	sl, [ip]
 8005cec:	0c12      	lsrs	r2, r2, #16
 8005cee:	fa13 f38a 	uxtah	r3, r3, sl
 8005cf2:	fb06 e202 	mla	r2, r6, r2, lr
 8005cf6:	9300      	str	r3, [sp, #0]
 8005cf8:	9b00      	ldr	r3, [sp, #0]
 8005cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005cfe:	b292      	uxth	r2, r2
 8005d00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d08:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d0c:	4581      	cmp	r9, r0
 8005d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d12:	f84c 3b04 	str.w	r3, [ip], #4
 8005d16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005d1a:	d2db      	bcs.n	8005cd4 <quorem+0x44>
 8005d1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005d20:	b92b      	cbnz	r3, 8005d2e <quorem+0x9e>
 8005d22:	9b01      	ldr	r3, [sp, #4]
 8005d24:	3b04      	subs	r3, #4
 8005d26:	429d      	cmp	r5, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	d32e      	bcc.n	8005d8a <quorem+0xfa>
 8005d2c:	613c      	str	r4, [r7, #16]
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f001 fad6 	bl	80072e0 <__mcmp>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	db24      	blt.n	8005d82 <quorem+0xf2>
 8005d38:	3601      	adds	r6, #1
 8005d3a:	4628      	mov	r0, r5
 8005d3c:	f04f 0c00 	mov.w	ip, #0
 8005d40:	f858 2b04 	ldr.w	r2, [r8], #4
 8005d44:	f8d0 e000 	ldr.w	lr, [r0]
 8005d48:	b293      	uxth	r3, r2
 8005d4a:	ebac 0303 	sub.w	r3, ip, r3
 8005d4e:	0c12      	lsrs	r2, r2, #16
 8005d50:	fa13 f38e 	uxtah	r3, r3, lr
 8005d54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d62:	45c1      	cmp	r9, r8
 8005d64:	f840 3b04 	str.w	r3, [r0], #4
 8005d68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d6c:	d2e8      	bcs.n	8005d40 <quorem+0xb0>
 8005d6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d76:	b922      	cbnz	r2, 8005d82 <quorem+0xf2>
 8005d78:	3b04      	subs	r3, #4
 8005d7a:	429d      	cmp	r5, r3
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	d30a      	bcc.n	8005d96 <quorem+0x106>
 8005d80:	613c      	str	r4, [r7, #16]
 8005d82:	4630      	mov	r0, r6
 8005d84:	b003      	add	sp, #12
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	6812      	ldr	r2, [r2, #0]
 8005d8c:	3b04      	subs	r3, #4
 8005d8e:	2a00      	cmp	r2, #0
 8005d90:	d1cc      	bne.n	8005d2c <quorem+0x9c>
 8005d92:	3c01      	subs	r4, #1
 8005d94:	e7c7      	b.n	8005d26 <quorem+0x96>
 8005d96:	6812      	ldr	r2, [r2, #0]
 8005d98:	3b04      	subs	r3, #4
 8005d9a:	2a00      	cmp	r2, #0
 8005d9c:	d1f0      	bne.n	8005d80 <quorem+0xf0>
 8005d9e:	3c01      	subs	r4, #1
 8005da0:	e7eb      	b.n	8005d7a <quorem+0xea>
 8005da2:	2000      	movs	r0, #0
 8005da4:	e7ee      	b.n	8005d84 <quorem+0xf4>
	...

08005da8 <_dtoa_r>:
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	ed2d 8b04 	vpush	{d8-d9}
 8005db0:	ec57 6b10 	vmov	r6, r7, d0
 8005db4:	b093      	sub	sp, #76	; 0x4c
 8005db6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005db8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005dbc:	9106      	str	r1, [sp, #24]
 8005dbe:	ee10 aa10 	vmov	sl, s0
 8005dc2:	4604      	mov	r4, r0
 8005dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8005dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8005dc8:	46bb      	mov	fp, r7
 8005dca:	b975      	cbnz	r5, 8005dea <_dtoa_r+0x42>
 8005dcc:	2010      	movs	r0, #16
 8005dce:	f000 fffd 	bl	8006dcc <malloc>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6260      	str	r0, [r4, #36]	; 0x24
 8005dd6:	b920      	cbnz	r0, 8005de2 <_dtoa_r+0x3a>
 8005dd8:	4ba7      	ldr	r3, [pc, #668]	; (8006078 <_dtoa_r+0x2d0>)
 8005dda:	21ea      	movs	r1, #234	; 0xea
 8005ddc:	48a7      	ldr	r0, [pc, #668]	; (800607c <_dtoa_r+0x2d4>)
 8005dde:	f001 fcdd 	bl	800779c <__assert_func>
 8005de2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005de6:	6005      	str	r5, [r0, #0]
 8005de8:	60c5      	str	r5, [r0, #12]
 8005dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dec:	6819      	ldr	r1, [r3, #0]
 8005dee:	b151      	cbz	r1, 8005e06 <_dtoa_r+0x5e>
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	604a      	str	r2, [r1, #4]
 8005df4:	2301      	movs	r3, #1
 8005df6:	4093      	lsls	r3, r2
 8005df8:	608b      	str	r3, [r1, #8]
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f001 f82e 	bl	8006e5c <_Bfree>
 8005e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	1e3b      	subs	r3, r7, #0
 8005e08:	bfaa      	itet	ge
 8005e0a:	2300      	movge	r3, #0
 8005e0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005e10:	f8c8 3000 	strge.w	r3, [r8]
 8005e14:	4b9a      	ldr	r3, [pc, #616]	; (8006080 <_dtoa_r+0x2d8>)
 8005e16:	bfbc      	itt	lt
 8005e18:	2201      	movlt	r2, #1
 8005e1a:	f8c8 2000 	strlt.w	r2, [r8]
 8005e1e:	ea33 030b 	bics.w	r3, r3, fp
 8005e22:	d11b      	bne.n	8005e5c <_dtoa_r+0xb4>
 8005e24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e26:	f242 730f 	movw	r3, #9999	; 0x270f
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e30:	4333      	orrs	r3, r6
 8005e32:	f000 8592 	beq.w	800695a <_dtoa_r+0xbb2>
 8005e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e38:	b963      	cbnz	r3, 8005e54 <_dtoa_r+0xac>
 8005e3a:	4b92      	ldr	r3, [pc, #584]	; (8006084 <_dtoa_r+0x2dc>)
 8005e3c:	e022      	b.n	8005e84 <_dtoa_r+0xdc>
 8005e3e:	4b92      	ldr	r3, [pc, #584]	; (8006088 <_dtoa_r+0x2e0>)
 8005e40:	9301      	str	r3, [sp, #4]
 8005e42:	3308      	adds	r3, #8
 8005e44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	9801      	ldr	r0, [sp, #4]
 8005e4a:	b013      	add	sp, #76	; 0x4c
 8005e4c:	ecbd 8b04 	vpop	{d8-d9}
 8005e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e54:	4b8b      	ldr	r3, [pc, #556]	; (8006084 <_dtoa_r+0x2dc>)
 8005e56:	9301      	str	r3, [sp, #4]
 8005e58:	3303      	adds	r3, #3
 8005e5a:	e7f3      	b.n	8005e44 <_dtoa_r+0x9c>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4650      	mov	r0, sl
 8005e62:	4659      	mov	r1, fp
 8005e64:	f7fa feb0 	bl	8000bc8 <__aeabi_dcmpeq>
 8005e68:	ec4b ab19 	vmov	d9, sl, fp
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	b158      	cbz	r0, 8005e88 <_dtoa_r+0xe0>
 8005e70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e72:	2301      	movs	r3, #1
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 856b 	beq.w	8006954 <_dtoa_r+0xbac>
 8005e7e:	4883      	ldr	r0, [pc, #524]	; (800608c <_dtoa_r+0x2e4>)
 8005e80:	6018      	str	r0, [r3, #0]
 8005e82:	1e43      	subs	r3, r0, #1
 8005e84:	9301      	str	r3, [sp, #4]
 8005e86:	e7df      	b.n	8005e48 <_dtoa_r+0xa0>
 8005e88:	ec4b ab10 	vmov	d0, sl, fp
 8005e8c:	aa10      	add	r2, sp, #64	; 0x40
 8005e8e:	a911      	add	r1, sp, #68	; 0x44
 8005e90:	4620      	mov	r0, r4
 8005e92:	f001 facb 	bl	800742c <__d2b>
 8005e96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005e9a:	ee08 0a10 	vmov	s16, r0
 8005e9e:	2d00      	cmp	r5, #0
 8005ea0:	f000 8084 	beq.w	8005fac <_dtoa_r+0x204>
 8005ea4:	ee19 3a90 	vmov	r3, s19
 8005ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005eac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005eb0:	4656      	mov	r6, sl
 8005eb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005eba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005ebe:	4b74      	ldr	r3, [pc, #464]	; (8006090 <_dtoa_r+0x2e8>)
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4639      	mov	r1, r7
 8005ec6:	f7fa fa5f 	bl	8000388 <__aeabi_dsub>
 8005eca:	a365      	add	r3, pc, #404	; (adr r3, 8006060 <_dtoa_r+0x2b8>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa fc12 	bl	80006f8 <__aeabi_dmul>
 8005ed4:	a364      	add	r3, pc, #400	; (adr r3, 8006068 <_dtoa_r+0x2c0>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa fa57 	bl	800038c <__adddf3>
 8005ede:	4606      	mov	r6, r0
 8005ee0:	4628      	mov	r0, r5
 8005ee2:	460f      	mov	r7, r1
 8005ee4:	f7fa fb9e 	bl	8000624 <__aeabi_i2d>
 8005ee8:	a361      	add	r3, pc, #388	; (adr r3, 8006070 <_dtoa_r+0x2c8>)
 8005eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eee:	f7fa fc03 	bl	80006f8 <__aeabi_dmul>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	4639      	mov	r1, r7
 8005efa:	f7fa fa47 	bl	800038c <__adddf3>
 8005efe:	4606      	mov	r6, r0
 8005f00:	460f      	mov	r7, r1
 8005f02:	f7fa fea9 	bl	8000c58 <__aeabi_d2iz>
 8005f06:	2200      	movs	r2, #0
 8005f08:	9000      	str	r0, [sp, #0]
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	4630      	mov	r0, r6
 8005f0e:	4639      	mov	r1, r7
 8005f10:	f7fa fe64 	bl	8000bdc <__aeabi_dcmplt>
 8005f14:	b150      	cbz	r0, 8005f2c <_dtoa_r+0x184>
 8005f16:	9800      	ldr	r0, [sp, #0]
 8005f18:	f7fa fb84 	bl	8000624 <__aeabi_i2d>
 8005f1c:	4632      	mov	r2, r6
 8005f1e:	463b      	mov	r3, r7
 8005f20:	f7fa fe52 	bl	8000bc8 <__aeabi_dcmpeq>
 8005f24:	b910      	cbnz	r0, 8005f2c <_dtoa_r+0x184>
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	9300      	str	r3, [sp, #0]
 8005f2c:	9b00      	ldr	r3, [sp, #0]
 8005f2e:	2b16      	cmp	r3, #22
 8005f30:	d85a      	bhi.n	8005fe8 <_dtoa_r+0x240>
 8005f32:	9a00      	ldr	r2, [sp, #0]
 8005f34:	4b57      	ldr	r3, [pc, #348]	; (8006094 <_dtoa_r+0x2ec>)
 8005f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3e:	ec51 0b19 	vmov	r0, r1, d9
 8005f42:	f7fa fe4b 	bl	8000bdc <__aeabi_dcmplt>
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d050      	beq.n	8005fec <_dtoa_r+0x244>
 8005f4a:	9b00      	ldr	r3, [sp, #0]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	2300      	movs	r3, #0
 8005f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f56:	1b5d      	subs	r5, r3, r5
 8005f58:	1e6b      	subs	r3, r5, #1
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	bf45      	ittet	mi
 8005f5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005f62:	9304      	strmi	r3, [sp, #16]
 8005f64:	2300      	movpl	r3, #0
 8005f66:	2300      	movmi	r3, #0
 8005f68:	bf4c      	ite	mi
 8005f6a:	9305      	strmi	r3, [sp, #20]
 8005f6c:	9304      	strpl	r3, [sp, #16]
 8005f6e:	9b00      	ldr	r3, [sp, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	db3d      	blt.n	8005ff0 <_dtoa_r+0x248>
 8005f74:	9b05      	ldr	r3, [sp, #20]
 8005f76:	9a00      	ldr	r2, [sp, #0]
 8005f78:	920a      	str	r2, [sp, #40]	; 0x28
 8005f7a:	4413      	add	r3, r2
 8005f7c:	9305      	str	r3, [sp, #20]
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9307      	str	r3, [sp, #28]
 8005f82:	9b06      	ldr	r3, [sp, #24]
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	f200 8089 	bhi.w	800609c <_dtoa_r+0x2f4>
 8005f8a:	2b05      	cmp	r3, #5
 8005f8c:	bfc4      	itt	gt
 8005f8e:	3b04      	subgt	r3, #4
 8005f90:	9306      	strgt	r3, [sp, #24]
 8005f92:	9b06      	ldr	r3, [sp, #24]
 8005f94:	f1a3 0302 	sub.w	r3, r3, #2
 8005f98:	bfcc      	ite	gt
 8005f9a:	2500      	movgt	r5, #0
 8005f9c:	2501      	movle	r5, #1
 8005f9e:	2b03      	cmp	r3, #3
 8005fa0:	f200 8087 	bhi.w	80060b2 <_dtoa_r+0x30a>
 8005fa4:	e8df f003 	tbb	[pc, r3]
 8005fa8:	59383a2d 	.word	0x59383a2d
 8005fac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005fb0:	441d      	add	r5, r3
 8005fb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005fb6:	2b20      	cmp	r3, #32
 8005fb8:	bfc1      	itttt	gt
 8005fba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005fbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005fc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005fc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005fca:	bfda      	itte	le
 8005fcc:	f1c3 0320 	rsble	r3, r3, #32
 8005fd0:	fa06 f003 	lslle.w	r0, r6, r3
 8005fd4:	4318      	orrgt	r0, r3
 8005fd6:	f7fa fb15 	bl	8000604 <__aeabi_ui2d>
 8005fda:	2301      	movs	r3, #1
 8005fdc:	4606      	mov	r6, r0
 8005fde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005fe2:	3d01      	subs	r5, #1
 8005fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8005fe6:	e76a      	b.n	8005ebe <_dtoa_r+0x116>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	e7b2      	b.n	8005f52 <_dtoa_r+0x1aa>
 8005fec:	900b      	str	r0, [sp, #44]	; 0x2c
 8005fee:	e7b1      	b.n	8005f54 <_dtoa_r+0x1ac>
 8005ff0:	9b04      	ldr	r3, [sp, #16]
 8005ff2:	9a00      	ldr	r2, [sp, #0]
 8005ff4:	1a9b      	subs	r3, r3, r2
 8005ff6:	9304      	str	r3, [sp, #16]
 8005ff8:	4253      	negs	r3, r2
 8005ffa:	9307      	str	r3, [sp, #28]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8006000:	e7bf      	b.n	8005f82 <_dtoa_r+0x1da>
 8006002:	2300      	movs	r3, #0
 8006004:	9308      	str	r3, [sp, #32]
 8006006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006008:	2b00      	cmp	r3, #0
 800600a:	dc55      	bgt.n	80060b8 <_dtoa_r+0x310>
 800600c:	2301      	movs	r3, #1
 800600e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006012:	461a      	mov	r2, r3
 8006014:	9209      	str	r2, [sp, #36]	; 0x24
 8006016:	e00c      	b.n	8006032 <_dtoa_r+0x28a>
 8006018:	2301      	movs	r3, #1
 800601a:	e7f3      	b.n	8006004 <_dtoa_r+0x25c>
 800601c:	2300      	movs	r3, #0
 800601e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006020:	9308      	str	r3, [sp, #32]
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	4413      	add	r3, r2
 8006026:	9302      	str	r3, [sp, #8]
 8006028:	3301      	adds	r3, #1
 800602a:	2b01      	cmp	r3, #1
 800602c:	9303      	str	r3, [sp, #12]
 800602e:	bfb8      	it	lt
 8006030:	2301      	movlt	r3, #1
 8006032:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006034:	2200      	movs	r2, #0
 8006036:	6042      	str	r2, [r0, #4]
 8006038:	2204      	movs	r2, #4
 800603a:	f102 0614 	add.w	r6, r2, #20
 800603e:	429e      	cmp	r6, r3
 8006040:	6841      	ldr	r1, [r0, #4]
 8006042:	d93d      	bls.n	80060c0 <_dtoa_r+0x318>
 8006044:	4620      	mov	r0, r4
 8006046:	f000 fec9 	bl	8006ddc <_Balloc>
 800604a:	9001      	str	r0, [sp, #4]
 800604c:	2800      	cmp	r0, #0
 800604e:	d13b      	bne.n	80060c8 <_dtoa_r+0x320>
 8006050:	4b11      	ldr	r3, [pc, #68]	; (8006098 <_dtoa_r+0x2f0>)
 8006052:	4602      	mov	r2, r0
 8006054:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006058:	e6c0      	b.n	8005ddc <_dtoa_r+0x34>
 800605a:	2301      	movs	r3, #1
 800605c:	e7df      	b.n	800601e <_dtoa_r+0x276>
 800605e:	bf00      	nop
 8006060:	636f4361 	.word	0x636f4361
 8006064:	3fd287a7 	.word	0x3fd287a7
 8006068:	8b60c8b3 	.word	0x8b60c8b3
 800606c:	3fc68a28 	.word	0x3fc68a28
 8006070:	509f79fb 	.word	0x509f79fb
 8006074:	3fd34413 	.word	0x3fd34413
 8006078:	0800c905 	.word	0x0800c905
 800607c:	0800c91c 	.word	0x0800c91c
 8006080:	7ff00000 	.word	0x7ff00000
 8006084:	0800c901 	.word	0x0800c901
 8006088:	0800c8f8 	.word	0x0800c8f8
 800608c:	0800c8d5 	.word	0x0800c8d5
 8006090:	3ff80000 	.word	0x3ff80000
 8006094:	0800ca70 	.word	0x0800ca70
 8006098:	0800c977 	.word	0x0800c977
 800609c:	2501      	movs	r5, #1
 800609e:	2300      	movs	r3, #0
 80060a0:	9306      	str	r3, [sp, #24]
 80060a2:	9508      	str	r5, [sp, #32]
 80060a4:	f04f 33ff 	mov.w	r3, #4294967295
 80060a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2312      	movs	r3, #18
 80060b0:	e7b0      	b.n	8006014 <_dtoa_r+0x26c>
 80060b2:	2301      	movs	r3, #1
 80060b4:	9308      	str	r3, [sp, #32]
 80060b6:	e7f5      	b.n	80060a4 <_dtoa_r+0x2fc>
 80060b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80060be:	e7b8      	b.n	8006032 <_dtoa_r+0x28a>
 80060c0:	3101      	adds	r1, #1
 80060c2:	6041      	str	r1, [r0, #4]
 80060c4:	0052      	lsls	r2, r2, #1
 80060c6:	e7b8      	b.n	800603a <_dtoa_r+0x292>
 80060c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ca:	9a01      	ldr	r2, [sp, #4]
 80060cc:	601a      	str	r2, [r3, #0]
 80060ce:	9b03      	ldr	r3, [sp, #12]
 80060d0:	2b0e      	cmp	r3, #14
 80060d2:	f200 809d 	bhi.w	8006210 <_dtoa_r+0x468>
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	f000 809a 	beq.w	8006210 <_dtoa_r+0x468>
 80060dc:	9b00      	ldr	r3, [sp, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd32      	ble.n	8006148 <_dtoa_r+0x3a0>
 80060e2:	4ab7      	ldr	r2, [pc, #732]	; (80063c0 <_dtoa_r+0x618>)
 80060e4:	f003 030f 	and.w	r3, r3, #15
 80060e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80060f0:	9b00      	ldr	r3, [sp, #0]
 80060f2:	05d8      	lsls	r0, r3, #23
 80060f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80060f8:	d516      	bpl.n	8006128 <_dtoa_r+0x380>
 80060fa:	4bb2      	ldr	r3, [pc, #712]	; (80063c4 <_dtoa_r+0x61c>)
 80060fc:	ec51 0b19 	vmov	r0, r1, d9
 8006100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006104:	f7fa fc22 	bl	800094c <__aeabi_ddiv>
 8006108:	f007 070f 	and.w	r7, r7, #15
 800610c:	4682      	mov	sl, r0
 800610e:	468b      	mov	fp, r1
 8006110:	2503      	movs	r5, #3
 8006112:	4eac      	ldr	r6, [pc, #688]	; (80063c4 <_dtoa_r+0x61c>)
 8006114:	b957      	cbnz	r7, 800612c <_dtoa_r+0x384>
 8006116:	4642      	mov	r2, r8
 8006118:	464b      	mov	r3, r9
 800611a:	4650      	mov	r0, sl
 800611c:	4659      	mov	r1, fp
 800611e:	f7fa fc15 	bl	800094c <__aeabi_ddiv>
 8006122:	4682      	mov	sl, r0
 8006124:	468b      	mov	fp, r1
 8006126:	e028      	b.n	800617a <_dtoa_r+0x3d2>
 8006128:	2502      	movs	r5, #2
 800612a:	e7f2      	b.n	8006112 <_dtoa_r+0x36a>
 800612c:	07f9      	lsls	r1, r7, #31
 800612e:	d508      	bpl.n	8006142 <_dtoa_r+0x39a>
 8006130:	4640      	mov	r0, r8
 8006132:	4649      	mov	r1, r9
 8006134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006138:	f7fa fade 	bl	80006f8 <__aeabi_dmul>
 800613c:	3501      	adds	r5, #1
 800613e:	4680      	mov	r8, r0
 8006140:	4689      	mov	r9, r1
 8006142:	107f      	asrs	r7, r7, #1
 8006144:	3608      	adds	r6, #8
 8006146:	e7e5      	b.n	8006114 <_dtoa_r+0x36c>
 8006148:	f000 809b 	beq.w	8006282 <_dtoa_r+0x4da>
 800614c:	9b00      	ldr	r3, [sp, #0]
 800614e:	4f9d      	ldr	r7, [pc, #628]	; (80063c4 <_dtoa_r+0x61c>)
 8006150:	425e      	negs	r6, r3
 8006152:	4b9b      	ldr	r3, [pc, #620]	; (80063c0 <_dtoa_r+0x618>)
 8006154:	f006 020f 	and.w	r2, r6, #15
 8006158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	ec51 0b19 	vmov	r0, r1, d9
 8006164:	f7fa fac8 	bl	80006f8 <__aeabi_dmul>
 8006168:	1136      	asrs	r6, r6, #4
 800616a:	4682      	mov	sl, r0
 800616c:	468b      	mov	fp, r1
 800616e:	2300      	movs	r3, #0
 8006170:	2502      	movs	r5, #2
 8006172:	2e00      	cmp	r6, #0
 8006174:	d17a      	bne.n	800626c <_dtoa_r+0x4c4>
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1d3      	bne.n	8006122 <_dtoa_r+0x37a>
 800617a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 8082 	beq.w	8006286 <_dtoa_r+0x4de>
 8006182:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <_dtoa_r+0x620>)
 8006184:	2200      	movs	r2, #0
 8006186:	4650      	mov	r0, sl
 8006188:	4659      	mov	r1, fp
 800618a:	f7fa fd27 	bl	8000bdc <__aeabi_dcmplt>
 800618e:	2800      	cmp	r0, #0
 8006190:	d079      	beq.n	8006286 <_dtoa_r+0x4de>
 8006192:	9b03      	ldr	r3, [sp, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d076      	beq.n	8006286 <_dtoa_r+0x4de>
 8006198:	9b02      	ldr	r3, [sp, #8]
 800619a:	2b00      	cmp	r3, #0
 800619c:	dd36      	ble.n	800620c <_dtoa_r+0x464>
 800619e:	9b00      	ldr	r3, [sp, #0]
 80061a0:	4650      	mov	r0, sl
 80061a2:	4659      	mov	r1, fp
 80061a4:	1e5f      	subs	r7, r3, #1
 80061a6:	2200      	movs	r2, #0
 80061a8:	4b88      	ldr	r3, [pc, #544]	; (80063cc <_dtoa_r+0x624>)
 80061aa:	f7fa faa5 	bl	80006f8 <__aeabi_dmul>
 80061ae:	9e02      	ldr	r6, [sp, #8]
 80061b0:	4682      	mov	sl, r0
 80061b2:	468b      	mov	fp, r1
 80061b4:	3501      	adds	r5, #1
 80061b6:	4628      	mov	r0, r5
 80061b8:	f7fa fa34 	bl	8000624 <__aeabi_i2d>
 80061bc:	4652      	mov	r2, sl
 80061be:	465b      	mov	r3, fp
 80061c0:	f7fa fa9a 	bl	80006f8 <__aeabi_dmul>
 80061c4:	4b82      	ldr	r3, [pc, #520]	; (80063d0 <_dtoa_r+0x628>)
 80061c6:	2200      	movs	r2, #0
 80061c8:	f7fa f8e0 	bl	800038c <__adddf3>
 80061cc:	46d0      	mov	r8, sl
 80061ce:	46d9      	mov	r9, fp
 80061d0:	4682      	mov	sl, r0
 80061d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80061d6:	2e00      	cmp	r6, #0
 80061d8:	d158      	bne.n	800628c <_dtoa_r+0x4e4>
 80061da:	4b7e      	ldr	r3, [pc, #504]	; (80063d4 <_dtoa_r+0x62c>)
 80061dc:	2200      	movs	r2, #0
 80061de:	4640      	mov	r0, r8
 80061e0:	4649      	mov	r1, r9
 80061e2:	f7fa f8d1 	bl	8000388 <__aeabi_dsub>
 80061e6:	4652      	mov	r2, sl
 80061e8:	465b      	mov	r3, fp
 80061ea:	4680      	mov	r8, r0
 80061ec:	4689      	mov	r9, r1
 80061ee:	f7fa fd13 	bl	8000c18 <__aeabi_dcmpgt>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	f040 8295 	bne.w	8006722 <_dtoa_r+0x97a>
 80061f8:	4652      	mov	r2, sl
 80061fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80061fe:	4640      	mov	r0, r8
 8006200:	4649      	mov	r1, r9
 8006202:	f7fa fceb 	bl	8000bdc <__aeabi_dcmplt>
 8006206:	2800      	cmp	r0, #0
 8006208:	f040 8289 	bne.w	800671e <_dtoa_r+0x976>
 800620c:	ec5b ab19 	vmov	sl, fp, d9
 8006210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006212:	2b00      	cmp	r3, #0
 8006214:	f2c0 8148 	blt.w	80064a8 <_dtoa_r+0x700>
 8006218:	9a00      	ldr	r2, [sp, #0]
 800621a:	2a0e      	cmp	r2, #14
 800621c:	f300 8144 	bgt.w	80064a8 <_dtoa_r+0x700>
 8006220:	4b67      	ldr	r3, [pc, #412]	; (80063c0 <_dtoa_r+0x618>)
 8006222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006226:	e9d3 8900 	ldrd	r8, r9, [r3]
 800622a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	f280 80d5 	bge.w	80063dc <_dtoa_r+0x634>
 8006232:	9b03      	ldr	r3, [sp, #12]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f300 80d1 	bgt.w	80063dc <_dtoa_r+0x634>
 800623a:	f040 826f 	bne.w	800671c <_dtoa_r+0x974>
 800623e:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <_dtoa_r+0x62c>)
 8006240:	2200      	movs	r2, #0
 8006242:	4640      	mov	r0, r8
 8006244:	4649      	mov	r1, r9
 8006246:	f7fa fa57 	bl	80006f8 <__aeabi_dmul>
 800624a:	4652      	mov	r2, sl
 800624c:	465b      	mov	r3, fp
 800624e:	f7fa fcd9 	bl	8000c04 <__aeabi_dcmpge>
 8006252:	9e03      	ldr	r6, [sp, #12]
 8006254:	4637      	mov	r7, r6
 8006256:	2800      	cmp	r0, #0
 8006258:	f040 8245 	bne.w	80066e6 <_dtoa_r+0x93e>
 800625c:	9d01      	ldr	r5, [sp, #4]
 800625e:	2331      	movs	r3, #49	; 0x31
 8006260:	f805 3b01 	strb.w	r3, [r5], #1
 8006264:	9b00      	ldr	r3, [sp, #0]
 8006266:	3301      	adds	r3, #1
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	e240      	b.n	80066ee <_dtoa_r+0x946>
 800626c:	07f2      	lsls	r2, r6, #31
 800626e:	d505      	bpl.n	800627c <_dtoa_r+0x4d4>
 8006270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006274:	f7fa fa40 	bl	80006f8 <__aeabi_dmul>
 8006278:	3501      	adds	r5, #1
 800627a:	2301      	movs	r3, #1
 800627c:	1076      	asrs	r6, r6, #1
 800627e:	3708      	adds	r7, #8
 8006280:	e777      	b.n	8006172 <_dtoa_r+0x3ca>
 8006282:	2502      	movs	r5, #2
 8006284:	e779      	b.n	800617a <_dtoa_r+0x3d2>
 8006286:	9f00      	ldr	r7, [sp, #0]
 8006288:	9e03      	ldr	r6, [sp, #12]
 800628a:	e794      	b.n	80061b6 <_dtoa_r+0x40e>
 800628c:	9901      	ldr	r1, [sp, #4]
 800628e:	4b4c      	ldr	r3, [pc, #304]	; (80063c0 <_dtoa_r+0x618>)
 8006290:	4431      	add	r1, r6
 8006292:	910d      	str	r1, [sp, #52]	; 0x34
 8006294:	9908      	ldr	r1, [sp, #32]
 8006296:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800629a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800629e:	2900      	cmp	r1, #0
 80062a0:	d043      	beq.n	800632a <_dtoa_r+0x582>
 80062a2:	494d      	ldr	r1, [pc, #308]	; (80063d8 <_dtoa_r+0x630>)
 80062a4:	2000      	movs	r0, #0
 80062a6:	f7fa fb51 	bl	800094c <__aeabi_ddiv>
 80062aa:	4652      	mov	r2, sl
 80062ac:	465b      	mov	r3, fp
 80062ae:	f7fa f86b 	bl	8000388 <__aeabi_dsub>
 80062b2:	9d01      	ldr	r5, [sp, #4]
 80062b4:	4682      	mov	sl, r0
 80062b6:	468b      	mov	fp, r1
 80062b8:	4649      	mov	r1, r9
 80062ba:	4640      	mov	r0, r8
 80062bc:	f7fa fccc 	bl	8000c58 <__aeabi_d2iz>
 80062c0:	4606      	mov	r6, r0
 80062c2:	f7fa f9af 	bl	8000624 <__aeabi_i2d>
 80062c6:	4602      	mov	r2, r0
 80062c8:	460b      	mov	r3, r1
 80062ca:	4640      	mov	r0, r8
 80062cc:	4649      	mov	r1, r9
 80062ce:	f7fa f85b 	bl	8000388 <__aeabi_dsub>
 80062d2:	3630      	adds	r6, #48	; 0x30
 80062d4:	f805 6b01 	strb.w	r6, [r5], #1
 80062d8:	4652      	mov	r2, sl
 80062da:	465b      	mov	r3, fp
 80062dc:	4680      	mov	r8, r0
 80062de:	4689      	mov	r9, r1
 80062e0:	f7fa fc7c 	bl	8000bdc <__aeabi_dcmplt>
 80062e4:	2800      	cmp	r0, #0
 80062e6:	d163      	bne.n	80063b0 <_dtoa_r+0x608>
 80062e8:	4642      	mov	r2, r8
 80062ea:	464b      	mov	r3, r9
 80062ec:	4936      	ldr	r1, [pc, #216]	; (80063c8 <_dtoa_r+0x620>)
 80062ee:	2000      	movs	r0, #0
 80062f0:	f7fa f84a 	bl	8000388 <__aeabi_dsub>
 80062f4:	4652      	mov	r2, sl
 80062f6:	465b      	mov	r3, fp
 80062f8:	f7fa fc70 	bl	8000bdc <__aeabi_dcmplt>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	f040 80b5 	bne.w	800646c <_dtoa_r+0x6c4>
 8006302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006304:	429d      	cmp	r5, r3
 8006306:	d081      	beq.n	800620c <_dtoa_r+0x464>
 8006308:	4b30      	ldr	r3, [pc, #192]	; (80063cc <_dtoa_r+0x624>)
 800630a:	2200      	movs	r2, #0
 800630c:	4650      	mov	r0, sl
 800630e:	4659      	mov	r1, fp
 8006310:	f7fa f9f2 	bl	80006f8 <__aeabi_dmul>
 8006314:	4b2d      	ldr	r3, [pc, #180]	; (80063cc <_dtoa_r+0x624>)
 8006316:	4682      	mov	sl, r0
 8006318:	468b      	mov	fp, r1
 800631a:	4640      	mov	r0, r8
 800631c:	4649      	mov	r1, r9
 800631e:	2200      	movs	r2, #0
 8006320:	f7fa f9ea 	bl	80006f8 <__aeabi_dmul>
 8006324:	4680      	mov	r8, r0
 8006326:	4689      	mov	r9, r1
 8006328:	e7c6      	b.n	80062b8 <_dtoa_r+0x510>
 800632a:	4650      	mov	r0, sl
 800632c:	4659      	mov	r1, fp
 800632e:	f7fa f9e3 	bl	80006f8 <__aeabi_dmul>
 8006332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006334:	9d01      	ldr	r5, [sp, #4]
 8006336:	930f      	str	r3, [sp, #60]	; 0x3c
 8006338:	4682      	mov	sl, r0
 800633a:	468b      	mov	fp, r1
 800633c:	4649      	mov	r1, r9
 800633e:	4640      	mov	r0, r8
 8006340:	f7fa fc8a 	bl	8000c58 <__aeabi_d2iz>
 8006344:	4606      	mov	r6, r0
 8006346:	f7fa f96d 	bl	8000624 <__aeabi_i2d>
 800634a:	3630      	adds	r6, #48	; 0x30
 800634c:	4602      	mov	r2, r0
 800634e:	460b      	mov	r3, r1
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa f818 	bl	8000388 <__aeabi_dsub>
 8006358:	f805 6b01 	strb.w	r6, [r5], #1
 800635c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800635e:	429d      	cmp	r5, r3
 8006360:	4680      	mov	r8, r0
 8006362:	4689      	mov	r9, r1
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	d124      	bne.n	80063b4 <_dtoa_r+0x60c>
 800636a:	4b1b      	ldr	r3, [pc, #108]	; (80063d8 <_dtoa_r+0x630>)
 800636c:	4650      	mov	r0, sl
 800636e:	4659      	mov	r1, fp
 8006370:	f7fa f80c 	bl	800038c <__adddf3>
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	4640      	mov	r0, r8
 800637a:	4649      	mov	r1, r9
 800637c:	f7fa fc4c 	bl	8000c18 <__aeabi_dcmpgt>
 8006380:	2800      	cmp	r0, #0
 8006382:	d173      	bne.n	800646c <_dtoa_r+0x6c4>
 8006384:	4652      	mov	r2, sl
 8006386:	465b      	mov	r3, fp
 8006388:	4913      	ldr	r1, [pc, #76]	; (80063d8 <_dtoa_r+0x630>)
 800638a:	2000      	movs	r0, #0
 800638c:	f7f9 fffc 	bl	8000388 <__aeabi_dsub>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4640      	mov	r0, r8
 8006396:	4649      	mov	r1, r9
 8006398:	f7fa fc20 	bl	8000bdc <__aeabi_dcmplt>
 800639c:	2800      	cmp	r0, #0
 800639e:	f43f af35 	beq.w	800620c <_dtoa_r+0x464>
 80063a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80063a4:	1e6b      	subs	r3, r5, #1
 80063a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80063a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80063ac:	2b30      	cmp	r3, #48	; 0x30
 80063ae:	d0f8      	beq.n	80063a2 <_dtoa_r+0x5fa>
 80063b0:	9700      	str	r7, [sp, #0]
 80063b2:	e049      	b.n	8006448 <_dtoa_r+0x6a0>
 80063b4:	4b05      	ldr	r3, [pc, #20]	; (80063cc <_dtoa_r+0x624>)
 80063b6:	f7fa f99f 	bl	80006f8 <__aeabi_dmul>
 80063ba:	4680      	mov	r8, r0
 80063bc:	4689      	mov	r9, r1
 80063be:	e7bd      	b.n	800633c <_dtoa_r+0x594>
 80063c0:	0800ca70 	.word	0x0800ca70
 80063c4:	0800ca48 	.word	0x0800ca48
 80063c8:	3ff00000 	.word	0x3ff00000
 80063cc:	40240000 	.word	0x40240000
 80063d0:	401c0000 	.word	0x401c0000
 80063d4:	40140000 	.word	0x40140000
 80063d8:	3fe00000 	.word	0x3fe00000
 80063dc:	9d01      	ldr	r5, [sp, #4]
 80063de:	4656      	mov	r6, sl
 80063e0:	465f      	mov	r7, fp
 80063e2:	4642      	mov	r2, r8
 80063e4:	464b      	mov	r3, r9
 80063e6:	4630      	mov	r0, r6
 80063e8:	4639      	mov	r1, r7
 80063ea:	f7fa faaf 	bl	800094c <__aeabi_ddiv>
 80063ee:	f7fa fc33 	bl	8000c58 <__aeabi_d2iz>
 80063f2:	4682      	mov	sl, r0
 80063f4:	f7fa f916 	bl	8000624 <__aeabi_i2d>
 80063f8:	4642      	mov	r2, r8
 80063fa:	464b      	mov	r3, r9
 80063fc:	f7fa f97c 	bl	80006f8 <__aeabi_dmul>
 8006400:	4602      	mov	r2, r0
 8006402:	460b      	mov	r3, r1
 8006404:	4630      	mov	r0, r6
 8006406:	4639      	mov	r1, r7
 8006408:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800640c:	f7f9 ffbc 	bl	8000388 <__aeabi_dsub>
 8006410:	f805 6b01 	strb.w	r6, [r5], #1
 8006414:	9e01      	ldr	r6, [sp, #4]
 8006416:	9f03      	ldr	r7, [sp, #12]
 8006418:	1bae      	subs	r6, r5, r6
 800641a:	42b7      	cmp	r7, r6
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	d135      	bne.n	800648e <_dtoa_r+0x6e6>
 8006422:	f7f9 ffb3 	bl	800038c <__adddf3>
 8006426:	4642      	mov	r2, r8
 8006428:	464b      	mov	r3, r9
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	f7fa fbf3 	bl	8000c18 <__aeabi_dcmpgt>
 8006432:	b9d0      	cbnz	r0, 800646a <_dtoa_r+0x6c2>
 8006434:	4642      	mov	r2, r8
 8006436:	464b      	mov	r3, r9
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7fa fbc4 	bl	8000bc8 <__aeabi_dcmpeq>
 8006440:	b110      	cbz	r0, 8006448 <_dtoa_r+0x6a0>
 8006442:	f01a 0f01 	tst.w	sl, #1
 8006446:	d110      	bne.n	800646a <_dtoa_r+0x6c2>
 8006448:	4620      	mov	r0, r4
 800644a:	ee18 1a10 	vmov	r1, s16
 800644e:	f000 fd05 	bl	8006e5c <_Bfree>
 8006452:	2300      	movs	r3, #0
 8006454:	9800      	ldr	r0, [sp, #0]
 8006456:	702b      	strb	r3, [r5, #0]
 8006458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800645a:	3001      	adds	r0, #1
 800645c:	6018      	str	r0, [r3, #0]
 800645e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006460:	2b00      	cmp	r3, #0
 8006462:	f43f acf1 	beq.w	8005e48 <_dtoa_r+0xa0>
 8006466:	601d      	str	r5, [r3, #0]
 8006468:	e4ee      	b.n	8005e48 <_dtoa_r+0xa0>
 800646a:	9f00      	ldr	r7, [sp, #0]
 800646c:	462b      	mov	r3, r5
 800646e:	461d      	mov	r5, r3
 8006470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006474:	2a39      	cmp	r2, #57	; 0x39
 8006476:	d106      	bne.n	8006486 <_dtoa_r+0x6de>
 8006478:	9a01      	ldr	r2, [sp, #4]
 800647a:	429a      	cmp	r2, r3
 800647c:	d1f7      	bne.n	800646e <_dtoa_r+0x6c6>
 800647e:	9901      	ldr	r1, [sp, #4]
 8006480:	2230      	movs	r2, #48	; 0x30
 8006482:	3701      	adds	r7, #1
 8006484:	700a      	strb	r2, [r1, #0]
 8006486:	781a      	ldrb	r2, [r3, #0]
 8006488:	3201      	adds	r2, #1
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	e790      	b.n	80063b0 <_dtoa_r+0x608>
 800648e:	4ba6      	ldr	r3, [pc, #664]	; (8006728 <_dtoa_r+0x980>)
 8006490:	2200      	movs	r2, #0
 8006492:	f7fa f931 	bl	80006f8 <__aeabi_dmul>
 8006496:	2200      	movs	r2, #0
 8006498:	2300      	movs	r3, #0
 800649a:	4606      	mov	r6, r0
 800649c:	460f      	mov	r7, r1
 800649e:	f7fa fb93 	bl	8000bc8 <__aeabi_dcmpeq>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	d09d      	beq.n	80063e2 <_dtoa_r+0x63a>
 80064a6:	e7cf      	b.n	8006448 <_dtoa_r+0x6a0>
 80064a8:	9a08      	ldr	r2, [sp, #32]
 80064aa:	2a00      	cmp	r2, #0
 80064ac:	f000 80d7 	beq.w	800665e <_dtoa_r+0x8b6>
 80064b0:	9a06      	ldr	r2, [sp, #24]
 80064b2:	2a01      	cmp	r2, #1
 80064b4:	f300 80ba 	bgt.w	800662c <_dtoa_r+0x884>
 80064b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	f000 80b2 	beq.w	8006624 <_dtoa_r+0x87c>
 80064c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80064c4:	9e07      	ldr	r6, [sp, #28]
 80064c6:	9d04      	ldr	r5, [sp, #16]
 80064c8:	9a04      	ldr	r2, [sp, #16]
 80064ca:	441a      	add	r2, r3
 80064cc:	9204      	str	r2, [sp, #16]
 80064ce:	9a05      	ldr	r2, [sp, #20]
 80064d0:	2101      	movs	r1, #1
 80064d2:	441a      	add	r2, r3
 80064d4:	4620      	mov	r0, r4
 80064d6:	9205      	str	r2, [sp, #20]
 80064d8:	f000 fd78 	bl	8006fcc <__i2b>
 80064dc:	4607      	mov	r7, r0
 80064de:	2d00      	cmp	r5, #0
 80064e0:	dd0c      	ble.n	80064fc <_dtoa_r+0x754>
 80064e2:	9b05      	ldr	r3, [sp, #20]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	dd09      	ble.n	80064fc <_dtoa_r+0x754>
 80064e8:	42ab      	cmp	r3, r5
 80064ea:	9a04      	ldr	r2, [sp, #16]
 80064ec:	bfa8      	it	ge
 80064ee:	462b      	movge	r3, r5
 80064f0:	1ad2      	subs	r2, r2, r3
 80064f2:	9204      	str	r2, [sp, #16]
 80064f4:	9a05      	ldr	r2, [sp, #20]
 80064f6:	1aed      	subs	r5, r5, r3
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	9305      	str	r3, [sp, #20]
 80064fc:	9b07      	ldr	r3, [sp, #28]
 80064fe:	b31b      	cbz	r3, 8006548 <_dtoa_r+0x7a0>
 8006500:	9b08      	ldr	r3, [sp, #32]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 80af 	beq.w	8006666 <_dtoa_r+0x8be>
 8006508:	2e00      	cmp	r6, #0
 800650a:	dd13      	ble.n	8006534 <_dtoa_r+0x78c>
 800650c:	4639      	mov	r1, r7
 800650e:	4632      	mov	r2, r6
 8006510:	4620      	mov	r0, r4
 8006512:	f000 fe1b 	bl	800714c <__pow5mult>
 8006516:	ee18 2a10 	vmov	r2, s16
 800651a:	4601      	mov	r1, r0
 800651c:	4607      	mov	r7, r0
 800651e:	4620      	mov	r0, r4
 8006520:	f000 fd6a 	bl	8006ff8 <__multiply>
 8006524:	ee18 1a10 	vmov	r1, s16
 8006528:	4680      	mov	r8, r0
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fc96 	bl	8006e5c <_Bfree>
 8006530:	ee08 8a10 	vmov	s16, r8
 8006534:	9b07      	ldr	r3, [sp, #28]
 8006536:	1b9a      	subs	r2, r3, r6
 8006538:	d006      	beq.n	8006548 <_dtoa_r+0x7a0>
 800653a:	ee18 1a10 	vmov	r1, s16
 800653e:	4620      	mov	r0, r4
 8006540:	f000 fe04 	bl	800714c <__pow5mult>
 8006544:	ee08 0a10 	vmov	s16, r0
 8006548:	2101      	movs	r1, #1
 800654a:	4620      	mov	r0, r4
 800654c:	f000 fd3e 	bl	8006fcc <__i2b>
 8006550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006552:	2b00      	cmp	r3, #0
 8006554:	4606      	mov	r6, r0
 8006556:	f340 8088 	ble.w	800666a <_dtoa_r+0x8c2>
 800655a:	461a      	mov	r2, r3
 800655c:	4601      	mov	r1, r0
 800655e:	4620      	mov	r0, r4
 8006560:	f000 fdf4 	bl	800714c <__pow5mult>
 8006564:	9b06      	ldr	r3, [sp, #24]
 8006566:	2b01      	cmp	r3, #1
 8006568:	4606      	mov	r6, r0
 800656a:	f340 8081 	ble.w	8006670 <_dtoa_r+0x8c8>
 800656e:	f04f 0800 	mov.w	r8, #0
 8006572:	6933      	ldr	r3, [r6, #16]
 8006574:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006578:	6918      	ldr	r0, [r3, #16]
 800657a:	f000 fcd7 	bl	8006f2c <__hi0bits>
 800657e:	f1c0 0020 	rsb	r0, r0, #32
 8006582:	9b05      	ldr	r3, [sp, #20]
 8006584:	4418      	add	r0, r3
 8006586:	f010 001f 	ands.w	r0, r0, #31
 800658a:	f000 8092 	beq.w	80066b2 <_dtoa_r+0x90a>
 800658e:	f1c0 0320 	rsb	r3, r0, #32
 8006592:	2b04      	cmp	r3, #4
 8006594:	f340 808a 	ble.w	80066ac <_dtoa_r+0x904>
 8006598:	f1c0 001c 	rsb	r0, r0, #28
 800659c:	9b04      	ldr	r3, [sp, #16]
 800659e:	4403      	add	r3, r0
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	9b05      	ldr	r3, [sp, #20]
 80065a4:	4403      	add	r3, r0
 80065a6:	4405      	add	r5, r0
 80065a8:	9305      	str	r3, [sp, #20]
 80065aa:	9b04      	ldr	r3, [sp, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	dd07      	ble.n	80065c0 <_dtoa_r+0x818>
 80065b0:	ee18 1a10 	vmov	r1, s16
 80065b4:	461a      	mov	r2, r3
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fe22 	bl	8007200 <__lshift>
 80065bc:	ee08 0a10 	vmov	s16, r0
 80065c0:	9b05      	ldr	r3, [sp, #20]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	dd05      	ble.n	80065d2 <_dtoa_r+0x82a>
 80065c6:	4631      	mov	r1, r6
 80065c8:	461a      	mov	r2, r3
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 fe18 	bl	8007200 <__lshift>
 80065d0:	4606      	mov	r6, r0
 80065d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d06e      	beq.n	80066b6 <_dtoa_r+0x90e>
 80065d8:	ee18 0a10 	vmov	r0, s16
 80065dc:	4631      	mov	r1, r6
 80065de:	f000 fe7f 	bl	80072e0 <__mcmp>
 80065e2:	2800      	cmp	r0, #0
 80065e4:	da67      	bge.n	80066b6 <_dtoa_r+0x90e>
 80065e6:	9b00      	ldr	r3, [sp, #0]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	ee18 1a10 	vmov	r1, s16
 80065ee:	9300      	str	r3, [sp, #0]
 80065f0:	220a      	movs	r2, #10
 80065f2:	2300      	movs	r3, #0
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fc53 	bl	8006ea0 <__multadd>
 80065fa:	9b08      	ldr	r3, [sp, #32]
 80065fc:	ee08 0a10 	vmov	s16, r0
 8006600:	2b00      	cmp	r3, #0
 8006602:	f000 81b1 	beq.w	8006968 <_dtoa_r+0xbc0>
 8006606:	2300      	movs	r3, #0
 8006608:	4639      	mov	r1, r7
 800660a:	220a      	movs	r2, #10
 800660c:	4620      	mov	r0, r4
 800660e:	f000 fc47 	bl	8006ea0 <__multadd>
 8006612:	9b02      	ldr	r3, [sp, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	4607      	mov	r7, r0
 8006618:	f300 808e 	bgt.w	8006738 <_dtoa_r+0x990>
 800661c:	9b06      	ldr	r3, [sp, #24]
 800661e:	2b02      	cmp	r3, #2
 8006620:	dc51      	bgt.n	80066c6 <_dtoa_r+0x91e>
 8006622:	e089      	b.n	8006738 <_dtoa_r+0x990>
 8006624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800662a:	e74b      	b.n	80064c4 <_dtoa_r+0x71c>
 800662c:	9b03      	ldr	r3, [sp, #12]
 800662e:	1e5e      	subs	r6, r3, #1
 8006630:	9b07      	ldr	r3, [sp, #28]
 8006632:	42b3      	cmp	r3, r6
 8006634:	bfbf      	itttt	lt
 8006636:	9b07      	ldrlt	r3, [sp, #28]
 8006638:	9607      	strlt	r6, [sp, #28]
 800663a:	1af2      	sublt	r2, r6, r3
 800663c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800663e:	bfb6      	itet	lt
 8006640:	189b      	addlt	r3, r3, r2
 8006642:	1b9e      	subge	r6, r3, r6
 8006644:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006646:	9b03      	ldr	r3, [sp, #12]
 8006648:	bfb8      	it	lt
 800664a:	2600      	movlt	r6, #0
 800664c:	2b00      	cmp	r3, #0
 800664e:	bfb7      	itett	lt
 8006650:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006654:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006658:	1a9d      	sublt	r5, r3, r2
 800665a:	2300      	movlt	r3, #0
 800665c:	e734      	b.n	80064c8 <_dtoa_r+0x720>
 800665e:	9e07      	ldr	r6, [sp, #28]
 8006660:	9d04      	ldr	r5, [sp, #16]
 8006662:	9f08      	ldr	r7, [sp, #32]
 8006664:	e73b      	b.n	80064de <_dtoa_r+0x736>
 8006666:	9a07      	ldr	r2, [sp, #28]
 8006668:	e767      	b.n	800653a <_dtoa_r+0x792>
 800666a:	9b06      	ldr	r3, [sp, #24]
 800666c:	2b01      	cmp	r3, #1
 800666e:	dc18      	bgt.n	80066a2 <_dtoa_r+0x8fa>
 8006670:	f1ba 0f00 	cmp.w	sl, #0
 8006674:	d115      	bne.n	80066a2 <_dtoa_r+0x8fa>
 8006676:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800667a:	b993      	cbnz	r3, 80066a2 <_dtoa_r+0x8fa>
 800667c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006680:	0d1b      	lsrs	r3, r3, #20
 8006682:	051b      	lsls	r3, r3, #20
 8006684:	b183      	cbz	r3, 80066a8 <_dtoa_r+0x900>
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	3301      	adds	r3, #1
 800668a:	9304      	str	r3, [sp, #16]
 800668c:	9b05      	ldr	r3, [sp, #20]
 800668e:	3301      	adds	r3, #1
 8006690:	9305      	str	r3, [sp, #20]
 8006692:	f04f 0801 	mov.w	r8, #1
 8006696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006698:	2b00      	cmp	r3, #0
 800669a:	f47f af6a 	bne.w	8006572 <_dtoa_r+0x7ca>
 800669e:	2001      	movs	r0, #1
 80066a0:	e76f      	b.n	8006582 <_dtoa_r+0x7da>
 80066a2:	f04f 0800 	mov.w	r8, #0
 80066a6:	e7f6      	b.n	8006696 <_dtoa_r+0x8ee>
 80066a8:	4698      	mov	r8, r3
 80066aa:	e7f4      	b.n	8006696 <_dtoa_r+0x8ee>
 80066ac:	f43f af7d 	beq.w	80065aa <_dtoa_r+0x802>
 80066b0:	4618      	mov	r0, r3
 80066b2:	301c      	adds	r0, #28
 80066b4:	e772      	b.n	800659c <_dtoa_r+0x7f4>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dc37      	bgt.n	800672c <_dtoa_r+0x984>
 80066bc:	9b06      	ldr	r3, [sp, #24]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	dd34      	ble.n	800672c <_dtoa_r+0x984>
 80066c2:	9b03      	ldr	r3, [sp, #12]
 80066c4:	9302      	str	r3, [sp, #8]
 80066c6:	9b02      	ldr	r3, [sp, #8]
 80066c8:	b96b      	cbnz	r3, 80066e6 <_dtoa_r+0x93e>
 80066ca:	4631      	mov	r1, r6
 80066cc:	2205      	movs	r2, #5
 80066ce:	4620      	mov	r0, r4
 80066d0:	f000 fbe6 	bl	8006ea0 <__multadd>
 80066d4:	4601      	mov	r1, r0
 80066d6:	4606      	mov	r6, r0
 80066d8:	ee18 0a10 	vmov	r0, s16
 80066dc:	f000 fe00 	bl	80072e0 <__mcmp>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	f73f adbb 	bgt.w	800625c <_dtoa_r+0x4b4>
 80066e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066e8:	9d01      	ldr	r5, [sp, #4]
 80066ea:	43db      	mvns	r3, r3
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	f04f 0800 	mov.w	r8, #0
 80066f2:	4631      	mov	r1, r6
 80066f4:	4620      	mov	r0, r4
 80066f6:	f000 fbb1 	bl	8006e5c <_Bfree>
 80066fa:	2f00      	cmp	r7, #0
 80066fc:	f43f aea4 	beq.w	8006448 <_dtoa_r+0x6a0>
 8006700:	f1b8 0f00 	cmp.w	r8, #0
 8006704:	d005      	beq.n	8006712 <_dtoa_r+0x96a>
 8006706:	45b8      	cmp	r8, r7
 8006708:	d003      	beq.n	8006712 <_dtoa_r+0x96a>
 800670a:	4641      	mov	r1, r8
 800670c:	4620      	mov	r0, r4
 800670e:	f000 fba5 	bl	8006e5c <_Bfree>
 8006712:	4639      	mov	r1, r7
 8006714:	4620      	mov	r0, r4
 8006716:	f000 fba1 	bl	8006e5c <_Bfree>
 800671a:	e695      	b.n	8006448 <_dtoa_r+0x6a0>
 800671c:	2600      	movs	r6, #0
 800671e:	4637      	mov	r7, r6
 8006720:	e7e1      	b.n	80066e6 <_dtoa_r+0x93e>
 8006722:	9700      	str	r7, [sp, #0]
 8006724:	4637      	mov	r7, r6
 8006726:	e599      	b.n	800625c <_dtoa_r+0x4b4>
 8006728:	40240000 	.word	0x40240000
 800672c:	9b08      	ldr	r3, [sp, #32]
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80ca 	beq.w	80068c8 <_dtoa_r+0xb20>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	9302      	str	r3, [sp, #8]
 8006738:	2d00      	cmp	r5, #0
 800673a:	dd05      	ble.n	8006748 <_dtoa_r+0x9a0>
 800673c:	4639      	mov	r1, r7
 800673e:	462a      	mov	r2, r5
 8006740:	4620      	mov	r0, r4
 8006742:	f000 fd5d 	bl	8007200 <__lshift>
 8006746:	4607      	mov	r7, r0
 8006748:	f1b8 0f00 	cmp.w	r8, #0
 800674c:	d05b      	beq.n	8006806 <_dtoa_r+0xa5e>
 800674e:	6879      	ldr	r1, [r7, #4]
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fb43 	bl	8006ddc <_Balloc>
 8006756:	4605      	mov	r5, r0
 8006758:	b928      	cbnz	r0, 8006766 <_dtoa_r+0x9be>
 800675a:	4b87      	ldr	r3, [pc, #540]	; (8006978 <_dtoa_r+0xbd0>)
 800675c:	4602      	mov	r2, r0
 800675e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006762:	f7ff bb3b 	b.w	8005ddc <_dtoa_r+0x34>
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	3202      	adds	r2, #2
 800676a:	0092      	lsls	r2, r2, #2
 800676c:	f107 010c 	add.w	r1, r7, #12
 8006770:	300c      	adds	r0, #12
 8006772:	f7fe fcd7 	bl	8005124 <memcpy>
 8006776:	2201      	movs	r2, #1
 8006778:	4629      	mov	r1, r5
 800677a:	4620      	mov	r0, r4
 800677c:	f000 fd40 	bl	8007200 <__lshift>
 8006780:	9b01      	ldr	r3, [sp, #4]
 8006782:	f103 0901 	add.w	r9, r3, #1
 8006786:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800678a:	4413      	add	r3, r2
 800678c:	9305      	str	r3, [sp, #20]
 800678e:	f00a 0301 	and.w	r3, sl, #1
 8006792:	46b8      	mov	r8, r7
 8006794:	9304      	str	r3, [sp, #16]
 8006796:	4607      	mov	r7, r0
 8006798:	4631      	mov	r1, r6
 800679a:	ee18 0a10 	vmov	r0, s16
 800679e:	f7ff fa77 	bl	8005c90 <quorem>
 80067a2:	4641      	mov	r1, r8
 80067a4:	9002      	str	r0, [sp, #8]
 80067a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80067aa:	ee18 0a10 	vmov	r0, s16
 80067ae:	f000 fd97 	bl	80072e0 <__mcmp>
 80067b2:	463a      	mov	r2, r7
 80067b4:	9003      	str	r0, [sp, #12]
 80067b6:	4631      	mov	r1, r6
 80067b8:	4620      	mov	r0, r4
 80067ba:	f000 fdad 	bl	8007318 <__mdiff>
 80067be:	68c2      	ldr	r2, [r0, #12]
 80067c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80067c4:	4605      	mov	r5, r0
 80067c6:	bb02      	cbnz	r2, 800680a <_dtoa_r+0xa62>
 80067c8:	4601      	mov	r1, r0
 80067ca:	ee18 0a10 	vmov	r0, s16
 80067ce:	f000 fd87 	bl	80072e0 <__mcmp>
 80067d2:	4602      	mov	r2, r0
 80067d4:	4629      	mov	r1, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	9207      	str	r2, [sp, #28]
 80067da:	f000 fb3f 	bl	8006e5c <_Bfree>
 80067de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80067e2:	ea43 0102 	orr.w	r1, r3, r2
 80067e6:	9b04      	ldr	r3, [sp, #16]
 80067e8:	430b      	orrs	r3, r1
 80067ea:	464d      	mov	r5, r9
 80067ec:	d10f      	bne.n	800680e <_dtoa_r+0xa66>
 80067ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80067f2:	d02a      	beq.n	800684a <_dtoa_r+0xaa2>
 80067f4:	9b03      	ldr	r3, [sp, #12]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	dd02      	ble.n	8006800 <_dtoa_r+0xa58>
 80067fa:	9b02      	ldr	r3, [sp, #8]
 80067fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006800:	f88b a000 	strb.w	sl, [fp]
 8006804:	e775      	b.n	80066f2 <_dtoa_r+0x94a>
 8006806:	4638      	mov	r0, r7
 8006808:	e7ba      	b.n	8006780 <_dtoa_r+0x9d8>
 800680a:	2201      	movs	r2, #1
 800680c:	e7e2      	b.n	80067d4 <_dtoa_r+0xa2c>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	db04      	blt.n	800681e <_dtoa_r+0xa76>
 8006814:	9906      	ldr	r1, [sp, #24]
 8006816:	430b      	orrs	r3, r1
 8006818:	9904      	ldr	r1, [sp, #16]
 800681a:	430b      	orrs	r3, r1
 800681c:	d122      	bne.n	8006864 <_dtoa_r+0xabc>
 800681e:	2a00      	cmp	r2, #0
 8006820:	ddee      	ble.n	8006800 <_dtoa_r+0xa58>
 8006822:	ee18 1a10 	vmov	r1, s16
 8006826:	2201      	movs	r2, #1
 8006828:	4620      	mov	r0, r4
 800682a:	f000 fce9 	bl	8007200 <__lshift>
 800682e:	4631      	mov	r1, r6
 8006830:	ee08 0a10 	vmov	s16, r0
 8006834:	f000 fd54 	bl	80072e0 <__mcmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	dc03      	bgt.n	8006844 <_dtoa_r+0xa9c>
 800683c:	d1e0      	bne.n	8006800 <_dtoa_r+0xa58>
 800683e:	f01a 0f01 	tst.w	sl, #1
 8006842:	d0dd      	beq.n	8006800 <_dtoa_r+0xa58>
 8006844:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006848:	d1d7      	bne.n	80067fa <_dtoa_r+0xa52>
 800684a:	2339      	movs	r3, #57	; 0x39
 800684c:	f88b 3000 	strb.w	r3, [fp]
 8006850:	462b      	mov	r3, r5
 8006852:	461d      	mov	r5, r3
 8006854:	3b01      	subs	r3, #1
 8006856:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800685a:	2a39      	cmp	r2, #57	; 0x39
 800685c:	d071      	beq.n	8006942 <_dtoa_r+0xb9a>
 800685e:	3201      	adds	r2, #1
 8006860:	701a      	strb	r2, [r3, #0]
 8006862:	e746      	b.n	80066f2 <_dtoa_r+0x94a>
 8006864:	2a00      	cmp	r2, #0
 8006866:	dd07      	ble.n	8006878 <_dtoa_r+0xad0>
 8006868:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800686c:	d0ed      	beq.n	800684a <_dtoa_r+0xaa2>
 800686e:	f10a 0301 	add.w	r3, sl, #1
 8006872:	f88b 3000 	strb.w	r3, [fp]
 8006876:	e73c      	b.n	80066f2 <_dtoa_r+0x94a>
 8006878:	9b05      	ldr	r3, [sp, #20]
 800687a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800687e:	4599      	cmp	r9, r3
 8006880:	d047      	beq.n	8006912 <_dtoa_r+0xb6a>
 8006882:	ee18 1a10 	vmov	r1, s16
 8006886:	2300      	movs	r3, #0
 8006888:	220a      	movs	r2, #10
 800688a:	4620      	mov	r0, r4
 800688c:	f000 fb08 	bl	8006ea0 <__multadd>
 8006890:	45b8      	cmp	r8, r7
 8006892:	ee08 0a10 	vmov	s16, r0
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	f04f 020a 	mov.w	r2, #10
 800689e:	4641      	mov	r1, r8
 80068a0:	4620      	mov	r0, r4
 80068a2:	d106      	bne.n	80068b2 <_dtoa_r+0xb0a>
 80068a4:	f000 fafc 	bl	8006ea0 <__multadd>
 80068a8:	4680      	mov	r8, r0
 80068aa:	4607      	mov	r7, r0
 80068ac:	f109 0901 	add.w	r9, r9, #1
 80068b0:	e772      	b.n	8006798 <_dtoa_r+0x9f0>
 80068b2:	f000 faf5 	bl	8006ea0 <__multadd>
 80068b6:	4639      	mov	r1, r7
 80068b8:	4680      	mov	r8, r0
 80068ba:	2300      	movs	r3, #0
 80068bc:	220a      	movs	r2, #10
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 faee 	bl	8006ea0 <__multadd>
 80068c4:	4607      	mov	r7, r0
 80068c6:	e7f1      	b.n	80068ac <_dtoa_r+0xb04>
 80068c8:	9b03      	ldr	r3, [sp, #12]
 80068ca:	9302      	str	r3, [sp, #8]
 80068cc:	9d01      	ldr	r5, [sp, #4]
 80068ce:	ee18 0a10 	vmov	r0, s16
 80068d2:	4631      	mov	r1, r6
 80068d4:	f7ff f9dc 	bl	8005c90 <quorem>
 80068d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80068dc:	9b01      	ldr	r3, [sp, #4]
 80068de:	f805 ab01 	strb.w	sl, [r5], #1
 80068e2:	1aea      	subs	r2, r5, r3
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	4293      	cmp	r3, r2
 80068e8:	dd09      	ble.n	80068fe <_dtoa_r+0xb56>
 80068ea:	ee18 1a10 	vmov	r1, s16
 80068ee:	2300      	movs	r3, #0
 80068f0:	220a      	movs	r2, #10
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 fad4 	bl	8006ea0 <__multadd>
 80068f8:	ee08 0a10 	vmov	s16, r0
 80068fc:	e7e7      	b.n	80068ce <_dtoa_r+0xb26>
 80068fe:	9b02      	ldr	r3, [sp, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	bfc8      	it	gt
 8006904:	461d      	movgt	r5, r3
 8006906:	9b01      	ldr	r3, [sp, #4]
 8006908:	bfd8      	it	le
 800690a:	2501      	movle	r5, #1
 800690c:	441d      	add	r5, r3
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	ee18 1a10 	vmov	r1, s16
 8006916:	2201      	movs	r2, #1
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fc71 	bl	8007200 <__lshift>
 800691e:	4631      	mov	r1, r6
 8006920:	ee08 0a10 	vmov	s16, r0
 8006924:	f000 fcdc 	bl	80072e0 <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	dc91      	bgt.n	8006850 <_dtoa_r+0xaa8>
 800692c:	d102      	bne.n	8006934 <_dtoa_r+0xb8c>
 800692e:	f01a 0f01 	tst.w	sl, #1
 8006932:	d18d      	bne.n	8006850 <_dtoa_r+0xaa8>
 8006934:	462b      	mov	r3, r5
 8006936:	461d      	mov	r5, r3
 8006938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800693c:	2a30      	cmp	r2, #48	; 0x30
 800693e:	d0fa      	beq.n	8006936 <_dtoa_r+0xb8e>
 8006940:	e6d7      	b.n	80066f2 <_dtoa_r+0x94a>
 8006942:	9a01      	ldr	r2, [sp, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d184      	bne.n	8006852 <_dtoa_r+0xaaa>
 8006948:	9b00      	ldr	r3, [sp, #0]
 800694a:	3301      	adds	r3, #1
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	2331      	movs	r3, #49	; 0x31
 8006950:	7013      	strb	r3, [r2, #0]
 8006952:	e6ce      	b.n	80066f2 <_dtoa_r+0x94a>
 8006954:	4b09      	ldr	r3, [pc, #36]	; (800697c <_dtoa_r+0xbd4>)
 8006956:	f7ff ba95 	b.w	8005e84 <_dtoa_r+0xdc>
 800695a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800695c:	2b00      	cmp	r3, #0
 800695e:	f47f aa6e 	bne.w	8005e3e <_dtoa_r+0x96>
 8006962:	4b07      	ldr	r3, [pc, #28]	; (8006980 <_dtoa_r+0xbd8>)
 8006964:	f7ff ba8e 	b.w	8005e84 <_dtoa_r+0xdc>
 8006968:	9b02      	ldr	r3, [sp, #8]
 800696a:	2b00      	cmp	r3, #0
 800696c:	dcae      	bgt.n	80068cc <_dtoa_r+0xb24>
 800696e:	9b06      	ldr	r3, [sp, #24]
 8006970:	2b02      	cmp	r3, #2
 8006972:	f73f aea8 	bgt.w	80066c6 <_dtoa_r+0x91e>
 8006976:	e7a9      	b.n	80068cc <_dtoa_r+0xb24>
 8006978:	0800c977 	.word	0x0800c977
 800697c:	0800c8d4 	.word	0x0800c8d4
 8006980:	0800c8f8 	.word	0x0800c8f8

08006984 <__sflush_r>:
 8006984:	898a      	ldrh	r2, [r1, #12]
 8006986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800698a:	4605      	mov	r5, r0
 800698c:	0710      	lsls	r0, r2, #28
 800698e:	460c      	mov	r4, r1
 8006990:	d458      	bmi.n	8006a44 <__sflush_r+0xc0>
 8006992:	684b      	ldr	r3, [r1, #4]
 8006994:	2b00      	cmp	r3, #0
 8006996:	dc05      	bgt.n	80069a4 <__sflush_r+0x20>
 8006998:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	dc02      	bgt.n	80069a4 <__sflush_r+0x20>
 800699e:	2000      	movs	r0, #0
 80069a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	d0f9      	beq.n	800699e <__sflush_r+0x1a>
 80069aa:	2300      	movs	r3, #0
 80069ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069b0:	682f      	ldr	r7, [r5, #0]
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	d032      	beq.n	8006a1c <__sflush_r+0x98>
 80069b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069b8:	89a3      	ldrh	r3, [r4, #12]
 80069ba:	075a      	lsls	r2, r3, #29
 80069bc:	d505      	bpl.n	80069ca <__sflush_r+0x46>
 80069be:	6863      	ldr	r3, [r4, #4]
 80069c0:	1ac0      	subs	r0, r0, r3
 80069c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069c4:	b10b      	cbz	r3, 80069ca <__sflush_r+0x46>
 80069c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069c8:	1ac0      	subs	r0, r0, r3
 80069ca:	2300      	movs	r3, #0
 80069cc:	4602      	mov	r2, r0
 80069ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069d0:	6a21      	ldr	r1, [r4, #32]
 80069d2:	4628      	mov	r0, r5
 80069d4:	47b0      	blx	r6
 80069d6:	1c43      	adds	r3, r0, #1
 80069d8:	89a3      	ldrh	r3, [r4, #12]
 80069da:	d106      	bne.n	80069ea <__sflush_r+0x66>
 80069dc:	6829      	ldr	r1, [r5, #0]
 80069de:	291d      	cmp	r1, #29
 80069e0:	d82c      	bhi.n	8006a3c <__sflush_r+0xb8>
 80069e2:	4a2a      	ldr	r2, [pc, #168]	; (8006a8c <__sflush_r+0x108>)
 80069e4:	40ca      	lsrs	r2, r1
 80069e6:	07d6      	lsls	r6, r2, #31
 80069e8:	d528      	bpl.n	8006a3c <__sflush_r+0xb8>
 80069ea:	2200      	movs	r2, #0
 80069ec:	6062      	str	r2, [r4, #4]
 80069ee:	04d9      	lsls	r1, r3, #19
 80069f0:	6922      	ldr	r2, [r4, #16]
 80069f2:	6022      	str	r2, [r4, #0]
 80069f4:	d504      	bpl.n	8006a00 <__sflush_r+0x7c>
 80069f6:	1c42      	adds	r2, r0, #1
 80069f8:	d101      	bne.n	80069fe <__sflush_r+0x7a>
 80069fa:	682b      	ldr	r3, [r5, #0]
 80069fc:	b903      	cbnz	r3, 8006a00 <__sflush_r+0x7c>
 80069fe:	6560      	str	r0, [r4, #84]	; 0x54
 8006a00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a02:	602f      	str	r7, [r5, #0]
 8006a04:	2900      	cmp	r1, #0
 8006a06:	d0ca      	beq.n	800699e <__sflush_r+0x1a>
 8006a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a0c:	4299      	cmp	r1, r3
 8006a0e:	d002      	beq.n	8006a16 <__sflush_r+0x92>
 8006a10:	4628      	mov	r0, r5
 8006a12:	f000 fd7d 	bl	8007510 <_free_r>
 8006a16:	2000      	movs	r0, #0
 8006a18:	6360      	str	r0, [r4, #52]	; 0x34
 8006a1a:	e7c1      	b.n	80069a0 <__sflush_r+0x1c>
 8006a1c:	6a21      	ldr	r1, [r4, #32]
 8006a1e:	2301      	movs	r3, #1
 8006a20:	4628      	mov	r0, r5
 8006a22:	47b0      	blx	r6
 8006a24:	1c41      	adds	r1, r0, #1
 8006a26:	d1c7      	bne.n	80069b8 <__sflush_r+0x34>
 8006a28:	682b      	ldr	r3, [r5, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0c4      	beq.n	80069b8 <__sflush_r+0x34>
 8006a2e:	2b1d      	cmp	r3, #29
 8006a30:	d001      	beq.n	8006a36 <__sflush_r+0xb2>
 8006a32:	2b16      	cmp	r3, #22
 8006a34:	d101      	bne.n	8006a3a <__sflush_r+0xb6>
 8006a36:	602f      	str	r7, [r5, #0]
 8006a38:	e7b1      	b.n	800699e <__sflush_r+0x1a>
 8006a3a:	89a3      	ldrh	r3, [r4, #12]
 8006a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a40:	81a3      	strh	r3, [r4, #12]
 8006a42:	e7ad      	b.n	80069a0 <__sflush_r+0x1c>
 8006a44:	690f      	ldr	r7, [r1, #16]
 8006a46:	2f00      	cmp	r7, #0
 8006a48:	d0a9      	beq.n	800699e <__sflush_r+0x1a>
 8006a4a:	0793      	lsls	r3, r2, #30
 8006a4c:	680e      	ldr	r6, [r1, #0]
 8006a4e:	bf08      	it	eq
 8006a50:	694b      	ldreq	r3, [r1, #20]
 8006a52:	600f      	str	r7, [r1, #0]
 8006a54:	bf18      	it	ne
 8006a56:	2300      	movne	r3, #0
 8006a58:	eba6 0807 	sub.w	r8, r6, r7
 8006a5c:	608b      	str	r3, [r1, #8]
 8006a5e:	f1b8 0f00 	cmp.w	r8, #0
 8006a62:	dd9c      	ble.n	800699e <__sflush_r+0x1a>
 8006a64:	6a21      	ldr	r1, [r4, #32]
 8006a66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a68:	4643      	mov	r3, r8
 8006a6a:	463a      	mov	r2, r7
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b0      	blx	r6
 8006a70:	2800      	cmp	r0, #0
 8006a72:	dc06      	bgt.n	8006a82 <__sflush_r+0xfe>
 8006a74:	89a3      	ldrh	r3, [r4, #12]
 8006a76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a7a:	81a3      	strh	r3, [r4, #12]
 8006a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a80:	e78e      	b.n	80069a0 <__sflush_r+0x1c>
 8006a82:	4407      	add	r7, r0
 8006a84:	eba8 0800 	sub.w	r8, r8, r0
 8006a88:	e7e9      	b.n	8006a5e <__sflush_r+0xda>
 8006a8a:	bf00      	nop
 8006a8c:	20400001 	.word	0x20400001

08006a90 <_fflush_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	690b      	ldr	r3, [r1, #16]
 8006a94:	4605      	mov	r5, r0
 8006a96:	460c      	mov	r4, r1
 8006a98:	b913      	cbnz	r3, 8006aa0 <_fflush_r+0x10>
 8006a9a:	2500      	movs	r5, #0
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
 8006aa0:	b118      	cbz	r0, 8006aaa <_fflush_r+0x1a>
 8006aa2:	6983      	ldr	r3, [r0, #24]
 8006aa4:	b90b      	cbnz	r3, 8006aaa <_fflush_r+0x1a>
 8006aa6:	f000 f887 	bl	8006bb8 <__sinit>
 8006aaa:	4b14      	ldr	r3, [pc, #80]	; (8006afc <_fflush_r+0x6c>)
 8006aac:	429c      	cmp	r4, r3
 8006aae:	d11b      	bne.n	8006ae8 <_fflush_r+0x58>
 8006ab0:	686c      	ldr	r4, [r5, #4]
 8006ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0ef      	beq.n	8006a9a <_fflush_r+0xa>
 8006aba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006abc:	07d0      	lsls	r0, r2, #31
 8006abe:	d404      	bmi.n	8006aca <_fflush_r+0x3a>
 8006ac0:	0599      	lsls	r1, r3, #22
 8006ac2:	d402      	bmi.n	8006aca <_fflush_r+0x3a>
 8006ac4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ac6:	f000 f91a 	bl	8006cfe <__retarget_lock_acquire_recursive>
 8006aca:	4628      	mov	r0, r5
 8006acc:	4621      	mov	r1, r4
 8006ace:	f7ff ff59 	bl	8006984 <__sflush_r>
 8006ad2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ad4:	07da      	lsls	r2, r3, #31
 8006ad6:	4605      	mov	r5, r0
 8006ad8:	d4e0      	bmi.n	8006a9c <_fflush_r+0xc>
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	059b      	lsls	r3, r3, #22
 8006ade:	d4dd      	bmi.n	8006a9c <_fflush_r+0xc>
 8006ae0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ae2:	f000 f90d 	bl	8006d00 <__retarget_lock_release_recursive>
 8006ae6:	e7d9      	b.n	8006a9c <_fflush_r+0xc>
 8006ae8:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <_fflush_r+0x70>)
 8006aea:	429c      	cmp	r4, r3
 8006aec:	d101      	bne.n	8006af2 <_fflush_r+0x62>
 8006aee:	68ac      	ldr	r4, [r5, #8]
 8006af0:	e7df      	b.n	8006ab2 <_fflush_r+0x22>
 8006af2:	4b04      	ldr	r3, [pc, #16]	; (8006b04 <_fflush_r+0x74>)
 8006af4:	429c      	cmp	r4, r3
 8006af6:	bf08      	it	eq
 8006af8:	68ec      	ldreq	r4, [r5, #12]
 8006afa:	e7da      	b.n	8006ab2 <_fflush_r+0x22>
 8006afc:	0800c9a8 	.word	0x0800c9a8
 8006b00:	0800c9c8 	.word	0x0800c9c8
 8006b04:	0800c988 	.word	0x0800c988

08006b08 <std>:
 8006b08:	2300      	movs	r3, #0
 8006b0a:	b510      	push	{r4, lr}
 8006b0c:	4604      	mov	r4, r0
 8006b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8006b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b16:	6083      	str	r3, [r0, #8]
 8006b18:	8181      	strh	r1, [r0, #12]
 8006b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8006b1c:	81c2      	strh	r2, [r0, #14]
 8006b1e:	6183      	str	r3, [r0, #24]
 8006b20:	4619      	mov	r1, r3
 8006b22:	2208      	movs	r2, #8
 8006b24:	305c      	adds	r0, #92	; 0x5c
 8006b26:	f7fe fb0b 	bl	8005140 <memset>
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <std+0x38>)
 8006b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8006b2e:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <std+0x3c>)
 8006b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8006b32:	4b05      	ldr	r3, [pc, #20]	; (8006b48 <std+0x40>)
 8006b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006b36:	4b05      	ldr	r3, [pc, #20]	; (8006b4c <std+0x44>)
 8006b38:	6224      	str	r4, [r4, #32]
 8006b3a:	6323      	str	r3, [r4, #48]	; 0x30
 8006b3c:	bd10      	pop	{r4, pc}
 8006b3e:	bf00      	nop
 8006b40:	080076f1 	.word	0x080076f1
 8006b44:	08007713 	.word	0x08007713
 8006b48:	0800774b 	.word	0x0800774b
 8006b4c:	0800776f 	.word	0x0800776f

08006b50 <_cleanup_r>:
 8006b50:	4901      	ldr	r1, [pc, #4]	; (8006b58 <_cleanup_r+0x8>)
 8006b52:	f000 b8af 	b.w	8006cb4 <_fwalk_reent>
 8006b56:	bf00      	nop
 8006b58:	08006a91 	.word	0x08006a91

08006b5c <__sfmoreglue>:
 8006b5c:	b570      	push	{r4, r5, r6, lr}
 8006b5e:	2268      	movs	r2, #104	; 0x68
 8006b60:	1e4d      	subs	r5, r1, #1
 8006b62:	4355      	muls	r5, r2
 8006b64:	460e      	mov	r6, r1
 8006b66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b6a:	f000 fd3d 	bl	80075e8 <_malloc_r>
 8006b6e:	4604      	mov	r4, r0
 8006b70:	b140      	cbz	r0, 8006b84 <__sfmoreglue+0x28>
 8006b72:	2100      	movs	r1, #0
 8006b74:	e9c0 1600 	strd	r1, r6, [r0]
 8006b78:	300c      	adds	r0, #12
 8006b7a:	60a0      	str	r0, [r4, #8]
 8006b7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b80:	f7fe fade 	bl	8005140 <memset>
 8006b84:	4620      	mov	r0, r4
 8006b86:	bd70      	pop	{r4, r5, r6, pc}

08006b88 <__sfp_lock_acquire>:
 8006b88:	4801      	ldr	r0, [pc, #4]	; (8006b90 <__sfp_lock_acquire+0x8>)
 8006b8a:	f000 b8b8 	b.w	8006cfe <__retarget_lock_acquire_recursive>
 8006b8e:	bf00      	nop
 8006b90:	20007941 	.word	0x20007941

08006b94 <__sfp_lock_release>:
 8006b94:	4801      	ldr	r0, [pc, #4]	; (8006b9c <__sfp_lock_release+0x8>)
 8006b96:	f000 b8b3 	b.w	8006d00 <__retarget_lock_release_recursive>
 8006b9a:	bf00      	nop
 8006b9c:	20007941 	.word	0x20007941

08006ba0 <__sinit_lock_acquire>:
 8006ba0:	4801      	ldr	r0, [pc, #4]	; (8006ba8 <__sinit_lock_acquire+0x8>)
 8006ba2:	f000 b8ac 	b.w	8006cfe <__retarget_lock_acquire_recursive>
 8006ba6:	bf00      	nop
 8006ba8:	20007942 	.word	0x20007942

08006bac <__sinit_lock_release>:
 8006bac:	4801      	ldr	r0, [pc, #4]	; (8006bb4 <__sinit_lock_release+0x8>)
 8006bae:	f000 b8a7 	b.w	8006d00 <__retarget_lock_release_recursive>
 8006bb2:	bf00      	nop
 8006bb4:	20007942 	.word	0x20007942

08006bb8 <__sinit>:
 8006bb8:	b510      	push	{r4, lr}
 8006bba:	4604      	mov	r4, r0
 8006bbc:	f7ff fff0 	bl	8006ba0 <__sinit_lock_acquire>
 8006bc0:	69a3      	ldr	r3, [r4, #24]
 8006bc2:	b11b      	cbz	r3, 8006bcc <__sinit+0x14>
 8006bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc8:	f7ff bff0 	b.w	8006bac <__sinit_lock_release>
 8006bcc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006bd0:	6523      	str	r3, [r4, #80]	; 0x50
 8006bd2:	4b13      	ldr	r3, [pc, #76]	; (8006c20 <__sinit+0x68>)
 8006bd4:	4a13      	ldr	r2, [pc, #76]	; (8006c24 <__sinit+0x6c>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	bf04      	itt	eq
 8006bde:	2301      	moveq	r3, #1
 8006be0:	61a3      	streq	r3, [r4, #24]
 8006be2:	4620      	mov	r0, r4
 8006be4:	f000 f820 	bl	8006c28 <__sfp>
 8006be8:	6060      	str	r0, [r4, #4]
 8006bea:	4620      	mov	r0, r4
 8006bec:	f000 f81c 	bl	8006c28 <__sfp>
 8006bf0:	60a0      	str	r0, [r4, #8]
 8006bf2:	4620      	mov	r0, r4
 8006bf4:	f000 f818 	bl	8006c28 <__sfp>
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	60e0      	str	r0, [r4, #12]
 8006bfc:	2104      	movs	r1, #4
 8006bfe:	6860      	ldr	r0, [r4, #4]
 8006c00:	f7ff ff82 	bl	8006b08 <std>
 8006c04:	68a0      	ldr	r0, [r4, #8]
 8006c06:	2201      	movs	r2, #1
 8006c08:	2109      	movs	r1, #9
 8006c0a:	f7ff ff7d 	bl	8006b08 <std>
 8006c0e:	68e0      	ldr	r0, [r4, #12]
 8006c10:	2202      	movs	r2, #2
 8006c12:	2112      	movs	r1, #18
 8006c14:	f7ff ff78 	bl	8006b08 <std>
 8006c18:	2301      	movs	r3, #1
 8006c1a:	61a3      	str	r3, [r4, #24]
 8006c1c:	e7d2      	b.n	8006bc4 <__sinit+0xc>
 8006c1e:	bf00      	nop
 8006c20:	0800c8c0 	.word	0x0800c8c0
 8006c24:	08006b51 	.word	0x08006b51

08006c28 <__sfp>:
 8006c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2a:	4607      	mov	r7, r0
 8006c2c:	f7ff ffac 	bl	8006b88 <__sfp_lock_acquire>
 8006c30:	4b1e      	ldr	r3, [pc, #120]	; (8006cac <__sfp+0x84>)
 8006c32:	681e      	ldr	r6, [r3, #0]
 8006c34:	69b3      	ldr	r3, [r6, #24]
 8006c36:	b913      	cbnz	r3, 8006c3e <__sfp+0x16>
 8006c38:	4630      	mov	r0, r6
 8006c3a:	f7ff ffbd 	bl	8006bb8 <__sinit>
 8006c3e:	3648      	adds	r6, #72	; 0x48
 8006c40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c44:	3b01      	subs	r3, #1
 8006c46:	d503      	bpl.n	8006c50 <__sfp+0x28>
 8006c48:	6833      	ldr	r3, [r6, #0]
 8006c4a:	b30b      	cbz	r3, 8006c90 <__sfp+0x68>
 8006c4c:	6836      	ldr	r6, [r6, #0]
 8006c4e:	e7f7      	b.n	8006c40 <__sfp+0x18>
 8006c50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c54:	b9d5      	cbnz	r5, 8006c8c <__sfp+0x64>
 8006c56:	4b16      	ldr	r3, [pc, #88]	; (8006cb0 <__sfp+0x88>)
 8006c58:	60e3      	str	r3, [r4, #12]
 8006c5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c5e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c60:	f000 f84c 	bl	8006cfc <__retarget_lock_init_recursive>
 8006c64:	f7ff ff96 	bl	8006b94 <__sfp_lock_release>
 8006c68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c70:	6025      	str	r5, [r4, #0]
 8006c72:	61a5      	str	r5, [r4, #24]
 8006c74:	2208      	movs	r2, #8
 8006c76:	4629      	mov	r1, r5
 8006c78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c7c:	f7fe fa60 	bl	8005140 <memset>
 8006c80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c88:	4620      	mov	r0, r4
 8006c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c8c:	3468      	adds	r4, #104	; 0x68
 8006c8e:	e7d9      	b.n	8006c44 <__sfp+0x1c>
 8006c90:	2104      	movs	r1, #4
 8006c92:	4638      	mov	r0, r7
 8006c94:	f7ff ff62 	bl	8006b5c <__sfmoreglue>
 8006c98:	4604      	mov	r4, r0
 8006c9a:	6030      	str	r0, [r6, #0]
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d1d5      	bne.n	8006c4c <__sfp+0x24>
 8006ca0:	f7ff ff78 	bl	8006b94 <__sfp_lock_release>
 8006ca4:	230c      	movs	r3, #12
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	e7ee      	b.n	8006c88 <__sfp+0x60>
 8006caa:	bf00      	nop
 8006cac:	0800c8c0 	.word	0x0800c8c0
 8006cb0:	ffff0001 	.word	0xffff0001

08006cb4 <_fwalk_reent>:
 8006cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cb8:	4606      	mov	r6, r0
 8006cba:	4688      	mov	r8, r1
 8006cbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006cc0:	2700      	movs	r7, #0
 8006cc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006cc6:	f1b9 0901 	subs.w	r9, r9, #1
 8006cca:	d505      	bpl.n	8006cd8 <_fwalk_reent+0x24>
 8006ccc:	6824      	ldr	r4, [r4, #0]
 8006cce:	2c00      	cmp	r4, #0
 8006cd0:	d1f7      	bne.n	8006cc2 <_fwalk_reent+0xe>
 8006cd2:	4638      	mov	r0, r7
 8006cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cd8:	89ab      	ldrh	r3, [r5, #12]
 8006cda:	2b01      	cmp	r3, #1
 8006cdc:	d907      	bls.n	8006cee <_fwalk_reent+0x3a>
 8006cde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	d003      	beq.n	8006cee <_fwalk_reent+0x3a>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4630      	mov	r0, r6
 8006cea:	47c0      	blx	r8
 8006cec:	4307      	orrs	r7, r0
 8006cee:	3568      	adds	r5, #104	; 0x68
 8006cf0:	e7e9      	b.n	8006cc6 <_fwalk_reent+0x12>
	...

08006cf4 <_localeconv_r>:
 8006cf4:	4800      	ldr	r0, [pc, #0]	; (8006cf8 <_localeconv_r+0x4>)
 8006cf6:	4770      	bx	lr
 8006cf8:	20000168 	.word	0x20000168

08006cfc <__retarget_lock_init_recursive>:
 8006cfc:	4770      	bx	lr

08006cfe <__retarget_lock_acquire_recursive>:
 8006cfe:	4770      	bx	lr

08006d00 <__retarget_lock_release_recursive>:
 8006d00:	4770      	bx	lr

08006d02 <__swhatbuf_r>:
 8006d02:	b570      	push	{r4, r5, r6, lr}
 8006d04:	460e      	mov	r6, r1
 8006d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d0a:	2900      	cmp	r1, #0
 8006d0c:	b096      	sub	sp, #88	; 0x58
 8006d0e:	4614      	mov	r4, r2
 8006d10:	461d      	mov	r5, r3
 8006d12:	da08      	bge.n	8006d26 <__swhatbuf_r+0x24>
 8006d14:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	602a      	str	r2, [r5, #0]
 8006d1c:	061a      	lsls	r2, r3, #24
 8006d1e:	d410      	bmi.n	8006d42 <__swhatbuf_r+0x40>
 8006d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d24:	e00e      	b.n	8006d44 <__swhatbuf_r+0x42>
 8006d26:	466a      	mov	r2, sp
 8006d28:	f000 fd78 	bl	800781c <_fstat_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	dbf1      	blt.n	8006d14 <__swhatbuf_r+0x12>
 8006d30:	9a01      	ldr	r2, [sp, #4]
 8006d32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006d36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006d3a:	425a      	negs	r2, r3
 8006d3c:	415a      	adcs	r2, r3
 8006d3e:	602a      	str	r2, [r5, #0]
 8006d40:	e7ee      	b.n	8006d20 <__swhatbuf_r+0x1e>
 8006d42:	2340      	movs	r3, #64	; 0x40
 8006d44:	2000      	movs	r0, #0
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	b016      	add	sp, #88	; 0x58
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}

08006d4c <__smakebuf_r>:
 8006d4c:	898b      	ldrh	r3, [r1, #12]
 8006d4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d50:	079d      	lsls	r5, r3, #30
 8006d52:	4606      	mov	r6, r0
 8006d54:	460c      	mov	r4, r1
 8006d56:	d507      	bpl.n	8006d68 <__smakebuf_r+0x1c>
 8006d58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	6123      	str	r3, [r4, #16]
 8006d60:	2301      	movs	r3, #1
 8006d62:	6163      	str	r3, [r4, #20]
 8006d64:	b002      	add	sp, #8
 8006d66:	bd70      	pop	{r4, r5, r6, pc}
 8006d68:	ab01      	add	r3, sp, #4
 8006d6a:	466a      	mov	r2, sp
 8006d6c:	f7ff ffc9 	bl	8006d02 <__swhatbuf_r>
 8006d70:	9900      	ldr	r1, [sp, #0]
 8006d72:	4605      	mov	r5, r0
 8006d74:	4630      	mov	r0, r6
 8006d76:	f000 fc37 	bl	80075e8 <_malloc_r>
 8006d7a:	b948      	cbnz	r0, 8006d90 <__smakebuf_r+0x44>
 8006d7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d80:	059a      	lsls	r2, r3, #22
 8006d82:	d4ef      	bmi.n	8006d64 <__smakebuf_r+0x18>
 8006d84:	f023 0303 	bic.w	r3, r3, #3
 8006d88:	f043 0302 	orr.w	r3, r3, #2
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	e7e3      	b.n	8006d58 <__smakebuf_r+0xc>
 8006d90:	4b0d      	ldr	r3, [pc, #52]	; (8006dc8 <__smakebuf_r+0x7c>)
 8006d92:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	6020      	str	r0, [r4, #0]
 8006d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d9c:	81a3      	strh	r3, [r4, #12]
 8006d9e:	9b00      	ldr	r3, [sp, #0]
 8006da0:	6163      	str	r3, [r4, #20]
 8006da2:	9b01      	ldr	r3, [sp, #4]
 8006da4:	6120      	str	r0, [r4, #16]
 8006da6:	b15b      	cbz	r3, 8006dc0 <__smakebuf_r+0x74>
 8006da8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dac:	4630      	mov	r0, r6
 8006dae:	f000 fd47 	bl	8007840 <_isatty_r>
 8006db2:	b128      	cbz	r0, 8006dc0 <__smakebuf_r+0x74>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f023 0303 	bic.w	r3, r3, #3
 8006dba:	f043 0301 	orr.w	r3, r3, #1
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	89a0      	ldrh	r0, [r4, #12]
 8006dc2:	4305      	orrs	r5, r0
 8006dc4:	81a5      	strh	r5, [r4, #12]
 8006dc6:	e7cd      	b.n	8006d64 <__smakebuf_r+0x18>
 8006dc8:	08006b51 	.word	0x08006b51

08006dcc <malloc>:
 8006dcc:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <malloc+0xc>)
 8006dce:	4601      	mov	r1, r0
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	f000 bc09 	b.w	80075e8 <_malloc_r>
 8006dd6:	bf00      	nop
 8006dd8:	20000014 	.word	0x20000014

08006ddc <_Balloc>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006de0:	4604      	mov	r4, r0
 8006de2:	460d      	mov	r5, r1
 8006de4:	b976      	cbnz	r6, 8006e04 <_Balloc+0x28>
 8006de6:	2010      	movs	r0, #16
 8006de8:	f7ff fff0 	bl	8006dcc <malloc>
 8006dec:	4602      	mov	r2, r0
 8006dee:	6260      	str	r0, [r4, #36]	; 0x24
 8006df0:	b920      	cbnz	r0, 8006dfc <_Balloc+0x20>
 8006df2:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <_Balloc+0x78>)
 8006df4:	4818      	ldr	r0, [pc, #96]	; (8006e58 <_Balloc+0x7c>)
 8006df6:	2166      	movs	r1, #102	; 0x66
 8006df8:	f000 fcd0 	bl	800779c <__assert_func>
 8006dfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e00:	6006      	str	r6, [r0, #0]
 8006e02:	60c6      	str	r6, [r0, #12]
 8006e04:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006e06:	68f3      	ldr	r3, [r6, #12]
 8006e08:	b183      	cbz	r3, 8006e2c <_Balloc+0x50>
 8006e0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006e12:	b9b8      	cbnz	r0, 8006e44 <_Balloc+0x68>
 8006e14:	2101      	movs	r1, #1
 8006e16:	fa01 f605 	lsl.w	r6, r1, r5
 8006e1a:	1d72      	adds	r2, r6, #5
 8006e1c:	0092      	lsls	r2, r2, #2
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f000 fb60 	bl	80074e4 <_calloc_r>
 8006e24:	b160      	cbz	r0, 8006e40 <_Balloc+0x64>
 8006e26:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e2a:	e00e      	b.n	8006e4a <_Balloc+0x6e>
 8006e2c:	2221      	movs	r2, #33	; 0x21
 8006e2e:	2104      	movs	r1, #4
 8006e30:	4620      	mov	r0, r4
 8006e32:	f000 fb57 	bl	80074e4 <_calloc_r>
 8006e36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e38:	60f0      	str	r0, [r6, #12]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e4      	bne.n	8006e0a <_Balloc+0x2e>
 8006e40:	2000      	movs	r0, #0
 8006e42:	bd70      	pop	{r4, r5, r6, pc}
 8006e44:	6802      	ldr	r2, [r0, #0]
 8006e46:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e50:	e7f7      	b.n	8006e42 <_Balloc+0x66>
 8006e52:	bf00      	nop
 8006e54:	0800c905 	.word	0x0800c905
 8006e58:	0800c9e8 	.word	0x0800c9e8

08006e5c <_Bfree>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e60:	4605      	mov	r5, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	b976      	cbnz	r6, 8006e84 <_Bfree+0x28>
 8006e66:	2010      	movs	r0, #16
 8006e68:	f7ff ffb0 	bl	8006dcc <malloc>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	6268      	str	r0, [r5, #36]	; 0x24
 8006e70:	b920      	cbnz	r0, 8006e7c <_Bfree+0x20>
 8006e72:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <_Bfree+0x3c>)
 8006e74:	4809      	ldr	r0, [pc, #36]	; (8006e9c <_Bfree+0x40>)
 8006e76:	218a      	movs	r1, #138	; 0x8a
 8006e78:	f000 fc90 	bl	800779c <__assert_func>
 8006e7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e80:	6006      	str	r6, [r0, #0]
 8006e82:	60c6      	str	r6, [r0, #12]
 8006e84:	b13c      	cbz	r4, 8006e96 <_Bfree+0x3a>
 8006e86:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e88:	6862      	ldr	r2, [r4, #4]
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e90:	6021      	str	r1, [r4, #0]
 8006e92:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
 8006e98:	0800c905 	.word	0x0800c905
 8006e9c:	0800c9e8 	.word	0x0800c9e8

08006ea0 <__multadd>:
 8006ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ea4:	690d      	ldr	r5, [r1, #16]
 8006ea6:	4607      	mov	r7, r0
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	461e      	mov	r6, r3
 8006eac:	f101 0c14 	add.w	ip, r1, #20
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	f8dc 3000 	ldr.w	r3, [ip]
 8006eb6:	b299      	uxth	r1, r3
 8006eb8:	fb02 6101 	mla	r1, r2, r1, r6
 8006ebc:	0c1e      	lsrs	r6, r3, #16
 8006ebe:	0c0b      	lsrs	r3, r1, #16
 8006ec0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ec4:	b289      	uxth	r1, r1
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ecc:	4285      	cmp	r5, r0
 8006ece:	f84c 1b04 	str.w	r1, [ip], #4
 8006ed2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006ed6:	dcec      	bgt.n	8006eb2 <__multadd+0x12>
 8006ed8:	b30e      	cbz	r6, 8006f1e <__multadd+0x7e>
 8006eda:	68a3      	ldr	r3, [r4, #8]
 8006edc:	42ab      	cmp	r3, r5
 8006ede:	dc19      	bgt.n	8006f14 <__multadd+0x74>
 8006ee0:	6861      	ldr	r1, [r4, #4]
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	3101      	adds	r1, #1
 8006ee6:	f7ff ff79 	bl	8006ddc <_Balloc>
 8006eea:	4680      	mov	r8, r0
 8006eec:	b928      	cbnz	r0, 8006efa <__multadd+0x5a>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <__multadd+0x84>)
 8006ef2:	480d      	ldr	r0, [pc, #52]	; (8006f28 <__multadd+0x88>)
 8006ef4:	21b5      	movs	r1, #181	; 0xb5
 8006ef6:	f000 fc51 	bl	800779c <__assert_func>
 8006efa:	6922      	ldr	r2, [r4, #16]
 8006efc:	3202      	adds	r2, #2
 8006efe:	f104 010c 	add.w	r1, r4, #12
 8006f02:	0092      	lsls	r2, r2, #2
 8006f04:	300c      	adds	r0, #12
 8006f06:	f7fe f90d 	bl	8005124 <memcpy>
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7ff ffa5 	bl	8006e5c <_Bfree>
 8006f12:	4644      	mov	r4, r8
 8006f14:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006f18:	3501      	adds	r5, #1
 8006f1a:	615e      	str	r6, [r3, #20]
 8006f1c:	6125      	str	r5, [r4, #16]
 8006f1e:	4620      	mov	r0, r4
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	0800c977 	.word	0x0800c977
 8006f28:	0800c9e8 	.word	0x0800c9e8

08006f2c <__hi0bits>:
 8006f2c:	0c03      	lsrs	r3, r0, #16
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	b9d3      	cbnz	r3, 8006f68 <__hi0bits+0x3c>
 8006f32:	0400      	lsls	r0, r0, #16
 8006f34:	2310      	movs	r3, #16
 8006f36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006f3a:	bf04      	itt	eq
 8006f3c:	0200      	lsleq	r0, r0, #8
 8006f3e:	3308      	addeq	r3, #8
 8006f40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006f44:	bf04      	itt	eq
 8006f46:	0100      	lsleq	r0, r0, #4
 8006f48:	3304      	addeq	r3, #4
 8006f4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006f4e:	bf04      	itt	eq
 8006f50:	0080      	lsleq	r0, r0, #2
 8006f52:	3302      	addeq	r3, #2
 8006f54:	2800      	cmp	r0, #0
 8006f56:	db05      	blt.n	8006f64 <__hi0bits+0x38>
 8006f58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006f5c:	f103 0301 	add.w	r3, r3, #1
 8006f60:	bf08      	it	eq
 8006f62:	2320      	moveq	r3, #32
 8006f64:	4618      	mov	r0, r3
 8006f66:	4770      	bx	lr
 8006f68:	2300      	movs	r3, #0
 8006f6a:	e7e4      	b.n	8006f36 <__hi0bits+0xa>

08006f6c <__lo0bits>:
 8006f6c:	6803      	ldr	r3, [r0, #0]
 8006f6e:	f013 0207 	ands.w	r2, r3, #7
 8006f72:	4601      	mov	r1, r0
 8006f74:	d00b      	beq.n	8006f8e <__lo0bits+0x22>
 8006f76:	07da      	lsls	r2, r3, #31
 8006f78:	d423      	bmi.n	8006fc2 <__lo0bits+0x56>
 8006f7a:	0798      	lsls	r0, r3, #30
 8006f7c:	bf49      	itett	mi
 8006f7e:	085b      	lsrmi	r3, r3, #1
 8006f80:	089b      	lsrpl	r3, r3, #2
 8006f82:	2001      	movmi	r0, #1
 8006f84:	600b      	strmi	r3, [r1, #0]
 8006f86:	bf5c      	itt	pl
 8006f88:	600b      	strpl	r3, [r1, #0]
 8006f8a:	2002      	movpl	r0, #2
 8006f8c:	4770      	bx	lr
 8006f8e:	b298      	uxth	r0, r3
 8006f90:	b9a8      	cbnz	r0, 8006fbe <__lo0bits+0x52>
 8006f92:	0c1b      	lsrs	r3, r3, #16
 8006f94:	2010      	movs	r0, #16
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	b90a      	cbnz	r2, 8006f9e <__lo0bits+0x32>
 8006f9a:	3008      	adds	r0, #8
 8006f9c:	0a1b      	lsrs	r3, r3, #8
 8006f9e:	071a      	lsls	r2, r3, #28
 8006fa0:	bf04      	itt	eq
 8006fa2:	091b      	lsreq	r3, r3, #4
 8006fa4:	3004      	addeq	r0, #4
 8006fa6:	079a      	lsls	r2, r3, #30
 8006fa8:	bf04      	itt	eq
 8006faa:	089b      	lsreq	r3, r3, #2
 8006fac:	3002      	addeq	r0, #2
 8006fae:	07da      	lsls	r2, r3, #31
 8006fb0:	d403      	bmi.n	8006fba <__lo0bits+0x4e>
 8006fb2:	085b      	lsrs	r3, r3, #1
 8006fb4:	f100 0001 	add.w	r0, r0, #1
 8006fb8:	d005      	beq.n	8006fc6 <__lo0bits+0x5a>
 8006fba:	600b      	str	r3, [r1, #0]
 8006fbc:	4770      	bx	lr
 8006fbe:	4610      	mov	r0, r2
 8006fc0:	e7e9      	b.n	8006f96 <__lo0bits+0x2a>
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	4770      	bx	lr
 8006fc6:	2020      	movs	r0, #32
 8006fc8:	4770      	bx	lr
	...

08006fcc <__i2b>:
 8006fcc:	b510      	push	{r4, lr}
 8006fce:	460c      	mov	r4, r1
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	f7ff ff03 	bl	8006ddc <_Balloc>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	b928      	cbnz	r0, 8006fe6 <__i2b+0x1a>
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <__i2b+0x24>)
 8006fdc:	4805      	ldr	r0, [pc, #20]	; (8006ff4 <__i2b+0x28>)
 8006fde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fe2:	f000 fbdb 	bl	800779c <__assert_func>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	6144      	str	r4, [r0, #20]
 8006fea:	6103      	str	r3, [r0, #16]
 8006fec:	bd10      	pop	{r4, pc}
 8006fee:	bf00      	nop
 8006ff0:	0800c977 	.word	0x0800c977
 8006ff4:	0800c9e8 	.word	0x0800c9e8

08006ff8 <__multiply>:
 8006ff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ffc:	4691      	mov	r9, r2
 8006ffe:	690a      	ldr	r2, [r1, #16]
 8007000:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007004:	429a      	cmp	r2, r3
 8007006:	bfb8      	it	lt
 8007008:	460b      	movlt	r3, r1
 800700a:	460c      	mov	r4, r1
 800700c:	bfbc      	itt	lt
 800700e:	464c      	movlt	r4, r9
 8007010:	4699      	movlt	r9, r3
 8007012:	6927      	ldr	r7, [r4, #16]
 8007014:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007018:	68a3      	ldr	r3, [r4, #8]
 800701a:	6861      	ldr	r1, [r4, #4]
 800701c:	eb07 060a 	add.w	r6, r7, sl
 8007020:	42b3      	cmp	r3, r6
 8007022:	b085      	sub	sp, #20
 8007024:	bfb8      	it	lt
 8007026:	3101      	addlt	r1, #1
 8007028:	f7ff fed8 	bl	8006ddc <_Balloc>
 800702c:	b930      	cbnz	r0, 800703c <__multiply+0x44>
 800702e:	4602      	mov	r2, r0
 8007030:	4b44      	ldr	r3, [pc, #272]	; (8007144 <__multiply+0x14c>)
 8007032:	4845      	ldr	r0, [pc, #276]	; (8007148 <__multiply+0x150>)
 8007034:	f240 115d 	movw	r1, #349	; 0x15d
 8007038:	f000 fbb0 	bl	800779c <__assert_func>
 800703c:	f100 0514 	add.w	r5, r0, #20
 8007040:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007044:	462b      	mov	r3, r5
 8007046:	2200      	movs	r2, #0
 8007048:	4543      	cmp	r3, r8
 800704a:	d321      	bcc.n	8007090 <__multiply+0x98>
 800704c:	f104 0314 	add.w	r3, r4, #20
 8007050:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007054:	f109 0314 	add.w	r3, r9, #20
 8007058:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800705c:	9202      	str	r2, [sp, #8]
 800705e:	1b3a      	subs	r2, r7, r4
 8007060:	3a15      	subs	r2, #21
 8007062:	f022 0203 	bic.w	r2, r2, #3
 8007066:	3204      	adds	r2, #4
 8007068:	f104 0115 	add.w	r1, r4, #21
 800706c:	428f      	cmp	r7, r1
 800706e:	bf38      	it	cc
 8007070:	2204      	movcc	r2, #4
 8007072:	9201      	str	r2, [sp, #4]
 8007074:	9a02      	ldr	r2, [sp, #8]
 8007076:	9303      	str	r3, [sp, #12]
 8007078:	429a      	cmp	r2, r3
 800707a:	d80c      	bhi.n	8007096 <__multiply+0x9e>
 800707c:	2e00      	cmp	r6, #0
 800707e:	dd03      	ble.n	8007088 <__multiply+0x90>
 8007080:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007084:	2b00      	cmp	r3, #0
 8007086:	d05a      	beq.n	800713e <__multiply+0x146>
 8007088:	6106      	str	r6, [r0, #16]
 800708a:	b005      	add	sp, #20
 800708c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007090:	f843 2b04 	str.w	r2, [r3], #4
 8007094:	e7d8      	b.n	8007048 <__multiply+0x50>
 8007096:	f8b3 a000 	ldrh.w	sl, [r3]
 800709a:	f1ba 0f00 	cmp.w	sl, #0
 800709e:	d024      	beq.n	80070ea <__multiply+0xf2>
 80070a0:	f104 0e14 	add.w	lr, r4, #20
 80070a4:	46a9      	mov	r9, r5
 80070a6:	f04f 0c00 	mov.w	ip, #0
 80070aa:	f85e 2b04 	ldr.w	r2, [lr], #4
 80070ae:	f8d9 1000 	ldr.w	r1, [r9]
 80070b2:	fa1f fb82 	uxth.w	fp, r2
 80070b6:	b289      	uxth	r1, r1
 80070b8:	fb0a 110b 	mla	r1, sl, fp, r1
 80070bc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80070c0:	f8d9 2000 	ldr.w	r2, [r9]
 80070c4:	4461      	add	r1, ip
 80070c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070ca:	fb0a c20b 	mla	r2, sl, fp, ip
 80070ce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80070d2:	b289      	uxth	r1, r1
 80070d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80070d8:	4577      	cmp	r7, lr
 80070da:	f849 1b04 	str.w	r1, [r9], #4
 80070de:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80070e2:	d8e2      	bhi.n	80070aa <__multiply+0xb2>
 80070e4:	9a01      	ldr	r2, [sp, #4]
 80070e6:	f845 c002 	str.w	ip, [r5, r2]
 80070ea:	9a03      	ldr	r2, [sp, #12]
 80070ec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070f0:	3304      	adds	r3, #4
 80070f2:	f1b9 0f00 	cmp.w	r9, #0
 80070f6:	d020      	beq.n	800713a <__multiply+0x142>
 80070f8:	6829      	ldr	r1, [r5, #0]
 80070fa:	f104 0c14 	add.w	ip, r4, #20
 80070fe:	46ae      	mov	lr, r5
 8007100:	f04f 0a00 	mov.w	sl, #0
 8007104:	f8bc b000 	ldrh.w	fp, [ip]
 8007108:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800710c:	fb09 220b 	mla	r2, r9, fp, r2
 8007110:	4492      	add	sl, r2
 8007112:	b289      	uxth	r1, r1
 8007114:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007118:	f84e 1b04 	str.w	r1, [lr], #4
 800711c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007120:	f8be 1000 	ldrh.w	r1, [lr]
 8007124:	0c12      	lsrs	r2, r2, #16
 8007126:	fb09 1102 	mla	r1, r9, r2, r1
 800712a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800712e:	4567      	cmp	r7, ip
 8007130:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007134:	d8e6      	bhi.n	8007104 <__multiply+0x10c>
 8007136:	9a01      	ldr	r2, [sp, #4]
 8007138:	50a9      	str	r1, [r5, r2]
 800713a:	3504      	adds	r5, #4
 800713c:	e79a      	b.n	8007074 <__multiply+0x7c>
 800713e:	3e01      	subs	r6, #1
 8007140:	e79c      	b.n	800707c <__multiply+0x84>
 8007142:	bf00      	nop
 8007144:	0800c977 	.word	0x0800c977
 8007148:	0800c9e8 	.word	0x0800c9e8

0800714c <__pow5mult>:
 800714c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007150:	4615      	mov	r5, r2
 8007152:	f012 0203 	ands.w	r2, r2, #3
 8007156:	4606      	mov	r6, r0
 8007158:	460f      	mov	r7, r1
 800715a:	d007      	beq.n	800716c <__pow5mult+0x20>
 800715c:	4c25      	ldr	r4, [pc, #148]	; (80071f4 <__pow5mult+0xa8>)
 800715e:	3a01      	subs	r2, #1
 8007160:	2300      	movs	r3, #0
 8007162:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007166:	f7ff fe9b 	bl	8006ea0 <__multadd>
 800716a:	4607      	mov	r7, r0
 800716c:	10ad      	asrs	r5, r5, #2
 800716e:	d03d      	beq.n	80071ec <__pow5mult+0xa0>
 8007170:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007172:	b97c      	cbnz	r4, 8007194 <__pow5mult+0x48>
 8007174:	2010      	movs	r0, #16
 8007176:	f7ff fe29 	bl	8006dcc <malloc>
 800717a:	4602      	mov	r2, r0
 800717c:	6270      	str	r0, [r6, #36]	; 0x24
 800717e:	b928      	cbnz	r0, 800718c <__pow5mult+0x40>
 8007180:	4b1d      	ldr	r3, [pc, #116]	; (80071f8 <__pow5mult+0xac>)
 8007182:	481e      	ldr	r0, [pc, #120]	; (80071fc <__pow5mult+0xb0>)
 8007184:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007188:	f000 fb08 	bl	800779c <__assert_func>
 800718c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007190:	6004      	str	r4, [r0, #0]
 8007192:	60c4      	str	r4, [r0, #12]
 8007194:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007198:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800719c:	b94c      	cbnz	r4, 80071b2 <__pow5mult+0x66>
 800719e:	f240 2171 	movw	r1, #625	; 0x271
 80071a2:	4630      	mov	r0, r6
 80071a4:	f7ff ff12 	bl	8006fcc <__i2b>
 80071a8:	2300      	movs	r3, #0
 80071aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80071ae:	4604      	mov	r4, r0
 80071b0:	6003      	str	r3, [r0, #0]
 80071b2:	f04f 0900 	mov.w	r9, #0
 80071b6:	07eb      	lsls	r3, r5, #31
 80071b8:	d50a      	bpl.n	80071d0 <__pow5mult+0x84>
 80071ba:	4639      	mov	r1, r7
 80071bc:	4622      	mov	r2, r4
 80071be:	4630      	mov	r0, r6
 80071c0:	f7ff ff1a 	bl	8006ff8 <__multiply>
 80071c4:	4639      	mov	r1, r7
 80071c6:	4680      	mov	r8, r0
 80071c8:	4630      	mov	r0, r6
 80071ca:	f7ff fe47 	bl	8006e5c <_Bfree>
 80071ce:	4647      	mov	r7, r8
 80071d0:	106d      	asrs	r5, r5, #1
 80071d2:	d00b      	beq.n	80071ec <__pow5mult+0xa0>
 80071d4:	6820      	ldr	r0, [r4, #0]
 80071d6:	b938      	cbnz	r0, 80071e8 <__pow5mult+0x9c>
 80071d8:	4622      	mov	r2, r4
 80071da:	4621      	mov	r1, r4
 80071dc:	4630      	mov	r0, r6
 80071de:	f7ff ff0b 	bl	8006ff8 <__multiply>
 80071e2:	6020      	str	r0, [r4, #0]
 80071e4:	f8c0 9000 	str.w	r9, [r0]
 80071e8:	4604      	mov	r4, r0
 80071ea:	e7e4      	b.n	80071b6 <__pow5mult+0x6a>
 80071ec:	4638      	mov	r0, r7
 80071ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071f2:	bf00      	nop
 80071f4:	0800cb38 	.word	0x0800cb38
 80071f8:	0800c905 	.word	0x0800c905
 80071fc:	0800c9e8 	.word	0x0800c9e8

08007200 <__lshift>:
 8007200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	460c      	mov	r4, r1
 8007206:	6849      	ldr	r1, [r1, #4]
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800720e:	68a3      	ldr	r3, [r4, #8]
 8007210:	4607      	mov	r7, r0
 8007212:	4691      	mov	r9, r2
 8007214:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007218:	f108 0601 	add.w	r6, r8, #1
 800721c:	42b3      	cmp	r3, r6
 800721e:	db0b      	blt.n	8007238 <__lshift+0x38>
 8007220:	4638      	mov	r0, r7
 8007222:	f7ff fddb 	bl	8006ddc <_Balloc>
 8007226:	4605      	mov	r5, r0
 8007228:	b948      	cbnz	r0, 800723e <__lshift+0x3e>
 800722a:	4602      	mov	r2, r0
 800722c:	4b2a      	ldr	r3, [pc, #168]	; (80072d8 <__lshift+0xd8>)
 800722e:	482b      	ldr	r0, [pc, #172]	; (80072dc <__lshift+0xdc>)
 8007230:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007234:	f000 fab2 	bl	800779c <__assert_func>
 8007238:	3101      	adds	r1, #1
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	e7ee      	b.n	800721c <__lshift+0x1c>
 800723e:	2300      	movs	r3, #0
 8007240:	f100 0114 	add.w	r1, r0, #20
 8007244:	f100 0210 	add.w	r2, r0, #16
 8007248:	4618      	mov	r0, r3
 800724a:	4553      	cmp	r3, sl
 800724c:	db37      	blt.n	80072be <__lshift+0xbe>
 800724e:	6920      	ldr	r0, [r4, #16]
 8007250:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007254:	f104 0314 	add.w	r3, r4, #20
 8007258:	f019 091f 	ands.w	r9, r9, #31
 800725c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007260:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007264:	d02f      	beq.n	80072c6 <__lshift+0xc6>
 8007266:	f1c9 0e20 	rsb	lr, r9, #32
 800726a:	468a      	mov	sl, r1
 800726c:	f04f 0c00 	mov.w	ip, #0
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	fa02 f209 	lsl.w	r2, r2, r9
 8007276:	ea42 020c 	orr.w	r2, r2, ip
 800727a:	f84a 2b04 	str.w	r2, [sl], #4
 800727e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007282:	4298      	cmp	r0, r3
 8007284:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007288:	d8f2      	bhi.n	8007270 <__lshift+0x70>
 800728a:	1b03      	subs	r3, r0, r4
 800728c:	3b15      	subs	r3, #21
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	3304      	adds	r3, #4
 8007294:	f104 0215 	add.w	r2, r4, #21
 8007298:	4290      	cmp	r0, r2
 800729a:	bf38      	it	cc
 800729c:	2304      	movcc	r3, #4
 800729e:	f841 c003 	str.w	ip, [r1, r3]
 80072a2:	f1bc 0f00 	cmp.w	ip, #0
 80072a6:	d001      	beq.n	80072ac <__lshift+0xac>
 80072a8:	f108 0602 	add.w	r6, r8, #2
 80072ac:	3e01      	subs	r6, #1
 80072ae:	4638      	mov	r0, r7
 80072b0:	612e      	str	r6, [r5, #16]
 80072b2:	4621      	mov	r1, r4
 80072b4:	f7ff fdd2 	bl	8006e5c <_Bfree>
 80072b8:	4628      	mov	r0, r5
 80072ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072be:	f842 0f04 	str.w	r0, [r2, #4]!
 80072c2:	3301      	adds	r3, #1
 80072c4:	e7c1      	b.n	800724a <__lshift+0x4a>
 80072c6:	3904      	subs	r1, #4
 80072c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80072d0:	4298      	cmp	r0, r3
 80072d2:	d8f9      	bhi.n	80072c8 <__lshift+0xc8>
 80072d4:	e7ea      	b.n	80072ac <__lshift+0xac>
 80072d6:	bf00      	nop
 80072d8:	0800c977 	.word	0x0800c977
 80072dc:	0800c9e8 	.word	0x0800c9e8

080072e0 <__mcmp>:
 80072e0:	b530      	push	{r4, r5, lr}
 80072e2:	6902      	ldr	r2, [r0, #16]
 80072e4:	690c      	ldr	r4, [r1, #16]
 80072e6:	1b12      	subs	r2, r2, r4
 80072e8:	d10e      	bne.n	8007308 <__mcmp+0x28>
 80072ea:	f100 0314 	add.w	r3, r0, #20
 80072ee:	3114      	adds	r1, #20
 80072f0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80072f4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80072f8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80072fc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007300:	42a5      	cmp	r5, r4
 8007302:	d003      	beq.n	800730c <__mcmp+0x2c>
 8007304:	d305      	bcc.n	8007312 <__mcmp+0x32>
 8007306:	2201      	movs	r2, #1
 8007308:	4610      	mov	r0, r2
 800730a:	bd30      	pop	{r4, r5, pc}
 800730c:	4283      	cmp	r3, r0
 800730e:	d3f3      	bcc.n	80072f8 <__mcmp+0x18>
 8007310:	e7fa      	b.n	8007308 <__mcmp+0x28>
 8007312:	f04f 32ff 	mov.w	r2, #4294967295
 8007316:	e7f7      	b.n	8007308 <__mcmp+0x28>

08007318 <__mdiff>:
 8007318:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800731c:	460c      	mov	r4, r1
 800731e:	4606      	mov	r6, r0
 8007320:	4611      	mov	r1, r2
 8007322:	4620      	mov	r0, r4
 8007324:	4690      	mov	r8, r2
 8007326:	f7ff ffdb 	bl	80072e0 <__mcmp>
 800732a:	1e05      	subs	r5, r0, #0
 800732c:	d110      	bne.n	8007350 <__mdiff+0x38>
 800732e:	4629      	mov	r1, r5
 8007330:	4630      	mov	r0, r6
 8007332:	f7ff fd53 	bl	8006ddc <_Balloc>
 8007336:	b930      	cbnz	r0, 8007346 <__mdiff+0x2e>
 8007338:	4b3a      	ldr	r3, [pc, #232]	; (8007424 <__mdiff+0x10c>)
 800733a:	4602      	mov	r2, r0
 800733c:	f240 2132 	movw	r1, #562	; 0x232
 8007340:	4839      	ldr	r0, [pc, #228]	; (8007428 <__mdiff+0x110>)
 8007342:	f000 fa2b 	bl	800779c <__assert_func>
 8007346:	2301      	movs	r3, #1
 8007348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800734c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007350:	bfa4      	itt	ge
 8007352:	4643      	movge	r3, r8
 8007354:	46a0      	movge	r8, r4
 8007356:	4630      	mov	r0, r6
 8007358:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800735c:	bfa6      	itte	ge
 800735e:	461c      	movge	r4, r3
 8007360:	2500      	movge	r5, #0
 8007362:	2501      	movlt	r5, #1
 8007364:	f7ff fd3a 	bl	8006ddc <_Balloc>
 8007368:	b920      	cbnz	r0, 8007374 <__mdiff+0x5c>
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <__mdiff+0x10c>)
 800736c:	4602      	mov	r2, r0
 800736e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007372:	e7e5      	b.n	8007340 <__mdiff+0x28>
 8007374:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007378:	6926      	ldr	r6, [r4, #16]
 800737a:	60c5      	str	r5, [r0, #12]
 800737c:	f104 0914 	add.w	r9, r4, #20
 8007380:	f108 0514 	add.w	r5, r8, #20
 8007384:	f100 0e14 	add.w	lr, r0, #20
 8007388:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800738c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007390:	f108 0210 	add.w	r2, r8, #16
 8007394:	46f2      	mov	sl, lr
 8007396:	2100      	movs	r1, #0
 8007398:	f859 3b04 	ldr.w	r3, [r9], #4
 800739c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80073a0:	fa1f f883 	uxth.w	r8, r3
 80073a4:	fa11 f18b 	uxtah	r1, r1, fp
 80073a8:	0c1b      	lsrs	r3, r3, #16
 80073aa:	eba1 0808 	sub.w	r8, r1, r8
 80073ae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80073b2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80073b6:	fa1f f888 	uxth.w	r8, r8
 80073ba:	1419      	asrs	r1, r3, #16
 80073bc:	454e      	cmp	r6, r9
 80073be:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80073c2:	f84a 3b04 	str.w	r3, [sl], #4
 80073c6:	d8e7      	bhi.n	8007398 <__mdiff+0x80>
 80073c8:	1b33      	subs	r3, r6, r4
 80073ca:	3b15      	subs	r3, #21
 80073cc:	f023 0303 	bic.w	r3, r3, #3
 80073d0:	3304      	adds	r3, #4
 80073d2:	3415      	adds	r4, #21
 80073d4:	42a6      	cmp	r6, r4
 80073d6:	bf38      	it	cc
 80073d8:	2304      	movcc	r3, #4
 80073da:	441d      	add	r5, r3
 80073dc:	4473      	add	r3, lr
 80073de:	469e      	mov	lr, r3
 80073e0:	462e      	mov	r6, r5
 80073e2:	4566      	cmp	r6, ip
 80073e4:	d30e      	bcc.n	8007404 <__mdiff+0xec>
 80073e6:	f10c 0203 	add.w	r2, ip, #3
 80073ea:	1b52      	subs	r2, r2, r5
 80073ec:	f022 0203 	bic.w	r2, r2, #3
 80073f0:	3d03      	subs	r5, #3
 80073f2:	45ac      	cmp	ip, r5
 80073f4:	bf38      	it	cc
 80073f6:	2200      	movcc	r2, #0
 80073f8:	441a      	add	r2, r3
 80073fa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80073fe:	b17b      	cbz	r3, 8007420 <__mdiff+0x108>
 8007400:	6107      	str	r7, [r0, #16]
 8007402:	e7a3      	b.n	800734c <__mdiff+0x34>
 8007404:	f856 8b04 	ldr.w	r8, [r6], #4
 8007408:	fa11 f288 	uxtah	r2, r1, r8
 800740c:	1414      	asrs	r4, r2, #16
 800740e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007412:	b292      	uxth	r2, r2
 8007414:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007418:	f84e 2b04 	str.w	r2, [lr], #4
 800741c:	1421      	asrs	r1, r4, #16
 800741e:	e7e0      	b.n	80073e2 <__mdiff+0xca>
 8007420:	3f01      	subs	r7, #1
 8007422:	e7ea      	b.n	80073fa <__mdiff+0xe2>
 8007424:	0800c977 	.word	0x0800c977
 8007428:	0800c9e8 	.word	0x0800c9e8

0800742c <__d2b>:
 800742c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007430:	4689      	mov	r9, r1
 8007432:	2101      	movs	r1, #1
 8007434:	ec57 6b10 	vmov	r6, r7, d0
 8007438:	4690      	mov	r8, r2
 800743a:	f7ff fccf 	bl	8006ddc <_Balloc>
 800743e:	4604      	mov	r4, r0
 8007440:	b930      	cbnz	r0, 8007450 <__d2b+0x24>
 8007442:	4602      	mov	r2, r0
 8007444:	4b25      	ldr	r3, [pc, #148]	; (80074dc <__d2b+0xb0>)
 8007446:	4826      	ldr	r0, [pc, #152]	; (80074e0 <__d2b+0xb4>)
 8007448:	f240 310a 	movw	r1, #778	; 0x30a
 800744c:	f000 f9a6 	bl	800779c <__assert_func>
 8007450:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007454:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007458:	bb35      	cbnz	r5, 80074a8 <__d2b+0x7c>
 800745a:	2e00      	cmp	r6, #0
 800745c:	9301      	str	r3, [sp, #4]
 800745e:	d028      	beq.n	80074b2 <__d2b+0x86>
 8007460:	4668      	mov	r0, sp
 8007462:	9600      	str	r6, [sp, #0]
 8007464:	f7ff fd82 	bl	8006f6c <__lo0bits>
 8007468:	9900      	ldr	r1, [sp, #0]
 800746a:	b300      	cbz	r0, 80074ae <__d2b+0x82>
 800746c:	9a01      	ldr	r2, [sp, #4]
 800746e:	f1c0 0320 	rsb	r3, r0, #32
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	430b      	orrs	r3, r1
 8007478:	40c2      	lsrs	r2, r0
 800747a:	6163      	str	r3, [r4, #20]
 800747c:	9201      	str	r2, [sp, #4]
 800747e:	9b01      	ldr	r3, [sp, #4]
 8007480:	61a3      	str	r3, [r4, #24]
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf14      	ite	ne
 8007486:	2202      	movne	r2, #2
 8007488:	2201      	moveq	r2, #1
 800748a:	6122      	str	r2, [r4, #16]
 800748c:	b1d5      	cbz	r5, 80074c4 <__d2b+0x98>
 800748e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007492:	4405      	add	r5, r0
 8007494:	f8c9 5000 	str.w	r5, [r9]
 8007498:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800749c:	f8c8 0000 	str.w	r0, [r8]
 80074a0:	4620      	mov	r0, r4
 80074a2:	b003      	add	sp, #12
 80074a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074ac:	e7d5      	b.n	800745a <__d2b+0x2e>
 80074ae:	6161      	str	r1, [r4, #20]
 80074b0:	e7e5      	b.n	800747e <__d2b+0x52>
 80074b2:	a801      	add	r0, sp, #4
 80074b4:	f7ff fd5a 	bl	8006f6c <__lo0bits>
 80074b8:	9b01      	ldr	r3, [sp, #4]
 80074ba:	6163      	str	r3, [r4, #20]
 80074bc:	2201      	movs	r2, #1
 80074be:	6122      	str	r2, [r4, #16]
 80074c0:	3020      	adds	r0, #32
 80074c2:	e7e3      	b.n	800748c <__d2b+0x60>
 80074c4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074c8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074cc:	f8c9 0000 	str.w	r0, [r9]
 80074d0:	6918      	ldr	r0, [r3, #16]
 80074d2:	f7ff fd2b 	bl	8006f2c <__hi0bits>
 80074d6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80074da:	e7df      	b.n	800749c <__d2b+0x70>
 80074dc:	0800c977 	.word	0x0800c977
 80074e0:	0800c9e8 	.word	0x0800c9e8

080074e4 <_calloc_r>:
 80074e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074e6:	fba1 2402 	umull	r2, r4, r1, r2
 80074ea:	b94c      	cbnz	r4, 8007500 <_calloc_r+0x1c>
 80074ec:	4611      	mov	r1, r2
 80074ee:	9201      	str	r2, [sp, #4]
 80074f0:	f000 f87a 	bl	80075e8 <_malloc_r>
 80074f4:	9a01      	ldr	r2, [sp, #4]
 80074f6:	4605      	mov	r5, r0
 80074f8:	b930      	cbnz	r0, 8007508 <_calloc_r+0x24>
 80074fa:	4628      	mov	r0, r5
 80074fc:	b003      	add	sp, #12
 80074fe:	bd30      	pop	{r4, r5, pc}
 8007500:	220c      	movs	r2, #12
 8007502:	6002      	str	r2, [r0, #0]
 8007504:	2500      	movs	r5, #0
 8007506:	e7f8      	b.n	80074fa <_calloc_r+0x16>
 8007508:	4621      	mov	r1, r4
 800750a:	f7fd fe19 	bl	8005140 <memset>
 800750e:	e7f4      	b.n	80074fa <_calloc_r+0x16>

08007510 <_free_r>:
 8007510:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007512:	2900      	cmp	r1, #0
 8007514:	d044      	beq.n	80075a0 <_free_r+0x90>
 8007516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800751a:	9001      	str	r0, [sp, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	f1a1 0404 	sub.w	r4, r1, #4
 8007522:	bfb8      	it	lt
 8007524:	18e4      	addlt	r4, r4, r3
 8007526:	f000 f9bf 	bl	80078a8 <__malloc_lock>
 800752a:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <_free_r+0x94>)
 800752c:	9801      	ldr	r0, [sp, #4]
 800752e:	6813      	ldr	r3, [r2, #0]
 8007530:	b933      	cbnz	r3, 8007540 <_free_r+0x30>
 8007532:	6063      	str	r3, [r4, #4]
 8007534:	6014      	str	r4, [r2, #0]
 8007536:	b003      	add	sp, #12
 8007538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800753c:	f000 b9ba 	b.w	80078b4 <__malloc_unlock>
 8007540:	42a3      	cmp	r3, r4
 8007542:	d908      	bls.n	8007556 <_free_r+0x46>
 8007544:	6825      	ldr	r5, [r4, #0]
 8007546:	1961      	adds	r1, r4, r5
 8007548:	428b      	cmp	r3, r1
 800754a:	bf01      	itttt	eq
 800754c:	6819      	ldreq	r1, [r3, #0]
 800754e:	685b      	ldreq	r3, [r3, #4]
 8007550:	1949      	addeq	r1, r1, r5
 8007552:	6021      	streq	r1, [r4, #0]
 8007554:	e7ed      	b.n	8007532 <_free_r+0x22>
 8007556:	461a      	mov	r2, r3
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	b10b      	cbz	r3, 8007560 <_free_r+0x50>
 800755c:	42a3      	cmp	r3, r4
 800755e:	d9fa      	bls.n	8007556 <_free_r+0x46>
 8007560:	6811      	ldr	r1, [r2, #0]
 8007562:	1855      	adds	r5, r2, r1
 8007564:	42a5      	cmp	r5, r4
 8007566:	d10b      	bne.n	8007580 <_free_r+0x70>
 8007568:	6824      	ldr	r4, [r4, #0]
 800756a:	4421      	add	r1, r4
 800756c:	1854      	adds	r4, r2, r1
 800756e:	42a3      	cmp	r3, r4
 8007570:	6011      	str	r1, [r2, #0]
 8007572:	d1e0      	bne.n	8007536 <_free_r+0x26>
 8007574:	681c      	ldr	r4, [r3, #0]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	6053      	str	r3, [r2, #4]
 800757a:	4421      	add	r1, r4
 800757c:	6011      	str	r1, [r2, #0]
 800757e:	e7da      	b.n	8007536 <_free_r+0x26>
 8007580:	d902      	bls.n	8007588 <_free_r+0x78>
 8007582:	230c      	movs	r3, #12
 8007584:	6003      	str	r3, [r0, #0]
 8007586:	e7d6      	b.n	8007536 <_free_r+0x26>
 8007588:	6825      	ldr	r5, [r4, #0]
 800758a:	1961      	adds	r1, r4, r5
 800758c:	428b      	cmp	r3, r1
 800758e:	bf04      	itt	eq
 8007590:	6819      	ldreq	r1, [r3, #0]
 8007592:	685b      	ldreq	r3, [r3, #4]
 8007594:	6063      	str	r3, [r4, #4]
 8007596:	bf04      	itt	eq
 8007598:	1949      	addeq	r1, r1, r5
 800759a:	6021      	streq	r1, [r4, #0]
 800759c:	6054      	str	r4, [r2, #4]
 800759e:	e7ca      	b.n	8007536 <_free_r+0x26>
 80075a0:	b003      	add	sp, #12
 80075a2:	bd30      	pop	{r4, r5, pc}
 80075a4:	20007944 	.word	0x20007944

080075a8 <sbrk_aligned>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	4e0e      	ldr	r6, [pc, #56]	; (80075e4 <sbrk_aligned+0x3c>)
 80075ac:	460c      	mov	r4, r1
 80075ae:	6831      	ldr	r1, [r6, #0]
 80075b0:	4605      	mov	r5, r0
 80075b2:	b911      	cbnz	r1, 80075ba <sbrk_aligned+0x12>
 80075b4:	f000 f88c 	bl	80076d0 <_sbrk_r>
 80075b8:	6030      	str	r0, [r6, #0]
 80075ba:	4621      	mov	r1, r4
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 f887 	bl	80076d0 <_sbrk_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d00a      	beq.n	80075dc <sbrk_aligned+0x34>
 80075c6:	1cc4      	adds	r4, r0, #3
 80075c8:	f024 0403 	bic.w	r4, r4, #3
 80075cc:	42a0      	cmp	r0, r4
 80075ce:	d007      	beq.n	80075e0 <sbrk_aligned+0x38>
 80075d0:	1a21      	subs	r1, r4, r0
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 f87c 	bl	80076d0 <_sbrk_r>
 80075d8:	3001      	adds	r0, #1
 80075da:	d101      	bne.n	80075e0 <sbrk_aligned+0x38>
 80075dc:	f04f 34ff 	mov.w	r4, #4294967295
 80075e0:	4620      	mov	r0, r4
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	20007948 	.word	0x20007948

080075e8 <_malloc_r>:
 80075e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ec:	1ccd      	adds	r5, r1, #3
 80075ee:	f025 0503 	bic.w	r5, r5, #3
 80075f2:	3508      	adds	r5, #8
 80075f4:	2d0c      	cmp	r5, #12
 80075f6:	bf38      	it	cc
 80075f8:	250c      	movcc	r5, #12
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	4607      	mov	r7, r0
 80075fe:	db01      	blt.n	8007604 <_malloc_r+0x1c>
 8007600:	42a9      	cmp	r1, r5
 8007602:	d905      	bls.n	8007610 <_malloc_r+0x28>
 8007604:	230c      	movs	r3, #12
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	2600      	movs	r6, #0
 800760a:	4630      	mov	r0, r6
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	4e2e      	ldr	r6, [pc, #184]	; (80076cc <_malloc_r+0xe4>)
 8007612:	f000 f949 	bl	80078a8 <__malloc_lock>
 8007616:	6833      	ldr	r3, [r6, #0]
 8007618:	461c      	mov	r4, r3
 800761a:	bb34      	cbnz	r4, 800766a <_malloc_r+0x82>
 800761c:	4629      	mov	r1, r5
 800761e:	4638      	mov	r0, r7
 8007620:	f7ff ffc2 	bl	80075a8 <sbrk_aligned>
 8007624:	1c43      	adds	r3, r0, #1
 8007626:	4604      	mov	r4, r0
 8007628:	d14d      	bne.n	80076c6 <_malloc_r+0xde>
 800762a:	6834      	ldr	r4, [r6, #0]
 800762c:	4626      	mov	r6, r4
 800762e:	2e00      	cmp	r6, #0
 8007630:	d140      	bne.n	80076b4 <_malloc_r+0xcc>
 8007632:	6823      	ldr	r3, [r4, #0]
 8007634:	4631      	mov	r1, r6
 8007636:	4638      	mov	r0, r7
 8007638:	eb04 0803 	add.w	r8, r4, r3
 800763c:	f000 f848 	bl	80076d0 <_sbrk_r>
 8007640:	4580      	cmp	r8, r0
 8007642:	d13a      	bne.n	80076ba <_malloc_r+0xd2>
 8007644:	6821      	ldr	r1, [r4, #0]
 8007646:	3503      	adds	r5, #3
 8007648:	1a6d      	subs	r5, r5, r1
 800764a:	f025 0503 	bic.w	r5, r5, #3
 800764e:	3508      	adds	r5, #8
 8007650:	2d0c      	cmp	r5, #12
 8007652:	bf38      	it	cc
 8007654:	250c      	movcc	r5, #12
 8007656:	4629      	mov	r1, r5
 8007658:	4638      	mov	r0, r7
 800765a:	f7ff ffa5 	bl	80075a8 <sbrk_aligned>
 800765e:	3001      	adds	r0, #1
 8007660:	d02b      	beq.n	80076ba <_malloc_r+0xd2>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	442b      	add	r3, r5
 8007666:	6023      	str	r3, [r4, #0]
 8007668:	e00e      	b.n	8007688 <_malloc_r+0xa0>
 800766a:	6822      	ldr	r2, [r4, #0]
 800766c:	1b52      	subs	r2, r2, r5
 800766e:	d41e      	bmi.n	80076ae <_malloc_r+0xc6>
 8007670:	2a0b      	cmp	r2, #11
 8007672:	d916      	bls.n	80076a2 <_malloc_r+0xba>
 8007674:	1961      	adds	r1, r4, r5
 8007676:	42a3      	cmp	r3, r4
 8007678:	6025      	str	r5, [r4, #0]
 800767a:	bf18      	it	ne
 800767c:	6059      	strne	r1, [r3, #4]
 800767e:	6863      	ldr	r3, [r4, #4]
 8007680:	bf08      	it	eq
 8007682:	6031      	streq	r1, [r6, #0]
 8007684:	5162      	str	r2, [r4, r5]
 8007686:	604b      	str	r3, [r1, #4]
 8007688:	4638      	mov	r0, r7
 800768a:	f104 060b 	add.w	r6, r4, #11
 800768e:	f000 f911 	bl	80078b4 <__malloc_unlock>
 8007692:	f026 0607 	bic.w	r6, r6, #7
 8007696:	1d23      	adds	r3, r4, #4
 8007698:	1af2      	subs	r2, r6, r3
 800769a:	d0b6      	beq.n	800760a <_malloc_r+0x22>
 800769c:	1b9b      	subs	r3, r3, r6
 800769e:	50a3      	str	r3, [r4, r2]
 80076a0:	e7b3      	b.n	800760a <_malloc_r+0x22>
 80076a2:	6862      	ldr	r2, [r4, #4]
 80076a4:	42a3      	cmp	r3, r4
 80076a6:	bf0c      	ite	eq
 80076a8:	6032      	streq	r2, [r6, #0]
 80076aa:	605a      	strne	r2, [r3, #4]
 80076ac:	e7ec      	b.n	8007688 <_malloc_r+0xa0>
 80076ae:	4623      	mov	r3, r4
 80076b0:	6864      	ldr	r4, [r4, #4]
 80076b2:	e7b2      	b.n	800761a <_malloc_r+0x32>
 80076b4:	4634      	mov	r4, r6
 80076b6:	6876      	ldr	r6, [r6, #4]
 80076b8:	e7b9      	b.n	800762e <_malloc_r+0x46>
 80076ba:	230c      	movs	r3, #12
 80076bc:	603b      	str	r3, [r7, #0]
 80076be:	4638      	mov	r0, r7
 80076c0:	f000 f8f8 	bl	80078b4 <__malloc_unlock>
 80076c4:	e7a1      	b.n	800760a <_malloc_r+0x22>
 80076c6:	6025      	str	r5, [r4, #0]
 80076c8:	e7de      	b.n	8007688 <_malloc_r+0xa0>
 80076ca:	bf00      	nop
 80076cc:	20007944 	.word	0x20007944

080076d0 <_sbrk_r>:
 80076d0:	b538      	push	{r3, r4, r5, lr}
 80076d2:	4d06      	ldr	r5, [pc, #24]	; (80076ec <_sbrk_r+0x1c>)
 80076d4:	2300      	movs	r3, #0
 80076d6:	4604      	mov	r4, r0
 80076d8:	4608      	mov	r0, r1
 80076da:	602b      	str	r3, [r5, #0]
 80076dc:	f7fa fb1e 	bl	8001d1c <_sbrk>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_sbrk_r+0x1a>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_sbrk_r+0x1a>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	2000794c 	.word	0x2000794c

080076f0 <__sread>:
 80076f0:	b510      	push	{r4, lr}
 80076f2:	460c      	mov	r4, r1
 80076f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076f8:	f000 fa3c 	bl	8007b74 <_read_r>
 80076fc:	2800      	cmp	r0, #0
 80076fe:	bfab      	itete	ge
 8007700:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007702:	89a3      	ldrhlt	r3, [r4, #12]
 8007704:	181b      	addge	r3, r3, r0
 8007706:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800770a:	bfac      	ite	ge
 800770c:	6563      	strge	r3, [r4, #84]	; 0x54
 800770e:	81a3      	strhlt	r3, [r4, #12]
 8007710:	bd10      	pop	{r4, pc}

08007712 <__swrite>:
 8007712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007716:	461f      	mov	r7, r3
 8007718:	898b      	ldrh	r3, [r1, #12]
 800771a:	05db      	lsls	r3, r3, #23
 800771c:	4605      	mov	r5, r0
 800771e:	460c      	mov	r4, r1
 8007720:	4616      	mov	r6, r2
 8007722:	d505      	bpl.n	8007730 <__swrite+0x1e>
 8007724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007728:	2302      	movs	r3, #2
 800772a:	2200      	movs	r2, #0
 800772c:	f000 f898 	bl	8007860 <_lseek_r>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800773a:	81a3      	strh	r3, [r4, #12]
 800773c:	4632      	mov	r2, r6
 800773e:	463b      	mov	r3, r7
 8007740:	4628      	mov	r0, r5
 8007742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007746:	f000 b817 	b.w	8007778 <_write_r>

0800774a <__sseek>:
 800774a:	b510      	push	{r4, lr}
 800774c:	460c      	mov	r4, r1
 800774e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007752:	f000 f885 	bl	8007860 <_lseek_r>
 8007756:	1c43      	adds	r3, r0, #1
 8007758:	89a3      	ldrh	r3, [r4, #12]
 800775a:	bf15      	itete	ne
 800775c:	6560      	strne	r0, [r4, #84]	; 0x54
 800775e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007766:	81a3      	strheq	r3, [r4, #12]
 8007768:	bf18      	it	ne
 800776a:	81a3      	strhne	r3, [r4, #12]
 800776c:	bd10      	pop	{r4, pc}

0800776e <__sclose>:
 800776e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007772:	f000 b831 	b.w	80077d8 <_close_r>
	...

08007778 <_write_r>:
 8007778:	b538      	push	{r3, r4, r5, lr}
 800777a:	4d07      	ldr	r5, [pc, #28]	; (8007798 <_write_r+0x20>)
 800777c:	4604      	mov	r4, r0
 800777e:	4608      	mov	r0, r1
 8007780:	4611      	mov	r1, r2
 8007782:	2200      	movs	r2, #0
 8007784:	602a      	str	r2, [r5, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	f7fa faae 	bl	8001ce8 <_write>
 800778c:	1c43      	adds	r3, r0, #1
 800778e:	d102      	bne.n	8007796 <_write_r+0x1e>
 8007790:	682b      	ldr	r3, [r5, #0]
 8007792:	b103      	cbz	r3, 8007796 <_write_r+0x1e>
 8007794:	6023      	str	r3, [r4, #0]
 8007796:	bd38      	pop	{r3, r4, r5, pc}
 8007798:	2000794c 	.word	0x2000794c

0800779c <__assert_func>:
 800779c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800779e:	4614      	mov	r4, r2
 80077a0:	461a      	mov	r2, r3
 80077a2:	4b09      	ldr	r3, [pc, #36]	; (80077c8 <__assert_func+0x2c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4605      	mov	r5, r0
 80077a8:	68d8      	ldr	r0, [r3, #12]
 80077aa:	b14c      	cbz	r4, 80077c0 <__assert_func+0x24>
 80077ac:	4b07      	ldr	r3, [pc, #28]	; (80077cc <__assert_func+0x30>)
 80077ae:	9100      	str	r1, [sp, #0]
 80077b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077b4:	4906      	ldr	r1, [pc, #24]	; (80077d0 <__assert_func+0x34>)
 80077b6:	462b      	mov	r3, r5
 80077b8:	f000 f81e 	bl	80077f8 <fiprintf>
 80077bc:	f000 f9f9 	bl	8007bb2 <abort>
 80077c0:	4b04      	ldr	r3, [pc, #16]	; (80077d4 <__assert_func+0x38>)
 80077c2:	461c      	mov	r4, r3
 80077c4:	e7f3      	b.n	80077ae <__assert_func+0x12>
 80077c6:	bf00      	nop
 80077c8:	20000014 	.word	0x20000014
 80077cc:	0800cb44 	.word	0x0800cb44
 80077d0:	0800cb51 	.word	0x0800cb51
 80077d4:	0800cb7f 	.word	0x0800cb7f

080077d8 <_close_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d06      	ldr	r5, [pc, #24]	; (80077f4 <_close_r+0x1c>)
 80077dc:	2300      	movs	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f7fa fa8e 	bl	8001d04 <_close>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_close_r+0x1a>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_close_r+0x1a>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	2000794c 	.word	0x2000794c

080077f8 <fiprintf>:
 80077f8:	b40e      	push	{r1, r2, r3}
 80077fa:	b503      	push	{r0, r1, lr}
 80077fc:	4601      	mov	r1, r0
 80077fe:	ab03      	add	r3, sp, #12
 8007800:	4805      	ldr	r0, [pc, #20]	; (8007818 <fiprintf+0x20>)
 8007802:	f853 2b04 	ldr.w	r2, [r3], #4
 8007806:	6800      	ldr	r0, [r0, #0]
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	f000 f883 	bl	8007914 <_vfiprintf_r>
 800780e:	b002      	add	sp, #8
 8007810:	f85d eb04 	ldr.w	lr, [sp], #4
 8007814:	b003      	add	sp, #12
 8007816:	4770      	bx	lr
 8007818:	20000014 	.word	0x20000014

0800781c <_fstat_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	; (800783c <_fstat_r+0x20>)
 8007820:	2300      	movs	r3, #0
 8007822:	4604      	mov	r4, r0
 8007824:	4608      	mov	r0, r1
 8007826:	4611      	mov	r1, r2
 8007828:	602b      	str	r3, [r5, #0]
 800782a:	f7fa fa6e 	bl	8001d0a <_fstat>
 800782e:	1c43      	adds	r3, r0, #1
 8007830:	d102      	bne.n	8007838 <_fstat_r+0x1c>
 8007832:	682b      	ldr	r3, [r5, #0]
 8007834:	b103      	cbz	r3, 8007838 <_fstat_r+0x1c>
 8007836:	6023      	str	r3, [r4, #0]
 8007838:	bd38      	pop	{r3, r4, r5, pc}
 800783a:	bf00      	nop
 800783c:	2000794c 	.word	0x2000794c

08007840 <_isatty_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4d06      	ldr	r5, [pc, #24]	; (800785c <_isatty_r+0x1c>)
 8007844:	2300      	movs	r3, #0
 8007846:	4604      	mov	r4, r0
 8007848:	4608      	mov	r0, r1
 800784a:	602b      	str	r3, [r5, #0]
 800784c:	f7fa fa62 	bl	8001d14 <_isatty>
 8007850:	1c43      	adds	r3, r0, #1
 8007852:	d102      	bne.n	800785a <_isatty_r+0x1a>
 8007854:	682b      	ldr	r3, [r5, #0]
 8007856:	b103      	cbz	r3, 800785a <_isatty_r+0x1a>
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	bd38      	pop	{r3, r4, r5, pc}
 800785c:	2000794c 	.word	0x2000794c

08007860 <_lseek_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	4d07      	ldr	r5, [pc, #28]	; (8007880 <_lseek_r+0x20>)
 8007864:	4604      	mov	r4, r0
 8007866:	4608      	mov	r0, r1
 8007868:	4611      	mov	r1, r2
 800786a:	2200      	movs	r2, #0
 800786c:	602a      	str	r2, [r5, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	f7fa fa52 	bl	8001d18 <_lseek>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d102      	bne.n	800787e <_lseek_r+0x1e>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	b103      	cbz	r3, 800787e <_lseek_r+0x1e>
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	2000794c 	.word	0x2000794c

08007884 <__ascii_mbtowc>:
 8007884:	b082      	sub	sp, #8
 8007886:	b901      	cbnz	r1, 800788a <__ascii_mbtowc+0x6>
 8007888:	a901      	add	r1, sp, #4
 800788a:	b142      	cbz	r2, 800789e <__ascii_mbtowc+0x1a>
 800788c:	b14b      	cbz	r3, 80078a2 <__ascii_mbtowc+0x1e>
 800788e:	7813      	ldrb	r3, [r2, #0]
 8007890:	600b      	str	r3, [r1, #0]
 8007892:	7812      	ldrb	r2, [r2, #0]
 8007894:	1e10      	subs	r0, r2, #0
 8007896:	bf18      	it	ne
 8007898:	2001      	movne	r0, #1
 800789a:	b002      	add	sp, #8
 800789c:	4770      	bx	lr
 800789e:	4610      	mov	r0, r2
 80078a0:	e7fb      	b.n	800789a <__ascii_mbtowc+0x16>
 80078a2:	f06f 0001 	mvn.w	r0, #1
 80078a6:	e7f8      	b.n	800789a <__ascii_mbtowc+0x16>

080078a8 <__malloc_lock>:
 80078a8:	4801      	ldr	r0, [pc, #4]	; (80078b0 <__malloc_lock+0x8>)
 80078aa:	f7ff ba28 	b.w	8006cfe <__retarget_lock_acquire_recursive>
 80078ae:	bf00      	nop
 80078b0:	20007940 	.word	0x20007940

080078b4 <__malloc_unlock>:
 80078b4:	4801      	ldr	r0, [pc, #4]	; (80078bc <__malloc_unlock+0x8>)
 80078b6:	f7ff ba23 	b.w	8006d00 <__retarget_lock_release_recursive>
 80078ba:	bf00      	nop
 80078bc:	20007940 	.word	0x20007940

080078c0 <__sfputc_r>:
 80078c0:	6893      	ldr	r3, [r2, #8]
 80078c2:	3b01      	subs	r3, #1
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	b410      	push	{r4}
 80078c8:	6093      	str	r3, [r2, #8]
 80078ca:	da08      	bge.n	80078de <__sfputc_r+0x1e>
 80078cc:	6994      	ldr	r4, [r2, #24]
 80078ce:	42a3      	cmp	r3, r4
 80078d0:	db01      	blt.n	80078d6 <__sfputc_r+0x16>
 80078d2:	290a      	cmp	r1, #10
 80078d4:	d103      	bne.n	80078de <__sfputc_r+0x1e>
 80078d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078da:	f7fe b919 	b.w	8005b10 <__swbuf_r>
 80078de:	6813      	ldr	r3, [r2, #0]
 80078e0:	1c58      	adds	r0, r3, #1
 80078e2:	6010      	str	r0, [r2, #0]
 80078e4:	7019      	strb	r1, [r3, #0]
 80078e6:	4608      	mov	r0, r1
 80078e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <__sfputs_r>:
 80078ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078f0:	4606      	mov	r6, r0
 80078f2:	460f      	mov	r7, r1
 80078f4:	4614      	mov	r4, r2
 80078f6:	18d5      	adds	r5, r2, r3
 80078f8:	42ac      	cmp	r4, r5
 80078fa:	d101      	bne.n	8007900 <__sfputs_r+0x12>
 80078fc:	2000      	movs	r0, #0
 80078fe:	e007      	b.n	8007910 <__sfputs_r+0x22>
 8007900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007904:	463a      	mov	r2, r7
 8007906:	4630      	mov	r0, r6
 8007908:	f7ff ffda 	bl	80078c0 <__sfputc_r>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d1f3      	bne.n	80078f8 <__sfputs_r+0xa>
 8007910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007914 <_vfiprintf_r>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	460d      	mov	r5, r1
 800791a:	b09d      	sub	sp, #116	; 0x74
 800791c:	4614      	mov	r4, r2
 800791e:	4698      	mov	r8, r3
 8007920:	4606      	mov	r6, r0
 8007922:	b118      	cbz	r0, 800792c <_vfiprintf_r+0x18>
 8007924:	6983      	ldr	r3, [r0, #24]
 8007926:	b90b      	cbnz	r3, 800792c <_vfiprintf_r+0x18>
 8007928:	f7ff f946 	bl	8006bb8 <__sinit>
 800792c:	4b89      	ldr	r3, [pc, #548]	; (8007b54 <_vfiprintf_r+0x240>)
 800792e:	429d      	cmp	r5, r3
 8007930:	d11b      	bne.n	800796a <_vfiprintf_r+0x56>
 8007932:	6875      	ldr	r5, [r6, #4]
 8007934:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007936:	07d9      	lsls	r1, r3, #31
 8007938:	d405      	bmi.n	8007946 <_vfiprintf_r+0x32>
 800793a:	89ab      	ldrh	r3, [r5, #12]
 800793c:	059a      	lsls	r2, r3, #22
 800793e:	d402      	bmi.n	8007946 <_vfiprintf_r+0x32>
 8007940:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007942:	f7ff f9dc 	bl	8006cfe <__retarget_lock_acquire_recursive>
 8007946:	89ab      	ldrh	r3, [r5, #12]
 8007948:	071b      	lsls	r3, r3, #28
 800794a:	d501      	bpl.n	8007950 <_vfiprintf_r+0x3c>
 800794c:	692b      	ldr	r3, [r5, #16]
 800794e:	b9eb      	cbnz	r3, 800798c <_vfiprintf_r+0x78>
 8007950:	4629      	mov	r1, r5
 8007952:	4630      	mov	r0, r6
 8007954:	f7fe f92e 	bl	8005bb4 <__swsetup_r>
 8007958:	b1c0      	cbz	r0, 800798c <_vfiprintf_r+0x78>
 800795a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800795c:	07dc      	lsls	r4, r3, #31
 800795e:	d50e      	bpl.n	800797e <_vfiprintf_r+0x6a>
 8007960:	f04f 30ff 	mov.w	r0, #4294967295
 8007964:	b01d      	add	sp, #116	; 0x74
 8007966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800796a:	4b7b      	ldr	r3, [pc, #492]	; (8007b58 <_vfiprintf_r+0x244>)
 800796c:	429d      	cmp	r5, r3
 800796e:	d101      	bne.n	8007974 <_vfiprintf_r+0x60>
 8007970:	68b5      	ldr	r5, [r6, #8]
 8007972:	e7df      	b.n	8007934 <_vfiprintf_r+0x20>
 8007974:	4b79      	ldr	r3, [pc, #484]	; (8007b5c <_vfiprintf_r+0x248>)
 8007976:	429d      	cmp	r5, r3
 8007978:	bf08      	it	eq
 800797a:	68f5      	ldreq	r5, [r6, #12]
 800797c:	e7da      	b.n	8007934 <_vfiprintf_r+0x20>
 800797e:	89ab      	ldrh	r3, [r5, #12]
 8007980:	0598      	lsls	r0, r3, #22
 8007982:	d4ed      	bmi.n	8007960 <_vfiprintf_r+0x4c>
 8007984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007986:	f7ff f9bb 	bl	8006d00 <__retarget_lock_release_recursive>
 800798a:	e7e9      	b.n	8007960 <_vfiprintf_r+0x4c>
 800798c:	2300      	movs	r3, #0
 800798e:	9309      	str	r3, [sp, #36]	; 0x24
 8007990:	2320      	movs	r3, #32
 8007992:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007996:	f8cd 800c 	str.w	r8, [sp, #12]
 800799a:	2330      	movs	r3, #48	; 0x30
 800799c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007b60 <_vfiprintf_r+0x24c>
 80079a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079a4:	f04f 0901 	mov.w	r9, #1
 80079a8:	4623      	mov	r3, r4
 80079aa:	469a      	mov	sl, r3
 80079ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079b0:	b10a      	cbz	r2, 80079b6 <_vfiprintf_r+0xa2>
 80079b2:	2a25      	cmp	r2, #37	; 0x25
 80079b4:	d1f9      	bne.n	80079aa <_vfiprintf_r+0x96>
 80079b6:	ebba 0b04 	subs.w	fp, sl, r4
 80079ba:	d00b      	beq.n	80079d4 <_vfiprintf_r+0xc0>
 80079bc:	465b      	mov	r3, fp
 80079be:	4622      	mov	r2, r4
 80079c0:	4629      	mov	r1, r5
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7ff ff93 	bl	80078ee <__sfputs_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	f000 80aa 	beq.w	8007b22 <_vfiprintf_r+0x20e>
 80079ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079d0:	445a      	add	r2, fp
 80079d2:	9209      	str	r2, [sp, #36]	; 0x24
 80079d4:	f89a 3000 	ldrb.w	r3, [sl]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	f000 80a2 	beq.w	8007b22 <_vfiprintf_r+0x20e>
 80079de:	2300      	movs	r3, #0
 80079e0:	f04f 32ff 	mov.w	r2, #4294967295
 80079e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079e8:	f10a 0a01 	add.w	sl, sl, #1
 80079ec:	9304      	str	r3, [sp, #16]
 80079ee:	9307      	str	r3, [sp, #28]
 80079f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079f4:	931a      	str	r3, [sp, #104]	; 0x68
 80079f6:	4654      	mov	r4, sl
 80079f8:	2205      	movs	r2, #5
 80079fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079fe:	4858      	ldr	r0, [pc, #352]	; (8007b60 <_vfiprintf_r+0x24c>)
 8007a00:	f7f8 fc6e 	bl	80002e0 <memchr>
 8007a04:	9a04      	ldr	r2, [sp, #16]
 8007a06:	b9d8      	cbnz	r0, 8007a40 <_vfiprintf_r+0x12c>
 8007a08:	06d1      	lsls	r1, r2, #27
 8007a0a:	bf44      	itt	mi
 8007a0c:	2320      	movmi	r3, #32
 8007a0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a12:	0713      	lsls	r3, r2, #28
 8007a14:	bf44      	itt	mi
 8007a16:	232b      	movmi	r3, #43	; 0x2b
 8007a18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a1c:	f89a 3000 	ldrb.w	r3, [sl]
 8007a20:	2b2a      	cmp	r3, #42	; 0x2a
 8007a22:	d015      	beq.n	8007a50 <_vfiprintf_r+0x13c>
 8007a24:	9a07      	ldr	r2, [sp, #28]
 8007a26:	4654      	mov	r4, sl
 8007a28:	2000      	movs	r0, #0
 8007a2a:	f04f 0c0a 	mov.w	ip, #10
 8007a2e:	4621      	mov	r1, r4
 8007a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a34:	3b30      	subs	r3, #48	; 0x30
 8007a36:	2b09      	cmp	r3, #9
 8007a38:	d94e      	bls.n	8007ad8 <_vfiprintf_r+0x1c4>
 8007a3a:	b1b0      	cbz	r0, 8007a6a <_vfiprintf_r+0x156>
 8007a3c:	9207      	str	r2, [sp, #28]
 8007a3e:	e014      	b.n	8007a6a <_vfiprintf_r+0x156>
 8007a40:	eba0 0308 	sub.w	r3, r0, r8
 8007a44:	fa09 f303 	lsl.w	r3, r9, r3
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	9304      	str	r3, [sp, #16]
 8007a4c:	46a2      	mov	sl, r4
 8007a4e:	e7d2      	b.n	80079f6 <_vfiprintf_r+0xe2>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	1d19      	adds	r1, r3, #4
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	9103      	str	r1, [sp, #12]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	bfbb      	ittet	lt
 8007a5c:	425b      	neglt	r3, r3
 8007a5e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a62:	9307      	strge	r3, [sp, #28]
 8007a64:	9307      	strlt	r3, [sp, #28]
 8007a66:	bfb8      	it	lt
 8007a68:	9204      	strlt	r2, [sp, #16]
 8007a6a:	7823      	ldrb	r3, [r4, #0]
 8007a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a6e:	d10c      	bne.n	8007a8a <_vfiprintf_r+0x176>
 8007a70:	7863      	ldrb	r3, [r4, #1]
 8007a72:	2b2a      	cmp	r3, #42	; 0x2a
 8007a74:	d135      	bne.n	8007ae2 <_vfiprintf_r+0x1ce>
 8007a76:	9b03      	ldr	r3, [sp, #12]
 8007a78:	1d1a      	adds	r2, r3, #4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	9203      	str	r2, [sp, #12]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	bfb8      	it	lt
 8007a82:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a86:	3402      	adds	r4, #2
 8007a88:	9305      	str	r3, [sp, #20]
 8007a8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007b70 <_vfiprintf_r+0x25c>
 8007a8e:	7821      	ldrb	r1, [r4, #0]
 8007a90:	2203      	movs	r2, #3
 8007a92:	4650      	mov	r0, sl
 8007a94:	f7f8 fc24 	bl	80002e0 <memchr>
 8007a98:	b140      	cbz	r0, 8007aac <_vfiprintf_r+0x198>
 8007a9a:	2340      	movs	r3, #64	; 0x40
 8007a9c:	eba0 000a 	sub.w	r0, r0, sl
 8007aa0:	fa03 f000 	lsl.w	r0, r3, r0
 8007aa4:	9b04      	ldr	r3, [sp, #16]
 8007aa6:	4303      	orrs	r3, r0
 8007aa8:	3401      	adds	r4, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ab0:	482c      	ldr	r0, [pc, #176]	; (8007b64 <_vfiprintf_r+0x250>)
 8007ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ab6:	2206      	movs	r2, #6
 8007ab8:	f7f8 fc12 	bl	80002e0 <memchr>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	d03f      	beq.n	8007b40 <_vfiprintf_r+0x22c>
 8007ac0:	4b29      	ldr	r3, [pc, #164]	; (8007b68 <_vfiprintf_r+0x254>)
 8007ac2:	bb1b      	cbnz	r3, 8007b0c <_vfiprintf_r+0x1f8>
 8007ac4:	9b03      	ldr	r3, [sp, #12]
 8007ac6:	3307      	adds	r3, #7
 8007ac8:	f023 0307 	bic.w	r3, r3, #7
 8007acc:	3308      	adds	r3, #8
 8007ace:	9303      	str	r3, [sp, #12]
 8007ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ad2:	443b      	add	r3, r7
 8007ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ad6:	e767      	b.n	80079a8 <_vfiprintf_r+0x94>
 8007ad8:	fb0c 3202 	mla	r2, ip, r2, r3
 8007adc:	460c      	mov	r4, r1
 8007ade:	2001      	movs	r0, #1
 8007ae0:	e7a5      	b.n	8007a2e <_vfiprintf_r+0x11a>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	3401      	adds	r4, #1
 8007ae6:	9305      	str	r3, [sp, #20]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	f04f 0c0a 	mov.w	ip, #10
 8007aee:	4620      	mov	r0, r4
 8007af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007af4:	3a30      	subs	r2, #48	; 0x30
 8007af6:	2a09      	cmp	r2, #9
 8007af8:	d903      	bls.n	8007b02 <_vfiprintf_r+0x1ee>
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0c5      	beq.n	8007a8a <_vfiprintf_r+0x176>
 8007afe:	9105      	str	r1, [sp, #20]
 8007b00:	e7c3      	b.n	8007a8a <_vfiprintf_r+0x176>
 8007b02:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b06:	4604      	mov	r4, r0
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e7f0      	b.n	8007aee <_vfiprintf_r+0x1da>
 8007b0c:	ab03      	add	r3, sp, #12
 8007b0e:	9300      	str	r3, [sp, #0]
 8007b10:	462a      	mov	r2, r5
 8007b12:	4b16      	ldr	r3, [pc, #88]	; (8007b6c <_vfiprintf_r+0x258>)
 8007b14:	a904      	add	r1, sp, #16
 8007b16:	4630      	mov	r0, r6
 8007b18:	f7fd fbba 	bl	8005290 <_printf_float>
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	1c78      	adds	r0, r7, #1
 8007b20:	d1d6      	bne.n	8007ad0 <_vfiprintf_r+0x1bc>
 8007b22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b24:	07d9      	lsls	r1, r3, #31
 8007b26:	d405      	bmi.n	8007b34 <_vfiprintf_r+0x220>
 8007b28:	89ab      	ldrh	r3, [r5, #12]
 8007b2a:	059a      	lsls	r2, r3, #22
 8007b2c:	d402      	bmi.n	8007b34 <_vfiprintf_r+0x220>
 8007b2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b30:	f7ff f8e6 	bl	8006d00 <__retarget_lock_release_recursive>
 8007b34:	89ab      	ldrh	r3, [r5, #12]
 8007b36:	065b      	lsls	r3, r3, #25
 8007b38:	f53f af12 	bmi.w	8007960 <_vfiprintf_r+0x4c>
 8007b3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b3e:	e711      	b.n	8007964 <_vfiprintf_r+0x50>
 8007b40:	ab03      	add	r3, sp, #12
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	462a      	mov	r2, r5
 8007b46:	4b09      	ldr	r3, [pc, #36]	; (8007b6c <_vfiprintf_r+0x258>)
 8007b48:	a904      	add	r1, sp, #16
 8007b4a:	4630      	mov	r0, r6
 8007b4c:	f7fd fe44 	bl	80057d8 <_printf_i>
 8007b50:	e7e4      	b.n	8007b1c <_vfiprintf_r+0x208>
 8007b52:	bf00      	nop
 8007b54:	0800c9a8 	.word	0x0800c9a8
 8007b58:	0800c9c8 	.word	0x0800c9c8
 8007b5c:	0800c988 	.word	0x0800c988
 8007b60:	0800cb8a 	.word	0x0800cb8a
 8007b64:	0800cb94 	.word	0x0800cb94
 8007b68:	08005291 	.word	0x08005291
 8007b6c:	080078ef 	.word	0x080078ef
 8007b70:	0800cb90 	.word	0x0800cb90

08007b74 <_read_r>:
 8007b74:	b538      	push	{r3, r4, r5, lr}
 8007b76:	4d07      	ldr	r5, [pc, #28]	; (8007b94 <_read_r+0x20>)
 8007b78:	4604      	mov	r4, r0
 8007b7a:	4608      	mov	r0, r1
 8007b7c:	4611      	mov	r1, r2
 8007b7e:	2200      	movs	r2, #0
 8007b80:	602a      	str	r2, [r5, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f7fa f8a2 	bl	8001ccc <_read>
 8007b88:	1c43      	adds	r3, r0, #1
 8007b8a:	d102      	bne.n	8007b92 <_read_r+0x1e>
 8007b8c:	682b      	ldr	r3, [r5, #0]
 8007b8e:	b103      	cbz	r3, 8007b92 <_read_r+0x1e>
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	bd38      	pop	{r3, r4, r5, pc}
 8007b94:	2000794c 	.word	0x2000794c

08007b98 <__ascii_wctomb>:
 8007b98:	b149      	cbz	r1, 8007bae <__ascii_wctomb+0x16>
 8007b9a:	2aff      	cmp	r2, #255	; 0xff
 8007b9c:	bf85      	ittet	hi
 8007b9e:	238a      	movhi	r3, #138	; 0x8a
 8007ba0:	6003      	strhi	r3, [r0, #0]
 8007ba2:	700a      	strbls	r2, [r1, #0]
 8007ba4:	f04f 30ff 	movhi.w	r0, #4294967295
 8007ba8:	bf98      	it	ls
 8007baa:	2001      	movls	r0, #1
 8007bac:	4770      	bx	lr
 8007bae:	4608      	mov	r0, r1
 8007bb0:	4770      	bx	lr

08007bb2 <abort>:
 8007bb2:	b508      	push	{r3, lr}
 8007bb4:	2006      	movs	r0, #6
 8007bb6:	f000 f82b 	bl	8007c10 <raise>
 8007bba:	2001      	movs	r0, #1
 8007bbc:	f7fa f880 	bl	8001cc0 <_exit>

08007bc0 <_raise_r>:
 8007bc0:	291f      	cmp	r1, #31
 8007bc2:	b538      	push	{r3, r4, r5, lr}
 8007bc4:	4604      	mov	r4, r0
 8007bc6:	460d      	mov	r5, r1
 8007bc8:	d904      	bls.n	8007bd4 <_raise_r+0x14>
 8007bca:	2316      	movs	r3, #22
 8007bcc:	6003      	str	r3, [r0, #0]
 8007bce:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd2:	bd38      	pop	{r3, r4, r5, pc}
 8007bd4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007bd6:	b112      	cbz	r2, 8007bde <_raise_r+0x1e>
 8007bd8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007bdc:	b94b      	cbnz	r3, 8007bf2 <_raise_r+0x32>
 8007bde:	4620      	mov	r0, r4
 8007be0:	f000 f830 	bl	8007c44 <_getpid_r>
 8007be4:	462a      	mov	r2, r5
 8007be6:	4601      	mov	r1, r0
 8007be8:	4620      	mov	r0, r4
 8007bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bee:	f000 b817 	b.w	8007c20 <_kill_r>
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d00a      	beq.n	8007c0c <_raise_r+0x4c>
 8007bf6:	1c59      	adds	r1, r3, #1
 8007bf8:	d103      	bne.n	8007c02 <_raise_r+0x42>
 8007bfa:	2316      	movs	r3, #22
 8007bfc:	6003      	str	r3, [r0, #0]
 8007bfe:	2001      	movs	r0, #1
 8007c00:	e7e7      	b.n	8007bd2 <_raise_r+0x12>
 8007c02:	2400      	movs	r4, #0
 8007c04:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007c08:	4628      	mov	r0, r5
 8007c0a:	4798      	blx	r3
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	e7e0      	b.n	8007bd2 <_raise_r+0x12>

08007c10 <raise>:
 8007c10:	4b02      	ldr	r3, [pc, #8]	; (8007c1c <raise+0xc>)
 8007c12:	4601      	mov	r1, r0
 8007c14:	6818      	ldr	r0, [r3, #0]
 8007c16:	f7ff bfd3 	b.w	8007bc0 <_raise_r>
 8007c1a:	bf00      	nop
 8007c1c:	20000014 	.word	0x20000014

08007c20 <_kill_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d07      	ldr	r5, [pc, #28]	; (8007c40 <_kill_r+0x20>)
 8007c24:	2300      	movs	r3, #0
 8007c26:	4604      	mov	r4, r0
 8007c28:	4608      	mov	r0, r1
 8007c2a:	4611      	mov	r1, r2
 8007c2c:	602b      	str	r3, [r5, #0]
 8007c2e:	f7fa f83f 	bl	8001cb0 <_kill>
 8007c32:	1c43      	adds	r3, r0, #1
 8007c34:	d102      	bne.n	8007c3c <_kill_r+0x1c>
 8007c36:	682b      	ldr	r3, [r5, #0]
 8007c38:	b103      	cbz	r3, 8007c3c <_kill_r+0x1c>
 8007c3a:	6023      	str	r3, [r4, #0]
 8007c3c:	bd38      	pop	{r3, r4, r5, pc}
 8007c3e:	bf00      	nop
 8007c40:	2000794c 	.word	0x2000794c

08007c44 <_getpid_r>:
 8007c44:	f7fa b832 	b.w	8001cac <_getpid>

08007c48 <sqrtf>:
 8007c48:	b508      	push	{r3, lr}
 8007c4a:	ed2d 8b02 	vpush	{d8}
 8007c4e:	eeb0 8a40 	vmov.f32	s16, s0
 8007c52:	f000 f817 	bl	8007c84 <__ieee754_sqrtf>
 8007c56:	eeb4 8a48 	vcmp.f32	s16, s16
 8007c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c5e:	d60c      	bvs.n	8007c7a <sqrtf+0x32>
 8007c60:	eddf 8a07 	vldr	s17, [pc, #28]	; 8007c80 <sqrtf+0x38>
 8007c64:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c6c:	d505      	bpl.n	8007c7a <sqrtf+0x32>
 8007c6e:	f7fd fa2f 	bl	80050d0 <__errno>
 8007c72:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007c76:	2321      	movs	r3, #33	; 0x21
 8007c78:	6003      	str	r3, [r0, #0]
 8007c7a:	ecbd 8b02 	vpop	{d8}
 8007c7e:	bd08      	pop	{r3, pc}
 8007c80:	00000000 	.word	0x00000000

08007c84 <__ieee754_sqrtf>:
 8007c84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007c88:	4770      	bx	lr
	...

08007c8c <_init>:
 8007c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c8e:	bf00      	nop
 8007c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c92:	bc08      	pop	{r3}
 8007c94:	469e      	mov	lr, r3
 8007c96:	4770      	bx	lr

08007c98 <_fini>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	bf00      	nop
 8007c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c9e:	bc08      	pop	{r3}
 8007ca0:	469e      	mov	lr, r3
 8007ca2:	4770      	bx	lr
