
ASD_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007414  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004c0c  080075e8  080075e8  000175e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1f4  0800c1f4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c1f4  0800c1f4  0001c1f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c1fc  0800c1fc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c1fc  0800c1fc  0001c1fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c200  0800c200  0001c200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004adc  200001e4  0800c3e8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cc0  0800c3e8  00024cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b9ce  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004111  00000000  00000000  0003bbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000106a9  00000000  00000000  0003fcf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  000503a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001380  00000000  00000000  00051290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002535c  00000000  00000000  00052610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c2c8  00000000  00000000  0007796c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2bd3  00000000  00000000  00093c34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  00176807  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c40  00000000  00000000  001768c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075cc 	.word	0x080075cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	080075cc 	.word	0x080075cc

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b974 	b.w	8001048 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	468e      	mov	lr, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14d      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4694      	mov	ip, r2
 8000d8a:	d969      	bls.n	8000e60 <__udivmoddi4+0xe8>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b152      	cbz	r2, 8000da8 <__udivmoddi4+0x30>
 8000d92:	fa01 f302 	lsl.w	r3, r1, r2
 8000d96:	f1c2 0120 	rsb	r1, r2, #32
 8000d9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da2:	ea41 0e03 	orr.w	lr, r1, r3
 8000da6:	4094      	lsls	r4, r2
 8000da8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dac:	0c21      	lsrs	r1, r4, #16
 8000dae:	fbbe f6f8 	udiv	r6, lr, r8
 8000db2:	fa1f f78c 	uxth.w	r7, ip
 8000db6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dbe:	fb06 f107 	mul.w	r1, r6, r7
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dce:	f080 811f 	bcs.w	8001010 <__udivmoddi4+0x298>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 811c 	bls.w	8001010 <__udivmoddi4+0x298>
 8000dd8:	3e02      	subs	r6, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dec:	fb00 f707 	mul.w	r7, r0, r7
 8000df0:	42a7      	cmp	r7, r4
 8000df2:	d90a      	bls.n	8000e0a <__udivmoddi4+0x92>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	f080 810a 	bcs.w	8001014 <__udivmoddi4+0x29c>
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	f240 8107 	bls.w	8001014 <__udivmoddi4+0x29c>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0e:	1be4      	subs	r4, r4, r7
 8000e10:	2600      	movs	r6, #0
 8000e12:	b11d      	cbz	r5, 8000e1c <__udivmoddi4+0xa4>
 8000e14:	40d4      	lsrs	r4, r2
 8000e16:	2300      	movs	r3, #0
 8000e18:	e9c5 4300 	strd	r4, r3, [r5]
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d909      	bls.n	8000e3a <__udivmoddi4+0xc2>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	f000 80ef 	beq.w	800100a <__udivmoddi4+0x292>
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e32:	4630      	mov	r0, r6
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	fab3 f683 	clz	r6, r3
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d14a      	bne.n	8000ed8 <__udivmoddi4+0x160>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xd4>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 80f9 	bhi.w	800103e <__udivmoddi4+0x2c6>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	469e      	mov	lr, r3
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e0      	beq.n	8000e1c <__udivmoddi4+0xa4>
 8000e5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5e:	e7dd      	b.n	8000e1c <__udivmoddi4+0xa4>
 8000e60:	b902      	cbnz	r2, 8000e64 <__udivmoddi4+0xec>
 8000e62:	deff      	udf	#255	; 0xff
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	f040 8092 	bne.w	8000f92 <__udivmoddi4+0x21a>
 8000e6e:	eba1 010c 	sub.w	r1, r1, ip
 8000e72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e76:	fa1f fe8c 	uxth.w	lr, ip
 8000e7a:	2601      	movs	r6, #1
 8000e7c:	0c20      	lsrs	r0, r4, #16
 8000e7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e82:	fb07 1113 	mls	r1, r7, r3, r1
 8000e86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8a:	fb0e f003 	mul.w	r0, lr, r3
 8000e8e:	4288      	cmp	r0, r1
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x12c>
 8000e92:	eb1c 0101 	adds.w	r1, ip, r1
 8000e96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x12a>
 8000e9c:	4288      	cmp	r0, r1
 8000e9e:	f200 80cb 	bhi.w	8001038 <__udivmoddi4+0x2c0>
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1a09      	subs	r1, r1, r0
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x156>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec4:	d202      	bcs.n	8000ecc <__udivmoddi4+0x154>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	f200 80bb 	bhi.w	8001042 <__udivmoddi4+0x2ca>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	eba4 040e 	sub.w	r4, r4, lr
 8000ed2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed6:	e79c      	b.n	8000e12 <__udivmoddi4+0x9a>
 8000ed8:	f1c6 0720 	rsb	r7, r6, #32
 8000edc:	40b3      	lsls	r3, r6
 8000ede:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eea:	fa01 f306 	lsl.w	r3, r1, r6
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	40f9      	lsrs	r1, r7
 8000ef2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef6:	fa00 f306 	lsl.w	r3, r0, r6
 8000efa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efe:	0c20      	lsrs	r0, r4, #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fb09 1118 	mls	r1, r9, r8, r1
 8000f08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f10:	4288      	cmp	r0, r1
 8000f12:	fa02 f206 	lsl.w	r2, r2, r6
 8000f16:	d90b      	bls.n	8000f30 <__udivmoddi4+0x1b8>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f20:	f080 8088 	bcs.w	8001034 <__udivmoddi4+0x2bc>
 8000f24:	4288      	cmp	r0, r1
 8000f26:	f240 8085 	bls.w	8001034 <__udivmoddi4+0x2bc>
 8000f2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f38:	fb09 1110 	mls	r1, r9, r0, r1
 8000f3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f44:	458e      	cmp	lr, r1
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x1e2>
 8000f48:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f50:	d26c      	bcs.n	800102c <__udivmoddi4+0x2b4>
 8000f52:	458e      	cmp	lr, r1
 8000f54:	d96a      	bls.n	800102c <__udivmoddi4+0x2b4>
 8000f56:	3802      	subs	r0, #2
 8000f58:	4461      	add	r1, ip
 8000f5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f62:	eba1 010e 	sub.w	r1, r1, lr
 8000f66:	42a1      	cmp	r1, r4
 8000f68:	46c8      	mov	r8, r9
 8000f6a:	46a6      	mov	lr, r4
 8000f6c:	d356      	bcc.n	800101c <__udivmoddi4+0x2a4>
 8000f6e:	d053      	beq.n	8001018 <__udivmoddi4+0x2a0>
 8000f70:	b15d      	cbz	r5, 8000f8a <__udivmoddi4+0x212>
 8000f72:	ebb3 0208 	subs.w	r2, r3, r8
 8000f76:	eb61 010e 	sbc.w	r1, r1, lr
 8000f7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f82:	40f1      	lsrs	r1, r6
 8000f84:	431f      	orrs	r7, r3
 8000f86:	e9c5 7100 	strd	r7, r1, [r5]
 8000f8a:	2600      	movs	r6, #0
 8000f8c:	4631      	mov	r1, r6
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	f1c2 0320 	rsb	r3, r2, #32
 8000f96:	40d8      	lsrs	r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000fa0:	4091      	lsls	r1, r2
 8000fa2:	4301      	orrs	r1, r0
 8000fa4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa8:	fa1f fe8c 	uxth.w	lr, ip
 8000fac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb4:	0c0b      	lsrs	r3, r1, #16
 8000fb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fba:	fb00 f60e 	mul.w	r6, r0, lr
 8000fbe:	429e      	cmp	r6, r3
 8000fc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc4:	d908      	bls.n	8000fd8 <__udivmoddi4+0x260>
 8000fc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fce:	d22f      	bcs.n	8001030 <__udivmoddi4+0x2b8>
 8000fd0:	429e      	cmp	r6, r3
 8000fd2:	d92d      	bls.n	8001030 <__udivmoddi4+0x2b8>
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1b9b      	subs	r3, r3, r6
 8000fda:	b289      	uxth	r1, r1
 8000fdc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fe0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fec:	428b      	cmp	r3, r1
 8000fee:	d908      	bls.n	8001002 <__udivmoddi4+0x28a>
 8000ff0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff8:	d216      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d914      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000ffe:	3e02      	subs	r6, #2
 8001000:	4461      	add	r1, ip
 8001002:	1ac9      	subs	r1, r1, r3
 8001004:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001008:	e738      	b.n	8000e7c <__udivmoddi4+0x104>
 800100a:	462e      	mov	r6, r5
 800100c:	4628      	mov	r0, r5
 800100e:	e705      	b.n	8000e1c <__udivmoddi4+0xa4>
 8001010:	4606      	mov	r6, r0
 8001012:	e6e3      	b.n	8000ddc <__udivmoddi4+0x64>
 8001014:	4618      	mov	r0, r3
 8001016:	e6f8      	b.n	8000e0a <__udivmoddi4+0x92>
 8001018:	454b      	cmp	r3, r9
 800101a:	d2a9      	bcs.n	8000f70 <__udivmoddi4+0x1f8>
 800101c:	ebb9 0802 	subs.w	r8, r9, r2
 8001020:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001024:	3801      	subs	r0, #1
 8001026:	e7a3      	b.n	8000f70 <__udivmoddi4+0x1f8>
 8001028:	4646      	mov	r6, r8
 800102a:	e7ea      	b.n	8001002 <__udivmoddi4+0x28a>
 800102c:	4620      	mov	r0, r4
 800102e:	e794      	b.n	8000f5a <__udivmoddi4+0x1e2>
 8001030:	4640      	mov	r0, r8
 8001032:	e7d1      	b.n	8000fd8 <__udivmoddi4+0x260>
 8001034:	46d0      	mov	r8, sl
 8001036:	e77b      	b.n	8000f30 <__udivmoddi4+0x1b8>
 8001038:	3b02      	subs	r3, #2
 800103a:	4461      	add	r1, ip
 800103c:	e732      	b.n	8000ea4 <__udivmoddi4+0x12c>
 800103e:	4630      	mov	r0, r6
 8001040:	e709      	b.n	8000e56 <__udivmoddi4+0xde>
 8001042:	4464      	add	r4, ip
 8001044:	3802      	subs	r0, #2
 8001046:	e742      	b.n	8000ece <__udivmoddi4+0x156>

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <ASD_FFT_Init>:
		for(int i = 0; i < 512; i++)
			usable_magnitudes[i] = 2.0/1024 * fft_magnitudes[i];
	}
}

void ASD_FFT_Init() {
 800104c:	b513      	push	{r0, r1, r4, lr}
	key_samples[0] = (uint16_t *)(&samples_buffer[0]);
 800104e:	4918      	ldr	r1, [pc, #96]	; (80010b0 <ASD_FFT_Init+0x64>)
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <ASD_FFT_Init+0x68>)
	key_samples[1] = (uint16_t *)(&samples_buffer[1024]);
 8001052:	f501 6200 	add.w	r2, r1, #2048	; 0x800
 8001056:	605a      	str	r2, [r3, #4]
	key_samples[0] = (uint16_t *)(&samples_buffer[0]);
 8001058:	6019      	str	r1, [r3, #0]

	key_magnitudes[0] = (float32_t *)(&fft_magnitudes[0]);
 800105a:	4a17      	ldr	r2, [pc, #92]	; (80010b8 <ASD_FFT_Init+0x6c>)
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <ASD_FFT_Init+0x70>)
 800105e:	6013      	str	r3, [r2, #0]
	key_magnitudes[1] = (float32_t *)(&fft_magnitudes[1024]);
 8001060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001064:	6053      	str	r3, [r2, #4]

	for(int i = 0; i < 1024*2; i++)
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <ASD_FFT_Init+0x74>)
 8001068:	2200      	movs	r2, #0
		samples_buffer[i] = ADC_SAMPLES[i];
 800106a:	f833 0b02 	ldrh.w	r0, [r3], #2
 800106e:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
	for(int i = 0; i < 1024*2; i++)
 8001072:	3201      	adds	r2, #1
 8001074:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001078:	d1f7      	bne.n	800106a <ASD_FFT_Init+0x1e>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples_buffer, FFT_SAMPLES_COUNT * 2); //2x1024 samples for buffer
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <ASD_FFT_Init+0x64>)
 800107c:	4811      	ldr	r0, [pc, #68]	; (80010c4 <ASD_FFT_Init+0x78>)
	HAL_TIM_Base_Start(&htim6);
	HAL_TIM_Base_Start_IT(&htim7);

	// https://deepbluembedded.com/stm32-dac-sine-wave-generation-stm32-dac-dma-timer-example/
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)DAC_SINE_SAMPLES, DAC_SINE_SAMPLES_COUNT, DAC_ALIGN_12B_R);
    HAL_TIM_Base_Start(&htim2);
 800107e:	4c12      	ldr	r4, [pc, #72]	; (80010c8 <ASD_FFT_Init+0x7c>)
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples_buffer, FFT_SAMPLES_COUNT * 2); //2x1024 samples for buffer
 8001080:	f000 feae 	bl	8001de0 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 8001084:	4811      	ldr	r0, [pc, #68]	; (80010cc <ASD_FFT_Init+0x80>)
 8001086:	f001 ff3b 	bl	8002f00 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 800108a:	4811      	ldr	r0, [pc, #68]	; (80010d0 <ASD_FFT_Init+0x84>)
 800108c:	f001 ff6e 	bl	8002f6c <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)DAC_SINE_SAMPLES, DAC_SINE_SAMPLES_COUNT, DAC_ALIGN_12B_R);
 8001090:	2100      	movs	r1, #0
 8001092:	4a10      	ldr	r2, [pc, #64]	; (80010d4 <ASD_FFT_Init+0x88>)
 8001094:	9100      	str	r1, [sp, #0]
 8001096:	2380      	movs	r3, #128	; 0x80
 8001098:	480f      	ldr	r0, [pc, #60]	; (80010d8 <ASD_FFT_Init+0x8c>)
 800109a:	f001 f8a9 	bl	80021f0 <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2);
 800109e:	4620      	mov	r0, r4
 80010a0:	f001 ff2e 	bl	8002f00 <HAL_TIM_Base_Start>
		//todo switch channel
	} else {
		if(freq > DAC_FREQ_D_SMP_CNT)
			freq = DAC_FREQ_D_SMP_CNT;
		uint32_t arr = (uint32_t)(DAC_FREQ_D_SMP_CNT/freq);
		__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 80010a4:	6822      	ldr	r2, [r4, #0]
 80010a6:	2321      	movs	r3, #33	; 0x21
 80010a8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010aa:	60e3      	str	r3, [r4, #12]
}
 80010ac:	b002      	add	sp, #8
 80010ae:	bd10      	pop	{r4, pc}
 80010b0:	2000326c 	.word	0x2000326c
 80010b4:	20003258 	.word	0x20003258
 80010b8:	20003250 	.word	0x20003250
 80010bc:	20002250 	.word	0x20002250
 80010c0:	080076c6 	.word	0x080076c6
 80010c4:	20004a70 	.word	0x20004a70
 80010c8:	20004b90 	.word	0x20004b90
 80010cc:	20004bd8 	.word	0x20004bd8
 80010d0:	20004c20 	.word	0x20004c20
 80010d4:	080086c6 	.word	0x080086c6
 80010d8:	20004b18 	.word	0x20004b18

080010dc <ASD_Next_Batch_Aquired>:
	sapling_time_micros = __HAL_TIM_GET_COUNTER(&htim6);
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <ASD_Next_Batch_Aquired+0x4c>)
 80010de:	4913      	ldr	r1, [pc, #76]	; (800112c <ASD_Next_Batch_Aquired+0x50>)
 80010e0:	681a      	ldr	r2, [r3, #0]
	cycle_dt = sapling_time_micros / (float32_t)(1e6); //sampling tiome is [s]
 80010e2:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001130 <ASD_Next_Batch_Aquired+0x54>
	sapling_time_micros = __HAL_TIM_GET_COUNTER(&htim6);
 80010e6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	800b      	strh	r3, [r1, #0]
	cycle_dt = sapling_time_micros / (float32_t)(1e6); //sampling tiome is [s]
 80010ec:	880b      	ldrh	r3, [r1, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	ee07 3a90 	vmov	s15, r3
 80010f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <ASD_Next_Batch_Aquired+0x58>)
 80010fa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80010fe:	2100      	movs	r1, #0
	cycle_dt = sapling_time_micros / (float32_t)(1e6); //sampling tiome is [s]
 8001100:	ed83 7a00 	vstr	s14, [r3]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001104:	6251      	str	r1, [r2, #36]	; 0x24
	if(state == STATE_FFT_DONE) {
 8001106:	4a0c      	ldr	r2, [pc, #48]	; (8001138 <ASD_Next_Batch_Aquired+0x5c>)
 8001108:	6813      	ldr	r3, [r2, #0]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d10a      	bne.n	8001124 <ASD_Next_Batch_Aquired+0x48>
		samplesBufferIndex ^= 1;
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <ASD_Next_Batch_Aquired+0x60>)
 8001110:	6803      	ldr	r3, [r0, #0]
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	6003      	str	r3, [r0, #0]
		magnitudesBufferIndex ^= 1;
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <ASD_Next_Batch_Aquired+0x64>)
 800111a:	6803      	ldr	r3, [r0, #0]
 800111c:	f083 0301 	eor.w	r3, r3, #1
 8001120:	6003      	str	r3, [r0, #0]
		state = STATE_SAMPL_DONE;
 8001122:	6011      	str	r1, [r2, #0]
}
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20004bd8 	.word	0x20004bd8
 800112c:	2000426c 	.word	0x2000426c
 8001130:	49742400 	.word	0x49742400
 8001134:	2000024c 	.word	0x2000024c
 8001138:	20000004 	.word	0x20000004
 800113c:	20000000 	.word	0x20000000
 8001140:	20003260 	.word	0x20003260

08001144 <ASD_update>:
	}
}

void ASD_update() {
}
 8001144:	4770      	bx	lr
	...

08001148 <ASD_Print_Results>:

void ASD_Print_Results() {
 8001148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800114c:	ed2d 8b04 	vpush	{d8-d9}
	int b_in_idx = samplesBufferIndex;
 8001150:	4ba9      	ldr	r3, [pc, #676]	; (80013f8 <ASD_Print_Results+0x2b0>)
void ASD_Print_Results() {
 8001152:	f5ad 5d41 	sub.w	sp, sp, #12352	; 0x3040
	int b_in_idx = samplesBufferIndex;
 8001156:	681f      	ldr	r7, [r3, #0]
	int b_mag_idx = magnitudesBufferIndex;
 8001158:	4ba8      	ldr	r3, [pc, #672]	; (80013fc <ASD_Print_Results+0x2b4>)
void ASD_Print_Results() {
 800115a:	b08d      	sub	sp, #52	; 0x34
	int b_mag_idx = magnitudesBufferIndex;
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	9305      	str	r3, [sp, #20]

	float32_t sapling_time_millis = sapling_time_micros/1000.0;
 8001160:	4ba7      	ldr	r3, [pc, #668]	; (8001400 <ASD_Print_Results+0x2b8>)
 8001162:	8818      	ldrh	r0, [r3, #0]
 8001164:	b280      	uxth	r0, r0
 8001166:	f7ff fa5d 	bl	8000624 <__aeabi_i2d>
 800116a:	4ba6      	ldr	r3, [pc, #664]	; (8001404 <ASD_Print_Results+0x2bc>)
 800116c:	2200      	movs	r2, #0
 800116e:	f7ff fbed 	bl	800094c <__aeabi_ddiv>
 8001172:	f7ff fd99 	bl	8000ca8 <__aeabi_d2f>
	float32_t sampling_freq_kHz = 1.0/(sapling_time_millis/FFT_SAMPLES_COUNT); //todo lol
 8001176:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8001408 <ASD_Print_Results+0x2c0>

	//freeze state
	volatile uint16_t samples_buffer_print[1024];
	for(int i = 0; i < 1024; i++)
		samples_buffer_print[i] = *(key_samples[b_in_idx] + i);
 800117a:	4ba4      	ldr	r3, [pc, #656]	; (800140c <ASD_Print_Results+0x2c4>)
	float32_t sapling_time_millis = sapling_time_micros/1000.0;
 800117c:	ee08 0a10 	vmov	s16, r0
	float32_t sampling_freq_kHz = 1.0/(sapling_time_millis/FFT_SAMPLES_COUNT); //todo lol
 8001180:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001188:	ee87 9a27 	vdiv.f32	s18, s14, s15
		samples_buffer_print[i] = *(key_samples[b_in_idx] + i);
 800118c:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 8001190:	ae1c      	add	r6, sp, #112	; 0x70
	for(int i = 0; i < 1024; i++)
 8001192:	2300      	movs	r3, #0
		samples_buffer_print[i] = *(key_samples[b_in_idx] + i);
 8001194:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001198:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
	for(int i = 0; i < 1024; i++)
 800119c:	3301      	adds	r3, #1
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a2:	d1f7      	bne.n	8001194 <ASD_Print_Results+0x4c>
	if (state == STATE_SAMPL_DONE) {
 80011a4:	4b9a      	ldr	r3, [pc, #616]	; (8001410 <ASD_Print_Results+0x2c8>)
 80011a6:	f8d3 8000 	ldr.w	r8, [r3]
 80011aa:	f04f 0b00 	mov.w	fp, #0
 80011ae:	f1b8 0f00 	cmp.w	r8, #0
 80011b2:	d154      	bne.n	800125e <ASD_Print_Results+0x116>
 80011b4:	f8df 9264 	ldr.w	r9, [pc, #612]	; 800141c <ASD_Print_Results+0x2d4>
		for(int i = 1; i < 1024 * 2; i+=2)
 80011b8:	2301      	movs	r3, #1
	if (state == STATE_SAMPL_DONE) {
 80011ba:	464a      	mov	r2, r9
		for(int i = 1; i < 1024 * 2; i+=2)
 80011bc:	f640 0101 	movw	r1, #2049	; 0x801
 80011c0:	3302      	adds	r3, #2
 80011c2:	428b      	cmp	r3, r1
			fft_input[i] = 0.0;
 80011c4:	f8c2 b004 	str.w	fp, [r2, #4]
		for(int i = 1; i < 1024 * 2; i+=2)
 80011c8:	f102 0208 	add.w	r2, r2, #8
 80011cc:	d1f8      	bne.n	80011c0 <ASD_Print_Results+0x78>
			fft_input[i] = (2.0 * samples_buffer[i/2] / 4095.0) - 1.0;
 80011ce:	a586      	add	r5, pc, #536	; (adr r5, 80013e8 <ASD_Print_Results+0x2a0>)
 80011d0:	e9d5 4500 	ldrd	r4, r5, [r5]
 80011d4:	f8df a280 	ldr.w	sl, [pc, #640]	; 8001458 <ASD_Print_Results+0x310>
 80011d8:	ea4f 0368 	mov.w	r3, r8, asr #1
		for(int i = 0; i < 1024 * 2; i+=2)
 80011dc:	f108 0802 	add.w	r8, r8, #2
			fft_input[i] = (2.0 * samples_buffer[i/2] / 4095.0) - 1.0;
 80011e0:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 80011e4:	b280      	uxth	r0, r0
 80011e6:	f7ff fa1d 	bl	8000624 <__aeabi_i2d>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	f7ff f8cd 	bl	800038c <__adddf3>
 80011f2:	4622      	mov	r2, r4
 80011f4:	462b      	mov	r3, r5
 80011f6:	f7ff fba9 	bl	800094c <__aeabi_ddiv>
 80011fa:	4b86      	ldr	r3, [pc, #536]	; (8001414 <ASD_Print_Results+0x2cc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	f7ff f8c3 	bl	8000388 <__aeabi_dsub>
 8001202:	f7ff fd51 	bl	8000ca8 <__aeabi_d2f>
		for(int i = 0; i < 1024 * 2; i+=2)
 8001206:	f5b8 6f00 	cmp.w	r8, #2048	; 0x800
			fft_input[i] = (2.0 * samples_buffer[i/2] / 4095.0) - 1.0;
 800120a:	f849 0b08 	str.w	r0, [r9], #8
		for(int i = 0; i < 1024 * 2; i+=2)
 800120e:	d1e3      	bne.n	80011d8 <ASD_Print_Results+0x90>
			fft_magnitudes[i] = 0.0;
 8001210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001214:	2100      	movs	r1, #0
 8001216:	4880      	ldr	r0, [pc, #512]	; (8001418 <ASD_Print_Results+0x2d0>)
 8001218:	f003 fc1a 	bl	8004a50 <memset>
		arm_cfft_f32(&arm_cfft_sR_f32_len1024, fft_input, 0, 1);
 800121c:	2301      	movs	r3, #1
 800121e:	497f      	ldr	r1, [pc, #508]	; (800141c <ASD_Print_Results+0x2d4>)
 8001220:	487f      	ldr	r0, [pc, #508]	; (8001420 <ASD_Print_Results+0x2d8>)
 8001222:	2200      	movs	r2, #0
 8001224:	f002 ff88 	bl	8004138 <arm_cfft_f32>
		arm_cmplx_mag_f32(fft_input, fft_magnitudes, FFT_SAMPLES_COUNT);
 8001228:	497b      	ldr	r1, [pc, #492]	; (8001418 <ASD_Print_Results+0x2d0>)
 800122a:	487c      	ldr	r0, [pc, #496]	; (800141c <ASD_Print_Results+0x2d4>)
 800122c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001230:	f002 fffc 	bl	800422c <arm_cmplx_mag_f32>
		arm_max_f32(fft_magnitudes, FFT_SAMPLES_COUNT, &maxMag, &maxMagIndex);
 8001234:	4b7b      	ldr	r3, [pc, #492]	; (8001424 <ASD_Print_Results+0x2dc>)
 8001236:	4a7c      	ldr	r2, [pc, #496]	; (8001428 <ASD_Print_Results+0x2e0>)
 8001238:	4877      	ldr	r0, [pc, #476]	; (8001418 <ASD_Print_Results+0x2d0>)
 800123a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800123e:	f002 fbe5 	bl	8003a0c <arm_max_f32>
		for(int i = 0; i < 512; i++)
 8001242:	4975      	ldr	r1, [pc, #468]	; (8001418 <ASD_Print_Results+0x2d0>)
 8001244:	4a79      	ldr	r2, [pc, #484]	; (800142c <ASD_Print_Results+0x2e4>)
			usable_magnitudes[i] = 2.0/1024 * fft_magnitudes[i];
 8001246:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001430 <ASD_Print_Results+0x2e8>
		arm_max_f32(fft_magnitudes, FFT_SAMPLES_COUNT, &maxMag, &maxMagIndex);
 800124a:	f44f 7300 	mov.w	r3, #512	; 0x200
			usable_magnitudes[i] = 2.0/1024 * fft_magnitudes[i];
 800124e:	ecf1 7a01 	vldmia	r1!, {s15}
 8001252:	ee67 7a87 	vmul.f32	s15, s15, s14
		for(int i = 0; i < 512; i++)
 8001256:	3b01      	subs	r3, #1
			usable_magnitudes[i] = 2.0/1024 * fft_magnitudes[i];
 8001258:	ece2 7a01 	vstmia	r2!, {s15}
		for(int i = 0; i < 512; i++)
 800125c:	d1f7      	bne.n	800124e <ASD_Print_Results+0x106>
		bounds_heights[i] = 0;
 800125e:	4d75      	ldr	r5, [pc, #468]	; (8001434 <ASD_Print_Results+0x2ec>)
		arm_max_f32(fft_magnitudes, FFT_SAMPLES_COUNT, &maxMag, &maxMagIndex);
 8001260:	2300      	movs	r3, #0
		bounds_heights[i] = 0;
 8001262:	eb05 0283 	add.w	r2, r5, r3, lsl #2
	for(int i = 0; i < 19; i++)
 8001266:	3301      	adds	r3, #1
 8001268:	2b13      	cmp	r3, #19
		bounds_heights[i] = 0;
 800126a:	f8c2 b000 	str.w	fp, [r2]
	for(int i = 0; i < 19; i++)
 800126e:	d1f8      	bne.n	8001262 <ASD_Print_Results+0x11a>
		if(usable_magnitudes[i] > 0.01)
 8001270:	f20f 197c 	addw	r9, pc, #380	; 0x17c
 8001274:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001278:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 800142c <ASD_Print_Results+0x2e4>
			bounds_heights[bins[i]] += usable_magnitudes[i];
 800127c:	f8df b1dc 	ldr.w	fp, [pc, #476]	; 800145c <ASD_Print_Results+0x314>
	for(int i = 0; i < 512; i++) {
 8001280:	2400      	movs	r4, #0
		if(usable_magnitudes[i] > 0.01)
 8001282:	ecfa 8a01 	vldmia	sl!, {s17}
 8001286:	ee18 0a90 	vmov	r0, s17
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_f2d>
 800128e:	4642      	mov	r2, r8
 8001290:	464b      	mov	r3, r9
 8001292:	f7ff fcc1 	bl	8000c18 <__aeabi_dcmpgt>
 8001296:	b148      	cbz	r0, 80012ac <ASD_Print_Results+0x164>
			bounds_heights[bins[i]] += usable_magnitudes[i];
 8001298:	f85b 3024 	ldr.w	r3, [fp, r4, lsl #2]
 800129c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	ee78 8aa7 	vadd.f32	s17, s17, s15
 80012a8:	edc3 8a00 	vstr	s17, [r3]
	for(int i = 0; i < 512; i++) {
 80012ac:	3401      	adds	r4, #1
 80012ae:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80012b2:	d1e6      	bne.n	8001282 <ASD_Print_Results+0x13a>
 80012b4:	f50d 5a83 	add.w	sl, sp, #4192	; 0x1060
 80012b8:	f50d 5901 	add.w	r9, sp, #8256	; 0x2040
 80012bc:	f10a 0a10 	add.w	sl, sl, #16
 80012c0:	f109 0930 	add.w	r9, r9, #48	; 0x30
 80012c4:	4b55      	ldr	r3, [pc, #340]	; (800141c <ASD_Print_Results+0x2d4>)
 80012c6:	4649      	mov	r1, r9
 80012c8:	4650      	mov	r0, sl
	calFFT(b_in_idx, b_mag_idx);
	mags_to_bounds();

	float32_t real_print[1024];
	float32_t imag_print[1024];
	for(int i = 0; i < 1024; i++){
 80012ca:	2200      	movs	r2, #0
		real_print[i] = fft_input[i*2];
 80012cc:	681c      	ldr	r4, [r3, #0]
 80012ce:	f840 4b04 	str.w	r4, [r0], #4
	for(int i = 0; i < 1024; i++){
 80012d2:	3201      	adds	r2, #1
		imag_print[i] = fft_input[i*2 + 1];
 80012d4:	685c      	ldr	r4, [r3, #4]
 80012d6:	f841 4b04 	str.w	r4, [r1], #4
	for(int i = 0; i < 1024; i++){
 80012da:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80012de:	f103 0308 	add.w	r3, r3, #8
 80012e2:	d1f3      	bne.n	80012cc <ASD_Print_Results+0x184>
	}

	float32_t usable_magnitudes_print[512];
	for(int i = 0; i < 512; i++)
		usable_magnitudes_print[i] = usable_magnitudes[i];
 80012e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e8:	4950      	ldr	r1, [pc, #320]	; (800142c <ASD_Print_Results+0x2e4>)
 80012ea:	f50d 6007 	add.w	r0, sp, #2160	; 0x870
 80012ee:	f10d 0824 	add.w	r8, sp, #36	; 0x24
 80012f2:	f003 fb9f 	bl	8004a34 <memcpy>
 80012f6:	4642      	mov	r2, r8

	float32_t bounds_heights_print[19];
	for(int i = 0; i < 19; i++)
 80012f8:	2300      	movs	r3, #0
		bounds_heights_print[i] = bounds_heights[i];
 80012fa:	eb05 0183 	add.w	r1, r5, r3, lsl #2
	for(int i = 0; i < 19; i++)
 80012fe:	3301      	adds	r3, #1
		bounds_heights_print[i] = bounds_heights[i];
 8001300:	6809      	ldr	r1, [r1, #0]
 8001302:	f842 1b04 	str.w	r1, [r2], #4
	for(int i = 0; i < 19; i++)
 8001306:	2b13      	cmp	r3, #19
 8001308:	d1f7      	bne.n	80012fa <ASD_Print_Results+0x1b2>

	//print results

	printf("\n\n\n\nSTART\n");
 800130a:	484b      	ldr	r0, [pc, #300]	; (8001438 <ASD_Print_Results+0x2f0>)
	printf("\n\nSampling time o 1024 samples: %.2f ms. Sampling frequency: %.2f kHz, s_idx %d, m_idx %d\n", sapling_time_millis, sampling_freq_kHz, b_in_idx, b_mag_idx);
	for(int i = 0; i < 1024; i++)
		printf("%d, ", samples_buffer_print[i]);
 800130c:	4d4b      	ldr	r5, [pc, #300]	; (800143c <ASD_Print_Results+0x2f4>)
	printf("\n\n\n\nSTART\n");
 800130e:	f004 f897 	bl	8005440 <puts>
	printf("\n\nSampling time o 1024 samples: %.2f ms. Sampling frequency: %.2f kHz, s_idx %d, m_idx %d\n", sapling_time_millis, sampling_freq_kHz, b_in_idx, b_mag_idx);
 8001312:	ee18 0a10 	vmov	r0, s16
 8001316:	f7ff f997 	bl	8000648 <__aeabi_f2d>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8001322:	9b05      	ldr	r3, [sp, #20]
 8001324:	ee19 0a10 	vmov	r0, s18
 8001328:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800132c:	f7ff f98c 	bl	8000648 <__aeabi_f2d>
 8001330:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001334:	e9cd 0100 	strd	r0, r1, [sp]
 8001338:	4841      	ldr	r0, [pc, #260]	; (8001440 <ASD_Print_Results+0x2f8>)
 800133a:	f003 fffb 	bl	8005334 <iprintf>
	for(int i = 0; i < 1024; i++)
 800133e:	2400      	movs	r4, #0
		printf("%d, ", samples_buffer_print[i]);
 8001340:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 8001344:	4628      	mov	r0, r5
 8001346:	b289      	uxth	r1, r1
	for(int i = 0; i < 1024; i++)
 8001348:	3401      	adds	r4, #1
		printf("%d, ", samples_buffer_print[i]);
 800134a:	f003 fff3 	bl	8005334 <iprintf>
	for(int i = 0; i < 1024; i++)
 800134e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8001352:	d1f5      	bne.n	8001340 <ASD_Print_Results+0x1f8>


	printf("\n\nReal part, count: 1024\n");
 8001354:	483b      	ldr	r0, [pc, #236]	; (8001444 <ASD_Print_Results+0x2fc>)
	for(int i = 0; i < 1024; i++)
		printf("%.3f, ", real_print[i]);
 8001356:	4d3c      	ldr	r5, [pc, #240]	; (8001448 <ASD_Print_Results+0x300>)
	printf("\n\nReal part, count: 1024\n");
 8001358:	f004 f872 	bl	8005440 <puts>
		printf("%.3f, ", real_print[i]);
 800135c:	f85a 0b04 	ldr.w	r0, [sl], #4
 8001360:	f7ff f972 	bl	8000648 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4628      	mov	r0, r5
 800136a:	f003 ffe3 	bl	8005334 <iprintf>
	for(int i = 0; i < 1024; i++)
 800136e:	3c01      	subs	r4, #1
 8001370:	d1f4      	bne.n	800135c <ASD_Print_Results+0x214>

	printf("\n\nImaginary part, count: 1024\n");
 8001372:	4836      	ldr	r0, [pc, #216]	; (800144c <ASD_Print_Results+0x304>)
	for(int i = 0; i < 1024; i++)
		printf("%.3f, ", imag_print[i]);
 8001374:	4d34      	ldr	r5, [pc, #208]	; (8001448 <ASD_Print_Results+0x300>)
	printf("\n\nImaginary part, count: 1024\n");
 8001376:	f004 f863 	bl	8005440 <puts>
 800137a:	f44f 6480 	mov.w	r4, #1024	; 0x400
		printf("%.3f, ", imag_print[i]);
 800137e:	f859 0b04 	ldr.w	r0, [r9], #4
 8001382:	f7ff f961 	bl	8000648 <__aeabi_f2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4628      	mov	r0, r5
 800138c:	f003 ffd2 	bl	8005334 <iprintf>
	for(int i = 0; i < 1024; i++)
 8001390:	3c01      	subs	r4, #1
 8001392:	d1f4      	bne.n	800137e <ASD_Print_Results+0x236>

	printf("\n\nMagnitudes, count: 512\n");
 8001394:	482e      	ldr	r0, [pc, #184]	; (8001450 <ASD_Print_Results+0x308>)
	for(int i = 0; i < 512; i++)
		printf("%.3f, ", usable_magnitudes_print[i]);
 8001396:	4e2c      	ldr	r6, [pc, #176]	; (8001448 <ASD_Print_Results+0x300>)
	printf("\n\nMagnitudes, count: 512\n");
 8001398:	f004 f852 	bl	8005440 <puts>
	for(int i = 0; i < 512; i++)
 800139c:	f50d 6407 	add.w	r4, sp, #2160	; 0x870
	printf("\n\nMagnitudes, count: 512\n");
 80013a0:	f44f 7500 	mov.w	r5, #512	; 0x200
		printf("%.3f, ", usable_magnitudes_print[i]);
 80013a4:	f854 0b04 	ldr.w	r0, [r4], #4
 80013a8:	f7ff f94e 	bl	8000648 <__aeabi_f2d>
 80013ac:	4602      	mov	r2, r0
 80013ae:	460b      	mov	r3, r1
 80013b0:	4630      	mov	r0, r6
 80013b2:	f003 ffbf 	bl	8005334 <iprintf>
	for(int i = 0; i < 512; i++)
 80013b6:	3d01      	subs	r5, #1
 80013b8:	d1f4      	bne.n	80013a4 <ASD_Print_Results+0x25c>

	printf("\n\nBounds heights, count: 19\n");
 80013ba:	4826      	ldr	r0, [pc, #152]	; (8001454 <ASD_Print_Results+0x30c>)
	for(int i = 0; i < 19; i++)
		printf("%.3f, ", bounds_heights_print[i]);
 80013bc:	4d22      	ldr	r5, [pc, #136]	; (8001448 <ASD_Print_Results+0x300>)
	printf("\n\nBounds heights, count: 19\n");
 80013be:	f004 f83f 	bl	8005440 <puts>
 80013c2:	2413      	movs	r4, #19
		printf("%.3f, ", bounds_heights_print[i]);
 80013c4:	f858 0b04 	ldr.w	r0, [r8], #4
 80013c8:	f7ff f93e 	bl	8000648 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4628      	mov	r0, r5
 80013d2:	f003 ffaf 	bl	8005334 <iprintf>
	for(int i = 0; i < 19; i++)
 80013d6:	3c01      	subs	r4, #1
 80013d8:	d1f4      	bne.n	80013c4 <ASD_Print_Results+0x27c>

}
 80013da:	f50d 5d41 	add.w	sp, sp, #12352	; 0x3040
 80013de:	b00d      	add	sp, #52	; 0x34
 80013e0:	ecbd 8b04 	vpop	{d8-d9}
 80013e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013e8:	00000000 	.word	0x00000000
 80013ec:	40affe00 	.word	0x40affe00
 80013f0:	47ae147b 	.word	0x47ae147b
 80013f4:	3f847ae1 	.word	0x3f847ae1
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20003260 	.word	0x20003260
 8001400:	2000426c 	.word	0x2000426c
 8001404:	408f4000 	.word	0x408f4000
 8001408:	3a800000 	.word	0x3a800000
 800140c:	20003258 	.word	0x20003258
 8001410:	20000004 	.word	0x20000004
 8001414:	3ff00000 	.word	0x3ff00000
 8001418:	20002250 	.word	0x20002250
 800141c:	20000250 	.word	0x20000250
 8001420:	08008ff8 	.word	0x08008ff8
 8001424:	20003268 	.word	0x20003268
 8001428:	20003264 	.word	0x20003264
 800142c:	20004270 	.word	0x20004270
 8001430:	3b000000 	.word	0x3b000000
 8001434:	20000200 	.word	0x20000200
 8001438:	080075e8 	.word	0x080075e8
 800143c:	0800764d 	.word	0x0800764d
 8001440:	080075f2 	.word	0x080075f2
 8001444:	08007652 	.word	0x08007652
 8001448:	0800766b 	.word	0x0800766b
 800144c:	08007672 	.word	0x08007672
 8001450:	08007690 	.word	0x08007690
 8001454:	080076a9 	.word	0x080076a9
 8001458:	2000326c 	.word	0x2000326c
 800145c:	080087c8 	.word	0x080087c8

08001460 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001460:	b530      	push	{r4, r5, lr}
 8001462:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001464:	2210      	movs	r2, #16
 8001466:	2100      	movs	r1, #0
 8001468:	4668      	mov	r0, sp
 800146a:	f003 faf1 	bl	8004a50 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800146e:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_ADC1_Init+0x5c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001470:	4a13      	ldr	r2, [pc, #76]	; (80014c0 <MX_ADC1_Init+0x60>)
 8001472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001476:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001478:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800147a:	e9c0 2300 	strd	r2, r3, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_ADC1_Init+0x64>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001480:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001482:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001484:	7605      	strb	r5, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001486:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800148a:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800148c:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800148e:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001490:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001492:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001496:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001498:	f000 fbfc 	bl	8001c94 <HAL_ADC_Init>
 800149c:	b108      	cbz	r0, 80014a2 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 800149e:	f000 f9b3 	bl	8001808 <Error_Handler>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014a2:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_ADC1_Init+0x5c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80014a6:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014a8:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 80014aa:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ae:	f000 fd89 	bl	8001fc4 <HAL_ADC_ConfigChannel>
 80014b2:	b108      	cbz	r0, 80014b8 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 80014b4:	f000 f9a8 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014b8:	b005      	add	sp, #20
 80014ba:	bd30      	pop	{r4, r5, pc}
 80014bc:	20004a70 	.word	0x20004a70
 80014c0:	40012000 	.word	0x40012000
 80014c4:	0f000001 	.word	0x0f000001

080014c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014c8:	b570      	push	{r4, r5, r6, lr}
 80014ca:	4606      	mov	r6, r0
 80014cc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	2214      	movs	r2, #20
 80014d0:	2100      	movs	r1, #0
 80014d2:	a803      	add	r0, sp, #12
 80014d4:	f003 fabc 	bl	8004a50 <memset>
  if(adcHandle->Instance==ADC1)
 80014d8:	6832      	ldr	r2, [r6, #0]
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <HAL_ADC_MspInit+0x94>)
 80014dc:	429a      	cmp	r2, r3
 80014de:	d13a      	bne.n	8001556 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014e0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80014e4:	2500      	movs	r5, #0
 80014e6:	9501      	str	r5, [sp, #4]
 80014e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ea:	481d      	ldr	r0, [pc, #116]	; (8001560 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80014ec:	4c1d      	ldr	r4, [pc, #116]	; (8001564 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014f2:	645a      	str	r2, [r3, #68]	; 0x44
 80014f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80014fa:	9201      	str	r2, [sp, #4]
 80014fc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	9502      	str	r5, [sp, #8]
 8001500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001512:	2201      	movs	r2, #1
 8001514:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001516:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001518:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f001 f916 	bl	800274c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001522:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001526:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800152a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800152e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001532:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001536:	f44f 7380 	mov.w	r3, #256	; 0x100
 800153a:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800153e:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001540:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001544:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001548:	f000 ff32 	bl	80023b0 <HAL_DMA_Init>
 800154c:	b108      	cbz	r0, 8001552 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 800154e:	f000 f95b 	bl	8001808 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001552:	63b4      	str	r4, [r6, #56]	; 0x38
 8001554:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001556:	b008      	add	sp, #32
 8001558:	bd70      	pop	{r4, r5, r6, pc}
 800155a:	bf00      	nop
 800155c:	40012000 	.word	0x40012000
 8001560:	40020000 	.word	0x40020000
 8001564:	20004ab8 	.word	0x20004ab8
 8001568:	40026410 	.word	0x40026410

0800156c <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 800156c:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800156e:	480c      	ldr	r0, [pc, #48]	; (80015a0 <MX_DAC_Init+0x34>)
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_DAC_Init+0x38>)
 8001572:	6003      	str	r3, [r0, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8001574:	2400      	movs	r4, #0
 8001576:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800157a:	f000 fe25 	bl	80021c8 <HAL_DAC_Init>
 800157e:	b108      	cbz	r0, 8001584 <MX_DAC_Init+0x18>
  {
    Error_Handler();
 8001580:	f000 f942 	bl	8001808 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001584:	2324      	movs	r3, #36	; 0x24
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001586:	4806      	ldr	r0, [pc, #24]	; (80015a0 <MX_DAC_Init+0x34>)
 8001588:	2200      	movs	r2, #0
 800158a:	4669      	mov	r1, sp
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800158c:	e9cd 3400 	strd	r3, r4, [sp]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001590:	f000 feb8 	bl	8002304 <HAL_DAC_ConfigChannel>
 8001594:	b108      	cbz	r0, 800159a <MX_DAC_Init+0x2e>
  {
    Error_Handler();
 8001596:	f000 f937 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800159a:	b002      	add	sp, #8
 800159c:	bd10      	pop	{r4, pc}
 800159e:	bf00      	nop
 80015a0:	20004b18 	.word	0x20004b18
 80015a4:	40007400 	.word	0x40007400

080015a8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80015a8:	b570      	push	{r4, r5, r6, lr}
 80015aa:	4605      	mov	r5, r0
 80015ac:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ae:	2214      	movs	r2, #20
 80015b0:	2100      	movs	r1, #0
 80015b2:	a803      	add	r0, sp, #12
 80015b4:	f003 fa4c 	bl	8004a50 <memset>
  if(dacHandle->Instance==DAC)
 80015b8:	682a      	ldr	r2, [r5, #0]
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <HAL_DAC_MspInit+0x98>)
 80015bc:	429a      	cmp	r2, r3
 80015be:	d13d      	bne.n	800163c <HAL_DAC_MspInit+0x94>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80015c0:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80015c4:	2600      	movs	r6, #0
 80015c6:	9601      	str	r6, [sp, #4]
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ca:	481e      	ldr	r0, [pc, #120]	; (8001644 <HAL_DAC_MspInit+0x9c>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80015cc:	4c1e      	ldr	r4, [pc, #120]	; (8001648 <HAL_DAC_MspInit+0xa0>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80015ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80015d2:	641a      	str	r2, [r3, #64]	; 0x40
 80015d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d6:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80015da:	9201      	str	r2, [sp, #4]
 80015dc:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	9602      	str	r6, [sp, #8]
 80015e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	631a      	str	r2, [r3, #48]	; 0x30
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	9302      	str	r3, [sp, #8]
 80015f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f2:	2210      	movs	r2, #16
 80015f4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fc:	f001 f8a6 	bl	800274c <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001600:	4912      	ldr	r1, [pc, #72]	; (800164c <HAL_DAC_MspInit+0xa4>)
 8001602:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8001606:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800160a:	2340      	movs	r3, #64	; 0x40
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800160c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001614:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001618:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800161c:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8001620:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001624:	4620      	mov	r0, r4
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001626:	e9c4 c306 	strd	ip, r3, [r4, #24]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162a:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800162e:	f000 febf 	bl	80023b0 <HAL_DMA_Init>
 8001632:	b108      	cbz	r0, 8001638 <HAL_DAC_MspInit+0x90>
    {
      Error_Handler();
 8001634:	f000 f8e8 	bl	8001808 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001638:	60ac      	str	r4, [r5, #8]
 800163a:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800163c:	b008      	add	sp, #32
 800163e:	bd70      	pop	{r4, r5, r6, pc}
 8001640:	40007400 	.word	0x40007400
 8001644:	40020000 	.word	0x40020000
 8001648:	20004b2c 	.word	0x20004b2c
 800164c:	40026088 	.word	0x40026088

08001650 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001650:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001652:	4b14      	ldr	r3, [pc, #80]	; (80016a4 <MX_DMA_Init+0x54>)
 8001654:	2200      	movs	r2, #0
 8001656:	9200      	str	r2, [sp, #0]
 8001658:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800165a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 800165e:	6319      	str	r1, [r3, #48]	; 0x30
 8001660:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001662:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001666:	9100      	str	r1, [sp, #0]
 8001668:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800166a:	9201      	str	r2, [sp, #4]
 800166c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8001672:	6319      	str	r1, [r3, #48]	; 0x30
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800167a:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 800167c:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800167e:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001680:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001682:	f000 fd4d 	bl	8002120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001686:	2010      	movs	r0, #16
 8001688:	f000 fd7c 	bl	8002184 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	2102      	movs	r1, #2
 8001690:	2038      	movs	r0, #56	; 0x38
 8001692:	f000 fd45 	bl	8002120 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001696:	2038      	movs	r0, #56	; 0x38

}
 8001698:	b003      	add	sp, #12
 800169a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800169e:	f000 bd71 	b.w	8002184 <HAL_NVIC_EnableIRQ>
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800

080016a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a8:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	4b06      	ldr	r3, [pc, #24]	; (80016c8 <MX_GPIO_Init+0x20>)
 80016b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016b2:	f042 0201 	orr.w	r2, r2, #1
 80016b6:	631a      	str	r2, [r3, #48]	; 0x30
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9b01      	ldr	r3, [sp, #4]

}
 80016c2:	b002      	add	sp, #8
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	40023800 	.word	0x40023800

080016cc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80016cc:	b507      	push	{r0, r1, r2, lr}
  if (ch == '\n') {
 80016ce:	280a      	cmp	r0, #10
int __io_putchar(int ch) {
 80016d0:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 80016d2:	d102      	bne.n	80016da <__io_putchar+0xe>
    __io_putchar('\r');
 80016d4:	200d      	movs	r0, #13
 80016d6:	f7ff fff9 	bl	80016cc <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	2201      	movs	r2, #1
 80016e0:	a901      	add	r1, sp, #4
 80016e2:	4803      	ldr	r0, [pc, #12]	; (80016f0 <__io_putchar+0x24>)
 80016e4:	f001 ff8a 	bl	80035fc <HAL_UART_Transmit>
  return 1;
}
 80016e8:	2001      	movs	r0, #1
 80016ea:	b003      	add	sp, #12
 80016ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80016f0:	20004c68 	.word	0x20004c68

080016f4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
  if (htim == &htim7) {
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80016f6:	4283      	cmp	r3, r0
 80016f8:	d101      	bne.n	80016fe <HAL_TIM_PeriodElapsedCallback+0xa>
    ASD_update();
 80016fa:	f7ff bd23 	b.w	8001144 <ASD_update>
    //raczej po tym trzeba wyliczyc animacje
  }
}
 80016fe:	4770      	bx	lr
 8001700:	20004c20 	.word	0x20004c20

08001704 <HAL_ADC_ConvCpltCallback>:
		ASD_Next_Batch_Aquired();
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
	if(AdcHandle == &hadc1) {
 8001704:	4b02      	ldr	r3, [pc, #8]	; (8001710 <HAL_ADC_ConvCpltCallback+0xc>)
 8001706:	4283      	cmp	r3, r0
 8001708:	d101      	bne.n	800170e <HAL_ADC_ConvCpltCallback+0xa>
		ASD_Next_Batch_Aquired();
 800170a:	f7ff bce7 	b.w	80010dc <ASD_Next_Batch_Aquired>
	}
}
 800170e:	4770      	bx	lr
 8001710:	20004a70 	.word	0x20004a70

08001714 <HAL_ADC_ConvHalfCpltCallback>:
 8001714:	f7ff bff6 	b.w	8001704 <HAL_ADC_ConvCpltCallback>

08001718 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001718:	b510      	push	{r4, lr}
 800171a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800171c:	2214      	movs	r2, #20
 800171e:	2100      	movs	r1, #0
 8001720:	a808      	add	r0, sp, #32
 8001722:	f003 f995 	bl	8004a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001726:	2214      	movs	r2, #20
 8001728:	2100      	movs	r1, #0
 800172a:	a802      	add	r0, sp, #8
 800172c:	f003 f990 	bl	8004a50 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	4a21      	ldr	r2, [pc, #132]	; (80017b8 <SystemClock_Config+0xa0>)
 8001734:	9300      	str	r3, [sp, #0]
 8001736:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001738:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800173c:	6411      	str	r1, [r2, #64]	; 0x40
 800173e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001740:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001744:	9200      	str	r2, [sp, #0]
 8001746:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001748:	4a1c      	ldr	r2, [pc, #112]	; (80017bc <SystemClock_Config+0xa4>)
 800174a:	9301      	str	r3, [sp, #4]
 800174c:	6811      	ldr	r1, [r2, #0]
 800174e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001752:	6011      	str	r1, [r2, #0]
 8001754:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001756:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001758:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
 800175c:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800175e:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001762:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001764:	23b4      	movs	r3, #180	; 0xb4
 8001766:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800176a:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800176c:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800176e:	2101      	movs	r1, #1
 8001770:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001774:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001778:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 800177c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800177e:	f001 f9f7 	bl	8002b70 <HAL_RCC_OscConfig>
 8001782:	b108      	cbz	r0, 8001788 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001786:	e7fe      	b.n	8001786 <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001788:	f001 f8b4 	bl	80028f4 <HAL_PWREx_EnableOverDrive>
 800178c:	b108      	cbz	r0, 8001792 <SystemClock_Config+0x7a>
 800178e:	b672      	cpsid	i
  while (1)
 8001790:	e7fe      	b.n	8001790 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001792:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001794:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001798:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800179a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800179e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017a2:	2105      	movs	r1, #5
 80017a4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017aa:	f001 f8dd 	bl	8002968 <HAL_RCC_ClockConfig>
 80017ae:	b108      	cbz	r0, 80017b4 <SystemClock_Config+0x9c>
 80017b0:	b672      	cpsid	i
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <SystemClock_Config+0x9a>
}
 80017b4:	b014      	add	sp, #80	; 0x50
 80017b6:	bd10      	pop	{r4, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40007000 	.word	0x40007000

080017c0 <main>:
{
 80017c0:	b508      	push	{r3, lr}
  HAL_Init();
 80017c2:	f000 fa27 	bl	8001c14 <HAL_Init>
  SystemClock_Config();
 80017c6:	f7ff ffa7 	bl	8001718 <SystemClock_Config>
  MX_GPIO_Init();
 80017ca:	f7ff ff6d 	bl	80016a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80017ce:	f7ff ff3f 	bl	8001650 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80017d2:	f000 f977 	bl	8001ac4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80017d6:	f7ff fe43 	bl	8001460 <MX_ADC1_Init>
  MX_TIM6_Init();
 80017da:	f000 f8eb 	bl	80019b4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80017de:	f000 f90b 	bl	80019f8 <MX_TIM7_Init>
  MX_DAC_Init();
 80017e2:	f7ff fec3 	bl	800156c <MX_DAC_Init>
  MX_TIM2_Init();
 80017e6:	f000 f8b1 	bl	800194c <MX_TIM2_Init>
  ASD_FFT_Init();
 80017ea:	f7ff fc2f 	bl	800104c <ASD_FFT_Init>
  printf("Loop started\n");
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <main+0x44>)
 80017f0:	f003 fe26 	bl	8005440 <puts>
	  ASD_Print_Results();
 80017f4:	f7ff fca8 	bl	8001148 <ASD_Print_Results>
	  HAL_Delay(5000);
 80017f8:	f241 3088 	movw	r0, #5000	; 0x1388
 80017fc:	f000 fa36 	bl	8001c6c <HAL_Delay>
  while (1)
 8001800:	e7f8      	b.n	80017f4 <main+0x34>
 8001802:	bf00      	nop
 8001804:	08008fc8 	.word	0x08008fc8

08001808 <Error_Handler>:
 8001808:	b672      	cpsid	i
  while (1)
 800180a:	e7fe      	b.n	800180a <Error_Handler+0x2>

0800180c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800180c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180e:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_MspInit+0x34>)
 8001810:	2100      	movs	r1, #0
 8001812:	9100      	str	r1, [sp, #0]
 8001814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001816:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800181a:	645a      	str	r2, [r3, #68]	; 0x44
 800181c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800181e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001822:	9200      	str	r2, [sp, #0]
 8001824:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	9101      	str	r1, [sp, #4]
 8001828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800182a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800182e:	641a      	str	r2, [r3, #64]	; 0x40
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183a:	b002      	add	sp, #8
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001844:	e7fe      	b.n	8001844 <NMI_Handler>

08001846 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001846:	e7fe      	b.n	8001846 <HardFault_Handler>

08001848 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler>

0800184a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184a:	e7fe      	b.n	800184a <BusFault_Handler>

0800184c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	e7fe      	b.n	800184c <UsageFault_Handler>

0800184e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184e:	4770      	bx	lr

08001850 <DebugMon_Handler>:
 8001850:	4770      	bx	lr

08001852 <PendSV_Handler>:
 8001852:	4770      	bx	lr

08001854 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 b9f8 	b.w	8001c48 <HAL_IncTick>

08001858 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001858:	4801      	ldr	r0, [pc, #4]	; (8001860 <DMA1_Stream5_IRQHandler+0x8>)
 800185a:	f000 beb9 	b.w	80025d0 <HAL_DMA_IRQHandler>
 800185e:	bf00      	nop
 8001860:	20004b2c 	.word	0x20004b2c

08001864 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001864:	4801      	ldr	r0, [pc, #4]	; (800186c <USART2_IRQHandler+0x8>)
 8001866:	f001 bf81 	b.w	800376c <HAL_UART_IRQHandler>
 800186a:	bf00      	nop
 800186c:	20004c68 	.word	0x20004c68

08001870 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001870:	4801      	ldr	r0, [pc, #4]	; (8001878 <TIM7_IRQHandler+0x8>)
 8001872:	f001 bbb9 	b.w	8002fe8 <HAL_TIM_IRQHandler>
 8001876:	bf00      	nop
 8001878:	20004c20 	.word	0x20004c20

0800187c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800187c:	4801      	ldr	r0, [pc, #4]	; (8001884 <DMA2_Stream0_IRQHandler+0x8>)
 800187e:	f000 bea7 	b.w	80025d0 <HAL_DMA_IRQHandler>
 8001882:	bf00      	nop
 8001884:	20004ab8 	.word	0x20004ab8

08001888 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001888:	2001      	movs	r0, #1
 800188a:	4770      	bx	lr

0800188c <_kill>:

int _kill(int pid, int sig)
{
 800188c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800188e:	f003 f8a7 	bl	80049e0 <__errno>
 8001892:	2316      	movs	r3, #22
 8001894:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001896:	f04f 30ff 	mov.w	r0, #4294967295
 800189a:	bd08      	pop	{r3, pc}

0800189c <_exit>:

void _exit (int status)
{
 800189c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800189e:	f003 f89f 	bl	80049e0 <__errno>
 80018a2:	2316      	movs	r3, #22
 80018a4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80018a6:	e7fe      	b.n	80018a6 <_exit+0xa>

080018a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018a8:	b570      	push	{r4, r5, r6, lr}
 80018aa:	460d      	mov	r5, r1
 80018ac:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	460e      	mov	r6, r1
 80018b0:	1b73      	subs	r3, r6, r5
 80018b2:	429c      	cmp	r4, r3
 80018b4:	dc01      	bgt.n	80018ba <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80018b6:	4620      	mov	r0, r4
 80018b8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80018ba:	f3af 8000 	nop.w
 80018be:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	e7f5      	b.n	80018b0 <_read+0x8>

080018c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	460d      	mov	r5, r1
 80018c8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ca:	460e      	mov	r6, r1
 80018cc:	1b73      	subs	r3, r6, r5
 80018ce:	429c      	cmp	r4, r3
 80018d0:	dc01      	bgt.n	80018d6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80018d2:	4620      	mov	r0, r4
 80018d4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80018d6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80018da:	f7ff fef7 	bl	80016cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018de:	e7f5      	b.n	80018cc <_write+0x8>

080018e0 <_close>:

int _close(int file)
{
	return -1;
}
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295
 80018e4:	4770      	bx	lr

080018e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80018e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ea:	604b      	str	r3, [r1, #4]
	return 0;
}
 80018ec:	2000      	movs	r0, #0
 80018ee:	4770      	bx	lr

080018f0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80018f0:	2001      	movs	r0, #1
 80018f2:	4770      	bx	lr

080018f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80018f4:	2000      	movs	r0, #0
 80018f6:	4770      	bx	lr

080018f8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f8:	4a0b      	ldr	r2, [pc, #44]	; (8001928 <_sbrk+0x30>)
 80018fa:	6811      	ldr	r1, [r2, #0]
{
 80018fc:	b510      	push	{r4, lr}
 80018fe:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001900:	b909      	cbnz	r1, 8001906 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001902:	490a      	ldr	r1, [pc, #40]	; (800192c <_sbrk+0x34>)
 8001904:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001906:	6810      	ldr	r0, [r2, #0]
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <_sbrk+0x38>)
 800190a:	4c0a      	ldr	r4, [pc, #40]	; (8001934 <_sbrk+0x3c>)
 800190c:	4403      	add	r3, r0
 800190e:	1b09      	subs	r1, r1, r4
 8001910:	428b      	cmp	r3, r1
 8001912:	d906      	bls.n	8001922 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001914:	f003 f864 	bl	80049e0 <__errno>
 8001918:	230c      	movs	r3, #12
 800191a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800191c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001920:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001922:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001924:	e7fc      	b.n	8001920 <_sbrk+0x28>
 8001926:	bf00      	nop
 8001928:	20004b8c 	.word	0x20004b8c
 800192c:	20004cc0 	.word	0x20004cc0
 8001930:	20020000 	.word	0x20020000
 8001934:	00000400 	.word	0x00000400

08001938 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001938:	4a03      	ldr	r2, [pc, #12]	; (8001948 <SystemInit+0x10>)
 800193a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800193e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001942:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001946:	4770      	bx	lr
 8001948:	e000ed00 	.word	0xe000ed00

0800194c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800194c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800194e:	2210      	movs	r2, #16
 8001950:	2100      	movs	r1, #0
 8001952:	a802      	add	r0, sp, #8
 8001954:	f003 f87c 	bl	8004a50 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001958:	4814      	ldr	r0, [pc, #80]	; (80019ac <MX_TIM2_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800195a:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800195c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001960:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 703000-1;
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_TIM2_Init+0x64>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001966:	6083      	str	r3, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001968:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001972:	f001 fc41 	bl	80031f8 <HAL_TIM_Base_Init>
 8001976:	b108      	cbz	r0, 800197c <MX_TIM2_Init+0x30>
  {
    Error_Handler();
 8001978:	f7ff ff46 	bl	8001808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800197c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001980:	480a      	ldr	r0, [pc, #40]	; (80019ac <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001982:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001984:	a902      	add	r1, sp, #8
 8001986:	f001 fc6d 	bl	8003264 <HAL_TIM_ConfigClockSource>
 800198a:	b108      	cbz	r0, 8001990 <MX_TIM2_Init+0x44>
  {
    Error_Handler();
 800198c:	f7ff ff3c 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001990:	2220      	movs	r2, #32
 8001992:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001994:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_TIM2_Init+0x60>)
 8001996:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001998:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800199c:	f001 fcfe 	bl	800339c <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	b108      	cbz	r0, 80019a6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80019a2:	f7ff ff31 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019a6:	b007      	add	sp, #28
 80019a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ac:	20004b90 	.word	0x20004b90
 80019b0:	000aba17 	.word	0x000aba17

080019b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80019b4:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 90-1;
 80019b6:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <MX_TIM6_Init+0x3c>)
  htim6.Instance = TIM6;
 80019b8:	480e      	ldr	r0, [pc, #56]	; (80019f4 <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = 90-1;
 80019ba:	2359      	movs	r3, #89	; 0x59
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019bc:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 90-1;
 80019be:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 80019c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c6:	e9cd 4400 	strd	r4, r4, [sp]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ca:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 65535;
 80019cc:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ce:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80019d0:	f001 fc12 	bl	80031f8 <HAL_TIM_Base_Init>
 80019d4:	b108      	cbz	r0, 80019da <MX_TIM6_Init+0x26>
  {
    Error_Handler();
 80019d6:	f7ff ff17 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019da:	4806      	ldr	r0, [pc, #24]	; (80019f4 <MX_TIM6_Init+0x40>)
 80019dc:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80019e2:	f001 fcdb 	bl	800339c <HAL_TIMEx_MasterConfigSynchronization>
 80019e6:	b108      	cbz	r0, 80019ec <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 80019e8:	f7ff ff0e 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80019ec:	b002      	add	sp, #8
 80019ee:	bd10      	pop	{r4, pc}
 80019f0:	40001000 	.word	0x40001000
 80019f4:	20004bd8 	.word	0x20004bd8

080019f8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80019f8:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 90-1;
 80019fa:	4a0e      	ldr	r2, [pc, #56]	; (8001a34 <MX_TIM7_Init+0x3c>)
  htim7.Instance = TIM7;
 80019fc:	480e      	ldr	r0, [pc, #56]	; (8001a38 <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = 90-1;
 80019fe:	2359      	movs	r3, #89	; 0x59
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a00:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 90-1;
 8001a02:	e9c0 2300 	strd	r2, r3, [r0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 100-1;
 8001a06:	2363      	movs	r3, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a08:	e9cd 4400 	strd	r4, r4, [sp]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0c:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 100-1;
 8001a0e:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a10:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a12:	f001 fbf1 	bl	80031f8 <HAL_TIM_Base_Init>
 8001a16:	b108      	cbz	r0, 8001a1c <MX_TIM7_Init+0x24>
  {
    Error_Handler();
 8001a18:	f7ff fef6 	bl	8001808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a1c:	4806      	ldr	r0, [pc, #24]	; (8001a38 <MX_TIM7_Init+0x40>)
 8001a1e:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a20:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a24:	f001 fcba 	bl	800339c <HAL_TIMEx_MasterConfigSynchronization>
 8001a28:	b108      	cbz	r0, 8001a2e <MX_TIM7_Init+0x36>
  {
    Error_Handler();
 8001a2a:	f7ff feed 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a2e:	b002      	add	sp, #8
 8001a30:	bd10      	pop	{r4, pc}
 8001a32:	bf00      	nop
 8001a34:	40001400 	.word	0x40001400
 8001a38:	20004c20 	.word	0x20004c20

08001a3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 8001a3e:	6803      	ldr	r3, [r0, #0]
 8001a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a44:	d10e      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	641a      	str	r2, [r3, #64]	; 0x40
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001a5e:	b005      	add	sp, #20
 8001a60:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM6)
 8001a64:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_TIM_Base_MspInit+0x80>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d10c      	bne.n	8001a84 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a72:	f042 0210 	orr.w	r2, r2, #16
 8001a76:	641a      	str	r2, [r3, #64]	; 0x40
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	9b02      	ldr	r3, [sp, #8]
 8001a82:	e7ec      	b.n	8001a5e <HAL_TIM_Base_MspInit+0x22>
  else if(tim_baseHandle->Instance==TIM7)
 8001a84:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <HAL_TIM_Base_MspInit+0x84>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d1e9      	bne.n	8001a5e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_TIM_Base_MspInit+0x7c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	9203      	str	r2, [sp, #12]
 8001a90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001a92:	f041 0120 	orr.w	r1, r1, #32
 8001a96:	6419      	str	r1, [r3, #64]	; 0x40
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 0320 	and.w	r3, r3, #32
 8001a9e:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8001aa0:	2104      	movs	r1, #4
 8001aa2:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001aa4:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8001aa6:	f000 fb3b 	bl	8002120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001aaa:	2037      	movs	r0, #55	; 0x37
}
 8001aac:	b005      	add	sp, #20
 8001aae:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001ab2:	f000 bb67 	b.w	8002184 <HAL_NVIC_EnableIRQ>
 8001ab6:	bf00      	nop
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40001000 	.word	0x40001000
 8001ac0:	40001400 	.word	0x40001400

08001ac4 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001ac6:	4a0c      	ldr	r2, [pc, #48]	; (8001af8 <MX_USART2_UART_Init+0x34>)
{
 8001ac8:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8001aca:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001ace:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ad4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ad6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ada:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ade:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ae2:	f001 fd5d 	bl	80035a0 <HAL_UART_Init>
 8001ae6:	b118      	cbz	r0, 8001af0 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ae8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001aec:	f7ff be8c 	b.w	8001808 <Error_Handler>
}
 8001af0:	bd08      	pop	{r3, pc}
 8001af2:	bf00      	nop
 8001af4:	20004c68 	.word	0x20004c68
 8001af8:	40004400 	.word	0x40004400

08001afc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001afc:	b510      	push	{r4, lr}
 8001afe:	4604      	mov	r4, r0
 8001b00:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b02:	2214      	movs	r2, #20
 8001b04:	2100      	movs	r1, #0
 8001b06:	a803      	add	r0, sp, #12
 8001b08:	f002 ffa2 	bl	8004a50 <memset>
  if(uartHandle->Instance==USART2)
 8001b0c:	6822      	ldr	r2, [r4, #0]
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_UART_MspInit+0x74>)
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d12a      	bne.n	8001b6a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b14:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001b18:	2400      	movs	r4, #0
 8001b1a:	9401      	str	r4, [sp, #4]
 8001b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1e:	4815      	ldr	r0, [pc, #84]	; (8001b74 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b20:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
 8001b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b28:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001b2c:	9201      	str	r2, [sp, #4]
 8001b2e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b30:	9402      	str	r4, [sp, #8]
 8001b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b34:	f042 0201 	orr.w	r2, r2, #1
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b44:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b4c:	2103      	movs	r1, #3
 8001b4e:	2307      	movs	r3, #7
 8001b50:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	a903      	add	r1, sp, #12
 8001b56:	f000 fdf9 	bl	800274c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b5a:	2026      	movs	r0, #38	; 0x26
 8001b5c:	4622      	mov	r2, r4
 8001b5e:	4621      	mov	r1, r4
 8001b60:	f000 fade 	bl	8002120 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b64:	2026      	movs	r0, #38	; 0x26
 8001b66:	f000 fb0d 	bl	8002184 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b6a:	b008      	add	sp, #32
 8001b6c:	bd10      	pop	{r4, pc}
 8001b6e:	bf00      	nop
 8001b70:	40004400 	.word	0x40004400
 8001b74:	40020000 	.word	0x40020000

08001b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b7c:	480d      	ldr	r0, [pc, #52]	; (8001bb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b7e:	490e      	ldr	r1, [pc, #56]	; (8001bb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b80:	4a0e      	ldr	r2, [pc, #56]	; (8001bbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0b      	ldr	r2, [pc, #44]	; (8001bc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b94:	4c0b      	ldr	r4, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ba2:	f7ff fec9 	bl	8001938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ba6:	f002 ff21 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001baa:	f7ff fe09 	bl	80017c0 <main>
  bx  lr    
 8001bae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bb8:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001bbc:	0800c204 	.word	0x0800c204
  ldr r2, =_sbss
 8001bc0:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001bc4:	20004cc0 	.word	0x20004cc0

08001bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc8:	e7fe      	b.n	8001bc8 <ADC_IRQHandler>
	...

08001bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bcc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bce:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <HAL_InitTick+0x3c>)
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <HAL_InitTick+0x40>)
{
 8001bd2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bd4:	7818      	ldrb	r0, [r3, #0]
 8001bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bda:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bde:	6810      	ldr	r0, [r2, #0]
 8001be0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001be4:	f000 fadc 	bl	80021a0 <HAL_SYSTICK_Config>
 8001be8:	4604      	mov	r4, r0
 8001bea:	b958      	cbnz	r0, 8001c04 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bec:	2d0f      	cmp	r5, #15
 8001bee:	d809      	bhi.n	8001c04 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	4629      	mov	r1, r5
 8001bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf8:	f000 fa92 	bl	8002120 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <HAL_InitTick+0x44>)
 8001bfe:	4620      	mov	r0, r4
 8001c00:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c02:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c04:	2001      	movs	r0, #1
 8001c06:	e7fc      	b.n	8001c02 <HAL_InitTick+0x36>
 8001c08:	20000008 	.word	0x20000008
 8001c0c:	2000000c 	.word	0x2000000c
 8001c10:	20000010 	.word	0x20000010

08001c14 <HAL_Init>:
{
 8001c14:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_Init+0x30>)
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c26:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c2e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 fa63 	bl	80020fc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c36:	200f      	movs	r0, #15
 8001c38:	f7ff ffc8 	bl	8001bcc <HAL_InitTick>
  HAL_MspInit();
 8001c3c:	f7ff fde6 	bl	800180c <HAL_MspInit>
}
 8001c40:	2000      	movs	r0, #0
 8001c42:	bd08      	pop	{r3, pc}
 8001c44:	40023c00 	.word	0x40023c00

08001c48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_IncTick+0x10>)
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_IncTick+0x14>)
 8001c4c:	6811      	ldr	r1, [r2, #0]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	440b      	add	r3, r1
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20004cac 	.word	0x20004cac
 8001c5c:	2000000c 	.word	0x2000000c

08001c60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c60:	4b01      	ldr	r3, [pc, #4]	; (8001c68 <HAL_GetTick+0x8>)
 8001c62:	6818      	ldr	r0, [r3, #0]
}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20004cac 	.word	0x20004cac

08001c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c6c:	b538      	push	{r3, r4, r5, lr}
 8001c6e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c70:	f7ff fff6 	bl	8001c60 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c74:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001c76:	bf1c      	itt	ne
 8001c78:	4b05      	ldrne	r3, [pc, #20]	; (8001c90 <HAL_Delay+0x24>)
 8001c7a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001c7e:	bf18      	it	ne
 8001c80:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c82:	f7ff ffed 	bl	8001c60 <HAL_GetTick>
 8001c86:	1b43      	subs	r3, r0, r5
 8001c88:	42a3      	cmp	r3, r4
 8001c8a:	d3fa      	bcc.n	8001c82 <HAL_Delay+0x16>
  {
  }
}
 8001c8c:	bd38      	pop	{r3, r4, r5, pc}
 8001c8e:	bf00      	nop
 8001c90:	2000000c 	.word	0x2000000c

08001c94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c94:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c96:	4604      	mov	r4, r0
 8001c98:	2800      	cmp	r0, #0
 8001c9a:	f000 809b 	beq.w	8001dd4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c9e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001ca0:	b925      	cbnz	r5, 8001cac <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca2:	f7ff fc11 	bl	80014c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca6:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ca8:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cae:	06db      	lsls	r3, r3, #27
 8001cb0:	f100 808e 	bmi.w	8001dd0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001cb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cba:	f023 0302 	bic.w	r3, r3, #2
 8001cbe:	f043 0302 	orr.w	r3, r3, #2
 8001cc2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001cc4:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <HAL_ADC_Init+0x144>)
 8001cc6:	685a      	ldr	r2, [r3, #4]
 8001cc8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001ccc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	6861      	ldr	r1, [r4, #4]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cd6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001cd8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001cda:	685a      	ldr	r2, [r3, #4]
 8001cdc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ce0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ce8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cea:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cec:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cee:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001cf2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cfa:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001cfc:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	430a      	orrs	r2, r1
 8001d08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d0a:	4934      	ldr	r1, [pc, #208]	; (8001ddc <HAL_ADC_Init+0x148>)
 8001d0c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	d052      	beq.n	8001db8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d12:	6899      	ldr	r1, [r3, #8]
 8001d14:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001d18:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d1a:	6899      	ldr	r1, [r3, #8]
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d20:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d22:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d2e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	f022 0202 	bic.w	r2, r2, #2
 8001d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d38:	689a      	ldr	r2, [r3, #8]
 8001d3a:	7e21      	ldrb	r1, [r4, #24]
 8001d3c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001d40:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d42:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001d46:	2a00      	cmp	r2, #0
 8001d48:	d03e      	beq.n	8001dc8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d4a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d5a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	3901      	subs	r1, #1
 8001d60:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d64:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d68:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d6a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d72:	3901      	subs	r1, #1
 8001d74:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001d78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d80:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001d88:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001d8c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d8e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d90:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d98:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001d9a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d9c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001da0:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001da2:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001da4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001da6:	f023 0303 	bic.w	r3, r3, #3
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001db0:	2300      	movs	r3, #0
 8001db2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001db6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001dbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001dc6:	e7b2      	b.n	8001d2e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dc8:	685a      	ldr	r2, [r3, #4]
 8001dca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dce:	e7c9      	b.n	8001d64 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	e7ed      	b.n	8001db0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	e7ee      	b.n	8001db6 <HAL_ADC_Init+0x122>
 8001dd8:	40012300 	.word	0x40012300
 8001ddc:	0f000001 	.word	0x0f000001

08001de0 <HAL_ADC_Start_DMA>:
{
 8001de0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001de2:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8001de4:	2200      	movs	r2, #0
 8001de6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001de8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8001dec:	2a01      	cmp	r2, #1
{
 8001dee:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8001df0:	f000 808c 	beq.w	8001f0c <HAL_ADC_Start_DMA+0x12c>
 8001df4:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001df6:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 8001df8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001dfc:	68b2      	ldr	r2, [r6, #8]
 8001dfe:	07d4      	lsls	r4, r2, #31
 8001e00:	d554      	bpl.n	8001eac <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001e02:	68b2      	ldr	r2, [r6, #8]
 8001e04:	05d0      	lsls	r0, r2, #23
 8001e06:	d464      	bmi.n	8001ed2 <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e08:	68b4      	ldr	r4, [r6, #8]
 8001e0a:	f014 0401 	ands.w	r4, r4, #1
 8001e0e:	d074      	beq.n	8001efa <HAL_ADC_Start_DMA+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 8001e10:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8001e12:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001e16:	f020 0001 	bic.w	r0, r0, #1
 8001e1a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8001e1e:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e20:	6872      	ldr	r2, [r6, #4]
 8001e22:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e24:	bf41      	itttt	mi
 8001e26:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 8001e28:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 8001e2c:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 8001e30:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e32:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e34:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e36:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e3a:	bf1c      	itt	ne
 8001e3c:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 8001e3e:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001e42:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001e44:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e46:	4a33      	ldr	r2, [pc, #204]	; (8001f14 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 8001e48:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001e4c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e4e:	4a32      	ldr	r2, [pc, #200]	; (8001f18 <HAL_ADC_Start_DMA+0x138>)
 8001e50:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e52:	4a32      	ldr	r2, [pc, #200]	; (8001f1c <HAL_ADC_Start_DMA+0x13c>)
 8001e54:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e5a:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e5c:	6872      	ldr	r2, [r6, #4]
 8001e5e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e62:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e64:	68b2      	ldr	r2, [r6, #8]
 8001e66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e6a:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e6c:	460a      	mov	r2, r1
 8001e6e:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8001e72:	f000 fb1d 	bl	80024b0 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e76:	4a2a      	ldr	r2, [pc, #168]	; (8001f20 <HAL_ADC_Start_DMA+0x140>)
 8001e78:	682b      	ldr	r3, [r5, #0]
 8001e7a:	6850      	ldr	r0, [r2, #4]
 8001e7c:	4929      	ldr	r1, [pc, #164]	; (8001f24 <HAL_ADC_Start_DMA+0x144>)
 8001e7e:	f010 001f 	ands.w	r0, r0, #31
 8001e82:	d132      	bne.n	8001eea <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e84:	428b      	cmp	r3, r1
 8001e86:	d007      	beq.n	8001e98 <HAL_ADC_Start_DMA+0xb8>
 8001e88:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8001e8c:	428b      	cmp	r3, r1
 8001e8e:	d125      	bne.n	8001edc <HAL_ADC_Start_DMA+0xfc>
 8001e90:	6852      	ldr	r2, [r2, #4]
 8001e92:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e96:	d107      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0xc8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e98:	6898      	ldr	r0, [r3, #8]
 8001e9a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001e9e:	d137      	bne.n	8001f10 <HAL_ADC_Start_DMA+0x130>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ea6:	609a      	str	r2, [r3, #8]
}
 8001ea8:	b002      	add	sp, #8
 8001eaa:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001eac:	68b2      	ldr	r2, [r6, #8]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb4:	4a1c      	ldr	r2, [pc, #112]	; (8001f28 <HAL_ADC_Start_DMA+0x148>)
 8001eb6:	6810      	ldr	r0, [r2, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	; (8001f2c <HAL_ADC_Start_DMA+0x14c>)
 8001eba:	fbb0 f0f2 	udiv	r0, r0, r2
 8001ebe:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001ec2:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001ec4:	9a01      	ldr	r2, [sp, #4]
 8001ec6:	2a00      	cmp	r2, #0
 8001ec8:	d09b      	beq.n	8001e02 <HAL_ADC_Start_DMA+0x22>
      counter--;
 8001eca:	9a01      	ldr	r2, [sp, #4]
 8001ecc:	3a01      	subs	r2, #1
 8001ece:	9201      	str	r2, [sp, #4]
 8001ed0:	e7f8      	b.n	8001ec4 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ed2:	68b2      	ldr	r2, [r6, #8]
 8001ed4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ed8:	60b2      	str	r2, [r6, #8]
 8001eda:	e795      	b.n	8001e08 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001edc:	4914      	ldr	r1, [pc, #80]	; (8001f30 <HAL_ADC_Start_DMA+0x150>)
 8001ede:	428b      	cmp	r3, r1
 8001ee0:	d1e2      	bne.n	8001ea8 <HAL_ADC_Start_DMA+0xc8>
 8001ee2:	6852      	ldr	r2, [r2, #4]
 8001ee4:	f012 0f10 	tst.w	r2, #16
 8001ee8:	e7d5      	b.n	8001e96 <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001eea:	428b      	cmp	r3, r1
 8001eec:	d110      	bne.n	8001f10 <HAL_ADC_Start_DMA+0x130>
 8001eee:	6898      	ldr	r0, [r3, #8]
 8001ef0:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001ef4:	d0d4      	beq.n	8001ea0 <HAL_ADC_Start_DMA+0xc0>
  return HAL_OK;
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	e7d6      	b.n	8001ea8 <HAL_ADC_Start_DMA+0xc8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001efa:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001efc:	f043 0310 	orr.w	r3, r3, #16
 8001f00:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f02:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	646b      	str	r3, [r5, #68]	; 0x44
 8001f0a:	e7f4      	b.n	8001ef6 <HAL_ADC_Start_DMA+0x116>
  __HAL_LOCK(hadc);
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	e7cb      	b.n	8001ea8 <HAL_ADC_Start_DMA+0xc8>
  return HAL_OK;
 8001f10:	2000      	movs	r0, #0
 8001f12:	e7c9      	b.n	8001ea8 <HAL_ADC_Start_DMA+0xc8>
 8001f14:	08001f57 	.word	0x08001f57
 8001f18:	08001f35 	.word	0x08001f35
 8001f1c:	08001f41 	.word	0x08001f41
 8001f20:	40012300 	.word	0x40012300
 8001f24:	40012000 	.word	0x40012000
 8001f28:	20000008 	.word	0x20000008
 8001f2c:	000f4240 	.word	0x000f4240
 8001f30:	40012200 	.word	0x40012200

08001f34 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001f34:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001f36:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f38:	f7ff fbec 	bl	8001714 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f3c:	bd08      	pop	{r3, pc}

08001f3e <HAL_ADC_ErrorCallback>:
 8001f3e:	4770      	bx	lr

08001f40 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f40:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001f42:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001f44:	2340      	movs	r3, #64	; 0x40
 8001f46:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001f48:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001f50:	f7ff fff5 	bl	8001f3e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001f54:	bd08      	pop	{r3, pc}

08001f56 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f56:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f5a:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001f5e:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001f62:	d123      	bne.n	8001fac <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f68:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	6891      	ldr	r1, [r2, #8]
 8001f6e:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001f72:	d117      	bne.n	8001fa4 <ADC_DMAConvCplt+0x4e>
 8001f74:	7e19      	ldrb	r1, [r3, #24]
 8001f76:	b9a9      	cbnz	r1, 8001fa4 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f7a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001f7e:	d002      	beq.n	8001f86 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f80:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001f82:	0548      	lsls	r0, r1, #21
 8001f84:	d40e      	bmi.n	8001fa4 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f86:	6851      	ldr	r1, [r2, #4]
 8001f88:	f021 0120 	bic.w	r1, r1, #32
 8001f8c:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f94:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f98:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9a:	bf5e      	ittt	pl
 8001f9c:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8001f9e:	f042 0201 	orrpl.w	r2, r2, #1
 8001fa2:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fbad 	bl	8001704 <HAL_ADC_ConvCpltCallback>
}
 8001faa:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001fac:	06d2      	lsls	r2, r2, #27
 8001fae:	d503      	bpl.n	8001fb8 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ffc4 	bl	8001f3e <HAL_ADC_ErrorCallback>
 8001fb6:	e7f8      	b.n	8001faa <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	4718      	bx	r3
	...

08001fc4 <HAL_ADC_ConfigChannel>:
{
 8001fc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001fca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d069      	beq.n	80020a6 <HAL_ADC_ConfigChannel+0xe2>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fd8:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fda:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fdc:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fde:	2d09      	cmp	r5, #9
 8001fe0:	b2ac      	uxth	r4, r5
 8001fe2:	d934      	bls.n	800204e <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fe4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001fe8:	68df      	ldr	r7, [r3, #12]
 8001fea:	3a1e      	subs	r2, #30
 8001fec:	f04f 0c07 	mov.w	ip, #7
 8001ff0:	fa0c fc02 	lsl.w	ip, ip, r2
 8001ff4:	ea27 070c 	bic.w	r7, r7, ip
 8001ff8:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ffa:	68df      	ldr	r7, [r3, #12]
 8001ffc:	fa06 f202 	lsl.w	r2, r6, r2
 8002000:	433a      	orrs	r2, r7
 8002002:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002004:	6849      	ldr	r1, [r1, #4]
 8002006:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002008:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 800200c:	d82f      	bhi.n	800206e <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800200e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002010:	3a05      	subs	r2, #5
 8002012:	261f      	movs	r6, #31
 8002014:	4096      	lsls	r6, r2
 8002016:	ea21 0106 	bic.w	r1, r1, r6
 800201a:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800201c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201e:	fa04 f202 	lsl.w	r2, r4, r2
 8002022:	430a      	orrs	r2, r1
 8002024:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002026:	4a30      	ldr	r2, [pc, #192]	; (80020e8 <HAL_ADC_ConfigChannel+0x124>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d10a      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x7e>
 800202c:	2d12      	cmp	r5, #18
 800202e:	d13c      	bne.n	80020aa <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002030:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <HAL_ADC_ConfigChannel+0x128>)
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002038:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002040:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8002042:	2300      	movs	r3, #0
 8002044:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002048:	4618      	mov	r0, r3
}
 800204a:	b003      	add	sp, #12
 800204c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800204e:	691f      	ldr	r7, [r3, #16]
 8002050:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002054:	f04f 0c07 	mov.w	ip, #7
 8002058:	fa0c fc02 	lsl.w	ip, ip, r2
 800205c:	ea27 070c 	bic.w	r7, r7, ip
 8002060:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002062:	691f      	ldr	r7, [r3, #16]
 8002064:	fa06 f202 	lsl.w	r2, r6, r2
 8002068:	433a      	orrs	r2, r7
 800206a:	611a      	str	r2, [r3, #16]
 800206c:	e7ca      	b.n	8002004 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 800206e:	290c      	cmp	r1, #12
 8002070:	f04f 011f 	mov.w	r1, #31
 8002074:	d80b      	bhi.n	800208e <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002076:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8002078:	3a23      	subs	r2, #35	; 0x23
 800207a:	4091      	lsls	r1, r2
 800207c:	ea26 0101 	bic.w	r1, r6, r1
 8002080:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002084:	fa04 f202 	lsl.w	r2, r4, r2
 8002088:	430a      	orrs	r2, r1
 800208a:	631a      	str	r2, [r3, #48]	; 0x30
 800208c:	e7cb      	b.n	8002026 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800208e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8002090:	3a41      	subs	r2, #65	; 0x41
 8002092:	4091      	lsls	r1, r2
 8002094:	ea26 0101 	bic.w	r1, r6, r1
 8002098:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800209a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209c:	fa04 f202 	lsl.w	r2, r4, r2
 80020a0:	430a      	orrs	r2, r1
 80020a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80020a4:	e7bf      	b.n	8002026 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 80020a6:	2002      	movs	r0, #2
 80020a8:	e7cf      	b.n	800204a <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <HAL_ADC_ConfigChannel+0x12c>)
 80020ac:	429d      	cmp	r5, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0xf0>
 80020b0:	2d11      	cmp	r5, #17
 80020b2:	d1c6      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80020b4:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_ADC_ConfigChannel+0x128>)
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80020bc:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80020c4:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020c6:	4b0a      	ldr	r3, [pc, #40]	; (80020f0 <HAL_ADC_ConfigChannel+0x12c>)
 80020c8:	429d      	cmp	r5, r3
 80020ca:	d1ba      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <HAL_ADC_ConfigChannel+0x130>)
 80020ce:	4a0a      	ldr	r2, [pc, #40]	; (80020f8 <HAL_ADC_ConfigChannel+0x134>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80020d6:	220a      	movs	r2, #10
 80020d8:	4353      	muls	r3, r2
        counter--;
 80020da:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80020dc:	9b01      	ldr	r3, [sp, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0af      	beq.n	8002042 <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 80020e2:	9b01      	ldr	r3, [sp, #4]
 80020e4:	3b01      	subs	r3, #1
 80020e6:	e7f8      	b.n	80020da <HAL_ADC_ConfigChannel+0x116>
 80020e8:	40012000 	.word	0x40012000
 80020ec:	40012300 	.word	0x40012300
 80020f0:	10000012 	.word	0x10000012
 80020f4:	20000008 	.word	0x20000008
 80020f8:	000f4240 	.word	0x000f4240

080020fc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020fc:	4907      	ldr	r1, [pc, #28]	; (800211c <HAL_NVIC_SetPriorityGrouping+0x20>)
 80020fe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002100:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002106:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002108:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800210e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002118:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002122:	b530      	push	{r4, r5, lr}
 8002124:	68dc      	ldr	r4, [r3, #12]
 8002126:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800212a:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800212e:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002130:	2d04      	cmp	r5, #4
 8002132:	bf28      	it	cs
 8002134:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002136:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800213c:	bf8c      	ite	hi
 800213e:	3c03      	subhi	r4, #3
 8002140:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002142:	fa03 f505 	lsl.w	r5, r3, r5
 8002146:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800214a:	40a3      	lsls	r3, r4
 800214c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002150:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002152:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002154:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	bfac      	ite	ge
 800215a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215e:	4a08      	ldrlt	r2, [pc, #32]	; (8002180 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002164:	bfb8      	it	lt
 8002166:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	b2db      	uxtb	r3, r3
 800216c:	bfaa      	itet	ge
 800216e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002174:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002178:	bd30      	pop	{r4, r5, pc}
 800217a:	bf00      	nop
 800217c:	e000ed00 	.word	0xe000ed00
 8002180:	e000ed14 	.word	0xe000ed14

08002184 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002184:	2800      	cmp	r0, #0
 8002186:	db08      	blt.n	800219a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002188:	0942      	lsrs	r2, r0, #5
 800218a:	2301      	movs	r3, #1
 800218c:	f000 001f 	and.w	r0, r0, #31
 8002190:	fa03 f000 	lsl.w	r0, r3, r0
 8002194:	4b01      	ldr	r3, [pc, #4]	; (800219c <HAL_NVIC_EnableIRQ+0x18>)
 8002196:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800219a:	4770      	bx	lr
 800219c:	e000e100 	.word	0xe000e100

080021a0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a0:	3801      	subs	r0, #1
 80021a2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80021a6:	d20b      	bcs.n	80021c0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	4a05      	ldr	r2, [pc, #20]	; (80021c4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ae:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	21f0      	movs	r1, #240	; 0xf0
 80021b2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021b6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021b8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021ba:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021bc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021be:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80021c0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021c8:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 80021ca:	4604      	mov	r4, r0
 80021cc:	b168      	cbz	r0, 80021ea <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021ce:	7903      	ldrb	r3, [r0, #4]
 80021d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021d4:	b913      	cbnz	r3, 80021dc <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021d6:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021d8:	f7ff f9e6 	bl	80015a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021e0:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021e2:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021e4:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80021e6:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 80021e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80021ea:	2001      	movs	r0, #1
 80021ec:	e7fc      	b.n	80021e8 <HAL_DAC_Init+0x20>
	...

080021f0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80021f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021f2:	460d      	mov	r5, r1
 80021f4:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80021f6:	7942      	ldrb	r2, [r0, #5]
{
 80021f8:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdac);
 80021fa:	2a01      	cmp	r2, #1
{
 80021fc:	4604      	mov	r4, r0
 80021fe:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002202:	d029      	beq.n	8002258 <HAL_DAC_Start_DMA+0x68>
 8002204:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002206:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002208:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800220a:	6820      	ldr	r0, [r4, #0]
  if (Channel == DAC_CHANNEL_1)
 800220c:	bb5d      	cbnz	r5, 8002266 <HAL_DAC_Start_DMA+0x76>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800220e:	68a2      	ldr	r2, [r4, #8]
 8002210:	4f28      	ldr	r7, [pc, #160]	; (80022b4 <HAL_DAC_Start_DMA+0xc4>)
 8002212:	63d7      	str	r7, [r2, #60]	; 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002214:	4f28      	ldr	r7, [pc, #160]	; (80022b8 <HAL_DAC_Start_DMA+0xc8>)
 8002216:	6417      	str	r7, [r2, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002218:	4f28      	ldr	r7, [pc, #160]	; (80022bc <HAL_DAC_Start_DMA+0xcc>)
 800221a:	64d7      	str	r7, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800221c:	6802      	ldr	r2, [r0, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800221e:	2e04      	cmp	r6, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002224:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 8002226:	d018      	beq.n	800225a <HAL_DAC_Start_DMA+0x6a>
 8002228:	2e08      	cmp	r6, #8
 800222a:	d019      	beq.n	8002260 <HAL_DAC_Start_DMA+0x70>
 800222c:	2e00      	cmp	r6, #0
 800222e:	d138      	bne.n	80022a2 <HAL_DAC_Start_DMA+0xb2>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002230:	f100 0208 	add.w	r2, r0, #8

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002234:	6806      	ldr	r6, [r0, #0]
 8002236:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 800223a:	6006      	str	r6, [r0, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800223c:	68a0      	ldr	r0, [r4, #8]
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800223e:	f000 f937 	bl	80024b0 <HAL_DMA_Start_IT>
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002242:	2300      	movs	r3, #0
 8002244:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8002246:	bb80      	cbnz	r0, 80022aa <HAL_DAC_Start_DMA+0xba>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002248:	6823      	ldr	r3, [r4, #0]
 800224a:	f005 0110 	and.w	r1, r5, #16
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	2501      	movs	r5, #1
 8002252:	408d      	lsls	r5, r1
 8002254:	4315      	orrs	r5, r2
 8002256:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8002258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800225a:	f100 020c 	add.w	r2, r0, #12
        break;
 800225e:	e7e9      	b.n	8002234 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002260:	f100 0210 	add.w	r2, r0, #16
        break;
 8002264:	e7e6      	b.n	8002234 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002266:	68e2      	ldr	r2, [r4, #12]
 8002268:	4f15      	ldr	r7, [pc, #84]	; (80022c0 <HAL_DAC_Start_DMA+0xd0>)
 800226a:	63d7      	str	r7, [r2, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800226c:	4f15      	ldr	r7, [pc, #84]	; (80022c4 <HAL_DAC_Start_DMA+0xd4>)
 800226e:	6417      	str	r7, [r2, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002270:	4f15      	ldr	r7, [pc, #84]	; (80022c8 <HAL_DAC_Start_DMA+0xd8>)
 8002272:	64d7      	str	r7, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002274:	6802      	ldr	r2, [r0, #0]
    switch (Alignment)
 8002276:	2e04      	cmp	r6, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002278:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800227c:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 800227e:	d00a      	beq.n	8002296 <HAL_DAC_Start_DMA+0xa6>
 8002280:	2e08      	cmp	r6, #8
 8002282:	d00b      	beq.n	800229c <HAL_DAC_Start_DMA+0xac>
 8002284:	b97e      	cbnz	r6, 80022a6 <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002286:	f100 0214 	add.w	r2, r0, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800228a:	6806      	ldr	r6, [r0, #0]
 800228c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8002290:	6006      	str	r6, [r0, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002292:	68e0      	ldr	r0, [r4, #12]
 8002294:	e7d3      	b.n	800223e <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002296:	f100 0218 	add.w	r2, r0, #24
        break;
 800229a:	e7f6      	b.n	800228a <HAL_DAC_Start_DMA+0x9a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800229c:	f100 021c 	add.w	r2, r0, #28
        break;
 80022a0:	e7f3      	b.n	800228a <HAL_DAC_Start_DMA+0x9a>
    switch (Alignment)
 80022a2:	462a      	mov	r2, r5
 80022a4:	e7c6      	b.n	8002234 <HAL_DAC_Start_DMA+0x44>
    switch (Alignment)
 80022a6:	2200      	movs	r2, #0
 80022a8:	e7ef      	b.n	800228a <HAL_DAC_Start_DMA+0x9a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022aa:	6923      	ldr	r3, [r4, #16]
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	6123      	str	r3, [r4, #16]
 80022b2:	e7d1      	b.n	8002258 <HAL_DAC_Start_DMA+0x68>
 80022b4:	080022cf 	.word	0x080022cf
 80022b8:	080022e1 	.word	0x080022e1
 80022bc:	080022ed 	.word	0x080022ed
 80022c0:	08002351 	.word	0x08002351
 80022c4:	08002361 	.word	0x08002361
 80022c8:	0800236b 	.word	0x0800236b

080022cc <HAL_DAC_ConvCpltCallbackCh1>:
 80022cc:	4770      	bx	lr

080022ce <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022ce:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022d0:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80022d2:	4620      	mov	r0, r4
 80022d4:	f7ff fffa 	bl	80022cc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022d8:	2301      	movs	r3, #1
 80022da:	7123      	strb	r3, [r4, #4]
}
 80022dc:	bd10      	pop	{r4, pc}

080022de <HAL_DAC_ConvHalfCpltCallbackCh1>:
 80022de:	4770      	bx	lr

080022e0 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80022e0:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80022e2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80022e4:	f7ff fffb 	bl	80022de <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80022e8:	bd08      	pop	{r3, pc}

080022ea <HAL_DAC_ErrorCallbackCh1>:
 80022ea:	4770      	bx	lr

080022ec <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80022ec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80022ee:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80022f0:	6923      	ldr	r3, [r4, #16]
 80022f2:	f043 0304 	orr.w	r3, r3, #4
 80022f6:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff fff6 	bl	80022ea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022fe:	2301      	movs	r3, #1
 8002300:	7123      	strb	r3, [r4, #4]
}
 8002302:	bd10      	pop	{r4, pc}

08002304 <HAL_DAC_ConfigChannel>:
{
 8002304:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8002306:	7943      	ldrb	r3, [r0, #5]
 8002308:	2b01      	cmp	r3, #1
 800230a:	f04f 0302 	mov.w	r3, #2
 800230e:	d01a      	beq.n	8002346 <HAL_DAC_ConfigChannel+0x42>
  tmpreg1 = hdac->Instance->CR;
 8002310:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002312:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8002314:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002316:	f002 0210 	and.w	r2, r2, #16
 800231a:	f640 75fe 	movw	r5, #4094	; 0xffe
 800231e:	4095      	lsls	r5, r2
 8002320:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002324:	e9d1 3100 	ldrd	r3, r1, [r1]
 8002328:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800232a:	4093      	lsls	r3, r2
 800232c:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 800232e:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	21c0      	movs	r1, #192	; 0xc0
 8002334:	fa01 f202 	lsl.w	r2, r1, r2
 8002338:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 800233c:	2301      	movs	r3, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800233e:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002340:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8002342:	2300      	movs	r3, #0
 8002344:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8002346:	4618      	mov	r0, r3
}
 8002348:	bd30      	pop	{r4, r5, pc}

0800234a <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800234a:	4770      	bx	lr

0800234c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 800234c:	4770      	bx	lr

0800234e <HAL_DACEx_ErrorCallbackCh2>:
 800234e:	4770      	bx	lr

08002350 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002350:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002352:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff fff8 	bl	800234a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800235a:	2301      	movs	r3, #1
 800235c:	7123      	strb	r3, [r4, #4]
}
 800235e:	bd10      	pop	{r4, pc}

08002360 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002360:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002362:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002364:	f7ff fff2 	bl	800234c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002368:	bd08      	pop	{r3, pc}

0800236a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800236a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800236c:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800236e:	6923      	ldr	r3, [r4, #16]
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002376:	4620      	mov	r0, r4
 8002378:	f7ff ffe9 	bl	800234e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800237c:	2301      	movs	r3, #1
 800237e:	7123      	strb	r3, [r4, #4]
}
 8002380:	bd10      	pop	{r4, pc}
	...

08002384 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002384:	6803      	ldr	r3, [r0, #0]
{
 8002386:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002388:	4c08      	ldr	r4, [pc, #32]	; (80023ac <DMA_CalcBaseAndBitshift+0x28>)
{
 800238a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800238c:	b2d9      	uxtb	r1, r3
 800238e:	3910      	subs	r1, #16
 8002390:	2018      	movs	r0, #24
 8002392:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002396:	5c20      	ldrb	r0, [r4, r0]
 8002398:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800239a:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 800239e:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 80023a2:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023a4:	bf88      	it	hi
 80023a6:	3004      	addhi	r0, #4
 80023a8:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 80023aa:	bd10      	pop	{r4, pc}
 80023ac:	08008fed 	.word	0x08008fed

080023b0 <HAL_DMA_Init>:
{
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80023b4:	f7ff fc54 	bl	8001c60 <HAL_GetTick>
 80023b8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80023ba:	2c00      	cmp	r4, #0
 80023bc:	d073      	beq.n	80024a6 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 80023be:	2302      	movs	r3, #2
 80023c0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80023c4:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 80023c6:	2300      	movs	r3, #0
 80023c8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80023cc:	6813      	ldr	r3, [r2, #0]
 80023ce:	f023 0301 	bic.w	r3, r3, #1
 80023d2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023d4:	6821      	ldr	r1, [r4, #0]
 80023d6:	680b      	ldr	r3, [r1, #0]
 80023d8:	07d8      	lsls	r0, r3, #31
 80023da:	d42f      	bmi.n	800243c <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 80023dc:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023de:	4d33      	ldr	r5, [pc, #204]	; (80024ac <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023e0:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e2:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e4:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	68e2      	ldr	r2, [r4, #12]
 80023ec:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ee:	6922      	ldr	r2, [r4, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	6962      	ldr	r2, [r4, #20]
 80023f4:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023f6:	69e2      	ldr	r2, [r4, #28]
 80023f8:	4303      	orrs	r3, r0
 80023fa:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80023fc:	6a22      	ldr	r2, [r4, #32]
 80023fe:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002400:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002402:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002404:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002408:	bf02      	ittt	eq
 800240a:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800240e:	4335      	orreq	r5, r6
 8002410:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002412:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002414:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002416:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002418:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800241c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002420:	d133      	bne.n	800248a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002422:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002424:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002426:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002428:	b37d      	cbz	r5, 800248a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800242a:	b990      	cbnz	r0, 8002452 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 800242c:	2a01      	cmp	r2, #1
 800242e:	d021      	beq.n	8002474 <HAL_DMA_Init+0xc4>
 8002430:	f032 0202 	bics.w	r2, r2, #2
 8002434:	d129      	bne.n	800248a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002436:	01ea      	lsls	r2, r5, #7
 8002438:	d527      	bpl.n	800248a <HAL_DMA_Init+0xda>
 800243a:	e01e      	b.n	800247a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800243c:	f7ff fc10 	bl	8001c60 <HAL_GetTick>
 8002440:	1b40      	subs	r0, r0, r5
 8002442:	2805      	cmp	r0, #5
 8002444:	d9c6      	bls.n	80023d4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002446:	2320      	movs	r3, #32
 8002448:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800244a:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 800244c:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002450:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002452:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002456:	d114      	bne.n	8002482 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002458:	2a03      	cmp	r2, #3
 800245a:	d816      	bhi.n	800248a <HAL_DMA_Init+0xda>
 800245c:	a001      	add	r0, pc, #4	; (adr r0, 8002464 <HAL_DMA_Init+0xb4>)
 800245e:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8002462:	bf00      	nop
 8002464:	0800247b 	.word	0x0800247b
 8002468:	08002437 	.word	0x08002437
 800246c:	0800247b 	.word	0x0800247b
 8002470:	08002475 	.word	0x08002475
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002474:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002478:	d107      	bne.n	800248a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800247a:	2340      	movs	r3, #64	; 0x40
 800247c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800247e:	2001      	movs	r0, #1
 8002480:	e7e4      	b.n	800244c <HAL_DMA_Init+0x9c>
    switch (tmp)
 8002482:	2a02      	cmp	r2, #2
 8002484:	d9f9      	bls.n	800247a <HAL_DMA_Init+0xca>
 8002486:	2a03      	cmp	r2, #3
 8002488:	d0d5      	beq.n	8002436 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800248a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff ff79 	bl	8002384 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002492:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002494:	233f      	movs	r3, #63	; 0x3f
 8002496:	4093      	lsls	r3, r2
 8002498:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800249c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800249e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80024a0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80024a4:	e7d4      	b.n	8002450 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 80024a6:	2001      	movs	r0, #1
 80024a8:	e7d2      	b.n	8002450 <HAL_DMA_Init+0xa0>
 80024aa:	bf00      	nop
 80024ac:	f010803f 	.word	0xf010803f

080024b0 <HAL_DMA_Start_IT>:
{
 80024b0:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80024b2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024b6:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80024b8:	2c01      	cmp	r4, #1
 80024ba:	d031      	beq.n	8002520 <HAL_DMA_Start_IT+0x70>
 80024bc:	2401      	movs	r4, #1
 80024be:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80024c2:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80024c6:	2c01      	cmp	r4, #1
 80024c8:	f04f 0500 	mov.w	r5, #0
 80024cc:	f04f 0402 	mov.w	r4, #2
 80024d0:	d124      	bne.n	800251c <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80024d2:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024d6:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024d8:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024da:	6825      	ldr	r5, [r4, #0]
 80024dc:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80024e0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80024e2:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024e4:	6883      	ldr	r3, [r0, #8]
 80024e6:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80024e8:	bf0e      	itee	eq
 80024ea:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80024ec:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80024ee:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80024f2:	bf08      	it	eq
 80024f4:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024f6:	233f      	movs	r3, #63	; 0x3f
 80024f8:	4093      	lsls	r3, r2
 80024fa:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	f043 0316 	orr.w	r3, r3, #22
 8002502:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002504:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002506:	b11b      	cbz	r3, 8002510 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002508:	6823      	ldr	r3, [r4, #0]
 800250a:	f043 0308 	orr.w	r3, r3, #8
 800250e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8002510:	6823      	ldr	r3, [r4, #0]
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2000      	movs	r0, #0
}
 800251a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 800251c:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8002520:	2002      	movs	r0, #2
 8002522:	e7fa      	b.n	800251a <HAL_DMA_Start_IT+0x6a>

08002524 <HAL_DMA_Abort>:
{
 8002524:	b570      	push	{r4, r5, r6, lr}
 8002526:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002528:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 800252a:	f7ff fb99 	bl	8001c60 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002532:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8002534:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002536:	d006      	beq.n	8002546 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	2380      	movs	r3, #128	; 0x80
 800253a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 800253c:	2300      	movs	r3, #0
 800253e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8002542:	2001      	movs	r0, #1
}
 8002544:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002546:	6823      	ldr	r3, [r4, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	f022 0216 	bic.w	r2, r2, #22
 800254e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002550:	695a      	ldr	r2, [r3, #20]
 8002552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002556:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002558:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800255a:	b90a      	cbnz	r2, 8002560 <HAL_DMA_Abort+0x3c>
 800255c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800255e:	b11a      	cbz	r2, 8002568 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	f022 0208 	bic.w	r2, r2, #8
 8002566:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	f022 0201 	bic.w	r2, r2, #1
 800256e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f013 0301 	ands.w	r3, r3, #1
 8002578:	d10a      	bne.n	8002590 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800257a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800257c:	223f      	movs	r2, #63	; 0x3f
 800257e:	408a      	lsls	r2, r1
 8002580:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8002582:	2201      	movs	r2, #1
 8002584:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002588:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800258c:	4618      	mov	r0, r3
 800258e:	e7d9      	b.n	8002544 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002590:	f7ff fb66 	bl	8001c60 <HAL_GetTick>
 8002594:	1b40      	subs	r0, r0, r5
 8002596:	2805      	cmp	r0, #5
 8002598:	d9ea      	bls.n	8002570 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800259a:	2320      	movs	r3, #32
 800259c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800259e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80025a0:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025a2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80025a6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80025aa:	e7cb      	b.n	8002544 <HAL_DMA_Abort+0x20>

080025ac <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025ac:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d003      	beq.n	80025bc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80025b8:	2001      	movs	r0, #1
 80025ba:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80025bc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80025be:	2305      	movs	r3, #5
 80025c0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80025c4:	6813      	ldr	r3, [r2, #0]
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80025cc:	2000      	movs	r0, #0
}
 80025ce:	4770      	bx	lr

080025d0 <HAL_DMA_IRQHandler>:
{
 80025d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025d6:	4b5c      	ldr	r3, [pc, #368]	; (8002748 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80025da:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025dc:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80025de:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e0:	2208      	movs	r2, #8
 80025e2:	409a      	lsls	r2, r3
 80025e4:	4232      	tst	r2, r6
{
 80025e6:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025e8:	d00c      	beq.n	8002604 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ea:	6801      	ldr	r1, [r0, #0]
 80025ec:	6808      	ldr	r0, [r1, #0]
 80025ee:	0740      	lsls	r0, r0, #29
 80025f0:	d508      	bpl.n	8002604 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025f2:	6808      	ldr	r0, [r1, #0]
 80025f4:	f020 0004 	bic.w	r0, r0, #4
 80025f8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025fa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025fc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002604:	2201      	movs	r2, #1
 8002606:	409a      	lsls	r2, r3
 8002608:	4232      	tst	r2, r6
 800260a:	d008      	beq.n	800261e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800260c:	6821      	ldr	r1, [r4, #0]
 800260e:	6949      	ldr	r1, [r1, #20]
 8002610:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002612:	bf41      	itttt	mi
 8002614:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002616:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002618:	f042 0202 	orrmi.w	r2, r2, #2
 800261c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800261e:	2204      	movs	r2, #4
 8002620:	409a      	lsls	r2, r3
 8002622:	4232      	tst	r2, r6
 8002624:	d008      	beq.n	8002638 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002626:	6821      	ldr	r1, [r4, #0]
 8002628:	6809      	ldr	r1, [r1, #0]
 800262a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800262c:	bf41      	itttt	mi
 800262e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002630:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002632:	f042 0204 	orrmi.w	r2, r2, #4
 8002636:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002638:	2210      	movs	r2, #16
 800263a:	409a      	lsls	r2, r3
 800263c:	4232      	tst	r2, r6
 800263e:	d010      	beq.n	8002662 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	6819      	ldr	r1, [r3, #0]
 8002644:	0709      	lsls	r1, r1, #28
 8002646:	d50c      	bpl.n	8002662 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002648:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	0350      	lsls	r0, r2, #13
 800264e:	d537      	bpl.n	80026c0 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	0319      	lsls	r1, r3, #12
 8002654:	d401      	bmi.n	800265a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002656:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002658:	e000      	b.n	800265c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800265a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800265c:	b10b      	cbz	r3, 8002662 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800265e:	4620      	mov	r0, r4
 8002660:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002662:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002664:	2220      	movs	r2, #32
 8002666:	408a      	lsls	r2, r1
 8002668:	4232      	tst	r2, r6
 800266a:	d03a      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800266c:	6823      	ldr	r3, [r4, #0]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	06c6      	lsls	r6, r0, #27
 8002672:	d536      	bpl.n	80026e2 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002674:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002676:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800267a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800267c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800267e:	d127      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002680:	f022 0216 	bic.w	r2, r2, #22
 8002684:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800268c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002690:	b90a      	cbnz	r2, 8002696 <HAL_DMA_IRQHandler+0xc6>
 8002692:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002694:	b11a      	cbz	r2, 800269e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	f022 0208 	bic.w	r2, r2, #8
 800269c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269e:	233f      	movs	r3, #63	; 0x3f
 80026a0:	408b      	lsls	r3, r1
 80026a2:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80026a4:	2301      	movs	r3, #1
 80026a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80026aa:	2300      	movs	r3, #0
 80026ac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80026b0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d045      	beq.n	8002742 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80026b6:	4620      	mov	r0, r4
}
 80026b8:	b003      	add	sp, #12
 80026ba:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80026be:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026c4:	bf5e      	ittt	pl
 80026c6:	681a      	ldrpl	r2, [r3, #0]
 80026c8:	f022 0208 	bicpl.w	r2, r2, #8
 80026cc:	601a      	strpl	r2, [r3, #0]
 80026ce:	e7c2      	b.n	8002656 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026d0:	0350      	lsls	r0, r2, #13
 80026d2:	d527      	bpl.n	8002724 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	0319      	lsls	r1, r3, #12
 80026d8:	d431      	bmi.n	800273e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80026da:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80026dc:	b10b      	cbz	r3, 80026e2 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80026de:	4620      	mov	r0, r4
 80026e0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026e2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026e4:	b36b      	cbz	r3, 8002742 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026e6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80026e8:	07da      	lsls	r2, r3, #31
 80026ea:	d519      	bpl.n	8002720 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 80026ec:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026ee:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80026f2:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 80026f6:	2305      	movs	r3, #5
 80026f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80026fc:	6813      	ldr	r3, [r2, #0]
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002704:	9b01      	ldr	r3, [sp, #4]
 8002706:	3301      	adds	r3, #1
 8002708:	42bb      	cmp	r3, r7
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	d802      	bhi.n	8002714 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800270e:	6813      	ldr	r3, [r2, #0]
 8002710:	07db      	lsls	r3, r3, #31
 8002712:	d4f7      	bmi.n	8002704 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002714:	2301      	movs	r3, #1
 8002716:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800271a:	2300      	movs	r3, #0
 800271c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002720:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002722:	e7c6      	b.n	80026b2 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800272a:	d108      	bne.n	800273e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800272c:	6819      	ldr	r1, [r3, #0]
 800272e:	f021 0110 	bic.w	r1, r1, #16
 8002732:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002734:	2301      	movs	r3, #1
 8002736:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800273a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800273e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002740:	e7cc      	b.n	80026dc <HAL_DMA_IRQHandler+0x10c>
}
 8002742:	b003      	add	sp, #12
 8002744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002746:	bf00      	nop
 8002748:	20000008 	.word	0x20000008

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002750:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80028f0 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002754:	4a64      	ldr	r2, [pc, #400]	; (80028e8 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002756:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002758:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 800275a:	2401      	movs	r4, #1
 800275c:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8002762:	43ac      	bics	r4, r5
 8002764:	f040 80ad 	bne.w	80028c2 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002768:	684d      	ldr	r5, [r1, #4]
 800276a:	f005 0403 	and.w	r4, r5, #3
 800276e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002772:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002774:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002776:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800277c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002780:	d834      	bhi.n	80027ec <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8002782:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002784:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002788:	68cf      	ldr	r7, [r1, #12]
 800278a:	fa07 f708 	lsl.w	r7, r7, r8
 800278e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8002792:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8002794:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002796:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800279a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800279e:	409f      	lsls	r7, r3
 80027a0:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80027a4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80027a6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027a8:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ac:	688f      	ldr	r7, [r1, #8]
 80027ae:	fa07 f708 	lsl.w	r7, r7, r8
 80027b2:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80027b8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ba:	d119      	bne.n	80027f0 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80027bc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80027c0:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027c4:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80027c8:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027cc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80027d0:	f04f 0e0f 	mov.w	lr, #15
 80027d4:	fa0e fe0b 	lsl.w	lr, lr, fp
 80027d8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027dc:	690f      	ldr	r7, [r1, #16]
 80027de:	fa07 f70b 	lsl.w	r7, r7, fp
 80027e2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80027e6:	f8ca 7020 	str.w	r7, [sl, #32]
 80027ea:	e001      	b.n	80027f0 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ec:	2c03      	cmp	r4, #3
 80027ee:	d1da      	bne.n	80027a6 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80027f0:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f2:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f8:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027fa:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80027fe:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002800:	d05f      	beq.n	80028c2 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	f04f 0a00 	mov.w	sl, #0
 8002806:	f8cd a004 	str.w	sl, [sp, #4]
 800280a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800280e:	4c37      	ldr	r4, [pc, #220]	; (80028ec <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002810:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002814:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002818:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800281c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002820:	9601      	str	r6, [sp, #4]
 8002822:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002824:	f023 0603 	bic.w	r6, r3, #3
 8002828:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800282c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002830:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002834:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002838:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800283c:	270f      	movs	r7, #15
 800283e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002842:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002844:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002848:	d042      	beq.n	80028d0 <HAL_GPIO_Init+0x184>
 800284a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800284e:	42a0      	cmp	r0, r4
 8002850:	d040      	beq.n	80028d4 <HAL_GPIO_Init+0x188>
 8002852:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002856:	42a0      	cmp	r0, r4
 8002858:	d03e      	beq.n	80028d8 <HAL_GPIO_Init+0x18c>
 800285a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800285e:	42a0      	cmp	r0, r4
 8002860:	d03c      	beq.n	80028dc <HAL_GPIO_Init+0x190>
 8002862:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002866:	42a0      	cmp	r0, r4
 8002868:	d03a      	beq.n	80028e0 <HAL_GPIO_Init+0x194>
 800286a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800286e:	42a0      	cmp	r0, r4
 8002870:	d038      	beq.n	80028e4 <HAL_GPIO_Init+0x198>
 8002872:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002876:	42a0      	cmp	r0, r4
 8002878:	bf0c      	ite	eq
 800287a:	2406      	moveq	r4, #6
 800287c:	2407      	movne	r4, #7
 800287e:	fa04 f40e 	lsl.w	r4, r4, lr
 8002882:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002884:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8002886:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002888:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800288c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800288e:	bf54      	ite	pl
 8002890:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002892:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8002896:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8002898:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800289a:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800289c:	bf54      	ite	pl
 800289e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80028a0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80028a4:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80028a6:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a8:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80028aa:	bf54      	ite	pl
 80028ac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80028ae:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80028b2:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028b4:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b6:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80028b8:	bf54      	ite	pl
 80028ba:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80028bc:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80028c0:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c2:	3301      	adds	r3, #1
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	f47f af47 	bne.w	8002758 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80028ca:	b003      	add	sp, #12
 80028cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028d0:	4654      	mov	r4, sl
 80028d2:	e7d4      	b.n	800287e <HAL_GPIO_Init+0x132>
 80028d4:	2401      	movs	r4, #1
 80028d6:	e7d2      	b.n	800287e <HAL_GPIO_Init+0x132>
 80028d8:	2402      	movs	r4, #2
 80028da:	e7d0      	b.n	800287e <HAL_GPIO_Init+0x132>
 80028dc:	2403      	movs	r4, #3
 80028de:	e7ce      	b.n	800287e <HAL_GPIO_Init+0x132>
 80028e0:	2404      	movs	r4, #4
 80028e2:	e7cc      	b.n	800287e <HAL_GPIO_Init+0x132>
 80028e4:	2405      	movs	r4, #5
 80028e6:	e7ca      	b.n	800287e <HAL_GPIO_Init+0x132>
 80028e8:	40013c00 	.word	0x40013c00
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40023800 	.word	0x40023800

080028f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	9301      	str	r3, [sp, #4]
 80028fa:	4b18      	ldr	r3, [pc, #96]	; (800295c <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028fc:	4d18      	ldr	r5, [pc, #96]	; (8002960 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80028fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002900:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002904:	641a      	str	r2, [r3, #64]	; 0x40
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800290c:	9301      	str	r3, [sp, #4]
 800290e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002910:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_PWREx_EnableOverDrive+0x70>)
 8002912:	2201      	movs	r2, #1
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002916:	f7ff f9a3 	bl	8001c60 <HAL_GetTick>
 800291a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800291c:	686b      	ldr	r3, [r5, #4]
 800291e:	03da      	lsls	r2, r3, #15
 8002920:	d50b      	bpl.n	800293a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002922:	4b10      	ldr	r3, [pc, #64]	; (8002964 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002924:	4d0e      	ldr	r5, [pc, #56]	; (8002960 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002926:	2201      	movs	r2, #1
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 800292a:	f7ff f999 	bl	8001c60 <HAL_GetTick>
 800292e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002930:	686b      	ldr	r3, [r5, #4]
 8002932:	039b      	lsls	r3, r3, #14
 8002934:	d50a      	bpl.n	800294c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002936:	2000      	movs	r0, #0
 8002938:	e006      	b.n	8002948 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800293a:	f7ff f991 	bl	8001c60 <HAL_GetTick>
 800293e:	1b00      	subs	r0, r0, r4
 8002940:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002944:	d9ea      	bls.n	800291c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8002946:	2003      	movs	r0, #3
}
 8002948:	b003      	add	sp, #12
 800294a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800294c:	f7ff f988 	bl	8001c60 <HAL_GetTick>
 8002950:	1b00      	subs	r0, r0, r4
 8002952:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002956:	d9eb      	bls.n	8002930 <HAL_PWREx_EnableOverDrive+0x3c>
 8002958:	e7f5      	b.n	8002946 <HAL_PWREx_EnableOverDrive+0x52>
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	40007000 	.word	0x40007000
 8002964:	420e0000 	.word	0x420e0000

08002968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800296c:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	4604      	mov	r4, r0
 8002970:	b910      	cbnz	r0, 8002978 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8002972:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b44      	ldr	r3, [pc, #272]	; (8002a8c <HAL_RCC_ClockConfig+0x124>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	f002 020f 	and.w	r2, r2, #15
 8002980:	428a      	cmp	r2, r1
 8002982:	d328      	bcc.n	80029d6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002984:	6822      	ldr	r2, [r4, #0]
 8002986:	0797      	lsls	r7, r2, #30
 8002988:	d42d      	bmi.n	80029e6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800298a:	07d0      	lsls	r0, r2, #31
 800298c:	d441      	bmi.n	8002a12 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298e:	4b3f      	ldr	r3, [pc, #252]	; (8002a8c <HAL_RCC_ClockConfig+0x124>)
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	f002 020f 	and.w	r2, r2, #15
 8002996:	42aa      	cmp	r2, r5
 8002998:	d866      	bhi.n	8002a68 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	0751      	lsls	r1, r2, #29
 800299e:	d46c      	bmi.n	8002a7a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	0713      	lsls	r3, r2, #28
 80029a2:	d507      	bpl.n	80029b4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a4:	4a3a      	ldr	r2, [pc, #232]	; (8002a90 <HAL_RCC_ClockConfig+0x128>)
 80029a6:	6921      	ldr	r1, [r4, #16]
 80029a8:	6893      	ldr	r3, [r2, #8]
 80029aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029ae:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029b2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b4:	f000 f894 	bl	8002ae0 <HAL_RCC_GetSysClockFreq>
 80029b8:	4b35      	ldr	r3, [pc, #212]	; (8002a90 <HAL_RCC_ClockConfig+0x128>)
 80029ba:	4a36      	ldr	r2, [pc, #216]	; (8002a94 <HAL_RCC_ClockConfig+0x12c>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80029c2:	5cd3      	ldrb	r3, [r2, r3]
 80029c4:	40d8      	lsrs	r0, r3
 80029c6:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <HAL_RCC_ClockConfig+0x130>)
 80029c8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80029ca:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <HAL_RCC_ClockConfig+0x134>)
 80029cc:	6818      	ldr	r0, [r3, #0]
 80029ce:	f7ff f8fd 	bl	8001bcc <HAL_InitTick>
  return HAL_OK;
 80029d2:	2000      	movs	r0, #0
 80029d4:	e7ce      	b.n	8002974 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	b2ca      	uxtb	r2, r1
 80029d8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 030f 	and.w	r3, r3, #15
 80029e0:	428b      	cmp	r3, r1
 80029e2:	d1c6      	bne.n	8002972 <HAL_RCC_ClockConfig+0xa>
 80029e4:	e7ce      	b.n	8002984 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e6:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <HAL_RCC_ClockConfig+0x128>)
 80029e8:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029ec:	bf1e      	ittt	ne
 80029ee:	6899      	ldrne	r1, [r3, #8]
 80029f0:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 80029f4:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f6:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029f8:	bf42      	ittt	mi
 80029fa:	6899      	ldrmi	r1, [r3, #8]
 80029fc:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002a00:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a02:	4923      	ldr	r1, [pc, #140]	; (8002a90 <HAL_RCC_ClockConfig+0x128>)
 8002a04:	68a0      	ldr	r0, [r4, #8]
 8002a06:	688b      	ldr	r3, [r1, #8]
 8002a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0c:	4303      	orrs	r3, r0
 8002a0e:	608b      	str	r3, [r1, #8]
 8002a10:	e7bb      	b.n	800298a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	6862      	ldr	r2, [r4, #4]
 8002a14:	4b1e      	ldr	r3, [pc, #120]	; (8002a90 <HAL_RCC_ClockConfig+0x128>)
 8002a16:	2a01      	cmp	r2, #1
 8002a18:	d11c      	bne.n	8002a54 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a20:	d0a7      	beq.n	8002972 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4e1b      	ldr	r6, [pc, #108]	; (8002a90 <HAL_RCC_ClockConfig+0x128>)
 8002a24:	68b3      	ldr	r3, [r6, #8]
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a2e:	f7ff f917 	bl	8001c60 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a32:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a36:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a38:	68b3      	ldr	r3, [r6, #8]
 8002a3a:	6862      	ldr	r2, [r4, #4]
 8002a3c:	f003 030c 	and.w	r3, r3, #12
 8002a40:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a44:	d0a3      	beq.n	800298e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a46:	f7ff f90b 	bl	8001c60 <HAL_GetTick>
 8002a4a:	1bc0      	subs	r0, r0, r7
 8002a4c:	4540      	cmp	r0, r8
 8002a4e:	d9f3      	bls.n	8002a38 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8002a50:	2003      	movs	r0, #3
 8002a52:	e78f      	b.n	8002974 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a54:	1e91      	subs	r1, r2, #2
 8002a56:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a58:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a5a:	d802      	bhi.n	8002a62 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002a60:	e7de      	b.n	8002a20 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	f013 0f02 	tst.w	r3, #2
 8002a66:	e7db      	b.n	8002a20 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a68:	b2ea      	uxtb	r2, r5
 8002a6a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	42ab      	cmp	r3, r5
 8002a74:	f47f af7d 	bne.w	8002972 <HAL_RCC_ClockConfig+0xa>
 8002a78:	e78f      	b.n	800299a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7a:	4905      	ldr	r1, [pc, #20]	; (8002a90 <HAL_RCC_ClockConfig+0x128>)
 8002a7c:	68e0      	ldr	r0, [r4, #12]
 8002a7e:	688b      	ldr	r3, [r1, #8]
 8002a80:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002a84:	4303      	orrs	r3, r0
 8002a86:	608b      	str	r3, [r1, #8]
 8002a88:	e78a      	b.n	80029a0 <HAL_RCC_ClockConfig+0x38>
 8002a8a:	bf00      	nop
 8002a8c:	40023c00 	.word	0x40023c00
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08008fd5 	.word	0x08008fd5
 8002a98:	20000008 	.word	0x20000008
 8002a9c:	20000010 	.word	0x20000010

08002aa0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002aa2:	4a05      	ldr	r2, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8002aaa:	5cd3      	ldrb	r3, [r2, r3]
 8002aac:	4a03      	ldr	r2, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002aae:	6810      	ldr	r0, [r2, #0]
}
 8002ab0:	40d8      	lsrs	r0, r3
 8002ab2:	4770      	bx	lr
 8002ab4:	40023800 	.word	0x40023800
 8002ab8:	08008fe5 	.word	0x08008fe5
 8002abc:	20000008 	.word	0x20000008

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002aca:	5cd3      	ldrb	r3, [r2, r3]
 8002acc:	4a03      	ldr	r2, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002ace:	6810      	ldr	r0, [r2, #0]
}
 8002ad0:	40d8      	lsrs	r0, r3
 8002ad2:	4770      	bx	lr
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	08008fe5 	.word	0x08008fe5
 8002adc:	20000008 	.word	0x20000008

08002ae0 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae0:	4920      	ldr	r1, [pc, #128]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8002ae2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ae4:	688b      	ldr	r3, [r1, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b08      	cmp	r3, #8
 8002aec:	d007      	beq.n	8002afe <HAL_RCC_GetSysClockFreq+0x1e>
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d020      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x54>
 8002af2:	481d      	ldr	r0, [pc, #116]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x88>)
 8002af4:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x8c>)
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf08      	it	eq
 8002afa:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002afc:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002afe:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b00:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b02:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b04:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b08:	bf14      	ite	ne
 8002b0a:	4818      	ldrne	r0, [pc, #96]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0c:	4816      	ldreq	r0, [pc, #88]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002b12:	bf18      	it	ne
 8002b14:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b16:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b1a:	fba1 0100 	umull	r0, r1, r1, r0
 8002b1e:	f7fe f913 	bl	8000d48 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b22:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x84>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 8002b2e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002b32:	e7e3      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b34:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b36:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b38:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b3a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b3e:	bf14      	ite	ne
 8002b40:	480a      	ldrne	r0, [pc, #40]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b42:	4809      	ldreq	r0, [pc, #36]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b44:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002b48:	bf18      	it	ne
 8002b4a:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b50:	fba1 0100 	umull	r0, r1, r1, r0
 8002b54:	f7fe f8f8 	bl	8000d48 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002b58:	4b02      	ldr	r3, [pc, #8]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x84>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002b60:	e7e5      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x4e>
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	017d7840 	.word	0x017d7840

08002b70 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b74:	4604      	mov	r4, r0
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d030      	beq.n	8002bdc <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b7a:	6803      	ldr	r3, [r0, #0]
 8002b7c:	07df      	lsls	r7, r3, #31
 8002b7e:	d410      	bmi.n	8002ba2 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	079e      	lsls	r6, r3, #30
 8002b84:	d463      	bmi.n	8002c4e <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	071a      	lsls	r2, r3, #28
 8002b8a:	f100 80ad 	bmi.w	8002ce8 <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	075b      	lsls	r3, r3, #29
 8002b92:	f100 80cd 	bmi.w	8002d30 <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b96:	69a0      	ldr	r0, [r4, #24]
 8002b98:	2800      	cmp	r0, #0
 8002b9a:	f040 8135 	bne.w	8002e08 <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	e034      	b.n	8002c0c <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ba2:	4b96      	ldr	r3, [pc, #600]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	f002 020c 	and.w	r2, r2, #12
 8002baa:	2a04      	cmp	r2, #4
 8002bac:	d00f      	beq.n	8002bce <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002bb4:	2a08      	cmp	r2, #8
 8002bb6:	d102      	bne.n	8002bbe <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	0255      	lsls	r5, r2, #9
 8002bbc:	d407      	bmi.n	8002bce <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002bc4:	2a0c      	cmp	r2, #12
 8002bc6:	d10b      	bne.n	8002be0 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	0258      	lsls	r0, r3, #9
 8002bcc:	d508      	bpl.n	8002be0 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bce:	4b8b      	ldr	r3, [pc, #556]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0399      	lsls	r1, r3, #14
 8002bd4:	d5d4      	bpl.n	8002b80 <HAL_RCC_OscConfig+0x10>
 8002bd6:	6863      	ldr	r3, [r4, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1d1      	bne.n	8002b80 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8002bdc:	2001      	movs	r0, #1
 8002bde:	e015      	b.n	8002c0c <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002be0:	6863      	ldr	r3, [r4, #4]
 8002be2:	4d86      	ldr	r5, [pc, #536]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
 8002be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be8:	d113      	bne.n	8002c12 <HAL_RCC_OscConfig+0xa2>
 8002bea:	682b      	ldr	r3, [r5, #0]
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002bf2:	f7ff f835 	bl	8001c60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bf6:	4e81      	ldr	r6, [pc, #516]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002bf8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	6833      	ldr	r3, [r6, #0]
 8002bfc:	039a      	lsls	r2, r3, #14
 8002bfe:	d4bf      	bmi.n	8002b80 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c00:	f7ff f82e 	bl	8001c60 <HAL_GetTick>
 8002c04:	1b40      	subs	r0, r0, r5
 8002c06:	2864      	cmp	r0, #100	; 0x64
 8002c08:	d9f7      	bls.n	8002bfa <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8002c0a:	2003      	movs	r0, #3
}
 8002c0c:	b002      	add	sp, #8
 8002c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c16:	d104      	bne.n	8002c22 <HAL_RCC_OscConfig+0xb2>
 8002c18:	682b      	ldr	r3, [r5, #0]
 8002c1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c1e:	602b      	str	r3, [r5, #0]
 8002c20:	e7e3      	b.n	8002bea <HAL_RCC_OscConfig+0x7a>
 8002c22:	682a      	ldr	r2, [r5, #0]
 8002c24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c28:	602a      	str	r2, [r5, #0]
 8002c2a:	682a      	ldr	r2, [r5, #0]
 8002c2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c30:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1dd      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002c36:	f7ff f813 	bl	8001c60 <HAL_GetTick>
 8002c3a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c3c:	682b      	ldr	r3, [r5, #0]
 8002c3e:	039b      	lsls	r3, r3, #14
 8002c40:	d59e      	bpl.n	8002b80 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c42:	f7ff f80d 	bl	8001c60 <HAL_GetTick>
 8002c46:	1b80      	subs	r0, r0, r6
 8002c48:	2864      	cmp	r0, #100	; 0x64
 8002c4a:	d9f7      	bls.n	8002c3c <HAL_RCC_OscConfig+0xcc>
 8002c4c:	e7dd      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c4e:	4b6b      	ldr	r3, [pc, #428]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	f012 0f0c 	tst.w	r2, #12
 8002c56:	d00f      	beq.n	8002c78 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c58:	689a      	ldr	r2, [r3, #8]
 8002c5a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c5e:	2a08      	cmp	r2, #8
 8002c60:	d102      	bne.n	8002c68 <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	0257      	lsls	r7, r2, #9
 8002c66:	d507      	bpl.n	8002c78 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c68:	689a      	ldr	r2, [r3, #8]
 8002c6a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c6e:	2a0c      	cmp	r2, #12
 8002c70:	d111      	bne.n	8002c96 <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	025e      	lsls	r6, r3, #9
 8002c76:	d40e      	bmi.n	8002c96 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c78:	4a60      	ldr	r2, [pc, #384]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
 8002c7a:	6813      	ldr	r3, [r2, #0]
 8002c7c:	079d      	lsls	r5, r3, #30
 8002c7e:	d502      	bpl.n	8002c86 <HAL_RCC_OscConfig+0x116>
 8002c80:	68e3      	ldr	r3, [r4, #12]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d1aa      	bne.n	8002bdc <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c86:	6813      	ldr	r3, [r2, #0]
 8002c88:	6921      	ldr	r1, [r4, #16]
 8002c8a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c92:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c94:	e777      	b.n	8002b86 <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c96:	68e2      	ldr	r2, [r4, #12]
 8002c98:	4b59      	ldr	r3, [pc, #356]	; (8002e00 <HAL_RCC_OscConfig+0x290>)
 8002c9a:	b1b2      	cbz	r2, 8002cca <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ca0:	f7fe ffde 	bl	8001c60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	4d55      	ldr	r5, [pc, #340]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002ca6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	682b      	ldr	r3, [r5, #0]
 8002caa:	0798      	lsls	r0, r3, #30
 8002cac:	d507      	bpl.n	8002cbe <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	682b      	ldr	r3, [r5, #0]
 8002cb0:	6922      	ldr	r2, [r4, #16]
 8002cb2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002cb6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002cba:	602b      	str	r3, [r5, #0]
 8002cbc:	e763      	b.n	8002b86 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbe:	f7fe ffcf 	bl	8001c60 <HAL_GetTick>
 8002cc2:	1b80      	subs	r0, r0, r6
 8002cc4:	2802      	cmp	r0, #2
 8002cc6:	d9ef      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x138>
 8002cc8:	e79f      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8002cca:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ccc:	f7fe ffc8 	bl	8001c60 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd0:	4e4a      	ldr	r6, [pc, #296]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002cd2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd4:	6833      	ldr	r3, [r6, #0]
 8002cd6:	0799      	lsls	r1, r3, #30
 8002cd8:	f57f af55 	bpl.w	8002b86 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cdc:	f7fe ffc0 	bl	8001c60 <HAL_GetTick>
 8002ce0:	1b40      	subs	r0, r0, r5
 8002ce2:	2802      	cmp	r0, #2
 8002ce4:	d9f6      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x164>
 8002ce6:	e790      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ce8:	6962      	ldr	r2, [r4, #20]
 8002cea:	4b45      	ldr	r3, [pc, #276]	; (8002e00 <HAL_RCC_OscConfig+0x290>)
 8002cec:	b182      	cbz	r2, 8002d10 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002cf4:	f7fe ffb4 	bl	8001c60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf8:	4e40      	ldr	r6, [pc, #256]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002cfa:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002cfe:	079f      	lsls	r7, r3, #30
 8002d00:	f53f af45 	bmi.w	8002b8e <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d04:	f7fe ffac 	bl	8001c60 <HAL_GetTick>
 8002d08:	1b40      	subs	r0, r0, r5
 8002d0a:	2802      	cmp	r0, #2
 8002d0c:	d9f6      	bls.n	8002cfc <HAL_RCC_OscConfig+0x18c>
 8002d0e:	e77c      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8002d10:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002d14:	f7fe ffa4 	bl	8001c60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d18:	4e38      	ldr	r6, [pc, #224]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002d1a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d1c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8002d1e:	0798      	lsls	r0, r3, #30
 8002d20:	f57f af35 	bpl.w	8002b8e <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d24:	f7fe ff9c 	bl	8001c60 <HAL_GetTick>
 8002d28:	1b40      	subs	r0, r0, r5
 8002d2a:	2802      	cmp	r0, #2
 8002d2c:	d9f6      	bls.n	8002d1c <HAL_RCC_OscConfig+0x1ac>
 8002d2e:	e76c      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d30:	4b32      	ldr	r3, [pc, #200]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
 8002d32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d34:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002d38:	d128      	bne.n	8002d8c <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d3a:	9201      	str	r2, [sp, #4]
 8002d3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	9301      	str	r3, [sp, #4]
 8002d4c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002d4e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d50:	4d2c      	ldr	r5, [pc, #176]	; (8002e04 <HAL_RCC_OscConfig+0x294>)
 8002d52:	682b      	ldr	r3, [r5, #0]
 8002d54:	05d9      	lsls	r1, r3, #23
 8002d56:	d51b      	bpl.n	8002d90 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d58:	68a3      	ldr	r3, [r4, #8]
 8002d5a:	4d28      	ldr	r5, [pc, #160]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d127      	bne.n	8002db0 <HAL_RCC_OscConfig+0x240>
 8002d60:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002d68:	f7fe ff7a 	bl	8001c60 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4e23      	ldr	r6, [pc, #140]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002d6e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d70:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d74:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002d76:	079b      	lsls	r3, r3, #30
 8002d78:	d539      	bpl.n	8002dee <HAL_RCC_OscConfig+0x27e>
    if(pwrclkchanged == SET)
 8002d7a:	2f00      	cmp	r7, #0
 8002d7c:	f43f af0b 	beq.w	8002b96 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d80:	4a1e      	ldr	r2, [pc, #120]	; (8002dfc <HAL_RCC_OscConfig+0x28c>)
 8002d82:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	e704      	b.n	8002b96 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8002d8c:	2700      	movs	r7, #0
 8002d8e:	e7df      	b.n	8002d50 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d90:	682b      	ldr	r3, [r5, #0]
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002d98:	f7fe ff62 	bl	8001c60 <HAL_GetTick>
 8002d9c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9e:	682b      	ldr	r3, [r5, #0]
 8002da0:	05da      	lsls	r2, r3, #23
 8002da2:	d4d9      	bmi.n	8002d58 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da4:	f7fe ff5c 	bl	8001c60 <HAL_GetTick>
 8002da8:	1b80      	subs	r0, r0, r6
 8002daa:	2802      	cmp	r0, #2
 8002dac:	d9f7      	bls.n	8002d9e <HAL_RCC_OscConfig+0x22e>
 8002dae:	e72c      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002db0:	2b05      	cmp	r3, #5
 8002db2:	d104      	bne.n	8002dbe <HAL_RCC_OscConfig+0x24e>
 8002db4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	672b      	str	r3, [r5, #112]	; 0x70
 8002dbc:	e7d0      	b.n	8002d60 <HAL_RCC_OscConfig+0x1f0>
 8002dbe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002dc0:	f022 0201 	bic.w	r2, r2, #1
 8002dc4:	672a      	str	r2, [r5, #112]	; 0x70
 8002dc6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002dc8:	f022 0204 	bic.w	r2, r2, #4
 8002dcc:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ca      	bne.n	8002d68 <HAL_RCC_OscConfig+0x1f8>
      tickstart = HAL_GetTick();
 8002dd2:	f7fe ff45 	bl	8001c60 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002dda:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002dde:	0798      	lsls	r0, r3, #30
 8002de0:	d5cb      	bpl.n	8002d7a <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002de2:	f7fe ff3d 	bl	8001c60 <HAL_GetTick>
 8002de6:	1b80      	subs	r0, r0, r6
 8002de8:	4540      	cmp	r0, r8
 8002dea:	d9f7      	bls.n	8002ddc <HAL_RCC_OscConfig+0x26c>
 8002dec:	e70d      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe ff37 	bl	8001c60 <HAL_GetTick>
 8002df2:	1b40      	subs	r0, r0, r5
 8002df4:	4540      	cmp	r0, r8
 8002df6:	d9bd      	bls.n	8002d74 <HAL_RCC_OscConfig+0x204>
 8002df8:	e707      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
 8002dfa:	bf00      	nop
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470000 	.word	0x42470000
 8002e04:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e08:	4d3b      	ldr	r5, [pc, #236]	; (8002ef8 <HAL_RCC_OscConfig+0x388>)
 8002e0a:	68ab      	ldr	r3, [r5, #8]
 8002e0c:	f003 030c 	and.w	r3, r3, #12
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d040      	beq.n	8002e96 <HAL_RCC_OscConfig+0x326>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCC_OscConfig+0x38c>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002e1a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e1c:	d12e      	bne.n	8002e7c <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8002e1e:	f7fe ff1f 	bl	8001c60 <HAL_GetTick>
 8002e22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e24:	682b      	ldr	r3, [r5, #0]
 8002e26:	0199      	lsls	r1, r3, #6
 8002e28:	d422      	bmi.n	8002e70 <HAL_RCC_OscConfig+0x300>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e2a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002e32:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002e36:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002e38:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002e3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e3e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002e42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002e44:	0852      	lsrs	r2, r2, #1
 8002e46:	3a01      	subs	r2, #1
 8002e48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e4c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002e4e:	4b2b      	ldr	r3, [pc, #172]	; (8002efc <HAL_RCC_OscConfig+0x38c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e50:	4d29      	ldr	r5, [pc, #164]	; (8002ef8 <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_ENABLE();
 8002e52:	2201      	movs	r2, #1
 8002e54:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002e56:	f7fe ff03 	bl	8001c60 <HAL_GetTick>
 8002e5a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	682b      	ldr	r3, [r5, #0]
 8002e5e:	019a      	lsls	r2, r3, #6
 8002e60:	f53f ae9d 	bmi.w	8002b9e <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e64:	f7fe fefc 	bl	8001c60 <HAL_GetTick>
 8002e68:	1b00      	subs	r0, r0, r4
 8002e6a:	2802      	cmp	r0, #2
 8002e6c:	d9f6      	bls.n	8002e5c <HAL_RCC_OscConfig+0x2ec>
 8002e6e:	e6cc      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e70:	f7fe fef6 	bl	8001c60 <HAL_GetTick>
 8002e74:	1b80      	subs	r0, r0, r6
 8002e76:	2802      	cmp	r0, #2
 8002e78:	d9d4      	bls.n	8002e24 <HAL_RCC_OscConfig+0x2b4>
 8002e7a:	e6c6      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8002e7c:	f7fe fef0 	bl	8001c60 <HAL_GetTick>
 8002e80:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e82:	682b      	ldr	r3, [r5, #0]
 8002e84:	019b      	lsls	r3, r3, #6
 8002e86:	f57f ae8a 	bpl.w	8002b9e <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e8a:	f7fe fee9 	bl	8001c60 <HAL_GetTick>
 8002e8e:	1b00      	subs	r0, r0, r4
 8002e90:	2802      	cmp	r0, #2
 8002e92:	d9f6      	bls.n	8002e82 <HAL_RCC_OscConfig+0x312>
 8002e94:	e6b9      	b.n	8002c0a <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e96:	2801      	cmp	r0, #1
 8002e98:	f43f aeb8 	beq.w	8002c0c <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8002e9c:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e9e:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea4:	4291      	cmp	r1, r2
 8002ea6:	f47f ae99 	bne.w	8002bdc <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eaa:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb0:	428a      	cmp	r2, r1
 8002eb2:	f47f ae93 	bne.w	8002bdc <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eb6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eb8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002ebc:	401a      	ands	r2, r3
 8002ebe:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002ec2:	f47f ae8b 	bne.w	8002bdc <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ec6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ec8:	0852      	lsrs	r2, r2, #1
 8002eca:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002ece:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ed0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ed4:	f47f ae82 	bne.w	8002bdc <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ed8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002eda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ede:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002ee2:	f47f ae7b 	bne.w	8002bdc <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ee6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ee8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eec:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002ef0:	f43f ae55 	beq.w	8002b9e <HAL_RCC_OscConfig+0x2e>
 8002ef4:	e672      	b.n	8002bdc <HAL_RCC_OscConfig+0x6c>
 8002ef6:	bf00      	nop
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	42470000 	.word	0x42470000

08002f00 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f00:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d12c      	bne.n	8002f62 <HAL_TIM_Base_Start+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f08:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f0a:	4a17      	ldr	r2, [pc, #92]	; (8002f68 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f10:	6803      	ldr	r3, [r0, #0]
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d01a      	beq.n	8002f4c <HAL_TIM_Base_Start+0x4c>
 8002f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f1a:	d017      	beq.n	8002f4c <HAL_TIM_Base_Start+0x4c>
 8002f1c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <HAL_TIM_Base_Start+0x4c>
 8002f24:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00f      	beq.n	8002f4c <HAL_TIM_Base_Start+0x4c>
 8002f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00b      	beq.n	8002f4c <HAL_TIM_Base_Start+0x4c>
 8002f34:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <HAL_TIM_Base_Start+0x4c>
 8002f3c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <HAL_TIM_Base_Start+0x4c>
 8002f44:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	2a06      	cmp	r2, #6
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f5e:	2000      	movs	r0, #0
}
 8002f60:	4770      	bx	lr
    return HAL_ERROR;
 8002f62:	2001      	movs	r0, #1
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	40010000 	.word	0x40010000

08002f6c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f6c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d130      	bne.n	8002fd6 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f74:	2302      	movs	r3, #2
 8002f76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f7a:	6803      	ldr	r3, [r0, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f84:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <HAL_TIM_Base_Start_IT+0x70>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d01a      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x54>
 8002f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f8e:	d017      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x54>
 8002f90:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x54>
 8002f98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00f      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x54>
 8002fa0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x54>
 8002fa8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d007      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x54>
 8002fb0:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d003      	beq.n	8002fc0 <HAL_TIM_Base_Start_IT+0x54>
 8002fb8:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d104      	bne.n	8002fca <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc0:	689a      	ldr	r2, [r3, #8]
 8002fc2:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	2a06      	cmp	r2, #6
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	f042 0201 	orr.w	r2, r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fd2:	2000      	movs	r0, #0
}
 8002fd4:	4770      	bx	lr
    return HAL_ERROR;
 8002fd6:	2001      	movs	r0, #1
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40010000 	.word	0x40010000

08002fe0 <HAL_TIM_OC_DelayElapsedCallback>:
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_TIM_IC_CaptureCallback>:
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_TriggerCallback>:
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe8:	6803      	ldr	r3, [r0, #0]
 8002fea:	691a      	ldr	r2, [r3, #16]
 8002fec:	0791      	lsls	r1, r2, #30
{
 8002fee:	b510      	push	{r4, lr}
 8002ff0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ff2:	d50e      	bpl.n	8003012 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	0792      	lsls	r2, r2, #30
 8002ff8:	d50b      	bpl.n	8003012 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ffa:	f06f 0202 	mvn.w	r2, #2
 8002ffe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003000:	2201      	movs	r2, #1
 8003002:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	079b      	lsls	r3, r3, #30
 8003008:	d077      	beq.n	80030fa <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800300a:	f7ff ffea 	bl	8002fe2 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800300e:	2300      	movs	r3, #0
 8003010:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	691a      	ldr	r2, [r3, #16]
 8003016:	0750      	lsls	r0, r2, #29
 8003018:	d510      	bpl.n	800303c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800301a:	68da      	ldr	r2, [r3, #12]
 800301c:	0751      	lsls	r1, r2, #29
 800301e:	d50d      	bpl.n	800303c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003020:	f06f 0204 	mvn.w	r2, #4
 8003024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003026:	2202      	movs	r2, #2
 8003028:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003030:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003032:	d068      	beq.n	8003106 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003034:	f7ff ffd5 	bl	8002fe2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003038:	2300      	movs	r3, #0
 800303a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800303c:	6823      	ldr	r3, [r4, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	0712      	lsls	r2, r2, #28
 8003042:	d50f      	bpl.n	8003064 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003044:	68da      	ldr	r2, [r3, #12]
 8003046:	0710      	lsls	r0, r2, #28
 8003048:	d50c      	bpl.n	8003064 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800304a:	f06f 0208 	mvn.w	r2, #8
 800304e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003050:	2204      	movs	r2, #4
 8003052:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003058:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800305a:	d05a      	beq.n	8003112 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 800305c:	f7ff ffc1 	bl	8002fe2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003060:	2300      	movs	r3, #0
 8003062:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003064:	6823      	ldr	r3, [r4, #0]
 8003066:	691a      	ldr	r2, [r3, #16]
 8003068:	06d2      	lsls	r2, r2, #27
 800306a:	d510      	bpl.n	800308e <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	06d0      	lsls	r0, r2, #27
 8003070:	d50d      	bpl.n	800308e <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003072:	f06f 0210 	mvn.w	r2, #16
 8003076:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003078:	2208      	movs	r2, #8
 800307a:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003082:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003084:	d04b      	beq.n	800311e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	f7ff ffac 	bl	8002fe2 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	2300      	movs	r3, #0
 800308c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800308e:	6823      	ldr	r3, [r4, #0]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	07d1      	lsls	r1, r2, #31
 8003094:	d508      	bpl.n	80030a8 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	07d2      	lsls	r2, r2, #31
 800309a:	d505      	bpl.n	80030a8 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800309c:	f06f 0201 	mvn.w	r2, #1
 80030a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030a2:	4620      	mov	r0, r4
 80030a4:	f7fe fb26 	bl	80016f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	691a      	ldr	r2, [r3, #16]
 80030ac:	0610      	lsls	r0, r2, #24
 80030ae:	d508      	bpl.n	80030c2 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	0611      	lsls	r1, r2, #24
 80030b4:	d505      	bpl.n	80030c2 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80030b6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030bc:	4620      	mov	r0, r4
 80030be:	f000 f9ac 	bl	800341a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030c2:	6823      	ldr	r3, [r4, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	0652      	lsls	r2, r2, #25
 80030c8:	d508      	bpl.n	80030dc <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030ca:	68da      	ldr	r2, [r3, #12]
 80030cc:	0650      	lsls	r0, r2, #25
 80030ce:	d505      	bpl.n	80030dc <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030d0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030d6:	4620      	mov	r0, r4
 80030d8:	f7ff ff85 	bl	8002fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030dc:	6823      	ldr	r3, [r4, #0]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	0691      	lsls	r1, r2, #26
 80030e2:	d522      	bpl.n	800312a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	0692      	lsls	r2, r2, #26
 80030e8:	d51f      	bpl.n	800312a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030ea:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ee:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030f0:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80030f6:	f000 b98f 	b.w	8003418 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fa:	f7ff ff71 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fe:	4620      	mov	r0, r4
 8003100:	f7ff ff70 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003104:	e783      	b.n	800300e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003106:	f7ff ff6b 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310a:	4620      	mov	r0, r4
 800310c:	f7ff ff6a 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003110:	e792      	b.n	8003038 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	f7ff ff65 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003116:	4620      	mov	r0, r4
 8003118:	f7ff ff64 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
 800311c:	e7a0      	b.n	8003060 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	f7ff ff5f 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003122:	4620      	mov	r0, r4
 8003124:	f7ff ff5e 	bl	8002fe4 <HAL_TIM_PWM_PulseFinishedCallback>
 8003128:	e7af      	b.n	800308a <HAL_TIM_IRQHandler+0xa2>
}
 800312a:	bd10      	pop	{r4, pc}

0800312c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800312c:	4a30      	ldr	r2, [pc, #192]	; (80031f0 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800312e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003130:	4290      	cmp	r0, r2
 8003132:	d012      	beq.n	800315a <TIM_Base_SetConfig+0x2e>
 8003134:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8003138:	d00f      	beq.n	800315a <TIM_Base_SetConfig+0x2e>
 800313a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800313e:	4290      	cmp	r0, r2
 8003140:	d00b      	beq.n	800315a <TIM_Base_SetConfig+0x2e>
 8003142:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003146:	4290      	cmp	r0, r2
 8003148:	d007      	beq.n	800315a <TIM_Base_SetConfig+0x2e>
 800314a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800314e:	4290      	cmp	r0, r2
 8003150:	d003      	beq.n	800315a <TIM_Base_SetConfig+0x2e>
 8003152:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003156:	4290      	cmp	r0, r2
 8003158:	d119      	bne.n	800318e <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800315a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800315c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003160:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003162:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <TIM_Base_SetConfig+0xc4>)
 8003164:	4290      	cmp	r0, r2
 8003166:	d029      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 8003168:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800316c:	d026      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 800316e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003172:	4290      	cmp	r0, r2
 8003174:	d022      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 8003176:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800317a:	4290      	cmp	r0, r2
 800317c:	d01e      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 800317e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003182:	4290      	cmp	r0, r2
 8003184:	d01a      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 8003186:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800318a:	4290      	cmp	r0, r2
 800318c:	d016      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 800318e:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <TIM_Base_SetConfig+0xc8>)
 8003190:	4290      	cmp	r0, r2
 8003192:	d013      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 8003194:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003198:	4290      	cmp	r0, r2
 800319a:	d00f      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 800319c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031a0:	4290      	cmp	r0, r2
 80031a2:	d00b      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 80031a4:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80031a8:	4290      	cmp	r0, r2
 80031aa:	d007      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 80031ac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031b0:	4290      	cmp	r0, r2
 80031b2:	d003      	beq.n	80031bc <TIM_Base_SetConfig+0x90>
 80031b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031b8:	4290      	cmp	r0, r2
 80031ba:	d103      	bne.n	80031c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031bc:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80031be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c2:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c4:	694a      	ldr	r2, [r1, #20]
 80031c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ca:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80031cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ce:	688b      	ldr	r3, [r1, #8]
 80031d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d2:	680b      	ldr	r3, [r1, #0]
 80031d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d6:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <TIM_Base_SetConfig+0xc4>)
 80031d8:	4298      	cmp	r0, r3
 80031da:	d003      	beq.n	80031e4 <TIM_Base_SetConfig+0xb8>
 80031dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031e0:	4298      	cmp	r0, r3
 80031e2:	d101      	bne.n	80031e8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e4:	690b      	ldr	r3, [r1, #16]
 80031e6:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	2301      	movs	r3, #1
 80031ea:	6143      	str	r3, [r0, #20]
}
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40014000 	.word	0x40014000

080031f8 <HAL_TIM_Base_Init>:
{
 80031f8:	b510      	push	{r4, lr}
  if (htim == NULL)
 80031fa:	4604      	mov	r4, r0
 80031fc:	b330      	cbz	r0, 800324c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80031fe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003202:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003206:	b91b      	cbnz	r3, 8003210 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003208:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800320c:	f7fe fc16 	bl	8001a3c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003210:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003212:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003214:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003218:	1d21      	adds	r1, r4, #4
 800321a:	f7ff ff87 	bl	800312c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321e:	2301      	movs	r3, #1
 8003220:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8003224:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003226:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800322a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800322e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8003232:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003236:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800323a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800323e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8003242:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8003246:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800324a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800324c:	2001      	movs	r0, #1
 800324e:	e7fc      	b.n	800324a <HAL_TIM_Base_Init+0x52>

08003250 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003250:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003252:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003254:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003256:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800325a:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800325e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003260:	6083      	str	r3, [r0, #8]
}
 8003262:	bd10      	pop	{r4, pc}

08003264 <HAL_TIM_ConfigClockSource>:
{
 8003264:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003266:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800326a:	2b01      	cmp	r3, #1
{
 800326c:	4604      	mov	r4, r0
 800326e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8003272:	f000 8091 	beq.w	8003398 <HAL_TIM_ConfigClockSource+0x134>
 8003276:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8003278:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 800327c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8003280:	6800      	ldr	r0, [r0, #0]
 8003282:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003284:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003288:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800328c:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800328e:	680b      	ldr	r3, [r1, #0]
 8003290:	2b60      	cmp	r3, #96	; 0x60
 8003292:	d052      	beq.n	800333a <HAL_TIM_ConfigClockSource+0xd6>
 8003294:	d833      	bhi.n	80032fe <HAL_TIM_ConfigClockSource+0x9a>
 8003296:	2b40      	cmp	r3, #64	; 0x40
 8003298:	d067      	beq.n	800336a <HAL_TIM_ConfigClockSource+0x106>
 800329a:	d816      	bhi.n	80032ca <HAL_TIM_ConfigClockSource+0x66>
 800329c:	2b20      	cmp	r3, #32
 800329e:	d00d      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x58>
 80032a0:	d80a      	bhi.n	80032b8 <HAL_TIM_ConfigClockSource+0x54>
 80032a2:	f033 0110 	bics.w	r1, r3, #16
 80032a6:	d009      	beq.n	80032bc <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	2301      	movs	r3, #1
 80032aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80032ae:	2300      	movs	r3, #0
 80032b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80032b4:	4610      	mov	r0, r2
 80032b6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80032b8:	2b30      	cmp	r3, #48	; 0x30
 80032ba:	d1f5      	bne.n	80032a8 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 80032bc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f043 0307 	orr.w	r3, r3, #7
 80032c8:	e017      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 80032ca:	2b50      	cmp	r3, #80	; 0x50
 80032cc:	d1ec      	bne.n	80032a8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	684a      	ldr	r2, [r1, #4]
 80032d0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80032d2:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d4:	6a05      	ldr	r5, [r0, #32]
 80032d6:	f025 0501 	bic.w	r5, r5, #1
 80032da:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032dc:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80032de:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80032e6:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80032ea:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80032ec:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80032ee:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80032f0:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032f6:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80032fa:	6083      	str	r3, [r0, #8]
 80032fc:	e011      	b.n	8003322 <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80032fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003302:	d00e      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0xbe>
 8003304:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003308:	d00d      	beq.n	8003326 <HAL_TIM_ConfigClockSource+0xc2>
 800330a:	2b70      	cmp	r3, #112	; 0x70
 800330c:	d1cc      	bne.n	80032a8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 800330e:	68cb      	ldr	r3, [r1, #12]
 8003310:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8003314:	f7ff ff9c 	bl	8003250 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003318:	6822      	ldr	r2, [r4, #0]
 800331a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800331c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003320:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003322:	2200      	movs	r2, #0
 8003324:	e7c0      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8003326:	68cb      	ldr	r3, [r1, #12]
 8003328:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800332c:	f7ff ff90 	bl	8003250 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003330:	6822      	ldr	r2, [r4, #0]
 8003332:	6893      	ldr	r3, [r2, #8]
 8003334:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003338:	e7f2      	b.n	8003320 <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800333a:	684d      	ldr	r5, [r1, #4]
 800333c:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800333e:	6a01      	ldr	r1, [r0, #32]
 8003340:	f021 0110 	bic.w	r1, r1, #16
 8003344:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003346:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8003348:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800334a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800334e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003352:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003356:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800335a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800335c:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800335e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003360:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003364:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8003368:	e7c7      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800336a:	684a      	ldr	r2, [r1, #4]
 800336c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800336e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003370:	6a05      	ldr	r5, [r0, #32]
 8003372:	f025 0501 	bic.w	r5, r5, #1
 8003376:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003378:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800337a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800337e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003382:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8003386:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8003388:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800338a:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800338c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800338e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003392:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8003396:	e7b0      	b.n	80032fa <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8003398:	461a      	mov	r2, r3
 800339a:	e78b      	b.n	80032b4 <HAL_TIM_ConfigClockSource+0x50>

0800339c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800339c:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800339e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	f04f 0302 	mov.w	r3, #2
 80033a8:	d032      	beq.n	8003410 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033aa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033ae:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033b0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 80033b2:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80033b4:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80033b6:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033ba:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033bc:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033be:	4c15      	ldr	r4, [pc, #84]	; (8003414 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 80033c0:	42a3      	cmp	r3, r4
 80033c2:	d01a      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80033c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c8:	d017      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80033ca:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 80033ce:	42a3      	cmp	r3, r4
 80033d0:	d013      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80033d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033d6:	42a3      	cmp	r3, r4
 80033d8:	d00f      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80033da:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033de:	42a3      	cmp	r3, r4
 80033e0:	d00b      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80033e2:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80033e6:	42a3      	cmp	r3, r4
 80033e8:	d007      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80033ea:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80033ee:	42a3      	cmp	r3, r4
 80033f0:	d003      	beq.n	80033fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80033f2:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80033f6:	42a3      	cmp	r3, r4
 80033f8:	d104      	bne.n	8003404 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033fa:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003400:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003402:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003404:	2301      	movs	r3, #1
 8003406:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800340a:	2300      	movs	r3, #0
 800340c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8003410:	4618      	mov	r0, r3

  return HAL_OK;
}
 8003412:	bd30      	pop	{r4, r5, pc}
 8003414:	40010000 	.word	0x40010000

08003418 <HAL_TIMEx_CommutCallback>:
 8003418:	4770      	bx	lr

0800341a <HAL_TIMEx_BreakCallback>:
 800341a:	4770      	bx	lr

0800341c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800341c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341e:	f102 030c 	add.w	r3, r2, #12
 8003422:	e853 3f00 	ldrex	r3, [r3]
 8003426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	320c      	adds	r2, #12
 800342c:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 8003430:	6802      	ldr	r2, [r0, #0]
 8003432:	2900      	cmp	r1, #0
 8003434:	d1f2      	bne.n	800341c <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003436:	f102 0314 	add.w	r3, r2, #20
 800343a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	f102 0c14 	add.w	ip, r2, #20
 8003446:	e84c 3100 	strex	r1, r3, [ip]
 800344a:	2900      	cmp	r1, #0
 800344c:	d1f3      	bne.n	8003436 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800344e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003450:	2b01      	cmp	r3, #1
 8003452:	d10b      	bne.n	800346c <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	f102 030c 	add.w	r3, r2, #12
 8003458:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003460:	f102 0c0c 	add.w	ip, r2, #12
 8003464:	e84c 3100 	strex	r1, r3, [ip]
 8003468:	2900      	cmp	r1, #0
 800346a:	d1f3      	bne.n	8003454 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800346c:	2320      	movs	r3, #32
 800346e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003472:	2300      	movs	r3, #0
 8003474:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003476:	4770      	bx	lr

08003478 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003478:	6802      	ldr	r2, [r0, #0]
 800347a:	68c1      	ldr	r1, [r0, #12]
 800347c:	6913      	ldr	r3, [r2, #16]
 800347e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003482:	430b      	orrs	r3, r1
{
 8003484:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003486:	6113      	str	r3, [r2, #16]
{
 8003488:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800348a:	6883      	ldr	r3, [r0, #8]
 800348c:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800348e:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003490:	4303      	orrs	r3, r0
 8003492:	6968      	ldr	r0, [r5, #20]
 8003494:	4303      	orrs	r3, r0
 8003496:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003498:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800349c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80034a0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80034a2:	430b      	orrs	r3, r1
 80034a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034a6:	6953      	ldr	r3, [r2, #20]
 80034a8:	69a9      	ldr	r1, [r5, #24]
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	430b      	orrs	r3, r1
 80034b0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034b2:	4b1f      	ldr	r3, [pc, #124]	; (8003530 <UART_SetConfig+0xb8>)
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d003      	beq.n	80034c0 <UART_SetConfig+0x48>
 80034b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80034bc:	429a      	cmp	r2, r3
 80034be:	d123      	bne.n	8003508 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c0:	f7ff fafe 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c4:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034c6:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034cc:	e9d5 4600 	ldrd	r4, r6, [r5]
 80034d0:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034d4:	d11b      	bne.n	800350e <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034d6:	19b2      	adds	r2, r6, r6
 80034d8:	f04f 0300 	mov.w	r3, #0
 80034dc:	415b      	adcs	r3, r3
 80034de:	f7fd fc33 	bl	8000d48 <__aeabi_uldivmod>
 80034e2:	2164      	movs	r1, #100	; 0x64
 80034e4:	fbb0 f5f1 	udiv	r5, r0, r1
 80034e8:	fb01 0315 	mls	r3, r1, r5, r0
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	3332      	adds	r3, #50	; 0x32
 80034f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80034f4:	f003 0207 	and.w	r2, r3, #7
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80034fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003502:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003504:	60a3      	str	r3, [r4, #8]
  }
}
 8003506:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003508:	f7ff faca 	bl	8002aa0 <HAL_RCC_GetPCLK1Freq>
 800350c:	e7da      	b.n	80034c4 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800350e:	00b2      	lsls	r2, r6, #2
 8003510:	0fb3      	lsrs	r3, r6, #30
 8003512:	f7fd fc19 	bl	8000d48 <__aeabi_uldivmod>
 8003516:	2264      	movs	r2, #100	; 0x64
 8003518:	fbb0 f1f2 	udiv	r1, r0, r2
 800351c:	fb02 0311 	mls	r3, r2, r1, r0
 8003520:	011b      	lsls	r3, r3, #4
 8003522:	3332      	adds	r3, #50	; 0x32
 8003524:	fbb3 f3f2 	udiv	r3, r3, r2
 8003528:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800352c:	e7ea      	b.n	8003504 <UART_SetConfig+0x8c>
 800352e:	bf00      	nop
 8003530:	40011000 	.word	0x40011000

08003534 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	4604      	mov	r4, r0
 8003538:	460e      	mov	r6, r1
 800353a:	4617      	mov	r7, r2
 800353c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800353e:	6822      	ldr	r2, [r4, #0]
 8003540:	6813      	ldr	r3, [r2, #0]
 8003542:	ea36 0303 	bics.w	r3, r6, r3
 8003546:	d101      	bne.n	800354c <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003548:	2000      	movs	r0, #0
 800354a:	e028      	b.n	800359e <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 800354c:	1c6b      	adds	r3, r5, #1
 800354e:	d0f7      	beq.n	8003540 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003550:	b125      	cbz	r5, 800355c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8003552:	f7fe fb85 	bl	8001c60 <HAL_GetTick>
 8003556:	1bc0      	subs	r0, r0, r7
 8003558:	4285      	cmp	r5, r0
 800355a:	d2f0      	bcs.n	800353e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800355c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	f102 030c 	add.w	r3, r2, #12
 8003562:	e853 3f00 	ldrex	r3, [r3]
 8003566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356a:	320c      	adds	r2, #12
 800356c:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8003570:	6821      	ldr	r1, [r4, #0]
 8003572:	2800      	cmp	r0, #0
 8003574:	d1f2      	bne.n	800355c <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	f101 0314 	add.w	r3, r1, #20
 800357a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003582:	f101 0014 	add.w	r0, r1, #20
 8003586:	e840 3200 	strex	r2, r3, [r0]
 800358a:	2a00      	cmp	r2, #0
 800358c:	d1f3      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800358e:	2320      	movs	r3, #32
 8003590:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8003594:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8003598:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800359c:	2003      	movs	r0, #3
}
 800359e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080035a0 <HAL_UART_Init>:
{
 80035a0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80035a2:	4604      	mov	r4, r0
 80035a4:	b340      	cbz	r0, 80035f8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80035a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80035aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035ae:	b91b      	cbnz	r3, 80035b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80035b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80035b4:	f7fe faa2 	bl	8001afc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80035b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80035ba:	2324      	movs	r3, #36	; 0x24
 80035bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80035c0:	68d3      	ldr	r3, [r2, #12]
 80035c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035c6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80035c8:	4620      	mov	r0, r4
 80035ca:	f7ff ff55 	bl	8003478 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035d8:	695a      	ldr	r2, [r3, #20]
 80035da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80035ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ec:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80035f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80035f8:	2001      	movs	r0, #1
 80035fa:	e7fc      	b.n	80035f6 <HAL_UART_Init+0x56>

080035fc <HAL_UART_Transmit>:
{
 80035fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80035fe:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003600:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8003604:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8003606:	2a20      	cmp	r2, #32
{
 8003608:	4604      	mov	r4, r0
 800360a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800360c:	d149      	bne.n	80036a2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800360e:	2900      	cmp	r1, #0
 8003610:	d045      	beq.n	800369e <HAL_UART_Transmit+0xa2>
 8003612:	2f00      	cmp	r7, #0
 8003614:	d043      	beq.n	800369e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8003616:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800361a:	2a01      	cmp	r2, #1
 800361c:	d041      	beq.n	80036a2 <HAL_UART_Transmit+0xa6>
 800361e:	2201      	movs	r2, #1
 8003620:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003626:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003628:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800362a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800362e:	f7fe fb17 	bl	8001c60 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003632:	68a1      	ldr	r1, [r4, #8]
 8003634:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8003636:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003638:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800363c:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800363e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003640:	d103      	bne.n	800364a <HAL_UART_Transmit+0x4e>
 8003642:	6921      	ldr	r1, [r4, #16]
 8003644:	b909      	cbnz	r1, 800364a <HAL_UART_Transmit+0x4e>
 8003646:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003648:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 800364a:	2100      	movs	r1, #0
 800364c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003650:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003652:	b289      	uxth	r1, r1
 8003654:	b941      	cbnz	r1, 8003668 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003656:	2140      	movs	r1, #64	; 0x40
 8003658:	4620      	mov	r0, r4
 800365a:	f7ff ff6b 	bl	8003534 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800365e:	b960      	cbnz	r0, 800367a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003660:	2320      	movs	r3, #32
 8003662:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003666:	e009      	b.n	800367c <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	4620      	mov	r0, r4
 800366c:	e9cd 2300 	strd	r2, r3, [sp]
 8003670:	f7ff ff60 	bl	8003534 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003674:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003678:	b110      	cbz	r0, 8003680 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800367a:	2003      	movs	r0, #3
}
 800367c:	b003      	add	sp, #12
 800367e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003680:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8003682:	b94e      	cbnz	r6, 8003698 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003684:	f835 1b02 	ldrh.w	r1, [r5], #2
 8003688:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800368c:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800368e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003690:	3901      	subs	r1, #1
 8003692:	b289      	uxth	r1, r1
 8003694:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003696:	e7db      	b.n	8003650 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003698:	f816 1b01 	ldrb.w	r1, [r6], #1
 800369c:	e7f6      	b.n	800368c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800369e:	2001      	movs	r0, #1
 80036a0:	e7ec      	b.n	800367c <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80036a2:	2002      	movs	r0, #2
 80036a4:	e7ea      	b.n	800367c <HAL_UART_Transmit+0x80>

080036a6 <HAL_UART_TxCpltCallback>:
 80036a6:	4770      	bx	lr

080036a8 <HAL_UART_RxCpltCallback>:
 80036a8:	4770      	bx	lr

080036aa <HAL_UART_ErrorCallback>:
 80036aa:	4770      	bx	lr

080036ac <UART_DMAAbortOnError>:
{
 80036ac:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80036b4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80036b6:	f7ff fff8 	bl	80036aa <HAL_UART_ErrorCallback>
}
 80036ba:	bd08      	pop	{r3, pc}

080036bc <HAL_UARTEx_RxEventCallback>:
}
 80036bc:	4770      	bx	lr

080036be <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80036be:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c0:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036c2:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036c4:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80036ca:	d13e      	bne.n	800374a <UART_Receive_IT.part.0.isra.0+0x8c>
 80036cc:	6901      	ldr	r1, [r0, #16]
 80036ce:	2900      	cmp	r1, #0
 80036d0:	d13e      	bne.n	8003750 <UART_Receive_IT.part.0.isra.0+0x92>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036d2:	6852      	ldr	r2, [r2, #4]
 80036d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036d8:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 80036dc:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80036de:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d12c      	bne.n	8003744 <UART_Receive_IT.part.0.isra.0+0x86>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80036ea:	6802      	ldr	r2, [r0, #0]
 80036ec:	68d1      	ldr	r1, [r2, #12]
 80036ee:	f021 0120 	bic.w	r1, r1, #32
 80036f2:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036f4:	68d1      	ldr	r1, [r2, #12]
 80036f6:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80036fa:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036fc:	6951      	ldr	r1, [r2, #20]
 80036fe:	f021 0101 	bic.w	r1, r1, #1
 8003702:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003704:	2220      	movs	r2, #32
 8003706:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370a:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800370c:	2a01      	cmp	r2, #1
 800370e:	6802      	ldr	r2, [r0, #0]
 8003710:	d128      	bne.n	8003764 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003712:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	f102 030c 	add.w	r3, r2, #12
 8003718:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	f102 0c0c 	add.w	ip, r2, #12
 8003724:	e84c 3100 	strex	r1, r3, [ip]
 8003728:	2900      	cmp	r1, #0
 800372a:	d1f3      	bne.n	8003714 <UART_Receive_IT.part.0.isra.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800372c:	6813      	ldr	r3, [r2, #0]
 800372e:	06db      	lsls	r3, r3, #27
 8003730:	d505      	bpl.n	800373e <UART_Receive_IT.part.0.isra.0+0x80>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003732:	9101      	str	r1, [sp, #4]
 8003734:	6813      	ldr	r3, [r2, #0]
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	6853      	ldr	r3, [r2, #4]
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800373e:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003740:	f7ff ffbc 	bl	80036bc <HAL_UARTEx_RxEventCallback>
}
 8003744:	b003      	add	sp, #12
 8003746:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800374a:	b939      	cbnz	r1, 800375c <UART_Receive_IT.part.0.isra.0+0x9e>
 800374c:	6901      	ldr	r1, [r0, #16]
 800374e:	b929      	cbnz	r1, 800375c <UART_Receive_IT.part.0.isra.0+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003750:	6852      	ldr	r2, [r2, #4]
 8003752:	b2d2      	uxtb	r2, r2
 8003754:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8003756:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003758:	3301      	adds	r3, #1
 800375a:	e7bf      	b.n	80036dc <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800375c:	6852      	ldr	r2, [r2, #4]
 800375e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003762:	e7f7      	b.n	8003754 <UART_Receive_IT.part.0.isra.0+0x96>
        HAL_UART_RxCpltCallback(huart);
 8003764:	f7ff ffa0 	bl	80036a8 <HAL_UART_RxCpltCallback>
 8003768:	e7ec      	b.n	8003744 <UART_Receive_IT.part.0.isra.0+0x86>
	...

0800376c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800376c:	6803      	ldr	r3, [r0, #0]
{
 800376e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003770:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003772:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003774:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003776:	f012 0f0f 	tst.w	r2, #15
{
 800377a:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800377c:	d10c      	bne.n	8003798 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800377e:	0695      	lsls	r5, r2, #26
 8003780:	d570      	bpl.n	8003864 <HAL_UART_IRQHandler+0xf8>
 8003782:	068d      	lsls	r5, r1, #26
 8003784:	d56e      	bpl.n	8003864 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003786:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 800378a:	2b22      	cmp	r3, #34	; 0x22
 800378c:	d164      	bne.n	8003858 <HAL_UART_IRQHandler+0xec>
}
 800378e:	b003      	add	sp, #12
 8003790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003794:	f7ff bf93 	b.w	80036be <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003798:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800379c:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80037a0:	4305      	orrs	r5, r0
 80037a2:	d05f      	beq.n	8003864 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037a4:	07d5      	lsls	r5, r2, #31
 80037a6:	d505      	bpl.n	80037b4 <HAL_UART_IRQHandler+0x48>
 80037a8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037aa:	bf42      	ittt	mi
 80037ac:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80037ae:	f043 0301 	orrmi.w	r3, r3, #1
 80037b2:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037b4:	0755      	lsls	r5, r2, #29
 80037b6:	d504      	bpl.n	80037c2 <HAL_UART_IRQHandler+0x56>
 80037b8:	b118      	cbz	r0, 80037c2 <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037c2:	0793      	lsls	r3, r2, #30
 80037c4:	d504      	bpl.n	80037d0 <HAL_UART_IRQHandler+0x64>
 80037c6:	b118      	cbz	r0, 80037d0 <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037ca:	f043 0304 	orr.w	r3, r3, #4
 80037ce:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037d0:	0715      	lsls	r5, r2, #28
 80037d2:	d507      	bpl.n	80037e4 <HAL_UART_IRQHandler+0x78>
 80037d4:	f001 0320 	and.w	r3, r1, #32
 80037d8:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037da:	bf1e      	ittt	ne
 80037dc:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 80037de:	f043 0308 	orrne.w	r3, r3, #8
 80037e2:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d036      	beq.n	8003858 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037ea:	0690      	lsls	r0, r2, #26
 80037ec:	d508      	bpl.n	8003800 <HAL_UART_IRQHandler+0x94>
 80037ee:	068a      	lsls	r2, r1, #26
 80037f0:	d506      	bpl.n	8003800 <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037f2:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80037f6:	2b22      	cmp	r3, #34	; 0x22
 80037f8:	d102      	bne.n	8003800 <HAL_UART_IRQHandler+0x94>
 80037fa:	4620      	mov	r0, r4
 80037fc:	f7ff ff5f 	bl	80036be <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003804:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800380a:	f005 0508 	and.w	r5, r5, #8
 800380e:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 8003810:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003812:	d023      	beq.n	800385c <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8003814:	f7ff fe02 	bl	800341c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	6822      	ldr	r2, [r4, #0]
 800381a:	6953      	ldr	r3, [r2, #20]
 800381c:	065b      	lsls	r3, r3, #25
 800381e:	d518      	bpl.n	8003852 <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003820:	f102 0314 	add.w	r3, r2, #20
 8003824:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	f102 0014 	add.w	r0, r2, #20
 8003830:	e840 3100 	strex	r1, r3, [r0]
 8003834:	2900      	cmp	r1, #0
 8003836:	d1f3      	bne.n	8003820 <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8003838:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800383a:	b150      	cbz	r0, 8003852 <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800383c:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_UART_IRQHandler+0x29c>)
 800383e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003840:	f7fe feb4 	bl	80025ac <HAL_DMA_Abort_IT>
 8003844:	b140      	cbz	r0, 8003858 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003846:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003848:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 800384a:	b003      	add	sp, #12
 800384c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003850:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8003852:	4620      	mov	r0, r4
 8003854:	f7ff ff29 	bl	80036aa <HAL_UART_ErrorCallback>
}
 8003858:	b003      	add	sp, #12
 800385a:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800385c:	f7ff ff25 	bl	80036aa <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003860:	6425      	str	r5, [r4, #64]	; 0x40
 8003862:	e7f9      	b.n	8003858 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003864:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003866:	2801      	cmp	r0, #1
 8003868:	f040 8091 	bne.w	800398e <HAL_UART_IRQHandler+0x222>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800386c:	06d5      	lsls	r5, r2, #27
 800386e:	f140 808e 	bpl.w	800398e <HAL_UART_IRQHandler+0x222>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003872:	06c8      	lsls	r0, r1, #27
 8003874:	f140 808b 	bpl.w	800398e <HAL_UART_IRQHandler+0x222>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003878:	2200      	movs	r2, #0
 800387a:	9201      	str	r2, [sp, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	9201      	str	r2, [sp, #4]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	9201      	str	r2, [sp, #4]
 8003884:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	695a      	ldr	r2, [r3, #20]
 8003888:	0655      	lsls	r5, r2, #25
 800388a:	d54c      	bpl.n	8003926 <HAL_UART_IRQHandler+0x1ba>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800388c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800388e:	680a      	ldr	r2, [r1, #0]
 8003890:	6852      	ldr	r2, [r2, #4]
 8003892:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8003894:	2a00      	cmp	r2, #0
 8003896:	d0df      	beq.n	8003858 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003898:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 800389a:	4290      	cmp	r0, r2
 800389c:	d9dc      	bls.n	8003858 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 800389e:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038a0:	69ca      	ldr	r2, [r1, #28]
 80038a2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80038a6:	d036      	beq.n	8003916 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a8:	f103 020c 	add.w	r2, r3, #12
 80038ac:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	f103 000c 	add.w	r0, r3, #12
 80038b8:	e840 2100 	strex	r1, r2, [r0]
 80038bc:	2900      	cmp	r1, #0
 80038be:	d1f3      	bne.n	80038a8 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	f103 0214 	add.w	r2, r3, #20
 80038c4:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038cc:	f103 0014 	add.w	r0, r3, #20
 80038d0:	e840 2100 	strex	r1, r2, [r0]
 80038d4:	2900      	cmp	r1, #0
 80038d6:	d1f3      	bne.n	80038c0 <HAL_UART_IRQHandler+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	f103 0214 	add.w	r2, r3, #20
 80038dc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e4:	f103 0014 	add.w	r0, r3, #20
 80038e8:	e840 2100 	strex	r1, r2, [r0]
 80038ec:	2900      	cmp	r1, #0
 80038ee:	d1f3      	bne.n	80038d8 <HAL_UART_IRQHandler+0x16c>
          huart->RxState = HAL_UART_STATE_READY;
 80038f0:	2220      	movs	r2, #32
 80038f2:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f6:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f8:	f103 020c 	add.w	r2, r3, #12
 80038fc:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003900:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	f103 000c 	add.w	r0, r3, #12
 8003908:	e840 2100 	strex	r1, r2, [r0]
 800390c:	2900      	cmp	r1, #0
 800390e:	d1f3      	bne.n	80038f8 <HAL_UART_IRQHandler+0x18c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003910:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003912:	f7fe fe07 	bl	8002524 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003916:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003918:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 800391a:	1ac9      	subs	r1, r1, r3
 800391c:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800391e:	4620      	mov	r0, r4
 8003920:	f7ff fecc 	bl	80036bc <HAL_UARTEx_RxEventCallback>
 8003924:	e798      	b.n	8003858 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003926:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003928:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 800392a:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 800392c:	b289      	uxth	r1, r1
 800392e:	2900      	cmp	r1, #0
 8003930:	d092      	beq.n	8003858 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003932:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003934:	1a89      	subs	r1, r1, r2
 8003936:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003938:	2900      	cmp	r1, #0
 800393a:	d08d      	beq.n	8003858 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393c:	f103 020c 	add.w	r2, r3, #12
 8003940:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003944:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	f103 050c 	add.w	r5, r3, #12
 800394c:	e845 2000 	strex	r0, r2, [r5]
 8003950:	2800      	cmp	r0, #0
 8003952:	d1f3      	bne.n	800393c <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003954:	f103 0214 	add.w	r2, r3, #20
 8003958:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003960:	f103 0514 	add.w	r5, r3, #20
 8003964:	e845 2000 	strex	r0, r2, [r5]
 8003968:	2800      	cmp	r0, #0
 800396a:	d1f3      	bne.n	8003954 <HAL_UART_IRQHandler+0x1e8>
        huart->RxState = HAL_UART_STATE_READY;
 800396c:	2220      	movs	r2, #32
 800396e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003972:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	f103 020c 	add.w	r2, r3, #12
 8003978:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	f103 050c 	add.w	r5, r3, #12
 8003984:	e845 2000 	strex	r0, r2, [r5]
 8003988:	2800      	cmp	r0, #0
 800398a:	d1f3      	bne.n	8003974 <HAL_UART_IRQHandler+0x208>
 800398c:	e7c7      	b.n	800391e <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800398e:	0610      	lsls	r0, r2, #24
 8003990:	d528      	bpl.n	80039e4 <HAL_UART_IRQHandler+0x278>
 8003992:	060d      	lsls	r5, r1, #24
 8003994:	d526      	bpl.n	80039e4 <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003996:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 800399a:	2a21      	cmp	r2, #33	; 0x21
 800399c:	f47f af5c 	bne.w	8003858 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a0:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80039a2:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80039a8:	d117      	bne.n	80039da <HAL_UART_IRQHandler+0x26e>
 80039aa:	6921      	ldr	r1, [r4, #16]
 80039ac:	b9a9      	cbnz	r1, 80039da <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80039ae:	f832 1b02 	ldrh.w	r1, [r2], #2
 80039b2:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80039b6:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80039b8:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80039ba:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80039bc:	3a01      	subs	r2, #1
 80039be:	b292      	uxth	r2, r2
 80039c0:	84e2      	strh	r2, [r4, #38]	; 0x26
 80039c2:	2a00      	cmp	r2, #0
 80039c4:	f47f af48 	bne.w	8003858 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ce:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	e73e      	b.n	8003858 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80039da:	1c51      	adds	r1, r2, #1
 80039dc:	6221      	str	r1, [r4, #32]
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	e7ea      	b.n	80039ba <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039e4:	0650      	lsls	r0, r2, #25
 80039e6:	f57f af37 	bpl.w	8003858 <HAL_UART_IRQHandler+0xec>
 80039ea:	064a      	lsls	r2, r1, #25
 80039ec:	f57f af34 	bpl.w	8003858 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039f6:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80039f8:	2320      	movs	r3, #32
 80039fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7ff fe51 	bl	80036a6 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003a04:	e728      	b.n	8003858 <HAL_UART_IRQHandler+0xec>
 8003a06:	bf00      	nop
 8003a08:	080036ad 	.word	0x080036ad

08003a0c <arm_max_f32>:
 8003a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a10:	1e4f      	subs	r7, r1, #1
 8003a12:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8003a16:	f100 0e04 	add.w	lr, r0, #4
 8003a1a:	edd0 7a00 	vldr	s15, [r0]
 8003a1e:	d058      	beq.n	8003ad2 <arm_max_f32+0xc6>
 8003a20:	3014      	adds	r0, #20
 8003a22:	46c4      	mov	ip, r8
 8003a24:	2604      	movs	r6, #4
 8003a26:	2400      	movs	r4, #0
 8003a28:	ed10 6a04 	vldr	s12, [r0, #-16]
 8003a2c:	ed50 6a03 	vldr	s13, [r0, #-12]
 8003a30:	ed10 7a02 	vldr	s14, [r0, #-8]
 8003a34:	ed50 5a01 	vldr	s11, [r0, #-4]
 8003a38:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a40:	bfc8      	it	gt
 8003a42:	eef0 7a46 	vmovgt.f32	s15, s12
 8003a46:	f1a6 0503 	sub.w	r5, r6, #3
 8003a4a:	eef4 7ae6 	vcmpe.f32	s15, s13
 8003a4e:	bfc8      	it	gt
 8003a50:	462c      	movgt	r4, r5
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a56:	bf48      	it	mi
 8003a58:	eef0 7a66 	vmovmi.f32	s15, s13
 8003a5c:	f1a6 0502 	sub.w	r5, r6, #2
 8003a60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a64:	bf48      	it	mi
 8003a66:	462c      	movmi	r4, r5
 8003a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6c:	bf48      	it	mi
 8003a6e:	eef0 7a47 	vmovmi.f32	s15, s14
 8003a72:	f106 35ff 	add.w	r5, r6, #4294967295
 8003a76:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003a7a:	bf48      	it	mi
 8003a7c:	462c      	movmi	r4, r5
 8003a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a82:	bf48      	it	mi
 8003a84:	4634      	movmi	r4, r6
 8003a86:	bf48      	it	mi
 8003a88:	eef0 7a65 	vmovmi.f32	s15, s11
 8003a8c:	f1bc 0c01 	subs.w	ip, ip, #1
 8003a90:	f100 0010 	add.w	r0, r0, #16
 8003a94:	f106 0604 	add.w	r6, r6, #4
 8003a98:	d1c6      	bne.n	8003a28 <arm_max_f32+0x1c>
 8003a9a:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8003a9e:	f017 0003 	ands.w	r0, r7, #3
 8003aa2:	d018      	beq.n	8003ad6 <arm_max_f32+0xca>
 8003aa4:	1a08      	subs	r0, r1, r0
 8003aa6:	ecbe 7a01 	vldmia	lr!, {s14}
 8003aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab2:	bfc8      	it	gt
 8003ab4:	4604      	movgt	r4, r0
 8003ab6:	f100 0001 	add.w	r0, r0, #1
 8003aba:	bfd8      	it	le
 8003abc:	eeb0 7a67 	vmovle.f32	s14, s15
 8003ac0:	4281      	cmp	r1, r0
 8003ac2:	eef0 7a47 	vmov.f32	s15, s14
 8003ac6:	d1ee      	bne.n	8003aa6 <arm_max_f32+0x9a>
 8003ac8:	ed82 7a00 	vstr	s14, [r2]
 8003acc:	601c      	str	r4, [r3, #0]
 8003ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ad2:	4644      	mov	r4, r8
 8003ad4:	e7e3      	b.n	8003a9e <arm_max_f32+0x92>
 8003ad6:	eeb0 7a67 	vmov.f32	s14, s15
 8003ada:	e7f5      	b.n	8003ac8 <arm_max_f32+0xbc>

08003adc <arm_cfft_radix8by2_f32>:
 8003adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ae0:	ed2d 8b08 	vpush	{d8-d11}
 8003ae4:	4607      	mov	r7, r0
 8003ae6:	4608      	mov	r0, r1
 8003ae8:	f8b7 e000 	ldrh.w	lr, [r7]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8003af2:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8003af6:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8003afa:	f000 80b0 	beq.w	8003c5e <arm_cfft_radix8by2_f32+0x182>
 8003afe:	008b      	lsls	r3, r1, #2
 8003b00:	3310      	adds	r3, #16
 8003b02:	18c6      	adds	r6, r0, r3
 8003b04:	3210      	adds	r2, #16
 8003b06:	4443      	add	r3, r8
 8003b08:	f100 0510 	add.w	r5, r0, #16
 8003b0c:	f108 0410 	add.w	r4, r8, #16
 8003b10:	ed54 1a04 	vldr	s3, [r4, #-16]
 8003b14:	ed54 6a03 	vldr	s13, [r4, #-12]
 8003b18:	ed13 4a04 	vldr	s8, [r3, #-16]
 8003b1c:	ed53 3a03 	vldr	s7, [r3, #-12]
 8003b20:	ed53 5a02 	vldr	s11, [r3, #-8]
 8003b24:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003b28:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003b2c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8003b30:	ed16 2a04 	vldr	s4, [r6, #-16]
 8003b34:	ed56 2a03 	vldr	s5, [r6, #-12]
 8003b38:	ed15 6a03 	vldr	s12, [r5, #-12]
 8003b3c:	ed15 7a01 	vldr	s14, [r5, #-4]
 8003b40:	ed15 3a04 	vldr	s6, [r5, #-16]
 8003b44:	ed56 0a02 	vldr	s1, [r6, #-8]
 8003b48:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003b4c:	ed55 4a02 	vldr	s9, [r5, #-8]
 8003b50:	ee73 ba21 	vadd.f32	s23, s6, s3
 8003b54:	ee36 ba26 	vadd.f32	s22, s12, s13
 8003b58:	ee37 aa27 	vadd.f32	s20, s14, s15
 8003b5c:	ee72 9a04 	vadd.f32	s19, s4, s8
 8003b60:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8003b64:	ee31 8a05 	vadd.f32	s16, s2, s10
 8003b68:	ee74 aa80 	vadd.f32	s21, s9, s0
 8003b6c:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8003b70:	ed45 ba04 	vstr	s23, [r5, #-16]
 8003b74:	ed05 ba03 	vstr	s22, [r5, #-12]
 8003b78:	ed45 aa02 	vstr	s21, [r5, #-8]
 8003b7c:	ed05 aa01 	vstr	s20, [r5, #-4]
 8003b80:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003b84:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003b88:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003b8c:	ed46 8a02 	vstr	s17, [r6, #-8]
 8003b90:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003b94:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8003b98:	ed12 6a03 	vldr	s12, [r2, #-12]
 8003b9c:	ed52 2a04 	vldr	s5, [r2, #-16]
 8003ba0:	ee33 3a61 	vsub.f32	s6, s6, s3
 8003ba4:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003ba8:	ee26 8a86 	vmul.f32	s16, s13, s12
 8003bac:	ee24 2a06 	vmul.f32	s4, s8, s12
 8003bb0:	ee63 1a22 	vmul.f32	s3, s6, s5
 8003bb4:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003bb8:	ee23 3a06 	vmul.f32	s6, s6, s12
 8003bbc:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8003bc0:	ee23 6a86 	vmul.f32	s12, s7, s12
 8003bc4:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8003bc8:	ee36 6a04 	vadd.f32	s12, s12, s8
 8003bcc:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8003bd0:	ee72 3a63 	vsub.f32	s7, s4, s7
 8003bd4:	ee71 2a88 	vadd.f32	s5, s3, s16
 8003bd8:	ed44 6a03 	vstr	s13, [r4, #-12]
 8003bdc:	ed44 2a04 	vstr	s5, [r4, #-16]
 8003be0:	ed43 3a04 	vstr	s7, [r3, #-16]
 8003be4:	ed03 6a03 	vstr	s12, [r3, #-12]
 8003be8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bec:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8003bf0:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003bf4:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003bf8:	ee35 6a41 	vsub.f32	s12, s10, s2
 8003bfc:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8003c00:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003c04:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003c08:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8003c0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003c10:	ee64 4a87 	vmul.f32	s9, s9, s14
 8003c14:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003c18:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003c1c:	ee26 6a25 	vmul.f32	s12, s12, s11
 8003c20:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003c24:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003c28:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003c2c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003c30:	f1be 0e01 	subs.w	lr, lr, #1
 8003c34:	ed44 5a02 	vstr	s11, [r4, #-8]
 8003c38:	f105 0510 	add.w	r5, r5, #16
 8003c3c:	ed44 7a01 	vstr	s15, [r4, #-4]
 8003c40:	f106 0610 	add.w	r6, r6, #16
 8003c44:	ed03 6a02 	vstr	s12, [r3, #-8]
 8003c48:	ed03 7a01 	vstr	s14, [r3, #-4]
 8003c4c:	f102 0210 	add.w	r2, r2, #16
 8003c50:	f104 0410 	add.w	r4, r4, #16
 8003c54:	f103 0310 	add.w	r3, r3, #16
 8003c58:	f47f af5a 	bne.w	8003b10 <arm_cfft_radix8by2_f32+0x34>
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	b28c      	uxth	r4, r1
 8003c60:	4621      	mov	r1, r4
 8003c62:	2302      	movs	r3, #2
 8003c64:	f000 fbca 	bl	80043fc <arm_radix8_butterfly_f32>
 8003c68:	ecbd 8b08 	vpop	{d8-d11}
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	4640      	mov	r0, r8
 8003c72:	2302      	movs	r3, #2
 8003c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c78:	f000 bbc0 	b.w	80043fc <arm_radix8_butterfly_f32>

08003c7c <arm_cfft_radix8by4_f32>:
 8003c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c80:	ed2d 8b0a 	vpush	{d8-d12}
 8003c84:	8802      	ldrh	r2, [r0, #0]
 8003c86:	ed91 6a00 	vldr	s12, [r1]
 8003c8a:	b08f      	sub	sp, #60	; 0x3c
 8003c8c:	460f      	mov	r7, r1
 8003c8e:	0852      	lsrs	r2, r2, #1
 8003c90:	6841      	ldr	r1, [r0, #4]
 8003c92:	900c      	str	r0, [sp, #48]	; 0x30
 8003c94:	0093      	lsls	r3, r2, #2
 8003c96:	4638      	mov	r0, r7
 8003c98:	4418      	add	r0, r3
 8003c9a:	4606      	mov	r6, r0
 8003c9c:	9009      	str	r0, [sp, #36]	; 0x24
 8003c9e:	4418      	add	r0, r3
 8003ca0:	edd0 6a00 	vldr	s13, [r0]
 8003ca4:	ed96 4a00 	vldr	s8, [r6]
 8003ca8:	edd6 2a01 	vldr	s5, [r6, #4]
 8003cac:	edd0 7a01 	vldr	s15, [r0, #4]
 8003cb0:	900a      	str	r0, [sp, #40]	; 0x28
 8003cb2:	ee76 5a26 	vadd.f32	s11, s12, s13
 8003cb6:	4604      	mov	r4, r0
 8003cb8:	4625      	mov	r5, r4
 8003cba:	441c      	add	r4, r3
 8003cbc:	edd4 4a00 	vldr	s9, [r4]
 8003cc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8003cc4:	ed94 3a01 	vldr	s6, [r4, #4]
 8003cc8:	9401      	str	r4, [sp, #4]
 8003cca:	ee35 5a84 	vadd.f32	s10, s11, s8
 8003cce:	4630      	mov	r0, r6
 8003cd0:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003cd4:	463e      	mov	r6, r7
 8003cd6:	ee15 ea10 	vmov	lr, s10
 8003cda:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003cde:	f846 eb08 	str.w	lr, [r6], #8
 8003ce2:	ee37 6a27 	vadd.f32	s12, s14, s15
 8003ce6:	ed90 5a01 	vldr	s10, [r0, #4]
 8003cea:	9605      	str	r6, [sp, #20]
 8003cec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cf0:	9e01      	ldr	r6, [sp, #4]
 8003cf2:	9707      	str	r7, [sp, #28]
 8003cf4:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8003cf8:	ed96 2a01 	vldr	s4, [r6, #4]
 8003cfc:	ee36 7a05 	vadd.f32	s14, s12, s10
 8003d00:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8003d04:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8003d08:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003d0c:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8003d10:	4604      	mov	r4, r0
 8003d12:	46a3      	mov	fp, r4
 8003d14:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003d18:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003d1c:	ee14 8a10 	vmov	r8, s8
 8003d20:	46a4      	mov	ip, r4
 8003d22:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8003d26:	ed87 7a01 	vstr	s14, [r7, #4]
 8003d2a:	f84b 8b08 	str.w	r8, [fp], #8
 8003d2e:	f1ac 0704 	sub.w	r7, ip, #4
 8003d32:	ed8c 5a01 	vstr	s10, [ip, #4]
 8003d36:	f101 0c08 	add.w	ip, r1, #8
 8003d3a:	462c      	mov	r4, r5
 8003d3c:	f8cd c010 	str.w	ip, [sp, #16]
 8003d40:	ee15 ca90 	vmov	ip, s11
 8003d44:	ee36 6a62 	vsub.f32	s12, s12, s5
 8003d48:	f844 cb08 	str.w	ip, [r4], #8
 8003d4c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8003d50:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003d54:	9406      	str	r4, [sp, #24]
 8003d56:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003d5a:	f101 0410 	add.w	r4, r1, #16
 8003d5e:	0852      	lsrs	r2, r2, #1
 8003d60:	9402      	str	r4, [sp, #8]
 8003d62:	ed85 6a01 	vstr	s12, [r5, #4]
 8003d66:	462c      	mov	r4, r5
 8003d68:	f101 0518 	add.w	r5, r1, #24
 8003d6c:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d6e:	46b2      	mov	sl, r6
 8003d70:	9503      	str	r5, [sp, #12]
 8003d72:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003d76:	3a02      	subs	r2, #2
 8003d78:	ee16 5a90 	vmov	r5, s13
 8003d7c:	46b6      	mov	lr, r6
 8003d7e:	4630      	mov	r0, r6
 8003d80:	0852      	lsrs	r2, r2, #1
 8003d82:	f84a 5b08 	str.w	r5, [sl], #8
 8003d86:	f1a0 0604 	sub.w	r6, r0, #4
 8003d8a:	edce 7a01 	vstr	s15, [lr, #4]
 8003d8e:	9208      	str	r2, [sp, #32]
 8003d90:	f000 8130 	beq.w	8003ff4 <arm_cfft_radix8by4_f32+0x378>
 8003d94:	4691      	mov	r9, r2
 8003d96:	9a07      	ldr	r2, [sp, #28]
 8003d98:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003d9c:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003da0:	3b08      	subs	r3, #8
 8003da2:	f102 0510 	add.w	r5, r2, #16
 8003da6:	f101 0c20 	add.w	ip, r1, #32
 8003daa:	f1a4 020c 	sub.w	r2, r4, #12
 8003dae:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8003db2:	4433      	add	r3, r6
 8003db4:	3410      	adds	r4, #16
 8003db6:	4650      	mov	r0, sl
 8003db8:	4659      	mov	r1, fp
 8003dba:	ed55 3a02 	vldr	s7, [r5, #-8]
 8003dbe:	ed14 5a02 	vldr	s10, [r4, #-8]
 8003dc2:	ed91 7a00 	vldr	s14, [r1]
 8003dc6:	edd0 7a00 	vldr	s15, [r0]
 8003dca:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003dce:	ed15 4a01 	vldr	s8, [r5, #-4]
 8003dd2:	edd0 6a01 	vldr	s13, [r0, #4]
 8003dd6:	ed91 6a01 	vldr	s12, [r1, #4]
 8003dda:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003dde:	ee34 0a25 	vadd.f32	s0, s8, s11
 8003de2:	ee78 4a07 	vadd.f32	s9, s16, s14
 8003de6:	ee74 5a65 	vsub.f32	s11, s8, s11
 8003dea:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8003dee:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8003df2:	ed45 4a02 	vstr	s9, [r5, #-8]
 8003df6:	edd1 4a01 	vldr	s9, [r1, #4]
 8003dfa:	ed90 4a01 	vldr	s8, [r0, #4]
 8003dfe:	ee70 4a24 	vadd.f32	s9, s0, s9
 8003e02:	ee75 aa06 	vadd.f32	s21, s10, s12
 8003e06:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003e0a:	ee35 aac7 	vsub.f32	s20, s11, s14
 8003e0e:	ed45 4a01 	vstr	s9, [r5, #-4]
 8003e12:	edd6 1a00 	vldr	s3, [r6]
 8003e16:	edd7 0a00 	vldr	s1, [r7]
 8003e1a:	ed92 4a02 	vldr	s8, [r2, #8]
 8003e1e:	edd3 3a02 	vldr	s7, [r3, #8]
 8003e22:	ed93 2a01 	vldr	s4, [r3, #4]
 8003e26:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003e2a:	edd2 2a01 	vldr	s5, [r2, #4]
 8003e2e:	ed57 9a01 	vldr	s19, [r7, #-4]
 8003e32:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8003e36:	ee39 3a81 	vadd.f32	s6, s19, s2
 8003e3a:	ee74 8a84 	vadd.f32	s17, s9, s8
 8003e3e:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8003e42:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8003e46:	ee7a aae6 	vsub.f32	s21, s21, s13
 8003e4a:	ee18 aa90 	vmov	sl, s17
 8003e4e:	f847 a908 	str.w	sl, [r7], #-8
 8003e52:	edd2 8a01 	vldr	s17, [r2, #4]
 8003e56:	ed93 9a01 	vldr	s18, [r3, #4]
 8003e5a:	ee73 8a28 	vadd.f32	s17, s6, s17
 8003e5e:	ee3a aa27 	vadd.f32	s20, s20, s15
 8003e62:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003e66:	ee74 0a63 	vsub.f32	s1, s8, s7
 8003e6a:	edc7 8a01 	vstr	s17, [r7, #4]
 8003e6e:	ed18 ba02 	vldr	s22, [r8, #-8]
 8003e72:	ed58 8a01 	vldr	s17, [r8, #-4]
 8003e76:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8003e7a:	ee6a ba28 	vmul.f32	s23, s20, s17
 8003e7e:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8003e82:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8003e86:	ee31 9a20 	vadd.f32	s18, s2, s1
 8003e8a:	ee79 9a82 	vadd.f32	s19, s19, s4
 8003e8e:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8003e92:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8003e96:	ee69 baa8 	vmul.f32	s23, s19, s17
 8003e9a:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8003e9e:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8003ea2:	ee69 8a28 	vmul.f32	s17, s18, s17
 8003ea6:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8003eaa:	ee1c aa10 	vmov	sl, s24
 8003eae:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8003eb2:	f841 ab08 	str.w	sl, [r1], #8
 8003eb6:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8003eba:	ee3b bacb 	vsub.f32	s22, s23, s22
 8003ebe:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8003ec2:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003ec6:	ed01 aa01 	vstr	s20, [r1, #-4]
 8003eca:	edc2 8a01 	vstr	s17, [r2, #4]
 8003ece:	ed82 ba02 	vstr	s22, [r2, #8]
 8003ed2:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8003ed6:	ee74 3a63 	vsub.f32	s7, s8, s7
 8003eda:	ee38 8a47 	vsub.f32	s16, s16, s14
 8003ede:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8003ee2:	ee30 0a46 	vsub.f32	s0, s0, s12
 8003ee6:	ee33 3a42 	vsub.f32	s6, s6, s4
 8003eea:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003eee:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003ef2:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8003ef6:	ee63 8a04 	vmul.f32	s17, s6, s8
 8003efa:	ee28 aa24 	vmul.f32	s20, s16, s9
 8003efe:	ee60 9a04 	vmul.f32	s19, s0, s8
 8003f02:	ee28 8a04 	vmul.f32	s16, s16, s8
 8003f06:	ee20 0a24 	vmul.f32	s0, s0, s9
 8003f0a:	ee63 3a84 	vmul.f32	s7, s7, s8
 8003f0e:	ee39 4a68 	vsub.f32	s8, s18, s17
 8003f12:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8003f16:	ee14 aa10 	vmov	sl, s8
 8003f1a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8003f1e:	ee63 4a24 	vmul.f32	s9, s6, s9
 8003f22:	ed44 9a02 	vstr	s19, [r4, #-8]
 8003f26:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003f2a:	ed04 0a01 	vstr	s0, [r4, #-4]
 8003f2e:	f846 a908 	str.w	sl, [r6], #-8
 8003f32:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003f36:	ee35 7a87 	vadd.f32	s14, s11, s14
 8003f3a:	edc6 3a01 	vstr	s7, [r6, #4]
 8003f3e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8003f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f46:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8003f4a:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8003f4e:	ee67 5a86 	vmul.f32	s11, s15, s12
 8003f52:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003f56:	ee72 2a62 	vsub.f32	s5, s4, s5
 8003f5a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8003f5e:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8003f62:	ee75 5a25 	vadd.f32	s11, s10, s11
 8003f66:	ee62 0a86 	vmul.f32	s1, s5, s12
 8003f6a:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003f6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f72:	ee21 6a06 	vmul.f32	s12, s2, s12
 8003f76:	ee62 2a87 	vmul.f32	s5, s5, s14
 8003f7a:	ee21 1a07 	vmul.f32	s2, s2, s14
 8003f7e:	ee15 aa90 	vmov	sl, s11
 8003f82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003f86:	f840 ab08 	str.w	sl, [r0], #8
 8003f8a:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8003f8e:	ee76 2a22 	vadd.f32	s5, s12, s5
 8003f92:	f1b9 0901 	subs.w	r9, r9, #1
 8003f96:	ed40 7a01 	vstr	s15, [r0, #-4]
 8003f9a:	f105 0508 	add.w	r5, r5, #8
 8003f9e:	ed83 1a02 	vstr	s2, [r3, #8]
 8003fa2:	edc3 2a01 	vstr	s5, [r3, #4]
 8003fa6:	f108 0808 	add.w	r8, r8, #8
 8003faa:	f1a2 0208 	sub.w	r2, r2, #8
 8003fae:	f10c 0c10 	add.w	ip, ip, #16
 8003fb2:	f104 0408 	add.w	r4, r4, #8
 8003fb6:	f10e 0e18 	add.w	lr, lr, #24
 8003fba:	f1a3 0308 	sub.w	r3, r3, #8
 8003fbe:	f47f aefc 	bne.w	8003dba <arm_cfft_radix8by4_f32+0x13e>
 8003fc2:	9908      	ldr	r1, [sp, #32]
 8003fc4:	9802      	ldr	r0, [sp, #8]
 8003fc6:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8003fca:	00cb      	lsls	r3, r1, #3
 8003fcc:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003fd0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003fd4:	9102      	str	r1, [sp, #8]
 8003fd6:	9905      	ldr	r1, [sp, #20]
 8003fd8:	4419      	add	r1, r3
 8003fda:	9105      	str	r1, [sp, #20]
 8003fdc:	9904      	ldr	r1, [sp, #16]
 8003fde:	4419      	add	r1, r3
 8003fe0:	9104      	str	r1, [sp, #16]
 8003fe2:	9906      	ldr	r1, [sp, #24]
 8003fe4:	449b      	add	fp, r3
 8003fe6:	4419      	add	r1, r3
 8003fe8:	449a      	add	sl, r3
 8003fea:	9b03      	ldr	r3, [sp, #12]
 8003fec:	9106      	str	r1, [sp, #24]
 8003fee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003ff2:	9303      	str	r3, [sp, #12]
 8003ff4:	9a05      	ldr	r2, [sp, #20]
 8003ff6:	9806      	ldr	r0, [sp, #24]
 8003ff8:	ed92 4a00 	vldr	s8, [r2]
 8003ffc:	ed90 7a00 	vldr	s14, [r0]
 8004000:	ed9b 3a00 	vldr	s6, [fp]
 8004004:	edda 3a00 	vldr	s7, [sl]
 8004008:	edd2 4a01 	vldr	s9, [r2, #4]
 800400c:	edd0 6a01 	vldr	s13, [r0, #4]
 8004010:	ed9a 2a01 	vldr	s4, [sl, #4]
 8004014:	eddb 7a01 	vldr	s15, [fp, #4]
 8004018:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 800401c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800401e:	ee34 6a07 	vadd.f32	s12, s8, s14
 8004022:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8004026:	ee36 5a03 	vadd.f32	s10, s12, s6
 800402a:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800402e:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004032:	ee34 7a47 	vsub.f32	s14, s8, s14
 8004036:	ed82 5a00 	vstr	s10, [r2]
 800403a:	ed9b 5a01 	vldr	s10, [fp, #4]
 800403e:	edda 4a01 	vldr	s9, [sl, #4]
 8004042:	ee35 5a85 	vadd.f32	s10, s11, s10
 8004046:	ee37 4a27 	vadd.f32	s8, s14, s15
 800404a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800404e:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8004052:	ed82 5a01 	vstr	s10, [r2, #4]
 8004056:	9a04      	ldr	r2, [sp, #16]
 8004058:	ee34 5aa3 	vadd.f32	s10, s9, s7
 800405c:	edd2 1a00 	vldr	s3, [r2]
 8004060:	edd2 2a01 	vldr	s5, [r2, #4]
 8004064:	9a02      	ldr	r2, [sp, #8]
 8004066:	ee34 4a42 	vsub.f32	s8, s8, s4
 800406a:	ee36 6a43 	vsub.f32	s12, s12, s6
 800406e:	ee64 4a21 	vmul.f32	s9, s8, s3
 8004072:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004076:	ee65 2a22 	vmul.f32	s5, s10, s5
 800407a:	ee25 5a21 	vmul.f32	s10, s10, s3
 800407e:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8004082:	ee35 5a44 	vsub.f32	s10, s10, s8
 8004086:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800408a:	edcb 2a00 	vstr	s5, [fp]
 800408e:	ed8b 5a01 	vstr	s10, [fp, #4]
 8004092:	ed92 4a01 	vldr	s8, [r2, #4]
 8004096:	ed92 5a00 	vldr	s10, [r2]
 800409a:	9a03      	ldr	r2, [sp, #12]
 800409c:	ee36 6a63 	vsub.f32	s12, s12, s7
 80040a0:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80040a4:	ee66 4a05 	vmul.f32	s9, s12, s10
 80040a8:	ee25 5a85 	vmul.f32	s10, s11, s10
 80040ac:	ee26 6a04 	vmul.f32	s12, s12, s8
 80040b0:	ee65 5a84 	vmul.f32	s11, s11, s8
 80040b4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80040b8:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80040bc:	ee76 6a83 	vadd.f32	s13, s13, s6
 80040c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80040c4:	ed80 6a01 	vstr	s12, [r0, #4]
 80040c8:	edc0 5a00 	vstr	s11, [r0]
 80040cc:	edd2 5a01 	vldr	s11, [r2, #4]
 80040d0:	9807      	ldr	r0, [sp, #28]
 80040d2:	ee77 7a02 	vadd.f32	s15, s14, s4
 80040d6:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80040da:	edd2 6a00 	vldr	s13, [r2]
 80040de:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80040e2:	ee67 6a26 	vmul.f32	s13, s14, s13
 80040e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80040ea:	ee27 7a25 	vmul.f32	s14, s14, s11
 80040ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80040f2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80040f6:	edca 7a01 	vstr	s15, [sl, #4]
 80040fa:	ed8a 7a00 	vstr	s14, [sl]
 80040fe:	6872      	ldr	r2, [r6, #4]
 8004100:	4621      	mov	r1, r4
 8004102:	2304      	movs	r3, #4
 8004104:	f000 f97a 	bl	80043fc <arm_radix8_butterfly_f32>
 8004108:	9809      	ldr	r0, [sp, #36]	; 0x24
 800410a:	6872      	ldr	r2, [r6, #4]
 800410c:	4621      	mov	r1, r4
 800410e:	2304      	movs	r3, #4
 8004110:	f000 f974 	bl	80043fc <arm_radix8_butterfly_f32>
 8004114:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004116:	6872      	ldr	r2, [r6, #4]
 8004118:	4621      	mov	r1, r4
 800411a:	2304      	movs	r3, #4
 800411c:	f000 f96e 	bl	80043fc <arm_radix8_butterfly_f32>
 8004120:	6872      	ldr	r2, [r6, #4]
 8004122:	9801      	ldr	r0, [sp, #4]
 8004124:	4621      	mov	r1, r4
 8004126:	2304      	movs	r3, #4
 8004128:	b00f      	add	sp, #60	; 0x3c
 800412a:	ecbd 8b0a 	vpop	{d8-d12}
 800412e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004132:	f000 b963 	b.w	80043fc <arm_radix8_butterfly_f32>
 8004136:	bf00      	nop

08004138 <arm_cfft_f32>:
 8004138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413c:	2a01      	cmp	r2, #1
 800413e:	4606      	mov	r6, r0
 8004140:	4617      	mov	r7, r2
 8004142:	460c      	mov	r4, r1
 8004144:	4698      	mov	r8, r3
 8004146:	8805      	ldrh	r5, [r0, #0]
 8004148:	d054      	beq.n	80041f4 <arm_cfft_f32+0xbc>
 800414a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800414e:	d04c      	beq.n	80041ea <arm_cfft_f32+0xb2>
 8004150:	d916      	bls.n	8004180 <arm_cfft_f32+0x48>
 8004152:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004156:	d01a      	beq.n	800418e <arm_cfft_f32+0x56>
 8004158:	d95c      	bls.n	8004214 <arm_cfft_f32+0xdc>
 800415a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800415e:	d044      	beq.n	80041ea <arm_cfft_f32+0xb2>
 8004160:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8004164:	d105      	bne.n	8004172 <arm_cfft_f32+0x3a>
 8004166:	2301      	movs	r3, #1
 8004168:	6872      	ldr	r2, [r6, #4]
 800416a:	4629      	mov	r1, r5
 800416c:	4620      	mov	r0, r4
 800416e:	f000 f945 	bl	80043fc <arm_radix8_butterfly_f32>
 8004172:	f1b8 0f00 	cmp.w	r8, #0
 8004176:	d111      	bne.n	800419c <arm_cfft_f32+0x64>
 8004178:	2f01      	cmp	r7, #1
 800417a:	d016      	beq.n	80041aa <arm_cfft_f32+0x72>
 800417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004180:	2d20      	cmp	r5, #32
 8004182:	d032      	beq.n	80041ea <arm_cfft_f32+0xb2>
 8004184:	d94a      	bls.n	800421c <arm_cfft_f32+0xe4>
 8004186:	2d40      	cmp	r5, #64	; 0x40
 8004188:	d0ed      	beq.n	8004166 <arm_cfft_f32+0x2e>
 800418a:	2d80      	cmp	r5, #128	; 0x80
 800418c:	d1f1      	bne.n	8004172 <arm_cfft_f32+0x3a>
 800418e:	4621      	mov	r1, r4
 8004190:	4630      	mov	r0, r6
 8004192:	f7ff fca3 	bl	8003adc <arm_cfft_radix8by2_f32>
 8004196:	f1b8 0f00 	cmp.w	r8, #0
 800419a:	d0ed      	beq.n	8004178 <arm_cfft_f32+0x40>
 800419c:	68b2      	ldr	r2, [r6, #8]
 800419e:	89b1      	ldrh	r1, [r6, #12]
 80041a0:	4620      	mov	r0, r4
 80041a2:	f7fc f835 	bl	8000210 <arm_bitreversal_32>
 80041a6:	2f01      	cmp	r7, #1
 80041a8:	d1e8      	bne.n	800417c <arm_cfft_f32+0x44>
 80041aa:	ee07 5a90 	vmov	s15, r5
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041ba:	2d00      	cmp	r5, #0
 80041bc:	d0de      	beq.n	800417c <arm_cfft_f32+0x44>
 80041be:	f104 0108 	add.w	r1, r4, #8
 80041c2:	2300      	movs	r3, #0
 80041c4:	3301      	adds	r3, #1
 80041c6:	429d      	cmp	r5, r3
 80041c8:	f101 0108 	add.w	r1, r1, #8
 80041cc:	ed11 7a04 	vldr	s14, [r1, #-16]
 80041d0:	ed51 7a03 	vldr	s15, [r1, #-12]
 80041d4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80041d8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80041dc:	ed01 7a04 	vstr	s14, [r1, #-16]
 80041e0:	ed41 7a03 	vstr	s15, [r1, #-12]
 80041e4:	d1ee      	bne.n	80041c4 <arm_cfft_f32+0x8c>
 80041e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041ea:	4621      	mov	r1, r4
 80041ec:	4630      	mov	r0, r6
 80041ee:	f7ff fd45 	bl	8003c7c <arm_cfft_radix8by4_f32>
 80041f2:	e7be      	b.n	8004172 <arm_cfft_f32+0x3a>
 80041f4:	b1ad      	cbz	r5, 8004222 <arm_cfft_f32+0xea>
 80041f6:	f101 030c 	add.w	r3, r1, #12
 80041fa:	2200      	movs	r2, #0
 80041fc:	ed53 7a02 	vldr	s15, [r3, #-8]
 8004200:	3201      	adds	r2, #1
 8004202:	eef1 7a67 	vneg.f32	s15, s15
 8004206:	4295      	cmp	r5, r2
 8004208:	ed43 7a02 	vstr	s15, [r3, #-8]
 800420c:	f103 0308 	add.w	r3, r3, #8
 8004210:	d1f4      	bne.n	80041fc <arm_cfft_f32+0xc4>
 8004212:	e79a      	b.n	800414a <arm_cfft_f32+0x12>
 8004214:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8004218:	d0a5      	beq.n	8004166 <arm_cfft_f32+0x2e>
 800421a:	e7aa      	b.n	8004172 <arm_cfft_f32+0x3a>
 800421c:	2d10      	cmp	r5, #16
 800421e:	d0b6      	beq.n	800418e <arm_cfft_f32+0x56>
 8004220:	e7a7      	b.n	8004172 <arm_cfft_f32+0x3a>
 8004222:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8004226:	d894      	bhi.n	8004152 <arm_cfft_f32+0x1a>
 8004228:	e7aa      	b.n	8004180 <arm_cfft_f32+0x48>
 800422a:	bf00      	nop

0800422c <arm_cmplx_mag_f32>:
 800422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004230:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8004234:	b084      	sub	sp, #16
 8004236:	d07f      	beq.n	8004338 <arm_cmplx_mag_f32+0x10c>
 8004238:	2700      	movs	r7, #0
 800423a:	f100 0420 	add.w	r4, r0, #32
 800423e:	f101 0510 	add.w	r5, r1, #16
 8004242:	4646      	mov	r6, r8
 8004244:	e05a      	b.n	80042fc <arm_cmplx_mag_f32+0xd0>
 8004246:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800424a:	eeb4 0a40 	vcmp.f32	s0, s0
 800424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004252:	f040 80a4 	bne.w	800439e <arm_cmplx_mag_f32+0x172>
 8004256:	ed05 0a04 	vstr	s0, [r5, #-16]
 800425a:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800425e:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8004262:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004266:	ee20 0a00 	vmul.f32	s0, s0, s0
 800426a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800426e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004276:	f2c0 808f 	blt.w	8004398 <arm_cmplx_mag_f32+0x16c>
 800427a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800427e:	eeb4 0a40 	vcmp.f32	s0, s0
 8004282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004286:	f040 80af 	bne.w	80043e8 <arm_cmplx_mag_f32+0x1bc>
 800428a:	ed05 0a03 	vstr	s0, [r5, #-12]
 800428e:	ed54 7a04 	vldr	s15, [r4, #-16]
 8004292:	ed14 0a03 	vldr	s0, [r4, #-12]
 8004296:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800429a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800429e:	ee77 7a80 	vadd.f32	s15, s15, s0
 80042a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042aa:	db72      	blt.n	8004392 <arm_cmplx_mag_f32+0x166>
 80042ac:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80042b0:	eeb4 0a40 	vcmp.f32	s0, s0
 80042b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b8:	f040 808c 	bne.w	80043d4 <arm_cmplx_mag_f32+0x1a8>
 80042bc:	ed05 0a02 	vstr	s0, [r5, #-8]
 80042c0:	ed54 7a02 	vldr	s15, [r4, #-8]
 80042c4:	ed14 0a01 	vldr	s0, [r4, #-4]
 80042c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80042d0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80042d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042dc:	db20      	blt.n	8004320 <arm_cmplx_mag_f32+0xf4>
 80042de:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80042e2:	eeb4 0a40 	vcmp.f32	s0, s0
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d169      	bne.n	80043c0 <arm_cmplx_mag_f32+0x194>
 80042ec:	3e01      	subs	r6, #1
 80042ee:	ed05 0a01 	vstr	s0, [r5, #-4]
 80042f2:	f104 0420 	add.w	r4, r4, #32
 80042f6:	f105 0510 	add.w	r5, r5, #16
 80042fa:	d019      	beq.n	8004330 <arm_cmplx_mag_f32+0x104>
 80042fc:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8004300:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8004304:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004308:	ee20 0a00 	vmul.f32	s0, s0, s0
 800430c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004318:	da95      	bge.n	8004246 <arm_cmplx_mag_f32+0x1a>
 800431a:	f845 7c10 	str.w	r7, [r5, #-16]
 800431e:	e79c      	b.n	800425a <arm_cmplx_mag_f32+0x2e>
 8004320:	3e01      	subs	r6, #1
 8004322:	f845 7c04 	str.w	r7, [r5, #-4]
 8004326:	f104 0420 	add.w	r4, r4, #32
 800432a:	f105 0510 	add.w	r5, r5, #16
 800432e:	d1e5      	bne.n	80042fc <arm_cmplx_mag_f32+0xd0>
 8004330:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8004334:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8004338:	f012 0503 	ands.w	r5, r2, #3
 800433c:	d026      	beq.n	800438c <arm_cmplx_mag_f32+0x160>
 800433e:	2600      	movs	r6, #0
 8004340:	f100 0408 	add.w	r4, r0, #8
 8004344:	e00c      	b.n	8004360 <arm_cmplx_mag_f32+0x134>
 8004346:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800434a:	eeb4 0a40 	vcmp.f32	s0, s0
 800434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004352:	d12e      	bne.n	80043b2 <arm_cmplx_mag_f32+0x186>
 8004354:	3d01      	subs	r5, #1
 8004356:	ed01 0a01 	vstr	s0, [r1, #-4]
 800435a:	f104 0408 	add.w	r4, r4, #8
 800435e:	d015      	beq.n	800438c <arm_cmplx_mag_f32+0x160>
 8004360:	ed54 7a02 	vldr	s15, [r4, #-8]
 8004364:	ed14 0a01 	vldr	s0, [r4, #-4]
 8004368:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800436c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004370:	3104      	adds	r1, #4
 8004372:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800437a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437e:	dae2      	bge.n	8004346 <arm_cmplx_mag_f32+0x11a>
 8004380:	3d01      	subs	r5, #1
 8004382:	f841 6c04 	str.w	r6, [r1, #-4]
 8004386:	f104 0408 	add.w	r4, r4, #8
 800438a:	d1e9      	bne.n	8004360 <arm_cmplx_mag_f32+0x134>
 800438c:	b004      	add	sp, #16
 800438e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004392:	f845 7c08 	str.w	r7, [r5, #-8]
 8004396:	e793      	b.n	80042c0 <arm_cmplx_mag_f32+0x94>
 8004398:	f845 7c0c 	str.w	r7, [r5, #-12]
 800439c:	e777      	b.n	800428e <arm_cmplx_mag_f32+0x62>
 800439e:	eeb0 0a67 	vmov.f32	s0, s15
 80043a2:	9203      	str	r2, [sp, #12]
 80043a4:	9102      	str	r1, [sp, #8]
 80043a6:	9001      	str	r0, [sp, #4]
 80043a8:	f003 f8ee 	bl	8007588 <sqrtf>
 80043ac:	a801      	add	r0, sp, #4
 80043ae:	c807      	ldmia	r0, {r0, r1, r2}
 80043b0:	e751      	b.n	8004256 <arm_cmplx_mag_f32+0x2a>
 80043b2:	eeb0 0a67 	vmov.f32	s0, s15
 80043b6:	9101      	str	r1, [sp, #4]
 80043b8:	f003 f8e6 	bl	8007588 <sqrtf>
 80043bc:	9901      	ldr	r1, [sp, #4]
 80043be:	e7c9      	b.n	8004354 <arm_cmplx_mag_f32+0x128>
 80043c0:	eeb0 0a67 	vmov.f32	s0, s15
 80043c4:	9203      	str	r2, [sp, #12]
 80043c6:	9102      	str	r1, [sp, #8]
 80043c8:	9001      	str	r0, [sp, #4]
 80043ca:	f003 f8dd 	bl	8007588 <sqrtf>
 80043ce:	a801      	add	r0, sp, #4
 80043d0:	c807      	ldmia	r0, {r0, r1, r2}
 80043d2:	e78b      	b.n	80042ec <arm_cmplx_mag_f32+0xc0>
 80043d4:	eeb0 0a67 	vmov.f32	s0, s15
 80043d8:	9203      	str	r2, [sp, #12]
 80043da:	9102      	str	r1, [sp, #8]
 80043dc:	9001      	str	r0, [sp, #4]
 80043de:	f003 f8d3 	bl	8007588 <sqrtf>
 80043e2:	a801      	add	r0, sp, #4
 80043e4:	c807      	ldmia	r0, {r0, r1, r2}
 80043e6:	e769      	b.n	80042bc <arm_cmplx_mag_f32+0x90>
 80043e8:	eeb0 0a67 	vmov.f32	s0, s15
 80043ec:	9203      	str	r2, [sp, #12]
 80043ee:	9102      	str	r1, [sp, #8]
 80043f0:	9001      	str	r0, [sp, #4]
 80043f2:	f003 f8c9 	bl	8007588 <sqrtf>
 80043f6:	a801      	add	r0, sp, #4
 80043f8:	c807      	ldmia	r0, {r0, r1, r2}
 80043fa:	e746      	b.n	800428a <arm_cmplx_mag_f32+0x5e>

080043fc <arm_radix8_butterfly_f32>:
 80043fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004400:	ed2d 8b10 	vpush	{d8-d15}
 8004404:	461c      	mov	r4, r3
 8004406:	b09d      	sub	sp, #116	; 0x74
 8004408:	4603      	mov	r3, r0
 800440a:	3304      	adds	r3, #4
 800440c:	ed9f bac4 	vldr	s22, [pc, #784]	; 8004720 <arm_radix8_butterfly_f32+0x324>
 8004410:	9019      	str	r0, [sp, #100]	; 0x64
 8004412:	921a      	str	r2, [sp, #104]	; 0x68
 8004414:	468b      	mov	fp, r1
 8004416:	931b      	str	r3, [sp, #108]	; 0x6c
 8004418:	468a      	mov	sl, r1
 800441a:	46a1      	mov	r9, r4
 800441c:	4607      	mov	r7, r0
 800441e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8004422:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004426:	eb03 0508 	add.w	r5, r3, r8
 800442a:	195c      	adds	r4, r3, r5
 800442c:	00de      	lsls	r6, r3, #3
 800442e:	191a      	adds	r2, r3, r4
 8004430:	9600      	str	r6, [sp, #0]
 8004432:	1898      	adds	r0, r3, r2
 8004434:	4619      	mov	r1, r3
 8004436:	9e00      	ldr	r6, [sp, #0]
 8004438:	9311      	str	r3, [sp, #68]	; 0x44
 800443a:	4401      	add	r1, r0
 800443c:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8004440:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8004444:	19be      	adds	r6, r7, r6
 8004446:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800444a:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800444e:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8004452:	9f00      	ldr	r7, [sp, #0]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	eb06 0e07 	add.w	lr, r6, r7
 800445a:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800445c:	9302      	str	r3, [sp, #8]
 800445e:	3204      	adds	r2, #4
 8004460:	3104      	adds	r1, #4
 8004462:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004466:	f04f 0c00 	mov.w	ip, #0
 800446a:	edde 7a00 	vldr	s15, [lr]
 800446e:	edd6 6a00 	vldr	s13, [r6]
 8004472:	ed95 2a00 	vldr	s4, [r5]
 8004476:	ed17 aa01 	vldr	s20, [r7, #-4]
 800447a:	edd4 4a00 	vldr	s9, [r4]
 800447e:	ed90 5a00 	vldr	s10, [r0]
 8004482:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004486:	ed51 0a01 	vldr	s1, [r1, #-4]
 800448a:	ee77 8a85 	vadd.f32	s17, s15, s10
 800448e:	ee76 3a87 	vadd.f32	s7, s13, s14
 8004492:	ee32 4a20 	vadd.f32	s8, s4, s1
 8004496:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800449a:	ee33 6a84 	vadd.f32	s12, s7, s8
 800449e:	ee73 5a28 	vadd.f32	s11, s6, s17
 80044a2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80044a6:	ee75 6a86 	vadd.f32	s13, s11, s12
 80044aa:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80044ae:	ed47 6a01 	vstr	s13, [r7, #-4]
 80044b2:	edc4 5a00 	vstr	s11, [r4]
 80044b6:	ed92 9a00 	vldr	s18, [r2]
 80044ba:	ed95 1a01 	vldr	s2, [r5, #4]
 80044be:	edd6 5a01 	vldr	s11, [r6, #4]
 80044c2:	ed91 6a00 	vldr	s12, [r1]
 80044c6:	edd7 2a00 	vldr	s5, [r7]
 80044ca:	edd4 1a01 	vldr	s3, [r4, #4]
 80044ce:	edde 6a01 	vldr	s13, [lr, #4]
 80044d2:	edd0 9a01 	vldr	s19, [r0, #4]
 80044d6:	ee72 0a60 	vsub.f32	s1, s4, s1
 80044da:	ee71 aa46 	vsub.f32	s21, s2, s12
 80044de:	ee35 2ac9 	vsub.f32	s4, s11, s18
 80044e2:	ee37 0a60 	vsub.f32	s0, s14, s1
 80044e6:	ee32 8a2a 	vadd.f32	s16, s4, s21
 80044ea:	ee37 7a20 	vadd.f32	s14, s14, s1
 80044ee:	ee32 2a6a 	vsub.f32	s4, s4, s21
 80044f2:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80044f6:	ee75 5a89 	vadd.f32	s11, s11, s18
 80044fa:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80044fe:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8004502:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004506:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800450a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800450e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8004512:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8004516:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800451a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800451e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8004522:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004526:	ee36 0a88 	vadd.f32	s0, s13, s16
 800452a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800452e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8004532:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004536:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800453a:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800453e:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8004542:	ee75 4a27 	vadd.f32	s9, s10, s15
 8004546:	ee71 5a49 	vsub.f32	s11, s2, s18
 800454a:	ee31 2a09 	vadd.f32	s4, s2, s18
 800454e:	ee75 7a67 	vsub.f32	s15, s10, s15
 8004552:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8004556:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800455a:	ee73 0a06 	vadd.f32	s1, s6, s12
 800455e:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8004562:	ee36 5a87 	vadd.f32	s10, s13, s14
 8004566:	ee32 8a28 	vadd.f32	s16, s4, s17
 800456a:	ee33 6a46 	vsub.f32	s12, s6, s12
 800456e:	ee34 4a25 	vadd.f32	s8, s8, s11
 8004572:	ee33 3a80 	vadd.f32	s6, s7, s0
 8004576:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800457a:	ee71 5a64 	vsub.f32	s11, s2, s9
 800457e:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8004582:	ee32 2a68 	vsub.f32	s4, s4, s17
 8004586:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800458a:	ee74 4a81 	vadd.f32	s9, s9, s2
 800458e:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8004592:	44dc      	add	ip, fp
 8004594:	45e2      	cmp	sl, ip
 8004596:	ed87 8a00 	vstr	s16, [r7]
 800459a:	ed84 2a01 	vstr	s4, [r4, #4]
 800459e:	441f      	add	r7, r3
 80045a0:	edce 0a00 	vstr	s1, [lr]
 80045a4:	441c      	add	r4, r3
 80045a6:	ed80 6a00 	vstr	s12, [r0]
 80045aa:	edce 1a01 	vstr	s3, [lr, #4]
 80045ae:	ed80 4a01 	vstr	s8, [r0, #4]
 80045b2:	449e      	add	lr, r3
 80045b4:	ed86 3a00 	vstr	s6, [r6]
 80045b8:	4418      	add	r0, r3
 80045ba:	ed41 3a01 	vstr	s7, [r1, #-4]
 80045be:	ed02 5a01 	vstr	s10, [r2, #-4]
 80045c2:	ed85 7a00 	vstr	s14, [r5]
 80045c6:	edc6 5a01 	vstr	s11, [r6, #4]
 80045ca:	edc1 4a00 	vstr	s9, [r1]
 80045ce:	441e      	add	r6, r3
 80045d0:	edc2 6a00 	vstr	s13, [r2]
 80045d4:	4419      	add	r1, r3
 80045d6:	edc5 7a01 	vstr	s15, [r5, #4]
 80045da:	441a      	add	r2, r3
 80045dc:	441d      	add	r5, r3
 80045de:	f63f af44 	bhi.w	800446a <arm_radix8_butterfly_f32+0x6e>
 80045e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80045e4:	2a07      	cmp	r2, #7
 80045e6:	f240 81f5 	bls.w	80049d4 <arm_radix8_butterfly_f32+0x5d8>
 80045ea:	f108 0101 	add.w	r1, r8, #1
 80045ee:	188f      	adds	r7, r1, r2
 80045f0:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 80045f4:	19d6      	adds	r6, r2, r7
 80045f6:	eb08 0c09 	add.w	ip, r8, r9
 80045fa:	1994      	adds	r4, r2, r6
 80045fc:	eb0c 0e09 	add.w	lr, ip, r9
 8004600:	4610      	mov	r0, r2
 8004602:	9701      	str	r7, [sp, #4]
 8004604:	4420      	add	r0, r4
 8004606:	eb0e 0709 	add.w	r7, lr, r9
 800460a:	1815      	adds	r5, r2, r0
 800460c:	eb07 0209 	add.w	r2, r7, r9
 8004610:	9203      	str	r2, [sp, #12]
 8004612:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004614:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004618:	9117      	str	r1, [sp, #92]	; 0x5c
 800461a:	440a      	add	r2, r1
 800461c:	9900      	ldr	r1, [sp, #0]
 800461e:	3108      	adds	r1, #8
 8004620:	9100      	str	r1, [sp, #0]
 8004622:	9902      	ldr	r1, [sp, #8]
 8004624:	3108      	adds	r1, #8
 8004626:	9102      	str	r1, [sp, #8]
 8004628:	9919      	ldr	r1, [sp, #100]	; 0x64
 800462a:	00ff      	lsls	r7, r7, #3
 800462c:	9715      	str	r7, [sp, #84]	; 0x54
 800462e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8004632:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004636:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800463a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800463c:	9903      	ldr	r1, [sp, #12]
 800463e:	19d7      	adds	r7, r2, r7
 8004640:	00c9      	lsls	r1, r1, #3
 8004642:	9114      	str	r1, [sp, #80]	; 0x50
 8004644:	9710      	str	r7, [sp, #64]	; 0x40
 8004646:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004648:	9f00      	ldr	r7, [sp, #0]
 800464a:	19cf      	adds	r7, r1, r7
 800464c:	970d      	str	r7, [sp, #52]	; 0x34
 800464e:	9f02      	ldr	r7, [sp, #8]
 8004650:	19cf      	adds	r7, r1, r7
 8004652:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8004656:	970c      	str	r7, [sp, #48]	; 0x30
 8004658:	9f01      	ldr	r7, [sp, #4]
 800465a:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800465e:	3504      	adds	r5, #4
 8004660:	3004      	adds	r0, #4
 8004662:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8004666:	9508      	str	r5, [sp, #32]
 8004668:	9009      	str	r0, [sp, #36]	; 0x24
 800466a:	9d16      	ldr	r5, [sp, #88]	; 0x58
 800466c:	981a      	ldr	r0, [sp, #104]	; 0x68
 800466e:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8004672:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004676:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800467a:	9e14      	ldr	r6, [sp, #80]	; 0x50
 800467c:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8004680:	1945      	adds	r5, r0, r5
 8004682:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004686:	460f      	mov	r7, r1
 8004688:	3404      	adds	r4, #4
 800468a:	4641      	mov	r1, r8
 800468c:	1841      	adds	r1, r0, r1
 800468e:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8004692:	940a      	str	r4, [sp, #40]	; 0x28
 8004694:	eb00 0c06 	add.w	ip, r0, r6
 8004698:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800469c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800469e:	9506      	str	r5, [sp, #24]
 80046a0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80046a2:	9105      	str	r1, [sp, #20]
 80046a4:	4639      	mov	r1, r7
 80046a6:	1905      	adds	r5, r0, r4
 80046a8:	3108      	adds	r1, #8
 80046aa:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80046ac:	9507      	str	r5, [sp, #28]
 80046ae:	910f      	str	r1, [sp, #60]	; 0x3c
 80046b0:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80046b4:	2101      	movs	r1, #1
 80046b6:	eb00 0e06 	add.w	lr, r0, r6
 80046ba:	9518      	str	r5, [sp, #96]	; 0x60
 80046bc:	9404      	str	r4, [sp, #16]
 80046be:	9103      	str	r1, [sp, #12]
 80046c0:	4620      	mov	r0, r4
 80046c2:	4689      	mov	r9, r1
 80046c4:	9e06      	ldr	r6, [sp, #24]
 80046c6:	ed90 fa00 	vldr	s30, [r0]
 80046ca:	edd6 7a01 	vldr	s15, [r6, #4]
 80046ce:	edd0 ba01 	vldr	s23, [r0, #4]
 80046d2:	edcd 7a00 	vstr	s15, [sp]
 80046d6:	a80d      	add	r0, sp, #52	; 0x34
 80046d8:	edde 7a01 	vldr	s15, [lr, #4]
 80046dc:	9c05      	ldr	r4, [sp, #20]
 80046de:	9d07      	ldr	r5, [sp, #28]
 80046e0:	edd2 fa00 	vldr	s31, [r2]
 80046e4:	ed92 ca01 	vldr	s24, [r2, #4]
 80046e8:	edcd 7a01 	vstr	s15, [sp, #4]
 80046ec:	c807      	ldmia	r0, {r0, r1, r2}
 80046ee:	eddc 7a01 	vldr	s15, [ip, #4]
 80046f2:	edd4 ea00 	vldr	s29, [r4]
 80046f6:	ed95 ea00 	vldr	s28, [r5]
 80046fa:	edd6 da00 	vldr	s27, [r6]
 80046fe:	edd4 aa01 	vldr	s21, [r4, #4]
 8004702:	ed95 aa01 	vldr	s20, [r5, #4]
 8004706:	ed9e da00 	vldr	s26, [lr]
 800470a:	eddc ca00 	vldr	s25, [ip]
 800470e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004712:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004714:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004716:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004718:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800471a:	edcd 7a02 	vstr	s15, [sp, #8]
 800471e:	e001      	b.n	8004724 <arm_radix8_butterfly_f32+0x328>
 8004720:	3f3504f3 	.word	0x3f3504f3
 8004724:	ed16 6a01 	vldr	s12, [r6, #-4]
 8004728:	ed91 5a00 	vldr	s10, [r1]
 800472c:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004730:	edd5 7a00 	vldr	s15, [r5]
 8004734:	ed18 7a01 	vldr	s14, [r8, #-4]
 8004738:	edd2 3a00 	vldr	s7, [r2]
 800473c:	ed94 3a00 	vldr	s6, [r4]
 8004740:	ed90 2a00 	vldr	s4, [r0]
 8004744:	ed92 0a01 	vldr	s0, [r2, #4]
 8004748:	ee33 8a85 	vadd.f32	s16, s7, s10
 800474c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8004750:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004754:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004758:	ee78 1a04 	vadd.f32	s3, s16, s8
 800475c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8004760:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004764:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004768:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800476c:	ed82 6a00 	vstr	s12, [r2]
 8004770:	edd5 8a01 	vldr	s17, [r5, #4]
 8004774:	ed90 9a01 	vldr	s18, [r0, #4]
 8004778:	edd6 2a00 	vldr	s5, [r6]
 800477c:	ed98 7a00 	vldr	s14, [r8]
 8004780:	edd4 0a01 	vldr	s1, [r4, #4]
 8004784:	ed91 6a01 	vldr	s12, [r1, #4]
 8004788:	edd7 5a00 	vldr	s11, [r7]
 800478c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004790:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004794:	ee39 5a62 	vsub.f32	s10, s18, s5
 8004798:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800479c:	ee38 4a44 	vsub.f32	s8, s16, s8
 80047a0:	ee38 7a87 	vadd.f32	s14, s17, s14
 80047a4:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80047a8:	ee79 2a22 	vadd.f32	s5, s18, s5
 80047ac:	ee75 8a69 	vsub.f32	s17, s10, s19
 80047b0:	ee32 9a27 	vadd.f32	s18, s4, s15
 80047b4:	ee35 5a29 	vadd.f32	s10, s10, s19
 80047b8:	ee72 7a67 	vsub.f32	s15, s4, s15
 80047bc:	ee30 2a06 	vadd.f32	s4, s0, s12
 80047c0:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80047c4:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80047c8:	ee32 9a08 	vadd.f32	s18, s4, s16
 80047cc:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80047d0:	ee32 2a48 	vsub.f32	s4, s4, s16
 80047d4:	ee71 4a64 	vsub.f32	s9, s2, s9
 80047d8:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80047dc:	ee32 1a87 	vadd.f32	s2, s5, s14
 80047e0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80047e4:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80047e8:	ee30 6a46 	vsub.f32	s12, s0, s12
 80047ec:	ee73 0a29 	vadd.f32	s1, s6, s19
 80047f0:	ee36 0a28 	vadd.f32	s0, s12, s17
 80047f4:	ee33 3a69 	vsub.f32	s6, s6, s19
 80047f8:	ee32 7a64 	vsub.f32	s14, s4, s9
 80047fc:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8004800:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004804:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004808:	ee75 8a85 	vadd.f32	s17, s11, s10
 800480c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8004810:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004814:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004818:	ee79 1a41 	vsub.f32	s3, s18, s2
 800481c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8004820:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004824:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004828:	ee74 4a82 	vadd.f32	s9, s9, s4
 800482c:	ee30 4a60 	vsub.f32	s8, s0, s1
 8004830:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004834:	ee30 0a80 	vadd.f32	s0, s1, s0
 8004838:	ee77 9a85 	vadd.f32	s19, s15, s10
 800483c:	ee33 6a06 	vadd.f32	s12, s6, s12
 8004840:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004844:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004848:	ee2e 5a26 	vmul.f32	s10, s28, s13
 800484c:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8004850:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004854:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004858:	ee6a 6a26 	vmul.f32	s13, s20, s13
 800485c:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8004860:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004864:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004868:	ee6f 1a84 	vmul.f32	s3, s31, s8
 800486c:	ee35 3a03 	vadd.f32	s6, s10, s6
 8004870:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004874:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004878:	ee2f 2a88 	vmul.f32	s4, s31, s16
 800487c:	ed9d 4a02 	vldr	s8, [sp, #8]
 8004880:	ed82 1a01 	vstr	s2, [r2, #4]
 8004884:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004888:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800488c:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004890:	ed81 3a00 	vstr	s6, [r1]
 8004894:	ee30 9a89 	vadd.f32	s18, s1, s18
 8004898:	ee32 2a05 	vadd.f32	s4, s4, s10
 800489c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80048a0:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80048a4:	ee67 2a22 	vmul.f32	s5, s14, s5
 80048a8:	ee64 1a00 	vmul.f32	s3, s8, s0
 80048ac:	ee27 7a24 	vmul.f32	s14, s14, s9
 80048b0:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80048b4:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80048b8:	ee64 8a28 	vmul.f32	s17, s8, s17
 80048bc:	ed9d 4a00 	vldr	s8, [sp]
 80048c0:	edc1 6a01 	vstr	s13, [r1, #4]
 80048c4:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80048c8:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80048cc:	ee64 9a29 	vmul.f32	s19, s8, s19
 80048d0:	ee24 4a25 	vmul.f32	s8, s8, s11
 80048d4:	ee30 7a87 	vadd.f32	s14, s1, s14
 80048d8:	ee74 4a84 	vadd.f32	s9, s9, s8
 80048dc:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80048e0:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80048e4:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80048e8:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80048ec:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80048f0:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80048f4:	ee75 1a21 	vadd.f32	s3, s10, s3
 80048f8:	ee30 0a68 	vsub.f32	s0, s0, s17
 80048fc:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8004900:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004904:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004908:	44d9      	add	r9, fp
 800490a:	45ca      	cmp	sl, r9
 800490c:	ed84 9a00 	vstr	s18, [r4]
 8004910:	edc4 3a01 	vstr	s7, [r4, #4]
 8004914:	441a      	add	r2, r3
 8004916:	ed07 7a01 	vstr	s14, [r7, #-4]
 800491a:	edc7 2a00 	vstr	s5, [r7]
 800491e:	4419      	add	r1, r3
 8004920:	ed80 2a00 	vstr	s4, [r0]
 8004924:	ed80 8a01 	vstr	s16, [r0, #4]
 8004928:	441c      	add	r4, r3
 800492a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800492e:	ed88 0a00 	vstr	s0, [r8]
 8004932:	441f      	add	r7, r3
 8004934:	ed46 4a01 	vstr	s9, [r6, #-4]
 8004938:	4418      	add	r0, r3
 800493a:	edc6 9a00 	vstr	s19, [r6]
 800493e:	4498      	add	r8, r3
 8004940:	edc5 0a00 	vstr	s1, [r5]
 8004944:	ed85 6a01 	vstr	s12, [r5, #4]
 8004948:	441e      	add	r6, r3
 800494a:	441d      	add	r5, r3
 800494c:	f63f aeea 	bhi.w	8004724 <arm_radix8_butterfly_f32+0x328>
 8004950:	9a03      	ldr	r2, [sp, #12]
 8004952:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004954:	3201      	adds	r2, #1
 8004956:	4611      	mov	r1, r2
 8004958:	9203      	str	r2, [sp, #12]
 800495a:	9a04      	ldr	r2, [sp, #16]
 800495c:	4402      	add	r2, r0
 800495e:	9204      	str	r2, [sp, #16]
 8004960:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8004962:	9a05      	ldr	r2, [sp, #20]
 8004964:	4402      	add	r2, r0
 8004966:	9205      	str	r2, [sp, #20]
 8004968:	9812      	ldr	r0, [sp, #72]	; 0x48
 800496a:	9a07      	ldr	r2, [sp, #28]
 800496c:	4402      	add	r2, r0
 800496e:	9207      	str	r2, [sp, #28]
 8004970:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004972:	9a06      	ldr	r2, [sp, #24]
 8004974:	4402      	add	r2, r0
 8004976:	9206      	str	r2, [sp, #24]
 8004978:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800497a:	4496      	add	lr, r2
 800497c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800497e:	4494      	add	ip, r2
 8004980:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004982:	3208      	adds	r2, #8
 8004984:	920f      	str	r2, [sp, #60]	; 0x3c
 8004986:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004988:	3208      	adds	r2, #8
 800498a:	920e      	str	r2, [sp, #56]	; 0x38
 800498c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800498e:	3208      	adds	r2, #8
 8004990:	920d      	str	r2, [sp, #52]	; 0x34
 8004992:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004994:	3208      	adds	r2, #8
 8004996:	920c      	str	r2, [sp, #48]	; 0x30
 8004998:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800499a:	3208      	adds	r2, #8
 800499c:	920b      	str	r2, [sp, #44]	; 0x2c
 800499e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049a0:	3208      	adds	r2, #8
 80049a2:	920a      	str	r2, [sp, #40]	; 0x28
 80049a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80049a6:	3208      	adds	r2, #8
 80049a8:	9209      	str	r2, [sp, #36]	; 0x24
 80049aa:	9a08      	ldr	r2, [sp, #32]
 80049ac:	3208      	adds	r2, #8
 80049ae:	9208      	str	r2, [sp, #32]
 80049b0:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80049b2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80049b4:	4288      	cmp	r0, r1
 80049b6:	4622      	mov	r2, r4
 80049b8:	d007      	beq.n	80049ca <arm_radix8_butterfly_f32+0x5ce>
 80049ba:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80049bc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80049c0:	4621      	mov	r1, r4
 80049c2:	4401      	add	r1, r0
 80049c4:	9110      	str	r1, [sp, #64]	; 0x40
 80049c6:	9804      	ldr	r0, [sp, #16]
 80049c8:	e67c      	b.n	80046c4 <arm_radix8_butterfly_f32+0x2c8>
 80049ca:	4683      	mov	fp, r0
 80049cc:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80049d0:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80049d2:	e524      	b.n	800441e <arm_radix8_butterfly_f32+0x22>
 80049d4:	b01d      	add	sp, #116	; 0x74
 80049d6:	ecbd 8b10 	vpop	{d8-d15}
 80049da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049de:	bf00      	nop

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000014 	.word	0x20000014

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	4d0d      	ldr	r5, [pc, #52]	; (8004a24 <__libc_init_array+0x38>)
 80049f0:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f2:	1b64      	subs	r4, r4, r5
 80049f4:	10a4      	asrs	r4, r4, #2
 80049f6:	2600      	movs	r6, #0
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	4d0b      	ldr	r5, [pc, #44]	; (8004a2c <__libc_init_array+0x40>)
 80049fe:	4c0c      	ldr	r4, [pc, #48]	; (8004a30 <__libc_init_array+0x44>)
 8004a00:	f002 fde4 	bl	80075cc <_init>
 8004a04:	1b64      	subs	r4, r4, r5
 8004a06:	10a4      	asrs	r4, r4, #2
 8004a08:	2600      	movs	r6, #0
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	0800c1fc 	.word	0x0800c1fc
 8004a28:	0800c1fc 	.word	0x0800c1fc
 8004a2c:	0800c1fc 	.word	0x0800c1fc
 8004a30:	0800c200 	.word	0x0800c200

08004a34 <memcpy>:
 8004a34:	440a      	add	r2, r1
 8004a36:	4291      	cmp	r1, r2
 8004a38:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a3c:	d100      	bne.n	8004a40 <memcpy+0xc>
 8004a3e:	4770      	bx	lr
 8004a40:	b510      	push	{r4, lr}
 8004a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a4a:	4291      	cmp	r1, r2
 8004a4c:	d1f9      	bne.n	8004a42 <memcpy+0xe>
 8004a4e:	bd10      	pop	{r4, pc}

08004a50 <memset>:
 8004a50:	4402      	add	r2, r0
 8004a52:	4603      	mov	r3, r0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memset+0xa>
 8004a58:	4770      	bx	lr
 8004a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5e:	e7f9      	b.n	8004a54 <memset+0x4>

08004a60 <__cvt>:
 8004a60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	ec55 4b10 	vmov	r4, r5, d0
 8004a68:	2d00      	cmp	r5, #0
 8004a6a:	460e      	mov	r6, r1
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	462b      	mov	r3, r5
 8004a70:	bfbb      	ittet	lt
 8004a72:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004a76:	461d      	movlt	r5, r3
 8004a78:	2300      	movge	r3, #0
 8004a7a:	232d      	movlt	r3, #45	; 0x2d
 8004a7c:	700b      	strb	r3, [r1, #0]
 8004a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004a80:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004a84:	4691      	mov	r9, r2
 8004a86:	f023 0820 	bic.w	r8, r3, #32
 8004a8a:	bfbc      	itt	lt
 8004a8c:	4622      	movlt	r2, r4
 8004a8e:	4614      	movlt	r4, r2
 8004a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a94:	d005      	beq.n	8004aa2 <__cvt+0x42>
 8004a96:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a9a:	d100      	bne.n	8004a9e <__cvt+0x3e>
 8004a9c:	3601      	adds	r6, #1
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	e000      	b.n	8004aa4 <__cvt+0x44>
 8004aa2:	2103      	movs	r1, #3
 8004aa4:	ab03      	add	r3, sp, #12
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	ab02      	add	r3, sp, #8
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	ec45 4b10 	vmov	d0, r4, r5
 8004ab0:	4653      	mov	r3, sl
 8004ab2:	4632      	mov	r2, r6
 8004ab4:	f000 fe18 	bl	80056e8 <_dtoa_r>
 8004ab8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004abc:	4607      	mov	r7, r0
 8004abe:	d102      	bne.n	8004ac6 <__cvt+0x66>
 8004ac0:	f019 0f01 	tst.w	r9, #1
 8004ac4:	d022      	beq.n	8004b0c <__cvt+0xac>
 8004ac6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aca:	eb07 0906 	add.w	r9, r7, r6
 8004ace:	d110      	bne.n	8004af2 <__cvt+0x92>
 8004ad0:	783b      	ldrb	r3, [r7, #0]
 8004ad2:	2b30      	cmp	r3, #48	; 0x30
 8004ad4:	d10a      	bne.n	8004aec <__cvt+0x8c>
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2300      	movs	r3, #0
 8004ada:	4620      	mov	r0, r4
 8004adc:	4629      	mov	r1, r5
 8004ade:	f7fc f873 	bl	8000bc8 <__aeabi_dcmpeq>
 8004ae2:	b918      	cbnz	r0, 8004aec <__cvt+0x8c>
 8004ae4:	f1c6 0601 	rsb	r6, r6, #1
 8004ae8:	f8ca 6000 	str.w	r6, [sl]
 8004aec:	f8da 3000 	ldr.w	r3, [sl]
 8004af0:	4499      	add	r9, r3
 8004af2:	2200      	movs	r2, #0
 8004af4:	2300      	movs	r3, #0
 8004af6:	4620      	mov	r0, r4
 8004af8:	4629      	mov	r1, r5
 8004afa:	f7fc f865 	bl	8000bc8 <__aeabi_dcmpeq>
 8004afe:	b108      	cbz	r0, 8004b04 <__cvt+0xa4>
 8004b00:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b04:	2230      	movs	r2, #48	; 0x30
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	454b      	cmp	r3, r9
 8004b0a:	d307      	bcc.n	8004b1c <__cvt+0xbc>
 8004b0c:	9b03      	ldr	r3, [sp, #12]
 8004b0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004b10:	1bdb      	subs	r3, r3, r7
 8004b12:	4638      	mov	r0, r7
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	b004      	add	sp, #16
 8004b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1c:	1c59      	adds	r1, r3, #1
 8004b1e:	9103      	str	r1, [sp, #12]
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	e7f0      	b.n	8004b06 <__cvt+0xa6>

08004b24 <__exponent>:
 8004b24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b26:	4603      	mov	r3, r0
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	bfb8      	it	lt
 8004b2c:	4249      	neglt	r1, r1
 8004b2e:	f803 2b02 	strb.w	r2, [r3], #2
 8004b32:	bfb4      	ite	lt
 8004b34:	222d      	movlt	r2, #45	; 0x2d
 8004b36:	222b      	movge	r2, #43	; 0x2b
 8004b38:	2909      	cmp	r1, #9
 8004b3a:	7042      	strb	r2, [r0, #1]
 8004b3c:	dd2a      	ble.n	8004b94 <__exponent+0x70>
 8004b3e:	f10d 0407 	add.w	r4, sp, #7
 8004b42:	46a4      	mov	ip, r4
 8004b44:	270a      	movs	r7, #10
 8004b46:	46a6      	mov	lr, r4
 8004b48:	460a      	mov	r2, r1
 8004b4a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b4e:	fb07 1516 	mls	r5, r7, r6, r1
 8004b52:	3530      	adds	r5, #48	; 0x30
 8004b54:	2a63      	cmp	r2, #99	; 0x63
 8004b56:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b5a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b5e:	4631      	mov	r1, r6
 8004b60:	dcf1      	bgt.n	8004b46 <__exponent+0x22>
 8004b62:	3130      	adds	r1, #48	; 0x30
 8004b64:	f1ae 0502 	sub.w	r5, lr, #2
 8004b68:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b6c:	1c44      	adds	r4, r0, #1
 8004b6e:	4629      	mov	r1, r5
 8004b70:	4561      	cmp	r1, ip
 8004b72:	d30a      	bcc.n	8004b8a <__exponent+0x66>
 8004b74:	f10d 0209 	add.w	r2, sp, #9
 8004b78:	eba2 020e 	sub.w	r2, r2, lr
 8004b7c:	4565      	cmp	r5, ip
 8004b7e:	bf88      	it	hi
 8004b80:	2200      	movhi	r2, #0
 8004b82:	4413      	add	r3, r2
 8004b84:	1a18      	subs	r0, r3, r0
 8004b86:	b003      	add	sp, #12
 8004b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b8e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b92:	e7ed      	b.n	8004b70 <__exponent+0x4c>
 8004b94:	2330      	movs	r3, #48	; 0x30
 8004b96:	3130      	adds	r1, #48	; 0x30
 8004b98:	7083      	strb	r3, [r0, #2]
 8004b9a:	70c1      	strb	r1, [r0, #3]
 8004b9c:	1d03      	adds	r3, r0, #4
 8004b9e:	e7f1      	b.n	8004b84 <__exponent+0x60>

08004ba0 <_printf_float>:
 8004ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ba4:	ed2d 8b02 	vpush	{d8}
 8004ba8:	b08d      	sub	sp, #52	; 0x34
 8004baa:	460c      	mov	r4, r1
 8004bac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	461f      	mov	r7, r3
 8004bb4:	4605      	mov	r5, r0
 8004bb6:	f001 fd3d 	bl	8006634 <_localeconv_r>
 8004bba:	f8d0 a000 	ldr.w	sl, [r0]
 8004bbe:	4650      	mov	r0, sl
 8004bc0:	f7fb fb86 	bl	80002d0 <strlen>
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	930a      	str	r3, [sp, #40]	; 0x28
 8004bc8:	6823      	ldr	r3, [r4, #0]
 8004bca:	9305      	str	r3, [sp, #20]
 8004bcc:	f8d8 3000 	ldr.w	r3, [r8]
 8004bd0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004bd4:	3307      	adds	r3, #7
 8004bd6:	f023 0307 	bic.w	r3, r3, #7
 8004bda:	f103 0208 	add.w	r2, r3, #8
 8004bde:	f8c8 2000 	str.w	r2, [r8]
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004bee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004bf2:	9307      	str	r3, [sp, #28]
 8004bf4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004bf8:	ee08 0a10 	vmov	s16, r0
 8004bfc:	4b9f      	ldr	r3, [pc, #636]	; (8004e7c <_printf_float+0x2dc>)
 8004bfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c02:	f04f 32ff 	mov.w	r2, #4294967295
 8004c06:	f7fc f811 	bl	8000c2c <__aeabi_dcmpun>
 8004c0a:	bb88      	cbnz	r0, 8004c70 <_printf_float+0xd0>
 8004c0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c10:	4b9a      	ldr	r3, [pc, #616]	; (8004e7c <_printf_float+0x2dc>)
 8004c12:	f04f 32ff 	mov.w	r2, #4294967295
 8004c16:	f7fb ffeb 	bl	8000bf0 <__aeabi_dcmple>
 8004c1a:	bb48      	cbnz	r0, 8004c70 <_printf_float+0xd0>
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	2300      	movs	r3, #0
 8004c20:	4640      	mov	r0, r8
 8004c22:	4649      	mov	r1, r9
 8004c24:	f7fb ffda 	bl	8000bdc <__aeabi_dcmplt>
 8004c28:	b110      	cbz	r0, 8004c30 <_printf_float+0x90>
 8004c2a:	232d      	movs	r3, #45	; 0x2d
 8004c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c30:	4b93      	ldr	r3, [pc, #588]	; (8004e80 <_printf_float+0x2e0>)
 8004c32:	4894      	ldr	r0, [pc, #592]	; (8004e84 <_printf_float+0x2e4>)
 8004c34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004c38:	bf94      	ite	ls
 8004c3a:	4698      	movls	r8, r3
 8004c3c:	4680      	movhi	r8, r0
 8004c3e:	2303      	movs	r3, #3
 8004c40:	6123      	str	r3, [r4, #16]
 8004c42:	9b05      	ldr	r3, [sp, #20]
 8004c44:	f023 0204 	bic.w	r2, r3, #4
 8004c48:	6022      	str	r2, [r4, #0]
 8004c4a:	f04f 0900 	mov.w	r9, #0
 8004c4e:	9700      	str	r7, [sp, #0]
 8004c50:	4633      	mov	r3, r6
 8004c52:	aa0b      	add	r2, sp, #44	; 0x2c
 8004c54:	4621      	mov	r1, r4
 8004c56:	4628      	mov	r0, r5
 8004c58:	f000 f9d8 	bl	800500c <_printf_common>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	f040 8090 	bne.w	8004d82 <_printf_float+0x1e2>
 8004c62:	f04f 30ff 	mov.w	r0, #4294967295
 8004c66:	b00d      	add	sp, #52	; 0x34
 8004c68:	ecbd 8b02 	vpop	{d8}
 8004c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c70:	4642      	mov	r2, r8
 8004c72:	464b      	mov	r3, r9
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	f7fb ffd8 	bl	8000c2c <__aeabi_dcmpun>
 8004c7c:	b140      	cbz	r0, 8004c90 <_printf_float+0xf0>
 8004c7e:	464b      	mov	r3, r9
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	bfbc      	itt	lt
 8004c84:	232d      	movlt	r3, #45	; 0x2d
 8004c86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c8a:	487f      	ldr	r0, [pc, #508]	; (8004e88 <_printf_float+0x2e8>)
 8004c8c:	4b7f      	ldr	r3, [pc, #508]	; (8004e8c <_printf_float+0x2ec>)
 8004c8e:	e7d1      	b.n	8004c34 <_printf_float+0x94>
 8004c90:	6863      	ldr	r3, [r4, #4]
 8004c92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004c96:	9206      	str	r2, [sp, #24]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	d13f      	bne.n	8004d1c <_printf_float+0x17c>
 8004c9c:	2306      	movs	r3, #6
 8004c9e:	6063      	str	r3, [r4, #4]
 8004ca0:	9b05      	ldr	r3, [sp, #20]
 8004ca2:	6861      	ldr	r1, [r4, #4]
 8004ca4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004ca8:	2300      	movs	r3, #0
 8004caa:	9303      	str	r3, [sp, #12]
 8004cac:	ab0a      	add	r3, sp, #40	; 0x28
 8004cae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004cb2:	ab09      	add	r3, sp, #36	; 0x24
 8004cb4:	ec49 8b10 	vmov	d0, r8, r9
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6022      	str	r2, [r4, #0]
 8004cbc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f7ff fecd 	bl	8004a60 <__cvt>
 8004cc6:	9b06      	ldr	r3, [sp, #24]
 8004cc8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cca:	2b47      	cmp	r3, #71	; 0x47
 8004ccc:	4680      	mov	r8, r0
 8004cce:	d108      	bne.n	8004ce2 <_printf_float+0x142>
 8004cd0:	1cc8      	adds	r0, r1, #3
 8004cd2:	db02      	blt.n	8004cda <_printf_float+0x13a>
 8004cd4:	6863      	ldr	r3, [r4, #4]
 8004cd6:	4299      	cmp	r1, r3
 8004cd8:	dd41      	ble.n	8004d5e <_printf_float+0x1be>
 8004cda:	f1ab 0b02 	sub.w	fp, fp, #2
 8004cde:	fa5f fb8b 	uxtb.w	fp, fp
 8004ce2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ce6:	d820      	bhi.n	8004d2a <_printf_float+0x18a>
 8004ce8:	3901      	subs	r1, #1
 8004cea:	465a      	mov	r2, fp
 8004cec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cf0:	9109      	str	r1, [sp, #36]	; 0x24
 8004cf2:	f7ff ff17 	bl	8004b24 <__exponent>
 8004cf6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cf8:	1813      	adds	r3, r2, r0
 8004cfa:	2a01      	cmp	r2, #1
 8004cfc:	4681      	mov	r9, r0
 8004cfe:	6123      	str	r3, [r4, #16]
 8004d00:	dc02      	bgt.n	8004d08 <_printf_float+0x168>
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	07d2      	lsls	r2, r2, #31
 8004d06:	d501      	bpl.n	8004d0c <_printf_float+0x16c>
 8004d08:	3301      	adds	r3, #1
 8004d0a:	6123      	str	r3, [r4, #16]
 8004d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d09c      	beq.n	8004c4e <_printf_float+0xae>
 8004d14:	232d      	movs	r3, #45	; 0x2d
 8004d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d1a:	e798      	b.n	8004c4e <_printf_float+0xae>
 8004d1c:	9a06      	ldr	r2, [sp, #24]
 8004d1e:	2a47      	cmp	r2, #71	; 0x47
 8004d20:	d1be      	bne.n	8004ca0 <_printf_float+0x100>
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1bc      	bne.n	8004ca0 <_printf_float+0x100>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e7b9      	b.n	8004c9e <_printf_float+0xfe>
 8004d2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004d2e:	d118      	bne.n	8004d62 <_printf_float+0x1c2>
 8004d30:	2900      	cmp	r1, #0
 8004d32:	6863      	ldr	r3, [r4, #4]
 8004d34:	dd0b      	ble.n	8004d4e <_printf_float+0x1ae>
 8004d36:	6121      	str	r1, [r4, #16]
 8004d38:	b913      	cbnz	r3, 8004d40 <_printf_float+0x1a0>
 8004d3a:	6822      	ldr	r2, [r4, #0]
 8004d3c:	07d0      	lsls	r0, r2, #31
 8004d3e:	d502      	bpl.n	8004d46 <_printf_float+0x1a6>
 8004d40:	3301      	adds	r3, #1
 8004d42:	440b      	add	r3, r1
 8004d44:	6123      	str	r3, [r4, #16]
 8004d46:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d48:	f04f 0900 	mov.w	r9, #0
 8004d4c:	e7de      	b.n	8004d0c <_printf_float+0x16c>
 8004d4e:	b913      	cbnz	r3, 8004d56 <_printf_float+0x1b6>
 8004d50:	6822      	ldr	r2, [r4, #0]
 8004d52:	07d2      	lsls	r2, r2, #31
 8004d54:	d501      	bpl.n	8004d5a <_printf_float+0x1ba>
 8004d56:	3302      	adds	r3, #2
 8004d58:	e7f4      	b.n	8004d44 <_printf_float+0x1a4>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e7f2      	b.n	8004d44 <_printf_float+0x1a4>
 8004d5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004d64:	4299      	cmp	r1, r3
 8004d66:	db05      	blt.n	8004d74 <_printf_float+0x1d4>
 8004d68:	6823      	ldr	r3, [r4, #0]
 8004d6a:	6121      	str	r1, [r4, #16]
 8004d6c:	07d8      	lsls	r0, r3, #31
 8004d6e:	d5ea      	bpl.n	8004d46 <_printf_float+0x1a6>
 8004d70:	1c4b      	adds	r3, r1, #1
 8004d72:	e7e7      	b.n	8004d44 <_printf_float+0x1a4>
 8004d74:	2900      	cmp	r1, #0
 8004d76:	bfd4      	ite	le
 8004d78:	f1c1 0202 	rsble	r2, r1, #2
 8004d7c:	2201      	movgt	r2, #1
 8004d7e:	4413      	add	r3, r2
 8004d80:	e7e0      	b.n	8004d44 <_printf_float+0x1a4>
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	055a      	lsls	r2, r3, #21
 8004d86:	d407      	bmi.n	8004d98 <_printf_float+0x1f8>
 8004d88:	6923      	ldr	r3, [r4, #16]
 8004d8a:	4642      	mov	r2, r8
 8004d8c:	4631      	mov	r1, r6
 8004d8e:	4628      	mov	r0, r5
 8004d90:	47b8      	blx	r7
 8004d92:	3001      	adds	r0, #1
 8004d94:	d12c      	bne.n	8004df0 <_printf_float+0x250>
 8004d96:	e764      	b.n	8004c62 <_printf_float+0xc2>
 8004d98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004d9c:	f240 80e0 	bls.w	8004f60 <_printf_float+0x3c0>
 8004da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da4:	2200      	movs	r2, #0
 8004da6:	2300      	movs	r3, #0
 8004da8:	f7fb ff0e 	bl	8000bc8 <__aeabi_dcmpeq>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d034      	beq.n	8004e1a <_printf_float+0x27a>
 8004db0:	4a37      	ldr	r2, [pc, #220]	; (8004e90 <_printf_float+0x2f0>)
 8004db2:	2301      	movs	r3, #1
 8004db4:	4631      	mov	r1, r6
 8004db6:	4628      	mov	r0, r5
 8004db8:	47b8      	blx	r7
 8004dba:	3001      	adds	r0, #1
 8004dbc:	f43f af51 	beq.w	8004c62 <_printf_float+0xc2>
 8004dc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	db02      	blt.n	8004dce <_printf_float+0x22e>
 8004dc8:	6823      	ldr	r3, [r4, #0]
 8004dca:	07d8      	lsls	r0, r3, #31
 8004dcc:	d510      	bpl.n	8004df0 <_printf_float+0x250>
 8004dce:	ee18 3a10 	vmov	r3, s16
 8004dd2:	4652      	mov	r2, sl
 8004dd4:	4631      	mov	r1, r6
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	47b8      	blx	r7
 8004dda:	3001      	adds	r0, #1
 8004ddc:	f43f af41 	beq.w	8004c62 <_printf_float+0xc2>
 8004de0:	f04f 0800 	mov.w	r8, #0
 8004de4:	f104 091a 	add.w	r9, r4, #26
 8004de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dea:	3b01      	subs	r3, #1
 8004dec:	4543      	cmp	r3, r8
 8004dee:	dc09      	bgt.n	8004e04 <_printf_float+0x264>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	079b      	lsls	r3, r3, #30
 8004df4:	f100 8105 	bmi.w	8005002 <_printf_float+0x462>
 8004df8:	68e0      	ldr	r0, [r4, #12]
 8004dfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dfc:	4298      	cmp	r0, r3
 8004dfe:	bfb8      	it	lt
 8004e00:	4618      	movlt	r0, r3
 8004e02:	e730      	b.n	8004c66 <_printf_float+0xc6>
 8004e04:	2301      	movs	r3, #1
 8004e06:	464a      	mov	r2, r9
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4628      	mov	r0, r5
 8004e0c:	47b8      	blx	r7
 8004e0e:	3001      	adds	r0, #1
 8004e10:	f43f af27 	beq.w	8004c62 <_printf_float+0xc2>
 8004e14:	f108 0801 	add.w	r8, r8, #1
 8004e18:	e7e6      	b.n	8004de8 <_printf_float+0x248>
 8004e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	dc39      	bgt.n	8004e94 <_printf_float+0x2f4>
 8004e20:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <_printf_float+0x2f0>)
 8004e22:	2301      	movs	r3, #1
 8004e24:	4631      	mov	r1, r6
 8004e26:	4628      	mov	r0, r5
 8004e28:	47b8      	blx	r7
 8004e2a:	3001      	adds	r0, #1
 8004e2c:	f43f af19 	beq.w	8004c62 <_printf_float+0xc2>
 8004e30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e34:	4313      	orrs	r3, r2
 8004e36:	d102      	bne.n	8004e3e <_printf_float+0x29e>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	07d9      	lsls	r1, r3, #31
 8004e3c:	d5d8      	bpl.n	8004df0 <_printf_float+0x250>
 8004e3e:	ee18 3a10 	vmov	r3, s16
 8004e42:	4652      	mov	r2, sl
 8004e44:	4631      	mov	r1, r6
 8004e46:	4628      	mov	r0, r5
 8004e48:	47b8      	blx	r7
 8004e4a:	3001      	adds	r0, #1
 8004e4c:	f43f af09 	beq.w	8004c62 <_printf_float+0xc2>
 8004e50:	f04f 0900 	mov.w	r9, #0
 8004e54:	f104 0a1a 	add.w	sl, r4, #26
 8004e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5a:	425b      	negs	r3, r3
 8004e5c:	454b      	cmp	r3, r9
 8004e5e:	dc01      	bgt.n	8004e64 <_printf_float+0x2c4>
 8004e60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e62:	e792      	b.n	8004d8a <_printf_float+0x1ea>
 8004e64:	2301      	movs	r3, #1
 8004e66:	4652      	mov	r2, sl
 8004e68:	4631      	mov	r1, r6
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	47b8      	blx	r7
 8004e6e:	3001      	adds	r0, #1
 8004e70:	f43f aef7 	beq.w	8004c62 <_printf_float+0xc2>
 8004e74:	f109 0901 	add.w	r9, r9, #1
 8004e78:	e7ee      	b.n	8004e58 <_printf_float+0x2b8>
 8004e7a:	bf00      	nop
 8004e7c:	7fefffff 	.word	0x7fefffff
 8004e80:	0800be1c 	.word	0x0800be1c
 8004e84:	0800be20 	.word	0x0800be20
 8004e88:	0800be28 	.word	0x0800be28
 8004e8c:	0800be24 	.word	0x0800be24
 8004e90:	0800be2c 	.word	0x0800be2c
 8004e94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	bfa8      	it	ge
 8004e9c:	461a      	movge	r2, r3
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	4691      	mov	r9, r2
 8004ea2:	dc37      	bgt.n	8004f14 <_printf_float+0x374>
 8004ea4:	f04f 0b00 	mov.w	fp, #0
 8004ea8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eac:	f104 021a 	add.w	r2, r4, #26
 8004eb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004eb2:	9305      	str	r3, [sp, #20]
 8004eb4:	eba3 0309 	sub.w	r3, r3, r9
 8004eb8:	455b      	cmp	r3, fp
 8004eba:	dc33      	bgt.n	8004f24 <_printf_float+0x384>
 8004ebc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	db3b      	blt.n	8004f3c <_printf_float+0x39c>
 8004ec4:	6823      	ldr	r3, [r4, #0]
 8004ec6:	07da      	lsls	r2, r3, #31
 8004ec8:	d438      	bmi.n	8004f3c <_printf_float+0x39c>
 8004eca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ecc:	9a05      	ldr	r2, [sp, #20]
 8004ece:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ed0:	1a9a      	subs	r2, r3, r2
 8004ed2:	eba3 0901 	sub.w	r9, r3, r1
 8004ed6:	4591      	cmp	r9, r2
 8004ed8:	bfa8      	it	ge
 8004eda:	4691      	movge	r9, r2
 8004edc:	f1b9 0f00 	cmp.w	r9, #0
 8004ee0:	dc35      	bgt.n	8004f4e <_printf_float+0x3ae>
 8004ee2:	f04f 0800 	mov.w	r8, #0
 8004ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eea:	f104 0a1a 	add.w	sl, r4, #26
 8004eee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ef2:	1a9b      	subs	r3, r3, r2
 8004ef4:	eba3 0309 	sub.w	r3, r3, r9
 8004ef8:	4543      	cmp	r3, r8
 8004efa:	f77f af79 	ble.w	8004df0 <_printf_float+0x250>
 8004efe:	2301      	movs	r3, #1
 8004f00:	4652      	mov	r2, sl
 8004f02:	4631      	mov	r1, r6
 8004f04:	4628      	mov	r0, r5
 8004f06:	47b8      	blx	r7
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f43f aeaa 	beq.w	8004c62 <_printf_float+0xc2>
 8004f0e:	f108 0801 	add.w	r8, r8, #1
 8004f12:	e7ec      	b.n	8004eee <_printf_float+0x34e>
 8004f14:	4613      	mov	r3, r2
 8004f16:	4631      	mov	r1, r6
 8004f18:	4642      	mov	r2, r8
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d1c0      	bne.n	8004ea4 <_printf_float+0x304>
 8004f22:	e69e      	b.n	8004c62 <_printf_float+0xc2>
 8004f24:	2301      	movs	r3, #1
 8004f26:	4631      	mov	r1, r6
 8004f28:	4628      	mov	r0, r5
 8004f2a:	9205      	str	r2, [sp, #20]
 8004f2c:	47b8      	blx	r7
 8004f2e:	3001      	adds	r0, #1
 8004f30:	f43f ae97 	beq.w	8004c62 <_printf_float+0xc2>
 8004f34:	9a05      	ldr	r2, [sp, #20]
 8004f36:	f10b 0b01 	add.w	fp, fp, #1
 8004f3a:	e7b9      	b.n	8004eb0 <_printf_float+0x310>
 8004f3c:	ee18 3a10 	vmov	r3, s16
 8004f40:	4652      	mov	r2, sl
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	d1be      	bne.n	8004eca <_printf_float+0x32a>
 8004f4c:	e689      	b.n	8004c62 <_printf_float+0xc2>
 8004f4e:	9a05      	ldr	r2, [sp, #20]
 8004f50:	464b      	mov	r3, r9
 8004f52:	4442      	add	r2, r8
 8004f54:	4631      	mov	r1, r6
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	d1c1      	bne.n	8004ee2 <_printf_float+0x342>
 8004f5e:	e680      	b.n	8004c62 <_printf_float+0xc2>
 8004f60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f62:	2a01      	cmp	r2, #1
 8004f64:	dc01      	bgt.n	8004f6a <_printf_float+0x3ca>
 8004f66:	07db      	lsls	r3, r3, #31
 8004f68:	d538      	bpl.n	8004fdc <_printf_float+0x43c>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f ae74 	beq.w	8004c62 <_printf_float+0xc2>
 8004f7a:	ee18 3a10 	vmov	r3, s16
 8004f7e:	4652      	mov	r2, sl
 8004f80:	4631      	mov	r1, r6
 8004f82:	4628      	mov	r0, r5
 8004f84:	47b8      	blx	r7
 8004f86:	3001      	adds	r0, #1
 8004f88:	f43f ae6b 	beq.w	8004c62 <_printf_float+0xc2>
 8004f8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f90:	2200      	movs	r2, #0
 8004f92:	2300      	movs	r3, #0
 8004f94:	f7fb fe18 	bl	8000bc8 <__aeabi_dcmpeq>
 8004f98:	b9d8      	cbnz	r0, 8004fd2 <_printf_float+0x432>
 8004f9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f9c:	f108 0201 	add.w	r2, r8, #1
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	4631      	mov	r1, r6
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	47b8      	blx	r7
 8004fa8:	3001      	adds	r0, #1
 8004faa:	d10e      	bne.n	8004fca <_printf_float+0x42a>
 8004fac:	e659      	b.n	8004c62 <_printf_float+0xc2>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f ae52 	beq.w	8004c62 <_printf_float+0xc2>
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fc4:	3b01      	subs	r3, #1
 8004fc6:	4543      	cmp	r3, r8
 8004fc8:	dcf1      	bgt.n	8004fae <_printf_float+0x40e>
 8004fca:	464b      	mov	r3, r9
 8004fcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004fd0:	e6dc      	b.n	8004d8c <_printf_float+0x1ec>
 8004fd2:	f04f 0800 	mov.w	r8, #0
 8004fd6:	f104 0a1a 	add.w	sl, r4, #26
 8004fda:	e7f2      	b.n	8004fc2 <_printf_float+0x422>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4642      	mov	r2, r8
 8004fe0:	e7df      	b.n	8004fa2 <_printf_float+0x402>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	464a      	mov	r2, r9
 8004fe6:	4631      	mov	r1, r6
 8004fe8:	4628      	mov	r0, r5
 8004fea:	47b8      	blx	r7
 8004fec:	3001      	adds	r0, #1
 8004fee:	f43f ae38 	beq.w	8004c62 <_printf_float+0xc2>
 8004ff2:	f108 0801 	add.w	r8, r8, #1
 8004ff6:	68e3      	ldr	r3, [r4, #12]
 8004ff8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004ffa:	1a5b      	subs	r3, r3, r1
 8004ffc:	4543      	cmp	r3, r8
 8004ffe:	dcf0      	bgt.n	8004fe2 <_printf_float+0x442>
 8005000:	e6fa      	b.n	8004df8 <_printf_float+0x258>
 8005002:	f04f 0800 	mov.w	r8, #0
 8005006:	f104 0919 	add.w	r9, r4, #25
 800500a:	e7f4      	b.n	8004ff6 <_printf_float+0x456>

0800500c <_printf_common>:
 800500c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005010:	4616      	mov	r6, r2
 8005012:	4699      	mov	r9, r3
 8005014:	688a      	ldr	r2, [r1, #8]
 8005016:	690b      	ldr	r3, [r1, #16]
 8005018:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800501c:	4293      	cmp	r3, r2
 800501e:	bfb8      	it	lt
 8005020:	4613      	movlt	r3, r2
 8005022:	6033      	str	r3, [r6, #0]
 8005024:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005028:	4607      	mov	r7, r0
 800502a:	460c      	mov	r4, r1
 800502c:	b10a      	cbz	r2, 8005032 <_printf_common+0x26>
 800502e:	3301      	adds	r3, #1
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	0699      	lsls	r1, r3, #26
 8005036:	bf42      	ittt	mi
 8005038:	6833      	ldrmi	r3, [r6, #0]
 800503a:	3302      	addmi	r3, #2
 800503c:	6033      	strmi	r3, [r6, #0]
 800503e:	6825      	ldr	r5, [r4, #0]
 8005040:	f015 0506 	ands.w	r5, r5, #6
 8005044:	d106      	bne.n	8005054 <_printf_common+0x48>
 8005046:	f104 0a19 	add.w	sl, r4, #25
 800504a:	68e3      	ldr	r3, [r4, #12]
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	42ab      	cmp	r3, r5
 8005052:	dc26      	bgt.n	80050a2 <_printf_common+0x96>
 8005054:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005058:	1e13      	subs	r3, r2, #0
 800505a:	6822      	ldr	r2, [r4, #0]
 800505c:	bf18      	it	ne
 800505e:	2301      	movne	r3, #1
 8005060:	0692      	lsls	r2, r2, #26
 8005062:	d42b      	bmi.n	80050bc <_printf_common+0xb0>
 8005064:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005068:	4649      	mov	r1, r9
 800506a:	4638      	mov	r0, r7
 800506c:	47c0      	blx	r8
 800506e:	3001      	adds	r0, #1
 8005070:	d01e      	beq.n	80050b0 <_printf_common+0xa4>
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	68e5      	ldr	r5, [r4, #12]
 8005076:	6832      	ldr	r2, [r6, #0]
 8005078:	f003 0306 	and.w	r3, r3, #6
 800507c:	2b04      	cmp	r3, #4
 800507e:	bf08      	it	eq
 8005080:	1aad      	subeq	r5, r5, r2
 8005082:	68a3      	ldr	r3, [r4, #8]
 8005084:	6922      	ldr	r2, [r4, #16]
 8005086:	bf0c      	ite	eq
 8005088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800508c:	2500      	movne	r5, #0
 800508e:	4293      	cmp	r3, r2
 8005090:	bfc4      	itt	gt
 8005092:	1a9b      	subgt	r3, r3, r2
 8005094:	18ed      	addgt	r5, r5, r3
 8005096:	2600      	movs	r6, #0
 8005098:	341a      	adds	r4, #26
 800509a:	42b5      	cmp	r5, r6
 800509c:	d11a      	bne.n	80050d4 <_printf_common+0xc8>
 800509e:	2000      	movs	r0, #0
 80050a0:	e008      	b.n	80050b4 <_printf_common+0xa8>
 80050a2:	2301      	movs	r3, #1
 80050a4:	4652      	mov	r2, sl
 80050a6:	4649      	mov	r1, r9
 80050a8:	4638      	mov	r0, r7
 80050aa:	47c0      	blx	r8
 80050ac:	3001      	adds	r0, #1
 80050ae:	d103      	bne.n	80050b8 <_printf_common+0xac>
 80050b0:	f04f 30ff 	mov.w	r0, #4294967295
 80050b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b8:	3501      	adds	r5, #1
 80050ba:	e7c6      	b.n	800504a <_printf_common+0x3e>
 80050bc:	18e1      	adds	r1, r4, r3
 80050be:	1c5a      	adds	r2, r3, #1
 80050c0:	2030      	movs	r0, #48	; 0x30
 80050c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c6:	4422      	add	r2, r4
 80050c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050d0:	3302      	adds	r3, #2
 80050d2:	e7c7      	b.n	8005064 <_printf_common+0x58>
 80050d4:	2301      	movs	r3, #1
 80050d6:	4622      	mov	r2, r4
 80050d8:	4649      	mov	r1, r9
 80050da:	4638      	mov	r0, r7
 80050dc:	47c0      	blx	r8
 80050de:	3001      	adds	r0, #1
 80050e0:	d0e6      	beq.n	80050b0 <_printf_common+0xa4>
 80050e2:	3601      	adds	r6, #1
 80050e4:	e7d9      	b.n	800509a <_printf_common+0x8e>
	...

080050e8 <_printf_i>:
 80050e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050ec:	7e0f      	ldrb	r7, [r1, #24]
 80050ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050f0:	2f78      	cmp	r7, #120	; 0x78
 80050f2:	4691      	mov	r9, r2
 80050f4:	4680      	mov	r8, r0
 80050f6:	460c      	mov	r4, r1
 80050f8:	469a      	mov	sl, r3
 80050fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050fe:	d807      	bhi.n	8005110 <_printf_i+0x28>
 8005100:	2f62      	cmp	r7, #98	; 0x62
 8005102:	d80a      	bhi.n	800511a <_printf_i+0x32>
 8005104:	2f00      	cmp	r7, #0
 8005106:	f000 80d8 	beq.w	80052ba <_printf_i+0x1d2>
 800510a:	2f58      	cmp	r7, #88	; 0x58
 800510c:	f000 80a3 	beq.w	8005256 <_printf_i+0x16e>
 8005110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005114:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005118:	e03a      	b.n	8005190 <_printf_i+0xa8>
 800511a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511e:	2b15      	cmp	r3, #21
 8005120:	d8f6      	bhi.n	8005110 <_printf_i+0x28>
 8005122:	a101      	add	r1, pc, #4	; (adr r1, 8005128 <_printf_i+0x40>)
 8005124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005128:	08005181 	.word	0x08005181
 800512c:	08005195 	.word	0x08005195
 8005130:	08005111 	.word	0x08005111
 8005134:	08005111 	.word	0x08005111
 8005138:	08005111 	.word	0x08005111
 800513c:	08005111 	.word	0x08005111
 8005140:	08005195 	.word	0x08005195
 8005144:	08005111 	.word	0x08005111
 8005148:	08005111 	.word	0x08005111
 800514c:	08005111 	.word	0x08005111
 8005150:	08005111 	.word	0x08005111
 8005154:	080052a1 	.word	0x080052a1
 8005158:	080051c5 	.word	0x080051c5
 800515c:	08005283 	.word	0x08005283
 8005160:	08005111 	.word	0x08005111
 8005164:	08005111 	.word	0x08005111
 8005168:	080052c3 	.word	0x080052c3
 800516c:	08005111 	.word	0x08005111
 8005170:	080051c5 	.word	0x080051c5
 8005174:	08005111 	.word	0x08005111
 8005178:	08005111 	.word	0x08005111
 800517c:	0800528b 	.word	0x0800528b
 8005180:	682b      	ldr	r3, [r5, #0]
 8005182:	1d1a      	adds	r2, r3, #4
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	602a      	str	r2, [r5, #0]
 8005188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800518c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005190:	2301      	movs	r3, #1
 8005192:	e0a3      	b.n	80052dc <_printf_i+0x1f4>
 8005194:	6820      	ldr	r0, [r4, #0]
 8005196:	6829      	ldr	r1, [r5, #0]
 8005198:	0606      	lsls	r6, r0, #24
 800519a:	f101 0304 	add.w	r3, r1, #4
 800519e:	d50a      	bpl.n	80051b6 <_printf_i+0xce>
 80051a0:	680e      	ldr	r6, [r1, #0]
 80051a2:	602b      	str	r3, [r5, #0]
 80051a4:	2e00      	cmp	r6, #0
 80051a6:	da03      	bge.n	80051b0 <_printf_i+0xc8>
 80051a8:	232d      	movs	r3, #45	; 0x2d
 80051aa:	4276      	negs	r6, r6
 80051ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051b0:	485e      	ldr	r0, [pc, #376]	; (800532c <_printf_i+0x244>)
 80051b2:	230a      	movs	r3, #10
 80051b4:	e019      	b.n	80051ea <_printf_i+0x102>
 80051b6:	680e      	ldr	r6, [r1, #0]
 80051b8:	602b      	str	r3, [r5, #0]
 80051ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051be:	bf18      	it	ne
 80051c0:	b236      	sxthne	r6, r6
 80051c2:	e7ef      	b.n	80051a4 <_printf_i+0xbc>
 80051c4:	682b      	ldr	r3, [r5, #0]
 80051c6:	6820      	ldr	r0, [r4, #0]
 80051c8:	1d19      	adds	r1, r3, #4
 80051ca:	6029      	str	r1, [r5, #0]
 80051cc:	0601      	lsls	r1, r0, #24
 80051ce:	d501      	bpl.n	80051d4 <_printf_i+0xec>
 80051d0:	681e      	ldr	r6, [r3, #0]
 80051d2:	e002      	b.n	80051da <_printf_i+0xf2>
 80051d4:	0646      	lsls	r6, r0, #25
 80051d6:	d5fb      	bpl.n	80051d0 <_printf_i+0xe8>
 80051d8:	881e      	ldrh	r6, [r3, #0]
 80051da:	4854      	ldr	r0, [pc, #336]	; (800532c <_printf_i+0x244>)
 80051dc:	2f6f      	cmp	r7, #111	; 0x6f
 80051de:	bf0c      	ite	eq
 80051e0:	2308      	moveq	r3, #8
 80051e2:	230a      	movne	r3, #10
 80051e4:	2100      	movs	r1, #0
 80051e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ea:	6865      	ldr	r5, [r4, #4]
 80051ec:	60a5      	str	r5, [r4, #8]
 80051ee:	2d00      	cmp	r5, #0
 80051f0:	bfa2      	ittt	ge
 80051f2:	6821      	ldrge	r1, [r4, #0]
 80051f4:	f021 0104 	bicge.w	r1, r1, #4
 80051f8:	6021      	strge	r1, [r4, #0]
 80051fa:	b90e      	cbnz	r6, 8005200 <_printf_i+0x118>
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	d04d      	beq.n	800529c <_printf_i+0x1b4>
 8005200:	4615      	mov	r5, r2
 8005202:	fbb6 f1f3 	udiv	r1, r6, r3
 8005206:	fb03 6711 	mls	r7, r3, r1, r6
 800520a:	5dc7      	ldrb	r7, [r0, r7]
 800520c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005210:	4637      	mov	r7, r6
 8005212:	42bb      	cmp	r3, r7
 8005214:	460e      	mov	r6, r1
 8005216:	d9f4      	bls.n	8005202 <_printf_i+0x11a>
 8005218:	2b08      	cmp	r3, #8
 800521a:	d10b      	bne.n	8005234 <_printf_i+0x14c>
 800521c:	6823      	ldr	r3, [r4, #0]
 800521e:	07de      	lsls	r6, r3, #31
 8005220:	d508      	bpl.n	8005234 <_printf_i+0x14c>
 8005222:	6923      	ldr	r3, [r4, #16]
 8005224:	6861      	ldr	r1, [r4, #4]
 8005226:	4299      	cmp	r1, r3
 8005228:	bfde      	ittt	le
 800522a:	2330      	movle	r3, #48	; 0x30
 800522c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005230:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005234:	1b52      	subs	r2, r2, r5
 8005236:	6122      	str	r2, [r4, #16]
 8005238:	f8cd a000 	str.w	sl, [sp]
 800523c:	464b      	mov	r3, r9
 800523e:	aa03      	add	r2, sp, #12
 8005240:	4621      	mov	r1, r4
 8005242:	4640      	mov	r0, r8
 8005244:	f7ff fee2 	bl	800500c <_printf_common>
 8005248:	3001      	adds	r0, #1
 800524a:	d14c      	bne.n	80052e6 <_printf_i+0x1fe>
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	b004      	add	sp, #16
 8005252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005256:	4835      	ldr	r0, [pc, #212]	; (800532c <_printf_i+0x244>)
 8005258:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800525c:	6829      	ldr	r1, [r5, #0]
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	f851 6b04 	ldr.w	r6, [r1], #4
 8005264:	6029      	str	r1, [r5, #0]
 8005266:	061d      	lsls	r5, r3, #24
 8005268:	d514      	bpl.n	8005294 <_printf_i+0x1ac>
 800526a:	07df      	lsls	r7, r3, #31
 800526c:	bf44      	itt	mi
 800526e:	f043 0320 	orrmi.w	r3, r3, #32
 8005272:	6023      	strmi	r3, [r4, #0]
 8005274:	b91e      	cbnz	r6, 800527e <_printf_i+0x196>
 8005276:	6823      	ldr	r3, [r4, #0]
 8005278:	f023 0320 	bic.w	r3, r3, #32
 800527c:	6023      	str	r3, [r4, #0]
 800527e:	2310      	movs	r3, #16
 8005280:	e7b0      	b.n	80051e4 <_printf_i+0xfc>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	f043 0320 	orr.w	r3, r3, #32
 8005288:	6023      	str	r3, [r4, #0]
 800528a:	2378      	movs	r3, #120	; 0x78
 800528c:	4828      	ldr	r0, [pc, #160]	; (8005330 <_printf_i+0x248>)
 800528e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005292:	e7e3      	b.n	800525c <_printf_i+0x174>
 8005294:	0659      	lsls	r1, r3, #25
 8005296:	bf48      	it	mi
 8005298:	b2b6      	uxthmi	r6, r6
 800529a:	e7e6      	b.n	800526a <_printf_i+0x182>
 800529c:	4615      	mov	r5, r2
 800529e:	e7bb      	b.n	8005218 <_printf_i+0x130>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	6826      	ldr	r6, [r4, #0]
 80052a4:	6961      	ldr	r1, [r4, #20]
 80052a6:	1d18      	adds	r0, r3, #4
 80052a8:	6028      	str	r0, [r5, #0]
 80052aa:	0635      	lsls	r5, r6, #24
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	d501      	bpl.n	80052b4 <_printf_i+0x1cc>
 80052b0:	6019      	str	r1, [r3, #0]
 80052b2:	e002      	b.n	80052ba <_printf_i+0x1d2>
 80052b4:	0670      	lsls	r0, r6, #25
 80052b6:	d5fb      	bpl.n	80052b0 <_printf_i+0x1c8>
 80052b8:	8019      	strh	r1, [r3, #0]
 80052ba:	2300      	movs	r3, #0
 80052bc:	6123      	str	r3, [r4, #16]
 80052be:	4615      	mov	r5, r2
 80052c0:	e7ba      	b.n	8005238 <_printf_i+0x150>
 80052c2:	682b      	ldr	r3, [r5, #0]
 80052c4:	1d1a      	adds	r2, r3, #4
 80052c6:	602a      	str	r2, [r5, #0]
 80052c8:	681d      	ldr	r5, [r3, #0]
 80052ca:	6862      	ldr	r2, [r4, #4]
 80052cc:	2100      	movs	r1, #0
 80052ce:	4628      	mov	r0, r5
 80052d0:	f7fb f806 	bl	80002e0 <memchr>
 80052d4:	b108      	cbz	r0, 80052da <_printf_i+0x1f2>
 80052d6:	1b40      	subs	r0, r0, r5
 80052d8:	6060      	str	r0, [r4, #4]
 80052da:	6863      	ldr	r3, [r4, #4]
 80052dc:	6123      	str	r3, [r4, #16]
 80052de:	2300      	movs	r3, #0
 80052e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e4:	e7a8      	b.n	8005238 <_printf_i+0x150>
 80052e6:	6923      	ldr	r3, [r4, #16]
 80052e8:	462a      	mov	r2, r5
 80052ea:	4649      	mov	r1, r9
 80052ec:	4640      	mov	r0, r8
 80052ee:	47d0      	blx	sl
 80052f0:	3001      	adds	r0, #1
 80052f2:	d0ab      	beq.n	800524c <_printf_i+0x164>
 80052f4:	6823      	ldr	r3, [r4, #0]
 80052f6:	079b      	lsls	r3, r3, #30
 80052f8:	d413      	bmi.n	8005322 <_printf_i+0x23a>
 80052fa:	68e0      	ldr	r0, [r4, #12]
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	4298      	cmp	r0, r3
 8005300:	bfb8      	it	lt
 8005302:	4618      	movlt	r0, r3
 8005304:	e7a4      	b.n	8005250 <_printf_i+0x168>
 8005306:	2301      	movs	r3, #1
 8005308:	4632      	mov	r2, r6
 800530a:	4649      	mov	r1, r9
 800530c:	4640      	mov	r0, r8
 800530e:	47d0      	blx	sl
 8005310:	3001      	adds	r0, #1
 8005312:	d09b      	beq.n	800524c <_printf_i+0x164>
 8005314:	3501      	adds	r5, #1
 8005316:	68e3      	ldr	r3, [r4, #12]
 8005318:	9903      	ldr	r1, [sp, #12]
 800531a:	1a5b      	subs	r3, r3, r1
 800531c:	42ab      	cmp	r3, r5
 800531e:	dcf2      	bgt.n	8005306 <_printf_i+0x21e>
 8005320:	e7eb      	b.n	80052fa <_printf_i+0x212>
 8005322:	2500      	movs	r5, #0
 8005324:	f104 0619 	add.w	r6, r4, #25
 8005328:	e7f5      	b.n	8005316 <_printf_i+0x22e>
 800532a:	bf00      	nop
 800532c:	0800be2e 	.word	0x0800be2e
 8005330:	0800be3f 	.word	0x0800be3f

08005334 <iprintf>:
 8005334:	b40f      	push	{r0, r1, r2, r3}
 8005336:	4b0a      	ldr	r3, [pc, #40]	; (8005360 <iprintf+0x2c>)
 8005338:	b513      	push	{r0, r1, r4, lr}
 800533a:	681c      	ldr	r4, [r3, #0]
 800533c:	b124      	cbz	r4, 8005348 <iprintf+0x14>
 800533e:	69a3      	ldr	r3, [r4, #24]
 8005340:	b913      	cbnz	r3, 8005348 <iprintf+0x14>
 8005342:	4620      	mov	r0, r4
 8005344:	f001 f8d8 	bl	80064f8 <__sinit>
 8005348:	ab05      	add	r3, sp, #20
 800534a:	9a04      	ldr	r2, [sp, #16]
 800534c:	68a1      	ldr	r1, [r4, #8]
 800534e:	9301      	str	r3, [sp, #4]
 8005350:	4620      	mov	r0, r4
 8005352:	f001 fe87 	bl	8007064 <_vfiprintf_r>
 8005356:	b002      	add	sp, #8
 8005358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800535c:	b004      	add	sp, #16
 800535e:	4770      	bx	lr
 8005360:	20000014 	.word	0x20000014

08005364 <_puts_r>:
 8005364:	b570      	push	{r4, r5, r6, lr}
 8005366:	460e      	mov	r6, r1
 8005368:	4605      	mov	r5, r0
 800536a:	b118      	cbz	r0, 8005374 <_puts_r+0x10>
 800536c:	6983      	ldr	r3, [r0, #24]
 800536e:	b90b      	cbnz	r3, 8005374 <_puts_r+0x10>
 8005370:	f001 f8c2 	bl	80064f8 <__sinit>
 8005374:	69ab      	ldr	r3, [r5, #24]
 8005376:	68ac      	ldr	r4, [r5, #8]
 8005378:	b913      	cbnz	r3, 8005380 <_puts_r+0x1c>
 800537a:	4628      	mov	r0, r5
 800537c:	f001 f8bc 	bl	80064f8 <__sinit>
 8005380:	4b2c      	ldr	r3, [pc, #176]	; (8005434 <_puts_r+0xd0>)
 8005382:	429c      	cmp	r4, r3
 8005384:	d120      	bne.n	80053c8 <_puts_r+0x64>
 8005386:	686c      	ldr	r4, [r5, #4]
 8005388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800538a:	07db      	lsls	r3, r3, #31
 800538c:	d405      	bmi.n	800539a <_puts_r+0x36>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	0598      	lsls	r0, r3, #22
 8005392:	d402      	bmi.n	800539a <_puts_r+0x36>
 8005394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005396:	f001 f952 	bl	800663e <__retarget_lock_acquire_recursive>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	0719      	lsls	r1, r3, #28
 800539e:	d51d      	bpl.n	80053dc <_puts_r+0x78>
 80053a0:	6923      	ldr	r3, [r4, #16]
 80053a2:	b1db      	cbz	r3, 80053dc <_puts_r+0x78>
 80053a4:	3e01      	subs	r6, #1
 80053a6:	68a3      	ldr	r3, [r4, #8]
 80053a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053ac:	3b01      	subs	r3, #1
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	bb39      	cbnz	r1, 8005402 <_puts_r+0x9e>
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	da38      	bge.n	8005428 <_puts_r+0xc4>
 80053b6:	4622      	mov	r2, r4
 80053b8:	210a      	movs	r1, #10
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 f848 	bl	8005450 <__swbuf_r>
 80053c0:	3001      	adds	r0, #1
 80053c2:	d011      	beq.n	80053e8 <_puts_r+0x84>
 80053c4:	250a      	movs	r5, #10
 80053c6:	e011      	b.n	80053ec <_puts_r+0x88>
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <_puts_r+0xd4>)
 80053ca:	429c      	cmp	r4, r3
 80053cc:	d101      	bne.n	80053d2 <_puts_r+0x6e>
 80053ce:	68ac      	ldr	r4, [r5, #8]
 80053d0:	e7da      	b.n	8005388 <_puts_r+0x24>
 80053d2:	4b1a      	ldr	r3, [pc, #104]	; (800543c <_puts_r+0xd8>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	bf08      	it	eq
 80053d8:	68ec      	ldreq	r4, [r5, #12]
 80053da:	e7d5      	b.n	8005388 <_puts_r+0x24>
 80053dc:	4621      	mov	r1, r4
 80053de:	4628      	mov	r0, r5
 80053e0:	f000 f888 	bl	80054f4 <__swsetup_r>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d0dd      	beq.n	80053a4 <_puts_r+0x40>
 80053e8:	f04f 35ff 	mov.w	r5, #4294967295
 80053ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053ee:	07da      	lsls	r2, r3, #31
 80053f0:	d405      	bmi.n	80053fe <_puts_r+0x9a>
 80053f2:	89a3      	ldrh	r3, [r4, #12]
 80053f4:	059b      	lsls	r3, r3, #22
 80053f6:	d402      	bmi.n	80053fe <_puts_r+0x9a>
 80053f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053fa:	f001 f921 	bl	8006640 <__retarget_lock_release_recursive>
 80053fe:	4628      	mov	r0, r5
 8005400:	bd70      	pop	{r4, r5, r6, pc}
 8005402:	2b00      	cmp	r3, #0
 8005404:	da04      	bge.n	8005410 <_puts_r+0xac>
 8005406:	69a2      	ldr	r2, [r4, #24]
 8005408:	429a      	cmp	r2, r3
 800540a:	dc06      	bgt.n	800541a <_puts_r+0xb6>
 800540c:	290a      	cmp	r1, #10
 800540e:	d004      	beq.n	800541a <_puts_r+0xb6>
 8005410:	6823      	ldr	r3, [r4, #0]
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	6022      	str	r2, [r4, #0]
 8005416:	7019      	strb	r1, [r3, #0]
 8005418:	e7c5      	b.n	80053a6 <_puts_r+0x42>
 800541a:	4622      	mov	r2, r4
 800541c:	4628      	mov	r0, r5
 800541e:	f000 f817 	bl	8005450 <__swbuf_r>
 8005422:	3001      	adds	r0, #1
 8005424:	d1bf      	bne.n	80053a6 <_puts_r+0x42>
 8005426:	e7df      	b.n	80053e8 <_puts_r+0x84>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	250a      	movs	r5, #10
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	6022      	str	r2, [r4, #0]
 8005430:	701d      	strb	r5, [r3, #0]
 8005432:	e7db      	b.n	80053ec <_puts_r+0x88>
 8005434:	0800bf00 	.word	0x0800bf00
 8005438:	0800bf20 	.word	0x0800bf20
 800543c:	0800bee0 	.word	0x0800bee0

08005440 <puts>:
 8005440:	4b02      	ldr	r3, [pc, #8]	; (800544c <puts+0xc>)
 8005442:	4601      	mov	r1, r0
 8005444:	6818      	ldr	r0, [r3, #0]
 8005446:	f7ff bf8d 	b.w	8005364 <_puts_r>
 800544a:	bf00      	nop
 800544c:	20000014 	.word	0x20000014

08005450 <__swbuf_r>:
 8005450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005452:	460e      	mov	r6, r1
 8005454:	4614      	mov	r4, r2
 8005456:	4605      	mov	r5, r0
 8005458:	b118      	cbz	r0, 8005462 <__swbuf_r+0x12>
 800545a:	6983      	ldr	r3, [r0, #24]
 800545c:	b90b      	cbnz	r3, 8005462 <__swbuf_r+0x12>
 800545e:	f001 f84b 	bl	80064f8 <__sinit>
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <__swbuf_r+0x98>)
 8005464:	429c      	cmp	r4, r3
 8005466:	d12b      	bne.n	80054c0 <__swbuf_r+0x70>
 8005468:	686c      	ldr	r4, [r5, #4]
 800546a:	69a3      	ldr	r3, [r4, #24]
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	071a      	lsls	r2, r3, #28
 8005472:	d52f      	bpl.n	80054d4 <__swbuf_r+0x84>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	b36b      	cbz	r3, 80054d4 <__swbuf_r+0x84>
 8005478:	6923      	ldr	r3, [r4, #16]
 800547a:	6820      	ldr	r0, [r4, #0]
 800547c:	1ac0      	subs	r0, r0, r3
 800547e:	6963      	ldr	r3, [r4, #20]
 8005480:	b2f6      	uxtb	r6, r6
 8005482:	4283      	cmp	r3, r0
 8005484:	4637      	mov	r7, r6
 8005486:	dc04      	bgt.n	8005492 <__swbuf_r+0x42>
 8005488:	4621      	mov	r1, r4
 800548a:	4628      	mov	r0, r5
 800548c:	f000 ffa0 	bl	80063d0 <_fflush_r>
 8005490:	bb30      	cbnz	r0, 80054e0 <__swbuf_r+0x90>
 8005492:	68a3      	ldr	r3, [r4, #8]
 8005494:	3b01      	subs	r3, #1
 8005496:	60a3      	str	r3, [r4, #8]
 8005498:	6823      	ldr	r3, [r4, #0]
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	6022      	str	r2, [r4, #0]
 800549e:	701e      	strb	r6, [r3, #0]
 80054a0:	6963      	ldr	r3, [r4, #20]
 80054a2:	3001      	adds	r0, #1
 80054a4:	4283      	cmp	r3, r0
 80054a6:	d004      	beq.n	80054b2 <__swbuf_r+0x62>
 80054a8:	89a3      	ldrh	r3, [r4, #12]
 80054aa:	07db      	lsls	r3, r3, #31
 80054ac:	d506      	bpl.n	80054bc <__swbuf_r+0x6c>
 80054ae:	2e0a      	cmp	r6, #10
 80054b0:	d104      	bne.n	80054bc <__swbuf_r+0x6c>
 80054b2:	4621      	mov	r1, r4
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 ff8b 	bl	80063d0 <_fflush_r>
 80054ba:	b988      	cbnz	r0, 80054e0 <__swbuf_r+0x90>
 80054bc:	4638      	mov	r0, r7
 80054be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054c0:	4b0a      	ldr	r3, [pc, #40]	; (80054ec <__swbuf_r+0x9c>)
 80054c2:	429c      	cmp	r4, r3
 80054c4:	d101      	bne.n	80054ca <__swbuf_r+0x7a>
 80054c6:	68ac      	ldr	r4, [r5, #8]
 80054c8:	e7cf      	b.n	800546a <__swbuf_r+0x1a>
 80054ca:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <__swbuf_r+0xa0>)
 80054cc:	429c      	cmp	r4, r3
 80054ce:	bf08      	it	eq
 80054d0:	68ec      	ldreq	r4, [r5, #12]
 80054d2:	e7ca      	b.n	800546a <__swbuf_r+0x1a>
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 f80c 	bl	80054f4 <__swsetup_r>
 80054dc:	2800      	cmp	r0, #0
 80054de:	d0cb      	beq.n	8005478 <__swbuf_r+0x28>
 80054e0:	f04f 37ff 	mov.w	r7, #4294967295
 80054e4:	e7ea      	b.n	80054bc <__swbuf_r+0x6c>
 80054e6:	bf00      	nop
 80054e8:	0800bf00 	.word	0x0800bf00
 80054ec:	0800bf20 	.word	0x0800bf20
 80054f0:	0800bee0 	.word	0x0800bee0

080054f4 <__swsetup_r>:
 80054f4:	4b32      	ldr	r3, [pc, #200]	; (80055c0 <__swsetup_r+0xcc>)
 80054f6:	b570      	push	{r4, r5, r6, lr}
 80054f8:	681d      	ldr	r5, [r3, #0]
 80054fa:	4606      	mov	r6, r0
 80054fc:	460c      	mov	r4, r1
 80054fe:	b125      	cbz	r5, 800550a <__swsetup_r+0x16>
 8005500:	69ab      	ldr	r3, [r5, #24]
 8005502:	b913      	cbnz	r3, 800550a <__swsetup_r+0x16>
 8005504:	4628      	mov	r0, r5
 8005506:	f000 fff7 	bl	80064f8 <__sinit>
 800550a:	4b2e      	ldr	r3, [pc, #184]	; (80055c4 <__swsetup_r+0xd0>)
 800550c:	429c      	cmp	r4, r3
 800550e:	d10f      	bne.n	8005530 <__swsetup_r+0x3c>
 8005510:	686c      	ldr	r4, [r5, #4]
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005518:	0719      	lsls	r1, r3, #28
 800551a:	d42c      	bmi.n	8005576 <__swsetup_r+0x82>
 800551c:	06dd      	lsls	r5, r3, #27
 800551e:	d411      	bmi.n	8005544 <__swsetup_r+0x50>
 8005520:	2309      	movs	r3, #9
 8005522:	6033      	str	r3, [r6, #0]
 8005524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005528:	81a3      	strh	r3, [r4, #12]
 800552a:	f04f 30ff 	mov.w	r0, #4294967295
 800552e:	e03e      	b.n	80055ae <__swsetup_r+0xba>
 8005530:	4b25      	ldr	r3, [pc, #148]	; (80055c8 <__swsetup_r+0xd4>)
 8005532:	429c      	cmp	r4, r3
 8005534:	d101      	bne.n	800553a <__swsetup_r+0x46>
 8005536:	68ac      	ldr	r4, [r5, #8]
 8005538:	e7eb      	b.n	8005512 <__swsetup_r+0x1e>
 800553a:	4b24      	ldr	r3, [pc, #144]	; (80055cc <__swsetup_r+0xd8>)
 800553c:	429c      	cmp	r4, r3
 800553e:	bf08      	it	eq
 8005540:	68ec      	ldreq	r4, [r5, #12]
 8005542:	e7e6      	b.n	8005512 <__swsetup_r+0x1e>
 8005544:	0758      	lsls	r0, r3, #29
 8005546:	d512      	bpl.n	800556e <__swsetup_r+0x7a>
 8005548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800554a:	b141      	cbz	r1, 800555e <__swsetup_r+0x6a>
 800554c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005550:	4299      	cmp	r1, r3
 8005552:	d002      	beq.n	800555a <__swsetup_r+0x66>
 8005554:	4630      	mov	r0, r6
 8005556:	f001 fc7b 	bl	8006e50 <_free_r>
 800555a:	2300      	movs	r3, #0
 800555c:	6363      	str	r3, [r4, #52]	; 0x34
 800555e:	89a3      	ldrh	r3, [r4, #12]
 8005560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005564:	81a3      	strh	r3, [r4, #12]
 8005566:	2300      	movs	r3, #0
 8005568:	6063      	str	r3, [r4, #4]
 800556a:	6923      	ldr	r3, [r4, #16]
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	89a3      	ldrh	r3, [r4, #12]
 8005570:	f043 0308 	orr.w	r3, r3, #8
 8005574:	81a3      	strh	r3, [r4, #12]
 8005576:	6923      	ldr	r3, [r4, #16]
 8005578:	b94b      	cbnz	r3, 800558e <__swsetup_r+0x9a>
 800557a:	89a3      	ldrh	r3, [r4, #12]
 800557c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005584:	d003      	beq.n	800558e <__swsetup_r+0x9a>
 8005586:	4621      	mov	r1, r4
 8005588:	4630      	mov	r0, r6
 800558a:	f001 f87f 	bl	800668c <__smakebuf_r>
 800558e:	89a0      	ldrh	r0, [r4, #12]
 8005590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005594:	f010 0301 	ands.w	r3, r0, #1
 8005598:	d00a      	beq.n	80055b0 <__swsetup_r+0xbc>
 800559a:	2300      	movs	r3, #0
 800559c:	60a3      	str	r3, [r4, #8]
 800559e:	6963      	ldr	r3, [r4, #20]
 80055a0:	425b      	negs	r3, r3
 80055a2:	61a3      	str	r3, [r4, #24]
 80055a4:	6923      	ldr	r3, [r4, #16]
 80055a6:	b943      	cbnz	r3, 80055ba <__swsetup_r+0xc6>
 80055a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80055ac:	d1ba      	bne.n	8005524 <__swsetup_r+0x30>
 80055ae:	bd70      	pop	{r4, r5, r6, pc}
 80055b0:	0781      	lsls	r1, r0, #30
 80055b2:	bf58      	it	pl
 80055b4:	6963      	ldrpl	r3, [r4, #20]
 80055b6:	60a3      	str	r3, [r4, #8]
 80055b8:	e7f4      	b.n	80055a4 <__swsetup_r+0xb0>
 80055ba:	2000      	movs	r0, #0
 80055bc:	e7f7      	b.n	80055ae <__swsetup_r+0xba>
 80055be:	bf00      	nop
 80055c0:	20000014 	.word	0x20000014
 80055c4:	0800bf00 	.word	0x0800bf00
 80055c8:	0800bf20 	.word	0x0800bf20
 80055cc:	0800bee0 	.word	0x0800bee0

080055d0 <quorem>:
 80055d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	6903      	ldr	r3, [r0, #16]
 80055d6:	690c      	ldr	r4, [r1, #16]
 80055d8:	42a3      	cmp	r3, r4
 80055da:	4607      	mov	r7, r0
 80055dc:	f2c0 8081 	blt.w	80056e2 <quorem+0x112>
 80055e0:	3c01      	subs	r4, #1
 80055e2:	f101 0814 	add.w	r8, r1, #20
 80055e6:	f100 0514 	add.w	r5, r0, #20
 80055ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f8:	3301      	adds	r3, #1
 80055fa:	429a      	cmp	r2, r3
 80055fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005600:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005604:	fbb2 f6f3 	udiv	r6, r2, r3
 8005608:	d331      	bcc.n	800566e <quorem+0x9e>
 800560a:	f04f 0e00 	mov.w	lr, #0
 800560e:	4640      	mov	r0, r8
 8005610:	46ac      	mov	ip, r5
 8005612:	46f2      	mov	sl, lr
 8005614:	f850 2b04 	ldr.w	r2, [r0], #4
 8005618:	b293      	uxth	r3, r2
 800561a:	fb06 e303 	mla	r3, r6, r3, lr
 800561e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005622:	b29b      	uxth	r3, r3
 8005624:	ebaa 0303 	sub.w	r3, sl, r3
 8005628:	f8dc a000 	ldr.w	sl, [ip]
 800562c:	0c12      	lsrs	r2, r2, #16
 800562e:	fa13 f38a 	uxtah	r3, r3, sl
 8005632:	fb06 e202 	mla	r2, r6, r2, lr
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	9b00      	ldr	r3, [sp, #0]
 800563a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800563e:	b292      	uxth	r2, r2
 8005640:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005648:	f8bd 3000 	ldrh.w	r3, [sp]
 800564c:	4581      	cmp	r9, r0
 800564e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005652:	f84c 3b04 	str.w	r3, [ip], #4
 8005656:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800565a:	d2db      	bcs.n	8005614 <quorem+0x44>
 800565c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005660:	b92b      	cbnz	r3, 800566e <quorem+0x9e>
 8005662:	9b01      	ldr	r3, [sp, #4]
 8005664:	3b04      	subs	r3, #4
 8005666:	429d      	cmp	r5, r3
 8005668:	461a      	mov	r2, r3
 800566a:	d32e      	bcc.n	80056ca <quorem+0xfa>
 800566c:	613c      	str	r4, [r7, #16]
 800566e:	4638      	mov	r0, r7
 8005670:	f001 fad6 	bl	8006c20 <__mcmp>
 8005674:	2800      	cmp	r0, #0
 8005676:	db24      	blt.n	80056c2 <quorem+0xf2>
 8005678:	3601      	adds	r6, #1
 800567a:	4628      	mov	r0, r5
 800567c:	f04f 0c00 	mov.w	ip, #0
 8005680:	f858 2b04 	ldr.w	r2, [r8], #4
 8005684:	f8d0 e000 	ldr.w	lr, [r0]
 8005688:	b293      	uxth	r3, r2
 800568a:	ebac 0303 	sub.w	r3, ip, r3
 800568e:	0c12      	lsrs	r2, r2, #16
 8005690:	fa13 f38e 	uxtah	r3, r3, lr
 8005694:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005698:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800569c:	b29b      	uxth	r3, r3
 800569e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056a2:	45c1      	cmp	r9, r8
 80056a4:	f840 3b04 	str.w	r3, [r0], #4
 80056a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056ac:	d2e8      	bcs.n	8005680 <quorem+0xb0>
 80056ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056b6:	b922      	cbnz	r2, 80056c2 <quorem+0xf2>
 80056b8:	3b04      	subs	r3, #4
 80056ba:	429d      	cmp	r5, r3
 80056bc:	461a      	mov	r2, r3
 80056be:	d30a      	bcc.n	80056d6 <quorem+0x106>
 80056c0:	613c      	str	r4, [r7, #16]
 80056c2:	4630      	mov	r0, r6
 80056c4:	b003      	add	sp, #12
 80056c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	3b04      	subs	r3, #4
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	d1cc      	bne.n	800566c <quorem+0x9c>
 80056d2:	3c01      	subs	r4, #1
 80056d4:	e7c7      	b.n	8005666 <quorem+0x96>
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	3b04      	subs	r3, #4
 80056da:	2a00      	cmp	r2, #0
 80056dc:	d1f0      	bne.n	80056c0 <quorem+0xf0>
 80056de:	3c01      	subs	r4, #1
 80056e0:	e7eb      	b.n	80056ba <quorem+0xea>
 80056e2:	2000      	movs	r0, #0
 80056e4:	e7ee      	b.n	80056c4 <quorem+0xf4>
	...

080056e8 <_dtoa_r>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	ed2d 8b04 	vpush	{d8-d9}
 80056f0:	ec57 6b10 	vmov	r6, r7, d0
 80056f4:	b093      	sub	sp, #76	; 0x4c
 80056f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80056f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056fc:	9106      	str	r1, [sp, #24]
 80056fe:	ee10 aa10 	vmov	sl, s0
 8005702:	4604      	mov	r4, r0
 8005704:	9209      	str	r2, [sp, #36]	; 0x24
 8005706:	930c      	str	r3, [sp, #48]	; 0x30
 8005708:	46bb      	mov	fp, r7
 800570a:	b975      	cbnz	r5, 800572a <_dtoa_r+0x42>
 800570c:	2010      	movs	r0, #16
 800570e:	f000 fffd 	bl	800670c <malloc>
 8005712:	4602      	mov	r2, r0
 8005714:	6260      	str	r0, [r4, #36]	; 0x24
 8005716:	b920      	cbnz	r0, 8005722 <_dtoa_r+0x3a>
 8005718:	4ba7      	ldr	r3, [pc, #668]	; (80059b8 <_dtoa_r+0x2d0>)
 800571a:	21ea      	movs	r1, #234	; 0xea
 800571c:	48a7      	ldr	r0, [pc, #668]	; (80059bc <_dtoa_r+0x2d4>)
 800571e:	f001 fe37 	bl	8007390 <__assert_func>
 8005722:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005726:	6005      	str	r5, [r0, #0]
 8005728:	60c5      	str	r5, [r0, #12]
 800572a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800572c:	6819      	ldr	r1, [r3, #0]
 800572e:	b151      	cbz	r1, 8005746 <_dtoa_r+0x5e>
 8005730:	685a      	ldr	r2, [r3, #4]
 8005732:	604a      	str	r2, [r1, #4]
 8005734:	2301      	movs	r3, #1
 8005736:	4093      	lsls	r3, r2
 8005738:	608b      	str	r3, [r1, #8]
 800573a:	4620      	mov	r0, r4
 800573c:	f001 f82e 	bl	800679c <_Bfree>
 8005740:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	1e3b      	subs	r3, r7, #0
 8005748:	bfaa      	itet	ge
 800574a:	2300      	movge	r3, #0
 800574c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005750:	f8c8 3000 	strge.w	r3, [r8]
 8005754:	4b9a      	ldr	r3, [pc, #616]	; (80059c0 <_dtoa_r+0x2d8>)
 8005756:	bfbc      	itt	lt
 8005758:	2201      	movlt	r2, #1
 800575a:	f8c8 2000 	strlt.w	r2, [r8]
 800575e:	ea33 030b 	bics.w	r3, r3, fp
 8005762:	d11b      	bne.n	800579c <_dtoa_r+0xb4>
 8005764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005766:	f242 730f 	movw	r3, #9999	; 0x270f
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005770:	4333      	orrs	r3, r6
 8005772:	f000 8592 	beq.w	800629a <_dtoa_r+0xbb2>
 8005776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005778:	b963      	cbnz	r3, 8005794 <_dtoa_r+0xac>
 800577a:	4b92      	ldr	r3, [pc, #584]	; (80059c4 <_dtoa_r+0x2dc>)
 800577c:	e022      	b.n	80057c4 <_dtoa_r+0xdc>
 800577e:	4b92      	ldr	r3, [pc, #584]	; (80059c8 <_dtoa_r+0x2e0>)
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	3308      	adds	r3, #8
 8005784:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005786:	6013      	str	r3, [r2, #0]
 8005788:	9801      	ldr	r0, [sp, #4]
 800578a:	b013      	add	sp, #76	; 0x4c
 800578c:	ecbd 8b04 	vpop	{d8-d9}
 8005790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005794:	4b8b      	ldr	r3, [pc, #556]	; (80059c4 <_dtoa_r+0x2dc>)
 8005796:	9301      	str	r3, [sp, #4]
 8005798:	3303      	adds	r3, #3
 800579a:	e7f3      	b.n	8005784 <_dtoa_r+0x9c>
 800579c:	2200      	movs	r2, #0
 800579e:	2300      	movs	r3, #0
 80057a0:	4650      	mov	r0, sl
 80057a2:	4659      	mov	r1, fp
 80057a4:	f7fb fa10 	bl	8000bc8 <__aeabi_dcmpeq>
 80057a8:	ec4b ab19 	vmov	d9, sl, fp
 80057ac:	4680      	mov	r8, r0
 80057ae:	b158      	cbz	r0, 80057c8 <_dtoa_r+0xe0>
 80057b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057b2:	2301      	movs	r3, #1
 80057b4:	6013      	str	r3, [r2, #0]
 80057b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 856b 	beq.w	8006294 <_dtoa_r+0xbac>
 80057be:	4883      	ldr	r0, [pc, #524]	; (80059cc <_dtoa_r+0x2e4>)
 80057c0:	6018      	str	r0, [r3, #0]
 80057c2:	1e43      	subs	r3, r0, #1
 80057c4:	9301      	str	r3, [sp, #4]
 80057c6:	e7df      	b.n	8005788 <_dtoa_r+0xa0>
 80057c8:	ec4b ab10 	vmov	d0, sl, fp
 80057cc:	aa10      	add	r2, sp, #64	; 0x40
 80057ce:	a911      	add	r1, sp, #68	; 0x44
 80057d0:	4620      	mov	r0, r4
 80057d2:	f001 facb 	bl	8006d6c <__d2b>
 80057d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80057da:	ee08 0a10 	vmov	s16, r0
 80057de:	2d00      	cmp	r5, #0
 80057e0:	f000 8084 	beq.w	80058ec <_dtoa_r+0x204>
 80057e4:	ee19 3a90 	vmov	r3, s19
 80057e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80057f0:	4656      	mov	r6, sl
 80057f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80057f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80057fe:	4b74      	ldr	r3, [pc, #464]	; (80059d0 <_dtoa_r+0x2e8>)
 8005800:	2200      	movs	r2, #0
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fa fdbf 	bl	8000388 <__aeabi_dsub>
 800580a:	a365      	add	r3, pc, #404	; (adr r3, 80059a0 <_dtoa_r+0x2b8>)
 800580c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005810:	f7fa ff72 	bl	80006f8 <__aeabi_dmul>
 8005814:	a364      	add	r3, pc, #400	; (adr r3, 80059a8 <_dtoa_r+0x2c0>)
 8005816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581a:	f7fa fdb7 	bl	800038c <__adddf3>
 800581e:	4606      	mov	r6, r0
 8005820:	4628      	mov	r0, r5
 8005822:	460f      	mov	r7, r1
 8005824:	f7fa fefe 	bl	8000624 <__aeabi_i2d>
 8005828:	a361      	add	r3, pc, #388	; (adr r3, 80059b0 <_dtoa_r+0x2c8>)
 800582a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582e:	f7fa ff63 	bl	80006f8 <__aeabi_dmul>
 8005832:	4602      	mov	r2, r0
 8005834:	460b      	mov	r3, r1
 8005836:	4630      	mov	r0, r6
 8005838:	4639      	mov	r1, r7
 800583a:	f7fa fda7 	bl	800038c <__adddf3>
 800583e:	4606      	mov	r6, r0
 8005840:	460f      	mov	r7, r1
 8005842:	f7fb fa09 	bl	8000c58 <__aeabi_d2iz>
 8005846:	2200      	movs	r2, #0
 8005848:	9000      	str	r0, [sp, #0]
 800584a:	2300      	movs	r3, #0
 800584c:	4630      	mov	r0, r6
 800584e:	4639      	mov	r1, r7
 8005850:	f7fb f9c4 	bl	8000bdc <__aeabi_dcmplt>
 8005854:	b150      	cbz	r0, 800586c <_dtoa_r+0x184>
 8005856:	9800      	ldr	r0, [sp, #0]
 8005858:	f7fa fee4 	bl	8000624 <__aeabi_i2d>
 800585c:	4632      	mov	r2, r6
 800585e:	463b      	mov	r3, r7
 8005860:	f7fb f9b2 	bl	8000bc8 <__aeabi_dcmpeq>
 8005864:	b910      	cbnz	r0, 800586c <_dtoa_r+0x184>
 8005866:	9b00      	ldr	r3, [sp, #0]
 8005868:	3b01      	subs	r3, #1
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	9b00      	ldr	r3, [sp, #0]
 800586e:	2b16      	cmp	r3, #22
 8005870:	d85a      	bhi.n	8005928 <_dtoa_r+0x240>
 8005872:	9a00      	ldr	r2, [sp, #0]
 8005874:	4b57      	ldr	r3, [pc, #348]	; (80059d4 <_dtoa_r+0x2ec>)
 8005876:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	ec51 0b19 	vmov	r0, r1, d9
 8005882:	f7fb f9ab 	bl	8000bdc <__aeabi_dcmplt>
 8005886:	2800      	cmp	r0, #0
 8005888:	d050      	beq.n	800592c <_dtoa_r+0x244>
 800588a:	9b00      	ldr	r3, [sp, #0]
 800588c:	3b01      	subs	r3, #1
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	2300      	movs	r3, #0
 8005892:	930b      	str	r3, [sp, #44]	; 0x2c
 8005894:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005896:	1b5d      	subs	r5, r3, r5
 8005898:	1e6b      	subs	r3, r5, #1
 800589a:	9305      	str	r3, [sp, #20]
 800589c:	bf45      	ittet	mi
 800589e:	f1c5 0301 	rsbmi	r3, r5, #1
 80058a2:	9304      	strmi	r3, [sp, #16]
 80058a4:	2300      	movpl	r3, #0
 80058a6:	2300      	movmi	r3, #0
 80058a8:	bf4c      	ite	mi
 80058aa:	9305      	strmi	r3, [sp, #20]
 80058ac:	9304      	strpl	r3, [sp, #16]
 80058ae:	9b00      	ldr	r3, [sp, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	db3d      	blt.n	8005930 <_dtoa_r+0x248>
 80058b4:	9b05      	ldr	r3, [sp, #20]
 80058b6:	9a00      	ldr	r2, [sp, #0]
 80058b8:	920a      	str	r2, [sp, #40]	; 0x28
 80058ba:	4413      	add	r3, r2
 80058bc:	9305      	str	r3, [sp, #20]
 80058be:	2300      	movs	r3, #0
 80058c0:	9307      	str	r3, [sp, #28]
 80058c2:	9b06      	ldr	r3, [sp, #24]
 80058c4:	2b09      	cmp	r3, #9
 80058c6:	f200 8089 	bhi.w	80059dc <_dtoa_r+0x2f4>
 80058ca:	2b05      	cmp	r3, #5
 80058cc:	bfc4      	itt	gt
 80058ce:	3b04      	subgt	r3, #4
 80058d0:	9306      	strgt	r3, [sp, #24]
 80058d2:	9b06      	ldr	r3, [sp, #24]
 80058d4:	f1a3 0302 	sub.w	r3, r3, #2
 80058d8:	bfcc      	ite	gt
 80058da:	2500      	movgt	r5, #0
 80058dc:	2501      	movle	r5, #1
 80058de:	2b03      	cmp	r3, #3
 80058e0:	f200 8087 	bhi.w	80059f2 <_dtoa_r+0x30a>
 80058e4:	e8df f003 	tbb	[pc, r3]
 80058e8:	59383a2d 	.word	0x59383a2d
 80058ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80058f0:	441d      	add	r5, r3
 80058f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	bfc1      	itttt	gt
 80058fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005902:	fa0b f303 	lslgt.w	r3, fp, r3
 8005906:	fa26 f000 	lsrgt.w	r0, r6, r0
 800590a:	bfda      	itte	le
 800590c:	f1c3 0320 	rsble	r3, r3, #32
 8005910:	fa06 f003 	lslle.w	r0, r6, r3
 8005914:	4318      	orrgt	r0, r3
 8005916:	f7fa fe75 	bl	8000604 <__aeabi_ui2d>
 800591a:	2301      	movs	r3, #1
 800591c:	4606      	mov	r6, r0
 800591e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005922:	3d01      	subs	r5, #1
 8005924:	930e      	str	r3, [sp, #56]	; 0x38
 8005926:	e76a      	b.n	80057fe <_dtoa_r+0x116>
 8005928:	2301      	movs	r3, #1
 800592a:	e7b2      	b.n	8005892 <_dtoa_r+0x1aa>
 800592c:	900b      	str	r0, [sp, #44]	; 0x2c
 800592e:	e7b1      	b.n	8005894 <_dtoa_r+0x1ac>
 8005930:	9b04      	ldr	r3, [sp, #16]
 8005932:	9a00      	ldr	r2, [sp, #0]
 8005934:	1a9b      	subs	r3, r3, r2
 8005936:	9304      	str	r3, [sp, #16]
 8005938:	4253      	negs	r3, r2
 800593a:	9307      	str	r3, [sp, #28]
 800593c:	2300      	movs	r3, #0
 800593e:	930a      	str	r3, [sp, #40]	; 0x28
 8005940:	e7bf      	b.n	80058c2 <_dtoa_r+0x1da>
 8005942:	2300      	movs	r3, #0
 8005944:	9308      	str	r3, [sp, #32]
 8005946:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005948:	2b00      	cmp	r3, #0
 800594a:	dc55      	bgt.n	80059f8 <_dtoa_r+0x310>
 800594c:	2301      	movs	r3, #1
 800594e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005952:	461a      	mov	r2, r3
 8005954:	9209      	str	r2, [sp, #36]	; 0x24
 8005956:	e00c      	b.n	8005972 <_dtoa_r+0x28a>
 8005958:	2301      	movs	r3, #1
 800595a:	e7f3      	b.n	8005944 <_dtoa_r+0x25c>
 800595c:	2300      	movs	r3, #0
 800595e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005960:	9308      	str	r3, [sp, #32]
 8005962:	9b00      	ldr	r3, [sp, #0]
 8005964:	4413      	add	r3, r2
 8005966:	9302      	str	r3, [sp, #8]
 8005968:	3301      	adds	r3, #1
 800596a:	2b01      	cmp	r3, #1
 800596c:	9303      	str	r3, [sp, #12]
 800596e:	bfb8      	it	lt
 8005970:	2301      	movlt	r3, #1
 8005972:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005974:	2200      	movs	r2, #0
 8005976:	6042      	str	r2, [r0, #4]
 8005978:	2204      	movs	r2, #4
 800597a:	f102 0614 	add.w	r6, r2, #20
 800597e:	429e      	cmp	r6, r3
 8005980:	6841      	ldr	r1, [r0, #4]
 8005982:	d93d      	bls.n	8005a00 <_dtoa_r+0x318>
 8005984:	4620      	mov	r0, r4
 8005986:	f000 fec9 	bl	800671c <_Balloc>
 800598a:	9001      	str	r0, [sp, #4]
 800598c:	2800      	cmp	r0, #0
 800598e:	d13b      	bne.n	8005a08 <_dtoa_r+0x320>
 8005990:	4b11      	ldr	r3, [pc, #68]	; (80059d8 <_dtoa_r+0x2f0>)
 8005992:	4602      	mov	r2, r0
 8005994:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005998:	e6c0      	b.n	800571c <_dtoa_r+0x34>
 800599a:	2301      	movs	r3, #1
 800599c:	e7df      	b.n	800595e <_dtoa_r+0x276>
 800599e:	bf00      	nop
 80059a0:	636f4361 	.word	0x636f4361
 80059a4:	3fd287a7 	.word	0x3fd287a7
 80059a8:	8b60c8b3 	.word	0x8b60c8b3
 80059ac:	3fc68a28 	.word	0x3fc68a28
 80059b0:	509f79fb 	.word	0x509f79fb
 80059b4:	3fd34413 	.word	0x3fd34413
 80059b8:	0800be5d 	.word	0x0800be5d
 80059bc:	0800be74 	.word	0x0800be74
 80059c0:	7ff00000 	.word	0x7ff00000
 80059c4:	0800be59 	.word	0x0800be59
 80059c8:	0800be50 	.word	0x0800be50
 80059cc:	0800be2d 	.word	0x0800be2d
 80059d0:	3ff80000 	.word	0x3ff80000
 80059d4:	0800bfc8 	.word	0x0800bfc8
 80059d8:	0800becf 	.word	0x0800becf
 80059dc:	2501      	movs	r5, #1
 80059de:	2300      	movs	r3, #0
 80059e0:	9306      	str	r3, [sp, #24]
 80059e2:	9508      	str	r5, [sp, #32]
 80059e4:	f04f 33ff 	mov.w	r3, #4294967295
 80059e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2312      	movs	r3, #18
 80059f0:	e7b0      	b.n	8005954 <_dtoa_r+0x26c>
 80059f2:	2301      	movs	r3, #1
 80059f4:	9308      	str	r3, [sp, #32]
 80059f6:	e7f5      	b.n	80059e4 <_dtoa_r+0x2fc>
 80059f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059fe:	e7b8      	b.n	8005972 <_dtoa_r+0x28a>
 8005a00:	3101      	adds	r1, #1
 8005a02:	6041      	str	r1, [r0, #4]
 8005a04:	0052      	lsls	r2, r2, #1
 8005a06:	e7b8      	b.n	800597a <_dtoa_r+0x292>
 8005a08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a0a:	9a01      	ldr	r2, [sp, #4]
 8005a0c:	601a      	str	r2, [r3, #0]
 8005a0e:	9b03      	ldr	r3, [sp, #12]
 8005a10:	2b0e      	cmp	r3, #14
 8005a12:	f200 809d 	bhi.w	8005b50 <_dtoa_r+0x468>
 8005a16:	2d00      	cmp	r5, #0
 8005a18:	f000 809a 	beq.w	8005b50 <_dtoa_r+0x468>
 8005a1c:	9b00      	ldr	r3, [sp, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	dd32      	ble.n	8005a88 <_dtoa_r+0x3a0>
 8005a22:	4ab7      	ldr	r2, [pc, #732]	; (8005d00 <_dtoa_r+0x618>)
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a30:	9b00      	ldr	r3, [sp, #0]
 8005a32:	05d8      	lsls	r0, r3, #23
 8005a34:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005a38:	d516      	bpl.n	8005a68 <_dtoa_r+0x380>
 8005a3a:	4bb2      	ldr	r3, [pc, #712]	; (8005d04 <_dtoa_r+0x61c>)
 8005a3c:	ec51 0b19 	vmov	r0, r1, d9
 8005a40:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a44:	f7fa ff82 	bl	800094c <__aeabi_ddiv>
 8005a48:	f007 070f 	and.w	r7, r7, #15
 8005a4c:	4682      	mov	sl, r0
 8005a4e:	468b      	mov	fp, r1
 8005a50:	2503      	movs	r5, #3
 8005a52:	4eac      	ldr	r6, [pc, #688]	; (8005d04 <_dtoa_r+0x61c>)
 8005a54:	b957      	cbnz	r7, 8005a6c <_dtoa_r+0x384>
 8005a56:	4642      	mov	r2, r8
 8005a58:	464b      	mov	r3, r9
 8005a5a:	4650      	mov	r0, sl
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	f7fa ff75 	bl	800094c <__aeabi_ddiv>
 8005a62:	4682      	mov	sl, r0
 8005a64:	468b      	mov	fp, r1
 8005a66:	e028      	b.n	8005aba <_dtoa_r+0x3d2>
 8005a68:	2502      	movs	r5, #2
 8005a6a:	e7f2      	b.n	8005a52 <_dtoa_r+0x36a>
 8005a6c:	07f9      	lsls	r1, r7, #31
 8005a6e:	d508      	bpl.n	8005a82 <_dtoa_r+0x39a>
 8005a70:	4640      	mov	r0, r8
 8005a72:	4649      	mov	r1, r9
 8005a74:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a78:	f7fa fe3e 	bl	80006f8 <__aeabi_dmul>
 8005a7c:	3501      	adds	r5, #1
 8005a7e:	4680      	mov	r8, r0
 8005a80:	4689      	mov	r9, r1
 8005a82:	107f      	asrs	r7, r7, #1
 8005a84:	3608      	adds	r6, #8
 8005a86:	e7e5      	b.n	8005a54 <_dtoa_r+0x36c>
 8005a88:	f000 809b 	beq.w	8005bc2 <_dtoa_r+0x4da>
 8005a8c:	9b00      	ldr	r3, [sp, #0]
 8005a8e:	4f9d      	ldr	r7, [pc, #628]	; (8005d04 <_dtoa_r+0x61c>)
 8005a90:	425e      	negs	r6, r3
 8005a92:	4b9b      	ldr	r3, [pc, #620]	; (8005d00 <_dtoa_r+0x618>)
 8005a94:	f006 020f 	and.w	r2, r6, #15
 8005a98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa0:	ec51 0b19 	vmov	r0, r1, d9
 8005aa4:	f7fa fe28 	bl	80006f8 <__aeabi_dmul>
 8005aa8:	1136      	asrs	r6, r6, #4
 8005aaa:	4682      	mov	sl, r0
 8005aac:	468b      	mov	fp, r1
 8005aae:	2300      	movs	r3, #0
 8005ab0:	2502      	movs	r5, #2
 8005ab2:	2e00      	cmp	r6, #0
 8005ab4:	d17a      	bne.n	8005bac <_dtoa_r+0x4c4>
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1d3      	bne.n	8005a62 <_dtoa_r+0x37a>
 8005aba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f000 8082 	beq.w	8005bc6 <_dtoa_r+0x4de>
 8005ac2:	4b91      	ldr	r3, [pc, #580]	; (8005d08 <_dtoa_r+0x620>)
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4650      	mov	r0, sl
 8005ac8:	4659      	mov	r1, fp
 8005aca:	f7fb f887 	bl	8000bdc <__aeabi_dcmplt>
 8005ace:	2800      	cmp	r0, #0
 8005ad0:	d079      	beq.n	8005bc6 <_dtoa_r+0x4de>
 8005ad2:	9b03      	ldr	r3, [sp, #12]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d076      	beq.n	8005bc6 <_dtoa_r+0x4de>
 8005ad8:	9b02      	ldr	r3, [sp, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	dd36      	ble.n	8005b4c <_dtoa_r+0x464>
 8005ade:	9b00      	ldr	r3, [sp, #0]
 8005ae0:	4650      	mov	r0, sl
 8005ae2:	4659      	mov	r1, fp
 8005ae4:	1e5f      	subs	r7, r3, #1
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	4b88      	ldr	r3, [pc, #544]	; (8005d0c <_dtoa_r+0x624>)
 8005aea:	f7fa fe05 	bl	80006f8 <__aeabi_dmul>
 8005aee:	9e02      	ldr	r6, [sp, #8]
 8005af0:	4682      	mov	sl, r0
 8005af2:	468b      	mov	fp, r1
 8005af4:	3501      	adds	r5, #1
 8005af6:	4628      	mov	r0, r5
 8005af8:	f7fa fd94 	bl	8000624 <__aeabi_i2d>
 8005afc:	4652      	mov	r2, sl
 8005afe:	465b      	mov	r3, fp
 8005b00:	f7fa fdfa 	bl	80006f8 <__aeabi_dmul>
 8005b04:	4b82      	ldr	r3, [pc, #520]	; (8005d10 <_dtoa_r+0x628>)
 8005b06:	2200      	movs	r2, #0
 8005b08:	f7fa fc40 	bl	800038c <__adddf3>
 8005b0c:	46d0      	mov	r8, sl
 8005b0e:	46d9      	mov	r9, fp
 8005b10:	4682      	mov	sl, r0
 8005b12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005b16:	2e00      	cmp	r6, #0
 8005b18:	d158      	bne.n	8005bcc <_dtoa_r+0x4e4>
 8005b1a:	4b7e      	ldr	r3, [pc, #504]	; (8005d14 <_dtoa_r+0x62c>)
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	4640      	mov	r0, r8
 8005b20:	4649      	mov	r1, r9
 8005b22:	f7fa fc31 	bl	8000388 <__aeabi_dsub>
 8005b26:	4652      	mov	r2, sl
 8005b28:	465b      	mov	r3, fp
 8005b2a:	4680      	mov	r8, r0
 8005b2c:	4689      	mov	r9, r1
 8005b2e:	f7fb f873 	bl	8000c18 <__aeabi_dcmpgt>
 8005b32:	2800      	cmp	r0, #0
 8005b34:	f040 8295 	bne.w	8006062 <_dtoa_r+0x97a>
 8005b38:	4652      	mov	r2, sl
 8005b3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b3e:	4640      	mov	r0, r8
 8005b40:	4649      	mov	r1, r9
 8005b42:	f7fb f84b 	bl	8000bdc <__aeabi_dcmplt>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	f040 8289 	bne.w	800605e <_dtoa_r+0x976>
 8005b4c:	ec5b ab19 	vmov	sl, fp, d9
 8005b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f2c0 8148 	blt.w	8005de8 <_dtoa_r+0x700>
 8005b58:	9a00      	ldr	r2, [sp, #0]
 8005b5a:	2a0e      	cmp	r2, #14
 8005b5c:	f300 8144 	bgt.w	8005de8 <_dtoa_r+0x700>
 8005b60:	4b67      	ldr	r3, [pc, #412]	; (8005d00 <_dtoa_r+0x618>)
 8005b62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b66:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f280 80d5 	bge.w	8005d1c <_dtoa_r+0x634>
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	f300 80d1 	bgt.w	8005d1c <_dtoa_r+0x634>
 8005b7a:	f040 826f 	bne.w	800605c <_dtoa_r+0x974>
 8005b7e:	4b65      	ldr	r3, [pc, #404]	; (8005d14 <_dtoa_r+0x62c>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	4640      	mov	r0, r8
 8005b84:	4649      	mov	r1, r9
 8005b86:	f7fa fdb7 	bl	80006f8 <__aeabi_dmul>
 8005b8a:	4652      	mov	r2, sl
 8005b8c:	465b      	mov	r3, fp
 8005b8e:	f7fb f839 	bl	8000c04 <__aeabi_dcmpge>
 8005b92:	9e03      	ldr	r6, [sp, #12]
 8005b94:	4637      	mov	r7, r6
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f040 8245 	bne.w	8006026 <_dtoa_r+0x93e>
 8005b9c:	9d01      	ldr	r5, [sp, #4]
 8005b9e:	2331      	movs	r3, #49	; 0x31
 8005ba0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ba4:	9b00      	ldr	r3, [sp, #0]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	e240      	b.n	800602e <_dtoa_r+0x946>
 8005bac:	07f2      	lsls	r2, r6, #31
 8005bae:	d505      	bpl.n	8005bbc <_dtoa_r+0x4d4>
 8005bb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb4:	f7fa fda0 	bl	80006f8 <__aeabi_dmul>
 8005bb8:	3501      	adds	r5, #1
 8005bba:	2301      	movs	r3, #1
 8005bbc:	1076      	asrs	r6, r6, #1
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	e777      	b.n	8005ab2 <_dtoa_r+0x3ca>
 8005bc2:	2502      	movs	r5, #2
 8005bc4:	e779      	b.n	8005aba <_dtoa_r+0x3d2>
 8005bc6:	9f00      	ldr	r7, [sp, #0]
 8005bc8:	9e03      	ldr	r6, [sp, #12]
 8005bca:	e794      	b.n	8005af6 <_dtoa_r+0x40e>
 8005bcc:	9901      	ldr	r1, [sp, #4]
 8005bce:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <_dtoa_r+0x618>)
 8005bd0:	4431      	add	r1, r6
 8005bd2:	910d      	str	r1, [sp, #52]	; 0x34
 8005bd4:	9908      	ldr	r1, [sp, #32]
 8005bd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005bda:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bde:	2900      	cmp	r1, #0
 8005be0:	d043      	beq.n	8005c6a <_dtoa_r+0x582>
 8005be2:	494d      	ldr	r1, [pc, #308]	; (8005d18 <_dtoa_r+0x630>)
 8005be4:	2000      	movs	r0, #0
 8005be6:	f7fa feb1 	bl	800094c <__aeabi_ddiv>
 8005bea:	4652      	mov	r2, sl
 8005bec:	465b      	mov	r3, fp
 8005bee:	f7fa fbcb 	bl	8000388 <__aeabi_dsub>
 8005bf2:	9d01      	ldr	r5, [sp, #4]
 8005bf4:	4682      	mov	sl, r0
 8005bf6:	468b      	mov	fp, r1
 8005bf8:	4649      	mov	r1, r9
 8005bfa:	4640      	mov	r0, r8
 8005bfc:	f7fb f82c 	bl	8000c58 <__aeabi_d2iz>
 8005c00:	4606      	mov	r6, r0
 8005c02:	f7fa fd0f 	bl	8000624 <__aeabi_i2d>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	4649      	mov	r1, r9
 8005c0e:	f7fa fbbb 	bl	8000388 <__aeabi_dsub>
 8005c12:	3630      	adds	r6, #48	; 0x30
 8005c14:	f805 6b01 	strb.w	r6, [r5], #1
 8005c18:	4652      	mov	r2, sl
 8005c1a:	465b      	mov	r3, fp
 8005c1c:	4680      	mov	r8, r0
 8005c1e:	4689      	mov	r9, r1
 8005c20:	f7fa ffdc 	bl	8000bdc <__aeabi_dcmplt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d163      	bne.n	8005cf0 <_dtoa_r+0x608>
 8005c28:	4642      	mov	r2, r8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	4936      	ldr	r1, [pc, #216]	; (8005d08 <_dtoa_r+0x620>)
 8005c2e:	2000      	movs	r0, #0
 8005c30:	f7fa fbaa 	bl	8000388 <__aeabi_dsub>
 8005c34:	4652      	mov	r2, sl
 8005c36:	465b      	mov	r3, fp
 8005c38:	f7fa ffd0 	bl	8000bdc <__aeabi_dcmplt>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	f040 80b5 	bne.w	8005dac <_dtoa_r+0x6c4>
 8005c42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c44:	429d      	cmp	r5, r3
 8005c46:	d081      	beq.n	8005b4c <_dtoa_r+0x464>
 8005c48:	4b30      	ldr	r3, [pc, #192]	; (8005d0c <_dtoa_r+0x624>)
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4650      	mov	r0, sl
 8005c4e:	4659      	mov	r1, fp
 8005c50:	f7fa fd52 	bl	80006f8 <__aeabi_dmul>
 8005c54:	4b2d      	ldr	r3, [pc, #180]	; (8005d0c <_dtoa_r+0x624>)
 8005c56:	4682      	mov	sl, r0
 8005c58:	468b      	mov	fp, r1
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f7fa fd4a 	bl	80006f8 <__aeabi_dmul>
 8005c64:	4680      	mov	r8, r0
 8005c66:	4689      	mov	r9, r1
 8005c68:	e7c6      	b.n	8005bf8 <_dtoa_r+0x510>
 8005c6a:	4650      	mov	r0, sl
 8005c6c:	4659      	mov	r1, fp
 8005c6e:	f7fa fd43 	bl	80006f8 <__aeabi_dmul>
 8005c72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c74:	9d01      	ldr	r5, [sp, #4]
 8005c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c78:	4682      	mov	sl, r0
 8005c7a:	468b      	mov	fp, r1
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	4640      	mov	r0, r8
 8005c80:	f7fa ffea 	bl	8000c58 <__aeabi_d2iz>
 8005c84:	4606      	mov	r6, r0
 8005c86:	f7fa fccd 	bl	8000624 <__aeabi_i2d>
 8005c8a:	3630      	adds	r6, #48	; 0x30
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4640      	mov	r0, r8
 8005c92:	4649      	mov	r1, r9
 8005c94:	f7fa fb78 	bl	8000388 <__aeabi_dsub>
 8005c98:	f805 6b01 	strb.w	r6, [r5], #1
 8005c9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c9e:	429d      	cmp	r5, r3
 8005ca0:	4680      	mov	r8, r0
 8005ca2:	4689      	mov	r9, r1
 8005ca4:	f04f 0200 	mov.w	r2, #0
 8005ca8:	d124      	bne.n	8005cf4 <_dtoa_r+0x60c>
 8005caa:	4b1b      	ldr	r3, [pc, #108]	; (8005d18 <_dtoa_r+0x630>)
 8005cac:	4650      	mov	r0, sl
 8005cae:	4659      	mov	r1, fp
 8005cb0:	f7fa fb6c 	bl	800038c <__adddf3>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa ffac 	bl	8000c18 <__aeabi_dcmpgt>
 8005cc0:	2800      	cmp	r0, #0
 8005cc2:	d173      	bne.n	8005dac <_dtoa_r+0x6c4>
 8005cc4:	4652      	mov	r2, sl
 8005cc6:	465b      	mov	r3, fp
 8005cc8:	4913      	ldr	r1, [pc, #76]	; (8005d18 <_dtoa_r+0x630>)
 8005cca:	2000      	movs	r0, #0
 8005ccc:	f7fa fb5c 	bl	8000388 <__aeabi_dsub>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	4649      	mov	r1, r9
 8005cd8:	f7fa ff80 	bl	8000bdc <__aeabi_dcmplt>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f43f af35 	beq.w	8005b4c <_dtoa_r+0x464>
 8005ce2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ce4:	1e6b      	subs	r3, r5, #1
 8005ce6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ce8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cec:	2b30      	cmp	r3, #48	; 0x30
 8005cee:	d0f8      	beq.n	8005ce2 <_dtoa_r+0x5fa>
 8005cf0:	9700      	str	r7, [sp, #0]
 8005cf2:	e049      	b.n	8005d88 <_dtoa_r+0x6a0>
 8005cf4:	4b05      	ldr	r3, [pc, #20]	; (8005d0c <_dtoa_r+0x624>)
 8005cf6:	f7fa fcff 	bl	80006f8 <__aeabi_dmul>
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	4689      	mov	r9, r1
 8005cfe:	e7bd      	b.n	8005c7c <_dtoa_r+0x594>
 8005d00:	0800bfc8 	.word	0x0800bfc8
 8005d04:	0800bfa0 	.word	0x0800bfa0
 8005d08:	3ff00000 	.word	0x3ff00000
 8005d0c:	40240000 	.word	0x40240000
 8005d10:	401c0000 	.word	0x401c0000
 8005d14:	40140000 	.word	0x40140000
 8005d18:	3fe00000 	.word	0x3fe00000
 8005d1c:	9d01      	ldr	r5, [sp, #4]
 8005d1e:	4656      	mov	r6, sl
 8005d20:	465f      	mov	r7, fp
 8005d22:	4642      	mov	r2, r8
 8005d24:	464b      	mov	r3, r9
 8005d26:	4630      	mov	r0, r6
 8005d28:	4639      	mov	r1, r7
 8005d2a:	f7fa fe0f 	bl	800094c <__aeabi_ddiv>
 8005d2e:	f7fa ff93 	bl	8000c58 <__aeabi_d2iz>
 8005d32:	4682      	mov	sl, r0
 8005d34:	f7fa fc76 	bl	8000624 <__aeabi_i2d>
 8005d38:	4642      	mov	r2, r8
 8005d3a:	464b      	mov	r3, r9
 8005d3c:	f7fa fcdc 	bl	80006f8 <__aeabi_dmul>
 8005d40:	4602      	mov	r2, r0
 8005d42:	460b      	mov	r3, r1
 8005d44:	4630      	mov	r0, r6
 8005d46:	4639      	mov	r1, r7
 8005d48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005d4c:	f7fa fb1c 	bl	8000388 <__aeabi_dsub>
 8005d50:	f805 6b01 	strb.w	r6, [r5], #1
 8005d54:	9e01      	ldr	r6, [sp, #4]
 8005d56:	9f03      	ldr	r7, [sp, #12]
 8005d58:	1bae      	subs	r6, r5, r6
 8005d5a:	42b7      	cmp	r7, r6
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	460b      	mov	r3, r1
 8005d60:	d135      	bne.n	8005dce <_dtoa_r+0x6e6>
 8005d62:	f7fa fb13 	bl	800038c <__adddf3>
 8005d66:	4642      	mov	r2, r8
 8005d68:	464b      	mov	r3, r9
 8005d6a:	4606      	mov	r6, r0
 8005d6c:	460f      	mov	r7, r1
 8005d6e:	f7fa ff53 	bl	8000c18 <__aeabi_dcmpgt>
 8005d72:	b9d0      	cbnz	r0, 8005daa <_dtoa_r+0x6c2>
 8005d74:	4642      	mov	r2, r8
 8005d76:	464b      	mov	r3, r9
 8005d78:	4630      	mov	r0, r6
 8005d7a:	4639      	mov	r1, r7
 8005d7c:	f7fa ff24 	bl	8000bc8 <__aeabi_dcmpeq>
 8005d80:	b110      	cbz	r0, 8005d88 <_dtoa_r+0x6a0>
 8005d82:	f01a 0f01 	tst.w	sl, #1
 8005d86:	d110      	bne.n	8005daa <_dtoa_r+0x6c2>
 8005d88:	4620      	mov	r0, r4
 8005d8a:	ee18 1a10 	vmov	r1, s16
 8005d8e:	f000 fd05 	bl	800679c <_Bfree>
 8005d92:	2300      	movs	r3, #0
 8005d94:	9800      	ldr	r0, [sp, #0]
 8005d96:	702b      	strb	r3, [r5, #0]
 8005d98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d9a:	3001      	adds	r0, #1
 8005d9c:	6018      	str	r0, [r3, #0]
 8005d9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f43f acf1 	beq.w	8005788 <_dtoa_r+0xa0>
 8005da6:	601d      	str	r5, [r3, #0]
 8005da8:	e4ee      	b.n	8005788 <_dtoa_r+0xa0>
 8005daa:	9f00      	ldr	r7, [sp, #0]
 8005dac:	462b      	mov	r3, r5
 8005dae:	461d      	mov	r5, r3
 8005db0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005db4:	2a39      	cmp	r2, #57	; 0x39
 8005db6:	d106      	bne.n	8005dc6 <_dtoa_r+0x6de>
 8005db8:	9a01      	ldr	r2, [sp, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d1f7      	bne.n	8005dae <_dtoa_r+0x6c6>
 8005dbe:	9901      	ldr	r1, [sp, #4]
 8005dc0:	2230      	movs	r2, #48	; 0x30
 8005dc2:	3701      	adds	r7, #1
 8005dc4:	700a      	strb	r2, [r1, #0]
 8005dc6:	781a      	ldrb	r2, [r3, #0]
 8005dc8:	3201      	adds	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e790      	b.n	8005cf0 <_dtoa_r+0x608>
 8005dce:	4ba6      	ldr	r3, [pc, #664]	; (8006068 <_dtoa_r+0x980>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f7fa fc91 	bl	80006f8 <__aeabi_dmul>
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2300      	movs	r3, #0
 8005dda:	4606      	mov	r6, r0
 8005ddc:	460f      	mov	r7, r1
 8005dde:	f7fa fef3 	bl	8000bc8 <__aeabi_dcmpeq>
 8005de2:	2800      	cmp	r0, #0
 8005de4:	d09d      	beq.n	8005d22 <_dtoa_r+0x63a>
 8005de6:	e7cf      	b.n	8005d88 <_dtoa_r+0x6a0>
 8005de8:	9a08      	ldr	r2, [sp, #32]
 8005dea:	2a00      	cmp	r2, #0
 8005dec:	f000 80d7 	beq.w	8005f9e <_dtoa_r+0x8b6>
 8005df0:	9a06      	ldr	r2, [sp, #24]
 8005df2:	2a01      	cmp	r2, #1
 8005df4:	f300 80ba 	bgt.w	8005f6c <_dtoa_r+0x884>
 8005df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dfa:	2a00      	cmp	r2, #0
 8005dfc:	f000 80b2 	beq.w	8005f64 <_dtoa_r+0x87c>
 8005e00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e04:	9e07      	ldr	r6, [sp, #28]
 8005e06:	9d04      	ldr	r5, [sp, #16]
 8005e08:	9a04      	ldr	r2, [sp, #16]
 8005e0a:	441a      	add	r2, r3
 8005e0c:	9204      	str	r2, [sp, #16]
 8005e0e:	9a05      	ldr	r2, [sp, #20]
 8005e10:	2101      	movs	r1, #1
 8005e12:	441a      	add	r2, r3
 8005e14:	4620      	mov	r0, r4
 8005e16:	9205      	str	r2, [sp, #20]
 8005e18:	f000 fd78 	bl	800690c <__i2b>
 8005e1c:	4607      	mov	r7, r0
 8005e1e:	2d00      	cmp	r5, #0
 8005e20:	dd0c      	ble.n	8005e3c <_dtoa_r+0x754>
 8005e22:	9b05      	ldr	r3, [sp, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd09      	ble.n	8005e3c <_dtoa_r+0x754>
 8005e28:	42ab      	cmp	r3, r5
 8005e2a:	9a04      	ldr	r2, [sp, #16]
 8005e2c:	bfa8      	it	ge
 8005e2e:	462b      	movge	r3, r5
 8005e30:	1ad2      	subs	r2, r2, r3
 8005e32:	9204      	str	r2, [sp, #16]
 8005e34:	9a05      	ldr	r2, [sp, #20]
 8005e36:	1aed      	subs	r5, r5, r3
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	9305      	str	r3, [sp, #20]
 8005e3c:	9b07      	ldr	r3, [sp, #28]
 8005e3e:	b31b      	cbz	r3, 8005e88 <_dtoa_r+0x7a0>
 8005e40:	9b08      	ldr	r3, [sp, #32]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	f000 80af 	beq.w	8005fa6 <_dtoa_r+0x8be>
 8005e48:	2e00      	cmp	r6, #0
 8005e4a:	dd13      	ble.n	8005e74 <_dtoa_r+0x78c>
 8005e4c:	4639      	mov	r1, r7
 8005e4e:	4632      	mov	r2, r6
 8005e50:	4620      	mov	r0, r4
 8005e52:	f000 fe1b 	bl	8006a8c <__pow5mult>
 8005e56:	ee18 2a10 	vmov	r2, s16
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 fd6a 	bl	8006938 <__multiply>
 8005e64:	ee18 1a10 	vmov	r1, s16
 8005e68:	4680      	mov	r8, r0
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 fc96 	bl	800679c <_Bfree>
 8005e70:	ee08 8a10 	vmov	s16, r8
 8005e74:	9b07      	ldr	r3, [sp, #28]
 8005e76:	1b9a      	subs	r2, r3, r6
 8005e78:	d006      	beq.n	8005e88 <_dtoa_r+0x7a0>
 8005e7a:	ee18 1a10 	vmov	r1, s16
 8005e7e:	4620      	mov	r0, r4
 8005e80:	f000 fe04 	bl	8006a8c <__pow5mult>
 8005e84:	ee08 0a10 	vmov	s16, r0
 8005e88:	2101      	movs	r1, #1
 8005e8a:	4620      	mov	r0, r4
 8005e8c:	f000 fd3e 	bl	800690c <__i2b>
 8005e90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	4606      	mov	r6, r0
 8005e96:	f340 8088 	ble.w	8005faa <_dtoa_r+0x8c2>
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	f000 fdf4 	bl	8006a8c <__pow5mult>
 8005ea4:	9b06      	ldr	r3, [sp, #24]
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	4606      	mov	r6, r0
 8005eaa:	f340 8081 	ble.w	8005fb0 <_dtoa_r+0x8c8>
 8005eae:	f04f 0800 	mov.w	r8, #0
 8005eb2:	6933      	ldr	r3, [r6, #16]
 8005eb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005eb8:	6918      	ldr	r0, [r3, #16]
 8005eba:	f000 fcd7 	bl	800686c <__hi0bits>
 8005ebe:	f1c0 0020 	rsb	r0, r0, #32
 8005ec2:	9b05      	ldr	r3, [sp, #20]
 8005ec4:	4418      	add	r0, r3
 8005ec6:	f010 001f 	ands.w	r0, r0, #31
 8005eca:	f000 8092 	beq.w	8005ff2 <_dtoa_r+0x90a>
 8005ece:	f1c0 0320 	rsb	r3, r0, #32
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	f340 808a 	ble.w	8005fec <_dtoa_r+0x904>
 8005ed8:	f1c0 001c 	rsb	r0, r0, #28
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	4403      	add	r3, r0
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	9b05      	ldr	r3, [sp, #20]
 8005ee4:	4403      	add	r3, r0
 8005ee6:	4405      	add	r5, r0
 8005ee8:	9305      	str	r3, [sp, #20]
 8005eea:	9b04      	ldr	r3, [sp, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	dd07      	ble.n	8005f00 <_dtoa_r+0x818>
 8005ef0:	ee18 1a10 	vmov	r1, s16
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f000 fe22 	bl	8006b40 <__lshift>
 8005efc:	ee08 0a10 	vmov	s16, r0
 8005f00:	9b05      	ldr	r3, [sp, #20]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	dd05      	ble.n	8005f12 <_dtoa_r+0x82a>
 8005f06:	4631      	mov	r1, r6
 8005f08:	461a      	mov	r2, r3
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 fe18 	bl	8006b40 <__lshift>
 8005f10:	4606      	mov	r6, r0
 8005f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d06e      	beq.n	8005ff6 <_dtoa_r+0x90e>
 8005f18:	ee18 0a10 	vmov	r0, s16
 8005f1c:	4631      	mov	r1, r6
 8005f1e:	f000 fe7f 	bl	8006c20 <__mcmp>
 8005f22:	2800      	cmp	r0, #0
 8005f24:	da67      	bge.n	8005ff6 <_dtoa_r+0x90e>
 8005f26:	9b00      	ldr	r3, [sp, #0]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	ee18 1a10 	vmov	r1, s16
 8005f2e:	9300      	str	r3, [sp, #0]
 8005f30:	220a      	movs	r2, #10
 8005f32:	2300      	movs	r3, #0
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fc53 	bl	80067e0 <__multadd>
 8005f3a:	9b08      	ldr	r3, [sp, #32]
 8005f3c:	ee08 0a10 	vmov	s16, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 81b1 	beq.w	80062a8 <_dtoa_r+0xbc0>
 8005f46:	2300      	movs	r3, #0
 8005f48:	4639      	mov	r1, r7
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f000 fc47 	bl	80067e0 <__multadd>
 8005f52:	9b02      	ldr	r3, [sp, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	4607      	mov	r7, r0
 8005f58:	f300 808e 	bgt.w	8006078 <_dtoa_r+0x990>
 8005f5c:	9b06      	ldr	r3, [sp, #24]
 8005f5e:	2b02      	cmp	r3, #2
 8005f60:	dc51      	bgt.n	8006006 <_dtoa_r+0x91e>
 8005f62:	e089      	b.n	8006078 <_dtoa_r+0x990>
 8005f64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f6a:	e74b      	b.n	8005e04 <_dtoa_r+0x71c>
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	1e5e      	subs	r6, r3, #1
 8005f70:	9b07      	ldr	r3, [sp, #28]
 8005f72:	42b3      	cmp	r3, r6
 8005f74:	bfbf      	itttt	lt
 8005f76:	9b07      	ldrlt	r3, [sp, #28]
 8005f78:	9607      	strlt	r6, [sp, #28]
 8005f7a:	1af2      	sublt	r2, r6, r3
 8005f7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005f7e:	bfb6      	itet	lt
 8005f80:	189b      	addlt	r3, r3, r2
 8005f82:	1b9e      	subge	r6, r3, r6
 8005f84:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005f86:	9b03      	ldr	r3, [sp, #12]
 8005f88:	bfb8      	it	lt
 8005f8a:	2600      	movlt	r6, #0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bfb7      	itett	lt
 8005f90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005f94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f98:	1a9d      	sublt	r5, r3, r2
 8005f9a:	2300      	movlt	r3, #0
 8005f9c:	e734      	b.n	8005e08 <_dtoa_r+0x720>
 8005f9e:	9e07      	ldr	r6, [sp, #28]
 8005fa0:	9d04      	ldr	r5, [sp, #16]
 8005fa2:	9f08      	ldr	r7, [sp, #32]
 8005fa4:	e73b      	b.n	8005e1e <_dtoa_r+0x736>
 8005fa6:	9a07      	ldr	r2, [sp, #28]
 8005fa8:	e767      	b.n	8005e7a <_dtoa_r+0x792>
 8005faa:	9b06      	ldr	r3, [sp, #24]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	dc18      	bgt.n	8005fe2 <_dtoa_r+0x8fa>
 8005fb0:	f1ba 0f00 	cmp.w	sl, #0
 8005fb4:	d115      	bne.n	8005fe2 <_dtoa_r+0x8fa>
 8005fb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fba:	b993      	cbnz	r3, 8005fe2 <_dtoa_r+0x8fa>
 8005fbc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005fc0:	0d1b      	lsrs	r3, r3, #20
 8005fc2:	051b      	lsls	r3, r3, #20
 8005fc4:	b183      	cbz	r3, 8005fe8 <_dtoa_r+0x900>
 8005fc6:	9b04      	ldr	r3, [sp, #16]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	9b05      	ldr	r3, [sp, #20]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	9305      	str	r3, [sp, #20]
 8005fd2:	f04f 0801 	mov.w	r8, #1
 8005fd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	f47f af6a 	bne.w	8005eb2 <_dtoa_r+0x7ca>
 8005fde:	2001      	movs	r0, #1
 8005fe0:	e76f      	b.n	8005ec2 <_dtoa_r+0x7da>
 8005fe2:	f04f 0800 	mov.w	r8, #0
 8005fe6:	e7f6      	b.n	8005fd6 <_dtoa_r+0x8ee>
 8005fe8:	4698      	mov	r8, r3
 8005fea:	e7f4      	b.n	8005fd6 <_dtoa_r+0x8ee>
 8005fec:	f43f af7d 	beq.w	8005eea <_dtoa_r+0x802>
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	301c      	adds	r0, #28
 8005ff4:	e772      	b.n	8005edc <_dtoa_r+0x7f4>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	dc37      	bgt.n	800606c <_dtoa_r+0x984>
 8005ffc:	9b06      	ldr	r3, [sp, #24]
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	dd34      	ble.n	800606c <_dtoa_r+0x984>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	9302      	str	r3, [sp, #8]
 8006006:	9b02      	ldr	r3, [sp, #8]
 8006008:	b96b      	cbnz	r3, 8006026 <_dtoa_r+0x93e>
 800600a:	4631      	mov	r1, r6
 800600c:	2205      	movs	r2, #5
 800600e:	4620      	mov	r0, r4
 8006010:	f000 fbe6 	bl	80067e0 <__multadd>
 8006014:	4601      	mov	r1, r0
 8006016:	4606      	mov	r6, r0
 8006018:	ee18 0a10 	vmov	r0, s16
 800601c:	f000 fe00 	bl	8006c20 <__mcmp>
 8006020:	2800      	cmp	r0, #0
 8006022:	f73f adbb 	bgt.w	8005b9c <_dtoa_r+0x4b4>
 8006026:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006028:	9d01      	ldr	r5, [sp, #4]
 800602a:	43db      	mvns	r3, r3
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	f04f 0800 	mov.w	r8, #0
 8006032:	4631      	mov	r1, r6
 8006034:	4620      	mov	r0, r4
 8006036:	f000 fbb1 	bl	800679c <_Bfree>
 800603a:	2f00      	cmp	r7, #0
 800603c:	f43f aea4 	beq.w	8005d88 <_dtoa_r+0x6a0>
 8006040:	f1b8 0f00 	cmp.w	r8, #0
 8006044:	d005      	beq.n	8006052 <_dtoa_r+0x96a>
 8006046:	45b8      	cmp	r8, r7
 8006048:	d003      	beq.n	8006052 <_dtoa_r+0x96a>
 800604a:	4641      	mov	r1, r8
 800604c:	4620      	mov	r0, r4
 800604e:	f000 fba5 	bl	800679c <_Bfree>
 8006052:	4639      	mov	r1, r7
 8006054:	4620      	mov	r0, r4
 8006056:	f000 fba1 	bl	800679c <_Bfree>
 800605a:	e695      	b.n	8005d88 <_dtoa_r+0x6a0>
 800605c:	2600      	movs	r6, #0
 800605e:	4637      	mov	r7, r6
 8006060:	e7e1      	b.n	8006026 <_dtoa_r+0x93e>
 8006062:	9700      	str	r7, [sp, #0]
 8006064:	4637      	mov	r7, r6
 8006066:	e599      	b.n	8005b9c <_dtoa_r+0x4b4>
 8006068:	40240000 	.word	0x40240000
 800606c:	9b08      	ldr	r3, [sp, #32]
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 80ca 	beq.w	8006208 <_dtoa_r+0xb20>
 8006074:	9b03      	ldr	r3, [sp, #12]
 8006076:	9302      	str	r3, [sp, #8]
 8006078:	2d00      	cmp	r5, #0
 800607a:	dd05      	ble.n	8006088 <_dtoa_r+0x9a0>
 800607c:	4639      	mov	r1, r7
 800607e:	462a      	mov	r2, r5
 8006080:	4620      	mov	r0, r4
 8006082:	f000 fd5d 	bl	8006b40 <__lshift>
 8006086:	4607      	mov	r7, r0
 8006088:	f1b8 0f00 	cmp.w	r8, #0
 800608c:	d05b      	beq.n	8006146 <_dtoa_r+0xa5e>
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	4620      	mov	r0, r4
 8006092:	f000 fb43 	bl	800671c <_Balloc>
 8006096:	4605      	mov	r5, r0
 8006098:	b928      	cbnz	r0, 80060a6 <_dtoa_r+0x9be>
 800609a:	4b87      	ldr	r3, [pc, #540]	; (80062b8 <_dtoa_r+0xbd0>)
 800609c:	4602      	mov	r2, r0
 800609e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060a2:	f7ff bb3b 	b.w	800571c <_dtoa_r+0x34>
 80060a6:	693a      	ldr	r2, [r7, #16]
 80060a8:	3202      	adds	r2, #2
 80060aa:	0092      	lsls	r2, r2, #2
 80060ac:	f107 010c 	add.w	r1, r7, #12
 80060b0:	300c      	adds	r0, #12
 80060b2:	f7fe fcbf 	bl	8004a34 <memcpy>
 80060b6:	2201      	movs	r2, #1
 80060b8:	4629      	mov	r1, r5
 80060ba:	4620      	mov	r0, r4
 80060bc:	f000 fd40 	bl	8006b40 <__lshift>
 80060c0:	9b01      	ldr	r3, [sp, #4]
 80060c2:	f103 0901 	add.w	r9, r3, #1
 80060c6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80060ca:	4413      	add	r3, r2
 80060cc:	9305      	str	r3, [sp, #20]
 80060ce:	f00a 0301 	and.w	r3, sl, #1
 80060d2:	46b8      	mov	r8, r7
 80060d4:	9304      	str	r3, [sp, #16]
 80060d6:	4607      	mov	r7, r0
 80060d8:	4631      	mov	r1, r6
 80060da:	ee18 0a10 	vmov	r0, s16
 80060de:	f7ff fa77 	bl	80055d0 <quorem>
 80060e2:	4641      	mov	r1, r8
 80060e4:	9002      	str	r0, [sp, #8]
 80060e6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80060ea:	ee18 0a10 	vmov	r0, s16
 80060ee:	f000 fd97 	bl	8006c20 <__mcmp>
 80060f2:	463a      	mov	r2, r7
 80060f4:	9003      	str	r0, [sp, #12]
 80060f6:	4631      	mov	r1, r6
 80060f8:	4620      	mov	r0, r4
 80060fa:	f000 fdad 	bl	8006c58 <__mdiff>
 80060fe:	68c2      	ldr	r2, [r0, #12]
 8006100:	f109 3bff 	add.w	fp, r9, #4294967295
 8006104:	4605      	mov	r5, r0
 8006106:	bb02      	cbnz	r2, 800614a <_dtoa_r+0xa62>
 8006108:	4601      	mov	r1, r0
 800610a:	ee18 0a10 	vmov	r0, s16
 800610e:	f000 fd87 	bl	8006c20 <__mcmp>
 8006112:	4602      	mov	r2, r0
 8006114:	4629      	mov	r1, r5
 8006116:	4620      	mov	r0, r4
 8006118:	9207      	str	r2, [sp, #28]
 800611a:	f000 fb3f 	bl	800679c <_Bfree>
 800611e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006122:	ea43 0102 	orr.w	r1, r3, r2
 8006126:	9b04      	ldr	r3, [sp, #16]
 8006128:	430b      	orrs	r3, r1
 800612a:	464d      	mov	r5, r9
 800612c:	d10f      	bne.n	800614e <_dtoa_r+0xa66>
 800612e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006132:	d02a      	beq.n	800618a <_dtoa_r+0xaa2>
 8006134:	9b03      	ldr	r3, [sp, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	dd02      	ble.n	8006140 <_dtoa_r+0xa58>
 800613a:	9b02      	ldr	r3, [sp, #8]
 800613c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006140:	f88b a000 	strb.w	sl, [fp]
 8006144:	e775      	b.n	8006032 <_dtoa_r+0x94a>
 8006146:	4638      	mov	r0, r7
 8006148:	e7ba      	b.n	80060c0 <_dtoa_r+0x9d8>
 800614a:	2201      	movs	r2, #1
 800614c:	e7e2      	b.n	8006114 <_dtoa_r+0xa2c>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	db04      	blt.n	800615e <_dtoa_r+0xa76>
 8006154:	9906      	ldr	r1, [sp, #24]
 8006156:	430b      	orrs	r3, r1
 8006158:	9904      	ldr	r1, [sp, #16]
 800615a:	430b      	orrs	r3, r1
 800615c:	d122      	bne.n	80061a4 <_dtoa_r+0xabc>
 800615e:	2a00      	cmp	r2, #0
 8006160:	ddee      	ble.n	8006140 <_dtoa_r+0xa58>
 8006162:	ee18 1a10 	vmov	r1, s16
 8006166:	2201      	movs	r2, #1
 8006168:	4620      	mov	r0, r4
 800616a:	f000 fce9 	bl	8006b40 <__lshift>
 800616e:	4631      	mov	r1, r6
 8006170:	ee08 0a10 	vmov	s16, r0
 8006174:	f000 fd54 	bl	8006c20 <__mcmp>
 8006178:	2800      	cmp	r0, #0
 800617a:	dc03      	bgt.n	8006184 <_dtoa_r+0xa9c>
 800617c:	d1e0      	bne.n	8006140 <_dtoa_r+0xa58>
 800617e:	f01a 0f01 	tst.w	sl, #1
 8006182:	d0dd      	beq.n	8006140 <_dtoa_r+0xa58>
 8006184:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006188:	d1d7      	bne.n	800613a <_dtoa_r+0xa52>
 800618a:	2339      	movs	r3, #57	; 0x39
 800618c:	f88b 3000 	strb.w	r3, [fp]
 8006190:	462b      	mov	r3, r5
 8006192:	461d      	mov	r5, r3
 8006194:	3b01      	subs	r3, #1
 8006196:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800619a:	2a39      	cmp	r2, #57	; 0x39
 800619c:	d071      	beq.n	8006282 <_dtoa_r+0xb9a>
 800619e:	3201      	adds	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e746      	b.n	8006032 <_dtoa_r+0x94a>
 80061a4:	2a00      	cmp	r2, #0
 80061a6:	dd07      	ble.n	80061b8 <_dtoa_r+0xad0>
 80061a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80061ac:	d0ed      	beq.n	800618a <_dtoa_r+0xaa2>
 80061ae:	f10a 0301 	add.w	r3, sl, #1
 80061b2:	f88b 3000 	strb.w	r3, [fp]
 80061b6:	e73c      	b.n	8006032 <_dtoa_r+0x94a>
 80061b8:	9b05      	ldr	r3, [sp, #20]
 80061ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 80061be:	4599      	cmp	r9, r3
 80061c0:	d047      	beq.n	8006252 <_dtoa_r+0xb6a>
 80061c2:	ee18 1a10 	vmov	r1, s16
 80061c6:	2300      	movs	r3, #0
 80061c8:	220a      	movs	r2, #10
 80061ca:	4620      	mov	r0, r4
 80061cc:	f000 fb08 	bl	80067e0 <__multadd>
 80061d0:	45b8      	cmp	r8, r7
 80061d2:	ee08 0a10 	vmov	s16, r0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	f04f 020a 	mov.w	r2, #10
 80061de:	4641      	mov	r1, r8
 80061e0:	4620      	mov	r0, r4
 80061e2:	d106      	bne.n	80061f2 <_dtoa_r+0xb0a>
 80061e4:	f000 fafc 	bl	80067e0 <__multadd>
 80061e8:	4680      	mov	r8, r0
 80061ea:	4607      	mov	r7, r0
 80061ec:	f109 0901 	add.w	r9, r9, #1
 80061f0:	e772      	b.n	80060d8 <_dtoa_r+0x9f0>
 80061f2:	f000 faf5 	bl	80067e0 <__multadd>
 80061f6:	4639      	mov	r1, r7
 80061f8:	4680      	mov	r8, r0
 80061fa:	2300      	movs	r3, #0
 80061fc:	220a      	movs	r2, #10
 80061fe:	4620      	mov	r0, r4
 8006200:	f000 faee 	bl	80067e0 <__multadd>
 8006204:	4607      	mov	r7, r0
 8006206:	e7f1      	b.n	80061ec <_dtoa_r+0xb04>
 8006208:	9b03      	ldr	r3, [sp, #12]
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	9d01      	ldr	r5, [sp, #4]
 800620e:	ee18 0a10 	vmov	r0, s16
 8006212:	4631      	mov	r1, r6
 8006214:	f7ff f9dc 	bl	80055d0 <quorem>
 8006218:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800621c:	9b01      	ldr	r3, [sp, #4]
 800621e:	f805 ab01 	strb.w	sl, [r5], #1
 8006222:	1aea      	subs	r2, r5, r3
 8006224:	9b02      	ldr	r3, [sp, #8]
 8006226:	4293      	cmp	r3, r2
 8006228:	dd09      	ble.n	800623e <_dtoa_r+0xb56>
 800622a:	ee18 1a10 	vmov	r1, s16
 800622e:	2300      	movs	r3, #0
 8006230:	220a      	movs	r2, #10
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fad4 	bl	80067e0 <__multadd>
 8006238:	ee08 0a10 	vmov	s16, r0
 800623c:	e7e7      	b.n	800620e <_dtoa_r+0xb26>
 800623e:	9b02      	ldr	r3, [sp, #8]
 8006240:	2b00      	cmp	r3, #0
 8006242:	bfc8      	it	gt
 8006244:	461d      	movgt	r5, r3
 8006246:	9b01      	ldr	r3, [sp, #4]
 8006248:	bfd8      	it	le
 800624a:	2501      	movle	r5, #1
 800624c:	441d      	add	r5, r3
 800624e:	f04f 0800 	mov.w	r8, #0
 8006252:	ee18 1a10 	vmov	r1, s16
 8006256:	2201      	movs	r2, #1
 8006258:	4620      	mov	r0, r4
 800625a:	f000 fc71 	bl	8006b40 <__lshift>
 800625e:	4631      	mov	r1, r6
 8006260:	ee08 0a10 	vmov	s16, r0
 8006264:	f000 fcdc 	bl	8006c20 <__mcmp>
 8006268:	2800      	cmp	r0, #0
 800626a:	dc91      	bgt.n	8006190 <_dtoa_r+0xaa8>
 800626c:	d102      	bne.n	8006274 <_dtoa_r+0xb8c>
 800626e:	f01a 0f01 	tst.w	sl, #1
 8006272:	d18d      	bne.n	8006190 <_dtoa_r+0xaa8>
 8006274:	462b      	mov	r3, r5
 8006276:	461d      	mov	r5, r3
 8006278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800627c:	2a30      	cmp	r2, #48	; 0x30
 800627e:	d0fa      	beq.n	8006276 <_dtoa_r+0xb8e>
 8006280:	e6d7      	b.n	8006032 <_dtoa_r+0x94a>
 8006282:	9a01      	ldr	r2, [sp, #4]
 8006284:	429a      	cmp	r2, r3
 8006286:	d184      	bne.n	8006192 <_dtoa_r+0xaaa>
 8006288:	9b00      	ldr	r3, [sp, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	2331      	movs	r3, #49	; 0x31
 8006290:	7013      	strb	r3, [r2, #0]
 8006292:	e6ce      	b.n	8006032 <_dtoa_r+0x94a>
 8006294:	4b09      	ldr	r3, [pc, #36]	; (80062bc <_dtoa_r+0xbd4>)
 8006296:	f7ff ba95 	b.w	80057c4 <_dtoa_r+0xdc>
 800629a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800629c:	2b00      	cmp	r3, #0
 800629e:	f47f aa6e 	bne.w	800577e <_dtoa_r+0x96>
 80062a2:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <_dtoa_r+0xbd8>)
 80062a4:	f7ff ba8e 	b.w	80057c4 <_dtoa_r+0xdc>
 80062a8:	9b02      	ldr	r3, [sp, #8]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	dcae      	bgt.n	800620c <_dtoa_r+0xb24>
 80062ae:	9b06      	ldr	r3, [sp, #24]
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	f73f aea8 	bgt.w	8006006 <_dtoa_r+0x91e>
 80062b6:	e7a9      	b.n	800620c <_dtoa_r+0xb24>
 80062b8:	0800becf 	.word	0x0800becf
 80062bc:	0800be2c 	.word	0x0800be2c
 80062c0:	0800be50 	.word	0x0800be50

080062c4 <__sflush_r>:
 80062c4:	898a      	ldrh	r2, [r1, #12]
 80062c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062ca:	4605      	mov	r5, r0
 80062cc:	0710      	lsls	r0, r2, #28
 80062ce:	460c      	mov	r4, r1
 80062d0:	d458      	bmi.n	8006384 <__sflush_r+0xc0>
 80062d2:	684b      	ldr	r3, [r1, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dc05      	bgt.n	80062e4 <__sflush_r+0x20>
 80062d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062da:	2b00      	cmp	r3, #0
 80062dc:	dc02      	bgt.n	80062e4 <__sflush_r+0x20>
 80062de:	2000      	movs	r0, #0
 80062e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062e6:	2e00      	cmp	r6, #0
 80062e8:	d0f9      	beq.n	80062de <__sflush_r+0x1a>
 80062ea:	2300      	movs	r3, #0
 80062ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062f0:	682f      	ldr	r7, [r5, #0]
 80062f2:	602b      	str	r3, [r5, #0]
 80062f4:	d032      	beq.n	800635c <__sflush_r+0x98>
 80062f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062f8:	89a3      	ldrh	r3, [r4, #12]
 80062fa:	075a      	lsls	r2, r3, #29
 80062fc:	d505      	bpl.n	800630a <__sflush_r+0x46>
 80062fe:	6863      	ldr	r3, [r4, #4]
 8006300:	1ac0      	subs	r0, r0, r3
 8006302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006304:	b10b      	cbz	r3, 800630a <__sflush_r+0x46>
 8006306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006308:	1ac0      	subs	r0, r0, r3
 800630a:	2300      	movs	r3, #0
 800630c:	4602      	mov	r2, r0
 800630e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006310:	6a21      	ldr	r1, [r4, #32]
 8006312:	4628      	mov	r0, r5
 8006314:	47b0      	blx	r6
 8006316:	1c43      	adds	r3, r0, #1
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	d106      	bne.n	800632a <__sflush_r+0x66>
 800631c:	6829      	ldr	r1, [r5, #0]
 800631e:	291d      	cmp	r1, #29
 8006320:	d82c      	bhi.n	800637c <__sflush_r+0xb8>
 8006322:	4a2a      	ldr	r2, [pc, #168]	; (80063cc <__sflush_r+0x108>)
 8006324:	40ca      	lsrs	r2, r1
 8006326:	07d6      	lsls	r6, r2, #31
 8006328:	d528      	bpl.n	800637c <__sflush_r+0xb8>
 800632a:	2200      	movs	r2, #0
 800632c:	6062      	str	r2, [r4, #4]
 800632e:	04d9      	lsls	r1, r3, #19
 8006330:	6922      	ldr	r2, [r4, #16]
 8006332:	6022      	str	r2, [r4, #0]
 8006334:	d504      	bpl.n	8006340 <__sflush_r+0x7c>
 8006336:	1c42      	adds	r2, r0, #1
 8006338:	d101      	bne.n	800633e <__sflush_r+0x7a>
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	b903      	cbnz	r3, 8006340 <__sflush_r+0x7c>
 800633e:	6560      	str	r0, [r4, #84]	; 0x54
 8006340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006342:	602f      	str	r7, [r5, #0]
 8006344:	2900      	cmp	r1, #0
 8006346:	d0ca      	beq.n	80062de <__sflush_r+0x1a>
 8006348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800634c:	4299      	cmp	r1, r3
 800634e:	d002      	beq.n	8006356 <__sflush_r+0x92>
 8006350:	4628      	mov	r0, r5
 8006352:	f000 fd7d 	bl	8006e50 <_free_r>
 8006356:	2000      	movs	r0, #0
 8006358:	6360      	str	r0, [r4, #52]	; 0x34
 800635a:	e7c1      	b.n	80062e0 <__sflush_r+0x1c>
 800635c:	6a21      	ldr	r1, [r4, #32]
 800635e:	2301      	movs	r3, #1
 8006360:	4628      	mov	r0, r5
 8006362:	47b0      	blx	r6
 8006364:	1c41      	adds	r1, r0, #1
 8006366:	d1c7      	bne.n	80062f8 <__sflush_r+0x34>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0c4      	beq.n	80062f8 <__sflush_r+0x34>
 800636e:	2b1d      	cmp	r3, #29
 8006370:	d001      	beq.n	8006376 <__sflush_r+0xb2>
 8006372:	2b16      	cmp	r3, #22
 8006374:	d101      	bne.n	800637a <__sflush_r+0xb6>
 8006376:	602f      	str	r7, [r5, #0]
 8006378:	e7b1      	b.n	80062de <__sflush_r+0x1a>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006380:	81a3      	strh	r3, [r4, #12]
 8006382:	e7ad      	b.n	80062e0 <__sflush_r+0x1c>
 8006384:	690f      	ldr	r7, [r1, #16]
 8006386:	2f00      	cmp	r7, #0
 8006388:	d0a9      	beq.n	80062de <__sflush_r+0x1a>
 800638a:	0793      	lsls	r3, r2, #30
 800638c:	680e      	ldr	r6, [r1, #0]
 800638e:	bf08      	it	eq
 8006390:	694b      	ldreq	r3, [r1, #20]
 8006392:	600f      	str	r7, [r1, #0]
 8006394:	bf18      	it	ne
 8006396:	2300      	movne	r3, #0
 8006398:	eba6 0807 	sub.w	r8, r6, r7
 800639c:	608b      	str	r3, [r1, #8]
 800639e:	f1b8 0f00 	cmp.w	r8, #0
 80063a2:	dd9c      	ble.n	80062de <__sflush_r+0x1a>
 80063a4:	6a21      	ldr	r1, [r4, #32]
 80063a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80063a8:	4643      	mov	r3, r8
 80063aa:	463a      	mov	r2, r7
 80063ac:	4628      	mov	r0, r5
 80063ae:	47b0      	blx	r6
 80063b0:	2800      	cmp	r0, #0
 80063b2:	dc06      	bgt.n	80063c2 <__sflush_r+0xfe>
 80063b4:	89a3      	ldrh	r3, [r4, #12]
 80063b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063ba:	81a3      	strh	r3, [r4, #12]
 80063bc:	f04f 30ff 	mov.w	r0, #4294967295
 80063c0:	e78e      	b.n	80062e0 <__sflush_r+0x1c>
 80063c2:	4407      	add	r7, r0
 80063c4:	eba8 0800 	sub.w	r8, r8, r0
 80063c8:	e7e9      	b.n	800639e <__sflush_r+0xda>
 80063ca:	bf00      	nop
 80063cc:	20400001 	.word	0x20400001

080063d0 <_fflush_r>:
 80063d0:	b538      	push	{r3, r4, r5, lr}
 80063d2:	690b      	ldr	r3, [r1, #16]
 80063d4:	4605      	mov	r5, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	b913      	cbnz	r3, 80063e0 <_fflush_r+0x10>
 80063da:	2500      	movs	r5, #0
 80063dc:	4628      	mov	r0, r5
 80063de:	bd38      	pop	{r3, r4, r5, pc}
 80063e0:	b118      	cbz	r0, 80063ea <_fflush_r+0x1a>
 80063e2:	6983      	ldr	r3, [r0, #24]
 80063e4:	b90b      	cbnz	r3, 80063ea <_fflush_r+0x1a>
 80063e6:	f000 f887 	bl	80064f8 <__sinit>
 80063ea:	4b14      	ldr	r3, [pc, #80]	; (800643c <_fflush_r+0x6c>)
 80063ec:	429c      	cmp	r4, r3
 80063ee:	d11b      	bne.n	8006428 <_fflush_r+0x58>
 80063f0:	686c      	ldr	r4, [r5, #4]
 80063f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0ef      	beq.n	80063da <_fflush_r+0xa>
 80063fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063fc:	07d0      	lsls	r0, r2, #31
 80063fe:	d404      	bmi.n	800640a <_fflush_r+0x3a>
 8006400:	0599      	lsls	r1, r3, #22
 8006402:	d402      	bmi.n	800640a <_fflush_r+0x3a>
 8006404:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006406:	f000 f91a 	bl	800663e <__retarget_lock_acquire_recursive>
 800640a:	4628      	mov	r0, r5
 800640c:	4621      	mov	r1, r4
 800640e:	f7ff ff59 	bl	80062c4 <__sflush_r>
 8006412:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006414:	07da      	lsls	r2, r3, #31
 8006416:	4605      	mov	r5, r0
 8006418:	d4e0      	bmi.n	80063dc <_fflush_r+0xc>
 800641a:	89a3      	ldrh	r3, [r4, #12]
 800641c:	059b      	lsls	r3, r3, #22
 800641e:	d4dd      	bmi.n	80063dc <_fflush_r+0xc>
 8006420:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006422:	f000 f90d 	bl	8006640 <__retarget_lock_release_recursive>
 8006426:	e7d9      	b.n	80063dc <_fflush_r+0xc>
 8006428:	4b05      	ldr	r3, [pc, #20]	; (8006440 <_fflush_r+0x70>)
 800642a:	429c      	cmp	r4, r3
 800642c:	d101      	bne.n	8006432 <_fflush_r+0x62>
 800642e:	68ac      	ldr	r4, [r5, #8]
 8006430:	e7df      	b.n	80063f2 <_fflush_r+0x22>
 8006432:	4b04      	ldr	r3, [pc, #16]	; (8006444 <_fflush_r+0x74>)
 8006434:	429c      	cmp	r4, r3
 8006436:	bf08      	it	eq
 8006438:	68ec      	ldreq	r4, [r5, #12]
 800643a:	e7da      	b.n	80063f2 <_fflush_r+0x22>
 800643c:	0800bf00 	.word	0x0800bf00
 8006440:	0800bf20 	.word	0x0800bf20
 8006444:	0800bee0 	.word	0x0800bee0

08006448 <std>:
 8006448:	2300      	movs	r3, #0
 800644a:	b510      	push	{r4, lr}
 800644c:	4604      	mov	r4, r0
 800644e:	e9c0 3300 	strd	r3, r3, [r0]
 8006452:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006456:	6083      	str	r3, [r0, #8]
 8006458:	8181      	strh	r1, [r0, #12]
 800645a:	6643      	str	r3, [r0, #100]	; 0x64
 800645c:	81c2      	strh	r2, [r0, #14]
 800645e:	6183      	str	r3, [r0, #24]
 8006460:	4619      	mov	r1, r3
 8006462:	2208      	movs	r2, #8
 8006464:	305c      	adds	r0, #92	; 0x5c
 8006466:	f7fe faf3 	bl	8004a50 <memset>
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <std+0x38>)
 800646c:	6263      	str	r3, [r4, #36]	; 0x24
 800646e:	4b05      	ldr	r3, [pc, #20]	; (8006484 <std+0x3c>)
 8006470:	62a3      	str	r3, [r4, #40]	; 0x28
 8006472:	4b05      	ldr	r3, [pc, #20]	; (8006488 <std+0x40>)
 8006474:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006476:	4b05      	ldr	r3, [pc, #20]	; (800648c <std+0x44>)
 8006478:	6224      	str	r4, [r4, #32]
 800647a:	6323      	str	r3, [r4, #48]	; 0x30
 800647c:	bd10      	pop	{r4, pc}
 800647e:	bf00      	nop
 8006480:	080072e5 	.word	0x080072e5
 8006484:	08007307 	.word	0x08007307
 8006488:	0800733f 	.word	0x0800733f
 800648c:	08007363 	.word	0x08007363

08006490 <_cleanup_r>:
 8006490:	4901      	ldr	r1, [pc, #4]	; (8006498 <_cleanup_r+0x8>)
 8006492:	f000 b8af 	b.w	80065f4 <_fwalk_reent>
 8006496:	bf00      	nop
 8006498:	080063d1 	.word	0x080063d1

0800649c <__sfmoreglue>:
 800649c:	b570      	push	{r4, r5, r6, lr}
 800649e:	2268      	movs	r2, #104	; 0x68
 80064a0:	1e4d      	subs	r5, r1, #1
 80064a2:	4355      	muls	r5, r2
 80064a4:	460e      	mov	r6, r1
 80064a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80064aa:	f000 fd3d 	bl	8006f28 <_malloc_r>
 80064ae:	4604      	mov	r4, r0
 80064b0:	b140      	cbz	r0, 80064c4 <__sfmoreglue+0x28>
 80064b2:	2100      	movs	r1, #0
 80064b4:	e9c0 1600 	strd	r1, r6, [r0]
 80064b8:	300c      	adds	r0, #12
 80064ba:	60a0      	str	r0, [r4, #8]
 80064bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80064c0:	f7fe fac6 	bl	8004a50 <memset>
 80064c4:	4620      	mov	r0, r4
 80064c6:	bd70      	pop	{r4, r5, r6, pc}

080064c8 <__sfp_lock_acquire>:
 80064c8:	4801      	ldr	r0, [pc, #4]	; (80064d0 <__sfp_lock_acquire+0x8>)
 80064ca:	f000 b8b8 	b.w	800663e <__retarget_lock_acquire_recursive>
 80064ce:	bf00      	nop
 80064d0:	20004cb1 	.word	0x20004cb1

080064d4 <__sfp_lock_release>:
 80064d4:	4801      	ldr	r0, [pc, #4]	; (80064dc <__sfp_lock_release+0x8>)
 80064d6:	f000 b8b3 	b.w	8006640 <__retarget_lock_release_recursive>
 80064da:	bf00      	nop
 80064dc:	20004cb1 	.word	0x20004cb1

080064e0 <__sinit_lock_acquire>:
 80064e0:	4801      	ldr	r0, [pc, #4]	; (80064e8 <__sinit_lock_acquire+0x8>)
 80064e2:	f000 b8ac 	b.w	800663e <__retarget_lock_acquire_recursive>
 80064e6:	bf00      	nop
 80064e8:	20004cb2 	.word	0x20004cb2

080064ec <__sinit_lock_release>:
 80064ec:	4801      	ldr	r0, [pc, #4]	; (80064f4 <__sinit_lock_release+0x8>)
 80064ee:	f000 b8a7 	b.w	8006640 <__retarget_lock_release_recursive>
 80064f2:	bf00      	nop
 80064f4:	20004cb2 	.word	0x20004cb2

080064f8 <__sinit>:
 80064f8:	b510      	push	{r4, lr}
 80064fa:	4604      	mov	r4, r0
 80064fc:	f7ff fff0 	bl	80064e0 <__sinit_lock_acquire>
 8006500:	69a3      	ldr	r3, [r4, #24]
 8006502:	b11b      	cbz	r3, 800650c <__sinit+0x14>
 8006504:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006508:	f7ff bff0 	b.w	80064ec <__sinit_lock_release>
 800650c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006510:	6523      	str	r3, [r4, #80]	; 0x50
 8006512:	4b13      	ldr	r3, [pc, #76]	; (8006560 <__sinit+0x68>)
 8006514:	4a13      	ldr	r2, [pc, #76]	; (8006564 <__sinit+0x6c>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	62a2      	str	r2, [r4, #40]	; 0x28
 800651a:	42a3      	cmp	r3, r4
 800651c:	bf04      	itt	eq
 800651e:	2301      	moveq	r3, #1
 8006520:	61a3      	streq	r3, [r4, #24]
 8006522:	4620      	mov	r0, r4
 8006524:	f000 f820 	bl	8006568 <__sfp>
 8006528:	6060      	str	r0, [r4, #4]
 800652a:	4620      	mov	r0, r4
 800652c:	f000 f81c 	bl	8006568 <__sfp>
 8006530:	60a0      	str	r0, [r4, #8]
 8006532:	4620      	mov	r0, r4
 8006534:	f000 f818 	bl	8006568 <__sfp>
 8006538:	2200      	movs	r2, #0
 800653a:	60e0      	str	r0, [r4, #12]
 800653c:	2104      	movs	r1, #4
 800653e:	6860      	ldr	r0, [r4, #4]
 8006540:	f7ff ff82 	bl	8006448 <std>
 8006544:	68a0      	ldr	r0, [r4, #8]
 8006546:	2201      	movs	r2, #1
 8006548:	2109      	movs	r1, #9
 800654a:	f7ff ff7d 	bl	8006448 <std>
 800654e:	68e0      	ldr	r0, [r4, #12]
 8006550:	2202      	movs	r2, #2
 8006552:	2112      	movs	r1, #18
 8006554:	f7ff ff78 	bl	8006448 <std>
 8006558:	2301      	movs	r3, #1
 800655a:	61a3      	str	r3, [r4, #24]
 800655c:	e7d2      	b.n	8006504 <__sinit+0xc>
 800655e:	bf00      	nop
 8006560:	0800be18 	.word	0x0800be18
 8006564:	08006491 	.word	0x08006491

08006568 <__sfp>:
 8006568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800656a:	4607      	mov	r7, r0
 800656c:	f7ff ffac 	bl	80064c8 <__sfp_lock_acquire>
 8006570:	4b1e      	ldr	r3, [pc, #120]	; (80065ec <__sfp+0x84>)
 8006572:	681e      	ldr	r6, [r3, #0]
 8006574:	69b3      	ldr	r3, [r6, #24]
 8006576:	b913      	cbnz	r3, 800657e <__sfp+0x16>
 8006578:	4630      	mov	r0, r6
 800657a:	f7ff ffbd 	bl	80064f8 <__sinit>
 800657e:	3648      	adds	r6, #72	; 0x48
 8006580:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006584:	3b01      	subs	r3, #1
 8006586:	d503      	bpl.n	8006590 <__sfp+0x28>
 8006588:	6833      	ldr	r3, [r6, #0]
 800658a:	b30b      	cbz	r3, 80065d0 <__sfp+0x68>
 800658c:	6836      	ldr	r6, [r6, #0]
 800658e:	e7f7      	b.n	8006580 <__sfp+0x18>
 8006590:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006594:	b9d5      	cbnz	r5, 80065cc <__sfp+0x64>
 8006596:	4b16      	ldr	r3, [pc, #88]	; (80065f0 <__sfp+0x88>)
 8006598:	60e3      	str	r3, [r4, #12]
 800659a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800659e:	6665      	str	r5, [r4, #100]	; 0x64
 80065a0:	f000 f84c 	bl	800663c <__retarget_lock_init_recursive>
 80065a4:	f7ff ff96 	bl	80064d4 <__sfp_lock_release>
 80065a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80065ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80065b0:	6025      	str	r5, [r4, #0]
 80065b2:	61a5      	str	r5, [r4, #24]
 80065b4:	2208      	movs	r2, #8
 80065b6:	4629      	mov	r1, r5
 80065b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80065bc:	f7fe fa48 	bl	8004a50 <memset>
 80065c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80065c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80065c8:	4620      	mov	r0, r4
 80065ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065cc:	3468      	adds	r4, #104	; 0x68
 80065ce:	e7d9      	b.n	8006584 <__sfp+0x1c>
 80065d0:	2104      	movs	r1, #4
 80065d2:	4638      	mov	r0, r7
 80065d4:	f7ff ff62 	bl	800649c <__sfmoreglue>
 80065d8:	4604      	mov	r4, r0
 80065da:	6030      	str	r0, [r6, #0]
 80065dc:	2800      	cmp	r0, #0
 80065de:	d1d5      	bne.n	800658c <__sfp+0x24>
 80065e0:	f7ff ff78 	bl	80064d4 <__sfp_lock_release>
 80065e4:	230c      	movs	r3, #12
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	e7ee      	b.n	80065c8 <__sfp+0x60>
 80065ea:	bf00      	nop
 80065ec:	0800be18 	.word	0x0800be18
 80065f0:	ffff0001 	.word	0xffff0001

080065f4 <_fwalk_reent>:
 80065f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065f8:	4606      	mov	r6, r0
 80065fa:	4688      	mov	r8, r1
 80065fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006600:	2700      	movs	r7, #0
 8006602:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006606:	f1b9 0901 	subs.w	r9, r9, #1
 800660a:	d505      	bpl.n	8006618 <_fwalk_reent+0x24>
 800660c:	6824      	ldr	r4, [r4, #0]
 800660e:	2c00      	cmp	r4, #0
 8006610:	d1f7      	bne.n	8006602 <_fwalk_reent+0xe>
 8006612:	4638      	mov	r0, r7
 8006614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006618:	89ab      	ldrh	r3, [r5, #12]
 800661a:	2b01      	cmp	r3, #1
 800661c:	d907      	bls.n	800662e <_fwalk_reent+0x3a>
 800661e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006622:	3301      	adds	r3, #1
 8006624:	d003      	beq.n	800662e <_fwalk_reent+0x3a>
 8006626:	4629      	mov	r1, r5
 8006628:	4630      	mov	r0, r6
 800662a:	47c0      	blx	r8
 800662c:	4307      	orrs	r7, r0
 800662e:	3568      	adds	r5, #104	; 0x68
 8006630:	e7e9      	b.n	8006606 <_fwalk_reent+0x12>
	...

08006634 <_localeconv_r>:
 8006634:	4800      	ldr	r0, [pc, #0]	; (8006638 <_localeconv_r+0x4>)
 8006636:	4770      	bx	lr
 8006638:	20000168 	.word	0x20000168

0800663c <__retarget_lock_init_recursive>:
 800663c:	4770      	bx	lr

0800663e <__retarget_lock_acquire_recursive>:
 800663e:	4770      	bx	lr

08006640 <__retarget_lock_release_recursive>:
 8006640:	4770      	bx	lr

08006642 <__swhatbuf_r>:
 8006642:	b570      	push	{r4, r5, r6, lr}
 8006644:	460e      	mov	r6, r1
 8006646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800664a:	2900      	cmp	r1, #0
 800664c:	b096      	sub	sp, #88	; 0x58
 800664e:	4614      	mov	r4, r2
 8006650:	461d      	mov	r5, r3
 8006652:	da08      	bge.n	8006666 <__swhatbuf_r+0x24>
 8006654:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	602a      	str	r2, [r5, #0]
 800665c:	061a      	lsls	r2, r3, #24
 800665e:	d410      	bmi.n	8006682 <__swhatbuf_r+0x40>
 8006660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006664:	e00e      	b.n	8006684 <__swhatbuf_r+0x42>
 8006666:	466a      	mov	r2, sp
 8006668:	f000 fed2 	bl	8007410 <_fstat_r>
 800666c:	2800      	cmp	r0, #0
 800666e:	dbf1      	blt.n	8006654 <__swhatbuf_r+0x12>
 8006670:	9a01      	ldr	r2, [sp, #4]
 8006672:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006676:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800667a:	425a      	negs	r2, r3
 800667c:	415a      	adcs	r2, r3
 800667e:	602a      	str	r2, [r5, #0]
 8006680:	e7ee      	b.n	8006660 <__swhatbuf_r+0x1e>
 8006682:	2340      	movs	r3, #64	; 0x40
 8006684:	2000      	movs	r0, #0
 8006686:	6023      	str	r3, [r4, #0]
 8006688:	b016      	add	sp, #88	; 0x58
 800668a:	bd70      	pop	{r4, r5, r6, pc}

0800668c <__smakebuf_r>:
 800668c:	898b      	ldrh	r3, [r1, #12]
 800668e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006690:	079d      	lsls	r5, r3, #30
 8006692:	4606      	mov	r6, r0
 8006694:	460c      	mov	r4, r1
 8006696:	d507      	bpl.n	80066a8 <__smakebuf_r+0x1c>
 8006698:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	2301      	movs	r3, #1
 80066a2:	6163      	str	r3, [r4, #20]
 80066a4:	b002      	add	sp, #8
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	ab01      	add	r3, sp, #4
 80066aa:	466a      	mov	r2, sp
 80066ac:	f7ff ffc9 	bl	8006642 <__swhatbuf_r>
 80066b0:	9900      	ldr	r1, [sp, #0]
 80066b2:	4605      	mov	r5, r0
 80066b4:	4630      	mov	r0, r6
 80066b6:	f000 fc37 	bl	8006f28 <_malloc_r>
 80066ba:	b948      	cbnz	r0, 80066d0 <__smakebuf_r+0x44>
 80066bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066c0:	059a      	lsls	r2, r3, #22
 80066c2:	d4ef      	bmi.n	80066a4 <__smakebuf_r+0x18>
 80066c4:	f023 0303 	bic.w	r3, r3, #3
 80066c8:	f043 0302 	orr.w	r3, r3, #2
 80066cc:	81a3      	strh	r3, [r4, #12]
 80066ce:	e7e3      	b.n	8006698 <__smakebuf_r+0xc>
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <__smakebuf_r+0x7c>)
 80066d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80066d4:	89a3      	ldrh	r3, [r4, #12]
 80066d6:	6020      	str	r0, [r4, #0]
 80066d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066dc:	81a3      	strh	r3, [r4, #12]
 80066de:	9b00      	ldr	r3, [sp, #0]
 80066e0:	6163      	str	r3, [r4, #20]
 80066e2:	9b01      	ldr	r3, [sp, #4]
 80066e4:	6120      	str	r0, [r4, #16]
 80066e6:	b15b      	cbz	r3, 8006700 <__smakebuf_r+0x74>
 80066e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ec:	4630      	mov	r0, r6
 80066ee:	f000 fea1 	bl	8007434 <_isatty_r>
 80066f2:	b128      	cbz	r0, 8006700 <__smakebuf_r+0x74>
 80066f4:	89a3      	ldrh	r3, [r4, #12]
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	f043 0301 	orr.w	r3, r3, #1
 80066fe:	81a3      	strh	r3, [r4, #12]
 8006700:	89a0      	ldrh	r0, [r4, #12]
 8006702:	4305      	orrs	r5, r0
 8006704:	81a5      	strh	r5, [r4, #12]
 8006706:	e7cd      	b.n	80066a4 <__smakebuf_r+0x18>
 8006708:	08006491 	.word	0x08006491

0800670c <malloc>:
 800670c:	4b02      	ldr	r3, [pc, #8]	; (8006718 <malloc+0xc>)
 800670e:	4601      	mov	r1, r0
 8006710:	6818      	ldr	r0, [r3, #0]
 8006712:	f000 bc09 	b.w	8006f28 <_malloc_r>
 8006716:	bf00      	nop
 8006718:	20000014 	.word	0x20000014

0800671c <_Balloc>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006720:	4604      	mov	r4, r0
 8006722:	460d      	mov	r5, r1
 8006724:	b976      	cbnz	r6, 8006744 <_Balloc+0x28>
 8006726:	2010      	movs	r0, #16
 8006728:	f7ff fff0 	bl	800670c <malloc>
 800672c:	4602      	mov	r2, r0
 800672e:	6260      	str	r0, [r4, #36]	; 0x24
 8006730:	b920      	cbnz	r0, 800673c <_Balloc+0x20>
 8006732:	4b18      	ldr	r3, [pc, #96]	; (8006794 <_Balloc+0x78>)
 8006734:	4818      	ldr	r0, [pc, #96]	; (8006798 <_Balloc+0x7c>)
 8006736:	2166      	movs	r1, #102	; 0x66
 8006738:	f000 fe2a 	bl	8007390 <__assert_func>
 800673c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006740:	6006      	str	r6, [r0, #0]
 8006742:	60c6      	str	r6, [r0, #12]
 8006744:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006746:	68f3      	ldr	r3, [r6, #12]
 8006748:	b183      	cbz	r3, 800676c <_Balloc+0x50>
 800674a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006752:	b9b8      	cbnz	r0, 8006784 <_Balloc+0x68>
 8006754:	2101      	movs	r1, #1
 8006756:	fa01 f605 	lsl.w	r6, r1, r5
 800675a:	1d72      	adds	r2, r6, #5
 800675c:	0092      	lsls	r2, r2, #2
 800675e:	4620      	mov	r0, r4
 8006760:	f000 fb60 	bl	8006e24 <_calloc_r>
 8006764:	b160      	cbz	r0, 8006780 <_Balloc+0x64>
 8006766:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800676a:	e00e      	b.n	800678a <_Balloc+0x6e>
 800676c:	2221      	movs	r2, #33	; 0x21
 800676e:	2104      	movs	r1, #4
 8006770:	4620      	mov	r0, r4
 8006772:	f000 fb57 	bl	8006e24 <_calloc_r>
 8006776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006778:	60f0      	str	r0, [r6, #12]
 800677a:	68db      	ldr	r3, [r3, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e4      	bne.n	800674a <_Balloc+0x2e>
 8006780:	2000      	movs	r0, #0
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	6802      	ldr	r2, [r0, #0]
 8006786:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800678a:	2300      	movs	r3, #0
 800678c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006790:	e7f7      	b.n	8006782 <_Balloc+0x66>
 8006792:	bf00      	nop
 8006794:	0800be5d 	.word	0x0800be5d
 8006798:	0800bf40 	.word	0x0800bf40

0800679c <_Bfree>:
 800679c:	b570      	push	{r4, r5, r6, lr}
 800679e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80067a0:	4605      	mov	r5, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	b976      	cbnz	r6, 80067c4 <_Bfree+0x28>
 80067a6:	2010      	movs	r0, #16
 80067a8:	f7ff ffb0 	bl	800670c <malloc>
 80067ac:	4602      	mov	r2, r0
 80067ae:	6268      	str	r0, [r5, #36]	; 0x24
 80067b0:	b920      	cbnz	r0, 80067bc <_Bfree+0x20>
 80067b2:	4b09      	ldr	r3, [pc, #36]	; (80067d8 <_Bfree+0x3c>)
 80067b4:	4809      	ldr	r0, [pc, #36]	; (80067dc <_Bfree+0x40>)
 80067b6:	218a      	movs	r1, #138	; 0x8a
 80067b8:	f000 fdea 	bl	8007390 <__assert_func>
 80067bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067c0:	6006      	str	r6, [r0, #0]
 80067c2:	60c6      	str	r6, [r0, #12]
 80067c4:	b13c      	cbz	r4, 80067d6 <_Bfree+0x3a>
 80067c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067c8:	6862      	ldr	r2, [r4, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067d0:	6021      	str	r1, [r4, #0]
 80067d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067d6:	bd70      	pop	{r4, r5, r6, pc}
 80067d8:	0800be5d 	.word	0x0800be5d
 80067dc:	0800bf40 	.word	0x0800bf40

080067e0 <__multadd>:
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	690d      	ldr	r5, [r1, #16]
 80067e6:	4607      	mov	r7, r0
 80067e8:	460c      	mov	r4, r1
 80067ea:	461e      	mov	r6, r3
 80067ec:	f101 0c14 	add.w	ip, r1, #20
 80067f0:	2000      	movs	r0, #0
 80067f2:	f8dc 3000 	ldr.w	r3, [ip]
 80067f6:	b299      	uxth	r1, r3
 80067f8:	fb02 6101 	mla	r1, r2, r1, r6
 80067fc:	0c1e      	lsrs	r6, r3, #16
 80067fe:	0c0b      	lsrs	r3, r1, #16
 8006800:	fb02 3306 	mla	r3, r2, r6, r3
 8006804:	b289      	uxth	r1, r1
 8006806:	3001      	adds	r0, #1
 8006808:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800680c:	4285      	cmp	r5, r0
 800680e:	f84c 1b04 	str.w	r1, [ip], #4
 8006812:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006816:	dcec      	bgt.n	80067f2 <__multadd+0x12>
 8006818:	b30e      	cbz	r6, 800685e <__multadd+0x7e>
 800681a:	68a3      	ldr	r3, [r4, #8]
 800681c:	42ab      	cmp	r3, r5
 800681e:	dc19      	bgt.n	8006854 <__multadd+0x74>
 8006820:	6861      	ldr	r1, [r4, #4]
 8006822:	4638      	mov	r0, r7
 8006824:	3101      	adds	r1, #1
 8006826:	f7ff ff79 	bl	800671c <_Balloc>
 800682a:	4680      	mov	r8, r0
 800682c:	b928      	cbnz	r0, 800683a <__multadd+0x5a>
 800682e:	4602      	mov	r2, r0
 8006830:	4b0c      	ldr	r3, [pc, #48]	; (8006864 <__multadd+0x84>)
 8006832:	480d      	ldr	r0, [pc, #52]	; (8006868 <__multadd+0x88>)
 8006834:	21b5      	movs	r1, #181	; 0xb5
 8006836:	f000 fdab 	bl	8007390 <__assert_func>
 800683a:	6922      	ldr	r2, [r4, #16]
 800683c:	3202      	adds	r2, #2
 800683e:	f104 010c 	add.w	r1, r4, #12
 8006842:	0092      	lsls	r2, r2, #2
 8006844:	300c      	adds	r0, #12
 8006846:	f7fe f8f5 	bl	8004a34 <memcpy>
 800684a:	4621      	mov	r1, r4
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff ffa5 	bl	800679c <_Bfree>
 8006852:	4644      	mov	r4, r8
 8006854:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006858:	3501      	adds	r5, #1
 800685a:	615e      	str	r6, [r3, #20]
 800685c:	6125      	str	r5, [r4, #16]
 800685e:	4620      	mov	r0, r4
 8006860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006864:	0800becf 	.word	0x0800becf
 8006868:	0800bf40 	.word	0x0800bf40

0800686c <__hi0bits>:
 800686c:	0c03      	lsrs	r3, r0, #16
 800686e:	041b      	lsls	r3, r3, #16
 8006870:	b9d3      	cbnz	r3, 80068a8 <__hi0bits+0x3c>
 8006872:	0400      	lsls	r0, r0, #16
 8006874:	2310      	movs	r3, #16
 8006876:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800687a:	bf04      	itt	eq
 800687c:	0200      	lsleq	r0, r0, #8
 800687e:	3308      	addeq	r3, #8
 8006880:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006884:	bf04      	itt	eq
 8006886:	0100      	lsleq	r0, r0, #4
 8006888:	3304      	addeq	r3, #4
 800688a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800688e:	bf04      	itt	eq
 8006890:	0080      	lsleq	r0, r0, #2
 8006892:	3302      	addeq	r3, #2
 8006894:	2800      	cmp	r0, #0
 8006896:	db05      	blt.n	80068a4 <__hi0bits+0x38>
 8006898:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800689c:	f103 0301 	add.w	r3, r3, #1
 80068a0:	bf08      	it	eq
 80068a2:	2320      	moveq	r3, #32
 80068a4:	4618      	mov	r0, r3
 80068a6:	4770      	bx	lr
 80068a8:	2300      	movs	r3, #0
 80068aa:	e7e4      	b.n	8006876 <__hi0bits+0xa>

080068ac <__lo0bits>:
 80068ac:	6803      	ldr	r3, [r0, #0]
 80068ae:	f013 0207 	ands.w	r2, r3, #7
 80068b2:	4601      	mov	r1, r0
 80068b4:	d00b      	beq.n	80068ce <__lo0bits+0x22>
 80068b6:	07da      	lsls	r2, r3, #31
 80068b8:	d423      	bmi.n	8006902 <__lo0bits+0x56>
 80068ba:	0798      	lsls	r0, r3, #30
 80068bc:	bf49      	itett	mi
 80068be:	085b      	lsrmi	r3, r3, #1
 80068c0:	089b      	lsrpl	r3, r3, #2
 80068c2:	2001      	movmi	r0, #1
 80068c4:	600b      	strmi	r3, [r1, #0]
 80068c6:	bf5c      	itt	pl
 80068c8:	600b      	strpl	r3, [r1, #0]
 80068ca:	2002      	movpl	r0, #2
 80068cc:	4770      	bx	lr
 80068ce:	b298      	uxth	r0, r3
 80068d0:	b9a8      	cbnz	r0, 80068fe <__lo0bits+0x52>
 80068d2:	0c1b      	lsrs	r3, r3, #16
 80068d4:	2010      	movs	r0, #16
 80068d6:	b2da      	uxtb	r2, r3
 80068d8:	b90a      	cbnz	r2, 80068de <__lo0bits+0x32>
 80068da:	3008      	adds	r0, #8
 80068dc:	0a1b      	lsrs	r3, r3, #8
 80068de:	071a      	lsls	r2, r3, #28
 80068e0:	bf04      	itt	eq
 80068e2:	091b      	lsreq	r3, r3, #4
 80068e4:	3004      	addeq	r0, #4
 80068e6:	079a      	lsls	r2, r3, #30
 80068e8:	bf04      	itt	eq
 80068ea:	089b      	lsreq	r3, r3, #2
 80068ec:	3002      	addeq	r0, #2
 80068ee:	07da      	lsls	r2, r3, #31
 80068f0:	d403      	bmi.n	80068fa <__lo0bits+0x4e>
 80068f2:	085b      	lsrs	r3, r3, #1
 80068f4:	f100 0001 	add.w	r0, r0, #1
 80068f8:	d005      	beq.n	8006906 <__lo0bits+0x5a>
 80068fa:	600b      	str	r3, [r1, #0]
 80068fc:	4770      	bx	lr
 80068fe:	4610      	mov	r0, r2
 8006900:	e7e9      	b.n	80068d6 <__lo0bits+0x2a>
 8006902:	2000      	movs	r0, #0
 8006904:	4770      	bx	lr
 8006906:	2020      	movs	r0, #32
 8006908:	4770      	bx	lr
	...

0800690c <__i2b>:
 800690c:	b510      	push	{r4, lr}
 800690e:	460c      	mov	r4, r1
 8006910:	2101      	movs	r1, #1
 8006912:	f7ff ff03 	bl	800671c <_Balloc>
 8006916:	4602      	mov	r2, r0
 8006918:	b928      	cbnz	r0, 8006926 <__i2b+0x1a>
 800691a:	4b05      	ldr	r3, [pc, #20]	; (8006930 <__i2b+0x24>)
 800691c:	4805      	ldr	r0, [pc, #20]	; (8006934 <__i2b+0x28>)
 800691e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006922:	f000 fd35 	bl	8007390 <__assert_func>
 8006926:	2301      	movs	r3, #1
 8006928:	6144      	str	r4, [r0, #20]
 800692a:	6103      	str	r3, [r0, #16]
 800692c:	bd10      	pop	{r4, pc}
 800692e:	bf00      	nop
 8006930:	0800becf 	.word	0x0800becf
 8006934:	0800bf40 	.word	0x0800bf40

08006938 <__multiply>:
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	4691      	mov	r9, r2
 800693e:	690a      	ldr	r2, [r1, #16]
 8006940:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006944:	429a      	cmp	r2, r3
 8006946:	bfb8      	it	lt
 8006948:	460b      	movlt	r3, r1
 800694a:	460c      	mov	r4, r1
 800694c:	bfbc      	itt	lt
 800694e:	464c      	movlt	r4, r9
 8006950:	4699      	movlt	r9, r3
 8006952:	6927      	ldr	r7, [r4, #16]
 8006954:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006958:	68a3      	ldr	r3, [r4, #8]
 800695a:	6861      	ldr	r1, [r4, #4]
 800695c:	eb07 060a 	add.w	r6, r7, sl
 8006960:	42b3      	cmp	r3, r6
 8006962:	b085      	sub	sp, #20
 8006964:	bfb8      	it	lt
 8006966:	3101      	addlt	r1, #1
 8006968:	f7ff fed8 	bl	800671c <_Balloc>
 800696c:	b930      	cbnz	r0, 800697c <__multiply+0x44>
 800696e:	4602      	mov	r2, r0
 8006970:	4b44      	ldr	r3, [pc, #272]	; (8006a84 <__multiply+0x14c>)
 8006972:	4845      	ldr	r0, [pc, #276]	; (8006a88 <__multiply+0x150>)
 8006974:	f240 115d 	movw	r1, #349	; 0x15d
 8006978:	f000 fd0a 	bl	8007390 <__assert_func>
 800697c:	f100 0514 	add.w	r5, r0, #20
 8006980:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006984:	462b      	mov	r3, r5
 8006986:	2200      	movs	r2, #0
 8006988:	4543      	cmp	r3, r8
 800698a:	d321      	bcc.n	80069d0 <__multiply+0x98>
 800698c:	f104 0314 	add.w	r3, r4, #20
 8006990:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006994:	f109 0314 	add.w	r3, r9, #20
 8006998:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800699c:	9202      	str	r2, [sp, #8]
 800699e:	1b3a      	subs	r2, r7, r4
 80069a0:	3a15      	subs	r2, #21
 80069a2:	f022 0203 	bic.w	r2, r2, #3
 80069a6:	3204      	adds	r2, #4
 80069a8:	f104 0115 	add.w	r1, r4, #21
 80069ac:	428f      	cmp	r7, r1
 80069ae:	bf38      	it	cc
 80069b0:	2204      	movcc	r2, #4
 80069b2:	9201      	str	r2, [sp, #4]
 80069b4:	9a02      	ldr	r2, [sp, #8]
 80069b6:	9303      	str	r3, [sp, #12]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d80c      	bhi.n	80069d6 <__multiply+0x9e>
 80069bc:	2e00      	cmp	r6, #0
 80069be:	dd03      	ble.n	80069c8 <__multiply+0x90>
 80069c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d05a      	beq.n	8006a7e <__multiply+0x146>
 80069c8:	6106      	str	r6, [r0, #16]
 80069ca:	b005      	add	sp, #20
 80069cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d0:	f843 2b04 	str.w	r2, [r3], #4
 80069d4:	e7d8      	b.n	8006988 <__multiply+0x50>
 80069d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80069da:	f1ba 0f00 	cmp.w	sl, #0
 80069de:	d024      	beq.n	8006a2a <__multiply+0xf2>
 80069e0:	f104 0e14 	add.w	lr, r4, #20
 80069e4:	46a9      	mov	r9, r5
 80069e6:	f04f 0c00 	mov.w	ip, #0
 80069ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80069ee:	f8d9 1000 	ldr.w	r1, [r9]
 80069f2:	fa1f fb82 	uxth.w	fp, r2
 80069f6:	b289      	uxth	r1, r1
 80069f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80069fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006a00:	f8d9 2000 	ldr.w	r2, [r9]
 8006a04:	4461      	add	r1, ip
 8006a06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006a0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a12:	b289      	uxth	r1, r1
 8006a14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006a18:	4577      	cmp	r7, lr
 8006a1a:	f849 1b04 	str.w	r1, [r9], #4
 8006a1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006a22:	d8e2      	bhi.n	80069ea <__multiply+0xb2>
 8006a24:	9a01      	ldr	r2, [sp, #4]
 8006a26:	f845 c002 	str.w	ip, [r5, r2]
 8006a2a:	9a03      	ldr	r2, [sp, #12]
 8006a2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006a30:	3304      	adds	r3, #4
 8006a32:	f1b9 0f00 	cmp.w	r9, #0
 8006a36:	d020      	beq.n	8006a7a <__multiply+0x142>
 8006a38:	6829      	ldr	r1, [r5, #0]
 8006a3a:	f104 0c14 	add.w	ip, r4, #20
 8006a3e:	46ae      	mov	lr, r5
 8006a40:	f04f 0a00 	mov.w	sl, #0
 8006a44:	f8bc b000 	ldrh.w	fp, [ip]
 8006a48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006a4c:	fb09 220b 	mla	r2, r9, fp, r2
 8006a50:	4492      	add	sl, r2
 8006a52:	b289      	uxth	r1, r1
 8006a54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006a58:	f84e 1b04 	str.w	r1, [lr], #4
 8006a5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006a60:	f8be 1000 	ldrh.w	r1, [lr]
 8006a64:	0c12      	lsrs	r2, r2, #16
 8006a66:	fb09 1102 	mla	r1, r9, r2, r1
 8006a6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006a6e:	4567      	cmp	r7, ip
 8006a70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006a74:	d8e6      	bhi.n	8006a44 <__multiply+0x10c>
 8006a76:	9a01      	ldr	r2, [sp, #4]
 8006a78:	50a9      	str	r1, [r5, r2]
 8006a7a:	3504      	adds	r5, #4
 8006a7c:	e79a      	b.n	80069b4 <__multiply+0x7c>
 8006a7e:	3e01      	subs	r6, #1
 8006a80:	e79c      	b.n	80069bc <__multiply+0x84>
 8006a82:	bf00      	nop
 8006a84:	0800becf 	.word	0x0800becf
 8006a88:	0800bf40 	.word	0x0800bf40

08006a8c <__pow5mult>:
 8006a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a90:	4615      	mov	r5, r2
 8006a92:	f012 0203 	ands.w	r2, r2, #3
 8006a96:	4606      	mov	r6, r0
 8006a98:	460f      	mov	r7, r1
 8006a9a:	d007      	beq.n	8006aac <__pow5mult+0x20>
 8006a9c:	4c25      	ldr	r4, [pc, #148]	; (8006b34 <__pow5mult+0xa8>)
 8006a9e:	3a01      	subs	r2, #1
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006aa6:	f7ff fe9b 	bl	80067e0 <__multadd>
 8006aaa:	4607      	mov	r7, r0
 8006aac:	10ad      	asrs	r5, r5, #2
 8006aae:	d03d      	beq.n	8006b2c <__pow5mult+0xa0>
 8006ab0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006ab2:	b97c      	cbnz	r4, 8006ad4 <__pow5mult+0x48>
 8006ab4:	2010      	movs	r0, #16
 8006ab6:	f7ff fe29 	bl	800670c <malloc>
 8006aba:	4602      	mov	r2, r0
 8006abc:	6270      	str	r0, [r6, #36]	; 0x24
 8006abe:	b928      	cbnz	r0, 8006acc <__pow5mult+0x40>
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	; (8006b38 <__pow5mult+0xac>)
 8006ac2:	481e      	ldr	r0, [pc, #120]	; (8006b3c <__pow5mult+0xb0>)
 8006ac4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006ac8:	f000 fc62 	bl	8007390 <__assert_func>
 8006acc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ad0:	6004      	str	r4, [r0, #0]
 8006ad2:	60c4      	str	r4, [r0, #12]
 8006ad4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006ad8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006adc:	b94c      	cbnz	r4, 8006af2 <__pow5mult+0x66>
 8006ade:	f240 2171 	movw	r1, #625	; 0x271
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7ff ff12 	bl	800690c <__i2b>
 8006ae8:	2300      	movs	r3, #0
 8006aea:	f8c8 0008 	str.w	r0, [r8, #8]
 8006aee:	4604      	mov	r4, r0
 8006af0:	6003      	str	r3, [r0, #0]
 8006af2:	f04f 0900 	mov.w	r9, #0
 8006af6:	07eb      	lsls	r3, r5, #31
 8006af8:	d50a      	bpl.n	8006b10 <__pow5mult+0x84>
 8006afa:	4639      	mov	r1, r7
 8006afc:	4622      	mov	r2, r4
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7ff ff1a 	bl	8006938 <__multiply>
 8006b04:	4639      	mov	r1, r7
 8006b06:	4680      	mov	r8, r0
 8006b08:	4630      	mov	r0, r6
 8006b0a:	f7ff fe47 	bl	800679c <_Bfree>
 8006b0e:	4647      	mov	r7, r8
 8006b10:	106d      	asrs	r5, r5, #1
 8006b12:	d00b      	beq.n	8006b2c <__pow5mult+0xa0>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	b938      	cbnz	r0, 8006b28 <__pow5mult+0x9c>
 8006b18:	4622      	mov	r2, r4
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff ff0b 	bl	8006938 <__multiply>
 8006b22:	6020      	str	r0, [r4, #0]
 8006b24:	f8c0 9000 	str.w	r9, [r0]
 8006b28:	4604      	mov	r4, r0
 8006b2a:	e7e4      	b.n	8006af6 <__pow5mult+0x6a>
 8006b2c:	4638      	mov	r0, r7
 8006b2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b32:	bf00      	nop
 8006b34:	0800c090 	.word	0x0800c090
 8006b38:	0800be5d 	.word	0x0800be5d
 8006b3c:	0800bf40 	.word	0x0800bf40

08006b40 <__lshift>:
 8006b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b44:	460c      	mov	r4, r1
 8006b46:	6849      	ldr	r1, [r1, #4]
 8006b48:	6923      	ldr	r3, [r4, #16]
 8006b4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b4e:	68a3      	ldr	r3, [r4, #8]
 8006b50:	4607      	mov	r7, r0
 8006b52:	4691      	mov	r9, r2
 8006b54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b58:	f108 0601 	add.w	r6, r8, #1
 8006b5c:	42b3      	cmp	r3, r6
 8006b5e:	db0b      	blt.n	8006b78 <__lshift+0x38>
 8006b60:	4638      	mov	r0, r7
 8006b62:	f7ff fddb 	bl	800671c <_Balloc>
 8006b66:	4605      	mov	r5, r0
 8006b68:	b948      	cbnz	r0, 8006b7e <__lshift+0x3e>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	4b2a      	ldr	r3, [pc, #168]	; (8006c18 <__lshift+0xd8>)
 8006b6e:	482b      	ldr	r0, [pc, #172]	; (8006c1c <__lshift+0xdc>)
 8006b70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006b74:	f000 fc0c 	bl	8007390 <__assert_func>
 8006b78:	3101      	adds	r1, #1
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	e7ee      	b.n	8006b5c <__lshift+0x1c>
 8006b7e:	2300      	movs	r3, #0
 8006b80:	f100 0114 	add.w	r1, r0, #20
 8006b84:	f100 0210 	add.w	r2, r0, #16
 8006b88:	4618      	mov	r0, r3
 8006b8a:	4553      	cmp	r3, sl
 8006b8c:	db37      	blt.n	8006bfe <__lshift+0xbe>
 8006b8e:	6920      	ldr	r0, [r4, #16]
 8006b90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b94:	f104 0314 	add.w	r3, r4, #20
 8006b98:	f019 091f 	ands.w	r9, r9, #31
 8006b9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ba0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ba4:	d02f      	beq.n	8006c06 <__lshift+0xc6>
 8006ba6:	f1c9 0e20 	rsb	lr, r9, #32
 8006baa:	468a      	mov	sl, r1
 8006bac:	f04f 0c00 	mov.w	ip, #0
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	fa02 f209 	lsl.w	r2, r2, r9
 8006bb6:	ea42 020c 	orr.w	r2, r2, ip
 8006bba:	f84a 2b04 	str.w	r2, [sl], #4
 8006bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc2:	4298      	cmp	r0, r3
 8006bc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006bc8:	d8f2      	bhi.n	8006bb0 <__lshift+0x70>
 8006bca:	1b03      	subs	r3, r0, r4
 8006bcc:	3b15      	subs	r3, #21
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	f104 0215 	add.w	r2, r4, #21
 8006bd8:	4290      	cmp	r0, r2
 8006bda:	bf38      	it	cc
 8006bdc:	2304      	movcc	r3, #4
 8006bde:	f841 c003 	str.w	ip, [r1, r3]
 8006be2:	f1bc 0f00 	cmp.w	ip, #0
 8006be6:	d001      	beq.n	8006bec <__lshift+0xac>
 8006be8:	f108 0602 	add.w	r6, r8, #2
 8006bec:	3e01      	subs	r6, #1
 8006bee:	4638      	mov	r0, r7
 8006bf0:	612e      	str	r6, [r5, #16]
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	f7ff fdd2 	bl	800679c <_Bfree>
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c02:	3301      	adds	r3, #1
 8006c04:	e7c1      	b.n	8006b8a <__lshift+0x4a>
 8006c06:	3904      	subs	r1, #4
 8006c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c10:	4298      	cmp	r0, r3
 8006c12:	d8f9      	bhi.n	8006c08 <__lshift+0xc8>
 8006c14:	e7ea      	b.n	8006bec <__lshift+0xac>
 8006c16:	bf00      	nop
 8006c18:	0800becf 	.word	0x0800becf
 8006c1c:	0800bf40 	.word	0x0800bf40

08006c20 <__mcmp>:
 8006c20:	b530      	push	{r4, r5, lr}
 8006c22:	6902      	ldr	r2, [r0, #16]
 8006c24:	690c      	ldr	r4, [r1, #16]
 8006c26:	1b12      	subs	r2, r2, r4
 8006c28:	d10e      	bne.n	8006c48 <__mcmp+0x28>
 8006c2a:	f100 0314 	add.w	r3, r0, #20
 8006c2e:	3114      	adds	r1, #20
 8006c30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006c34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006c38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006c3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006c40:	42a5      	cmp	r5, r4
 8006c42:	d003      	beq.n	8006c4c <__mcmp+0x2c>
 8006c44:	d305      	bcc.n	8006c52 <__mcmp+0x32>
 8006c46:	2201      	movs	r2, #1
 8006c48:	4610      	mov	r0, r2
 8006c4a:	bd30      	pop	{r4, r5, pc}
 8006c4c:	4283      	cmp	r3, r0
 8006c4e:	d3f3      	bcc.n	8006c38 <__mcmp+0x18>
 8006c50:	e7fa      	b.n	8006c48 <__mcmp+0x28>
 8006c52:	f04f 32ff 	mov.w	r2, #4294967295
 8006c56:	e7f7      	b.n	8006c48 <__mcmp+0x28>

08006c58 <__mdiff>:
 8006c58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	4606      	mov	r6, r0
 8006c60:	4611      	mov	r1, r2
 8006c62:	4620      	mov	r0, r4
 8006c64:	4690      	mov	r8, r2
 8006c66:	f7ff ffdb 	bl	8006c20 <__mcmp>
 8006c6a:	1e05      	subs	r5, r0, #0
 8006c6c:	d110      	bne.n	8006c90 <__mdiff+0x38>
 8006c6e:	4629      	mov	r1, r5
 8006c70:	4630      	mov	r0, r6
 8006c72:	f7ff fd53 	bl	800671c <_Balloc>
 8006c76:	b930      	cbnz	r0, 8006c86 <__mdiff+0x2e>
 8006c78:	4b3a      	ldr	r3, [pc, #232]	; (8006d64 <__mdiff+0x10c>)
 8006c7a:	4602      	mov	r2, r0
 8006c7c:	f240 2132 	movw	r1, #562	; 0x232
 8006c80:	4839      	ldr	r0, [pc, #228]	; (8006d68 <__mdiff+0x110>)
 8006c82:	f000 fb85 	bl	8007390 <__assert_func>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c90:	bfa4      	itt	ge
 8006c92:	4643      	movge	r3, r8
 8006c94:	46a0      	movge	r8, r4
 8006c96:	4630      	mov	r0, r6
 8006c98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006c9c:	bfa6      	itte	ge
 8006c9e:	461c      	movge	r4, r3
 8006ca0:	2500      	movge	r5, #0
 8006ca2:	2501      	movlt	r5, #1
 8006ca4:	f7ff fd3a 	bl	800671c <_Balloc>
 8006ca8:	b920      	cbnz	r0, 8006cb4 <__mdiff+0x5c>
 8006caa:	4b2e      	ldr	r3, [pc, #184]	; (8006d64 <__mdiff+0x10c>)
 8006cac:	4602      	mov	r2, r0
 8006cae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006cb2:	e7e5      	b.n	8006c80 <__mdiff+0x28>
 8006cb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006cb8:	6926      	ldr	r6, [r4, #16]
 8006cba:	60c5      	str	r5, [r0, #12]
 8006cbc:	f104 0914 	add.w	r9, r4, #20
 8006cc0:	f108 0514 	add.w	r5, r8, #20
 8006cc4:	f100 0e14 	add.w	lr, r0, #20
 8006cc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ccc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006cd0:	f108 0210 	add.w	r2, r8, #16
 8006cd4:	46f2      	mov	sl, lr
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ce0:	fa1f f883 	uxth.w	r8, r3
 8006ce4:	fa11 f18b 	uxtah	r1, r1, fp
 8006ce8:	0c1b      	lsrs	r3, r3, #16
 8006cea:	eba1 0808 	sub.w	r8, r1, r8
 8006cee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006cf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006cf6:	fa1f f888 	uxth.w	r8, r8
 8006cfa:	1419      	asrs	r1, r3, #16
 8006cfc:	454e      	cmp	r6, r9
 8006cfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006d02:	f84a 3b04 	str.w	r3, [sl], #4
 8006d06:	d8e7      	bhi.n	8006cd8 <__mdiff+0x80>
 8006d08:	1b33      	subs	r3, r6, r4
 8006d0a:	3b15      	subs	r3, #21
 8006d0c:	f023 0303 	bic.w	r3, r3, #3
 8006d10:	3304      	adds	r3, #4
 8006d12:	3415      	adds	r4, #21
 8006d14:	42a6      	cmp	r6, r4
 8006d16:	bf38      	it	cc
 8006d18:	2304      	movcc	r3, #4
 8006d1a:	441d      	add	r5, r3
 8006d1c:	4473      	add	r3, lr
 8006d1e:	469e      	mov	lr, r3
 8006d20:	462e      	mov	r6, r5
 8006d22:	4566      	cmp	r6, ip
 8006d24:	d30e      	bcc.n	8006d44 <__mdiff+0xec>
 8006d26:	f10c 0203 	add.w	r2, ip, #3
 8006d2a:	1b52      	subs	r2, r2, r5
 8006d2c:	f022 0203 	bic.w	r2, r2, #3
 8006d30:	3d03      	subs	r5, #3
 8006d32:	45ac      	cmp	ip, r5
 8006d34:	bf38      	it	cc
 8006d36:	2200      	movcc	r2, #0
 8006d38:	441a      	add	r2, r3
 8006d3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006d3e:	b17b      	cbz	r3, 8006d60 <__mdiff+0x108>
 8006d40:	6107      	str	r7, [r0, #16]
 8006d42:	e7a3      	b.n	8006c8c <__mdiff+0x34>
 8006d44:	f856 8b04 	ldr.w	r8, [r6], #4
 8006d48:	fa11 f288 	uxtah	r2, r1, r8
 8006d4c:	1414      	asrs	r4, r2, #16
 8006d4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006d52:	b292      	uxth	r2, r2
 8006d54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006d58:	f84e 2b04 	str.w	r2, [lr], #4
 8006d5c:	1421      	asrs	r1, r4, #16
 8006d5e:	e7e0      	b.n	8006d22 <__mdiff+0xca>
 8006d60:	3f01      	subs	r7, #1
 8006d62:	e7ea      	b.n	8006d3a <__mdiff+0xe2>
 8006d64:	0800becf 	.word	0x0800becf
 8006d68:	0800bf40 	.word	0x0800bf40

08006d6c <__d2b>:
 8006d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d70:	4689      	mov	r9, r1
 8006d72:	2101      	movs	r1, #1
 8006d74:	ec57 6b10 	vmov	r6, r7, d0
 8006d78:	4690      	mov	r8, r2
 8006d7a:	f7ff fccf 	bl	800671c <_Balloc>
 8006d7e:	4604      	mov	r4, r0
 8006d80:	b930      	cbnz	r0, 8006d90 <__d2b+0x24>
 8006d82:	4602      	mov	r2, r0
 8006d84:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <__d2b+0xb0>)
 8006d86:	4826      	ldr	r0, [pc, #152]	; (8006e20 <__d2b+0xb4>)
 8006d88:	f240 310a 	movw	r1, #778	; 0x30a
 8006d8c:	f000 fb00 	bl	8007390 <__assert_func>
 8006d90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006d94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006d98:	bb35      	cbnz	r5, 8006de8 <__d2b+0x7c>
 8006d9a:	2e00      	cmp	r6, #0
 8006d9c:	9301      	str	r3, [sp, #4]
 8006d9e:	d028      	beq.n	8006df2 <__d2b+0x86>
 8006da0:	4668      	mov	r0, sp
 8006da2:	9600      	str	r6, [sp, #0]
 8006da4:	f7ff fd82 	bl	80068ac <__lo0bits>
 8006da8:	9900      	ldr	r1, [sp, #0]
 8006daa:	b300      	cbz	r0, 8006dee <__d2b+0x82>
 8006dac:	9a01      	ldr	r2, [sp, #4]
 8006dae:	f1c0 0320 	rsb	r3, r0, #32
 8006db2:	fa02 f303 	lsl.w	r3, r2, r3
 8006db6:	430b      	orrs	r3, r1
 8006db8:	40c2      	lsrs	r2, r0
 8006dba:	6163      	str	r3, [r4, #20]
 8006dbc:	9201      	str	r2, [sp, #4]
 8006dbe:	9b01      	ldr	r3, [sp, #4]
 8006dc0:	61a3      	str	r3, [r4, #24]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bf14      	ite	ne
 8006dc6:	2202      	movne	r2, #2
 8006dc8:	2201      	moveq	r2, #1
 8006dca:	6122      	str	r2, [r4, #16]
 8006dcc:	b1d5      	cbz	r5, 8006e04 <__d2b+0x98>
 8006dce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006dd2:	4405      	add	r5, r0
 8006dd4:	f8c9 5000 	str.w	r5, [r9]
 8006dd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ddc:	f8c8 0000 	str.w	r0, [r8]
 8006de0:	4620      	mov	r0, r4
 8006de2:	b003      	add	sp, #12
 8006de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006dec:	e7d5      	b.n	8006d9a <__d2b+0x2e>
 8006dee:	6161      	str	r1, [r4, #20]
 8006df0:	e7e5      	b.n	8006dbe <__d2b+0x52>
 8006df2:	a801      	add	r0, sp, #4
 8006df4:	f7ff fd5a 	bl	80068ac <__lo0bits>
 8006df8:	9b01      	ldr	r3, [sp, #4]
 8006dfa:	6163      	str	r3, [r4, #20]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	6122      	str	r2, [r4, #16]
 8006e00:	3020      	adds	r0, #32
 8006e02:	e7e3      	b.n	8006dcc <__d2b+0x60>
 8006e04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006e0c:	f8c9 0000 	str.w	r0, [r9]
 8006e10:	6918      	ldr	r0, [r3, #16]
 8006e12:	f7ff fd2b 	bl	800686c <__hi0bits>
 8006e16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e1a:	e7df      	b.n	8006ddc <__d2b+0x70>
 8006e1c:	0800becf 	.word	0x0800becf
 8006e20:	0800bf40 	.word	0x0800bf40

08006e24 <_calloc_r>:
 8006e24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e26:	fba1 2402 	umull	r2, r4, r1, r2
 8006e2a:	b94c      	cbnz	r4, 8006e40 <_calloc_r+0x1c>
 8006e2c:	4611      	mov	r1, r2
 8006e2e:	9201      	str	r2, [sp, #4]
 8006e30:	f000 f87a 	bl	8006f28 <_malloc_r>
 8006e34:	9a01      	ldr	r2, [sp, #4]
 8006e36:	4605      	mov	r5, r0
 8006e38:	b930      	cbnz	r0, 8006e48 <_calloc_r+0x24>
 8006e3a:	4628      	mov	r0, r5
 8006e3c:	b003      	add	sp, #12
 8006e3e:	bd30      	pop	{r4, r5, pc}
 8006e40:	220c      	movs	r2, #12
 8006e42:	6002      	str	r2, [r0, #0]
 8006e44:	2500      	movs	r5, #0
 8006e46:	e7f8      	b.n	8006e3a <_calloc_r+0x16>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	f7fd fe01 	bl	8004a50 <memset>
 8006e4e:	e7f4      	b.n	8006e3a <_calloc_r+0x16>

08006e50 <_free_r>:
 8006e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e52:	2900      	cmp	r1, #0
 8006e54:	d044      	beq.n	8006ee0 <_free_r+0x90>
 8006e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5a:	9001      	str	r0, [sp, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e62:	bfb8      	it	lt
 8006e64:	18e4      	addlt	r4, r4, r3
 8006e66:	f000 fb19 	bl	800749c <__malloc_lock>
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <_free_r+0x94>)
 8006e6c:	9801      	ldr	r0, [sp, #4]
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	b933      	cbnz	r3, 8006e80 <_free_r+0x30>
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	b003      	add	sp, #12
 8006e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e7c:	f000 bb14 	b.w	80074a8 <__malloc_unlock>
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d908      	bls.n	8006e96 <_free_r+0x46>
 8006e84:	6825      	ldr	r5, [r4, #0]
 8006e86:	1961      	adds	r1, r4, r5
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	bf01      	itttt	eq
 8006e8c:	6819      	ldreq	r1, [r3, #0]
 8006e8e:	685b      	ldreq	r3, [r3, #4]
 8006e90:	1949      	addeq	r1, r1, r5
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	e7ed      	b.n	8006e72 <_free_r+0x22>
 8006e96:	461a      	mov	r2, r3
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	b10b      	cbz	r3, 8006ea0 <_free_r+0x50>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d9fa      	bls.n	8006e96 <_free_r+0x46>
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	1855      	adds	r5, r2, r1
 8006ea4:	42a5      	cmp	r5, r4
 8006ea6:	d10b      	bne.n	8006ec0 <_free_r+0x70>
 8006ea8:	6824      	ldr	r4, [r4, #0]
 8006eaa:	4421      	add	r1, r4
 8006eac:	1854      	adds	r4, r2, r1
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	d1e0      	bne.n	8006e76 <_free_r+0x26>
 8006eb4:	681c      	ldr	r4, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	6053      	str	r3, [r2, #4]
 8006eba:	4421      	add	r1, r4
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	e7da      	b.n	8006e76 <_free_r+0x26>
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x78>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	6003      	str	r3, [r0, #0]
 8006ec6:	e7d6      	b.n	8006e76 <_free_r+0x26>
 8006ec8:	6825      	ldr	r5, [r4, #0]
 8006eca:	1961      	adds	r1, r4, r5
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf04      	itt	eq
 8006ed0:	6819      	ldreq	r1, [r3, #0]
 8006ed2:	685b      	ldreq	r3, [r3, #4]
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	bf04      	itt	eq
 8006ed8:	1949      	addeq	r1, r1, r5
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6054      	str	r4, [r2, #4]
 8006ede:	e7ca      	b.n	8006e76 <_free_r+0x26>
 8006ee0:	b003      	add	sp, #12
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	20004cb4 	.word	0x20004cb4

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0e      	ldr	r6, [pc, #56]	; (8006f24 <sbrk_aligned+0x3c>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 f9e6 	bl	80072c4 <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 f9e1 	bl	80072c4 <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d00a      	beq.n	8006f1c <sbrk_aligned+0x34>
 8006f06:	1cc4      	adds	r4, r0, #3
 8006f08:	f024 0403 	bic.w	r4, r4, #3
 8006f0c:	42a0      	cmp	r0, r4
 8006f0e:	d007      	beq.n	8006f20 <sbrk_aligned+0x38>
 8006f10:	1a21      	subs	r1, r4, r0
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f9d6 	bl	80072c4 <_sbrk_r>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d101      	bne.n	8006f20 <sbrk_aligned+0x38>
 8006f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	20004cb8 	.word	0x20004cb8

08006f28 <_malloc_r>:
 8006f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	1ccd      	adds	r5, r1, #3
 8006f2e:	f025 0503 	bic.w	r5, r5, #3
 8006f32:	3508      	adds	r5, #8
 8006f34:	2d0c      	cmp	r5, #12
 8006f36:	bf38      	it	cc
 8006f38:	250c      	movcc	r5, #12
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	db01      	blt.n	8006f44 <_malloc_r+0x1c>
 8006f40:	42a9      	cmp	r1, r5
 8006f42:	d905      	bls.n	8006f50 <_malloc_r+0x28>
 8006f44:	230c      	movs	r3, #12
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	2600      	movs	r6, #0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f50:	4e2e      	ldr	r6, [pc, #184]	; (800700c <_malloc_r+0xe4>)
 8006f52:	f000 faa3 	bl	800749c <__malloc_lock>
 8006f56:	6833      	ldr	r3, [r6, #0]
 8006f58:	461c      	mov	r4, r3
 8006f5a:	bb34      	cbnz	r4, 8006faa <_malloc_r+0x82>
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7ff ffc2 	bl	8006ee8 <sbrk_aligned>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	4604      	mov	r4, r0
 8006f68:	d14d      	bne.n	8007006 <_malloc_r+0xde>
 8006f6a:	6834      	ldr	r4, [r6, #0]
 8006f6c:	4626      	mov	r6, r4
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	d140      	bne.n	8006ff4 <_malloc_r+0xcc>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	4631      	mov	r1, r6
 8006f76:	4638      	mov	r0, r7
 8006f78:	eb04 0803 	add.w	r8, r4, r3
 8006f7c:	f000 f9a2 	bl	80072c4 <_sbrk_r>
 8006f80:	4580      	cmp	r8, r0
 8006f82:	d13a      	bne.n	8006ffa <_malloc_r+0xd2>
 8006f84:	6821      	ldr	r1, [r4, #0]
 8006f86:	3503      	adds	r5, #3
 8006f88:	1a6d      	subs	r5, r5, r1
 8006f8a:	f025 0503 	bic.w	r5, r5, #3
 8006f8e:	3508      	adds	r5, #8
 8006f90:	2d0c      	cmp	r5, #12
 8006f92:	bf38      	it	cc
 8006f94:	250c      	movcc	r5, #12
 8006f96:	4629      	mov	r1, r5
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff ffa5 	bl	8006ee8 <sbrk_aligned>
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d02b      	beq.n	8006ffa <_malloc_r+0xd2>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	442b      	add	r3, r5
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	e00e      	b.n	8006fc8 <_malloc_r+0xa0>
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	1b52      	subs	r2, r2, r5
 8006fae:	d41e      	bmi.n	8006fee <_malloc_r+0xc6>
 8006fb0:	2a0b      	cmp	r2, #11
 8006fb2:	d916      	bls.n	8006fe2 <_malloc_r+0xba>
 8006fb4:	1961      	adds	r1, r4, r5
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	6025      	str	r5, [r4, #0]
 8006fba:	bf18      	it	ne
 8006fbc:	6059      	strne	r1, [r3, #4]
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	bf08      	it	eq
 8006fc2:	6031      	streq	r1, [r6, #0]
 8006fc4:	5162      	str	r2, [r4, r5]
 8006fc6:	604b      	str	r3, [r1, #4]
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f104 060b 	add.w	r6, r4, #11
 8006fce:	f000 fa6b 	bl	80074a8 <__malloc_unlock>
 8006fd2:	f026 0607 	bic.w	r6, r6, #7
 8006fd6:	1d23      	adds	r3, r4, #4
 8006fd8:	1af2      	subs	r2, r6, r3
 8006fda:	d0b6      	beq.n	8006f4a <_malloc_r+0x22>
 8006fdc:	1b9b      	subs	r3, r3, r6
 8006fde:	50a3      	str	r3, [r4, r2]
 8006fe0:	e7b3      	b.n	8006f4a <_malloc_r+0x22>
 8006fe2:	6862      	ldr	r2, [r4, #4]
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	bf0c      	ite	eq
 8006fe8:	6032      	streq	r2, [r6, #0]
 8006fea:	605a      	strne	r2, [r3, #4]
 8006fec:	e7ec      	b.n	8006fc8 <_malloc_r+0xa0>
 8006fee:	4623      	mov	r3, r4
 8006ff0:	6864      	ldr	r4, [r4, #4]
 8006ff2:	e7b2      	b.n	8006f5a <_malloc_r+0x32>
 8006ff4:	4634      	mov	r4, r6
 8006ff6:	6876      	ldr	r6, [r6, #4]
 8006ff8:	e7b9      	b.n	8006f6e <_malloc_r+0x46>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4638      	mov	r0, r7
 8007000:	f000 fa52 	bl	80074a8 <__malloc_unlock>
 8007004:	e7a1      	b.n	8006f4a <_malloc_r+0x22>
 8007006:	6025      	str	r5, [r4, #0]
 8007008:	e7de      	b.n	8006fc8 <_malloc_r+0xa0>
 800700a:	bf00      	nop
 800700c:	20004cb4 	.word	0x20004cb4

08007010 <__sfputc_r>:
 8007010:	6893      	ldr	r3, [r2, #8]
 8007012:	3b01      	subs	r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	b410      	push	{r4}
 8007018:	6093      	str	r3, [r2, #8]
 800701a:	da08      	bge.n	800702e <__sfputc_r+0x1e>
 800701c:	6994      	ldr	r4, [r2, #24]
 800701e:	42a3      	cmp	r3, r4
 8007020:	db01      	blt.n	8007026 <__sfputc_r+0x16>
 8007022:	290a      	cmp	r1, #10
 8007024:	d103      	bne.n	800702e <__sfputc_r+0x1e>
 8007026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800702a:	f7fe ba11 	b.w	8005450 <__swbuf_r>
 800702e:	6813      	ldr	r3, [r2, #0]
 8007030:	1c58      	adds	r0, r3, #1
 8007032:	6010      	str	r0, [r2, #0]
 8007034:	7019      	strb	r1, [r3, #0]
 8007036:	4608      	mov	r0, r1
 8007038:	f85d 4b04 	ldr.w	r4, [sp], #4
 800703c:	4770      	bx	lr

0800703e <__sfputs_r>:
 800703e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007040:	4606      	mov	r6, r0
 8007042:	460f      	mov	r7, r1
 8007044:	4614      	mov	r4, r2
 8007046:	18d5      	adds	r5, r2, r3
 8007048:	42ac      	cmp	r4, r5
 800704a:	d101      	bne.n	8007050 <__sfputs_r+0x12>
 800704c:	2000      	movs	r0, #0
 800704e:	e007      	b.n	8007060 <__sfputs_r+0x22>
 8007050:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007054:	463a      	mov	r2, r7
 8007056:	4630      	mov	r0, r6
 8007058:	f7ff ffda 	bl	8007010 <__sfputc_r>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d1f3      	bne.n	8007048 <__sfputs_r+0xa>
 8007060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007064 <_vfiprintf_r>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	460d      	mov	r5, r1
 800706a:	b09d      	sub	sp, #116	; 0x74
 800706c:	4614      	mov	r4, r2
 800706e:	4698      	mov	r8, r3
 8007070:	4606      	mov	r6, r0
 8007072:	b118      	cbz	r0, 800707c <_vfiprintf_r+0x18>
 8007074:	6983      	ldr	r3, [r0, #24]
 8007076:	b90b      	cbnz	r3, 800707c <_vfiprintf_r+0x18>
 8007078:	f7ff fa3e 	bl	80064f8 <__sinit>
 800707c:	4b89      	ldr	r3, [pc, #548]	; (80072a4 <_vfiprintf_r+0x240>)
 800707e:	429d      	cmp	r5, r3
 8007080:	d11b      	bne.n	80070ba <_vfiprintf_r+0x56>
 8007082:	6875      	ldr	r5, [r6, #4]
 8007084:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007086:	07d9      	lsls	r1, r3, #31
 8007088:	d405      	bmi.n	8007096 <_vfiprintf_r+0x32>
 800708a:	89ab      	ldrh	r3, [r5, #12]
 800708c:	059a      	lsls	r2, r3, #22
 800708e:	d402      	bmi.n	8007096 <_vfiprintf_r+0x32>
 8007090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007092:	f7ff fad4 	bl	800663e <__retarget_lock_acquire_recursive>
 8007096:	89ab      	ldrh	r3, [r5, #12]
 8007098:	071b      	lsls	r3, r3, #28
 800709a:	d501      	bpl.n	80070a0 <_vfiprintf_r+0x3c>
 800709c:	692b      	ldr	r3, [r5, #16]
 800709e:	b9eb      	cbnz	r3, 80070dc <_vfiprintf_r+0x78>
 80070a0:	4629      	mov	r1, r5
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7fe fa26 	bl	80054f4 <__swsetup_r>
 80070a8:	b1c0      	cbz	r0, 80070dc <_vfiprintf_r+0x78>
 80070aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ac:	07dc      	lsls	r4, r3, #31
 80070ae:	d50e      	bpl.n	80070ce <_vfiprintf_r+0x6a>
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	b01d      	add	sp, #116	; 0x74
 80070b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ba:	4b7b      	ldr	r3, [pc, #492]	; (80072a8 <_vfiprintf_r+0x244>)
 80070bc:	429d      	cmp	r5, r3
 80070be:	d101      	bne.n	80070c4 <_vfiprintf_r+0x60>
 80070c0:	68b5      	ldr	r5, [r6, #8]
 80070c2:	e7df      	b.n	8007084 <_vfiprintf_r+0x20>
 80070c4:	4b79      	ldr	r3, [pc, #484]	; (80072ac <_vfiprintf_r+0x248>)
 80070c6:	429d      	cmp	r5, r3
 80070c8:	bf08      	it	eq
 80070ca:	68f5      	ldreq	r5, [r6, #12]
 80070cc:	e7da      	b.n	8007084 <_vfiprintf_r+0x20>
 80070ce:	89ab      	ldrh	r3, [r5, #12]
 80070d0:	0598      	lsls	r0, r3, #22
 80070d2:	d4ed      	bmi.n	80070b0 <_vfiprintf_r+0x4c>
 80070d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070d6:	f7ff fab3 	bl	8006640 <__retarget_lock_release_recursive>
 80070da:	e7e9      	b.n	80070b0 <_vfiprintf_r+0x4c>
 80070dc:	2300      	movs	r3, #0
 80070de:	9309      	str	r3, [sp, #36]	; 0x24
 80070e0:	2320      	movs	r3, #32
 80070e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80070ea:	2330      	movs	r3, #48	; 0x30
 80070ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072b0 <_vfiprintf_r+0x24c>
 80070f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070f4:	f04f 0901 	mov.w	r9, #1
 80070f8:	4623      	mov	r3, r4
 80070fa:	469a      	mov	sl, r3
 80070fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007100:	b10a      	cbz	r2, 8007106 <_vfiprintf_r+0xa2>
 8007102:	2a25      	cmp	r2, #37	; 0x25
 8007104:	d1f9      	bne.n	80070fa <_vfiprintf_r+0x96>
 8007106:	ebba 0b04 	subs.w	fp, sl, r4
 800710a:	d00b      	beq.n	8007124 <_vfiprintf_r+0xc0>
 800710c:	465b      	mov	r3, fp
 800710e:	4622      	mov	r2, r4
 8007110:	4629      	mov	r1, r5
 8007112:	4630      	mov	r0, r6
 8007114:	f7ff ff93 	bl	800703e <__sfputs_r>
 8007118:	3001      	adds	r0, #1
 800711a:	f000 80aa 	beq.w	8007272 <_vfiprintf_r+0x20e>
 800711e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007120:	445a      	add	r2, fp
 8007122:	9209      	str	r2, [sp, #36]	; 0x24
 8007124:	f89a 3000 	ldrb.w	r3, [sl]
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80a2 	beq.w	8007272 <_vfiprintf_r+0x20e>
 800712e:	2300      	movs	r3, #0
 8007130:	f04f 32ff 	mov.w	r2, #4294967295
 8007134:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007138:	f10a 0a01 	add.w	sl, sl, #1
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	9307      	str	r3, [sp, #28]
 8007140:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007144:	931a      	str	r3, [sp, #104]	; 0x68
 8007146:	4654      	mov	r4, sl
 8007148:	2205      	movs	r2, #5
 800714a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800714e:	4858      	ldr	r0, [pc, #352]	; (80072b0 <_vfiprintf_r+0x24c>)
 8007150:	f7f9 f8c6 	bl	80002e0 <memchr>
 8007154:	9a04      	ldr	r2, [sp, #16]
 8007156:	b9d8      	cbnz	r0, 8007190 <_vfiprintf_r+0x12c>
 8007158:	06d1      	lsls	r1, r2, #27
 800715a:	bf44      	itt	mi
 800715c:	2320      	movmi	r3, #32
 800715e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007162:	0713      	lsls	r3, r2, #28
 8007164:	bf44      	itt	mi
 8007166:	232b      	movmi	r3, #43	; 0x2b
 8007168:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800716c:	f89a 3000 	ldrb.w	r3, [sl]
 8007170:	2b2a      	cmp	r3, #42	; 0x2a
 8007172:	d015      	beq.n	80071a0 <_vfiprintf_r+0x13c>
 8007174:	9a07      	ldr	r2, [sp, #28]
 8007176:	4654      	mov	r4, sl
 8007178:	2000      	movs	r0, #0
 800717a:	f04f 0c0a 	mov.w	ip, #10
 800717e:	4621      	mov	r1, r4
 8007180:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007184:	3b30      	subs	r3, #48	; 0x30
 8007186:	2b09      	cmp	r3, #9
 8007188:	d94e      	bls.n	8007228 <_vfiprintf_r+0x1c4>
 800718a:	b1b0      	cbz	r0, 80071ba <_vfiprintf_r+0x156>
 800718c:	9207      	str	r2, [sp, #28]
 800718e:	e014      	b.n	80071ba <_vfiprintf_r+0x156>
 8007190:	eba0 0308 	sub.w	r3, r0, r8
 8007194:	fa09 f303 	lsl.w	r3, r9, r3
 8007198:	4313      	orrs	r3, r2
 800719a:	9304      	str	r3, [sp, #16]
 800719c:	46a2      	mov	sl, r4
 800719e:	e7d2      	b.n	8007146 <_vfiprintf_r+0xe2>
 80071a0:	9b03      	ldr	r3, [sp, #12]
 80071a2:	1d19      	adds	r1, r3, #4
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	9103      	str	r1, [sp, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	bfbb      	ittet	lt
 80071ac:	425b      	neglt	r3, r3
 80071ae:	f042 0202 	orrlt.w	r2, r2, #2
 80071b2:	9307      	strge	r3, [sp, #28]
 80071b4:	9307      	strlt	r3, [sp, #28]
 80071b6:	bfb8      	it	lt
 80071b8:	9204      	strlt	r2, [sp, #16]
 80071ba:	7823      	ldrb	r3, [r4, #0]
 80071bc:	2b2e      	cmp	r3, #46	; 0x2e
 80071be:	d10c      	bne.n	80071da <_vfiprintf_r+0x176>
 80071c0:	7863      	ldrb	r3, [r4, #1]
 80071c2:	2b2a      	cmp	r3, #42	; 0x2a
 80071c4:	d135      	bne.n	8007232 <_vfiprintf_r+0x1ce>
 80071c6:	9b03      	ldr	r3, [sp, #12]
 80071c8:	1d1a      	adds	r2, r3, #4
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	9203      	str	r2, [sp, #12]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	bfb8      	it	lt
 80071d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80071d6:	3402      	adds	r4, #2
 80071d8:	9305      	str	r3, [sp, #20]
 80071da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072c0 <_vfiprintf_r+0x25c>
 80071de:	7821      	ldrb	r1, [r4, #0]
 80071e0:	2203      	movs	r2, #3
 80071e2:	4650      	mov	r0, sl
 80071e4:	f7f9 f87c 	bl	80002e0 <memchr>
 80071e8:	b140      	cbz	r0, 80071fc <_vfiprintf_r+0x198>
 80071ea:	2340      	movs	r3, #64	; 0x40
 80071ec:	eba0 000a 	sub.w	r0, r0, sl
 80071f0:	fa03 f000 	lsl.w	r0, r3, r0
 80071f4:	9b04      	ldr	r3, [sp, #16]
 80071f6:	4303      	orrs	r3, r0
 80071f8:	3401      	adds	r4, #1
 80071fa:	9304      	str	r3, [sp, #16]
 80071fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007200:	482c      	ldr	r0, [pc, #176]	; (80072b4 <_vfiprintf_r+0x250>)
 8007202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007206:	2206      	movs	r2, #6
 8007208:	f7f9 f86a 	bl	80002e0 <memchr>
 800720c:	2800      	cmp	r0, #0
 800720e:	d03f      	beq.n	8007290 <_vfiprintf_r+0x22c>
 8007210:	4b29      	ldr	r3, [pc, #164]	; (80072b8 <_vfiprintf_r+0x254>)
 8007212:	bb1b      	cbnz	r3, 800725c <_vfiprintf_r+0x1f8>
 8007214:	9b03      	ldr	r3, [sp, #12]
 8007216:	3307      	adds	r3, #7
 8007218:	f023 0307 	bic.w	r3, r3, #7
 800721c:	3308      	adds	r3, #8
 800721e:	9303      	str	r3, [sp, #12]
 8007220:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007222:	443b      	add	r3, r7
 8007224:	9309      	str	r3, [sp, #36]	; 0x24
 8007226:	e767      	b.n	80070f8 <_vfiprintf_r+0x94>
 8007228:	fb0c 3202 	mla	r2, ip, r2, r3
 800722c:	460c      	mov	r4, r1
 800722e:	2001      	movs	r0, #1
 8007230:	e7a5      	b.n	800717e <_vfiprintf_r+0x11a>
 8007232:	2300      	movs	r3, #0
 8007234:	3401      	adds	r4, #1
 8007236:	9305      	str	r3, [sp, #20]
 8007238:	4619      	mov	r1, r3
 800723a:	f04f 0c0a 	mov.w	ip, #10
 800723e:	4620      	mov	r0, r4
 8007240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007244:	3a30      	subs	r2, #48	; 0x30
 8007246:	2a09      	cmp	r2, #9
 8007248:	d903      	bls.n	8007252 <_vfiprintf_r+0x1ee>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0c5      	beq.n	80071da <_vfiprintf_r+0x176>
 800724e:	9105      	str	r1, [sp, #20]
 8007250:	e7c3      	b.n	80071da <_vfiprintf_r+0x176>
 8007252:	fb0c 2101 	mla	r1, ip, r1, r2
 8007256:	4604      	mov	r4, r0
 8007258:	2301      	movs	r3, #1
 800725a:	e7f0      	b.n	800723e <_vfiprintf_r+0x1da>
 800725c:	ab03      	add	r3, sp, #12
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	462a      	mov	r2, r5
 8007262:	4b16      	ldr	r3, [pc, #88]	; (80072bc <_vfiprintf_r+0x258>)
 8007264:	a904      	add	r1, sp, #16
 8007266:	4630      	mov	r0, r6
 8007268:	f7fd fc9a 	bl	8004ba0 <_printf_float>
 800726c:	4607      	mov	r7, r0
 800726e:	1c78      	adds	r0, r7, #1
 8007270:	d1d6      	bne.n	8007220 <_vfiprintf_r+0x1bc>
 8007272:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007274:	07d9      	lsls	r1, r3, #31
 8007276:	d405      	bmi.n	8007284 <_vfiprintf_r+0x220>
 8007278:	89ab      	ldrh	r3, [r5, #12]
 800727a:	059a      	lsls	r2, r3, #22
 800727c:	d402      	bmi.n	8007284 <_vfiprintf_r+0x220>
 800727e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007280:	f7ff f9de 	bl	8006640 <__retarget_lock_release_recursive>
 8007284:	89ab      	ldrh	r3, [r5, #12]
 8007286:	065b      	lsls	r3, r3, #25
 8007288:	f53f af12 	bmi.w	80070b0 <_vfiprintf_r+0x4c>
 800728c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800728e:	e711      	b.n	80070b4 <_vfiprintf_r+0x50>
 8007290:	ab03      	add	r3, sp, #12
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	462a      	mov	r2, r5
 8007296:	4b09      	ldr	r3, [pc, #36]	; (80072bc <_vfiprintf_r+0x258>)
 8007298:	a904      	add	r1, sp, #16
 800729a:	4630      	mov	r0, r6
 800729c:	f7fd ff24 	bl	80050e8 <_printf_i>
 80072a0:	e7e4      	b.n	800726c <_vfiprintf_r+0x208>
 80072a2:	bf00      	nop
 80072a4:	0800bf00 	.word	0x0800bf00
 80072a8:	0800bf20 	.word	0x0800bf20
 80072ac:	0800bee0 	.word	0x0800bee0
 80072b0:	0800c09c 	.word	0x0800c09c
 80072b4:	0800c0a6 	.word	0x0800c0a6
 80072b8:	08004ba1 	.word	0x08004ba1
 80072bc:	0800703f 	.word	0x0800703f
 80072c0:	0800c0a2 	.word	0x0800c0a2

080072c4 <_sbrk_r>:
 80072c4:	b538      	push	{r3, r4, r5, lr}
 80072c6:	4d06      	ldr	r5, [pc, #24]	; (80072e0 <_sbrk_r+0x1c>)
 80072c8:	2300      	movs	r3, #0
 80072ca:	4604      	mov	r4, r0
 80072cc:	4608      	mov	r0, r1
 80072ce:	602b      	str	r3, [r5, #0]
 80072d0:	f7fa fb12 	bl	80018f8 <_sbrk>
 80072d4:	1c43      	adds	r3, r0, #1
 80072d6:	d102      	bne.n	80072de <_sbrk_r+0x1a>
 80072d8:	682b      	ldr	r3, [r5, #0]
 80072da:	b103      	cbz	r3, 80072de <_sbrk_r+0x1a>
 80072dc:	6023      	str	r3, [r4, #0]
 80072de:	bd38      	pop	{r3, r4, r5, pc}
 80072e0:	20004cbc 	.word	0x20004cbc

080072e4 <__sread>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	460c      	mov	r4, r1
 80072e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ec:	f000 f8e2 	bl	80074b4 <_read_r>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	bfab      	itete	ge
 80072f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072f6:	89a3      	ldrhlt	r3, [r4, #12]
 80072f8:	181b      	addge	r3, r3, r0
 80072fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072fe:	bfac      	ite	ge
 8007300:	6563      	strge	r3, [r4, #84]	; 0x54
 8007302:	81a3      	strhlt	r3, [r4, #12]
 8007304:	bd10      	pop	{r4, pc}

08007306 <__swrite>:
 8007306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730a:	461f      	mov	r7, r3
 800730c:	898b      	ldrh	r3, [r1, #12]
 800730e:	05db      	lsls	r3, r3, #23
 8007310:	4605      	mov	r5, r0
 8007312:	460c      	mov	r4, r1
 8007314:	4616      	mov	r6, r2
 8007316:	d505      	bpl.n	8007324 <__swrite+0x1e>
 8007318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800731c:	2302      	movs	r3, #2
 800731e:	2200      	movs	r2, #0
 8007320:	f000 f898 	bl	8007454 <_lseek_r>
 8007324:	89a3      	ldrh	r3, [r4, #12]
 8007326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800732a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800732e:	81a3      	strh	r3, [r4, #12]
 8007330:	4632      	mov	r2, r6
 8007332:	463b      	mov	r3, r7
 8007334:	4628      	mov	r0, r5
 8007336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800733a:	f000 b817 	b.w	800736c <_write_r>

0800733e <__sseek>:
 800733e:	b510      	push	{r4, lr}
 8007340:	460c      	mov	r4, r1
 8007342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007346:	f000 f885 	bl	8007454 <_lseek_r>
 800734a:	1c43      	adds	r3, r0, #1
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	bf15      	itete	ne
 8007350:	6560      	strne	r0, [r4, #84]	; 0x54
 8007352:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007356:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800735a:	81a3      	strheq	r3, [r4, #12]
 800735c:	bf18      	it	ne
 800735e:	81a3      	strhne	r3, [r4, #12]
 8007360:	bd10      	pop	{r4, pc}

08007362 <__sclose>:
 8007362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007366:	f000 b831 	b.w	80073cc <_close_r>
	...

0800736c <_write_r>:
 800736c:	b538      	push	{r3, r4, r5, lr}
 800736e:	4d07      	ldr	r5, [pc, #28]	; (800738c <_write_r+0x20>)
 8007370:	4604      	mov	r4, r0
 8007372:	4608      	mov	r0, r1
 8007374:	4611      	mov	r1, r2
 8007376:	2200      	movs	r2, #0
 8007378:	602a      	str	r2, [r5, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	f7fa faa2 	bl	80018c4 <_write>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_write_r+0x1e>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_write_r+0x1e>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20004cbc 	.word	0x20004cbc

08007390 <__assert_func>:
 8007390:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007392:	4614      	mov	r4, r2
 8007394:	461a      	mov	r2, r3
 8007396:	4b09      	ldr	r3, [pc, #36]	; (80073bc <__assert_func+0x2c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4605      	mov	r5, r0
 800739c:	68d8      	ldr	r0, [r3, #12]
 800739e:	b14c      	cbz	r4, 80073b4 <__assert_func+0x24>
 80073a0:	4b07      	ldr	r3, [pc, #28]	; (80073c0 <__assert_func+0x30>)
 80073a2:	9100      	str	r1, [sp, #0]
 80073a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80073a8:	4906      	ldr	r1, [pc, #24]	; (80073c4 <__assert_func+0x34>)
 80073aa:	462b      	mov	r3, r5
 80073ac:	f000 f81e 	bl	80073ec <fiprintf>
 80073b0:	f000 f89f 	bl	80074f2 <abort>
 80073b4:	4b04      	ldr	r3, [pc, #16]	; (80073c8 <__assert_func+0x38>)
 80073b6:	461c      	mov	r4, r3
 80073b8:	e7f3      	b.n	80073a2 <__assert_func+0x12>
 80073ba:	bf00      	nop
 80073bc:	20000014 	.word	0x20000014
 80073c0:	0800c0ad 	.word	0x0800c0ad
 80073c4:	0800c0ba 	.word	0x0800c0ba
 80073c8:	0800764c 	.word	0x0800764c

080073cc <_close_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d06      	ldr	r5, [pc, #24]	; (80073e8 <_close_r+0x1c>)
 80073d0:	2300      	movs	r3, #0
 80073d2:	4604      	mov	r4, r0
 80073d4:	4608      	mov	r0, r1
 80073d6:	602b      	str	r3, [r5, #0]
 80073d8:	f7fa fa82 	bl	80018e0 <_close>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	d102      	bne.n	80073e6 <_close_r+0x1a>
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	b103      	cbz	r3, 80073e6 <_close_r+0x1a>
 80073e4:	6023      	str	r3, [r4, #0]
 80073e6:	bd38      	pop	{r3, r4, r5, pc}
 80073e8:	20004cbc 	.word	0x20004cbc

080073ec <fiprintf>:
 80073ec:	b40e      	push	{r1, r2, r3}
 80073ee:	b503      	push	{r0, r1, lr}
 80073f0:	4601      	mov	r1, r0
 80073f2:	ab03      	add	r3, sp, #12
 80073f4:	4805      	ldr	r0, [pc, #20]	; (800740c <fiprintf+0x20>)
 80073f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fa:	6800      	ldr	r0, [r0, #0]
 80073fc:	9301      	str	r3, [sp, #4]
 80073fe:	f7ff fe31 	bl	8007064 <_vfiprintf_r>
 8007402:	b002      	add	sp, #8
 8007404:	f85d eb04 	ldr.w	lr, [sp], #4
 8007408:	b003      	add	sp, #12
 800740a:	4770      	bx	lr
 800740c:	20000014 	.word	0x20000014

08007410 <_fstat_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d07      	ldr	r5, [pc, #28]	; (8007430 <_fstat_r+0x20>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	602b      	str	r3, [r5, #0]
 800741e:	f7fa fa62 	bl	80018e6 <_fstat>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d102      	bne.n	800742c <_fstat_r+0x1c>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	b103      	cbz	r3, 800742c <_fstat_r+0x1c>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	bf00      	nop
 8007430:	20004cbc 	.word	0x20004cbc

08007434 <_isatty_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d06      	ldr	r5, [pc, #24]	; (8007450 <_isatty_r+0x1c>)
 8007438:	2300      	movs	r3, #0
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	f7fa fa56 	bl	80018f0 <_isatty>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_isatty_r+0x1a>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_isatty_r+0x1a>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	20004cbc 	.word	0x20004cbc

08007454 <_lseek_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d07      	ldr	r5, [pc, #28]	; (8007474 <_lseek_r+0x20>)
 8007458:	4604      	mov	r4, r0
 800745a:	4608      	mov	r0, r1
 800745c:	4611      	mov	r1, r2
 800745e:	2200      	movs	r2, #0
 8007460:	602a      	str	r2, [r5, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f7fa fa46 	bl	80018f4 <_lseek>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_lseek_r+0x1e>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_lseek_r+0x1e>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	20004cbc 	.word	0x20004cbc

08007478 <__ascii_mbtowc>:
 8007478:	b082      	sub	sp, #8
 800747a:	b901      	cbnz	r1, 800747e <__ascii_mbtowc+0x6>
 800747c:	a901      	add	r1, sp, #4
 800747e:	b142      	cbz	r2, 8007492 <__ascii_mbtowc+0x1a>
 8007480:	b14b      	cbz	r3, 8007496 <__ascii_mbtowc+0x1e>
 8007482:	7813      	ldrb	r3, [r2, #0]
 8007484:	600b      	str	r3, [r1, #0]
 8007486:	7812      	ldrb	r2, [r2, #0]
 8007488:	1e10      	subs	r0, r2, #0
 800748a:	bf18      	it	ne
 800748c:	2001      	movne	r0, #1
 800748e:	b002      	add	sp, #8
 8007490:	4770      	bx	lr
 8007492:	4610      	mov	r0, r2
 8007494:	e7fb      	b.n	800748e <__ascii_mbtowc+0x16>
 8007496:	f06f 0001 	mvn.w	r0, #1
 800749a:	e7f8      	b.n	800748e <__ascii_mbtowc+0x16>

0800749c <__malloc_lock>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__malloc_lock+0x8>)
 800749e:	f7ff b8ce 	b.w	800663e <__retarget_lock_acquire_recursive>
 80074a2:	bf00      	nop
 80074a4:	20004cb0 	.word	0x20004cb0

080074a8 <__malloc_unlock>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__malloc_unlock+0x8>)
 80074aa:	f7ff b8c9 	b.w	8006640 <__retarget_lock_release_recursive>
 80074ae:	bf00      	nop
 80074b0:	20004cb0 	.word	0x20004cb0

080074b4 <_read_r>:
 80074b4:	b538      	push	{r3, r4, r5, lr}
 80074b6:	4d07      	ldr	r5, [pc, #28]	; (80074d4 <_read_r+0x20>)
 80074b8:	4604      	mov	r4, r0
 80074ba:	4608      	mov	r0, r1
 80074bc:	4611      	mov	r1, r2
 80074be:	2200      	movs	r2, #0
 80074c0:	602a      	str	r2, [r5, #0]
 80074c2:	461a      	mov	r2, r3
 80074c4:	f7fa f9f0 	bl	80018a8 <_read>
 80074c8:	1c43      	adds	r3, r0, #1
 80074ca:	d102      	bne.n	80074d2 <_read_r+0x1e>
 80074cc:	682b      	ldr	r3, [r5, #0]
 80074ce:	b103      	cbz	r3, 80074d2 <_read_r+0x1e>
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	20004cbc 	.word	0x20004cbc

080074d8 <__ascii_wctomb>:
 80074d8:	b149      	cbz	r1, 80074ee <__ascii_wctomb+0x16>
 80074da:	2aff      	cmp	r2, #255	; 0xff
 80074dc:	bf85      	ittet	hi
 80074de:	238a      	movhi	r3, #138	; 0x8a
 80074e0:	6003      	strhi	r3, [r0, #0]
 80074e2:	700a      	strbls	r2, [r1, #0]
 80074e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80074e8:	bf98      	it	ls
 80074ea:	2001      	movls	r0, #1
 80074ec:	4770      	bx	lr
 80074ee:	4608      	mov	r0, r1
 80074f0:	4770      	bx	lr

080074f2 <abort>:
 80074f2:	b508      	push	{r3, lr}
 80074f4:	2006      	movs	r0, #6
 80074f6:	f000 f82b 	bl	8007550 <raise>
 80074fa:	2001      	movs	r0, #1
 80074fc:	f7fa f9ce 	bl	800189c <_exit>

08007500 <_raise_r>:
 8007500:	291f      	cmp	r1, #31
 8007502:	b538      	push	{r3, r4, r5, lr}
 8007504:	4604      	mov	r4, r0
 8007506:	460d      	mov	r5, r1
 8007508:	d904      	bls.n	8007514 <_raise_r+0x14>
 800750a:	2316      	movs	r3, #22
 800750c:	6003      	str	r3, [r0, #0]
 800750e:	f04f 30ff 	mov.w	r0, #4294967295
 8007512:	bd38      	pop	{r3, r4, r5, pc}
 8007514:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007516:	b112      	cbz	r2, 800751e <_raise_r+0x1e>
 8007518:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800751c:	b94b      	cbnz	r3, 8007532 <_raise_r+0x32>
 800751e:	4620      	mov	r0, r4
 8007520:	f000 f830 	bl	8007584 <_getpid_r>
 8007524:	462a      	mov	r2, r5
 8007526:	4601      	mov	r1, r0
 8007528:	4620      	mov	r0, r4
 800752a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800752e:	f000 b817 	b.w	8007560 <_kill_r>
 8007532:	2b01      	cmp	r3, #1
 8007534:	d00a      	beq.n	800754c <_raise_r+0x4c>
 8007536:	1c59      	adds	r1, r3, #1
 8007538:	d103      	bne.n	8007542 <_raise_r+0x42>
 800753a:	2316      	movs	r3, #22
 800753c:	6003      	str	r3, [r0, #0]
 800753e:	2001      	movs	r0, #1
 8007540:	e7e7      	b.n	8007512 <_raise_r+0x12>
 8007542:	2400      	movs	r4, #0
 8007544:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007548:	4628      	mov	r0, r5
 800754a:	4798      	blx	r3
 800754c:	2000      	movs	r0, #0
 800754e:	e7e0      	b.n	8007512 <_raise_r+0x12>

08007550 <raise>:
 8007550:	4b02      	ldr	r3, [pc, #8]	; (800755c <raise+0xc>)
 8007552:	4601      	mov	r1, r0
 8007554:	6818      	ldr	r0, [r3, #0]
 8007556:	f7ff bfd3 	b.w	8007500 <_raise_r>
 800755a:	bf00      	nop
 800755c:	20000014 	.word	0x20000014

08007560 <_kill_r>:
 8007560:	b538      	push	{r3, r4, r5, lr}
 8007562:	4d07      	ldr	r5, [pc, #28]	; (8007580 <_kill_r+0x20>)
 8007564:	2300      	movs	r3, #0
 8007566:	4604      	mov	r4, r0
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	602b      	str	r3, [r5, #0]
 800756e:	f7fa f98d 	bl	800188c <_kill>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	d102      	bne.n	800757c <_kill_r+0x1c>
 8007576:	682b      	ldr	r3, [r5, #0]
 8007578:	b103      	cbz	r3, 800757c <_kill_r+0x1c>
 800757a:	6023      	str	r3, [r4, #0]
 800757c:	bd38      	pop	{r3, r4, r5, pc}
 800757e:	bf00      	nop
 8007580:	20004cbc 	.word	0x20004cbc

08007584 <_getpid_r>:
 8007584:	f7fa b980 	b.w	8001888 <_getpid>

08007588 <sqrtf>:
 8007588:	b508      	push	{r3, lr}
 800758a:	ed2d 8b02 	vpush	{d8}
 800758e:	eeb0 8a40 	vmov.f32	s16, s0
 8007592:	f000 f817 	bl	80075c4 <__ieee754_sqrtf>
 8007596:	eeb4 8a48 	vcmp.f32	s16, s16
 800759a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800759e:	d60c      	bvs.n	80075ba <sqrtf+0x32>
 80075a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80075c0 <sqrtf+0x38>
 80075a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80075a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075ac:	d505      	bpl.n	80075ba <sqrtf+0x32>
 80075ae:	f7fd fa17 	bl	80049e0 <__errno>
 80075b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80075b6:	2321      	movs	r3, #33	; 0x21
 80075b8:	6003      	str	r3, [r0, #0]
 80075ba:	ecbd 8b02 	vpop	{d8}
 80075be:	bd08      	pop	{r3, pc}
 80075c0:	00000000 	.word	0x00000000

080075c4 <__ieee754_sqrtf>:
 80075c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80075c8:	4770      	bx	lr
	...

080075cc <_init>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	bf00      	nop
 80075d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d2:	bc08      	pop	{r3}
 80075d4:	469e      	mov	lr, r3
 80075d6:	4770      	bx	lr

080075d8 <_fini>:
 80075d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075da:	bf00      	nop
 80075dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075de:	bc08      	pop	{r3}
 80075e0:	469e      	mov	lr, r3
 80075e2:	4770      	bx	lr
