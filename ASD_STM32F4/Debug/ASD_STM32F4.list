
ASD_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007020  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004b7c  080071f0  080071f0  000171f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd6c  0800bd6c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd74  0800bd74  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd74  0800bd74  0001bd74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd78  0800bd78  0001bd78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bd7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003ad0  200001e0  0800bf5c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003cb0  0800bf5c  00023cb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b44f  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040d9  00000000  00000000  0003b65f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00010403  00000000  00000000  0003f738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  0004fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000012f8  00000000  00000000  00050a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002535c  00000000  00000000  00051d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c07c  00000000  00000000  00077084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e2b4d  00000000  00000000  00093100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  00175c4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c30  00000000  00000000  00175d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080071d8 	.word	0x080071d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080071d8 	.word	0x080071d8

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b974 	b.w	8001048 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	468e      	mov	lr, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14d      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4694      	mov	ip, r2
 8000d8a:	d969      	bls.n	8000e60 <__udivmoddi4+0xe8>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b152      	cbz	r2, 8000da8 <__udivmoddi4+0x30>
 8000d92:	fa01 f302 	lsl.w	r3, r1, r2
 8000d96:	f1c2 0120 	rsb	r1, r2, #32
 8000d9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da2:	ea41 0e03 	orr.w	lr, r1, r3
 8000da6:	4094      	lsls	r4, r2
 8000da8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dac:	0c21      	lsrs	r1, r4, #16
 8000dae:	fbbe f6f8 	udiv	r6, lr, r8
 8000db2:	fa1f f78c 	uxth.w	r7, ip
 8000db6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dbe:	fb06 f107 	mul.w	r1, r6, r7
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dce:	f080 811f 	bcs.w	8001010 <__udivmoddi4+0x298>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 811c 	bls.w	8001010 <__udivmoddi4+0x298>
 8000dd8:	3e02      	subs	r6, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dec:	fb00 f707 	mul.w	r7, r0, r7
 8000df0:	42a7      	cmp	r7, r4
 8000df2:	d90a      	bls.n	8000e0a <__udivmoddi4+0x92>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	f080 810a 	bcs.w	8001014 <__udivmoddi4+0x29c>
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	f240 8107 	bls.w	8001014 <__udivmoddi4+0x29c>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0e:	1be4      	subs	r4, r4, r7
 8000e10:	2600      	movs	r6, #0
 8000e12:	b11d      	cbz	r5, 8000e1c <__udivmoddi4+0xa4>
 8000e14:	40d4      	lsrs	r4, r2
 8000e16:	2300      	movs	r3, #0
 8000e18:	e9c5 4300 	strd	r4, r3, [r5]
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d909      	bls.n	8000e3a <__udivmoddi4+0xc2>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	f000 80ef 	beq.w	800100a <__udivmoddi4+0x292>
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e32:	4630      	mov	r0, r6
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	fab3 f683 	clz	r6, r3
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d14a      	bne.n	8000ed8 <__udivmoddi4+0x160>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xd4>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 80f9 	bhi.w	800103e <__udivmoddi4+0x2c6>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	469e      	mov	lr, r3
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e0      	beq.n	8000e1c <__udivmoddi4+0xa4>
 8000e5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5e:	e7dd      	b.n	8000e1c <__udivmoddi4+0xa4>
 8000e60:	b902      	cbnz	r2, 8000e64 <__udivmoddi4+0xec>
 8000e62:	deff      	udf	#255	; 0xff
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	f040 8092 	bne.w	8000f92 <__udivmoddi4+0x21a>
 8000e6e:	eba1 010c 	sub.w	r1, r1, ip
 8000e72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e76:	fa1f fe8c 	uxth.w	lr, ip
 8000e7a:	2601      	movs	r6, #1
 8000e7c:	0c20      	lsrs	r0, r4, #16
 8000e7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e82:	fb07 1113 	mls	r1, r7, r3, r1
 8000e86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8a:	fb0e f003 	mul.w	r0, lr, r3
 8000e8e:	4288      	cmp	r0, r1
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x12c>
 8000e92:	eb1c 0101 	adds.w	r1, ip, r1
 8000e96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x12a>
 8000e9c:	4288      	cmp	r0, r1
 8000e9e:	f200 80cb 	bhi.w	8001038 <__udivmoddi4+0x2c0>
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1a09      	subs	r1, r1, r0
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x156>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec4:	d202      	bcs.n	8000ecc <__udivmoddi4+0x154>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	f200 80bb 	bhi.w	8001042 <__udivmoddi4+0x2ca>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	eba4 040e 	sub.w	r4, r4, lr
 8000ed2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed6:	e79c      	b.n	8000e12 <__udivmoddi4+0x9a>
 8000ed8:	f1c6 0720 	rsb	r7, r6, #32
 8000edc:	40b3      	lsls	r3, r6
 8000ede:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eea:	fa01 f306 	lsl.w	r3, r1, r6
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	40f9      	lsrs	r1, r7
 8000ef2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef6:	fa00 f306 	lsl.w	r3, r0, r6
 8000efa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efe:	0c20      	lsrs	r0, r4, #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fb09 1118 	mls	r1, r9, r8, r1
 8000f08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f10:	4288      	cmp	r0, r1
 8000f12:	fa02 f206 	lsl.w	r2, r2, r6
 8000f16:	d90b      	bls.n	8000f30 <__udivmoddi4+0x1b8>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f20:	f080 8088 	bcs.w	8001034 <__udivmoddi4+0x2bc>
 8000f24:	4288      	cmp	r0, r1
 8000f26:	f240 8085 	bls.w	8001034 <__udivmoddi4+0x2bc>
 8000f2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f38:	fb09 1110 	mls	r1, r9, r0, r1
 8000f3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f44:	458e      	cmp	lr, r1
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x1e2>
 8000f48:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f50:	d26c      	bcs.n	800102c <__udivmoddi4+0x2b4>
 8000f52:	458e      	cmp	lr, r1
 8000f54:	d96a      	bls.n	800102c <__udivmoddi4+0x2b4>
 8000f56:	3802      	subs	r0, #2
 8000f58:	4461      	add	r1, ip
 8000f5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f62:	eba1 010e 	sub.w	r1, r1, lr
 8000f66:	42a1      	cmp	r1, r4
 8000f68:	46c8      	mov	r8, r9
 8000f6a:	46a6      	mov	lr, r4
 8000f6c:	d356      	bcc.n	800101c <__udivmoddi4+0x2a4>
 8000f6e:	d053      	beq.n	8001018 <__udivmoddi4+0x2a0>
 8000f70:	b15d      	cbz	r5, 8000f8a <__udivmoddi4+0x212>
 8000f72:	ebb3 0208 	subs.w	r2, r3, r8
 8000f76:	eb61 010e 	sbc.w	r1, r1, lr
 8000f7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f82:	40f1      	lsrs	r1, r6
 8000f84:	431f      	orrs	r7, r3
 8000f86:	e9c5 7100 	strd	r7, r1, [r5]
 8000f8a:	2600      	movs	r6, #0
 8000f8c:	4631      	mov	r1, r6
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	f1c2 0320 	rsb	r3, r2, #32
 8000f96:	40d8      	lsrs	r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000fa0:	4091      	lsls	r1, r2
 8000fa2:	4301      	orrs	r1, r0
 8000fa4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa8:	fa1f fe8c 	uxth.w	lr, ip
 8000fac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb4:	0c0b      	lsrs	r3, r1, #16
 8000fb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fba:	fb00 f60e 	mul.w	r6, r0, lr
 8000fbe:	429e      	cmp	r6, r3
 8000fc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc4:	d908      	bls.n	8000fd8 <__udivmoddi4+0x260>
 8000fc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fce:	d22f      	bcs.n	8001030 <__udivmoddi4+0x2b8>
 8000fd0:	429e      	cmp	r6, r3
 8000fd2:	d92d      	bls.n	8001030 <__udivmoddi4+0x2b8>
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1b9b      	subs	r3, r3, r6
 8000fda:	b289      	uxth	r1, r1
 8000fdc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fe0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fec:	428b      	cmp	r3, r1
 8000fee:	d908      	bls.n	8001002 <__udivmoddi4+0x28a>
 8000ff0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff8:	d216      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d914      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000ffe:	3e02      	subs	r6, #2
 8001000:	4461      	add	r1, ip
 8001002:	1ac9      	subs	r1, r1, r3
 8001004:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001008:	e738      	b.n	8000e7c <__udivmoddi4+0x104>
 800100a:	462e      	mov	r6, r5
 800100c:	4628      	mov	r0, r5
 800100e:	e705      	b.n	8000e1c <__udivmoddi4+0xa4>
 8001010:	4606      	mov	r6, r0
 8001012:	e6e3      	b.n	8000ddc <__udivmoddi4+0x64>
 8001014:	4618      	mov	r0, r3
 8001016:	e6f8      	b.n	8000e0a <__udivmoddi4+0x92>
 8001018:	454b      	cmp	r3, r9
 800101a:	d2a9      	bcs.n	8000f70 <__udivmoddi4+0x1f8>
 800101c:	ebb9 0802 	subs.w	r8, r9, r2
 8001020:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001024:	3801      	subs	r0, #1
 8001026:	e7a3      	b.n	8000f70 <__udivmoddi4+0x1f8>
 8001028:	4646      	mov	r6, r8
 800102a:	e7ea      	b.n	8001002 <__udivmoddi4+0x28a>
 800102c:	4620      	mov	r0, r4
 800102e:	e794      	b.n	8000f5a <__udivmoddi4+0x1e2>
 8001030:	4640      	mov	r0, r8
 8001032:	e7d1      	b.n	8000fd8 <__udivmoddi4+0x260>
 8001034:	46d0      	mov	r8, sl
 8001036:	e77b      	b.n	8000f30 <__udivmoddi4+0x1b8>
 8001038:	3b02      	subs	r3, #2
 800103a:	4461      	add	r1, ip
 800103c:	e732      	b.n	8000ea4 <__udivmoddi4+0x12c>
 800103e:	4630      	mov	r0, r6
 8001040:	e709      	b.n	8000e56 <__udivmoddi4+0xde>
 8001042:	4464      	add	r4, ip
 8001044:	3802      	subs	r0, #2
 8001046:	e742      	b.n	8000ece <__udivmoddi4+0x156>

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <ASD_FFT_Init>:
	for(int i = 0; i < 512; i++)
		usable_magnitudes[i] = 2.0/1024 * fft_magnitudes[i];
}

void ASD_FFT_Init() {
	key_samples[0] = (uint16_t *)(&ADC_SAMPLES[0]);
 800104c:	4a12      	ldr	r2, [pc, #72]	; (8001098 <ASD_FFT_Init+0x4c>)
 800104e:	4b13      	ldr	r3, [pc, #76]	; (800109c <ASD_FFT_Init+0x50>)
void ASD_FFT_Init() {
 8001050:	b513      	push	{r0, r1, r4, lr}
	key_samples[0] = (uint16_t *)(&ADC_SAMPLES[0]);
 8001052:	6013      	str	r3, [r2, #0]
	key_samples[1] = (uint16_t *)(&ADC_SAMPLES[1024]);
 8001054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001058:	6053      	str	r3, [r2, #4]

	key_magnitudes[0] = (float32_t *)(&fft_magnitudes[0]);
 800105a:	4a11      	ldr	r2, [pc, #68]	; (80010a0 <ASD_FFT_Init+0x54>)
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <ASD_FFT_Init+0x58>)
 800105e:	6013      	str	r3, [r2, #0]
	key_magnitudes[1] = (float32_t *)(&fft_magnitudes[1024]);
 8001060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001064:	6053      	str	r3, [r2, #4]

//	for(int i = 0; i < 1024*2; i++)
//		samples_buffer[i] = ADC_SAMPLES[i];

//	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples_buffer, FFT_SAMPLES_COUNT * 2);
	HAL_TIM_Base_Start(&htim6);
 8001066:	4810      	ldr	r0, [pc, #64]	; (80010a8 <ASD_FFT_Init+0x5c>)
	HAL_TIM_Base_Start_IT(&htim7);

	// https://deepbluembedded.com/stm32-dac-sine-wave-generation-stm32-dac-dma-timer-example/
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)DAC_SINE_SAMPLES, DAC_SINE_SAMPLES_COUNT, DAC_ALIGN_12B_R);
    HAL_TIM_Base_Start(&htim2);
 8001068:	4c10      	ldr	r4, [pc, #64]	; (80010ac <ASD_FFT_Init+0x60>)
	HAL_TIM_Base_Start(&htim6);
 800106a:	f001 fd4f 	bl	8002b0c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 800106e:	4810      	ldr	r0, [pc, #64]	; (80010b0 <ASD_FFT_Init+0x64>)
 8001070:	f001 fd82 	bl	8002b78 <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)DAC_SINE_SAMPLES, DAC_SINE_SAMPLES_COUNT, DAC_ALIGN_12B_R);
 8001074:	2100      	movs	r1, #0
 8001076:	4a0f      	ldr	r2, [pc, #60]	; (80010b4 <ASD_FFT_Init+0x68>)
 8001078:	9100      	str	r1, [sp, #0]
 800107a:	2380      	movs	r3, #128	; 0x80
 800107c:	480e      	ldr	r0, [pc, #56]	; (80010b8 <ASD_FFT_Init+0x6c>)
 800107e:	f000 febd 	bl	8001dfc <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2);
 8001082:	4620      	mov	r0, r4
 8001084:	f001 fd42 	bl	8002b0c <HAL_TIM_Base_Start>
		//todo switch channel
	} else {
		if(freq > DAC_FREQ_D_SMP_CNT)
			freq = DAC_FREQ_D_SMP_CNT;
		uint32_t arr = (uint32_t)(DAC_FREQ_D_SMP_CNT/freq);
		__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001088:	6822      	ldr	r2, [r4, #0]
 800108a:	f240 23bf 	movw	r3, #703	; 0x2bf
 800108e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001090:	60e3      	str	r3, [r4, #12]
}
 8001092:	b002      	add	sp, #8
 8001094:	bd10      	pop	{r4, pc}
 8001096:	bf00      	nop
 8001098:	20003250 	.word	0x20003250
 800109c:	08007244 	.word	0x08007244
 80010a0:	20003248 	.word	0x20003248
 80010a4:	20002248 	.word	0x20002248
 80010a8:	20003bc8 	.word	0x20003bc8
 80010ac:	20003b80 	.word	0x20003b80
 80010b0:	20003c10 	.word	0x20003c10
 80010b4:	08008244 	.word	0x08008244
 80010b8:	20003b08 	.word	0x20003b08

080010bc <ASD_update>:
	}
}

void ASD_update() {
}
 80010bc:	4770      	bx	lr
	...

080010c0 <ASD_Print_Results>:

void ASD_Print_Results() {
 80010c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010c4:	ed2d 8b02 	vpush	{d8}
 80010c8:	4d57      	ldr	r5, [pc, #348]	; (8001228 <ASD_Print_Results+0x168>)
 80010ca:	b084      	sub	sp, #16
 80010cc:	462a      	mov	r2, r5
	for(int i = 1; i < 1024 * 2; i+=2)
 80010ce:	2301      	movs	r3, #1
		fft_input[i] = 0.0;
 80010d0:	2000      	movs	r0, #0
	for(int i = 1; i < 1024 * 2; i+=2)
 80010d2:	f640 0101 	movw	r1, #2049	; 0x801
 80010d6:	3302      	adds	r3, #2
 80010d8:	428b      	cmp	r3, r1
		fft_input[i] = 0.0;
 80010da:	6050      	str	r0, [r2, #4]
	for(int i = 1; i < 1024 * 2; i+=2)
 80010dc:	f102 0208 	add.w	r2, r2, #8
 80010e0:	d1f9      	bne.n	80010d6 <ASD_Print_Results+0x16>
		fft_input[i] = (2.0 * ADC_SAMPLES[i/2] / 4095.0) - 1.0;
 80010e2:	f20f 1924 	addw	r9, pc, #292	; 0x124
 80010e6:	e9d9 8900 	ldrd	r8, r9, [r9]
 80010ea:	f8df a170 	ldr.w	sl, [pc, #368]	; 800125c <ASD_Print_Results+0x19c>
 80010ee:	4f4f      	ldr	r7, [pc, #316]	; (800122c <ASD_Print_Results+0x16c>)
	for(int i = 0; i < 1024 * 2; i+=2)
 80010f0:	2400      	movs	r4, #0
		fft_input[i] = (2.0 * ADC_SAMPLES[i/2] / 4095.0) - 1.0;
 80010f2:	2600      	movs	r6, #0
 80010f4:	1063      	asrs	r3, r4, #1
	for(int i = 0; i < 1024 * 2; i+=2)
 80010f6:	3402      	adds	r4, #2
		fft_input[i] = (2.0 * ADC_SAMPLES[i/2] / 4095.0) - 1.0;
 80010f8:	f83a 0013 	ldrh.w	r0, [sl, r3, lsl #1]
 80010fc:	f7ff fa92 	bl	8000624 <__aeabi_i2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	f7ff f942 	bl	800038c <__adddf3>
 8001108:	4642      	mov	r2, r8
 800110a:	464b      	mov	r3, r9
 800110c:	f7ff fc1e 	bl	800094c <__aeabi_ddiv>
 8001110:	4632      	mov	r2, r6
 8001112:	463b      	mov	r3, r7
 8001114:	f7ff f938 	bl	8000388 <__aeabi_dsub>
 8001118:	f7ff fdc6 	bl	8000ca8 <__aeabi_d2f>
	for(int i = 0; i < 1024 * 2; i+=2)
 800111c:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
		fft_input[i] = (2.0 * ADC_SAMPLES[i/2] / 4095.0) - 1.0;
 8001120:	f845 0b08 	str.w	r0, [r5], #8
	for(int i = 0; i < 1024 * 2; i+=2)
 8001124:	d1e6      	bne.n	80010f4 <ASD_Print_Results+0x34>
		fft_magnitudes[i] = 0.0;
 8001126:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112a:	2100      	movs	r1, #0
 800112c:	4840      	ldr	r0, [pc, #256]	; (8001230 <ASD_Print_Results+0x170>)
 800112e:	4d41      	ldr	r5, [pc, #260]	; (8001234 <ASD_Print_Results+0x174>)
 8001130:	f003 fa86 	bl	8004640 <memset>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, fft_input, 0, 1);
 8001134:	2301      	movs	r3, #1
 8001136:	493c      	ldr	r1, [pc, #240]	; (8001228 <ASD_Print_Results+0x168>)
 8001138:	483f      	ldr	r0, [pc, #252]	; (8001238 <ASD_Print_Results+0x178>)
 800113a:	2200      	movs	r2, #0
 800113c:	f002 fe02 	bl	8003d44 <arm_cfft_f32>
	arm_cmplx_mag_f32(fft_input, fft_magnitudes, FFT_SAMPLES_COUNT);
 8001140:	493b      	ldr	r1, [pc, #236]	; (8001230 <ASD_Print_Results+0x170>)
 8001142:	4839      	ldr	r0, [pc, #228]	; (8001228 <ASD_Print_Results+0x168>)
 8001144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001148:	f002 fe76 	bl	8003e38 <arm_cmplx_mag_f32>
	arm_max_f32(fft_magnitudes, FFT_SAMPLES_COUNT, &maxMag, &maxMagIndex);
 800114c:	4b3b      	ldr	r3, [pc, #236]	; (800123c <ASD_Print_Results+0x17c>)
 800114e:	4a3c      	ldr	r2, [pc, #240]	; (8001240 <ASD_Print_Results+0x180>)
 8001150:	4837      	ldr	r0, [pc, #220]	; (8001230 <ASD_Print_Results+0x170>)
 8001152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001156:	f002 fa5f 	bl	8003618 <arm_max_f32>
	for(int i = 0; i < 512; i++)
 800115a:	4a35      	ldr	r2, [pc, #212]	; (8001230 <ASD_Print_Results+0x170>)
		usable_magnitudes[i] = 2.0/1024 * fft_magnitudes[i];
 800115c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8001244 <ASD_Print_Results+0x184>
	arm_max_f32(fft_magnitudes, FFT_SAMPLES_COUNT, &maxMag, &maxMagIndex);
 8001160:	462b      	mov	r3, r5
 8001162:	f44f 7400 	mov.w	r4, #512	; 0x200
		usable_magnitudes[i] = 2.0/1024 * fft_magnitudes[i];
 8001166:	ecf2 7a01 	vldmia	r2!, {s15}
 800116a:	ee67 7a87 	vmul.f32	s15, s15, s14
	for(int i = 0; i < 512; i++)
 800116e:	3c01      	subs	r4, #1
		usable_magnitudes[i] = 2.0/1024 * fft_magnitudes[i];
 8001170:	ece3 7a01 	vstmia	r3!, {s15}
	for(int i = 0; i < 512; i++)
 8001174:	d1f7      	bne.n	8001166 <ASD_Print_Results+0xa6>
		bounds_heights[i] = 0;
 8001176:	4834      	ldr	r0, [pc, #208]	; (8001248 <ASD_Print_Results+0x188>)
			bounds_heights[bins[i]] += usable_magnitudes[i];
 8001178:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8001260 <ASD_Print_Results+0x1a0>
 800117c:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8001248 <ASD_Print_Results+0x188>
		bounds_heights[i] = 0;
 8001180:	224c      	movs	r2, #76	; 0x4c
 8001182:	4621      	mov	r1, r4
 8001184:	f003 fa5c 	bl	8004640 <memset>
		if(usable_magnitudes[i] > 0.01)
 8001188:	a721      	add	r7, pc, #132	; (adr r7, 8001210 <ASD_Print_Results+0x150>)
 800118a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800118e:	ecb5 8a01 	vldmia	r5!, {s16}
 8001192:	ee18 0a10 	vmov	r0, s16
 8001196:	f7ff fa57 	bl	8000648 <__aeabi_f2d>
 800119a:	4632      	mov	r2, r6
 800119c:	463b      	mov	r3, r7
 800119e:	f7ff fd3b 	bl	8000c18 <__aeabi_dcmpgt>
 80011a2:	b148      	cbz	r0, 80011b8 <ASD_Print_Results+0xf8>
			bounds_heights[bins[i]] += usable_magnitudes[i];
 80011a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80011a8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee77 7a88 	vadd.f32	s15, s15, s16
 80011b4:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 512; i++) {
 80011b8:	3401      	adds	r4, #1
 80011ba:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 80011be:	d1e6      	bne.n	800118e <ASD_Print_Results+0xce>
	float32_t sapling_time_millis = 46.5455;//sapling_time_micros/1000.0;
	float32_t sampling_freq_kHz = 44000;//1.0/(sapling_time_millis/FFT_SAMPLES_COUNT); //todo lol
//	int bidx = magnitudesBufferIndex;


	printf("\nSampling time: %.2f us. Sampling frequency: %.2f kHz, idx %d\n", sapling_time_millis, sampling_freq_kHz, samplesBufferIndex);
 80011c0:	4b22      	ldr	r3, [pc, #136]	; (800124c <ASD_Print_Results+0x18c>)
 80011c2:	4823      	ldr	r0, [pc, #140]	; (8001250 <ASD_Print_Results+0x190>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	a313      	add	r3, pc, #76	; (adr r3, 8001218 <ASD_Print_Results+0x158>)
 80011ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ce:	e9cd 2300 	strd	r2, r3, [sp]
 80011d2:	a313      	add	r3, pc, #76	; (adr r3, 8001220 <ASD_Print_Results+0x160>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f003 fea4 	bl	8004f24 <iprintf>

//	printf("\n\nLAST mmmm:\n");
//	for(int i = 0; i < 512; i++)
//		printf("%.3f, ", usable_magnitudes[i]);
//
	printf("\n\nLAST bbbb:\n");
 80011dc:	481d      	ldr	r0, [pc, #116]	; (8001254 <ASD_Print_Results+0x194>)
 80011de:	4d1a      	ldr	r5, [pc, #104]	; (8001248 <ASD_Print_Results+0x188>)
	for(int i = 0; i < 19; i++)
		printf("%.3f, ", bounds_heights[i]);
 80011e0:	4e1d      	ldr	r6, [pc, #116]	; (8001258 <ASD_Print_Results+0x198>)
	printf("\n\nLAST bbbb:\n");
 80011e2:	f003 ff25 	bl	8005030 <puts>
 80011e6:	2413      	movs	r4, #19
		printf("%.3f, ", bounds_heights[i]);
 80011e8:	f855 0b04 	ldr.w	r0, [r5], #4
 80011ec:	f7ff fa2c 	bl	8000648 <__aeabi_f2d>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4630      	mov	r0, r6
 80011f6:	f003 fe95 	bl	8004f24 <iprintf>
	for(int i = 0; i < 19; i++)
 80011fa:	3c01      	subs	r4, #1
 80011fc:	d1f4      	bne.n	80011e8 <ASD_Print_Results+0x128>

//	printf("v: %.3f i: %lu f: %.3f kHz.\n", maxMag, maxMagIndex, maxMagIndex * sampling_freq_kHz);
//	sprintf(print_buffer, "Sampling time: %.2f us. Sampling frequency: %.2f kHz, idx %d\n", sapling_time_millis, sampling_freq_kHz, samplesBufferIndex);

//	printf(print_buffer);
}
 80011fe:	b004      	add	sp, #16
 8001200:	ecbd 8b02 	vpop	{d8}
 8001204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001208:	00000000 	.word	0x00000000
 800120c:	40affe00 	.word	0x40affe00
 8001210:	47ae147b 	.word	0x47ae147b
 8001214:	3f847ae1 	.word	0x3f847ae1
 8001218:	00000000 	.word	0x00000000
 800121c:	40e57c00 	.word	0x40e57c00
 8001220:	00000000 	.word	0x00000000
 8001224:	404745d3 	.word	0x404745d3
 8001228:	20000248 	.word	0x20000248
 800122c:	3ff00000 	.word	0x3ff00000
 8001230:	20002248 	.word	0x20002248
 8001234:	20003260 	.word	0x20003260
 8001238:	08008b74 	.word	0x08008b74
 800123c:	2000325c 	.word	0x2000325c
 8001240:	20003258 	.word	0x20003258
 8001244:	3b000000 	.word	0x3b000000
 8001248:	200001fc 	.word	0x200001fc
 800124c:	20000000 	.word	0x20000000
 8001250:	080071f0 	.word	0x080071f0
 8001254:	0800722f 	.word	0x0800722f
 8001258:	0800723c 	.word	0x0800723c
 800125c:	08007244 	.word	0x08007244
 8001260:	08008344 	.word	0x08008344

08001264 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001264:	b530      	push	{r4, r5, lr}
 8001266:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001268:	2210      	movs	r2, #16
 800126a:	2100      	movs	r1, #0
 800126c:	4668      	mov	r0, sp
 800126e:	f003 f9e7 	bl	8004640 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001272:	4813      	ldr	r0, [pc, #76]	; (80012c0 <MX_ADC1_Init+0x5c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <MX_ADC1_Init+0x60>)
 8001276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800127a:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 800127c:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800127e:	e9c0 2300 	strd	r2, r3, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_ADC1_Init+0x64>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001284:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001286:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001288:	7605      	strb	r5, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800128a:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800128e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001290:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001292:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001294:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001296:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129a:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800129c:	f000 fbf2 	bl	8001a84 <HAL_ADC_Init>
 80012a0:	b108      	cbz	r0, 80012a6 <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 80012a2:	f000 f9a9 	bl	80015f8 <Error_Handler>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012a6:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012a8:	4805      	ldr	r0, [pc, #20]	; (80012c0 <MX_ADC1_Init+0x5c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80012aa:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ac:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 80012ae:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012b2:	f000 fc8d 	bl	8001bd0 <HAL_ADC_ConfigChannel>
 80012b6:	b108      	cbz	r0, 80012bc <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 80012b8:	f000 f99e 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012bc:	b005      	add	sp, #20
 80012be:	bd30      	pop	{r4, r5, pc}
 80012c0:	20003a60 	.word	0x20003a60
 80012c4:	40012000 	.word	0x40012000
 80012c8:	0f000001 	.word	0x0f000001

080012cc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80012cc:	b570      	push	{r4, r5, r6, lr}
 80012ce:	4606      	mov	r6, r0
 80012d0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	2214      	movs	r2, #20
 80012d4:	2100      	movs	r1, #0
 80012d6:	a803      	add	r0, sp, #12
 80012d8:	f003 f9b2 	bl	8004640 <memset>
  if(adcHandle->Instance==ADC1)
 80012dc:	6832      	ldr	r2, [r6, #0]
 80012de:	4b20      	ldr	r3, [pc, #128]	; (8001360 <HAL_ADC_MspInit+0x94>)
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d13a      	bne.n	800135a <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012e4:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80012e8:	2500      	movs	r5, #0
 80012ea:	9501      	str	r5, [sp, #4]
 80012ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	481d      	ldr	r0, [pc, #116]	; (8001364 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80012f0:	4c1d      	ldr	r4, [pc, #116]	; (8001368 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012f6:	645a      	str	r2, [r3, #68]	; 0x44
 80012f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80012fe:	9201      	str	r2, [sp, #4]
 8001300:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	9502      	str	r5, [sp, #8]
 8001304:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001316:	2201      	movs	r2, #1
 8001318:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131c:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f001 f81a 	bl	8002358 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001326:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800132a:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800132e:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001332:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001336:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800133a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800133e:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001342:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001344:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001348:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800134c:	f000 fe36 	bl	8001fbc <HAL_DMA_Init>
 8001350:	b108      	cbz	r0, 8001356 <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8001352:	f000 f951 	bl	80015f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001356:	63b4      	str	r4, [r6, #56]	; 0x38
 8001358:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800135a:	b008      	add	sp, #32
 800135c:	bd70      	pop	{r4, r5, r6, pc}
 800135e:	bf00      	nop
 8001360:	40012000 	.word	0x40012000
 8001364:	40020000 	.word	0x40020000
 8001368:	20003aa8 	.word	0x20003aa8
 800136c:	40026410 	.word	0x40026410

08001370 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001370:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001372:	480c      	ldr	r0, [pc, #48]	; (80013a4 <MX_DAC_Init+0x34>)
 8001374:	4b0c      	ldr	r3, [pc, #48]	; (80013a8 <MX_DAC_Init+0x38>)
 8001376:	6003      	str	r3, [r0, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8001378:	2400      	movs	r4, #0
 800137a:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800137e:	f000 fd29 	bl	8001dd4 <HAL_DAC_Init>
 8001382:	b108      	cbz	r0, 8001388 <MX_DAC_Init+0x18>
  {
    Error_Handler();
 8001384:	f000 f938 	bl	80015f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001388:	2324      	movs	r3, #36	; 0x24
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800138a:	4806      	ldr	r0, [pc, #24]	; (80013a4 <MX_DAC_Init+0x34>)
 800138c:	2200      	movs	r2, #0
 800138e:	4669      	mov	r1, sp
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001390:	e9cd 3400 	strd	r3, r4, [sp]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001394:	f000 fdbc 	bl	8001f10 <HAL_DAC_ConfigChannel>
 8001398:	b108      	cbz	r0, 800139e <MX_DAC_Init+0x2e>
  {
    Error_Handler();
 800139a:	f000 f92d 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800139e:	b002      	add	sp, #8
 80013a0:	bd10      	pop	{r4, pc}
 80013a2:	bf00      	nop
 80013a4:	20003b08 	.word	0x20003b08
 80013a8:	40007400 	.word	0x40007400

080013ac <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80013ac:	b570      	push	{r4, r5, r6, lr}
 80013ae:	4605      	mov	r5, r0
 80013b0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	2214      	movs	r2, #20
 80013b4:	2100      	movs	r1, #0
 80013b6:	a803      	add	r0, sp, #12
 80013b8:	f003 f942 	bl	8004640 <memset>
  if(dacHandle->Instance==DAC)
 80013bc:	682a      	ldr	r2, [r5, #0]
 80013be:	4b21      	ldr	r3, [pc, #132]	; (8001444 <HAL_DAC_MspInit+0x98>)
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d13d      	bne.n	8001440 <HAL_DAC_MspInit+0x94>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013c4:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80013c8:	2600      	movs	r6, #0
 80013ca:	9601      	str	r6, [sp, #4]
 80013cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ce:	481e      	ldr	r0, [pc, #120]	; (8001448 <HAL_DAC_MspInit+0x9c>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80013d0:	4c1e      	ldr	r4, [pc, #120]	; (800144c <HAL_DAC_MspInit+0xa0>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80013d2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013d6:	641a      	str	r2, [r3, #64]	; 0x40
 80013d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013da:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80013de:	9201      	str	r2, [sp, #4]
 80013e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	9602      	str	r6, [sp, #8]
 80013e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80013e6:	f042 0201 	orr.w	r2, r2, #1
 80013ea:	631a      	str	r2, [r3, #48]	; 0x30
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f6:	2210      	movs	r2, #16
 80013f8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fa:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fc:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001400:	f000 ffaa 	bl	8002358 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001404:	4912      	ldr	r1, [pc, #72]	; (8001450 <HAL_DAC_MspInit+0xa4>)
 8001406:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 800140a:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800140e:	2340      	movs	r3, #64	; 0x40
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001410:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001414:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800141c:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001420:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8001424:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001428:	4620      	mov	r0, r4
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800142a:	e9c4 c306 	strd	ip, r3, [r4, #24]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142e:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001432:	f000 fdc3 	bl	8001fbc <HAL_DMA_Init>
 8001436:	b108      	cbz	r0, 800143c <HAL_DAC_MspInit+0x90>
    {
      Error_Handler();
 8001438:	f000 f8de 	bl	80015f8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 800143c:	60ac      	str	r4, [r5, #8]
 800143e:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001440:	b008      	add	sp, #32
 8001442:	bd70      	pop	{r4, r5, r6, pc}
 8001444:	40007400 	.word	0x40007400
 8001448:	40020000 	.word	0x40020000
 800144c:	20003b1c 	.word	0x20003b1c
 8001450:	40026088 	.word	0x40026088

08001454 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001454:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_DMA_Init+0x54>)
 8001458:	2200      	movs	r2, #0
 800145a:	9200      	str	r2, [sp, #0]
 800145c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800145e:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001462:	6319      	str	r1, [r3, #48]	; 0x30
 8001464:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001466:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800146a:	9100      	str	r1, [sp, #0]
 800146c:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800146e:	9201      	str	r2, [sp, #4]
 8001470:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001472:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8001476:	6319      	str	r1, [r3, #48]	; 0x30
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800147e:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001480:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001482:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001484:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001486:	f000 fc51 	bl	8001d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800148a:	2010      	movs	r0, #16
 800148c:	f000 fc80 	bl	8001d90 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2102      	movs	r1, #2
 8001494:	2038      	movs	r0, #56	; 0x38
 8001496:	f000 fc49 	bl	8001d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800149a:	2038      	movs	r0, #56	; 0x38

}
 800149c:	b003      	add	sp, #12
 800149e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014a2:	f000 bc75 	b.w	8001d90 <HAL_NVIC_EnableIRQ>
 80014a6:	bf00      	nop
 80014a8:	40023800 	.word	0x40023800

080014ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014ac:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_GPIO_Init+0x20>)
 80014b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80014b6:	f042 0201 	orr.w	r2, r2, #1
 80014ba:	631a      	str	r2, [r3, #48]	; 0x30
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	9b01      	ldr	r3, [sp, #4]

}
 80014c6:	b002      	add	sp, #8
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800

080014d0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80014d0:	b507      	push	{r0, r1, r2, lr}
  if (ch == '\n') {
 80014d2:	280a      	cmp	r0, #10
int __io_putchar(int ch) {
 80014d4:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 80014d6:	d102      	bne.n	80014de <__io_putchar+0xe>
    __io_putchar('\r');
 80014d8:	200d      	movs	r0, #13
 80014da:	f7ff fff9 	bl	80014d0 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	2201      	movs	r2, #1
 80014e4:	a901      	add	r1, sp, #4
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <__io_putchar+0x24>)
 80014e8:	f001 fe8e 	bl	8003208 <HAL_UART_Transmit>
  return 1;
}
 80014ec:	2001      	movs	r0, #1
 80014ee:	b003      	add	sp, #12
 80014f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80014f4:	20003c58 	.word	0x20003c58

080014f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
  if (htim == &htim7) {
 80014f8:	4b02      	ldr	r3, [pc, #8]	; (8001504 <HAL_TIM_PeriodElapsedCallback+0xc>)
 80014fa:	4283      	cmp	r3, r0
 80014fc:	d101      	bne.n	8001502 <HAL_TIM_PeriodElapsedCallback+0xa>
    ASD_update();
 80014fe:	f7ff bddd 	b.w	80010bc <ASD_update>
    //raczej po tym trzeba wyliczyc animacje
  }
}
 8001502:	4770      	bx	lr
 8001504:	20003c10 	.word	0x20003c10

08001508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001508:	b510      	push	{r4, lr}
 800150a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800150c:	2214      	movs	r2, #20
 800150e:	2100      	movs	r1, #0
 8001510:	a808      	add	r0, sp, #32
 8001512:	f003 f895 	bl	8004640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001516:	2214      	movs	r2, #20
 8001518:	2100      	movs	r1, #0
 800151a:	a802      	add	r0, sp, #8
 800151c:	f003 f890 	bl	8004640 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	4a21      	ldr	r2, [pc, #132]	; (80015a8 <SystemClock_Config+0xa0>)
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8001528:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800152c:	6411      	str	r1, [r2, #64]	; 0x40
 800152e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001530:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001534:	9200      	str	r2, [sp, #0]
 8001536:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001538:	4a1c      	ldr	r2, [pc, #112]	; (80015ac <SystemClock_Config+0xa4>)
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	6811      	ldr	r1, [r2, #0]
 800153e:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8001542:	6011      	str	r1, [r2, #0]
 8001544:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001546:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001548:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
 800154c:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800154e:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001552:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001554:	23b4      	movs	r3, #180	; 0xb4
 8001556:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155a:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800155c:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800155e:	2101      	movs	r1, #1
 8001560:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001562:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001564:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001568:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 800156c:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800156e:	f001 f905 	bl	800277c <HAL_RCC_OscConfig>
 8001572:	b108      	cbz	r0, 8001578 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001574:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001576:	e7fe      	b.n	8001576 <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001578:	f000 ffc2 	bl	8002500 <HAL_PWREx_EnableOverDrive>
 800157c:	b108      	cbz	r0, 8001582 <SystemClock_Config+0x7a>
 800157e:	b672      	cpsid	i
  while (1)
 8001580:	e7fe      	b.n	8001580 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001582:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001584:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001588:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800158a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001592:	2105      	movs	r1, #5
 8001594:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001596:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800159a:	f000 ffeb 	bl	8002574 <HAL_RCC_ClockConfig>
 800159e:	b108      	cbz	r0, 80015a4 <SystemClock_Config+0x9c>
 80015a0:	b672      	cpsid	i
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <SystemClock_Config+0x9a>
}
 80015a4:	b014      	add	sp, #80	; 0x50
 80015a6:	bd10      	pop	{r4, pc}
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40007000 	.word	0x40007000

080015b0 <main>:
{
 80015b0:	b508      	push	{r3, lr}
  HAL_Init();
 80015b2:	f000 fa27 	bl	8001a04 <HAL_Init>
  SystemClock_Config();
 80015b6:	f7ff ffa7 	bl	8001508 <SystemClock_Config>
  MX_GPIO_Init();
 80015ba:	f7ff ff77 	bl	80014ac <MX_GPIO_Init>
  MX_DMA_Init();
 80015be:	f7ff ff49 	bl	8001454 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80015c2:	f000 f977 	bl	80018b4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80015c6:	f7ff fe4d 	bl	8001264 <MX_ADC1_Init>
  MX_TIM6_Init();
 80015ca:	f000 f8eb 	bl	80017a4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80015ce:	f000 f90b 	bl	80017e8 <MX_TIM7_Init>
  MX_DAC_Init();
 80015d2:	f7ff fecd 	bl	8001370 <MX_DAC_Init>
  MX_TIM2_Init();
 80015d6:	f000 f8b1 	bl	800173c <MX_TIM2_Init>
  ASD_FFT_Init();
 80015da:	f7ff fd37 	bl	800104c <ASD_FFT_Init>
  printf("Loop started\n");
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <main+0x44>)
 80015e0:	f003 fd26 	bl	8005030 <puts>
	  ASD_Print_Results();
 80015e4:	f7ff fd6c 	bl	80010c0 <ASD_Print_Results>
	  HAL_Delay(5000);
 80015e8:	f241 3088 	movw	r0, #5000	; 0x1388
 80015ec:	f000 fa36 	bl	8001a5c <HAL_Delay>
  while (1)
 80015f0:	e7f8      	b.n	80015e4 <main+0x34>
 80015f2:	bf00      	nop
 80015f4:	08008b44 	.word	0x08008b44

080015f8 <Error_Handler>:
 80015f8:	b672      	cpsid	i
  while (1)
 80015fa:	e7fe      	b.n	80015fa <Error_Handler+0x2>

080015fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015fc:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_MspInit+0x34>)
 8001600:	2100      	movs	r1, #0
 8001602:	9100      	str	r1, [sp, #0]
 8001604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800160a:	645a      	str	r2, [r3, #68]	; 0x44
 800160c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800160e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001612:	9200      	str	r2, [sp, #0]
 8001614:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	9101      	str	r1, [sp, #4]
 8001618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	9301      	str	r3, [sp, #4]
 8001628:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162a:	b002      	add	sp, #8
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800

08001634 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001634:	e7fe      	b.n	8001634 <NMI_Handler>

08001636 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <HardFault_Handler>

08001638 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler>

0800163a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163a:	e7fe      	b.n	800163a <BusFault_Handler>

0800163c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler>

0800163e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800163e:	4770      	bx	lr

08001640 <DebugMon_Handler>:
 8001640:	4770      	bx	lr

08001642 <PendSV_Handler>:
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f000 b9f8 	b.w	8001a38 <HAL_IncTick>

08001648 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001648:	4801      	ldr	r0, [pc, #4]	; (8001650 <DMA1_Stream5_IRQHandler+0x8>)
 800164a:	f000 bdc7 	b.w	80021dc <HAL_DMA_IRQHandler>
 800164e:	bf00      	nop
 8001650:	20003b1c 	.word	0x20003b1c

08001654 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001654:	4801      	ldr	r0, [pc, #4]	; (800165c <USART2_IRQHandler+0x8>)
 8001656:	f001 be8f 	b.w	8003378 <HAL_UART_IRQHandler>
 800165a:	bf00      	nop
 800165c:	20003c58 	.word	0x20003c58

08001660 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001660:	4801      	ldr	r0, [pc, #4]	; (8001668 <TIM7_IRQHandler+0x8>)
 8001662:	f001 bac7 	b.w	8002bf4 <HAL_TIM_IRQHandler>
 8001666:	bf00      	nop
 8001668:	20003c10 	.word	0x20003c10

0800166c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800166c:	4801      	ldr	r0, [pc, #4]	; (8001674 <DMA2_Stream0_IRQHandler+0x8>)
 800166e:	f000 bdb5 	b.w	80021dc <HAL_DMA_IRQHandler>
 8001672:	bf00      	nop
 8001674:	20003aa8 	.word	0x20003aa8

08001678 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001678:	2001      	movs	r0, #1
 800167a:	4770      	bx	lr

0800167c <_kill>:

int _kill(int pid, int sig)
{
 800167c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167e:	f002 ffb5 	bl	80045ec <__errno>
 8001682:	2316      	movs	r3, #22
 8001684:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001686:	f04f 30ff 	mov.w	r0, #4294967295
 800168a:	bd08      	pop	{r3, pc}

0800168c <_exit>:

void _exit (int status)
{
 800168c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800168e:	f002 ffad 	bl	80045ec <__errno>
 8001692:	2316      	movs	r3, #22
 8001694:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001696:	e7fe      	b.n	8001696 <_exit+0xa>

08001698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	460d      	mov	r5, r1
 800169c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	460e      	mov	r6, r1
 80016a0:	1b73      	subs	r3, r6, r5
 80016a2:	429c      	cmp	r4, r3
 80016a4:	dc01      	bgt.n	80016aa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80016a6:	4620      	mov	r0, r4
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	e7f5      	b.n	80016a0 <_read+0x8>

080016b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	460d      	mov	r5, r1
 80016b8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	460e      	mov	r6, r1
 80016bc:	1b73      	subs	r3, r6, r5
 80016be:	429c      	cmp	r4, r3
 80016c0:	dc01      	bgt.n	80016c6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016c2:	4620      	mov	r0, r4
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016c6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016ca:	f7ff ff01 	bl	80014d0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	e7f5      	b.n	80016bc <_write+0x8>

080016d0 <_close>:

int _close(int file)
{
	return -1;
}
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	4770      	bx	lr

080016d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016da:	604b      	str	r3, [r1, #4]
	return 0;
}
 80016dc:	2000      	movs	r0, #0
 80016de:	4770      	bx	lr

080016e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016e0:	2001      	movs	r0, #1
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016e4:	2000      	movs	r0, #0
 80016e6:	4770      	bx	lr

080016e8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4a0b      	ldr	r2, [pc, #44]	; (8001718 <_sbrk+0x30>)
 80016ea:	6811      	ldr	r1, [r2, #0]
{
 80016ec:	b510      	push	{r4, lr}
 80016ee:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016f0:	b909      	cbnz	r1, 80016f6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016f2:	490a      	ldr	r1, [pc, #40]	; (800171c <_sbrk+0x34>)
 80016f4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	6810      	ldr	r0, [r2, #0]
 80016f8:	4909      	ldr	r1, [pc, #36]	; (8001720 <_sbrk+0x38>)
 80016fa:	4c0a      	ldr	r4, [pc, #40]	; (8001724 <_sbrk+0x3c>)
 80016fc:	4403      	add	r3, r0
 80016fe:	1b09      	subs	r1, r1, r4
 8001700:	428b      	cmp	r3, r1
 8001702:	d906      	bls.n	8001712 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001704:	f002 ff72 	bl	80045ec <__errno>
 8001708:	230c      	movs	r3, #12
 800170a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800170c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001710:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001712:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001714:	e7fc      	b.n	8001710 <_sbrk+0x28>
 8001716:	bf00      	nop
 8001718:	20003b7c 	.word	0x20003b7c
 800171c:	20003cb0 	.word	0x20003cb0
 8001720:	20020000 	.word	0x20020000
 8001724:	00000400 	.word	0x00000400

08001728 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001728:	4a03      	ldr	r2, [pc, #12]	; (8001738 <SystemInit+0x10>)
 800172a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800172e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001732:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <MX_TIM2_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800173c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173e:	2210      	movs	r2, #16
 8001740:	2100      	movs	r1, #0
 8001742:	a802      	add	r0, sp, #8
 8001744:	f002 ff7c 	bl	8004640 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001748:	4814      	ldr	r0, [pc, #80]	; (800179c <MX_TIM2_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174a:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800174c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8001750:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 703000-1;
 8001754:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <MX_TIM2_Init+0x64>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	6083      	str	r3, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001758:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800175c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001760:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001762:	f001 fb4f 	bl	8002e04 <HAL_TIM_Base_Init>
 8001766:	b108      	cbz	r0, 800176c <MX_TIM2_Init+0x30>
  {
    Error_Handler();
 8001768:	f7ff ff46 	bl	80015f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800176c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001770:	480a      	ldr	r0, [pc, #40]	; (800179c <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001772:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001774:	a902      	add	r1, sp, #8
 8001776:	f001 fb7b 	bl	8002e70 <HAL_TIM_ConfigClockSource>
 800177a:	b108      	cbz	r0, 8001780 <MX_TIM2_Init+0x44>
  {
    Error_Handler();
 800177c:	f7ff ff3c 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001780:	2220      	movs	r2, #32
 8001782:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_TIM2_Init+0x60>)
 8001786:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001788:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800178c:	f001 fc0c 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001790:	b108      	cbz	r0, 8001796 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001792:	f7ff ff31 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001796:	b007      	add	sp, #28
 8001798:	f85d fb04 	ldr.w	pc, [sp], #4
 800179c:	20003b80 	.word	0x20003b80
 80017a0:	000aba17 	.word	0x000aba17

080017a4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80017a4:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 90-1;
 80017a6:	4a0e      	ldr	r2, [pc, #56]	; (80017e0 <MX_TIM6_Init+0x3c>)
  htim6.Instance = TIM6;
 80017a8:	480e      	ldr	r0, [pc, #56]	; (80017e4 <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = 90-1;
 80017aa:	2359      	movs	r3, #89	; 0x59
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ac:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 90-1;
 80017ae:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 80017b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b6:	e9cd 4400 	strd	r4, r4, [sp]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 65535;
 80017bc:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017c0:	f001 fb20 	bl	8002e04 <HAL_TIM_Base_Init>
 80017c4:	b108      	cbz	r0, 80017ca <MX_TIM6_Init+0x26>
  {
    Error_Handler();
 80017c6:	f7ff ff17 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <MX_TIM6_Init+0x40>)
 80017cc:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ce:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017d2:	f001 fbe9 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80017d6:	b108      	cbz	r0, 80017dc <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 80017d8:	f7ff ff0e 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017dc:	b002      	add	sp, #8
 80017de:	bd10      	pop	{r4, pc}
 80017e0:	40001000 	.word	0x40001000
 80017e4:	20003bc8 	.word	0x20003bc8

080017e8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017e8:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 90-1;
 80017ea:	4a0e      	ldr	r2, [pc, #56]	; (8001824 <MX_TIM7_Init+0x3c>)
  htim7.Instance = TIM7;
 80017ec:	480e      	ldr	r0, [pc, #56]	; (8001828 <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = 90-1;
 80017ee:	2359      	movs	r3, #89	; 0x59
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 90-1;
 80017f2:	e9c0 2300 	strd	r2, r3, [r0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 100-1;
 80017f6:	2363      	movs	r3, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f8:	e9cd 4400 	strd	r4, r4, [sp]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017fc:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 100-1;
 80017fe:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001800:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001802:	f001 faff 	bl	8002e04 <HAL_TIM_Base_Init>
 8001806:	b108      	cbz	r0, 800180c <MX_TIM7_Init+0x24>
  {
    Error_Handler();
 8001808:	f7ff fef6 	bl	80015f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800180c:	4806      	ldr	r0, [pc, #24]	; (8001828 <MX_TIM7_Init+0x40>)
 800180e:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001814:	f001 fbc8 	bl	8002fa8 <HAL_TIMEx_MasterConfigSynchronization>
 8001818:	b108      	cbz	r0, 800181e <MX_TIM7_Init+0x36>
  {
    Error_Handler();
 800181a:	f7ff feed 	bl	80015f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800181e:	b002      	add	sp, #8
 8001820:	bd10      	pop	{r4, pc}
 8001822:	bf00      	nop
 8001824:	40001400 	.word	0x40001400
 8001828:	20003c10 	.word	0x20003c10

0800182c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800182c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 800182e:	6803      	ldr	r3, [r0, #0]
 8001830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001834:	d10e      	bne.n	8001854 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	9301      	str	r3, [sp, #4]
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <HAL_TIM_Base_MspInit+0x7c>)
 800183c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183e:	f042 0201 	orr.w	r2, r2, #1
 8001842:	641a      	str	r2, [r3, #64]	; 0x40
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800184e:	b005      	add	sp, #20
 8001850:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM6)
 8001854:	4a15      	ldr	r2, [pc, #84]	; (80018ac <HAL_TIM_Base_MspInit+0x80>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10c      	bne.n	8001874 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	9302      	str	r3, [sp, #8]
 800185e:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <HAL_TIM_Base_MspInit+0x7c>)
 8001860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001862:	f042 0210 	orr.w	r2, r2, #16
 8001866:	641a      	str	r2, [r3, #64]	; 0x40
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	9302      	str	r3, [sp, #8]
 8001870:	9b02      	ldr	r3, [sp, #8]
 8001872:	e7ec      	b.n	800184e <HAL_TIM_Base_MspInit+0x22>
  else if(tim_baseHandle->Instance==TIM7)
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_TIM_Base_MspInit+0x84>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d1e9      	bne.n	800184e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_TIM_Base_MspInit+0x7c>)
 800187c:	2200      	movs	r2, #0
 800187e:	9203      	str	r2, [sp, #12]
 8001880:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8001882:	f041 0120 	orr.w	r1, r1, #32
 8001886:	6419      	str	r1, [r3, #64]	; 0x40
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8001890:	2104      	movs	r1, #4
 8001892:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001894:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8001896:	f000 fa49 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800189a:	2037      	movs	r0, #55	; 0x37
}
 800189c:	b005      	add	sp, #20
 800189e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018a2:	f000 ba75 	b.w	8001d90 <HAL_NVIC_EnableIRQ>
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40001000 	.word	0x40001000
 80018b0:	40001400 	.word	0x40001400

080018b4 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80018b6:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <MX_USART2_UART_Init+0x34>)
{
 80018b8:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 80018ba:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80018be:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018c2:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018c4:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c6:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ca:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ce:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018d0:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018d2:	f001 fc6b 	bl	80031ac <HAL_UART_Init>
 80018d6:	b118      	cbz	r0, 80018e0 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80018dc:	f7ff be8c 	b.w	80015f8 <Error_Handler>
}
 80018e0:	bd08      	pop	{r3, pc}
 80018e2:	bf00      	nop
 80018e4:	20003c58 	.word	0x20003c58
 80018e8:	40004400 	.word	0x40004400

080018ec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018ec:	b510      	push	{r4, lr}
 80018ee:	4604      	mov	r4, r0
 80018f0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f2:	2214      	movs	r2, #20
 80018f4:	2100      	movs	r1, #0
 80018f6:	a803      	add	r0, sp, #12
 80018f8:	f002 fea2 	bl	8004640 <memset>
  if(uartHandle->Instance==USART2)
 80018fc:	6822      	ldr	r2, [r4, #0]
 80018fe:	4b18      	ldr	r3, [pc, #96]	; (8001960 <HAL_UART_MspInit+0x74>)
 8001900:	429a      	cmp	r2, r3
 8001902:	d12a      	bne.n	800195a <HAL_UART_MspInit+0x6e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001904:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001908:	2400      	movs	r4, #0
 800190a:	9401      	str	r4, [sp, #4]
 800190c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190e:	4815      	ldr	r0, [pc, #84]	; (8001964 <HAL_UART_MspInit+0x78>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001910:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001914:	641a      	str	r2, [r3, #64]	; 0x40
 8001916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001918:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800191c:	9201      	str	r2, [sp, #4]
 800191e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001920:	9402      	str	r4, [sp, #8]
 8001922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001924:	f042 0201 	orr.w	r2, r2, #1
 8001928:	631a      	str	r2, [r3, #48]	; 0x30
 800192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192c:	f003 0301 	and.w	r3, r3, #1
 8001930:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001934:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800193c:	2103      	movs	r1, #3
 800193e:	2307      	movs	r3, #7
 8001940:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001944:	a903      	add	r1, sp, #12
 8001946:	f000 fd07 	bl	8002358 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800194a:	2026      	movs	r0, #38	; 0x26
 800194c:	4622      	mov	r2, r4
 800194e:	4621      	mov	r1, r4
 8001950:	f000 f9ec 	bl	8001d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001954:	2026      	movs	r0, #38	; 0x26
 8001956:	f000 fa1b 	bl	8001d90 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800195a:	b008      	add	sp, #32
 800195c:	bd10      	pop	{r4, pc}
 800195e:	bf00      	nop
 8001960:	40004400 	.word	0x40004400
 8001964:	40020000 	.word	0x40020000

08001968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800196e:	490e      	ldr	r1, [pc, #56]	; (80019a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001970:	4a0e      	ldr	r2, [pc, #56]	; (80019ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001974:	e002      	b.n	800197c <LoopCopyDataInit>

08001976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800197a:	3304      	adds	r3, #4

0800197c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800197c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800197e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001980:	d3f9      	bcc.n	8001976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001982:	4a0b      	ldr	r2, [pc, #44]	; (80019b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001984:	4c0b      	ldr	r4, [pc, #44]	; (80019b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001988:	e001      	b.n	800198e <LoopFillZerobss>

0800198a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800198a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800198c:	3204      	adds	r2, #4

0800198e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800198e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001990:	d3fb      	bcc.n	800198a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001992:	f7ff fec9 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001996:	f002 fe2f 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800199a:	f7ff fe09 	bl	80015b0 <main>
  bx  lr    
 800199e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019ac:	0800bd7c 	.word	0x0800bd7c
  ldr r2, =_sbss
 80019b0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019b4:	20003cb0 	.word	0x20003cb0

080019b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b8:	e7fe      	b.n	80019b8 <ADC_IRQHandler>
	...

080019bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019bc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019be:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_InitTick+0x3c>)
 80019c0:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <HAL_InitTick+0x40>)
{
 80019c2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c4:	7818      	ldrb	r0, [r3, #0]
 80019c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ca:	fbb3 f3f0 	udiv	r3, r3, r0
 80019ce:	6810      	ldr	r0, [r2, #0]
 80019d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80019d4:	f000 f9ea 	bl	8001dac <HAL_SYSTICK_Config>
 80019d8:	4604      	mov	r4, r0
 80019da:	b958      	cbnz	r0, 80019f4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019dc:	2d0f      	cmp	r5, #15
 80019de:	d809      	bhi.n	80019f4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	4602      	mov	r2, r0
 80019e2:	4629      	mov	r1, r5
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f9a0 	bl	8001d2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <HAL_InitTick+0x44>)
 80019ee:	4620      	mov	r0, r4
 80019f0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80019f2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80019f4:	2001      	movs	r0, #1
 80019f6:	e7fc      	b.n	80019f2 <HAL_InitTick+0x36>
 80019f8:	20000004 	.word	0x20000004
 80019fc:	20000008 	.word	0x20000008
 8001a00:	2000000c 	.word	0x2000000c

08001a04 <HAL_Init>:
{
 8001a04:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_Init+0x30>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a0e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001a16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a1e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a20:	2003      	movs	r0, #3
 8001a22:	f000 f971 	bl	8001d08 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a26:	200f      	movs	r0, #15
 8001a28:	f7ff ffc8 	bl	80019bc <HAL_InitTick>
  HAL_MspInit();
 8001a2c:	f7ff fde6 	bl	80015fc <HAL_MspInit>
}
 8001a30:	2000      	movs	r0, #0
 8001a32:	bd08      	pop	{r3, pc}
 8001a34:	40023c00 	.word	0x40023c00

08001a38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001a38:	4a03      	ldr	r2, [pc, #12]	; (8001a48 <HAL_IncTick+0x10>)
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_IncTick+0x14>)
 8001a3c:	6811      	ldr	r1, [r2, #0]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	440b      	add	r3, r1
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	20003c9c 	.word	0x20003c9c
 8001a4c:	20000008 	.word	0x20000008

08001a50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001a50:	4b01      	ldr	r3, [pc, #4]	; (8001a58 <HAL_GetTick+0x8>)
 8001a52:	6818      	ldr	r0, [r3, #0]
}
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20003c9c 	.word	0x20003c9c

08001a5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a5c:	b538      	push	{r3, r4, r5, lr}
 8001a5e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001a60:	f7ff fff6 	bl	8001a50 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a64:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	bf1c      	itt	ne
 8001a68:	4b05      	ldrne	r3, [pc, #20]	; (8001a80 <HAL_Delay+0x24>)
 8001a6a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001a6c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001a6e:	bf18      	it	ne
 8001a70:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a72:	f7ff ffed 	bl	8001a50 <HAL_GetTick>
 8001a76:	1b43      	subs	r3, r0, r5
 8001a78:	42a3      	cmp	r3, r4
 8001a7a:	d3fa      	bcc.n	8001a72 <HAL_Delay+0x16>
  {
  }
}
 8001a7c:	bd38      	pop	{r3, r4, r5, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008

08001a84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a84:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a86:	4604      	mov	r4, r0
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	f000 809b 	beq.w	8001bc4 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a8e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001a90:	b925      	cbnz	r5, 8001a9c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a92:	f7ff fc1b 	bl	80012cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a96:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a98:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a9e:	06db      	lsls	r3, r3, #27
 8001aa0:	f100 808e 	bmi.w	8001bc0 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001aa6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aaa:	f023 0302 	bic.w	r3, r3, #2
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ab4:	4b44      	ldr	r3, [pc, #272]	; (8001bc8 <HAL_ADC_Init+0x144>)
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001abc:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	6861      	ldr	r1, [r4, #4]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ac6:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ac8:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ada:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001adc:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ade:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ae2:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ae4:	685a      	ldr	r2, [r3, #4]
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aea:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001aec:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001aee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	430a      	orrs	r2, r1
 8001af8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001afa:	4934      	ldr	r1, [pc, #208]	; (8001bcc <HAL_ADC_Init+0x148>)
 8001afc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001afe:	428a      	cmp	r2, r1
 8001b00:	d052      	beq.n	8001ba8 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b02:	6899      	ldr	r1, [r3, #8]
 8001b04:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8001b08:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b0a:	6899      	ldr	r1, [r3, #8]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b10:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b12:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b1e:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	f022 0202 	bic.w	r2, r2, #2
 8001b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	7e21      	ldrb	r1, [r4, #24]
 8001b2c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001b30:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b32:	f894 2020 	ldrb.w	r2, [r4, #32]
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d03e      	beq.n	8001bb8 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b3a:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	3901      	subs	r1, #1
 8001b50:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b54:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b58:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b62:	3901      	subs	r1, #1
 8001b64:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001b68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001b78:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001b7c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b7e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b80:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b88:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001b8a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b8c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001b90:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001b92:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8001b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001b96:	f023 0303 	bic.w	r3, r3, #3
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001ba6:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb6:	e7b2      	b.n	8001b1e <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bbe:	e7c9      	b.n	8001b54 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001bc0:	2001      	movs	r0, #1
 8001bc2:	e7ed      	b.n	8001ba0 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8001bc4:	2001      	movs	r0, #1
 8001bc6:	e7ee      	b.n	8001ba6 <HAL_ADC_Init+0x122>
 8001bc8:	40012300 	.word	0x40012300
 8001bcc:	0f000001 	.word	0x0f000001

08001bd0 <HAL_ADC_ConfigChannel>:
{
 8001bd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001bd6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d069      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0xe2>
 8001bde:	2301      	movs	r3, #1
 8001be0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001be4:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001be6:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001be8:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bea:	2d09      	cmp	r5, #9
 8001bec:	b2ac      	uxth	r4, r5
 8001bee:	d934      	bls.n	8001c5a <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bf0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001bf4:	68df      	ldr	r7, [r3, #12]
 8001bf6:	3a1e      	subs	r2, #30
 8001bf8:	f04f 0c07 	mov.w	ip, #7
 8001bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001c00:	ea27 070c 	bic.w	r7, r7, ip
 8001c04:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c06:	68df      	ldr	r7, [r3, #12]
 8001c08:	fa06 f202 	lsl.w	r2, r6, r2
 8001c0c:	433a      	orrs	r2, r7
 8001c0e:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001c10:	6849      	ldr	r1, [r1, #4]
 8001c12:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c14:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8001c18:	d82f      	bhi.n	8001c7a <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c1a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c1c:	3a05      	subs	r2, #5
 8001c1e:	261f      	movs	r6, #31
 8001c20:	4096      	lsls	r6, r2
 8001c22:	ea21 0106 	bic.w	r1, r1, r6
 8001c26:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2a:	fa04 f202 	lsl.w	r2, r4, r2
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001c32:	4a30      	ldr	r2, [pc, #192]	; (8001cf4 <HAL_ADC_ConfigChannel+0x124>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d10a      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x7e>
 8001c38:	2d12      	cmp	r5, #18
 8001c3a:	d13c      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001c3c:	4b2e      	ldr	r3, [pc, #184]	; (8001cf8 <HAL_ADC_ConfigChannel+0x128>)
 8001c3e:	685a      	ldr	r2, [r3, #4]
 8001c40:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001c44:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c4c:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001c54:	4618      	mov	r0, r3
}
 8001c56:	b003      	add	sp, #12
 8001c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c5a:	691f      	ldr	r7, [r3, #16]
 8001c5c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001c60:	f04f 0c07 	mov.w	ip, #7
 8001c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8001c68:	ea27 070c 	bic.w	r7, r7, ip
 8001c6c:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c6e:	691f      	ldr	r7, [r3, #16]
 8001c70:	fa06 f202 	lsl.w	r2, r6, r2
 8001c74:	433a      	orrs	r2, r7
 8001c76:	611a      	str	r2, [r3, #16]
 8001c78:	e7ca      	b.n	8001c10 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001c7a:	290c      	cmp	r1, #12
 8001c7c:	f04f 011f 	mov.w	r1, #31
 8001c80:	d80b      	bhi.n	8001c9a <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c82:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8001c84:	3a23      	subs	r2, #35	; 0x23
 8001c86:	4091      	lsls	r1, r2
 8001c88:	ea26 0101 	bic.w	r1, r6, r1
 8001c8c:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c90:	fa04 f202 	lsl.w	r2, r4, r2
 8001c94:	430a      	orrs	r2, r1
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
 8001c98:	e7cb      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c9a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001c9c:	3a41      	subs	r2, #65	; 0x41
 8001c9e:	4091      	lsls	r1, r2
 8001ca0:	ea26 0101 	bic.w	r1, r6, r1
 8001ca4:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ca6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ca8:	fa04 f202 	lsl.w	r2, r4, r2
 8001cac:	430a      	orrs	r2, r1
 8001cae:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cb0:	e7bf      	b.n	8001c32 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	e7cf      	b.n	8001c56 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_ADC_ConfigChannel+0x12c>)
 8001cb8:	429d      	cmp	r5, r3
 8001cba:	d001      	beq.n	8001cc0 <HAL_ADC_ConfigChannel+0xf0>
 8001cbc:	2d11      	cmp	r5, #17
 8001cbe:	d1c6      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001cc0:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <HAL_ADC_ConfigChannel+0x128>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001cc8:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001cca:	685a      	ldr	r2, [r3, #4]
 8001ccc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001cd0:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <HAL_ADC_ConfigChannel+0x12c>)
 8001cd4:	429d      	cmp	r5, r3
 8001cd6:	d1ba      	bne.n	8001c4e <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <HAL_ADC_ConfigChannel+0x130>)
 8001cda:	4a0a      	ldr	r2, [pc, #40]	; (8001d04 <HAL_ADC_ConfigChannel+0x134>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ce2:	220a      	movs	r2, #10
 8001ce4:	4353      	muls	r3, r2
        counter--;
 8001ce6:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001ce8:	9b01      	ldr	r3, [sp, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d0af      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 8001cee:	9b01      	ldr	r3, [sp, #4]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	e7f8      	b.n	8001ce6 <HAL_ADC_ConfigChannel+0x116>
 8001cf4:	40012000 	.word	0x40012000
 8001cf8:	40012300 	.word	0x40012300
 8001cfc:	10000012 	.word	0x10000012
 8001d00:	20000004 	.word	0x20000004
 8001d04:	000f4240 	.word	0x000f4240

08001d08 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4907      	ldr	r1, [pc, #28]	; (8001d28 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d0a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d10:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d14:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d18:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001d24:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d26:	4770      	bx	lr
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d2c:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d2e:	b530      	push	{r4, r5, lr}
 8001d30:	68dc      	ldr	r4, [r3, #12]
 8001d32:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d36:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d3a:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3c:	2d04      	cmp	r5, #4
 8001d3e:	bf28      	it	cs
 8001d40:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d44:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d48:	bf8c      	ite	hi
 8001d4a:	3c03      	subhi	r4, #3
 8001d4c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d4e:	fa03 f505 	lsl.w	r5, r3, r5
 8001d52:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d56:	40a3      	lsls	r3, r4
 8001d58:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001d5e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d64:	bfac      	ite	ge
 8001d66:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	4a08      	ldrlt	r2, [pc, #32]	; (8001d8c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6c:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	bfb8      	it	lt
 8001d72:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	bfaa      	itet	ge
 8001d7a:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d7e:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d84:	bd30      	pop	{r4, r5, pc}
 8001d86:	bf00      	nop
 8001d88:	e000ed00 	.word	0xe000ed00
 8001d8c:	e000ed14 	.word	0xe000ed14

08001d90 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d90:	2800      	cmp	r0, #0
 8001d92:	db08      	blt.n	8001da6 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d94:	0942      	lsrs	r2, r0, #5
 8001d96:	2301      	movs	r3, #1
 8001d98:	f000 001f 	and.w	r0, r0, #31
 8001d9c:	fa03 f000 	lsl.w	r0, r3, r0
 8001da0:	4b01      	ldr	r3, [pc, #4]	; (8001da8 <HAL_NVIC_EnableIRQ+0x18>)
 8001da2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001da6:	4770      	bx	lr
 8001da8:	e000e100 	.word	0xe000e100

08001dac <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dac:	3801      	subs	r0, #1
 8001dae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001db2:	d20b      	bcs.n	8001dcc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db8:	4a05      	ldr	r2, [pc, #20]	; (8001dd0 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dba:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dbc:	21f0      	movs	r1, #240	; 0xf0
 8001dbe:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc2:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc4:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc6:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dca:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001dcc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001dd4:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	b168      	cbz	r0, 8001df6 <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001dda:	7903      	ldrb	r3, [r0, #4]
 8001ddc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001de0:	b913      	cbnz	r3, 8001de8 <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001de2:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001de4:	f7ff fae2 	bl	80013ac <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001de8:	2302      	movs	r3, #2
 8001dea:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001dec:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001dee:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001df0:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8001df2:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8001df4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001df6:	2001      	movs	r0, #1
 8001df8:	e7fc      	b.n	8001df4 <HAL_DAC_Init+0x20>
	...

08001dfc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dfe:	460d      	mov	r5, r1
 8001e00:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001e02:	7942      	ldrb	r2, [r0, #5]
{
 8001e04:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdac);
 8001e06:	2a01      	cmp	r2, #1
{
 8001e08:	4604      	mov	r4, r0
 8001e0a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8001e0e:	d029      	beq.n	8001e64 <HAL_DAC_Start_DMA+0x68>
 8001e10:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e12:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8001e14:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e16:	6820      	ldr	r0, [r4, #0]
  if (Channel == DAC_CHANNEL_1)
 8001e18:	bb5d      	cbnz	r5, 8001e72 <HAL_DAC_Start_DMA+0x76>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001e1a:	68a2      	ldr	r2, [r4, #8]
 8001e1c:	4f28      	ldr	r7, [pc, #160]	; (8001ec0 <HAL_DAC_Start_DMA+0xc4>)
 8001e1e:	63d7      	str	r7, [r2, #60]	; 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001e20:	4f28      	ldr	r7, [pc, #160]	; (8001ec4 <HAL_DAC_Start_DMA+0xc8>)
 8001e22:	6417      	str	r7, [r2, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001e24:	4f28      	ldr	r7, [pc, #160]	; (8001ec8 <HAL_DAC_Start_DMA+0xcc>)
 8001e26:	64d7      	str	r7, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e28:	6802      	ldr	r2, [r0, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001e2a:	2e04      	cmp	r6, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e2c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e30:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 8001e32:	d018      	beq.n	8001e66 <HAL_DAC_Start_DMA+0x6a>
 8001e34:	2e08      	cmp	r6, #8
 8001e36:	d019      	beq.n	8001e6c <HAL_DAC_Start_DMA+0x70>
 8001e38:	2e00      	cmp	r6, #0
 8001e3a:	d138      	bne.n	8001eae <HAL_DAC_Start_DMA+0xb2>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e3c:	f100 0208 	add.w	r2, r0, #8

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001e40:	6806      	ldr	r6, [r0, #0]
 8001e42:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8001e46:	6006      	str	r6, [r0, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001e48:	68a0      	ldr	r0, [r4, #8]
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001e4a:	f000 f937 	bl	80020bc <HAL_DMA_Start_IT>
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001e4e:	2300      	movs	r3, #0
 8001e50:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8001e52:	bb80      	cbnz	r0, 8001eb6 <HAL_DAC_Start_DMA+0xba>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001e54:	6823      	ldr	r3, [r4, #0]
 8001e56:	f005 0110 	and.w	r1, r5, #16
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	2501      	movs	r5, #1
 8001e5e:	408d      	lsls	r5, r1
 8001e60:	4315      	orrs	r5, r2
 8001e62:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8001e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e66:	f100 020c 	add.w	r2, r0, #12
        break;
 8001e6a:	e7e9      	b.n	8001e40 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001e6c:	f100 0210 	add.w	r2, r0, #16
        break;
 8001e70:	e7e6      	b.n	8001e40 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001e72:	68e2      	ldr	r2, [r4, #12]
 8001e74:	4f15      	ldr	r7, [pc, #84]	; (8001ecc <HAL_DAC_Start_DMA+0xd0>)
 8001e76:	63d7      	str	r7, [r2, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001e78:	4f15      	ldr	r7, [pc, #84]	; (8001ed0 <HAL_DAC_Start_DMA+0xd4>)
 8001e7a:	6417      	str	r7, [r2, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001e7c:	4f15      	ldr	r7, [pc, #84]	; (8001ed4 <HAL_DAC_Start_DMA+0xd8>)
 8001e7e:	64d7      	str	r7, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e80:	6802      	ldr	r2, [r0, #0]
    switch (Alignment)
 8001e82:	2e04      	cmp	r6, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e84:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e88:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_DAC_Start_DMA+0xa6>
 8001e8c:	2e08      	cmp	r6, #8
 8001e8e:	d00b      	beq.n	8001ea8 <HAL_DAC_Start_DMA+0xac>
 8001e90:	b97e      	cbnz	r6, 8001eb2 <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001e92:	f100 0214 	add.w	r2, r0, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001e96:	6806      	ldr	r6, [r0, #0]
 8001e98:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8001e9c:	6006      	str	r6, [r0, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001e9e:	68e0      	ldr	r0, [r4, #12]
 8001ea0:	e7d3      	b.n	8001e4a <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ea2:	f100 0218 	add.w	r2, r0, #24
        break;
 8001ea6:	e7f6      	b.n	8001e96 <HAL_DAC_Start_DMA+0x9a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001ea8:	f100 021c 	add.w	r2, r0, #28
        break;
 8001eac:	e7f3      	b.n	8001e96 <HAL_DAC_Start_DMA+0x9a>
    switch (Alignment)
 8001eae:	462a      	mov	r2, r5
 8001eb0:	e7c6      	b.n	8001e40 <HAL_DAC_Start_DMA+0x44>
    switch (Alignment)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	e7ef      	b.n	8001e96 <HAL_DAC_Start_DMA+0x9a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001eb6:	6923      	ldr	r3, [r4, #16]
 8001eb8:	f043 0304 	orr.w	r3, r3, #4
 8001ebc:	6123      	str	r3, [r4, #16]
 8001ebe:	e7d1      	b.n	8001e64 <HAL_DAC_Start_DMA+0x68>
 8001ec0:	08001edb 	.word	0x08001edb
 8001ec4:	08001eed 	.word	0x08001eed
 8001ec8:	08001ef9 	.word	0x08001ef9
 8001ecc:	08001f5d 	.word	0x08001f5d
 8001ed0:	08001f6d 	.word	0x08001f6d
 8001ed4:	08001f77 	.word	0x08001f77

08001ed8 <HAL_DAC_ConvCpltCallbackCh1>:
 8001ed8:	4770      	bx	lr

08001eda <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001eda:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001edc:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001ede:	4620      	mov	r0, r4
 8001ee0:	f7ff fffa 	bl	8001ed8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	7123      	strb	r3, [r4, #4]
}
 8001ee8:	bd10      	pop	{r4, pc}

08001eea <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8001eea:	4770      	bx	lr

08001eec <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001eec:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001eee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001ef0:	f7ff fffb 	bl	8001eea <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001ef4:	bd08      	pop	{r3, pc}

08001ef6 <HAL_DAC_ErrorCallbackCh1>:
 8001ef6:	4770      	bx	lr

08001ef8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001ef8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001efa:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001efc:	6923      	ldr	r3, [r4, #16]
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001f04:	4620      	mov	r0, r4
 8001f06:	f7ff fff6 	bl	8001ef6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	7123      	strb	r3, [r4, #4]
}
 8001f0e:	bd10      	pop	{r4, pc}

08001f10 <HAL_DAC_ConfigChannel>:
{
 8001f10:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8001f12:	7943      	ldrb	r3, [r0, #5]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	f04f 0302 	mov.w	r3, #2
 8001f1a:	d01a      	beq.n	8001f52 <HAL_DAC_ConfigChannel+0x42>
  tmpreg1 = hdac->Instance->CR;
 8001f1c:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f1e:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001f20:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001f22:	f002 0210 	and.w	r2, r2, #16
 8001f26:	f640 75fe 	movw	r5, #4094	; 0xffe
 8001f2a:	4095      	lsls	r5, r2
 8001f2c:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001f30:	e9d1 3100 	ldrd	r3, r1, [r1]
 8001f34:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001f36:	4093      	lsls	r3, r2
 8001f38:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8001f3a:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f3c:	6823      	ldr	r3, [r4, #0]
 8001f3e:	21c0      	movs	r1, #192	; 0xc0
 8001f40:	fa01 f202 	lsl.w	r2, r1, r2
 8001f44:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8001f48:	2301      	movs	r3, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001f4a:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001f4c:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8001f4e:	2300      	movs	r3, #0
 8001f50:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8001f52:	4618      	mov	r0, r3
}
 8001f54:	bd30      	pop	{r4, r5, pc}

08001f56 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001f56:	4770      	bx	lr

08001f58 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8001f58:	4770      	bx	lr

08001f5a <HAL_DACEx_ErrorCallbackCh2>:
 8001f5a:	4770      	bx	lr

08001f5c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f5c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f5e:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f60:	4620      	mov	r0, r4
 8001f62:	f7ff fff8 	bl	8001f56 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f66:	2301      	movs	r3, #1
 8001f68:	7123      	strb	r3, [r4, #4]
}
 8001f6a:	bd10      	pop	{r4, pc}

08001f6c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001f6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001f70:	f7ff fff2 	bl	8001f58 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f74:	bd08      	pop	{r3, pc}

08001f76 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001f76:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f78:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f7a:	6923      	ldr	r3, [r4, #16]
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff ffe9 	bl	8001f5a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	7123      	strb	r3, [r4, #4]
}
 8001f8c:	bd10      	pop	{r4, pc}
	...

08001f90 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f90:	6803      	ldr	r3, [r0, #0]
{
 8001f92:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f94:	4c08      	ldr	r4, [pc, #32]	; (8001fb8 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001f96:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f98:	b2d9      	uxtb	r1, r3
 8001f9a:	3910      	subs	r1, #16
 8001f9c:	2018      	movs	r0, #24
 8001f9e:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fa2:	5c20      	ldrb	r0, [r4, r0]
 8001fa4:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fa6:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001faa:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8001fae:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001fb0:	bf88      	it	hi
 8001fb2:	3004      	addhi	r0, #4
 8001fb4:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001fb6:	bd10      	pop	{r4, pc}
 8001fb8:	08008b69 	.word	0x08008b69

08001fbc <HAL_DMA_Init>:
{
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fd46 	bl	8001a50 <HAL_GetTick>
 8001fc4:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001fc6:	2c00      	cmp	r4, #0
 8001fc8:	d073      	beq.n	80020b2 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001fd0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001fd8:	6813      	ldr	r3, [r2, #0]
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fe0:	6821      	ldr	r1, [r4, #0]
 8001fe2:	680b      	ldr	r3, [r1, #0]
 8001fe4:	07d8      	lsls	r0, r3, #31
 8001fe6:	d42f      	bmi.n	8002048 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001fe8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fea:	4d33      	ldr	r5, [pc, #204]	; (80020b8 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fec:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fee:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	68e2      	ldr	r2, [r4, #12]
 8001ff8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ffa:	6922      	ldr	r2, [r4, #16]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	6962      	ldr	r2, [r4, #20]
 8002000:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002002:	69e2      	ldr	r2, [r4, #28]
 8002004:	4303      	orrs	r3, r0
 8002006:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002008:	6a22      	ldr	r2, [r4, #32]
 800200a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800200c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800200e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002010:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002014:	bf02      	ittt	eq
 8002016:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 800201a:	4335      	orreq	r5, r6
 800201c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800201e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002020:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002022:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002024:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002028:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800202c:	d133      	bne.n	8002096 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 800202e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002030:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002032:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002034:	b37d      	cbz	r5, 8002096 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002036:	b990      	cbnz	r0, 800205e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002038:	2a01      	cmp	r2, #1
 800203a:	d021      	beq.n	8002080 <HAL_DMA_Init+0xc4>
 800203c:	f032 0202 	bics.w	r2, r2, #2
 8002040:	d129      	bne.n	8002096 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002042:	01ea      	lsls	r2, r5, #7
 8002044:	d527      	bpl.n	8002096 <HAL_DMA_Init+0xda>
 8002046:	e01e      	b.n	8002086 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002048:	f7ff fd02 	bl	8001a50 <HAL_GetTick>
 800204c:	1b40      	subs	r0, r0, r5
 800204e:	2805      	cmp	r0, #5
 8002050:	d9c6      	bls.n	8001fe0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002052:	2320      	movs	r3, #32
 8002054:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002056:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002058:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800205c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800205e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002062:	d114      	bne.n	800208e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002064:	2a03      	cmp	r2, #3
 8002066:	d816      	bhi.n	8002096 <HAL_DMA_Init+0xda>
 8002068:	a001      	add	r0, pc, #4	; (adr r0, 8002070 <HAL_DMA_Init+0xb4>)
 800206a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800206e:	bf00      	nop
 8002070:	08002087 	.word	0x08002087
 8002074:	08002043 	.word	0x08002043
 8002078:	08002087 	.word	0x08002087
 800207c:	08002081 	.word	0x08002081
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002080:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002084:	d107      	bne.n	8002096 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002086:	2340      	movs	r3, #64	; 0x40
 8002088:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800208a:	2001      	movs	r0, #1
 800208c:	e7e4      	b.n	8002058 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800208e:	2a02      	cmp	r2, #2
 8002090:	d9f9      	bls.n	8002086 <HAL_DMA_Init+0xca>
 8002092:	2a03      	cmp	r2, #3
 8002094:	d0d5      	beq.n	8002042 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002096:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002098:	4620      	mov	r0, r4
 800209a:	f7ff ff79 	bl	8001f90 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80020a0:	233f      	movs	r3, #63	; 0x3f
 80020a2:	4093      	lsls	r3, r2
 80020a4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020a6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80020a8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020aa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80020ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80020b0:	e7d4      	b.n	800205c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 80020b2:	2001      	movs	r0, #1
 80020b4:	e7d2      	b.n	800205c <HAL_DMA_Init+0xa0>
 80020b6:	bf00      	nop
 80020b8:	f010803f 	.word	0xf010803f

080020bc <HAL_DMA_Start_IT>:
{
 80020bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80020be:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020c2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 80020c4:	2c01      	cmp	r4, #1
 80020c6:	d031      	beq.n	800212c <HAL_DMA_Start_IT+0x70>
 80020c8:	2401      	movs	r4, #1
 80020ca:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80020ce:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80020d2:	2c01      	cmp	r4, #1
 80020d4:	f04f 0500 	mov.w	r5, #0
 80020d8:	f04f 0402 	mov.w	r4, #2
 80020dc:	d124      	bne.n	8002128 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80020de:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020e2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020e4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020e6:	6825      	ldr	r5, [r4, #0]
 80020e8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80020ec:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80020ee:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020f0:	6883      	ldr	r3, [r0, #8]
 80020f2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80020f4:	bf0e      	itee	eq
 80020f6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80020f8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80020fa:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80020fe:	bf08      	it	eq
 8002100:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002102:	233f      	movs	r3, #63	; 0x3f
 8002104:	4093      	lsls	r3, r2
 8002106:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002108:	6823      	ldr	r3, [r4, #0]
 800210a:	f043 0316 	orr.w	r3, r3, #22
 800210e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8002110:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002112:	b11b      	cbz	r3, 800211c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8002114:	6823      	ldr	r3, [r4, #0]
 8002116:	f043 0308 	orr.w	r3, r3, #8
 800211a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002124:	2000      	movs	r0, #0
}
 8002126:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8002128:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800212c:	2002      	movs	r0, #2
 800212e:	e7fa      	b.n	8002126 <HAL_DMA_Start_IT+0x6a>

08002130 <HAL_DMA_Abort>:
{
 8002130:	b570      	push	{r4, r5, r6, lr}
 8002132:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002134:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8002136:	f7ff fc8b 	bl	8001a50 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800213a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800213e:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 8002140:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002142:	d006      	beq.n	8002152 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002144:	2380      	movs	r3, #128	; 0x80
 8002146:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8002148:	2300      	movs	r3, #0
 800214a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800214e:	2001      	movs	r0, #1
}
 8002150:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	f022 0216 	bic.w	r2, r2, #22
 800215a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002162:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002164:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002166:	b90a      	cbnz	r2, 800216c <HAL_DMA_Abort+0x3c>
 8002168:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800216a:	b11a      	cbz	r2, 8002174 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f022 0208 	bic.w	r2, r2, #8
 8002172:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f022 0201 	bic.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f013 0301 	ands.w	r3, r3, #1
 8002184:	d10a      	bne.n	800219c <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002186:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002188:	223f      	movs	r2, #63	; 0x3f
 800218a:	408a      	lsls	r2, r1
 800218c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800218e:	2201      	movs	r2, #1
 8002190:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8002194:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8002198:	4618      	mov	r0, r3
 800219a:	e7d9      	b.n	8002150 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800219c:	f7ff fc58 	bl	8001a50 <HAL_GetTick>
 80021a0:	1b40      	subs	r0, r0, r5
 80021a2:	2805      	cmp	r0, #5
 80021a4:	d9ea      	bls.n	800217c <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021a6:	2320      	movs	r3, #32
 80021a8:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021aa:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 80021ac:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ae:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80021b2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 80021b6:	e7cb      	b.n	8002150 <HAL_DMA_Abort+0x20>

080021b8 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b8:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d003      	beq.n	80021c8 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	2380      	movs	r3, #128	; 0x80
 80021c2:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80021c4:	2001      	movs	r0, #1
 80021c6:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80021c8:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ca:	2305      	movs	r3, #5
 80021cc:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80021d0:	6813      	ldr	r3, [r2, #0]
 80021d2:	f023 0301 	bic.w	r3, r3, #1
 80021d6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80021d8:	2000      	movs	r0, #0
}
 80021da:	4770      	bx	lr

080021dc <HAL_DMA_IRQHandler>:
{
 80021dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021e2:	4b5c      	ldr	r3, [pc, #368]	; (8002354 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e4:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80021e6:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80021ea:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ec:	2208      	movs	r2, #8
 80021ee:	409a      	lsls	r2, r3
 80021f0:	4232      	tst	r2, r6
{
 80021f2:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	d00c      	beq.n	8002210 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021f6:	6801      	ldr	r1, [r0, #0]
 80021f8:	6808      	ldr	r0, [r1, #0]
 80021fa:	0740      	lsls	r0, r0, #29
 80021fc:	d508      	bpl.n	8002210 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021fe:	6808      	ldr	r0, [r1, #0]
 8002200:	f020 0004 	bic.w	r0, r0, #4
 8002204:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002206:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002208:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	4232      	tst	r2, r6
 8002216:	d008      	beq.n	800222a <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002218:	6821      	ldr	r1, [r4, #0]
 800221a:	6949      	ldr	r1, [r1, #20]
 800221c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800221e:	bf41      	itttt	mi
 8002220:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002222:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8002224:	f042 0202 	orrmi.w	r2, r2, #2
 8002228:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800222a:	2204      	movs	r2, #4
 800222c:	409a      	lsls	r2, r3
 800222e:	4232      	tst	r2, r6
 8002230:	d008      	beq.n	8002244 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002232:	6821      	ldr	r1, [r4, #0]
 8002234:	6809      	ldr	r1, [r1, #0]
 8002236:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002238:	bf41      	itttt	mi
 800223a:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800223c:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800223e:	f042 0204 	orrmi.w	r2, r2, #4
 8002242:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	2210      	movs	r2, #16
 8002246:	409a      	lsls	r2, r3
 8002248:	4232      	tst	r2, r6
 800224a:	d010      	beq.n	800226e <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800224c:	6823      	ldr	r3, [r4, #0]
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	0709      	lsls	r1, r1, #28
 8002252:	d50c      	bpl.n	800226e <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002254:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	0350      	lsls	r0, r2, #13
 800225a:	d537      	bpl.n	80022cc <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0319      	lsls	r1, r3, #12
 8002260:	d401      	bmi.n	8002266 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8002262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002264:	e000      	b.n	8002268 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002266:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8002268:	b10b      	cbz	r3, 800226e <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800226a:	4620      	mov	r0, r4
 800226c:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800226e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8002270:	2220      	movs	r2, #32
 8002272:	408a      	lsls	r2, r1
 8002274:	4232      	tst	r2, r6
 8002276:	d03a      	beq.n	80022ee <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	06c6      	lsls	r6, r0, #27
 800227e:	d536      	bpl.n	80022ee <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002280:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002282:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8002286:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002288:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800228a:	d127      	bne.n	80022dc <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800228c:	f022 0216 	bic.w	r2, r2, #22
 8002290:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002292:	695a      	ldr	r2, [r3, #20]
 8002294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002298:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800229a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800229c:	b90a      	cbnz	r2, 80022a2 <HAL_DMA_IRQHandler+0xc6>
 800229e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80022a0:	b11a      	cbz	r2, 80022aa <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	f022 0208 	bic.w	r2, r2, #8
 80022a8:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022aa:	233f      	movs	r3, #63	; 0x3f
 80022ac:	408b      	lsls	r3, r1
 80022ae:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80022b6:	2300      	movs	r3, #0
 80022b8:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 80022bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d045      	beq.n	800234e <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 80022c2:	4620      	mov	r0, r4
}
 80022c4:	b003      	add	sp, #12
 80022c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80022ca:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d0:	bf5e      	ittt	pl
 80022d2:	681a      	ldrpl	r2, [r3, #0]
 80022d4:	f022 0208 	bicpl.w	r2, r2, #8
 80022d8:	601a      	strpl	r2, [r3, #0]
 80022da:	e7c2      	b.n	8002262 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022dc:	0350      	lsls	r0, r2, #13
 80022de:	d527      	bpl.n	8002330 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	0319      	lsls	r1, r3, #12
 80022e4:	d431      	bmi.n	800234a <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 80022e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80022e8:	b10b      	cbz	r3, 80022ee <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 80022ea:	4620      	mov	r0, r4
 80022ec:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022f0:	b36b      	cbz	r3, 800234e <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022f2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80022f4:	07da      	lsls	r2, r3, #31
 80022f6:	d519      	bpl.n	800232c <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 80022f8:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022fa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80022fe:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002302:	2305      	movs	r3, #5
 8002304:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	f023 0301 	bic.w	r3, r3, #1
 800230e:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002310:	9b01      	ldr	r3, [sp, #4]
 8002312:	3301      	adds	r3, #1
 8002314:	42bb      	cmp	r3, r7
 8002316:	9301      	str	r3, [sp, #4]
 8002318:	d802      	bhi.n	8002320 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800231a:	6813      	ldr	r3, [r2, #0]
 800231c:	07db      	lsls	r3, r3, #31
 800231e:	d4f7      	bmi.n	8002310 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002320:	2301      	movs	r3, #1
 8002322:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8002326:	2300      	movs	r3, #0
 8002328:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800232c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800232e:	e7c6      	b.n	80022be <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8002336:	d108      	bne.n	800234a <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002338:	6819      	ldr	r1, [r3, #0]
 800233a:	f021 0110 	bic.w	r1, r1, #16
 800233e:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002340:	2301      	movs	r3, #1
 8002342:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8002346:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800234a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800234c:	e7cc      	b.n	80022e8 <HAL_DMA_IRQHandler+0x10c>
}
 800234e:	b003      	add	sp, #12
 8002350:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002352:	bf00      	nop
 8002354:	20000004 	.word	0x20000004

08002358 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 80024fc <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002360:	4a64      	ldr	r2, [pc, #400]	; (80024f4 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002364:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002366:	2401      	movs	r4, #1
 8002368:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800236e:	43ac      	bics	r4, r5
 8002370:	f040 80ad 	bne.w	80024ce <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002374:	684d      	ldr	r5, [r1, #4]
 8002376:	f005 0403 	and.w	r4, r5, #3
 800237a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800237e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002380:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002382:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002388:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238c:	d834      	bhi.n	80023f8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800238e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002394:	68cf      	ldr	r7, [r1, #12]
 8002396:	fa07 f708 	lsl.w	r7, r7, r8
 800239a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800239e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80023a0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a2:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80023aa:	409f      	lsls	r7, r3
 80023ac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80023b0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80023b2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023b4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023b8:	688f      	ldr	r7, [r1, #8]
 80023ba:	fa07 f708 	lsl.w	r7, r7, r8
 80023be:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80023c4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023c6:	d119      	bne.n	80023fc <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80023c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80023cc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80023d4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80023dc:	f04f 0e0f 	mov.w	lr, #15
 80023e0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80023e4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e8:	690f      	ldr	r7, [r1, #16]
 80023ea:	fa07 f70b 	lsl.w	r7, r7, fp
 80023ee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80023f2:	f8ca 7020 	str.w	r7, [sl, #32]
 80023f6:	e001      	b.n	80023fc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023f8:	2c03      	cmp	r4, #3
 80023fa:	d1da      	bne.n	80023b2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80023fc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023fe:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002402:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002404:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002406:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800240a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800240c:	d05f      	beq.n	80024ce <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	f04f 0a00 	mov.w	sl, #0
 8002412:	f8cd a004 	str.w	sl, [sp, #4]
 8002416:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800241a:	4c37      	ldr	r4, [pc, #220]	; (80024f8 <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800241c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002420:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002424:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002428:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800242c:	9601      	str	r6, [sp, #4]
 800242e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002430:	f023 0603 	bic.w	r6, r3, #3
 8002434:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002438:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800243c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002440:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002444:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002448:	270f      	movs	r7, #15
 800244a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002450:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002454:	d042      	beq.n	80024dc <HAL_GPIO_Init+0x184>
 8002456:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800245a:	42a0      	cmp	r0, r4
 800245c:	d040      	beq.n	80024e0 <HAL_GPIO_Init+0x188>
 800245e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002462:	42a0      	cmp	r0, r4
 8002464:	d03e      	beq.n	80024e4 <HAL_GPIO_Init+0x18c>
 8002466:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800246a:	42a0      	cmp	r0, r4
 800246c:	d03c      	beq.n	80024e8 <HAL_GPIO_Init+0x190>
 800246e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002472:	42a0      	cmp	r0, r4
 8002474:	d03a      	beq.n	80024ec <HAL_GPIO_Init+0x194>
 8002476:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800247a:	42a0      	cmp	r0, r4
 800247c:	d038      	beq.n	80024f0 <HAL_GPIO_Init+0x198>
 800247e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002482:	42a0      	cmp	r0, r4
 8002484:	bf0c      	ite	eq
 8002486:	2406      	moveq	r4, #6
 8002488:	2407      	movne	r4, #7
 800248a:	fa04 f40e 	lsl.w	r4, r4, lr
 800248e:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002490:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8002492:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8002494:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002498:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800249a:	bf54      	ite	pl
 800249c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800249e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80024a2:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80024a4:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a6:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80024a8:	bf54      	ite	pl
 80024aa:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024ac:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80024b0:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80024b2:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024b4:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80024b6:	bf54      	ite	pl
 80024b8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024ba:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80024be:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024c0:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024c2:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80024c4:	bf54      	ite	pl
 80024c6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80024c8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80024cc:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024ce:	3301      	adds	r3, #1
 80024d0:	2b10      	cmp	r3, #16
 80024d2:	f47f af47 	bne.w	8002364 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80024d6:	b003      	add	sp, #12
 80024d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024dc:	4654      	mov	r4, sl
 80024de:	e7d4      	b.n	800248a <HAL_GPIO_Init+0x132>
 80024e0:	2401      	movs	r4, #1
 80024e2:	e7d2      	b.n	800248a <HAL_GPIO_Init+0x132>
 80024e4:	2402      	movs	r4, #2
 80024e6:	e7d0      	b.n	800248a <HAL_GPIO_Init+0x132>
 80024e8:	2403      	movs	r4, #3
 80024ea:	e7ce      	b.n	800248a <HAL_GPIO_Init+0x132>
 80024ec:	2404      	movs	r4, #4
 80024ee:	e7cc      	b.n	800248a <HAL_GPIO_Init+0x132>
 80024f0:	2405      	movs	r4, #5
 80024f2:	e7ca      	b.n	800248a <HAL_GPIO_Init+0x132>
 80024f4:	40013c00 	.word	0x40013c00
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40023800 	.word	0x40023800

08002500 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002500:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002508:	4d18      	ldr	r5, [pc, #96]	; (800256c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800250c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002510:	641a      	str	r2, [r3, #64]	; 0x40
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002518:	9301      	str	r3, [sp, #4]
 800251a:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_PWREx_EnableOverDrive+0x70>)
 800251e:	2201      	movs	r2, #1
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002522:	f7ff fa95 	bl	8001a50 <HAL_GetTick>
 8002526:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002528:	686b      	ldr	r3, [r5, #4]
 800252a:	03da      	lsls	r2, r3, #15
 800252c:	d50b      	bpl.n	8002546 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800252e:	4b10      	ldr	r3, [pc, #64]	; (8002570 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002530:	4d0e      	ldr	r5, [pc, #56]	; (800256c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002532:	2201      	movs	r2, #1
 8002534:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 8002536:	f7ff fa8b 	bl	8001a50 <HAL_GetTick>
 800253a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800253c:	686b      	ldr	r3, [r5, #4]
 800253e:	039b      	lsls	r3, r3, #14
 8002540:	d50a      	bpl.n	8002558 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002542:	2000      	movs	r0, #0
 8002544:	e006      	b.n	8002554 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002546:	f7ff fa83 	bl	8001a50 <HAL_GetTick>
 800254a:	1b00      	subs	r0, r0, r4
 800254c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002550:	d9ea      	bls.n	8002528 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8002552:	2003      	movs	r0, #3
}
 8002554:	b003      	add	sp, #12
 8002556:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002558:	f7ff fa7a 	bl	8001a50 <HAL_GetTick>
 800255c:	1b00      	subs	r0, r0, r4
 800255e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002562:	d9eb      	bls.n	800253c <HAL_PWREx_EnableOverDrive+0x3c>
 8002564:	e7f5      	b.n	8002552 <HAL_PWREx_EnableOverDrive+0x52>
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000
 8002570:	420e0000 	.word	0x420e0000

08002574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002578:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257a:	4604      	mov	r4, r0
 800257c:	b910      	cbnz	r0, 8002584 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800257e:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 8002580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b44      	ldr	r3, [pc, #272]	; (8002698 <HAL_RCC_ClockConfig+0x124>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	f002 020f 	and.w	r2, r2, #15
 800258c:	428a      	cmp	r2, r1
 800258e:	d328      	bcc.n	80025e2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002590:	6822      	ldr	r2, [r4, #0]
 8002592:	0797      	lsls	r7, r2, #30
 8002594:	d42d      	bmi.n	80025f2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002596:	07d0      	lsls	r0, r2, #31
 8002598:	d441      	bmi.n	800261e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800259a:	4b3f      	ldr	r3, [pc, #252]	; (8002698 <HAL_RCC_ClockConfig+0x124>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	f002 020f 	and.w	r2, r2, #15
 80025a2:	42aa      	cmp	r2, r5
 80025a4:	d866      	bhi.n	8002674 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a6:	6822      	ldr	r2, [r4, #0]
 80025a8:	0751      	lsls	r1, r2, #29
 80025aa:	d46c      	bmi.n	8002686 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	0713      	lsls	r3, r2, #28
 80025ae:	d507      	bpl.n	80025c0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025b0:	4a3a      	ldr	r2, [pc, #232]	; (800269c <HAL_RCC_ClockConfig+0x128>)
 80025b2:	6921      	ldr	r1, [r4, #16]
 80025b4:	6893      	ldr	r3, [r2, #8]
 80025b6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80025ba:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025be:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c0:	f000 f894 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <HAL_RCC_ClockConfig+0x128>)
 80025c6:	4a36      	ldr	r2, [pc, #216]	; (80026a0 <HAL_RCC_ClockConfig+0x12c>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025ce:	5cd3      	ldrb	r3, [r2, r3]
 80025d0:	40d8      	lsrs	r0, r3
 80025d2:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <HAL_RCC_ClockConfig+0x130>)
 80025d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80025d6:	4b34      	ldr	r3, [pc, #208]	; (80026a8 <HAL_RCC_ClockConfig+0x134>)
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	f7ff f9ef 	bl	80019bc <HAL_InitTick>
  return HAL_OK;
 80025de:	2000      	movs	r0, #0
 80025e0:	e7ce      	b.n	8002580 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	b2ca      	uxtb	r2, r1
 80025e4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	428b      	cmp	r3, r1
 80025ee:	d1c6      	bne.n	800257e <HAL_RCC_ClockConfig+0xa>
 80025f0:	e7ce      	b.n	8002590 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_ClockConfig+0x128>)
 80025f4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f8:	bf1e      	ittt	ne
 80025fa:	6899      	ldrne	r1, [r3, #8]
 80025fc:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002600:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002602:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002604:	bf42      	ittt	mi
 8002606:	6899      	ldrmi	r1, [r3, #8]
 8002608:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 800260c:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260e:	4923      	ldr	r1, [pc, #140]	; (800269c <HAL_RCC_ClockConfig+0x128>)
 8002610:	68a0      	ldr	r0, [r4, #8]
 8002612:	688b      	ldr	r3, [r1, #8]
 8002614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002618:	4303      	orrs	r3, r0
 800261a:	608b      	str	r3, [r1, #8]
 800261c:	e7bb      	b.n	8002596 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261e:	6862      	ldr	r2, [r4, #4]
 8002620:	4b1e      	ldr	r3, [pc, #120]	; (800269c <HAL_RCC_ClockConfig+0x128>)
 8002622:	2a01      	cmp	r2, #1
 8002624:	d11c      	bne.n	8002660 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800262c:	d0a7      	beq.n	800257e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262e:	4e1b      	ldr	r6, [pc, #108]	; (800269c <HAL_RCC_ClockConfig+0x128>)
 8002630:	68b3      	ldr	r3, [r6, #8]
 8002632:	f023 0303 	bic.w	r3, r3, #3
 8002636:	4313      	orrs	r3, r2
 8002638:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800263a:	f7ff fa09 	bl	8001a50 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002642:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002644:	68b3      	ldr	r3, [r6, #8]
 8002646:	6862      	ldr	r2, [r4, #4]
 8002648:	f003 030c 	and.w	r3, r3, #12
 800264c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002650:	d0a3      	beq.n	800259a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002652:	f7ff f9fd 	bl	8001a50 <HAL_GetTick>
 8002656:	1bc0      	subs	r0, r0, r7
 8002658:	4540      	cmp	r0, r8
 800265a:	d9f3      	bls.n	8002644 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 800265c:	2003      	movs	r0, #3
 800265e:	e78f      	b.n	8002580 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002660:	1e91      	subs	r1, r2, #2
 8002662:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002664:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002666:	d802      	bhi.n	800266e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002668:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800266c:	e7de      	b.n	800262c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266e:	f013 0f02 	tst.w	r3, #2
 8002672:	e7db      	b.n	800262c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002674:	b2ea      	uxtb	r2, r5
 8002676:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	42ab      	cmp	r3, r5
 8002680:	f47f af7d 	bne.w	800257e <HAL_RCC_ClockConfig+0xa>
 8002684:	e78f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002686:	4905      	ldr	r1, [pc, #20]	; (800269c <HAL_RCC_ClockConfig+0x128>)
 8002688:	68e0      	ldr	r0, [r4, #12]
 800268a:	688b      	ldr	r3, [r1, #8]
 800268c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8002690:	4303      	orrs	r3, r0
 8002692:	608b      	str	r3, [r1, #8]
 8002694:	e78a      	b.n	80025ac <HAL_RCC_ClockConfig+0x38>
 8002696:	bf00      	nop
 8002698:	40023c00 	.word	0x40023c00
 800269c:	40023800 	.word	0x40023800
 80026a0:	08008b51 	.word	0x08008b51
 80026a4:	20000004 	.word	0x20000004
 80026a8:	2000000c 	.word	0x2000000c

080026ac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026ac:	4b04      	ldr	r3, [pc, #16]	; (80026c0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80026b6:	5cd3      	ldrb	r3, [r2, r3]
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80026ba:	6810      	ldr	r0, [r2, #0]
}
 80026bc:	40d8      	lsrs	r0, r3
 80026be:	4770      	bx	lr
 80026c0:	40023800 	.word	0x40023800
 80026c4:	08008b61 	.word	0x08008b61
 80026c8:	20000004 	.word	0x20000004

080026cc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026cc:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80026ce:	4a05      	ldr	r2, [pc, #20]	; (80026e4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	4a03      	ldr	r2, [pc, #12]	; (80026e8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80026da:	6810      	ldr	r0, [r2, #0]
}
 80026dc:	40d8      	lsrs	r0, r3
 80026de:	4770      	bx	lr
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08008b61 	.word	0x08008b61
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026ec:	4920      	ldr	r1, [pc, #128]	; (8002770 <HAL_RCC_GetSysClockFreq+0x84>)
{
 80026ee:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026f0:	688b      	ldr	r3, [r1, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d007      	beq.n	800270a <HAL_RCC_GetSysClockFreq+0x1e>
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d020      	beq.n	8002740 <HAL_RCC_GetSysClockFreq+0x54>
 80026fe:	481d      	ldr	r0, [pc, #116]	; (8002774 <HAL_RCC_GetSysClockFreq+0x88>)
 8002700:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <HAL_RCC_GetSysClockFreq+0x8c>)
 8002702:	2b04      	cmp	r3, #4
 8002704:	bf08      	it	eq
 8002706:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002708:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800270a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800270c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800270e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002710:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002714:	bf14      	ite	ne
 8002716:	4818      	ldrne	r0, [pc, #96]	; (8002778 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002718:	4816      	ldreq	r0, [pc, #88]	; (8002774 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800271e:	bf18      	it	ne
 8002720:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002722:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002726:	fba1 0100 	umull	r0, r1, r1, r0
 800272a:	f7fe fb0d 	bl	8000d48 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800272e:	4b10      	ldr	r3, [pc, #64]	; (8002770 <HAL_RCC_GetSysClockFreq+0x84>)
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8002736:	3301      	adds	r3, #1
 8002738:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 800273a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800273e:	e7e3      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002740:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002742:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002744:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002746:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274a:	bf14      	ite	ne
 800274c:	480a      	ldrne	r0, [pc, #40]	; (8002778 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4809      	ldreq	r0, [pc, #36]	; (8002774 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002750:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002754:	bf18      	it	ne
 8002756:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002758:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800275c:	fba1 0100 	umull	r0, r1, r1, r0
 8002760:	f7fe faf2 	bl	8000d48 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002764:	4b02      	ldr	r3, [pc, #8]	; (8002770 <HAL_RCC_GetSysClockFreq+0x84>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800276c:	e7e5      	b.n	800273a <HAL_RCC_GetSysClockFreq+0x4e>
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	00f42400 	.word	0x00f42400
 8002778:	017d7840 	.word	0x017d7840

0800277c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800277c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002780:	4604      	mov	r4, r0
 8002782:	2800      	cmp	r0, #0
 8002784:	d030      	beq.n	80027e8 <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002786:	6803      	ldr	r3, [r0, #0]
 8002788:	07df      	lsls	r7, r3, #31
 800278a:	d410      	bmi.n	80027ae <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	079e      	lsls	r6, r3, #30
 8002790:	d463      	bmi.n	800285a <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	071a      	lsls	r2, r3, #28
 8002796:	f100 80ad 	bmi.w	80028f4 <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279a:	6823      	ldr	r3, [r4, #0]
 800279c:	075b      	lsls	r3, r3, #29
 800279e:	f100 80cd 	bmi.w	800293c <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027a2:	69a0      	ldr	r0, [r4, #24]
 80027a4:	2800      	cmp	r0, #0
 80027a6:	f040 8135 	bne.w	8002a14 <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80027aa:	2000      	movs	r0, #0
 80027ac:	e034      	b.n	8002818 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027ae:	4b96      	ldr	r3, [pc, #600]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	f002 020c 	and.w	r2, r2, #12
 80027b6:	2a04      	cmp	r2, #4
 80027b8:	d00f      	beq.n	80027da <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80027c0:	2a08      	cmp	r2, #8
 80027c2:	d102      	bne.n	80027ca <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	0255      	lsls	r5, r2, #9
 80027c8:	d407      	bmi.n	80027da <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ca:	689a      	ldr	r2, [r3, #8]
 80027cc:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80027d0:	2a0c      	cmp	r2, #12
 80027d2:	d10b      	bne.n	80027ec <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	0258      	lsls	r0, r3, #9
 80027d8:	d508      	bpl.n	80027ec <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4b8b      	ldr	r3, [pc, #556]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	0399      	lsls	r1, r3, #14
 80027e0:	d5d4      	bpl.n	800278c <HAL_RCC_OscConfig+0x10>
 80027e2:	6863      	ldr	r3, [r4, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1d1      	bne.n	800278c <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80027e8:	2001      	movs	r0, #1
 80027ea:	e015      	b.n	8002818 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027ec:	6863      	ldr	r3, [r4, #4]
 80027ee:	4d86      	ldr	r5, [pc, #536]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
 80027f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027f4:	d113      	bne.n	800281e <HAL_RCC_OscConfig+0xa2>
 80027f6:	682b      	ldr	r3, [r5, #0]
 80027f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027fc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027fe:	f7ff f927 	bl	8001a50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002802:	4e81      	ldr	r6, [pc, #516]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002804:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002806:	6833      	ldr	r3, [r6, #0]
 8002808:	039a      	lsls	r2, r3, #14
 800280a:	d4bf      	bmi.n	800278c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800280c:	f7ff f920 	bl	8001a50 <HAL_GetTick>
 8002810:	1b40      	subs	r0, r0, r5
 8002812:	2864      	cmp	r0, #100	; 0x64
 8002814:	d9f7      	bls.n	8002806 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 8002816:	2003      	movs	r0, #3
}
 8002818:	b002      	add	sp, #8
 800281a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800281e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002822:	d104      	bne.n	800282e <HAL_RCC_OscConfig+0xb2>
 8002824:	682b      	ldr	r3, [r5, #0]
 8002826:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800282a:	602b      	str	r3, [r5, #0]
 800282c:	e7e3      	b.n	80027f6 <HAL_RCC_OscConfig+0x7a>
 800282e:	682a      	ldr	r2, [r5, #0]
 8002830:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002834:	602a      	str	r2, [r5, #0]
 8002836:	682a      	ldr	r2, [r5, #0]
 8002838:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800283c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1dd      	bne.n	80027fe <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002842:	f7ff f905 	bl	8001a50 <HAL_GetTick>
 8002846:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002848:	682b      	ldr	r3, [r5, #0]
 800284a:	039b      	lsls	r3, r3, #14
 800284c:	d59e      	bpl.n	800278c <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284e:	f7ff f8ff 	bl	8001a50 <HAL_GetTick>
 8002852:	1b80      	subs	r0, r0, r6
 8002854:	2864      	cmp	r0, #100	; 0x64
 8002856:	d9f7      	bls.n	8002848 <HAL_RCC_OscConfig+0xcc>
 8002858:	e7dd      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800285a:	4b6b      	ldr	r3, [pc, #428]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	f012 0f0c 	tst.w	r2, #12
 8002862:	d00f      	beq.n	8002884 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800286a:	2a08      	cmp	r2, #8
 800286c:	d102      	bne.n	8002874 <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	0257      	lsls	r7, r2, #9
 8002872:	d507      	bpl.n	8002884 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800287a:	2a0c      	cmp	r2, #12
 800287c:	d111      	bne.n	80028a2 <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	025e      	lsls	r6, r3, #9
 8002882:	d40e      	bmi.n	80028a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002884:	4a60      	ldr	r2, [pc, #384]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
 8002886:	6813      	ldr	r3, [r2, #0]
 8002888:	079d      	lsls	r5, r3, #30
 800288a:	d502      	bpl.n	8002892 <HAL_RCC_OscConfig+0x116>
 800288c:	68e3      	ldr	r3, [r4, #12]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d1aa      	bne.n	80027e8 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002892:	6813      	ldr	r3, [r2, #0]
 8002894:	6921      	ldr	r1, [r4, #16]
 8002896:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800289a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800289e:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a0:	e777      	b.n	8002792 <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028a2:	68e2      	ldr	r2, [r4, #12]
 80028a4:	4b59      	ldr	r3, [pc, #356]	; (8002a0c <HAL_RCC_OscConfig+0x290>)
 80028a6:	b1b2      	cbz	r2, 80028d6 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 80028a8:	2201      	movs	r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028ac:	f7ff f8d0 	bl	8001a50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4d55      	ldr	r5, [pc, #340]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80028b2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b4:	682b      	ldr	r3, [r5, #0]
 80028b6:	0798      	lsls	r0, r3, #30
 80028b8:	d507      	bpl.n	80028ca <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	682b      	ldr	r3, [r5, #0]
 80028bc:	6922      	ldr	r2, [r4, #16]
 80028be:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80028c2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80028c6:	602b      	str	r3, [r5, #0]
 80028c8:	e763      	b.n	8002792 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ca:	f7ff f8c1 	bl	8001a50 <HAL_GetTick>
 80028ce:	1b80      	subs	r0, r0, r6
 80028d0:	2802      	cmp	r0, #2
 80028d2:	d9ef      	bls.n	80028b4 <HAL_RCC_OscConfig+0x138>
 80028d4:	e79f      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 80028d6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80028d8:	f7ff f8ba 	bl	8001a50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028dc:	4e4a      	ldr	r6, [pc, #296]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80028de:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028e0:	6833      	ldr	r3, [r6, #0]
 80028e2:	0799      	lsls	r1, r3, #30
 80028e4:	f57f af55 	bpl.w	8002792 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e8:	f7ff f8b2 	bl	8001a50 <HAL_GetTick>
 80028ec:	1b40      	subs	r0, r0, r5
 80028ee:	2802      	cmp	r0, #2
 80028f0:	d9f6      	bls.n	80028e0 <HAL_RCC_OscConfig+0x164>
 80028f2:	e790      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028f4:	6962      	ldr	r2, [r4, #20]
 80028f6:	4b45      	ldr	r3, [pc, #276]	; (8002a0c <HAL_RCC_OscConfig+0x290>)
 80028f8:	b182      	cbz	r2, 800291c <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 80028fa:	2201      	movs	r2, #1
 80028fc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002900:	f7ff f8a6 	bl	8001a50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002904:	4e40      	ldr	r6, [pc, #256]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002906:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002908:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800290a:	079f      	lsls	r7, r3, #30
 800290c:	f53f af45 	bmi.w	800279a <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002910:	f7ff f89e 	bl	8001a50 <HAL_GetTick>
 8002914:	1b40      	subs	r0, r0, r5
 8002916:	2802      	cmp	r0, #2
 8002918:	d9f6      	bls.n	8002908 <HAL_RCC_OscConfig+0x18c>
 800291a:	e77c      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 800291c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002920:	f7ff f896 	bl	8001a50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002924:	4e38      	ldr	r6, [pc, #224]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8002926:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002928:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800292a:	0798      	lsls	r0, r3, #30
 800292c:	f57f af35 	bpl.w	800279a <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002930:	f7ff f88e 	bl	8001a50 <HAL_GetTick>
 8002934:	1b40      	subs	r0, r0, r5
 8002936:	2802      	cmp	r0, #2
 8002938:	d9f6      	bls.n	8002928 <HAL_RCC_OscConfig+0x1ac>
 800293a:	e76c      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
 800293e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002940:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002944:	d128      	bne.n	8002998 <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002946:	9201      	str	r2, [sp, #4]
 8002948:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800294a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800294e:	641a      	str	r2, [r3, #64]	; 0x40
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800295a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295c:	4d2c      	ldr	r5, [pc, #176]	; (8002a10 <HAL_RCC_OscConfig+0x294>)
 800295e:	682b      	ldr	r3, [r5, #0]
 8002960:	05d9      	lsls	r1, r3, #23
 8002962:	d51b      	bpl.n	800299c <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002964:	68a3      	ldr	r3, [r4, #8]
 8002966:	4d28      	ldr	r5, [pc, #160]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
 8002968:	2b01      	cmp	r3, #1
 800296a:	d127      	bne.n	80029bc <HAL_RCC_OscConfig+0x240>
 800296c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8002974:	f7ff f86c 	bl	8001a50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	4e23      	ldr	r6, [pc, #140]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800297a:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002980:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002982:	079b      	lsls	r3, r3, #30
 8002984:	d539      	bpl.n	80029fa <HAL_RCC_OscConfig+0x27e>
    if(pwrclkchanged == SET)
 8002986:	2f00      	cmp	r7, #0
 8002988:	f43f af0b 	beq.w	80027a2 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 800298c:	4a1e      	ldr	r2, [pc, #120]	; (8002a08 <HAL_RCC_OscConfig+0x28c>)
 800298e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	e704      	b.n	80027a2 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8002998:	2700      	movs	r7, #0
 800299a:	e7df      	b.n	800295c <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a2:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80029a4:	f7ff f854 	bl	8001a50 <HAL_GetTick>
 80029a8:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	682b      	ldr	r3, [r5, #0]
 80029ac:	05da      	lsls	r2, r3, #23
 80029ae:	d4d9      	bmi.n	8002964 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b0:	f7ff f84e 	bl	8001a50 <HAL_GetTick>
 80029b4:	1b80      	subs	r0, r0, r6
 80029b6:	2802      	cmp	r0, #2
 80029b8:	d9f7      	bls.n	80029aa <HAL_RCC_OscConfig+0x22e>
 80029ba:	e72c      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d104      	bne.n	80029ca <HAL_RCC_OscConfig+0x24e>
 80029c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029c2:	f043 0304 	orr.w	r3, r3, #4
 80029c6:	672b      	str	r3, [r5, #112]	; 0x70
 80029c8:	e7d0      	b.n	800296c <HAL_RCC_OscConfig+0x1f0>
 80029ca:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	672a      	str	r2, [r5, #112]	; 0x70
 80029d2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80029d4:	f022 0204 	bic.w	r2, r2, #4
 80029d8:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1ca      	bne.n	8002974 <HAL_RCC_OscConfig+0x1f8>
      tickstart = HAL_GetTick();
 80029de:	f7ff f837 	bl	8001a50 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80029e6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80029ea:	0798      	lsls	r0, r3, #30
 80029ec:	d5cb      	bpl.n	8002986 <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7ff f82f 	bl	8001a50 <HAL_GetTick>
 80029f2:	1b80      	subs	r0, r0, r6
 80029f4:	4540      	cmp	r0, r8
 80029f6:	d9f7      	bls.n	80029e8 <HAL_RCC_OscConfig+0x26c>
 80029f8:	e70d      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029fa:	f7ff f829 	bl	8001a50 <HAL_GetTick>
 80029fe:	1b40      	subs	r0, r0, r5
 8002a00:	4540      	cmp	r0, r8
 8002a02:	d9bd      	bls.n	8002980 <HAL_RCC_OscConfig+0x204>
 8002a04:	e707      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	42470000 	.word	0x42470000
 8002a10:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a14:	4d3b      	ldr	r5, [pc, #236]	; (8002b04 <HAL_RCC_OscConfig+0x388>)
 8002a16:	68ab      	ldr	r3, [r5, #8]
 8002a18:	f003 030c 	and.w	r3, r3, #12
 8002a1c:	2b08      	cmp	r3, #8
 8002a1e:	d040      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x326>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a20:	4b39      	ldr	r3, [pc, #228]	; (8002b08 <HAL_RCC_OscConfig+0x38c>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002a26:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a28:	d12e      	bne.n	8002a88 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8002a2a:	f7ff f811 	bl	8001a50 <HAL_GetTick>
 8002a2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a30:	682b      	ldr	r3, [r5, #0]
 8002a32:	0199      	lsls	r1, r3, #6
 8002a34:	d422      	bmi.n	8002a7c <HAL_RCC_OscConfig+0x300>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a36:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002a3e:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002a42:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a44:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002a48:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a4a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002a4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002a50:	0852      	lsrs	r2, r2, #1
 8002a52:	3a01      	subs	r2, #1
 8002a54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a58:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8002a5a:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_RCC_OscConfig+0x38c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	4d29      	ldr	r5, [pc, #164]	; (8002b04 <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_ENABLE();
 8002a5e:	2201      	movs	r2, #1
 8002a60:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002a62:	f7fe fff5 	bl	8001a50 <HAL_GetTick>
 8002a66:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a68:	682b      	ldr	r3, [r5, #0]
 8002a6a:	019a      	lsls	r2, r3, #6
 8002a6c:	f53f ae9d 	bmi.w	80027aa <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a70:	f7fe ffee 	bl	8001a50 <HAL_GetTick>
 8002a74:	1b00      	subs	r0, r0, r4
 8002a76:	2802      	cmp	r0, #2
 8002a78:	d9f6      	bls.n	8002a68 <HAL_RCC_OscConfig+0x2ec>
 8002a7a:	e6cc      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a7c:	f7fe ffe8 	bl	8001a50 <HAL_GetTick>
 8002a80:	1b80      	subs	r0, r0, r6
 8002a82:	2802      	cmp	r0, #2
 8002a84:	d9d4      	bls.n	8002a30 <HAL_RCC_OscConfig+0x2b4>
 8002a86:	e6c6      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8002a88:	f7fe ffe2 	bl	8001a50 <HAL_GetTick>
 8002a8c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8e:	682b      	ldr	r3, [r5, #0]
 8002a90:	019b      	lsls	r3, r3, #6
 8002a92:	f57f ae8a 	bpl.w	80027aa <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a96:	f7fe ffdb 	bl	8001a50 <HAL_GetTick>
 8002a9a:	1b00      	subs	r0, r0, r4
 8002a9c:	2802      	cmp	r0, #2
 8002a9e:	d9f6      	bls.n	8002a8e <HAL_RCC_OscConfig+0x312>
 8002aa0:	e6b9      	b.n	8002816 <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aa2:	2801      	cmp	r0, #1
 8002aa4:	f43f aeb8 	beq.w	8002818 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8002aa8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aaa:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aac:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab0:	4291      	cmp	r1, r2
 8002ab2:	f47f ae99 	bne.w	80027e8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002abc:	428a      	cmp	r2, r1
 8002abe:	f47f ae93 	bne.w	80027e8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac2:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ac4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8002ac8:	401a      	ands	r2, r3
 8002aca:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002ace:	f47f ae8b 	bne.w	80027e8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002ad4:	0852      	lsrs	r2, r2, #1
 8002ad6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8002ada:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002adc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002ae0:	f47f ae82 	bne.w	80027e8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002ae6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aea:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002aee:	f47f ae7b 	bne.w	80027e8 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002af2:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002af4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002afc:	f43f ae55 	beq.w	80027aa <HAL_RCC_OscConfig+0x2e>
 8002b00:	e672      	b.n	80027e8 <HAL_RCC_OscConfig+0x6c>
 8002b02:	bf00      	nop
 8002b04:	40023800 	.word	0x40023800
 8002b08:	42470000 	.word	0x42470000

08002b0c <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b0c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d12c      	bne.n	8002b6e <HAL_TIM_Base_Start+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b16:	4a17      	ldr	r2, [pc, #92]	; (8002b74 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8002b18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1c:	6803      	ldr	r3, [r0, #0]
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d01a      	beq.n	8002b58 <HAL_TIM_Base_Start+0x4c>
 8002b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b26:	d017      	beq.n	8002b58 <HAL_TIM_Base_Start+0x4c>
 8002b28:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_TIM_Base_Start+0x4c>
 8002b30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00f      	beq.n	8002b58 <HAL_TIM_Base_Start+0x4c>
 8002b38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d00b      	beq.n	8002b58 <HAL_TIM_Base_Start+0x4c>
 8002b40:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d007      	beq.n	8002b58 <HAL_TIM_Base_Start+0x4c>
 8002b48:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d003      	beq.n	8002b58 <HAL_TIM_Base_Start+0x4c>
 8002b50:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d104      	bne.n	8002b62 <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b5e:	2a06      	cmp	r2, #6
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	f042 0201 	orr.w	r2, r2, #1
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b6a:	2000      	movs	r0, #0
}
 8002b6c:	4770      	bx	lr
    return HAL_ERROR;
 8002b6e:	2001      	movs	r0, #1
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40010000 	.word	0x40010000

08002b78 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b78:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d130      	bne.n	8002be2 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b80:	2302      	movs	r3, #2
 8002b82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b86:	6803      	ldr	r3, [r0, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b90:	4a15      	ldr	r2, [pc, #84]	; (8002be8 <HAL_TIM_Base_Start_IT+0x70>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01a      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x54>
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9a:	d017      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x54>
 8002b9c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d013      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x54>
 8002ba4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d00f      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x54>
 8002bac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d00b      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x54>
 8002bb4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d007      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x54>
 8002bbc:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d003      	beq.n	8002bcc <HAL_TIM_Base_Start_IT+0x54>
 8002bc4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d104      	bne.n	8002bd6 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bd2:	2a06      	cmp	r2, #6
 8002bd4:	d003      	beq.n	8002bde <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	f042 0201 	orr.w	r2, r2, #1
 8002bdc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bde:	2000      	movs	r0, #0
}
 8002be0:	4770      	bx	lr
    return HAL_ERROR;
 8002be2:	2001      	movs	r0, #1
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40010000 	.word	0x40010000

08002bec <HAL_TIM_OC_DelayElapsedCallback>:
 8002bec:	4770      	bx	lr

08002bee <HAL_TIM_IC_CaptureCallback>:
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002bf0:	4770      	bx	lr

08002bf2 <HAL_TIM_TriggerCallback>:
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bf4:	6803      	ldr	r3, [r0, #0]
 8002bf6:	691a      	ldr	r2, [r3, #16]
 8002bf8:	0791      	lsls	r1, r2, #30
{
 8002bfa:	b510      	push	{r4, lr}
 8002bfc:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002bfe:	d50e      	bpl.n	8002c1e <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	0792      	lsls	r2, r2, #30
 8002c04:	d50b      	bpl.n	8002c1e <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c06:	f06f 0202 	mvn.w	r2, #2
 8002c0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	079b      	lsls	r3, r3, #30
 8002c14:	d077      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c16:	f7ff ffea 	bl	8002bee <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	0750      	lsls	r0, r2, #29
 8002c24:	d510      	bpl.n	8002c48 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c26:	68da      	ldr	r2, [r3, #12]
 8002c28:	0751      	lsls	r1, r2, #29
 8002c2a:	d50d      	bpl.n	8002c48 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c2c:	f06f 0204 	mvn.w	r2, #4
 8002c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c32:	2202      	movs	r2, #2
 8002c34:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c3c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002c3e:	d068      	beq.n	8002d12 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c40:	f7ff ffd5 	bl	8002bee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c44:	2300      	movs	r3, #0
 8002c46:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	691a      	ldr	r2, [r3, #16]
 8002c4c:	0712      	lsls	r2, r2, #28
 8002c4e:	d50f      	bpl.n	8002c70 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	0710      	lsls	r0, r2, #28
 8002c54:	d50c      	bpl.n	8002c70 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c56:	f06f 0208 	mvn.w	r2, #8
 8002c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c64:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c66:	d05a      	beq.n	8002d1e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c68:	f7ff ffc1 	bl	8002bee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c70:	6823      	ldr	r3, [r4, #0]
 8002c72:	691a      	ldr	r2, [r3, #16]
 8002c74:	06d2      	lsls	r2, r2, #27
 8002c76:	d510      	bpl.n	8002c9a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	06d0      	lsls	r0, r2, #27
 8002c7c:	d50d      	bpl.n	8002c9a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c7e:	f06f 0210 	mvn.w	r2, #16
 8002c82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c84:	2208      	movs	r2, #8
 8002c86:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c90:	d04b      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c92:	f7ff ffac 	bl	8002bee <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	2300      	movs	r3, #0
 8002c98:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c9a:	6823      	ldr	r3, [r4, #0]
 8002c9c:	691a      	ldr	r2, [r3, #16]
 8002c9e:	07d1      	lsls	r1, r2, #31
 8002ca0:	d508      	bpl.n	8002cb4 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	07d2      	lsls	r2, r2, #31
 8002ca6:	d505      	bpl.n	8002cb4 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ca8:	f06f 0201 	mvn.w	r2, #1
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cae:	4620      	mov	r0, r4
 8002cb0:	f7fe fc22 	bl	80014f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cb4:	6823      	ldr	r3, [r4, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	0610      	lsls	r0, r2, #24
 8002cba:	d508      	bpl.n	8002cce <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	0611      	lsls	r1, r2, #24
 8002cc0:	d505      	bpl.n	8002cce <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cc8:	4620      	mov	r0, r4
 8002cca:	f000 f9ac 	bl	8003026 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cce:	6823      	ldr	r3, [r4, #0]
 8002cd0:	691a      	ldr	r2, [r3, #16]
 8002cd2:	0652      	lsls	r2, r2, #25
 8002cd4:	d508      	bpl.n	8002ce8 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cd6:	68da      	ldr	r2, [r3, #12]
 8002cd8:	0650      	lsls	r0, r2, #25
 8002cda:	d505      	bpl.n	8002ce8 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cdc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f7ff ff85 	bl	8002bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ce8:	6823      	ldr	r3, [r4, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	0691      	lsls	r1, r2, #26
 8002cee:	d522      	bpl.n	8002d36 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	0692      	lsls	r2, r2, #26
 8002cf4:	d51f      	bpl.n	8002d36 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cf6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cfa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cfc:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002d02:	f000 b98f 	b.w	8003024 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	f7ff ff71 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0a:	4620      	mov	r0, r4
 8002d0c:	f7ff ff70 	bl	8002bf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d10:	e783      	b.n	8002c1a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d12:	f7ff ff6b 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d16:	4620      	mov	r0, r4
 8002d18:	f7ff ff6a 	bl	8002bf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d1c:	e792      	b.n	8002c44 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d1e:	f7ff ff65 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d22:	4620      	mov	r0, r4
 8002d24:	f7ff ff64 	bl	8002bf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d28:	e7a0      	b.n	8002c6c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2a:	f7ff ff5f 	bl	8002bec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2e:	4620      	mov	r0, r4
 8002d30:	f7ff ff5e 	bl	8002bf0 <HAL_TIM_PWM_PulseFinishedCallback>
 8002d34:	e7af      	b.n	8002c96 <HAL_TIM_IRQHandler+0xa2>
}
 8002d36:	bd10      	pop	{r4, pc}

08002d38 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d38:	4a30      	ldr	r2, [pc, #192]	; (8002dfc <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002d3a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d3c:	4290      	cmp	r0, r2
 8002d3e:	d012      	beq.n	8002d66 <TIM_Base_SetConfig+0x2e>
 8002d40:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d44:	d00f      	beq.n	8002d66 <TIM_Base_SetConfig+0x2e>
 8002d46:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d4a:	4290      	cmp	r0, r2
 8002d4c:	d00b      	beq.n	8002d66 <TIM_Base_SetConfig+0x2e>
 8002d4e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d52:	4290      	cmp	r0, r2
 8002d54:	d007      	beq.n	8002d66 <TIM_Base_SetConfig+0x2e>
 8002d56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d5a:	4290      	cmp	r0, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_Base_SetConfig+0x2e>
 8002d5e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002d62:	4290      	cmp	r0, r2
 8002d64:	d119      	bne.n	8002d9a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002d66:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002d6c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6e:	4a23      	ldr	r2, [pc, #140]	; (8002dfc <TIM_Base_SetConfig+0xc4>)
 8002d70:	4290      	cmp	r0, r2
 8002d72:	d029      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002d74:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d78:	d026      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002d7a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002d7e:	4290      	cmp	r0, r2
 8002d80:	d022      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002d82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d86:	4290      	cmp	r0, r2
 8002d88:	d01e      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002d8a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d8e:	4290      	cmp	r0, r2
 8002d90:	d01a      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002d92:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002d96:	4290      	cmp	r0, r2
 8002d98:	d016      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002d9a:	4a19      	ldr	r2, [pc, #100]	; (8002e00 <TIM_Base_SetConfig+0xc8>)
 8002d9c:	4290      	cmp	r0, r2
 8002d9e:	d013      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002da0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002da4:	4290      	cmp	r0, r2
 8002da6:	d00f      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002da8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dac:	4290      	cmp	r0, r2
 8002dae:	d00b      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002db0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002db4:	4290      	cmp	r0, r2
 8002db6:	d007      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002db8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dbc:	4290      	cmp	r0, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_Base_SetConfig+0x90>
 8002dc0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002dc4:	4290      	cmp	r0, r2
 8002dc6:	d103      	bne.n	8002dd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dc8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dce:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd0:	694a      	ldr	r2, [r1, #20]
 8002dd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dd6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002dd8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dda:	688b      	ldr	r3, [r1, #8]
 8002ddc:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dde:	680b      	ldr	r3, [r1, #0]
 8002de0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <TIM_Base_SetConfig+0xc4>)
 8002de4:	4298      	cmp	r0, r3
 8002de6:	d003      	beq.n	8002df0 <TIM_Base_SetConfig+0xb8>
 8002de8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dec:	4298      	cmp	r0, r3
 8002dee:	d101      	bne.n	8002df4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002df0:	690b      	ldr	r3, [r1, #16]
 8002df2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002df4:	2301      	movs	r3, #1
 8002df6:	6143      	str	r3, [r0, #20]
}
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40014000 	.word	0x40014000

08002e04 <HAL_TIM_Base_Init>:
{
 8002e04:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002e06:	4604      	mov	r4, r0
 8002e08:	b330      	cbz	r0, 8002e58 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002e0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002e0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002e12:	b91b      	cbnz	r3, 8002e1c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002e14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002e18:	f7fe fd08 	bl	800182c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e1e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e24:	1d21      	adds	r1, r4, #4
 8002e26:	f7ff ff87 	bl	8002d38 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8002e30:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e32:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002e36:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002e3a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002e3e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e42:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e46:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e4a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002e52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002e56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002e58:	2001      	movs	r0, #1
 8002e5a:	e7fc      	b.n	8002e56 <HAL_TIM_Base_Init+0x52>

08002e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e5c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e5e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e60:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e62:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e66:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002e6a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6c:	6083      	str	r3, [r0, #8]
}
 8002e6e:	bd10      	pop	{r4, pc}

08002e70 <HAL_TIM_ConfigClockSource>:
{
 8002e70:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8002e72:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
{
 8002e78:	4604      	mov	r4, r0
 8002e7a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002e7e:	f000 8091 	beq.w	8002fa4 <HAL_TIM_ConfigClockSource+0x134>
 8002e82:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8002e84:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002e88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002e8c:	6800      	ldr	r0, [r0, #0]
 8002e8e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002e98:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002e9a:	680b      	ldr	r3, [r1, #0]
 8002e9c:	2b60      	cmp	r3, #96	; 0x60
 8002e9e:	d052      	beq.n	8002f46 <HAL_TIM_ConfigClockSource+0xd6>
 8002ea0:	d833      	bhi.n	8002f0a <HAL_TIM_ConfigClockSource+0x9a>
 8002ea2:	2b40      	cmp	r3, #64	; 0x40
 8002ea4:	d067      	beq.n	8002f76 <HAL_TIM_ConfigClockSource+0x106>
 8002ea6:	d816      	bhi.n	8002ed6 <HAL_TIM_ConfigClockSource+0x66>
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d00d      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x58>
 8002eac:	d80a      	bhi.n	8002ec4 <HAL_TIM_ConfigClockSource+0x54>
 8002eae:	f033 0110 	bics.w	r1, r3, #16
 8002eb2:	d009      	beq.n	8002ec8 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8002ec4:	2b30      	cmp	r3, #48	; 0x30
 8002ec6:	d1f5      	bne.n	8002eb4 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8002ec8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eca:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	f043 0307 	orr.w	r3, r3, #7
 8002ed4:	e017      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8002ed6:	2b50      	cmp	r3, #80	; 0x50
 8002ed8:	d1ec      	bne.n	8002eb4 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eda:	684a      	ldr	r2, [r1, #4]
 8002edc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002ede:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ee0:	6a05      	ldr	r5, [r0, #32]
 8002ee2:	f025 0501 	bic.w	r5, r5, #1
 8002ee6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002eea:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002eee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002ef6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002ef8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002efa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002efc:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f02:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8002f06:	6083      	str	r3, [r0, #8]
 8002f08:	e011      	b.n	8002f2e <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 8002f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f0e:	d00e      	beq.n	8002f2e <HAL_TIM_ConfigClockSource+0xbe>
 8002f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f14:	d00d      	beq.n	8002f32 <HAL_TIM_ConfigClockSource+0xc2>
 8002f16:	2b70      	cmp	r3, #112	; 0x70
 8002f18:	d1cc      	bne.n	8002eb4 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8002f1a:	68cb      	ldr	r3, [r1, #12]
 8002f1c:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002f20:	f7ff ff9c 	bl	8002e5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002f24:	6822      	ldr	r2, [r4, #0]
 8002f26:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f2c:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002f2e:	2200      	movs	r2, #0
 8002f30:	e7c0      	b.n	8002eb4 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 8002f32:	68cb      	ldr	r3, [r1, #12]
 8002f34:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8002f38:	f7ff ff90 	bl	8002e5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f3c:	6822      	ldr	r2, [r4, #0]
 8002f3e:	6893      	ldr	r3, [r2, #8]
 8002f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f44:	e7f2      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f46:	684d      	ldr	r5, [r1, #4]
 8002f48:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f4a:	6a01      	ldr	r1, [r0, #32]
 8002f4c:	f021 0110 	bic.w	r1, r1, #16
 8002f50:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f52:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002f54:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f56:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f5e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f62:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002f66:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f68:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f6a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f70:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002f74:	e7c7      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f76:	684a      	ldr	r2, [r1, #4]
 8002f78:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002f7a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f7c:	6a05      	ldr	r5, [r0, #32]
 8002f7e:	f025 0501 	bic.w	r5, r5, #1
 8002f82:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f84:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f86:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f8e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002f92:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002f94:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002f96:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002f98:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f9e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002fa2:	e7b0      	b.n	8002f06 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	e78b      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x50>

08002fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fa8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002faa:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f04f 0302 	mov.w	r3, #2
 8002fb4:	d032      	beq.n	800301c <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002fba:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fbc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002fbe:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002fc2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002fc6:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fc8:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	4c15      	ldr	r4, [pc, #84]	; (8003020 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8002fcc:	42a3      	cmp	r3, r4
 8002fce:	d01a      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd4:	d017      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002fd6:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8002fda:	42a3      	cmp	r3, r4
 8002fdc:	d013      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002fde:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fe2:	42a3      	cmp	r3, r4
 8002fe4:	d00f      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002fe6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002fea:	42a3      	cmp	r3, r4
 8002fec:	d00b      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002fee:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002ff2:	42a3      	cmp	r3, r4
 8002ff4:	d007      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002ff6:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8002ffa:	42a3      	cmp	r3, r4
 8002ffc:	d003      	beq.n	8003006 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002ffe:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8003002:	42a3      	cmp	r3, r4
 8003004:	d104      	bne.n	8003010 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003006:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003008:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800300c:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800300e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003010:	2301      	movs	r3, #1
 8003012:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003016:	2300      	movs	r3, #0
 8003018:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800301c:	4618      	mov	r0, r3

  return HAL_OK;
}
 800301e:	bd30      	pop	{r4, r5, pc}
 8003020:	40010000 	.word	0x40010000

08003024 <HAL_TIMEx_CommutCallback>:
 8003024:	4770      	bx	lr

08003026 <HAL_TIMEx_BreakCallback>:
 8003026:	4770      	bx	lr

08003028 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003028:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	f102 030c 	add.w	r3, r2, #12
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003036:	320c      	adds	r2, #12
 8003038:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800303c:	6802      	ldr	r2, [r0, #0]
 800303e:	2900      	cmp	r1, #0
 8003040:	d1f2      	bne.n	8003028 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003042:	f102 0314 	add.w	r3, r2, #20
 8003046:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800304e:	f102 0c14 	add.w	ip, r2, #20
 8003052:	e84c 3100 	strex	r1, r3, [ip]
 8003056:	2900      	cmp	r1, #0
 8003058:	d1f3      	bne.n	8003042 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800305a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800305c:	2b01      	cmp	r3, #1
 800305e:	d10b      	bne.n	8003078 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003060:	f102 030c 	add.w	r3, r2, #12
 8003064:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800306c:	f102 0c0c 	add.w	ip, r2, #12
 8003070:	e84c 3100 	strex	r1, r3, [ip]
 8003074:	2900      	cmp	r1, #0
 8003076:	d1f3      	bne.n	8003060 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003078:	2320      	movs	r3, #32
 800307a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307e:	2300      	movs	r3, #0
 8003080:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003082:	4770      	bx	lr

08003084 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003084:	6802      	ldr	r2, [r0, #0]
 8003086:	68c1      	ldr	r1, [r0, #12]
 8003088:	6913      	ldr	r3, [r2, #16]
 800308a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800308e:	430b      	orrs	r3, r1
{
 8003090:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003092:	6113      	str	r3, [r2, #16]
{
 8003094:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003096:	6883      	ldr	r3, [r0, #8]
 8003098:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800309a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800309c:	4303      	orrs	r3, r0
 800309e:	6968      	ldr	r0, [r5, #20]
 80030a0:	4303      	orrs	r3, r0
 80030a2:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 80030a4:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80030a8:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030ac:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 80030ae:	430b      	orrs	r3, r1
 80030b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030b2:	6953      	ldr	r3, [r2, #20]
 80030b4:	69a9      	ldr	r1, [r5, #24]
 80030b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030ba:	430b      	orrs	r3, r1
 80030bc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <UART_SetConfig+0xb8>)
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d003      	beq.n	80030cc <UART_SetConfig+0x48>
 80030c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d123      	bne.n	8003114 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030cc:	f7ff fafe 	bl	80026cc <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d0:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030d2:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030d8:	e9d5 4600 	ldrd	r4, r6, [r5]
 80030dc:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030e0:	d11b      	bne.n	800311a <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030e2:	19b2      	adds	r2, r6, r6
 80030e4:	f04f 0300 	mov.w	r3, #0
 80030e8:	415b      	adcs	r3, r3
 80030ea:	f7fd fe2d 	bl	8000d48 <__aeabi_uldivmod>
 80030ee:	2164      	movs	r1, #100	; 0x64
 80030f0:	fbb0 f5f1 	udiv	r5, r0, r1
 80030f4:	fb01 0315 	mls	r3, r1, r5, r0
 80030f8:	00db      	lsls	r3, r3, #3
 80030fa:	3332      	adds	r3, #50	; 0x32
 80030fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8003100:	f003 0207 	and.w	r2, r3, #7
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 800310a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800310e:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003110:	60a3      	str	r3, [r4, #8]
  }
}
 8003112:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8003114:	f7ff faca 	bl	80026ac <HAL_RCC_GetPCLK1Freq>
 8003118:	e7da      	b.n	80030d0 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800311a:	00b2      	lsls	r2, r6, #2
 800311c:	0fb3      	lsrs	r3, r6, #30
 800311e:	f7fd fe13 	bl	8000d48 <__aeabi_uldivmod>
 8003122:	2264      	movs	r2, #100	; 0x64
 8003124:	fbb0 f1f2 	udiv	r1, r0, r2
 8003128:	fb02 0311 	mls	r3, r2, r1, r0
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	3332      	adds	r3, #50	; 0x32
 8003130:	fbb3 f3f2 	udiv	r3, r3, r2
 8003134:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8003138:	e7ea      	b.n	8003110 <UART_SetConfig+0x8c>
 800313a:	bf00      	nop
 800313c:	40011000 	.word	0x40011000

08003140 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8003140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003142:	4604      	mov	r4, r0
 8003144:	460e      	mov	r6, r1
 8003146:	4617      	mov	r7, r2
 8003148:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800314a:	6822      	ldr	r2, [r4, #0]
 800314c:	6813      	ldr	r3, [r2, #0]
 800314e:	ea36 0303 	bics.w	r3, r6, r3
 8003152:	d101      	bne.n	8003158 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003154:	2000      	movs	r0, #0
 8003156:	e028      	b.n	80031aa <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8003158:	1c6b      	adds	r3, r5, #1
 800315a:	d0f7      	beq.n	800314c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800315c:	b125      	cbz	r5, 8003168 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800315e:	f7fe fc77 	bl	8001a50 <HAL_GetTick>
 8003162:	1bc0      	subs	r0, r0, r7
 8003164:	4285      	cmp	r5, r0
 8003166:	d2f0      	bcs.n	800314a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003168:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	f102 030c 	add.w	r3, r2, #12
 800316e:	e853 3f00 	ldrex	r3, [r3]
 8003172:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003176:	320c      	adds	r2, #12
 8003178:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 800317c:	6821      	ldr	r1, [r4, #0]
 800317e:	2800      	cmp	r0, #0
 8003180:	d1f2      	bne.n	8003168 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	f101 0314 	add.w	r3, r1, #20
 8003186:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800318e:	f101 0014 	add.w	r0, r1, #20
 8003192:	e840 3200 	strex	r2, r3, [r0]
 8003196:	2a00      	cmp	r2, #0
 8003198:	d1f3      	bne.n	8003182 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800319a:	2320      	movs	r3, #32
 800319c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 80031a0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 80031a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80031a8:	2003      	movs	r0, #3
}
 80031aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031ac <HAL_UART_Init>:
{
 80031ac:	b510      	push	{r4, lr}
  if (huart == NULL)
 80031ae:	4604      	mov	r4, r0
 80031b0:	b340      	cbz	r0, 8003204 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80031b2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80031b6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80031ba:	b91b      	cbnz	r3, 80031c4 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80031bc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80031c0:	f7fe fb94 	bl	80018ec <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80031c4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80031c6:	2324      	movs	r3, #36	; 0x24
 80031c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80031cc:	68d3      	ldr	r3, [r2, #12]
 80031ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031d2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80031d4:	4620      	mov	r0, r4
 80031d6:	f7ff ff55 	bl	8003084 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031da:	6823      	ldr	r3, [r4, #0]
 80031dc:	691a      	ldr	r2, [r3, #16]
 80031de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031e4:	695a      	ldr	r2, [r3, #20]
 80031e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031ea:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031f2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80031f6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031fa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031fe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003202:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003204:	2001      	movs	r0, #1
 8003206:	e7fc      	b.n	8003202 <HAL_UART_Init+0x56>

08003208 <HAL_UART_Transmit>:
{
 8003208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800320a:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800320c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8003210:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8003212:	2a20      	cmp	r2, #32
{
 8003214:	4604      	mov	r4, r0
 8003216:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8003218:	d149      	bne.n	80032ae <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800321a:	2900      	cmp	r1, #0
 800321c:	d045      	beq.n	80032aa <HAL_UART_Transmit+0xa2>
 800321e:	2f00      	cmp	r7, #0
 8003220:	d043      	beq.n	80032aa <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8003222:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8003226:	2a01      	cmp	r2, #1
 8003228:	d041      	beq.n	80032ae <HAL_UART_Transmit+0xa6>
 800322a:	2201      	movs	r2, #1
 800322c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003230:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003232:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003234:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003236:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 800323a:	f7fe fc09 	bl	8001a50 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323e:	68a1      	ldr	r1, [r4, #8]
 8003240:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8003242:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003244:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003248:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 800324a:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800324c:	d103      	bne.n	8003256 <HAL_UART_Transmit+0x4e>
 800324e:	6921      	ldr	r1, [r4, #16]
 8003250:	b909      	cbnz	r1, 8003256 <HAL_UART_Transmit+0x4e>
 8003252:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003254:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8003256:	2100      	movs	r1, #0
 8003258:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800325c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800325e:	b289      	uxth	r1, r1
 8003260:	b941      	cbnz	r1, 8003274 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003262:	2140      	movs	r1, #64	; 0x40
 8003264:	4620      	mov	r0, r4
 8003266:	f7ff ff6b 	bl	8003140 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800326a:	b960      	cbnz	r0, 8003286 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800326c:	2320      	movs	r3, #32
 800326e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003272:	e009      	b.n	8003288 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003274:	2180      	movs	r1, #128	; 0x80
 8003276:	4620      	mov	r0, r4
 8003278:	e9cd 2300 	strd	r2, r3, [sp]
 800327c:	f7ff ff60 	bl	8003140 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003284:	b110      	cbz	r0, 800328c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8003286:	2003      	movs	r0, #3
}
 8003288:	b003      	add	sp, #12
 800328a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800328c:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 800328e:	b94e      	cbnz	r6, 80032a4 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003290:	f835 1b02 	ldrh.w	r1, [r5], #2
 8003294:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003298:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800329a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800329c:	3901      	subs	r1, #1
 800329e:	b289      	uxth	r1, r1
 80032a0:	84e1      	strh	r1, [r4, #38]	; 0x26
 80032a2:	e7db      	b.n	800325c <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80032a4:	f816 1b01 	ldrb.w	r1, [r6], #1
 80032a8:	e7f6      	b.n	8003298 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80032aa:	2001      	movs	r0, #1
 80032ac:	e7ec      	b.n	8003288 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80032ae:	2002      	movs	r0, #2
 80032b0:	e7ea      	b.n	8003288 <HAL_UART_Transmit+0x80>

080032b2 <HAL_UART_TxCpltCallback>:
 80032b2:	4770      	bx	lr

080032b4 <HAL_UART_RxCpltCallback>:
 80032b4:	4770      	bx	lr

080032b6 <HAL_UART_ErrorCallback>:
 80032b6:	4770      	bx	lr

080032b8 <UART_DMAAbortOnError>:
{
 80032b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80032bc:	2300      	movs	r3, #0
 80032be:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80032c0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80032c2:	f7ff fff8 	bl	80032b6 <HAL_UART_ErrorCallback>
}
 80032c6:	bd08      	pop	{r3, pc}

080032c8 <HAL_UARTEx_RxEventCallback>:
}
 80032c8:	4770      	bx	lr

080032ca <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80032ca:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032cc:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032ce:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032d0:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032d2:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80032d6:	d13e      	bne.n	8003356 <UART_Receive_IT.part.0.isra.0+0x8c>
 80032d8:	6901      	ldr	r1, [r0, #16]
 80032da:	2900      	cmp	r1, #0
 80032dc:	d13e      	bne.n	800335c <UART_Receive_IT.part.0.isra.0+0x92>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032de:	6852      	ldr	r2, [r2, #4]
 80032e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e4:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 80032e8:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80032ea:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80032ec:	3b01      	subs	r3, #1
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d12c      	bne.n	8003350 <UART_Receive_IT.part.0.isra.0+0x86>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032f6:	6802      	ldr	r2, [r0, #0]
 80032f8:	68d1      	ldr	r1, [r2, #12]
 80032fa:	f021 0120 	bic.w	r1, r1, #32
 80032fe:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003300:	68d1      	ldr	r1, [r2, #12]
 8003302:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8003306:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003308:	6951      	ldr	r1, [r2, #20]
 800330a:	f021 0101 	bic.w	r1, r1, #1
 800330e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003310:	2220      	movs	r2, #32
 8003312:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003316:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003318:	2a01      	cmp	r2, #1
 800331a:	6802      	ldr	r2, [r0, #0]
 800331c:	d128      	bne.n	8003370 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003320:	f102 030c 	add.w	r3, r2, #12
 8003324:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003328:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332c:	f102 0c0c 	add.w	ip, r2, #12
 8003330:	e84c 3100 	strex	r1, r3, [ip]
 8003334:	2900      	cmp	r1, #0
 8003336:	d1f3      	bne.n	8003320 <UART_Receive_IT.part.0.isra.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003338:	6813      	ldr	r3, [r2, #0]
 800333a:	06db      	lsls	r3, r3, #27
 800333c:	d505      	bpl.n	800334a <UART_Receive_IT.part.0.isra.0+0x80>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800333e:	9101      	str	r1, [sp, #4]
 8003340:	6813      	ldr	r3, [r2, #0]
 8003342:	9301      	str	r3, [sp, #4]
 8003344:	6853      	ldr	r3, [r2, #4]
 8003346:	9301      	str	r3, [sp, #4]
 8003348:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800334a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800334c:	f7ff ffbc 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
}
 8003350:	b003      	add	sp, #12
 8003352:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003356:	b939      	cbnz	r1, 8003368 <UART_Receive_IT.part.0.isra.0+0x9e>
 8003358:	6901      	ldr	r1, [r0, #16]
 800335a:	b929      	cbnz	r1, 8003368 <UART_Receive_IT.part.0.isra.0+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800335c:	6852      	ldr	r2, [r2, #4]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8003362:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003364:	3301      	adds	r3, #1
 8003366:	e7bf      	b.n	80032e8 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003368:	6852      	ldr	r2, [r2, #4]
 800336a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800336e:	e7f7      	b.n	8003360 <UART_Receive_IT.part.0.isra.0+0x96>
        HAL_UART_RxCpltCallback(huart);
 8003370:	f7ff ffa0 	bl	80032b4 <HAL_UART_RxCpltCallback>
 8003374:	e7ec      	b.n	8003350 <UART_Receive_IT.part.0.isra.0+0x86>
	...

08003378 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003378:	6803      	ldr	r3, [r0, #0]
{
 800337a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800337c:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800337e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003380:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8003382:	f012 0f0f 	tst.w	r2, #15
{
 8003386:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8003388:	d10c      	bne.n	80033a4 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800338a:	0695      	lsls	r5, r2, #26
 800338c:	d570      	bpl.n	8003470 <HAL_UART_IRQHandler+0xf8>
 800338e:	068d      	lsls	r5, r1, #26
 8003390:	d56e      	bpl.n	8003470 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003392:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8003396:	2b22      	cmp	r3, #34	; 0x22
 8003398:	d164      	bne.n	8003464 <HAL_UART_IRQHandler+0xec>
}
 800339a:	b003      	add	sp, #12
 800339c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80033a0:	f7ff bf93 	b.w	80032ca <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033a4:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033a8:	f401 7590 	and.w	r5, r1, #288	; 0x120
 80033ac:	4305      	orrs	r5, r0
 80033ae:	d05f      	beq.n	8003470 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033b0:	07d5      	lsls	r5, r2, #31
 80033b2:	d505      	bpl.n	80033c0 <HAL_UART_IRQHandler+0x48>
 80033b4:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b6:	bf42      	ittt	mi
 80033b8:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 80033ba:	f043 0301 	orrmi.w	r3, r3, #1
 80033be:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033c0:	0755      	lsls	r5, r2, #29
 80033c2:	d504      	bpl.n	80033ce <HAL_UART_IRQHandler+0x56>
 80033c4:	b118      	cbz	r0, 80033ce <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033c8:	f043 0302 	orr.w	r3, r3, #2
 80033cc:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033ce:	0793      	lsls	r3, r2, #30
 80033d0:	d504      	bpl.n	80033dc <HAL_UART_IRQHandler+0x64>
 80033d2:	b118      	cbz	r0, 80033dc <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033d6:	f043 0304 	orr.w	r3, r3, #4
 80033da:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80033dc:	0715      	lsls	r5, r2, #28
 80033de:	d507      	bpl.n	80033f0 <HAL_UART_IRQHandler+0x78>
 80033e0:	f001 0320 	and.w	r3, r1, #32
 80033e4:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033e6:	bf1e      	ittt	ne
 80033e8:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 80033ea:	f043 0308 	orrne.w	r3, r3, #8
 80033ee:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d036      	beq.n	8003464 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80033f6:	0690      	lsls	r0, r2, #26
 80033f8:	d508      	bpl.n	800340c <HAL_UART_IRQHandler+0x94>
 80033fa:	068a      	lsls	r2, r1, #26
 80033fc:	d506      	bpl.n	800340c <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033fe:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8003402:	2b22      	cmp	r3, #34	; 0x22
 8003404:	d102      	bne.n	800340c <HAL_UART_IRQHandler+0x94>
 8003406:	4620      	mov	r0, r4
 8003408:	f7ff ff5f 	bl	80032ca <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003410:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003412:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003416:	f005 0508 	and.w	r5, r5, #8
 800341a:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 800341c:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800341e:	d023      	beq.n	8003468 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 8003420:	f7ff fe02 	bl	8003028 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	6822      	ldr	r2, [r4, #0]
 8003426:	6953      	ldr	r3, [r2, #20]
 8003428:	065b      	lsls	r3, r3, #25
 800342a:	d518      	bpl.n	800345e <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	f102 0314 	add.w	r3, r2, #20
 8003430:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003434:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	f102 0014 	add.w	r0, r2, #20
 800343c:	e840 3100 	strex	r1, r3, [r0]
 8003440:	2900      	cmp	r1, #0
 8003442:	d1f3      	bne.n	800342c <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 8003444:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003446:	b150      	cbz	r0, 800345e <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003448:	4b72      	ldr	r3, [pc, #456]	; (8003614 <HAL_UART_IRQHandler+0x29c>)
 800344a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800344c:	f7fe feb4 	bl	80021b8 <HAL_DMA_Abort_IT>
 8003450:	b140      	cbz	r0, 8003464 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003452:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8003454:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8003456:	b003      	add	sp, #12
 8003458:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800345c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800345e:	4620      	mov	r0, r4
 8003460:	f7ff ff29 	bl	80032b6 <HAL_UART_ErrorCallback>
}
 8003464:	b003      	add	sp, #12
 8003466:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8003468:	f7ff ff25 	bl	80032b6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	6425      	str	r5, [r4, #64]	; 0x40
 800346e:	e7f9      	b.n	8003464 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003470:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003472:	2801      	cmp	r0, #1
 8003474:	f040 8091 	bne.w	800359a <HAL_UART_IRQHandler+0x222>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003478:	06d5      	lsls	r5, r2, #27
 800347a:	f140 808e 	bpl.w	800359a <HAL_UART_IRQHandler+0x222>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800347e:	06c8      	lsls	r0, r1, #27
 8003480:	f140 808b 	bpl.w	800359a <HAL_UART_IRQHandler+0x222>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003484:	2200      	movs	r2, #0
 8003486:	9201      	str	r2, [sp, #4]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	9201      	str	r2, [sp, #4]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	9201      	str	r2, [sp, #4]
 8003490:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003492:	695a      	ldr	r2, [r3, #20]
 8003494:	0655      	lsls	r5, r2, #25
 8003496:	d54c      	bpl.n	8003532 <HAL_UART_IRQHandler+0x1ba>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003498:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800349a:	680a      	ldr	r2, [r1, #0]
 800349c:	6852      	ldr	r2, [r2, #4]
 800349e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80034a0:	2a00      	cmp	r2, #0
 80034a2:	d0df      	beq.n	8003464 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034a4:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 80034a6:	4290      	cmp	r0, r2
 80034a8:	d9dc      	bls.n	8003464 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 80034aa:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ac:	69ca      	ldr	r2, [r1, #28]
 80034ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80034b2:	d036      	beq.n	8003522 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	f103 020c 	add.w	r2, r3, #12
 80034b8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	f103 000c 	add.w	r0, r3, #12
 80034c4:	e840 2100 	strex	r1, r2, [r0]
 80034c8:	2900      	cmp	r1, #0
 80034ca:	d1f3      	bne.n	80034b4 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	f103 0214 	add.w	r2, r3, #20
 80034d0:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	f103 0014 	add.w	r0, r3, #20
 80034dc:	e840 2100 	strex	r1, r2, [r0]
 80034e0:	2900      	cmp	r1, #0
 80034e2:	d1f3      	bne.n	80034cc <HAL_UART_IRQHandler+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	f103 0214 	add.w	r2, r3, #20
 80034e8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	f103 0014 	add.w	r0, r3, #20
 80034f4:	e840 2100 	strex	r1, r2, [r0]
 80034f8:	2900      	cmp	r1, #0
 80034fa:	d1f3      	bne.n	80034e4 <HAL_UART_IRQHandler+0x16c>
          huart->RxState = HAL_UART_STATE_READY;
 80034fc:	2220      	movs	r2, #32
 80034fe:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003502:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003504:	f103 020c 	add.w	r2, r3, #12
 8003508:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800350c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	f103 000c 	add.w	r0, r3, #12
 8003514:	e840 2100 	strex	r1, r2, [r0]
 8003518:	2900      	cmp	r1, #0
 800351a:	d1f3      	bne.n	8003504 <HAL_UART_IRQHandler+0x18c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800351c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800351e:	f7fe fe07 	bl	8002130 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003522:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8003524:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003526:	1ac9      	subs	r1, r1, r3
 8003528:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800352a:	4620      	mov	r0, r4
 800352c:	f7ff fecc 	bl	80032c8 <HAL_UARTEx_RxEventCallback>
 8003530:	e798      	b.n	8003464 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003532:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003534:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 8003536:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 8003538:	b289      	uxth	r1, r1
 800353a:	2900      	cmp	r1, #0
 800353c:	d092      	beq.n	8003464 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800353e:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8003540:	1a89      	subs	r1, r1, r2
 8003542:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003544:	2900      	cmp	r1, #0
 8003546:	d08d      	beq.n	8003464 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	f103 020c 	add.w	r2, r3, #12
 800354c:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003550:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	f103 050c 	add.w	r5, r3, #12
 8003558:	e845 2000 	strex	r0, r2, [r5]
 800355c:	2800      	cmp	r0, #0
 800355e:	d1f3      	bne.n	8003548 <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003560:	f103 0214 	add.w	r2, r3, #20
 8003564:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003568:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356c:	f103 0514 	add.w	r5, r3, #20
 8003570:	e845 2000 	strex	r0, r2, [r5]
 8003574:	2800      	cmp	r0, #0
 8003576:	d1f3      	bne.n	8003560 <HAL_UART_IRQHandler+0x1e8>
        huart->RxState = HAL_UART_STATE_READY;
 8003578:	2220      	movs	r2, #32
 800357a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357e:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	f103 020c 	add.w	r2, r3, #12
 8003584:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358c:	f103 050c 	add.w	r5, r3, #12
 8003590:	e845 2000 	strex	r0, r2, [r5]
 8003594:	2800      	cmp	r0, #0
 8003596:	d1f3      	bne.n	8003580 <HAL_UART_IRQHandler+0x208>
 8003598:	e7c7      	b.n	800352a <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800359a:	0610      	lsls	r0, r2, #24
 800359c:	d528      	bpl.n	80035f0 <HAL_UART_IRQHandler+0x278>
 800359e:	060d      	lsls	r5, r1, #24
 80035a0:	d526      	bpl.n	80035f0 <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035a2:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80035a6:	2a21      	cmp	r2, #33	; 0x21
 80035a8:	f47f af5c 	bne.w	8003464 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035ac:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035ae:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035b0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80035b4:	d117      	bne.n	80035e6 <HAL_UART_IRQHandler+0x26e>
 80035b6:	6921      	ldr	r1, [r4, #16]
 80035b8:	b9a9      	cbnz	r1, 80035e6 <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035ba:	f832 1b02 	ldrh.w	r1, [r2], #2
 80035be:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80035c2:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035c4:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 80035c6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80035c8:	3a01      	subs	r2, #1
 80035ca:	b292      	uxth	r2, r2
 80035cc:	84e2      	strh	r2, [r4, #38]	; 0x26
 80035ce:	2a00      	cmp	r2, #0
 80035d0:	f47f af48 	bne.w	8003464 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035d4:	68da      	ldr	r2, [r3, #12]
 80035d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035da:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035e2:	60da      	str	r2, [r3, #12]
 80035e4:	e73e      	b.n	8003464 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035e6:	1c51      	adds	r1, r2, #1
 80035e8:	6221      	str	r1, [r4, #32]
 80035ea:	7812      	ldrb	r2, [r2, #0]
 80035ec:	605a      	str	r2, [r3, #4]
 80035ee:	e7ea      	b.n	80035c6 <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035f0:	0650      	lsls	r0, r2, #25
 80035f2:	f57f af37 	bpl.w	8003464 <HAL_UART_IRQHandler+0xec>
 80035f6:	064a      	lsls	r2, r1, #25
 80035f8:	f57f af34 	bpl.w	8003464 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003602:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003604:	2320      	movs	r3, #32
 8003606:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 800360a:	4620      	mov	r0, r4
 800360c:	f7ff fe51 	bl	80032b2 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 8003610:	e728      	b.n	8003464 <HAL_UART_IRQHandler+0xec>
 8003612:	bf00      	nop
 8003614:	080032b9 	.word	0x080032b9

08003618 <arm_max_f32>:
 8003618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800361c:	1e4f      	subs	r7, r1, #1
 800361e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8003622:	f100 0e04 	add.w	lr, r0, #4
 8003626:	edd0 7a00 	vldr	s15, [r0]
 800362a:	d058      	beq.n	80036de <arm_max_f32+0xc6>
 800362c:	3014      	adds	r0, #20
 800362e:	46c4      	mov	ip, r8
 8003630:	2604      	movs	r6, #4
 8003632:	2400      	movs	r4, #0
 8003634:	ed10 6a04 	vldr	s12, [r0, #-16]
 8003638:	ed50 6a03 	vldr	s13, [r0, #-12]
 800363c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8003640:	ed50 5a01 	vldr	s11, [r0, #-4]
 8003644:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364c:	bfc8      	it	gt
 800364e:	eef0 7a46 	vmovgt.f32	s15, s12
 8003652:	f1a6 0503 	sub.w	r5, r6, #3
 8003656:	eef4 7ae6 	vcmpe.f32	s15, s13
 800365a:	bfc8      	it	gt
 800365c:	462c      	movgt	r4, r5
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	bf48      	it	mi
 8003664:	eef0 7a66 	vmovmi.f32	s15, s13
 8003668:	f1a6 0502 	sub.w	r5, r6, #2
 800366c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003670:	bf48      	it	mi
 8003672:	462c      	movmi	r4, r5
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	bf48      	it	mi
 800367a:	eef0 7a47 	vmovmi.f32	s15, s14
 800367e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003682:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003686:	bf48      	it	mi
 8003688:	462c      	movmi	r4, r5
 800368a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800368e:	bf48      	it	mi
 8003690:	4634      	movmi	r4, r6
 8003692:	bf48      	it	mi
 8003694:	eef0 7a65 	vmovmi.f32	s15, s11
 8003698:	f1bc 0c01 	subs.w	ip, ip, #1
 800369c:	f100 0010 	add.w	r0, r0, #16
 80036a0:	f106 0604 	add.w	r6, r6, #4
 80036a4:	d1c6      	bne.n	8003634 <arm_max_f32+0x1c>
 80036a6:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80036aa:	f017 0003 	ands.w	r0, r7, #3
 80036ae:	d018      	beq.n	80036e2 <arm_max_f32+0xca>
 80036b0:	1a08      	subs	r0, r1, r0
 80036b2:	ecbe 7a01 	vldmia	lr!, {s14}
 80036b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036be:	bfc8      	it	gt
 80036c0:	4604      	movgt	r4, r0
 80036c2:	f100 0001 	add.w	r0, r0, #1
 80036c6:	bfd8      	it	le
 80036c8:	eeb0 7a67 	vmovle.f32	s14, s15
 80036cc:	4281      	cmp	r1, r0
 80036ce:	eef0 7a47 	vmov.f32	s15, s14
 80036d2:	d1ee      	bne.n	80036b2 <arm_max_f32+0x9a>
 80036d4:	ed82 7a00 	vstr	s14, [r2]
 80036d8:	601c      	str	r4, [r3, #0]
 80036da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036de:	4644      	mov	r4, r8
 80036e0:	e7e3      	b.n	80036aa <arm_max_f32+0x92>
 80036e2:	eeb0 7a67 	vmov.f32	s14, s15
 80036e6:	e7f5      	b.n	80036d4 <arm_max_f32+0xbc>

080036e8 <arm_cfft_radix8by2_f32>:
 80036e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	ed2d 8b08 	vpush	{d8-d11}
 80036f0:	4607      	mov	r7, r0
 80036f2:	4608      	mov	r0, r1
 80036f4:	f8b7 e000 	ldrh.w	lr, [r7]
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80036fe:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8003702:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8003706:	f000 80b0 	beq.w	800386a <arm_cfft_radix8by2_f32+0x182>
 800370a:	008b      	lsls	r3, r1, #2
 800370c:	3310      	adds	r3, #16
 800370e:	18c6      	adds	r6, r0, r3
 8003710:	3210      	adds	r2, #16
 8003712:	4443      	add	r3, r8
 8003714:	f100 0510 	add.w	r5, r0, #16
 8003718:	f108 0410 	add.w	r4, r8, #16
 800371c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8003720:	ed54 6a03 	vldr	s13, [r4, #-12]
 8003724:	ed13 4a04 	vldr	s8, [r3, #-16]
 8003728:	ed53 3a03 	vldr	s7, [r3, #-12]
 800372c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8003730:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003734:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003738:	ed54 7a01 	vldr	s15, [r4, #-4]
 800373c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8003740:	ed56 2a03 	vldr	s5, [r6, #-12]
 8003744:	ed15 6a03 	vldr	s12, [r5, #-12]
 8003748:	ed15 7a01 	vldr	s14, [r5, #-4]
 800374c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8003750:	ed56 0a02 	vldr	s1, [r6, #-8]
 8003754:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003758:	ed55 4a02 	vldr	s9, [r5, #-8]
 800375c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8003760:	ee36 ba26 	vadd.f32	s22, s12, s13
 8003764:	ee37 aa27 	vadd.f32	s20, s14, s15
 8003768:	ee72 9a04 	vadd.f32	s19, s4, s8
 800376c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8003770:	ee31 8a05 	vadd.f32	s16, s2, s10
 8003774:	ee74 aa80 	vadd.f32	s21, s9, s0
 8003778:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800377c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8003780:	ed05 ba03 	vstr	s22, [r5, #-12]
 8003784:	ed45 aa02 	vstr	s21, [r5, #-8]
 8003788:	ed05 aa01 	vstr	s20, [r5, #-4]
 800378c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003790:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003794:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003798:	ed46 8a02 	vstr	s17, [r6, #-8]
 800379c:	ee76 6a66 	vsub.f32	s13, s12, s13
 80037a0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80037a4:	ed12 6a03 	vldr	s12, [r2, #-12]
 80037a8:	ed52 2a04 	vldr	s5, [r2, #-16]
 80037ac:	ee33 3a61 	vsub.f32	s6, s6, s3
 80037b0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80037b4:	ee26 8a86 	vmul.f32	s16, s13, s12
 80037b8:	ee24 2a06 	vmul.f32	s4, s8, s12
 80037bc:	ee63 1a22 	vmul.f32	s3, s6, s5
 80037c0:	ee24 4a22 	vmul.f32	s8, s8, s5
 80037c4:	ee23 3a06 	vmul.f32	s6, s6, s12
 80037c8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80037cc:	ee23 6a86 	vmul.f32	s12, s7, s12
 80037d0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80037d4:	ee36 6a04 	vadd.f32	s12, s12, s8
 80037d8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80037dc:	ee72 3a63 	vsub.f32	s7, s4, s7
 80037e0:	ee71 2a88 	vadd.f32	s5, s3, s16
 80037e4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80037e8:	ed44 2a04 	vstr	s5, [r4, #-16]
 80037ec:	ed43 3a04 	vstr	s7, [r3, #-16]
 80037f0:	ed03 6a03 	vstr	s12, [r3, #-12]
 80037f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037f8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80037fc:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003800:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003804:	ee35 6a41 	vsub.f32	s12, s10, s2
 8003808:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800380c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003810:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003814:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8003818:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800381c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8003820:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003824:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003828:	ee26 6a25 	vmul.f32	s12, s12, s11
 800382c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003830:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003834:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003838:	ee37 7a26 	vadd.f32	s14, s14, s13
 800383c:	f1be 0e01 	subs.w	lr, lr, #1
 8003840:	ed44 5a02 	vstr	s11, [r4, #-8]
 8003844:	f105 0510 	add.w	r5, r5, #16
 8003848:	ed44 7a01 	vstr	s15, [r4, #-4]
 800384c:	f106 0610 	add.w	r6, r6, #16
 8003850:	ed03 6a02 	vstr	s12, [r3, #-8]
 8003854:	ed03 7a01 	vstr	s14, [r3, #-4]
 8003858:	f102 0210 	add.w	r2, r2, #16
 800385c:	f104 0410 	add.w	r4, r4, #16
 8003860:	f103 0310 	add.w	r3, r3, #16
 8003864:	f47f af5a 	bne.w	800371c <arm_cfft_radix8by2_f32+0x34>
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	b28c      	uxth	r4, r1
 800386c:	4621      	mov	r1, r4
 800386e:	2302      	movs	r3, #2
 8003870:	f000 fbca 	bl	8004008 <arm_radix8_butterfly_f32>
 8003874:	ecbd 8b08 	vpop	{d8-d11}
 8003878:	4621      	mov	r1, r4
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	4640      	mov	r0, r8
 800387e:	2302      	movs	r3, #2
 8003880:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003884:	f000 bbc0 	b.w	8004008 <arm_radix8_butterfly_f32>

08003888 <arm_cfft_radix8by4_f32>:
 8003888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800388c:	ed2d 8b0a 	vpush	{d8-d12}
 8003890:	8802      	ldrh	r2, [r0, #0]
 8003892:	ed91 6a00 	vldr	s12, [r1]
 8003896:	b08f      	sub	sp, #60	; 0x3c
 8003898:	460f      	mov	r7, r1
 800389a:	0852      	lsrs	r2, r2, #1
 800389c:	6841      	ldr	r1, [r0, #4]
 800389e:	900c      	str	r0, [sp, #48]	; 0x30
 80038a0:	0093      	lsls	r3, r2, #2
 80038a2:	4638      	mov	r0, r7
 80038a4:	4418      	add	r0, r3
 80038a6:	4606      	mov	r6, r0
 80038a8:	9009      	str	r0, [sp, #36]	; 0x24
 80038aa:	4418      	add	r0, r3
 80038ac:	edd0 6a00 	vldr	s13, [r0]
 80038b0:	ed96 4a00 	vldr	s8, [r6]
 80038b4:	edd6 2a01 	vldr	s5, [r6, #4]
 80038b8:	edd0 7a01 	vldr	s15, [r0, #4]
 80038bc:	900a      	str	r0, [sp, #40]	; 0x28
 80038be:	ee76 5a26 	vadd.f32	s11, s12, s13
 80038c2:	4604      	mov	r4, r0
 80038c4:	4625      	mov	r5, r4
 80038c6:	441c      	add	r4, r3
 80038c8:	edd4 4a00 	vldr	s9, [r4]
 80038cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80038d0:	ed94 3a01 	vldr	s6, [r4, #4]
 80038d4:	9401      	str	r4, [sp, #4]
 80038d6:	ee35 5a84 	vadd.f32	s10, s11, s8
 80038da:	4630      	mov	r0, r6
 80038dc:	ee35 5a24 	vadd.f32	s10, s10, s9
 80038e0:	463e      	mov	r6, r7
 80038e2:	ee15 ea10 	vmov	lr, s10
 80038e6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80038ea:	f846 eb08 	str.w	lr, [r6], #8
 80038ee:	ee37 6a27 	vadd.f32	s12, s14, s15
 80038f2:	ed90 5a01 	vldr	s10, [r0, #4]
 80038f6:	9605      	str	r6, [sp, #20]
 80038f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fc:	9e01      	ldr	r6, [sp, #4]
 80038fe:	9707      	str	r7, [sp, #28]
 8003900:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8003904:	ed96 2a01 	vldr	s4, [r6, #4]
 8003908:	ee36 7a05 	vadd.f32	s14, s12, s10
 800390c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8003910:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8003914:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003918:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800391c:	4604      	mov	r4, r0
 800391e:	46a3      	mov	fp, r4
 8003920:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003924:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003928:	ee14 8a10 	vmov	r8, s8
 800392c:	46a4      	mov	ip, r4
 800392e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8003932:	ed87 7a01 	vstr	s14, [r7, #4]
 8003936:	f84b 8b08 	str.w	r8, [fp], #8
 800393a:	f1ac 0704 	sub.w	r7, ip, #4
 800393e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8003942:	f101 0c08 	add.w	ip, r1, #8
 8003946:	462c      	mov	r4, r5
 8003948:	f8cd c010 	str.w	ip, [sp, #16]
 800394c:	ee15 ca90 	vmov	ip, s11
 8003950:	ee36 6a62 	vsub.f32	s12, s12, s5
 8003954:	f844 cb08 	str.w	ip, [r4], #8
 8003958:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800395c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003960:	9406      	str	r4, [sp, #24]
 8003962:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003966:	f101 0410 	add.w	r4, r1, #16
 800396a:	0852      	lsrs	r2, r2, #1
 800396c:	9402      	str	r4, [sp, #8]
 800396e:	ed85 6a01 	vstr	s12, [r5, #4]
 8003972:	462c      	mov	r4, r5
 8003974:	f101 0518 	add.w	r5, r1, #24
 8003978:	920b      	str	r2, [sp, #44]	; 0x2c
 800397a:	46b2      	mov	sl, r6
 800397c:	9503      	str	r5, [sp, #12]
 800397e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003982:	3a02      	subs	r2, #2
 8003984:	ee16 5a90 	vmov	r5, s13
 8003988:	46b6      	mov	lr, r6
 800398a:	4630      	mov	r0, r6
 800398c:	0852      	lsrs	r2, r2, #1
 800398e:	f84a 5b08 	str.w	r5, [sl], #8
 8003992:	f1a0 0604 	sub.w	r6, r0, #4
 8003996:	edce 7a01 	vstr	s15, [lr, #4]
 800399a:	9208      	str	r2, [sp, #32]
 800399c:	f000 8130 	beq.w	8003c00 <arm_cfft_radix8by4_f32+0x378>
 80039a0:	4691      	mov	r9, r2
 80039a2:	9a07      	ldr	r2, [sp, #28]
 80039a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80039a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80039ac:	3b08      	subs	r3, #8
 80039ae:	f102 0510 	add.w	r5, r2, #16
 80039b2:	f101 0c20 	add.w	ip, r1, #32
 80039b6:	f1a4 020c 	sub.w	r2, r4, #12
 80039ba:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80039be:	4433      	add	r3, r6
 80039c0:	3410      	adds	r4, #16
 80039c2:	4650      	mov	r0, sl
 80039c4:	4659      	mov	r1, fp
 80039c6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80039ca:	ed14 5a02 	vldr	s10, [r4, #-8]
 80039ce:	ed91 7a00 	vldr	s14, [r1]
 80039d2:	edd0 7a00 	vldr	s15, [r0]
 80039d6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80039da:	ed15 4a01 	vldr	s8, [r5, #-4]
 80039de:	edd0 6a01 	vldr	s13, [r0, #4]
 80039e2:	ed91 6a01 	vldr	s12, [r1, #4]
 80039e6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80039ea:	ee34 0a25 	vadd.f32	s0, s8, s11
 80039ee:	ee78 4a07 	vadd.f32	s9, s16, s14
 80039f2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80039f6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80039fa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80039fe:	ed45 4a02 	vstr	s9, [r5, #-8]
 8003a02:	edd1 4a01 	vldr	s9, [r1, #4]
 8003a06:	ed90 4a01 	vldr	s8, [r0, #4]
 8003a0a:	ee70 4a24 	vadd.f32	s9, s0, s9
 8003a0e:	ee75 aa06 	vadd.f32	s21, s10, s12
 8003a12:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003a16:	ee35 aac7 	vsub.f32	s20, s11, s14
 8003a1a:	ed45 4a01 	vstr	s9, [r5, #-4]
 8003a1e:	edd6 1a00 	vldr	s3, [r6]
 8003a22:	edd7 0a00 	vldr	s1, [r7]
 8003a26:	ed92 4a02 	vldr	s8, [r2, #8]
 8003a2a:	edd3 3a02 	vldr	s7, [r3, #8]
 8003a2e:	ed93 2a01 	vldr	s4, [r3, #4]
 8003a32:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003a36:	edd2 2a01 	vldr	s5, [r2, #4]
 8003a3a:	ed57 9a01 	vldr	s19, [r7, #-4]
 8003a3e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8003a42:	ee39 3a81 	vadd.f32	s6, s19, s2
 8003a46:	ee74 8a84 	vadd.f32	s17, s9, s8
 8003a4a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8003a4e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8003a52:	ee7a aae6 	vsub.f32	s21, s21, s13
 8003a56:	ee18 aa90 	vmov	sl, s17
 8003a5a:	f847 a908 	str.w	sl, [r7], #-8
 8003a5e:	edd2 8a01 	vldr	s17, [r2, #4]
 8003a62:	ed93 9a01 	vldr	s18, [r3, #4]
 8003a66:	ee73 8a28 	vadd.f32	s17, s6, s17
 8003a6a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8003a6e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003a72:	ee74 0a63 	vsub.f32	s1, s8, s7
 8003a76:	edc7 8a01 	vstr	s17, [r7, #4]
 8003a7a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8003a7e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8003a82:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8003a86:	ee6a ba28 	vmul.f32	s23, s20, s17
 8003a8a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8003a8e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8003a92:	ee31 9a20 	vadd.f32	s18, s2, s1
 8003a96:	ee79 9a82 	vadd.f32	s19, s19, s4
 8003a9a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8003a9e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8003aa2:	ee69 baa8 	vmul.f32	s23, s19, s17
 8003aa6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8003aaa:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8003aae:	ee69 8a28 	vmul.f32	s17, s18, s17
 8003ab2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8003ab6:	ee1c aa10 	vmov	sl, s24
 8003aba:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8003abe:	f841 ab08 	str.w	sl, [r1], #8
 8003ac2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8003ac6:	ee3b bacb 	vsub.f32	s22, s23, s22
 8003aca:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8003ace:	ee33 3a62 	vsub.f32	s6, s6, s5
 8003ad2:	ed01 aa01 	vstr	s20, [r1, #-4]
 8003ad6:	edc2 8a01 	vstr	s17, [r2, #4]
 8003ada:	ed82 ba02 	vstr	s22, [r2, #8]
 8003ade:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8003ae2:	ee74 3a63 	vsub.f32	s7, s8, s7
 8003ae6:	ee38 8a47 	vsub.f32	s16, s16, s14
 8003aea:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8003aee:	ee30 0a46 	vsub.f32	s0, s0, s12
 8003af2:	ee33 3a42 	vsub.f32	s6, s6, s4
 8003af6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003afa:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003afe:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8003b02:	ee63 8a04 	vmul.f32	s17, s6, s8
 8003b06:	ee28 aa24 	vmul.f32	s20, s16, s9
 8003b0a:	ee60 9a04 	vmul.f32	s19, s0, s8
 8003b0e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8003b12:	ee20 0a24 	vmul.f32	s0, s0, s9
 8003b16:	ee63 3a84 	vmul.f32	s7, s7, s8
 8003b1a:	ee39 4a68 	vsub.f32	s8, s18, s17
 8003b1e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8003b22:	ee14 aa10 	vmov	sl, s8
 8003b26:	ee30 0a48 	vsub.f32	s0, s0, s16
 8003b2a:	ee63 4a24 	vmul.f32	s9, s6, s9
 8003b2e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8003b32:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003b36:	ed04 0a01 	vstr	s0, [r4, #-4]
 8003b3a:	f846 a908 	str.w	sl, [r6], #-8
 8003b3e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003b42:	ee35 7a87 	vadd.f32	s14, s11, s14
 8003b46:	edc6 3a01 	vstr	s7, [r6, #4]
 8003b4a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8003b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b52:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8003b56:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8003b5a:	ee67 5a86 	vmul.f32	s11, s15, s12
 8003b5e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003b62:	ee72 2a62 	vsub.f32	s5, s4, s5
 8003b66:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8003b6a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8003b6e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8003b72:	ee62 0a86 	vmul.f32	s1, s5, s12
 8003b76:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b7e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8003b82:	ee62 2a87 	vmul.f32	s5, s5, s14
 8003b86:	ee21 1a07 	vmul.f32	s2, s2, s14
 8003b8a:	ee15 aa90 	vmov	sl, s11
 8003b8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003b92:	f840 ab08 	str.w	sl, [r0], #8
 8003b96:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8003b9a:	ee76 2a22 	vadd.f32	s5, s12, s5
 8003b9e:	f1b9 0901 	subs.w	r9, r9, #1
 8003ba2:	ed40 7a01 	vstr	s15, [r0, #-4]
 8003ba6:	f105 0508 	add.w	r5, r5, #8
 8003baa:	ed83 1a02 	vstr	s2, [r3, #8]
 8003bae:	edc3 2a01 	vstr	s5, [r3, #4]
 8003bb2:	f108 0808 	add.w	r8, r8, #8
 8003bb6:	f1a2 0208 	sub.w	r2, r2, #8
 8003bba:	f10c 0c10 	add.w	ip, ip, #16
 8003bbe:	f104 0408 	add.w	r4, r4, #8
 8003bc2:	f10e 0e18 	add.w	lr, lr, #24
 8003bc6:	f1a3 0308 	sub.w	r3, r3, #8
 8003bca:	f47f aefc 	bne.w	80039c6 <arm_cfft_radix8by4_f32+0x13e>
 8003bce:	9908      	ldr	r1, [sp, #32]
 8003bd0:	9802      	ldr	r0, [sp, #8]
 8003bd2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8003bd6:	00cb      	lsls	r3, r1, #3
 8003bd8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003bdc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003be0:	9102      	str	r1, [sp, #8]
 8003be2:	9905      	ldr	r1, [sp, #20]
 8003be4:	4419      	add	r1, r3
 8003be6:	9105      	str	r1, [sp, #20]
 8003be8:	9904      	ldr	r1, [sp, #16]
 8003bea:	4419      	add	r1, r3
 8003bec:	9104      	str	r1, [sp, #16]
 8003bee:	9906      	ldr	r1, [sp, #24]
 8003bf0:	449b      	add	fp, r3
 8003bf2:	4419      	add	r1, r3
 8003bf4:	449a      	add	sl, r3
 8003bf6:	9b03      	ldr	r3, [sp, #12]
 8003bf8:	9106      	str	r1, [sp, #24]
 8003bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003bfe:	9303      	str	r3, [sp, #12]
 8003c00:	9a05      	ldr	r2, [sp, #20]
 8003c02:	9806      	ldr	r0, [sp, #24]
 8003c04:	ed92 4a00 	vldr	s8, [r2]
 8003c08:	ed90 7a00 	vldr	s14, [r0]
 8003c0c:	ed9b 3a00 	vldr	s6, [fp]
 8003c10:	edda 3a00 	vldr	s7, [sl]
 8003c14:	edd2 4a01 	vldr	s9, [r2, #4]
 8003c18:	edd0 6a01 	vldr	s13, [r0, #4]
 8003c1c:	ed9a 2a01 	vldr	s4, [sl, #4]
 8003c20:	eddb 7a01 	vldr	s15, [fp, #4]
 8003c24:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8003c28:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003c2a:	ee34 6a07 	vadd.f32	s12, s8, s14
 8003c2e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8003c32:	ee36 5a03 	vadd.f32	s10, s12, s6
 8003c36:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8003c3a:	ee35 5a23 	vadd.f32	s10, s10, s7
 8003c3e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8003c42:	ed82 5a00 	vstr	s10, [r2]
 8003c46:	ed9b 5a01 	vldr	s10, [fp, #4]
 8003c4a:	edda 4a01 	vldr	s9, [sl, #4]
 8003c4e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8003c52:	ee37 4a27 	vadd.f32	s8, s14, s15
 8003c56:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003c5a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8003c5e:	ed82 5a01 	vstr	s10, [r2, #4]
 8003c62:	9a04      	ldr	r2, [sp, #16]
 8003c64:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8003c68:	edd2 1a00 	vldr	s3, [r2]
 8003c6c:	edd2 2a01 	vldr	s5, [r2, #4]
 8003c70:	9a02      	ldr	r2, [sp, #8]
 8003c72:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003c76:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003c7a:	ee64 4a21 	vmul.f32	s9, s8, s3
 8003c7e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003c82:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003c86:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003c8a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003c8e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003c92:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003c96:	edcb 2a00 	vstr	s5, [fp]
 8003c9a:	ed8b 5a01 	vstr	s10, [fp, #4]
 8003c9e:	ed92 4a01 	vldr	s8, [r2, #4]
 8003ca2:	ed92 5a00 	vldr	s10, [r2]
 8003ca6:	9a03      	ldr	r2, [sp, #12]
 8003ca8:	ee36 6a63 	vsub.f32	s12, s12, s7
 8003cac:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003cb0:	ee66 4a05 	vmul.f32	s9, s12, s10
 8003cb4:	ee25 5a85 	vmul.f32	s10, s11, s10
 8003cb8:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003cbc:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003cc0:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003cc4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8003cc8:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003ccc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003cd0:	ed80 6a01 	vstr	s12, [r0, #4]
 8003cd4:	edc0 5a00 	vstr	s11, [r0]
 8003cd8:	edd2 5a01 	vldr	s11, [r2, #4]
 8003cdc:	9807      	ldr	r0, [sp, #28]
 8003cde:	ee77 7a02 	vadd.f32	s15, s14, s4
 8003ce2:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8003ce6:	edd2 6a00 	vldr	s13, [r2]
 8003cea:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8003cee:	ee67 6a26 	vmul.f32	s13, s14, s13
 8003cf2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003cf6:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003cfa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003cfe:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003d02:	edca 7a01 	vstr	s15, [sl, #4]
 8003d06:	ed8a 7a00 	vstr	s14, [sl]
 8003d0a:	6872      	ldr	r2, [r6, #4]
 8003d0c:	4621      	mov	r1, r4
 8003d0e:	2304      	movs	r3, #4
 8003d10:	f000 f97a 	bl	8004008 <arm_radix8_butterfly_f32>
 8003d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003d16:	6872      	ldr	r2, [r6, #4]
 8003d18:	4621      	mov	r1, r4
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	f000 f974 	bl	8004008 <arm_radix8_butterfly_f32>
 8003d20:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003d22:	6872      	ldr	r2, [r6, #4]
 8003d24:	4621      	mov	r1, r4
 8003d26:	2304      	movs	r3, #4
 8003d28:	f000 f96e 	bl	8004008 <arm_radix8_butterfly_f32>
 8003d2c:	6872      	ldr	r2, [r6, #4]
 8003d2e:	9801      	ldr	r0, [sp, #4]
 8003d30:	4621      	mov	r1, r4
 8003d32:	2304      	movs	r3, #4
 8003d34:	b00f      	add	sp, #60	; 0x3c
 8003d36:	ecbd 8b0a 	vpop	{d8-d12}
 8003d3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d3e:	f000 b963 	b.w	8004008 <arm_radix8_butterfly_f32>
 8003d42:	bf00      	nop

08003d44 <arm_cfft_f32>:
 8003d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d48:	2a01      	cmp	r2, #1
 8003d4a:	4606      	mov	r6, r0
 8003d4c:	4617      	mov	r7, r2
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4698      	mov	r8, r3
 8003d52:	8805      	ldrh	r5, [r0, #0]
 8003d54:	d054      	beq.n	8003e00 <arm_cfft_f32+0xbc>
 8003d56:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003d5a:	d04c      	beq.n	8003df6 <arm_cfft_f32+0xb2>
 8003d5c:	d916      	bls.n	8003d8c <arm_cfft_f32+0x48>
 8003d5e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003d62:	d01a      	beq.n	8003d9a <arm_cfft_f32+0x56>
 8003d64:	d95c      	bls.n	8003e20 <arm_cfft_f32+0xdc>
 8003d66:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8003d6a:	d044      	beq.n	8003df6 <arm_cfft_f32+0xb2>
 8003d6c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8003d70:	d105      	bne.n	8003d7e <arm_cfft_f32+0x3a>
 8003d72:	2301      	movs	r3, #1
 8003d74:	6872      	ldr	r2, [r6, #4]
 8003d76:	4629      	mov	r1, r5
 8003d78:	4620      	mov	r0, r4
 8003d7a:	f000 f945 	bl	8004008 <arm_radix8_butterfly_f32>
 8003d7e:	f1b8 0f00 	cmp.w	r8, #0
 8003d82:	d111      	bne.n	8003da8 <arm_cfft_f32+0x64>
 8003d84:	2f01      	cmp	r7, #1
 8003d86:	d016      	beq.n	8003db6 <arm_cfft_f32+0x72>
 8003d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d8c:	2d20      	cmp	r5, #32
 8003d8e:	d032      	beq.n	8003df6 <arm_cfft_f32+0xb2>
 8003d90:	d94a      	bls.n	8003e28 <arm_cfft_f32+0xe4>
 8003d92:	2d40      	cmp	r5, #64	; 0x40
 8003d94:	d0ed      	beq.n	8003d72 <arm_cfft_f32+0x2e>
 8003d96:	2d80      	cmp	r5, #128	; 0x80
 8003d98:	d1f1      	bne.n	8003d7e <arm_cfft_f32+0x3a>
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	4630      	mov	r0, r6
 8003d9e:	f7ff fca3 	bl	80036e8 <arm_cfft_radix8by2_f32>
 8003da2:	f1b8 0f00 	cmp.w	r8, #0
 8003da6:	d0ed      	beq.n	8003d84 <arm_cfft_f32+0x40>
 8003da8:	68b2      	ldr	r2, [r6, #8]
 8003daa:	89b1      	ldrh	r1, [r6, #12]
 8003dac:	4620      	mov	r0, r4
 8003dae:	f7fc fa2f 	bl	8000210 <arm_bitreversal_32>
 8003db2:	2f01      	cmp	r7, #1
 8003db4:	d1e8      	bne.n	8003d88 <arm_cfft_f32+0x44>
 8003db6:	ee07 5a90 	vmov	s15, r5
 8003dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dc2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dc6:	2d00      	cmp	r5, #0
 8003dc8:	d0de      	beq.n	8003d88 <arm_cfft_f32+0x44>
 8003dca:	f104 0108 	add.w	r1, r4, #8
 8003dce:	2300      	movs	r3, #0
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	429d      	cmp	r5, r3
 8003dd4:	f101 0108 	add.w	r1, r1, #8
 8003dd8:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003ddc:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003de0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003de4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003de8:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003dec:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003df0:	d1ee      	bne.n	8003dd0 <arm_cfft_f32+0x8c>
 8003df2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df6:	4621      	mov	r1, r4
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f7ff fd45 	bl	8003888 <arm_cfft_radix8by4_f32>
 8003dfe:	e7be      	b.n	8003d7e <arm_cfft_f32+0x3a>
 8003e00:	b1ad      	cbz	r5, 8003e2e <arm_cfft_f32+0xea>
 8003e02:	f101 030c 	add.w	r3, r1, #12
 8003e06:	2200      	movs	r2, #0
 8003e08:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003e0c:	3201      	adds	r2, #1
 8003e0e:	eef1 7a67 	vneg.f32	s15, s15
 8003e12:	4295      	cmp	r5, r2
 8003e14:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003e18:	f103 0308 	add.w	r3, r3, #8
 8003e1c:	d1f4      	bne.n	8003e08 <arm_cfft_f32+0xc4>
 8003e1e:	e79a      	b.n	8003d56 <arm_cfft_f32+0x12>
 8003e20:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003e24:	d0a5      	beq.n	8003d72 <arm_cfft_f32+0x2e>
 8003e26:	e7aa      	b.n	8003d7e <arm_cfft_f32+0x3a>
 8003e28:	2d10      	cmp	r5, #16
 8003e2a:	d0b6      	beq.n	8003d9a <arm_cfft_f32+0x56>
 8003e2c:	e7a7      	b.n	8003d7e <arm_cfft_f32+0x3a>
 8003e2e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003e32:	d894      	bhi.n	8003d5e <arm_cfft_f32+0x1a>
 8003e34:	e7aa      	b.n	8003d8c <arm_cfft_f32+0x48>
 8003e36:	bf00      	nop

08003e38 <arm_cmplx_mag_f32>:
 8003e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e3c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003e40:	b084      	sub	sp, #16
 8003e42:	d07f      	beq.n	8003f44 <arm_cmplx_mag_f32+0x10c>
 8003e44:	2700      	movs	r7, #0
 8003e46:	f100 0420 	add.w	r4, r0, #32
 8003e4a:	f101 0510 	add.w	r5, r1, #16
 8003e4e:	4646      	mov	r6, r8
 8003e50:	e05a      	b.n	8003f08 <arm_cmplx_mag_f32+0xd0>
 8003e52:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003e56:	eeb4 0a40 	vcmp.f32	s0, s0
 8003e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5e:	f040 80a4 	bne.w	8003faa <arm_cmplx_mag_f32+0x172>
 8003e62:	ed05 0a04 	vstr	s0, [r5, #-16]
 8003e66:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8003e6a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8003e6e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003e72:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003e76:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e82:	f2c0 808f 	blt.w	8003fa4 <arm_cmplx_mag_f32+0x16c>
 8003e86:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003e8a:	eeb4 0a40 	vcmp.f32	s0, s0
 8003e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e92:	f040 80af 	bne.w	8003ff4 <arm_cmplx_mag_f32+0x1bc>
 8003e96:	ed05 0a03 	vstr	s0, [r5, #-12]
 8003e9a:	ed54 7a04 	vldr	s15, [r4, #-16]
 8003e9e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8003ea2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ea6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003eaa:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb6:	db72      	blt.n	8003f9e <arm_cmplx_mag_f32+0x166>
 8003eb8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003ebc:	eeb4 0a40 	vcmp.f32	s0, s0
 8003ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec4:	f040 808c 	bne.w	8003fe0 <arm_cmplx_mag_f32+0x1a8>
 8003ec8:	ed05 0a02 	vstr	s0, [r5, #-8]
 8003ecc:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003ed0:	ed14 0a01 	vldr	s0, [r4, #-4]
 8003ed4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003ed8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003edc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003ee0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee8:	db20      	blt.n	8003f2c <arm_cmplx_mag_f32+0xf4>
 8003eea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003eee:	eeb4 0a40 	vcmp.f32	s0, s0
 8003ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef6:	d169      	bne.n	8003fcc <arm_cmplx_mag_f32+0x194>
 8003ef8:	3e01      	subs	r6, #1
 8003efa:	ed05 0a01 	vstr	s0, [r5, #-4]
 8003efe:	f104 0420 	add.w	r4, r4, #32
 8003f02:	f105 0510 	add.w	r5, r5, #16
 8003f06:	d019      	beq.n	8003f3c <arm_cmplx_mag_f32+0x104>
 8003f08:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8003f0c:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8003f10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003f18:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f24:	da95      	bge.n	8003e52 <arm_cmplx_mag_f32+0x1a>
 8003f26:	f845 7c10 	str.w	r7, [r5, #-16]
 8003f2a:	e79c      	b.n	8003e66 <arm_cmplx_mag_f32+0x2e>
 8003f2c:	3e01      	subs	r6, #1
 8003f2e:	f845 7c04 	str.w	r7, [r5, #-4]
 8003f32:	f104 0420 	add.w	r4, r4, #32
 8003f36:	f105 0510 	add.w	r5, r5, #16
 8003f3a:	d1e5      	bne.n	8003f08 <arm_cmplx_mag_f32+0xd0>
 8003f3c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8003f40:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8003f44:	f012 0503 	ands.w	r5, r2, #3
 8003f48:	d026      	beq.n	8003f98 <arm_cmplx_mag_f32+0x160>
 8003f4a:	2600      	movs	r6, #0
 8003f4c:	f100 0408 	add.w	r4, r0, #8
 8003f50:	e00c      	b.n	8003f6c <arm_cmplx_mag_f32+0x134>
 8003f52:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003f56:	eeb4 0a40 	vcmp.f32	s0, s0
 8003f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5e:	d12e      	bne.n	8003fbe <arm_cmplx_mag_f32+0x186>
 8003f60:	3d01      	subs	r5, #1
 8003f62:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003f66:	f104 0408 	add.w	r4, r4, #8
 8003f6a:	d015      	beq.n	8003f98 <arm_cmplx_mag_f32+0x160>
 8003f6c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003f70:	ed14 0a01 	vldr	s0, [r4, #-4]
 8003f74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003f78:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003f7c:	3104      	adds	r1, #4
 8003f7e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003f82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8a:	dae2      	bge.n	8003f52 <arm_cmplx_mag_f32+0x11a>
 8003f8c:	3d01      	subs	r5, #1
 8003f8e:	f841 6c04 	str.w	r6, [r1, #-4]
 8003f92:	f104 0408 	add.w	r4, r4, #8
 8003f96:	d1e9      	bne.n	8003f6c <arm_cmplx_mag_f32+0x134>
 8003f98:	b004      	add	sp, #16
 8003f9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f9e:	f845 7c08 	str.w	r7, [r5, #-8]
 8003fa2:	e793      	b.n	8003ecc <arm_cmplx_mag_f32+0x94>
 8003fa4:	f845 7c0c 	str.w	r7, [r5, #-12]
 8003fa8:	e777      	b.n	8003e9a <arm_cmplx_mag_f32+0x62>
 8003faa:	eeb0 0a67 	vmov.f32	s0, s15
 8003fae:	9203      	str	r2, [sp, #12]
 8003fb0:	9102      	str	r1, [sp, #8]
 8003fb2:	9001      	str	r0, [sp, #4]
 8003fb4:	f003 f8ee 	bl	8007194 <sqrtf>
 8003fb8:	a801      	add	r0, sp, #4
 8003fba:	c807      	ldmia	r0, {r0, r1, r2}
 8003fbc:	e751      	b.n	8003e62 <arm_cmplx_mag_f32+0x2a>
 8003fbe:	eeb0 0a67 	vmov.f32	s0, s15
 8003fc2:	9101      	str	r1, [sp, #4]
 8003fc4:	f003 f8e6 	bl	8007194 <sqrtf>
 8003fc8:	9901      	ldr	r1, [sp, #4]
 8003fca:	e7c9      	b.n	8003f60 <arm_cmplx_mag_f32+0x128>
 8003fcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003fd0:	9203      	str	r2, [sp, #12]
 8003fd2:	9102      	str	r1, [sp, #8]
 8003fd4:	9001      	str	r0, [sp, #4]
 8003fd6:	f003 f8dd 	bl	8007194 <sqrtf>
 8003fda:	a801      	add	r0, sp, #4
 8003fdc:	c807      	ldmia	r0, {r0, r1, r2}
 8003fde:	e78b      	b.n	8003ef8 <arm_cmplx_mag_f32+0xc0>
 8003fe0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fe4:	9203      	str	r2, [sp, #12]
 8003fe6:	9102      	str	r1, [sp, #8]
 8003fe8:	9001      	str	r0, [sp, #4]
 8003fea:	f003 f8d3 	bl	8007194 <sqrtf>
 8003fee:	a801      	add	r0, sp, #4
 8003ff0:	c807      	ldmia	r0, {r0, r1, r2}
 8003ff2:	e769      	b.n	8003ec8 <arm_cmplx_mag_f32+0x90>
 8003ff4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ff8:	9203      	str	r2, [sp, #12]
 8003ffa:	9102      	str	r1, [sp, #8]
 8003ffc:	9001      	str	r0, [sp, #4]
 8003ffe:	f003 f8c9 	bl	8007194 <sqrtf>
 8004002:	a801      	add	r0, sp, #4
 8004004:	c807      	ldmia	r0, {r0, r1, r2}
 8004006:	e746      	b.n	8003e96 <arm_cmplx_mag_f32+0x5e>

08004008 <arm_radix8_butterfly_f32>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	ed2d 8b10 	vpush	{d8-d15}
 8004010:	461c      	mov	r4, r3
 8004012:	b09d      	sub	sp, #116	; 0x74
 8004014:	4603      	mov	r3, r0
 8004016:	3304      	adds	r3, #4
 8004018:	ed9f bac4 	vldr	s22, [pc, #784]	; 800432c <arm_radix8_butterfly_f32+0x324>
 800401c:	9019      	str	r0, [sp, #100]	; 0x64
 800401e:	921a      	str	r2, [sp, #104]	; 0x68
 8004020:	468b      	mov	fp, r1
 8004022:	931b      	str	r3, [sp, #108]	; 0x6c
 8004024:	468a      	mov	sl, r1
 8004026:	46a1      	mov	r9, r4
 8004028:	4607      	mov	r7, r0
 800402a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 800402e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8004032:	eb03 0508 	add.w	r5, r3, r8
 8004036:	195c      	adds	r4, r3, r5
 8004038:	00de      	lsls	r6, r3, #3
 800403a:	191a      	adds	r2, r3, r4
 800403c:	9600      	str	r6, [sp, #0]
 800403e:	1898      	adds	r0, r3, r2
 8004040:	4619      	mov	r1, r3
 8004042:	9e00      	ldr	r6, [sp, #0]
 8004044:	9311      	str	r3, [sp, #68]	; 0x44
 8004046:	4401      	add	r1, r0
 8004048:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800404c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8004050:	19be      	adds	r6, r7, r6
 8004052:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8004056:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800405a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800405e:	9f00      	ldr	r7, [sp, #0]
 8004060:	011b      	lsls	r3, r3, #4
 8004062:	eb06 0e07 	add.w	lr, r6, r7
 8004066:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8004068:	9302      	str	r3, [sp, #8]
 800406a:	3204      	adds	r2, #4
 800406c:	3104      	adds	r1, #4
 800406e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004072:	f04f 0c00 	mov.w	ip, #0
 8004076:	edde 7a00 	vldr	s15, [lr]
 800407a:	edd6 6a00 	vldr	s13, [r6]
 800407e:	ed95 2a00 	vldr	s4, [r5]
 8004082:	ed17 aa01 	vldr	s20, [r7, #-4]
 8004086:	edd4 4a00 	vldr	s9, [r4]
 800408a:	ed90 5a00 	vldr	s10, [r0]
 800408e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004092:	ed51 0a01 	vldr	s1, [r1, #-4]
 8004096:	ee77 8a85 	vadd.f32	s17, s15, s10
 800409a:	ee76 3a87 	vadd.f32	s7, s13, s14
 800409e:	ee32 4a20 	vadd.f32	s8, s4, s1
 80040a2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 80040a6:	ee33 6a84 	vadd.f32	s12, s7, s8
 80040aa:	ee73 5a28 	vadd.f32	s11, s6, s17
 80040ae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80040b2:	ee75 6a86 	vadd.f32	s13, s11, s12
 80040b6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 80040ba:	ed47 6a01 	vstr	s13, [r7, #-4]
 80040be:	edc4 5a00 	vstr	s11, [r4]
 80040c2:	ed92 9a00 	vldr	s18, [r2]
 80040c6:	ed95 1a01 	vldr	s2, [r5, #4]
 80040ca:	edd6 5a01 	vldr	s11, [r6, #4]
 80040ce:	ed91 6a00 	vldr	s12, [r1]
 80040d2:	edd7 2a00 	vldr	s5, [r7]
 80040d6:	edd4 1a01 	vldr	s3, [r4, #4]
 80040da:	edde 6a01 	vldr	s13, [lr, #4]
 80040de:	edd0 9a01 	vldr	s19, [r0, #4]
 80040e2:	ee72 0a60 	vsub.f32	s1, s4, s1
 80040e6:	ee71 aa46 	vsub.f32	s21, s2, s12
 80040ea:	ee35 2ac9 	vsub.f32	s4, s11, s18
 80040ee:	ee37 0a60 	vsub.f32	s0, s14, s1
 80040f2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 80040f6:	ee37 7a20 	vadd.f32	s14, s14, s1
 80040fa:	ee32 2a6a 	vsub.f32	s4, s4, s21
 80040fe:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8004102:	ee75 5a89 	vadd.f32	s11, s11, s18
 8004106:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800410a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 800410e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8004112:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8004116:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800411a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 800411e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8004122:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8004126:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800412a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 800412e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8004132:	ee36 0a88 	vadd.f32	s0, s13, s16
 8004136:	ee75 8a86 	vadd.f32	s17, s11, s12
 800413a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 800413e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8004142:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8004146:	ee74 3aa0 	vadd.f32	s7, s9, s1
 800414a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800414e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8004152:	ee71 5a49 	vsub.f32	s11, s2, s18
 8004156:	ee31 2a09 	vadd.f32	s4, s2, s18
 800415a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800415e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8004162:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8004166:	ee73 0a06 	vadd.f32	s1, s6, s12
 800416a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800416e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8004172:	ee32 8a28 	vadd.f32	s16, s4, s17
 8004176:	ee33 6a46 	vsub.f32	s12, s6, s12
 800417a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800417e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8004182:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004186:	ee71 5a64 	vsub.f32	s11, s2, s9
 800418a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800418e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8004192:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004196:	ee74 4a81 	vadd.f32	s9, s9, s2
 800419a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800419e:	44dc      	add	ip, fp
 80041a0:	45e2      	cmp	sl, ip
 80041a2:	ed87 8a00 	vstr	s16, [r7]
 80041a6:	ed84 2a01 	vstr	s4, [r4, #4]
 80041aa:	441f      	add	r7, r3
 80041ac:	edce 0a00 	vstr	s1, [lr]
 80041b0:	441c      	add	r4, r3
 80041b2:	ed80 6a00 	vstr	s12, [r0]
 80041b6:	edce 1a01 	vstr	s3, [lr, #4]
 80041ba:	ed80 4a01 	vstr	s8, [r0, #4]
 80041be:	449e      	add	lr, r3
 80041c0:	ed86 3a00 	vstr	s6, [r6]
 80041c4:	4418      	add	r0, r3
 80041c6:	ed41 3a01 	vstr	s7, [r1, #-4]
 80041ca:	ed02 5a01 	vstr	s10, [r2, #-4]
 80041ce:	ed85 7a00 	vstr	s14, [r5]
 80041d2:	edc6 5a01 	vstr	s11, [r6, #4]
 80041d6:	edc1 4a00 	vstr	s9, [r1]
 80041da:	441e      	add	r6, r3
 80041dc:	edc2 6a00 	vstr	s13, [r2]
 80041e0:	4419      	add	r1, r3
 80041e2:	edc5 7a01 	vstr	s15, [r5, #4]
 80041e6:	441a      	add	r2, r3
 80041e8:	441d      	add	r5, r3
 80041ea:	f63f af44 	bhi.w	8004076 <arm_radix8_butterfly_f32+0x6e>
 80041ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80041f0:	2a07      	cmp	r2, #7
 80041f2:	f240 81f5 	bls.w	80045e0 <arm_radix8_butterfly_f32+0x5d8>
 80041f6:	f108 0101 	add.w	r1, r8, #1
 80041fa:	188f      	adds	r7, r1, r2
 80041fc:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8004200:	19d6      	adds	r6, r2, r7
 8004202:	eb08 0c09 	add.w	ip, r8, r9
 8004206:	1994      	adds	r4, r2, r6
 8004208:	eb0c 0e09 	add.w	lr, ip, r9
 800420c:	4610      	mov	r0, r2
 800420e:	9701      	str	r7, [sp, #4]
 8004210:	4420      	add	r0, r4
 8004212:	eb0e 0709 	add.w	r7, lr, r9
 8004216:	1815      	adds	r5, r2, r0
 8004218:	eb07 0209 	add.w	r2, r7, r9
 800421c:	9203      	str	r2, [sp, #12]
 800421e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004220:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004224:	9117      	str	r1, [sp, #92]	; 0x5c
 8004226:	440a      	add	r2, r1
 8004228:	9900      	ldr	r1, [sp, #0]
 800422a:	3108      	adds	r1, #8
 800422c:	9100      	str	r1, [sp, #0]
 800422e:	9902      	ldr	r1, [sp, #8]
 8004230:	3108      	adds	r1, #8
 8004232:	9102      	str	r1, [sp, #8]
 8004234:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004236:	00ff      	lsls	r7, r7, #3
 8004238:	9715      	str	r7, [sp, #84]	; 0x54
 800423a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800423e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8004242:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8004246:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8004248:	9903      	ldr	r1, [sp, #12]
 800424a:	19d7      	adds	r7, r2, r7
 800424c:	00c9      	lsls	r1, r1, #3
 800424e:	9114      	str	r1, [sp, #80]	; 0x50
 8004250:	9710      	str	r7, [sp, #64]	; 0x40
 8004252:	9919      	ldr	r1, [sp, #100]	; 0x64
 8004254:	9f00      	ldr	r7, [sp, #0]
 8004256:	19cf      	adds	r7, r1, r7
 8004258:	970d      	str	r7, [sp, #52]	; 0x34
 800425a:	9f02      	ldr	r7, [sp, #8]
 800425c:	19cf      	adds	r7, r1, r7
 800425e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8004262:	970c      	str	r7, [sp, #48]	; 0x30
 8004264:	9f01      	ldr	r7, [sp, #4]
 8004266:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800426a:	3504      	adds	r5, #4
 800426c:	3004      	adds	r0, #4
 800426e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8004272:	9508      	str	r5, [sp, #32]
 8004274:	9009      	str	r0, [sp, #36]	; 0x24
 8004276:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8004278:	981a      	ldr	r0, [sp, #104]	; 0x68
 800427a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800427e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8004282:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8004286:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004288:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800428c:	1945      	adds	r5, r0, r5
 800428e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004292:	460f      	mov	r7, r1
 8004294:	3404      	adds	r4, #4
 8004296:	4641      	mov	r1, r8
 8004298:	1841      	adds	r1, r0, r1
 800429a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800429e:	940a      	str	r4, [sp, #40]	; 0x28
 80042a0:	eb00 0c06 	add.w	ip, r0, r6
 80042a4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80042a8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80042aa:	9506      	str	r5, [sp, #24]
 80042ac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80042ae:	9105      	str	r1, [sp, #20]
 80042b0:	4639      	mov	r1, r7
 80042b2:	1905      	adds	r5, r0, r4
 80042b4:	3108      	adds	r1, #8
 80042b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80042b8:	9507      	str	r5, [sp, #28]
 80042ba:	910f      	str	r1, [sp, #60]	; 0x3c
 80042bc:	ea4f 1509 	mov.w	r5, r9, lsl #4
 80042c0:	2101      	movs	r1, #1
 80042c2:	eb00 0e06 	add.w	lr, r0, r6
 80042c6:	9518      	str	r5, [sp, #96]	; 0x60
 80042c8:	9404      	str	r4, [sp, #16]
 80042ca:	9103      	str	r1, [sp, #12]
 80042cc:	4620      	mov	r0, r4
 80042ce:	4689      	mov	r9, r1
 80042d0:	9e06      	ldr	r6, [sp, #24]
 80042d2:	ed90 fa00 	vldr	s30, [r0]
 80042d6:	edd6 7a01 	vldr	s15, [r6, #4]
 80042da:	edd0 ba01 	vldr	s23, [r0, #4]
 80042de:	edcd 7a00 	vstr	s15, [sp]
 80042e2:	a80d      	add	r0, sp, #52	; 0x34
 80042e4:	edde 7a01 	vldr	s15, [lr, #4]
 80042e8:	9c05      	ldr	r4, [sp, #20]
 80042ea:	9d07      	ldr	r5, [sp, #28]
 80042ec:	edd2 fa00 	vldr	s31, [r2]
 80042f0:	ed92 ca01 	vldr	s24, [r2, #4]
 80042f4:	edcd 7a01 	vstr	s15, [sp, #4]
 80042f8:	c807      	ldmia	r0, {r0, r1, r2}
 80042fa:	eddc 7a01 	vldr	s15, [ip, #4]
 80042fe:	edd4 ea00 	vldr	s29, [r4]
 8004302:	ed95 ea00 	vldr	s28, [r5]
 8004306:	edd6 da00 	vldr	s27, [r6]
 800430a:	edd4 aa01 	vldr	s21, [r4, #4]
 800430e:	ed95 aa01 	vldr	s20, [r5, #4]
 8004312:	ed9e da00 	vldr	s26, [lr]
 8004316:	eddc ca00 	vldr	s25, [ip]
 800431a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800431e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004320:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004322:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004324:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004326:	edcd 7a02 	vstr	s15, [sp, #8]
 800432a:	e001      	b.n	8004330 <arm_radix8_butterfly_f32+0x328>
 800432c:	3f3504f3 	.word	0x3f3504f3
 8004330:	ed16 6a01 	vldr	s12, [r6, #-4]
 8004334:	ed91 5a00 	vldr	s10, [r1]
 8004338:	ed57 9a01 	vldr	s19, [r7, #-4]
 800433c:	edd5 7a00 	vldr	s15, [r5]
 8004340:	ed18 7a01 	vldr	s14, [r8, #-4]
 8004344:	edd2 3a00 	vldr	s7, [r2]
 8004348:	ed94 3a00 	vldr	s6, [r4]
 800434c:	ed90 2a00 	vldr	s4, [r0]
 8004350:	ed92 0a01 	vldr	s0, [r2, #4]
 8004354:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004358:	ee32 1a06 	vadd.f32	s2, s4, s12
 800435c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8004360:	ee77 4a87 	vadd.f32	s9, s15, s14
 8004364:	ee78 1a04 	vadd.f32	s3, s16, s8
 8004368:	ee71 6a24 	vadd.f32	s13, s2, s9
 800436c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8004370:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8004374:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004378:	ed82 6a00 	vstr	s12, [r2]
 800437c:	edd5 8a01 	vldr	s17, [r5, #4]
 8004380:	ed90 9a01 	vldr	s18, [r0, #4]
 8004384:	edd6 2a00 	vldr	s5, [r6]
 8004388:	ed98 7a00 	vldr	s14, [r8]
 800438c:	edd4 0a01 	vldr	s1, [r4, #4]
 8004390:	ed91 6a01 	vldr	s12, [r1, #4]
 8004394:	edd7 5a00 	vldr	s11, [r7]
 8004398:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800439c:	ee33 3a69 	vsub.f32	s6, s6, s19
 80043a0:	ee39 5a62 	vsub.f32	s10, s18, s5
 80043a4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 80043a8:	ee38 4a44 	vsub.f32	s8, s16, s8
 80043ac:	ee38 7a87 	vadd.f32	s14, s17, s14
 80043b0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 80043b4:	ee79 2a22 	vadd.f32	s5, s18, s5
 80043b8:	ee75 8a69 	vsub.f32	s17, s10, s19
 80043bc:	ee32 9a27 	vadd.f32	s18, s4, s15
 80043c0:	ee35 5a29 	vadd.f32	s10, s10, s19
 80043c4:	ee72 7a67 	vsub.f32	s15, s4, s15
 80043c8:	ee30 2a06 	vadd.f32	s4, s0, s12
 80043cc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80043d0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80043d4:	ee32 9a08 	vadd.f32	s18, s4, s16
 80043d8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80043dc:	ee32 2a48 	vsub.f32	s4, s4, s16
 80043e0:	ee71 4a64 	vsub.f32	s9, s2, s9
 80043e4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80043e8:	ee32 1a87 	vadd.f32	s2, s5, s14
 80043ec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80043f0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80043f4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80043f8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80043fc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8004400:	ee33 3a69 	vsub.f32	s6, s6, s19
 8004404:	ee32 7a64 	vsub.f32	s14, s4, s9
 8004408:	ee73 9aa7 	vadd.f32	s19, s7, s15
 800440c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8004410:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8004414:	ee75 8a85 	vadd.f32	s17, s11, s10
 8004418:	ee74 3a22 	vadd.f32	s7, s8, s5
 800441c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8004420:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8004424:	ee79 1a41 	vsub.f32	s3, s18, s2
 8004428:	ee39 8aa8 	vadd.f32	s16, s19, s17
 800442c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8004430:	ee74 2a62 	vsub.f32	s5, s8, s5
 8004434:	ee74 4a82 	vadd.f32	s9, s9, s4
 8004438:	ee30 4a60 	vsub.f32	s8, s0, s1
 800443c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8004440:	ee30 0a80 	vadd.f32	s0, s1, s0
 8004444:	ee77 9a85 	vadd.f32	s19, s15, s10
 8004448:	ee33 6a06 	vadd.f32	s12, s6, s12
 800444c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8004450:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8004454:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8004458:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800445c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8004460:	ee39 1a01 	vadd.f32	s2, s18, s2
 8004464:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8004468:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800446c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8004470:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8004474:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8004478:	ee35 3a03 	vadd.f32	s6, s10, s6
 800447c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8004480:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8004484:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8004488:	ed9d 4a02 	vldr	s8, [sp, #8]
 800448c:	ed82 1a01 	vstr	s2, [r2, #4]
 8004490:	ee77 3a63 	vsub.f32	s7, s14, s7
 8004494:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8004498:	ed9d 7a01 	vldr	s14, [sp, #4]
 800449c:	ed81 3a00 	vstr	s6, [r1]
 80044a0:	ee30 9a89 	vadd.f32	s18, s1, s18
 80044a4:	ee32 2a05 	vadd.f32	s4, s4, s10
 80044a8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 80044ac:	ee31 8ac8 	vsub.f32	s16, s3, s16
 80044b0:	ee67 2a22 	vmul.f32	s5, s14, s5
 80044b4:	ee64 1a00 	vmul.f32	s3, s8, s0
 80044b8:	ee27 7a24 	vmul.f32	s14, s14, s9
 80044bc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 80044c0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 80044c4:	ee64 8a28 	vmul.f32	s17, s8, s17
 80044c8:	ed9d 4a00 	vldr	s8, [sp]
 80044cc:	edc1 6a01 	vstr	s13, [r1, #4]
 80044d0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80044d4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80044d8:	ee64 9a29 	vmul.f32	s19, s8, s19
 80044dc:	ee24 4a25 	vmul.f32	s8, s8, s11
 80044e0:	ee30 7a87 	vadd.f32	s14, s1, s14
 80044e4:	ee74 4a84 	vadd.f32	s9, s9, s8
 80044e8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80044ec:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80044f0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80044f4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80044f8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80044fc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004500:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004504:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004508:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800450c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004510:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004514:	44d9      	add	r9, fp
 8004516:	45ca      	cmp	sl, r9
 8004518:	ed84 9a00 	vstr	s18, [r4]
 800451c:	edc4 3a01 	vstr	s7, [r4, #4]
 8004520:	441a      	add	r2, r3
 8004522:	ed07 7a01 	vstr	s14, [r7, #-4]
 8004526:	edc7 2a00 	vstr	s5, [r7]
 800452a:	4419      	add	r1, r3
 800452c:	ed80 2a00 	vstr	s4, [r0]
 8004530:	ed80 8a01 	vstr	s16, [r0, #4]
 8004534:	441c      	add	r4, r3
 8004536:	ed48 1a01 	vstr	s3, [r8, #-4]
 800453a:	ed88 0a00 	vstr	s0, [r8]
 800453e:	441f      	add	r7, r3
 8004540:	ed46 4a01 	vstr	s9, [r6, #-4]
 8004544:	4418      	add	r0, r3
 8004546:	edc6 9a00 	vstr	s19, [r6]
 800454a:	4498      	add	r8, r3
 800454c:	edc5 0a00 	vstr	s1, [r5]
 8004550:	ed85 6a01 	vstr	s12, [r5, #4]
 8004554:	441e      	add	r6, r3
 8004556:	441d      	add	r5, r3
 8004558:	f63f aeea 	bhi.w	8004330 <arm_radix8_butterfly_f32+0x328>
 800455c:	9a03      	ldr	r2, [sp, #12]
 800455e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004560:	3201      	adds	r2, #1
 8004562:	4611      	mov	r1, r2
 8004564:	9203      	str	r2, [sp, #12]
 8004566:	9a04      	ldr	r2, [sp, #16]
 8004568:	4402      	add	r2, r0
 800456a:	9204      	str	r2, [sp, #16]
 800456c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800456e:	9a05      	ldr	r2, [sp, #20]
 8004570:	4402      	add	r2, r0
 8004572:	9205      	str	r2, [sp, #20]
 8004574:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004576:	9a07      	ldr	r2, [sp, #28]
 8004578:	4402      	add	r2, r0
 800457a:	9207      	str	r2, [sp, #28]
 800457c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800457e:	9a06      	ldr	r2, [sp, #24]
 8004580:	4402      	add	r2, r0
 8004582:	9206      	str	r2, [sp, #24]
 8004584:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004586:	4496      	add	lr, r2
 8004588:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800458a:	4494      	add	ip, r2
 800458c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800458e:	3208      	adds	r2, #8
 8004590:	920f      	str	r2, [sp, #60]	; 0x3c
 8004592:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004594:	3208      	adds	r2, #8
 8004596:	920e      	str	r2, [sp, #56]	; 0x38
 8004598:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800459a:	3208      	adds	r2, #8
 800459c:	920d      	str	r2, [sp, #52]	; 0x34
 800459e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045a0:	3208      	adds	r2, #8
 80045a2:	920c      	str	r2, [sp, #48]	; 0x30
 80045a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045a6:	3208      	adds	r2, #8
 80045a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80045aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045ac:	3208      	adds	r2, #8
 80045ae:	920a      	str	r2, [sp, #40]	; 0x28
 80045b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045b2:	3208      	adds	r2, #8
 80045b4:	9209      	str	r2, [sp, #36]	; 0x24
 80045b6:	9a08      	ldr	r2, [sp, #32]
 80045b8:	3208      	adds	r2, #8
 80045ba:	9208      	str	r2, [sp, #32]
 80045bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80045be:	9811      	ldr	r0, [sp, #68]	; 0x44
 80045c0:	4288      	cmp	r0, r1
 80045c2:	4622      	mov	r2, r4
 80045c4:	d007      	beq.n	80045d6 <arm_radix8_butterfly_f32+0x5ce>
 80045c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80045c8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80045cc:	4621      	mov	r1, r4
 80045ce:	4401      	add	r1, r0
 80045d0:	9110      	str	r1, [sp, #64]	; 0x40
 80045d2:	9804      	ldr	r0, [sp, #16]
 80045d4:	e67c      	b.n	80042d0 <arm_radix8_butterfly_f32+0x2c8>
 80045d6:	4683      	mov	fp, r0
 80045d8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80045dc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80045de:	e524      	b.n	800402a <arm_radix8_butterfly_f32+0x22>
 80045e0:	b01d      	add	sp, #116	; 0x74
 80045e2:	ecbd 8b10 	vpop	{d8-d15}
 80045e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ea:	bf00      	nop

080045ec <__errno>:
 80045ec:	4b01      	ldr	r3, [pc, #4]	; (80045f4 <__errno+0x8>)
 80045ee:	6818      	ldr	r0, [r3, #0]
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20000010 	.word	0x20000010

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4d0d      	ldr	r5, [pc, #52]	; (8004630 <__libc_init_array+0x38>)
 80045fc:	4c0d      	ldr	r4, [pc, #52]	; (8004634 <__libc_init_array+0x3c>)
 80045fe:	1b64      	subs	r4, r4, r5
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	2600      	movs	r6, #0
 8004604:	42a6      	cmp	r6, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	4d0b      	ldr	r5, [pc, #44]	; (8004638 <__libc_init_array+0x40>)
 800460a:	4c0c      	ldr	r4, [pc, #48]	; (800463c <__libc_init_array+0x44>)
 800460c:	f002 fde4 	bl	80071d8 <_init>
 8004610:	1b64      	subs	r4, r4, r5
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	2600      	movs	r6, #0
 8004616:	42a6      	cmp	r6, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004620:	4798      	blx	r3
 8004622:	3601      	adds	r6, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f855 3b04 	ldr.w	r3, [r5], #4
 800462a:	4798      	blx	r3
 800462c:	3601      	adds	r6, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	0800bd74 	.word	0x0800bd74
 8004634:	0800bd74 	.word	0x0800bd74
 8004638:	0800bd74 	.word	0x0800bd74
 800463c:	0800bd78 	.word	0x0800bd78

08004640 <memset>:
 8004640:	4402      	add	r2, r0
 8004642:	4603      	mov	r3, r0
 8004644:	4293      	cmp	r3, r2
 8004646:	d100      	bne.n	800464a <memset+0xa>
 8004648:	4770      	bx	lr
 800464a:	f803 1b01 	strb.w	r1, [r3], #1
 800464e:	e7f9      	b.n	8004644 <memset+0x4>

08004650 <__cvt>:
 8004650:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004654:	ec55 4b10 	vmov	r4, r5, d0
 8004658:	2d00      	cmp	r5, #0
 800465a:	460e      	mov	r6, r1
 800465c:	4619      	mov	r1, r3
 800465e:	462b      	mov	r3, r5
 8004660:	bfbb      	ittet	lt
 8004662:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004666:	461d      	movlt	r5, r3
 8004668:	2300      	movge	r3, #0
 800466a:	232d      	movlt	r3, #45	; 0x2d
 800466c:	700b      	strb	r3, [r1, #0]
 800466e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004670:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004674:	4691      	mov	r9, r2
 8004676:	f023 0820 	bic.w	r8, r3, #32
 800467a:	bfbc      	itt	lt
 800467c:	4622      	movlt	r2, r4
 800467e:	4614      	movlt	r4, r2
 8004680:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004684:	d005      	beq.n	8004692 <__cvt+0x42>
 8004686:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800468a:	d100      	bne.n	800468e <__cvt+0x3e>
 800468c:	3601      	adds	r6, #1
 800468e:	2102      	movs	r1, #2
 8004690:	e000      	b.n	8004694 <__cvt+0x44>
 8004692:	2103      	movs	r1, #3
 8004694:	ab03      	add	r3, sp, #12
 8004696:	9301      	str	r3, [sp, #4]
 8004698:	ab02      	add	r3, sp, #8
 800469a:	9300      	str	r3, [sp, #0]
 800469c:	ec45 4b10 	vmov	d0, r4, r5
 80046a0:	4653      	mov	r3, sl
 80046a2:	4632      	mov	r2, r6
 80046a4:	f000 fe18 	bl	80052d8 <_dtoa_r>
 80046a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80046ac:	4607      	mov	r7, r0
 80046ae:	d102      	bne.n	80046b6 <__cvt+0x66>
 80046b0:	f019 0f01 	tst.w	r9, #1
 80046b4:	d022      	beq.n	80046fc <__cvt+0xac>
 80046b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80046ba:	eb07 0906 	add.w	r9, r7, r6
 80046be:	d110      	bne.n	80046e2 <__cvt+0x92>
 80046c0:	783b      	ldrb	r3, [r7, #0]
 80046c2:	2b30      	cmp	r3, #48	; 0x30
 80046c4:	d10a      	bne.n	80046dc <__cvt+0x8c>
 80046c6:	2200      	movs	r2, #0
 80046c8:	2300      	movs	r3, #0
 80046ca:	4620      	mov	r0, r4
 80046cc:	4629      	mov	r1, r5
 80046ce:	f7fc fa7b 	bl	8000bc8 <__aeabi_dcmpeq>
 80046d2:	b918      	cbnz	r0, 80046dc <__cvt+0x8c>
 80046d4:	f1c6 0601 	rsb	r6, r6, #1
 80046d8:	f8ca 6000 	str.w	r6, [sl]
 80046dc:	f8da 3000 	ldr.w	r3, [sl]
 80046e0:	4499      	add	r9, r3
 80046e2:	2200      	movs	r2, #0
 80046e4:	2300      	movs	r3, #0
 80046e6:	4620      	mov	r0, r4
 80046e8:	4629      	mov	r1, r5
 80046ea:	f7fc fa6d 	bl	8000bc8 <__aeabi_dcmpeq>
 80046ee:	b108      	cbz	r0, 80046f4 <__cvt+0xa4>
 80046f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80046f4:	2230      	movs	r2, #48	; 0x30
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	454b      	cmp	r3, r9
 80046fa:	d307      	bcc.n	800470c <__cvt+0xbc>
 80046fc:	9b03      	ldr	r3, [sp, #12]
 80046fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004700:	1bdb      	subs	r3, r3, r7
 8004702:	4638      	mov	r0, r7
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	b004      	add	sp, #16
 8004708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800470c:	1c59      	adds	r1, r3, #1
 800470e:	9103      	str	r1, [sp, #12]
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	e7f0      	b.n	80046f6 <__cvt+0xa6>

08004714 <__exponent>:
 8004714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004716:	4603      	mov	r3, r0
 8004718:	2900      	cmp	r1, #0
 800471a:	bfb8      	it	lt
 800471c:	4249      	neglt	r1, r1
 800471e:	f803 2b02 	strb.w	r2, [r3], #2
 8004722:	bfb4      	ite	lt
 8004724:	222d      	movlt	r2, #45	; 0x2d
 8004726:	222b      	movge	r2, #43	; 0x2b
 8004728:	2909      	cmp	r1, #9
 800472a:	7042      	strb	r2, [r0, #1]
 800472c:	dd2a      	ble.n	8004784 <__exponent+0x70>
 800472e:	f10d 0407 	add.w	r4, sp, #7
 8004732:	46a4      	mov	ip, r4
 8004734:	270a      	movs	r7, #10
 8004736:	46a6      	mov	lr, r4
 8004738:	460a      	mov	r2, r1
 800473a:	fb91 f6f7 	sdiv	r6, r1, r7
 800473e:	fb07 1516 	mls	r5, r7, r6, r1
 8004742:	3530      	adds	r5, #48	; 0x30
 8004744:	2a63      	cmp	r2, #99	; 0x63
 8004746:	f104 34ff 	add.w	r4, r4, #4294967295
 800474a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800474e:	4631      	mov	r1, r6
 8004750:	dcf1      	bgt.n	8004736 <__exponent+0x22>
 8004752:	3130      	adds	r1, #48	; 0x30
 8004754:	f1ae 0502 	sub.w	r5, lr, #2
 8004758:	f804 1c01 	strb.w	r1, [r4, #-1]
 800475c:	1c44      	adds	r4, r0, #1
 800475e:	4629      	mov	r1, r5
 8004760:	4561      	cmp	r1, ip
 8004762:	d30a      	bcc.n	800477a <__exponent+0x66>
 8004764:	f10d 0209 	add.w	r2, sp, #9
 8004768:	eba2 020e 	sub.w	r2, r2, lr
 800476c:	4565      	cmp	r5, ip
 800476e:	bf88      	it	hi
 8004770:	2200      	movhi	r2, #0
 8004772:	4413      	add	r3, r2
 8004774:	1a18      	subs	r0, r3, r0
 8004776:	b003      	add	sp, #12
 8004778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800477a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800477e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004782:	e7ed      	b.n	8004760 <__exponent+0x4c>
 8004784:	2330      	movs	r3, #48	; 0x30
 8004786:	3130      	adds	r1, #48	; 0x30
 8004788:	7083      	strb	r3, [r0, #2]
 800478a:	70c1      	strb	r1, [r0, #3]
 800478c:	1d03      	adds	r3, r0, #4
 800478e:	e7f1      	b.n	8004774 <__exponent+0x60>

08004790 <_printf_float>:
 8004790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004794:	ed2d 8b02 	vpush	{d8}
 8004798:	b08d      	sub	sp, #52	; 0x34
 800479a:	460c      	mov	r4, r1
 800479c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80047a0:	4616      	mov	r6, r2
 80047a2:	461f      	mov	r7, r3
 80047a4:	4605      	mov	r5, r0
 80047a6:	f001 fd3d 	bl	8006224 <_localeconv_r>
 80047aa:	f8d0 a000 	ldr.w	sl, [r0]
 80047ae:	4650      	mov	r0, sl
 80047b0:	f7fb fd8e 	bl	80002d0 <strlen>
 80047b4:	2300      	movs	r3, #0
 80047b6:	930a      	str	r3, [sp, #40]	; 0x28
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	9305      	str	r3, [sp, #20]
 80047bc:	f8d8 3000 	ldr.w	r3, [r8]
 80047c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80047c4:	3307      	adds	r3, #7
 80047c6:	f023 0307 	bic.w	r3, r3, #7
 80047ca:	f103 0208 	add.w	r2, r3, #8
 80047ce:	f8c8 2000 	str.w	r2, [r8]
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80047da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80047de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80047e2:	9307      	str	r3, [sp, #28]
 80047e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80047e8:	ee08 0a10 	vmov	s16, r0
 80047ec:	4b9f      	ldr	r3, [pc, #636]	; (8004a6c <_printf_float+0x2dc>)
 80047ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047f2:	f04f 32ff 	mov.w	r2, #4294967295
 80047f6:	f7fc fa19 	bl	8000c2c <__aeabi_dcmpun>
 80047fa:	bb88      	cbnz	r0, 8004860 <_printf_float+0xd0>
 80047fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004800:	4b9a      	ldr	r3, [pc, #616]	; (8004a6c <_printf_float+0x2dc>)
 8004802:	f04f 32ff 	mov.w	r2, #4294967295
 8004806:	f7fc f9f3 	bl	8000bf0 <__aeabi_dcmple>
 800480a:	bb48      	cbnz	r0, 8004860 <_printf_float+0xd0>
 800480c:	2200      	movs	r2, #0
 800480e:	2300      	movs	r3, #0
 8004810:	4640      	mov	r0, r8
 8004812:	4649      	mov	r1, r9
 8004814:	f7fc f9e2 	bl	8000bdc <__aeabi_dcmplt>
 8004818:	b110      	cbz	r0, 8004820 <_printf_float+0x90>
 800481a:	232d      	movs	r3, #45	; 0x2d
 800481c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004820:	4b93      	ldr	r3, [pc, #588]	; (8004a70 <_printf_float+0x2e0>)
 8004822:	4894      	ldr	r0, [pc, #592]	; (8004a74 <_printf_float+0x2e4>)
 8004824:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004828:	bf94      	ite	ls
 800482a:	4698      	movls	r8, r3
 800482c:	4680      	movhi	r8, r0
 800482e:	2303      	movs	r3, #3
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	9b05      	ldr	r3, [sp, #20]
 8004834:	f023 0204 	bic.w	r2, r3, #4
 8004838:	6022      	str	r2, [r4, #0]
 800483a:	f04f 0900 	mov.w	r9, #0
 800483e:	9700      	str	r7, [sp, #0]
 8004840:	4633      	mov	r3, r6
 8004842:	aa0b      	add	r2, sp, #44	; 0x2c
 8004844:	4621      	mov	r1, r4
 8004846:	4628      	mov	r0, r5
 8004848:	f000 f9d8 	bl	8004bfc <_printf_common>
 800484c:	3001      	adds	r0, #1
 800484e:	f040 8090 	bne.w	8004972 <_printf_float+0x1e2>
 8004852:	f04f 30ff 	mov.w	r0, #4294967295
 8004856:	b00d      	add	sp, #52	; 0x34
 8004858:	ecbd 8b02 	vpop	{d8}
 800485c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	4640      	mov	r0, r8
 8004866:	4649      	mov	r1, r9
 8004868:	f7fc f9e0 	bl	8000c2c <__aeabi_dcmpun>
 800486c:	b140      	cbz	r0, 8004880 <_printf_float+0xf0>
 800486e:	464b      	mov	r3, r9
 8004870:	2b00      	cmp	r3, #0
 8004872:	bfbc      	itt	lt
 8004874:	232d      	movlt	r3, #45	; 0x2d
 8004876:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800487a:	487f      	ldr	r0, [pc, #508]	; (8004a78 <_printf_float+0x2e8>)
 800487c:	4b7f      	ldr	r3, [pc, #508]	; (8004a7c <_printf_float+0x2ec>)
 800487e:	e7d1      	b.n	8004824 <_printf_float+0x94>
 8004880:	6863      	ldr	r3, [r4, #4]
 8004882:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004886:	9206      	str	r2, [sp, #24]
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	d13f      	bne.n	800490c <_printf_float+0x17c>
 800488c:	2306      	movs	r3, #6
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	9b05      	ldr	r3, [sp, #20]
 8004892:	6861      	ldr	r1, [r4, #4]
 8004894:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004898:	2300      	movs	r3, #0
 800489a:	9303      	str	r3, [sp, #12]
 800489c:	ab0a      	add	r3, sp, #40	; 0x28
 800489e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80048a2:	ab09      	add	r3, sp, #36	; 0x24
 80048a4:	ec49 8b10 	vmov	d0, r8, r9
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	6022      	str	r2, [r4, #0]
 80048ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80048b0:	4628      	mov	r0, r5
 80048b2:	f7ff fecd 	bl	8004650 <__cvt>
 80048b6:	9b06      	ldr	r3, [sp, #24]
 80048b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80048ba:	2b47      	cmp	r3, #71	; 0x47
 80048bc:	4680      	mov	r8, r0
 80048be:	d108      	bne.n	80048d2 <_printf_float+0x142>
 80048c0:	1cc8      	adds	r0, r1, #3
 80048c2:	db02      	blt.n	80048ca <_printf_float+0x13a>
 80048c4:	6863      	ldr	r3, [r4, #4]
 80048c6:	4299      	cmp	r1, r3
 80048c8:	dd41      	ble.n	800494e <_printf_float+0x1be>
 80048ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80048ce:	fa5f fb8b 	uxtb.w	fp, fp
 80048d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80048d6:	d820      	bhi.n	800491a <_printf_float+0x18a>
 80048d8:	3901      	subs	r1, #1
 80048da:	465a      	mov	r2, fp
 80048dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80048e0:	9109      	str	r1, [sp, #36]	; 0x24
 80048e2:	f7ff ff17 	bl	8004714 <__exponent>
 80048e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048e8:	1813      	adds	r3, r2, r0
 80048ea:	2a01      	cmp	r2, #1
 80048ec:	4681      	mov	r9, r0
 80048ee:	6123      	str	r3, [r4, #16]
 80048f0:	dc02      	bgt.n	80048f8 <_printf_float+0x168>
 80048f2:	6822      	ldr	r2, [r4, #0]
 80048f4:	07d2      	lsls	r2, r2, #31
 80048f6:	d501      	bpl.n	80048fc <_printf_float+0x16c>
 80048f8:	3301      	adds	r3, #1
 80048fa:	6123      	str	r3, [r4, #16]
 80048fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004900:	2b00      	cmp	r3, #0
 8004902:	d09c      	beq.n	800483e <_printf_float+0xae>
 8004904:	232d      	movs	r3, #45	; 0x2d
 8004906:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800490a:	e798      	b.n	800483e <_printf_float+0xae>
 800490c:	9a06      	ldr	r2, [sp, #24]
 800490e:	2a47      	cmp	r2, #71	; 0x47
 8004910:	d1be      	bne.n	8004890 <_printf_float+0x100>
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1bc      	bne.n	8004890 <_printf_float+0x100>
 8004916:	2301      	movs	r3, #1
 8004918:	e7b9      	b.n	800488e <_printf_float+0xfe>
 800491a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800491e:	d118      	bne.n	8004952 <_printf_float+0x1c2>
 8004920:	2900      	cmp	r1, #0
 8004922:	6863      	ldr	r3, [r4, #4]
 8004924:	dd0b      	ble.n	800493e <_printf_float+0x1ae>
 8004926:	6121      	str	r1, [r4, #16]
 8004928:	b913      	cbnz	r3, 8004930 <_printf_float+0x1a0>
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	07d0      	lsls	r0, r2, #31
 800492e:	d502      	bpl.n	8004936 <_printf_float+0x1a6>
 8004930:	3301      	adds	r3, #1
 8004932:	440b      	add	r3, r1
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	65a1      	str	r1, [r4, #88]	; 0x58
 8004938:	f04f 0900 	mov.w	r9, #0
 800493c:	e7de      	b.n	80048fc <_printf_float+0x16c>
 800493e:	b913      	cbnz	r3, 8004946 <_printf_float+0x1b6>
 8004940:	6822      	ldr	r2, [r4, #0]
 8004942:	07d2      	lsls	r2, r2, #31
 8004944:	d501      	bpl.n	800494a <_printf_float+0x1ba>
 8004946:	3302      	adds	r3, #2
 8004948:	e7f4      	b.n	8004934 <_printf_float+0x1a4>
 800494a:	2301      	movs	r3, #1
 800494c:	e7f2      	b.n	8004934 <_printf_float+0x1a4>
 800494e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004954:	4299      	cmp	r1, r3
 8004956:	db05      	blt.n	8004964 <_printf_float+0x1d4>
 8004958:	6823      	ldr	r3, [r4, #0]
 800495a:	6121      	str	r1, [r4, #16]
 800495c:	07d8      	lsls	r0, r3, #31
 800495e:	d5ea      	bpl.n	8004936 <_printf_float+0x1a6>
 8004960:	1c4b      	adds	r3, r1, #1
 8004962:	e7e7      	b.n	8004934 <_printf_float+0x1a4>
 8004964:	2900      	cmp	r1, #0
 8004966:	bfd4      	ite	le
 8004968:	f1c1 0202 	rsble	r2, r1, #2
 800496c:	2201      	movgt	r2, #1
 800496e:	4413      	add	r3, r2
 8004970:	e7e0      	b.n	8004934 <_printf_float+0x1a4>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	055a      	lsls	r2, r3, #21
 8004976:	d407      	bmi.n	8004988 <_printf_float+0x1f8>
 8004978:	6923      	ldr	r3, [r4, #16]
 800497a:	4642      	mov	r2, r8
 800497c:	4631      	mov	r1, r6
 800497e:	4628      	mov	r0, r5
 8004980:	47b8      	blx	r7
 8004982:	3001      	adds	r0, #1
 8004984:	d12c      	bne.n	80049e0 <_printf_float+0x250>
 8004986:	e764      	b.n	8004852 <_printf_float+0xc2>
 8004988:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800498c:	f240 80e0 	bls.w	8004b50 <_printf_float+0x3c0>
 8004990:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004994:	2200      	movs	r2, #0
 8004996:	2300      	movs	r3, #0
 8004998:	f7fc f916 	bl	8000bc8 <__aeabi_dcmpeq>
 800499c:	2800      	cmp	r0, #0
 800499e:	d034      	beq.n	8004a0a <_printf_float+0x27a>
 80049a0:	4a37      	ldr	r2, [pc, #220]	; (8004a80 <_printf_float+0x2f0>)
 80049a2:	2301      	movs	r3, #1
 80049a4:	4631      	mov	r1, r6
 80049a6:	4628      	mov	r0, r5
 80049a8:	47b8      	blx	r7
 80049aa:	3001      	adds	r0, #1
 80049ac:	f43f af51 	beq.w	8004852 <_printf_float+0xc2>
 80049b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049b4:	429a      	cmp	r2, r3
 80049b6:	db02      	blt.n	80049be <_printf_float+0x22e>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	07d8      	lsls	r0, r3, #31
 80049bc:	d510      	bpl.n	80049e0 <_printf_float+0x250>
 80049be:	ee18 3a10 	vmov	r3, s16
 80049c2:	4652      	mov	r2, sl
 80049c4:	4631      	mov	r1, r6
 80049c6:	4628      	mov	r0, r5
 80049c8:	47b8      	blx	r7
 80049ca:	3001      	adds	r0, #1
 80049cc:	f43f af41 	beq.w	8004852 <_printf_float+0xc2>
 80049d0:	f04f 0800 	mov.w	r8, #0
 80049d4:	f104 091a 	add.w	r9, r4, #26
 80049d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049da:	3b01      	subs	r3, #1
 80049dc:	4543      	cmp	r3, r8
 80049de:	dc09      	bgt.n	80049f4 <_printf_float+0x264>
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	079b      	lsls	r3, r3, #30
 80049e4:	f100 8105 	bmi.w	8004bf2 <_printf_float+0x462>
 80049e8:	68e0      	ldr	r0, [r4, #12]
 80049ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049ec:	4298      	cmp	r0, r3
 80049ee:	bfb8      	it	lt
 80049f0:	4618      	movlt	r0, r3
 80049f2:	e730      	b.n	8004856 <_printf_float+0xc6>
 80049f4:	2301      	movs	r3, #1
 80049f6:	464a      	mov	r2, r9
 80049f8:	4631      	mov	r1, r6
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	f43f af27 	beq.w	8004852 <_printf_float+0xc2>
 8004a04:	f108 0801 	add.w	r8, r8, #1
 8004a08:	e7e6      	b.n	80049d8 <_printf_float+0x248>
 8004a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	dc39      	bgt.n	8004a84 <_printf_float+0x2f4>
 8004a10:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <_printf_float+0x2f0>)
 8004a12:	2301      	movs	r3, #1
 8004a14:	4631      	mov	r1, r6
 8004a16:	4628      	mov	r0, r5
 8004a18:	47b8      	blx	r7
 8004a1a:	3001      	adds	r0, #1
 8004a1c:	f43f af19 	beq.w	8004852 <_printf_float+0xc2>
 8004a20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a24:	4313      	orrs	r3, r2
 8004a26:	d102      	bne.n	8004a2e <_printf_float+0x29e>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	07d9      	lsls	r1, r3, #31
 8004a2c:	d5d8      	bpl.n	80049e0 <_printf_float+0x250>
 8004a2e:	ee18 3a10 	vmov	r3, s16
 8004a32:	4652      	mov	r2, sl
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f43f af09 	beq.w	8004852 <_printf_float+0xc2>
 8004a40:	f04f 0900 	mov.w	r9, #0
 8004a44:	f104 0a1a 	add.w	sl, r4, #26
 8004a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a4a:	425b      	negs	r3, r3
 8004a4c:	454b      	cmp	r3, r9
 8004a4e:	dc01      	bgt.n	8004a54 <_printf_float+0x2c4>
 8004a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a52:	e792      	b.n	800497a <_printf_float+0x1ea>
 8004a54:	2301      	movs	r3, #1
 8004a56:	4652      	mov	r2, sl
 8004a58:	4631      	mov	r1, r6
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	47b8      	blx	r7
 8004a5e:	3001      	adds	r0, #1
 8004a60:	f43f aef7 	beq.w	8004852 <_printf_float+0xc2>
 8004a64:	f109 0901 	add.w	r9, r9, #1
 8004a68:	e7ee      	b.n	8004a48 <_printf_float+0x2b8>
 8004a6a:	bf00      	nop
 8004a6c:	7fefffff 	.word	0x7fefffff
 8004a70:	0800b998 	.word	0x0800b998
 8004a74:	0800b99c 	.word	0x0800b99c
 8004a78:	0800b9a4 	.word	0x0800b9a4
 8004a7c:	0800b9a0 	.word	0x0800b9a0
 8004a80:	0800b9a8 	.word	0x0800b9a8
 8004a84:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	bfa8      	it	ge
 8004a8c:	461a      	movge	r2, r3
 8004a8e:	2a00      	cmp	r2, #0
 8004a90:	4691      	mov	r9, r2
 8004a92:	dc37      	bgt.n	8004b04 <_printf_float+0x374>
 8004a94:	f04f 0b00 	mov.w	fp, #0
 8004a98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a9c:	f104 021a 	add.w	r2, r4, #26
 8004aa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004aa2:	9305      	str	r3, [sp, #20]
 8004aa4:	eba3 0309 	sub.w	r3, r3, r9
 8004aa8:	455b      	cmp	r3, fp
 8004aaa:	dc33      	bgt.n	8004b14 <_printf_float+0x384>
 8004aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	db3b      	blt.n	8004b2c <_printf_float+0x39c>
 8004ab4:	6823      	ldr	r3, [r4, #0]
 8004ab6:	07da      	lsls	r2, r3, #31
 8004ab8:	d438      	bmi.n	8004b2c <_printf_float+0x39c>
 8004aba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004abc:	9a05      	ldr	r2, [sp, #20]
 8004abe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ac0:	1a9a      	subs	r2, r3, r2
 8004ac2:	eba3 0901 	sub.w	r9, r3, r1
 8004ac6:	4591      	cmp	r9, r2
 8004ac8:	bfa8      	it	ge
 8004aca:	4691      	movge	r9, r2
 8004acc:	f1b9 0f00 	cmp.w	r9, #0
 8004ad0:	dc35      	bgt.n	8004b3e <_printf_float+0x3ae>
 8004ad2:	f04f 0800 	mov.w	r8, #0
 8004ad6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ada:	f104 0a1a 	add.w	sl, r4, #26
 8004ade:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ae2:	1a9b      	subs	r3, r3, r2
 8004ae4:	eba3 0309 	sub.w	r3, r3, r9
 8004ae8:	4543      	cmp	r3, r8
 8004aea:	f77f af79 	ble.w	80049e0 <_printf_float+0x250>
 8004aee:	2301      	movs	r3, #1
 8004af0:	4652      	mov	r2, sl
 8004af2:	4631      	mov	r1, r6
 8004af4:	4628      	mov	r0, r5
 8004af6:	47b8      	blx	r7
 8004af8:	3001      	adds	r0, #1
 8004afa:	f43f aeaa 	beq.w	8004852 <_printf_float+0xc2>
 8004afe:	f108 0801 	add.w	r8, r8, #1
 8004b02:	e7ec      	b.n	8004ade <_printf_float+0x34e>
 8004b04:	4613      	mov	r3, r2
 8004b06:	4631      	mov	r1, r6
 8004b08:	4642      	mov	r2, r8
 8004b0a:	4628      	mov	r0, r5
 8004b0c:	47b8      	blx	r7
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d1c0      	bne.n	8004a94 <_printf_float+0x304>
 8004b12:	e69e      	b.n	8004852 <_printf_float+0xc2>
 8004b14:	2301      	movs	r3, #1
 8004b16:	4631      	mov	r1, r6
 8004b18:	4628      	mov	r0, r5
 8004b1a:	9205      	str	r2, [sp, #20]
 8004b1c:	47b8      	blx	r7
 8004b1e:	3001      	adds	r0, #1
 8004b20:	f43f ae97 	beq.w	8004852 <_printf_float+0xc2>
 8004b24:	9a05      	ldr	r2, [sp, #20]
 8004b26:	f10b 0b01 	add.w	fp, fp, #1
 8004b2a:	e7b9      	b.n	8004aa0 <_printf_float+0x310>
 8004b2c:	ee18 3a10 	vmov	r3, s16
 8004b30:	4652      	mov	r2, sl
 8004b32:	4631      	mov	r1, r6
 8004b34:	4628      	mov	r0, r5
 8004b36:	47b8      	blx	r7
 8004b38:	3001      	adds	r0, #1
 8004b3a:	d1be      	bne.n	8004aba <_printf_float+0x32a>
 8004b3c:	e689      	b.n	8004852 <_printf_float+0xc2>
 8004b3e:	9a05      	ldr	r2, [sp, #20]
 8004b40:	464b      	mov	r3, r9
 8004b42:	4442      	add	r2, r8
 8004b44:	4631      	mov	r1, r6
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b8      	blx	r7
 8004b4a:	3001      	adds	r0, #1
 8004b4c:	d1c1      	bne.n	8004ad2 <_printf_float+0x342>
 8004b4e:	e680      	b.n	8004852 <_printf_float+0xc2>
 8004b50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b52:	2a01      	cmp	r2, #1
 8004b54:	dc01      	bgt.n	8004b5a <_printf_float+0x3ca>
 8004b56:	07db      	lsls	r3, r3, #31
 8004b58:	d538      	bpl.n	8004bcc <_printf_float+0x43c>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f ae74 	beq.w	8004852 <_printf_float+0xc2>
 8004b6a:	ee18 3a10 	vmov	r3, s16
 8004b6e:	4652      	mov	r2, sl
 8004b70:	4631      	mov	r1, r6
 8004b72:	4628      	mov	r0, r5
 8004b74:	47b8      	blx	r7
 8004b76:	3001      	adds	r0, #1
 8004b78:	f43f ae6b 	beq.w	8004852 <_printf_float+0xc2>
 8004b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004b80:	2200      	movs	r2, #0
 8004b82:	2300      	movs	r3, #0
 8004b84:	f7fc f820 	bl	8000bc8 <__aeabi_dcmpeq>
 8004b88:	b9d8      	cbnz	r0, 8004bc2 <_printf_float+0x432>
 8004b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b8c:	f108 0201 	add.w	r2, r8, #1
 8004b90:	3b01      	subs	r3, #1
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	d10e      	bne.n	8004bba <_printf_float+0x42a>
 8004b9c:	e659      	b.n	8004852 <_printf_float+0xc2>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4652      	mov	r2, sl
 8004ba2:	4631      	mov	r1, r6
 8004ba4:	4628      	mov	r0, r5
 8004ba6:	47b8      	blx	r7
 8004ba8:	3001      	adds	r0, #1
 8004baa:	f43f ae52 	beq.w	8004852 <_printf_float+0xc2>
 8004bae:	f108 0801 	add.w	r8, r8, #1
 8004bb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	4543      	cmp	r3, r8
 8004bb8:	dcf1      	bgt.n	8004b9e <_printf_float+0x40e>
 8004bba:	464b      	mov	r3, r9
 8004bbc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004bc0:	e6dc      	b.n	800497c <_printf_float+0x1ec>
 8004bc2:	f04f 0800 	mov.w	r8, #0
 8004bc6:	f104 0a1a 	add.w	sl, r4, #26
 8004bca:	e7f2      	b.n	8004bb2 <_printf_float+0x422>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	4642      	mov	r2, r8
 8004bd0:	e7df      	b.n	8004b92 <_printf_float+0x402>
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	464a      	mov	r2, r9
 8004bd6:	4631      	mov	r1, r6
 8004bd8:	4628      	mov	r0, r5
 8004bda:	47b8      	blx	r7
 8004bdc:	3001      	adds	r0, #1
 8004bde:	f43f ae38 	beq.w	8004852 <_printf_float+0xc2>
 8004be2:	f108 0801 	add.w	r8, r8, #1
 8004be6:	68e3      	ldr	r3, [r4, #12]
 8004be8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bea:	1a5b      	subs	r3, r3, r1
 8004bec:	4543      	cmp	r3, r8
 8004bee:	dcf0      	bgt.n	8004bd2 <_printf_float+0x442>
 8004bf0:	e6fa      	b.n	80049e8 <_printf_float+0x258>
 8004bf2:	f04f 0800 	mov.w	r8, #0
 8004bf6:	f104 0919 	add.w	r9, r4, #25
 8004bfa:	e7f4      	b.n	8004be6 <_printf_float+0x456>

08004bfc <_printf_common>:
 8004bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	4616      	mov	r6, r2
 8004c02:	4699      	mov	r9, r3
 8004c04:	688a      	ldr	r2, [r1, #8]
 8004c06:	690b      	ldr	r3, [r1, #16]
 8004c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	bfb8      	it	lt
 8004c10:	4613      	movlt	r3, r2
 8004c12:	6033      	str	r3, [r6, #0]
 8004c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c18:	4607      	mov	r7, r0
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	b10a      	cbz	r2, 8004c22 <_printf_common+0x26>
 8004c1e:	3301      	adds	r3, #1
 8004c20:	6033      	str	r3, [r6, #0]
 8004c22:	6823      	ldr	r3, [r4, #0]
 8004c24:	0699      	lsls	r1, r3, #26
 8004c26:	bf42      	ittt	mi
 8004c28:	6833      	ldrmi	r3, [r6, #0]
 8004c2a:	3302      	addmi	r3, #2
 8004c2c:	6033      	strmi	r3, [r6, #0]
 8004c2e:	6825      	ldr	r5, [r4, #0]
 8004c30:	f015 0506 	ands.w	r5, r5, #6
 8004c34:	d106      	bne.n	8004c44 <_printf_common+0x48>
 8004c36:	f104 0a19 	add.w	sl, r4, #25
 8004c3a:	68e3      	ldr	r3, [r4, #12]
 8004c3c:	6832      	ldr	r2, [r6, #0]
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	42ab      	cmp	r3, r5
 8004c42:	dc26      	bgt.n	8004c92 <_printf_common+0x96>
 8004c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c48:	1e13      	subs	r3, r2, #0
 8004c4a:	6822      	ldr	r2, [r4, #0]
 8004c4c:	bf18      	it	ne
 8004c4e:	2301      	movne	r3, #1
 8004c50:	0692      	lsls	r2, r2, #26
 8004c52:	d42b      	bmi.n	8004cac <_printf_common+0xb0>
 8004c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c58:	4649      	mov	r1, r9
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	47c0      	blx	r8
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d01e      	beq.n	8004ca0 <_printf_common+0xa4>
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	68e5      	ldr	r5, [r4, #12]
 8004c66:	6832      	ldr	r2, [r6, #0]
 8004c68:	f003 0306 	and.w	r3, r3, #6
 8004c6c:	2b04      	cmp	r3, #4
 8004c6e:	bf08      	it	eq
 8004c70:	1aad      	subeq	r5, r5, r2
 8004c72:	68a3      	ldr	r3, [r4, #8]
 8004c74:	6922      	ldr	r2, [r4, #16]
 8004c76:	bf0c      	ite	eq
 8004c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c7c:	2500      	movne	r5, #0
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	bfc4      	itt	gt
 8004c82:	1a9b      	subgt	r3, r3, r2
 8004c84:	18ed      	addgt	r5, r5, r3
 8004c86:	2600      	movs	r6, #0
 8004c88:	341a      	adds	r4, #26
 8004c8a:	42b5      	cmp	r5, r6
 8004c8c:	d11a      	bne.n	8004cc4 <_printf_common+0xc8>
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e008      	b.n	8004ca4 <_printf_common+0xa8>
 8004c92:	2301      	movs	r3, #1
 8004c94:	4652      	mov	r2, sl
 8004c96:	4649      	mov	r1, r9
 8004c98:	4638      	mov	r0, r7
 8004c9a:	47c0      	blx	r8
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d103      	bne.n	8004ca8 <_printf_common+0xac>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ca8:	3501      	adds	r5, #1
 8004caa:	e7c6      	b.n	8004c3a <_printf_common+0x3e>
 8004cac:	18e1      	adds	r1, r4, r3
 8004cae:	1c5a      	adds	r2, r3, #1
 8004cb0:	2030      	movs	r0, #48	; 0x30
 8004cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cb6:	4422      	add	r2, r4
 8004cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cc0:	3302      	adds	r3, #2
 8004cc2:	e7c7      	b.n	8004c54 <_printf_common+0x58>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	4622      	mov	r2, r4
 8004cc8:	4649      	mov	r1, r9
 8004cca:	4638      	mov	r0, r7
 8004ccc:	47c0      	blx	r8
 8004cce:	3001      	adds	r0, #1
 8004cd0:	d0e6      	beq.n	8004ca0 <_printf_common+0xa4>
 8004cd2:	3601      	adds	r6, #1
 8004cd4:	e7d9      	b.n	8004c8a <_printf_common+0x8e>
	...

08004cd8 <_printf_i>:
 8004cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cdc:	7e0f      	ldrb	r7, [r1, #24]
 8004cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ce0:	2f78      	cmp	r7, #120	; 0x78
 8004ce2:	4691      	mov	r9, r2
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	460c      	mov	r4, r1
 8004ce8:	469a      	mov	sl, r3
 8004cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004cee:	d807      	bhi.n	8004d00 <_printf_i+0x28>
 8004cf0:	2f62      	cmp	r7, #98	; 0x62
 8004cf2:	d80a      	bhi.n	8004d0a <_printf_i+0x32>
 8004cf4:	2f00      	cmp	r7, #0
 8004cf6:	f000 80d8 	beq.w	8004eaa <_printf_i+0x1d2>
 8004cfa:	2f58      	cmp	r7, #88	; 0x58
 8004cfc:	f000 80a3 	beq.w	8004e46 <_printf_i+0x16e>
 8004d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d08:	e03a      	b.n	8004d80 <_printf_i+0xa8>
 8004d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d0e:	2b15      	cmp	r3, #21
 8004d10:	d8f6      	bhi.n	8004d00 <_printf_i+0x28>
 8004d12:	a101      	add	r1, pc, #4	; (adr r1, 8004d18 <_printf_i+0x40>)
 8004d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d18:	08004d71 	.word	0x08004d71
 8004d1c:	08004d85 	.word	0x08004d85
 8004d20:	08004d01 	.word	0x08004d01
 8004d24:	08004d01 	.word	0x08004d01
 8004d28:	08004d01 	.word	0x08004d01
 8004d2c:	08004d01 	.word	0x08004d01
 8004d30:	08004d85 	.word	0x08004d85
 8004d34:	08004d01 	.word	0x08004d01
 8004d38:	08004d01 	.word	0x08004d01
 8004d3c:	08004d01 	.word	0x08004d01
 8004d40:	08004d01 	.word	0x08004d01
 8004d44:	08004e91 	.word	0x08004e91
 8004d48:	08004db5 	.word	0x08004db5
 8004d4c:	08004e73 	.word	0x08004e73
 8004d50:	08004d01 	.word	0x08004d01
 8004d54:	08004d01 	.word	0x08004d01
 8004d58:	08004eb3 	.word	0x08004eb3
 8004d5c:	08004d01 	.word	0x08004d01
 8004d60:	08004db5 	.word	0x08004db5
 8004d64:	08004d01 	.word	0x08004d01
 8004d68:	08004d01 	.word	0x08004d01
 8004d6c:	08004e7b 	.word	0x08004e7b
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	1d1a      	adds	r2, r3, #4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	602a      	str	r2, [r5, #0]
 8004d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0a3      	b.n	8004ecc <_printf_i+0x1f4>
 8004d84:	6820      	ldr	r0, [r4, #0]
 8004d86:	6829      	ldr	r1, [r5, #0]
 8004d88:	0606      	lsls	r6, r0, #24
 8004d8a:	f101 0304 	add.w	r3, r1, #4
 8004d8e:	d50a      	bpl.n	8004da6 <_printf_i+0xce>
 8004d90:	680e      	ldr	r6, [r1, #0]
 8004d92:	602b      	str	r3, [r5, #0]
 8004d94:	2e00      	cmp	r6, #0
 8004d96:	da03      	bge.n	8004da0 <_printf_i+0xc8>
 8004d98:	232d      	movs	r3, #45	; 0x2d
 8004d9a:	4276      	negs	r6, r6
 8004d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004da0:	485e      	ldr	r0, [pc, #376]	; (8004f1c <_printf_i+0x244>)
 8004da2:	230a      	movs	r3, #10
 8004da4:	e019      	b.n	8004dda <_printf_i+0x102>
 8004da6:	680e      	ldr	r6, [r1, #0]
 8004da8:	602b      	str	r3, [r5, #0]
 8004daa:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dae:	bf18      	it	ne
 8004db0:	b236      	sxthne	r6, r6
 8004db2:	e7ef      	b.n	8004d94 <_printf_i+0xbc>
 8004db4:	682b      	ldr	r3, [r5, #0]
 8004db6:	6820      	ldr	r0, [r4, #0]
 8004db8:	1d19      	adds	r1, r3, #4
 8004dba:	6029      	str	r1, [r5, #0]
 8004dbc:	0601      	lsls	r1, r0, #24
 8004dbe:	d501      	bpl.n	8004dc4 <_printf_i+0xec>
 8004dc0:	681e      	ldr	r6, [r3, #0]
 8004dc2:	e002      	b.n	8004dca <_printf_i+0xf2>
 8004dc4:	0646      	lsls	r6, r0, #25
 8004dc6:	d5fb      	bpl.n	8004dc0 <_printf_i+0xe8>
 8004dc8:	881e      	ldrh	r6, [r3, #0]
 8004dca:	4854      	ldr	r0, [pc, #336]	; (8004f1c <_printf_i+0x244>)
 8004dcc:	2f6f      	cmp	r7, #111	; 0x6f
 8004dce:	bf0c      	ite	eq
 8004dd0:	2308      	moveq	r3, #8
 8004dd2:	230a      	movne	r3, #10
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dda:	6865      	ldr	r5, [r4, #4]
 8004ddc:	60a5      	str	r5, [r4, #8]
 8004dde:	2d00      	cmp	r5, #0
 8004de0:	bfa2      	ittt	ge
 8004de2:	6821      	ldrge	r1, [r4, #0]
 8004de4:	f021 0104 	bicge.w	r1, r1, #4
 8004de8:	6021      	strge	r1, [r4, #0]
 8004dea:	b90e      	cbnz	r6, 8004df0 <_printf_i+0x118>
 8004dec:	2d00      	cmp	r5, #0
 8004dee:	d04d      	beq.n	8004e8c <_printf_i+0x1b4>
 8004df0:	4615      	mov	r5, r2
 8004df2:	fbb6 f1f3 	udiv	r1, r6, r3
 8004df6:	fb03 6711 	mls	r7, r3, r1, r6
 8004dfa:	5dc7      	ldrb	r7, [r0, r7]
 8004dfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e00:	4637      	mov	r7, r6
 8004e02:	42bb      	cmp	r3, r7
 8004e04:	460e      	mov	r6, r1
 8004e06:	d9f4      	bls.n	8004df2 <_printf_i+0x11a>
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d10b      	bne.n	8004e24 <_printf_i+0x14c>
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	07de      	lsls	r6, r3, #31
 8004e10:	d508      	bpl.n	8004e24 <_printf_i+0x14c>
 8004e12:	6923      	ldr	r3, [r4, #16]
 8004e14:	6861      	ldr	r1, [r4, #4]
 8004e16:	4299      	cmp	r1, r3
 8004e18:	bfde      	ittt	le
 8004e1a:	2330      	movle	r3, #48	; 0x30
 8004e1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e20:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e24:	1b52      	subs	r2, r2, r5
 8004e26:	6122      	str	r2, [r4, #16]
 8004e28:	f8cd a000 	str.w	sl, [sp]
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	aa03      	add	r2, sp, #12
 8004e30:	4621      	mov	r1, r4
 8004e32:	4640      	mov	r0, r8
 8004e34:	f7ff fee2 	bl	8004bfc <_printf_common>
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d14c      	bne.n	8004ed6 <_printf_i+0x1fe>
 8004e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e40:	b004      	add	sp, #16
 8004e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e46:	4835      	ldr	r0, [pc, #212]	; (8004f1c <_printf_i+0x244>)
 8004e48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e4c:	6829      	ldr	r1, [r5, #0]
 8004e4e:	6823      	ldr	r3, [r4, #0]
 8004e50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e54:	6029      	str	r1, [r5, #0]
 8004e56:	061d      	lsls	r5, r3, #24
 8004e58:	d514      	bpl.n	8004e84 <_printf_i+0x1ac>
 8004e5a:	07df      	lsls	r7, r3, #31
 8004e5c:	bf44      	itt	mi
 8004e5e:	f043 0320 	orrmi.w	r3, r3, #32
 8004e62:	6023      	strmi	r3, [r4, #0]
 8004e64:	b91e      	cbnz	r6, 8004e6e <_printf_i+0x196>
 8004e66:	6823      	ldr	r3, [r4, #0]
 8004e68:	f023 0320 	bic.w	r3, r3, #32
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	2310      	movs	r3, #16
 8004e70:	e7b0      	b.n	8004dd4 <_printf_i+0xfc>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	f043 0320 	orr.w	r3, r3, #32
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	2378      	movs	r3, #120	; 0x78
 8004e7c:	4828      	ldr	r0, [pc, #160]	; (8004f20 <_printf_i+0x248>)
 8004e7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e82:	e7e3      	b.n	8004e4c <_printf_i+0x174>
 8004e84:	0659      	lsls	r1, r3, #25
 8004e86:	bf48      	it	mi
 8004e88:	b2b6      	uxthmi	r6, r6
 8004e8a:	e7e6      	b.n	8004e5a <_printf_i+0x182>
 8004e8c:	4615      	mov	r5, r2
 8004e8e:	e7bb      	b.n	8004e08 <_printf_i+0x130>
 8004e90:	682b      	ldr	r3, [r5, #0]
 8004e92:	6826      	ldr	r6, [r4, #0]
 8004e94:	6961      	ldr	r1, [r4, #20]
 8004e96:	1d18      	adds	r0, r3, #4
 8004e98:	6028      	str	r0, [r5, #0]
 8004e9a:	0635      	lsls	r5, r6, #24
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	d501      	bpl.n	8004ea4 <_printf_i+0x1cc>
 8004ea0:	6019      	str	r1, [r3, #0]
 8004ea2:	e002      	b.n	8004eaa <_printf_i+0x1d2>
 8004ea4:	0670      	lsls	r0, r6, #25
 8004ea6:	d5fb      	bpl.n	8004ea0 <_printf_i+0x1c8>
 8004ea8:	8019      	strh	r1, [r3, #0]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	6123      	str	r3, [r4, #16]
 8004eae:	4615      	mov	r5, r2
 8004eb0:	e7ba      	b.n	8004e28 <_printf_i+0x150>
 8004eb2:	682b      	ldr	r3, [r5, #0]
 8004eb4:	1d1a      	adds	r2, r3, #4
 8004eb6:	602a      	str	r2, [r5, #0]
 8004eb8:	681d      	ldr	r5, [r3, #0]
 8004eba:	6862      	ldr	r2, [r4, #4]
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	4628      	mov	r0, r5
 8004ec0:	f7fb fa0e 	bl	80002e0 <memchr>
 8004ec4:	b108      	cbz	r0, 8004eca <_printf_i+0x1f2>
 8004ec6:	1b40      	subs	r0, r0, r5
 8004ec8:	6060      	str	r0, [r4, #4]
 8004eca:	6863      	ldr	r3, [r4, #4]
 8004ecc:	6123      	str	r3, [r4, #16]
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed4:	e7a8      	b.n	8004e28 <_printf_i+0x150>
 8004ed6:	6923      	ldr	r3, [r4, #16]
 8004ed8:	462a      	mov	r2, r5
 8004eda:	4649      	mov	r1, r9
 8004edc:	4640      	mov	r0, r8
 8004ede:	47d0      	blx	sl
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d0ab      	beq.n	8004e3c <_printf_i+0x164>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	079b      	lsls	r3, r3, #30
 8004ee8:	d413      	bmi.n	8004f12 <_printf_i+0x23a>
 8004eea:	68e0      	ldr	r0, [r4, #12]
 8004eec:	9b03      	ldr	r3, [sp, #12]
 8004eee:	4298      	cmp	r0, r3
 8004ef0:	bfb8      	it	lt
 8004ef2:	4618      	movlt	r0, r3
 8004ef4:	e7a4      	b.n	8004e40 <_printf_i+0x168>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	4632      	mov	r2, r6
 8004efa:	4649      	mov	r1, r9
 8004efc:	4640      	mov	r0, r8
 8004efe:	47d0      	blx	sl
 8004f00:	3001      	adds	r0, #1
 8004f02:	d09b      	beq.n	8004e3c <_printf_i+0x164>
 8004f04:	3501      	adds	r5, #1
 8004f06:	68e3      	ldr	r3, [r4, #12]
 8004f08:	9903      	ldr	r1, [sp, #12]
 8004f0a:	1a5b      	subs	r3, r3, r1
 8004f0c:	42ab      	cmp	r3, r5
 8004f0e:	dcf2      	bgt.n	8004ef6 <_printf_i+0x21e>
 8004f10:	e7eb      	b.n	8004eea <_printf_i+0x212>
 8004f12:	2500      	movs	r5, #0
 8004f14:	f104 0619 	add.w	r6, r4, #25
 8004f18:	e7f5      	b.n	8004f06 <_printf_i+0x22e>
 8004f1a:	bf00      	nop
 8004f1c:	0800b9aa 	.word	0x0800b9aa
 8004f20:	0800b9bb 	.word	0x0800b9bb

08004f24 <iprintf>:
 8004f24:	b40f      	push	{r0, r1, r2, r3}
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <iprintf+0x2c>)
 8004f28:	b513      	push	{r0, r1, r4, lr}
 8004f2a:	681c      	ldr	r4, [r3, #0]
 8004f2c:	b124      	cbz	r4, 8004f38 <iprintf+0x14>
 8004f2e:	69a3      	ldr	r3, [r4, #24]
 8004f30:	b913      	cbnz	r3, 8004f38 <iprintf+0x14>
 8004f32:	4620      	mov	r0, r4
 8004f34:	f001 f8d8 	bl	80060e8 <__sinit>
 8004f38:	ab05      	add	r3, sp, #20
 8004f3a:	9a04      	ldr	r2, [sp, #16]
 8004f3c:	68a1      	ldr	r1, [r4, #8]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	4620      	mov	r0, r4
 8004f42:	f001 fe95 	bl	8006c70 <_vfiprintf_r>
 8004f46:	b002      	add	sp, #8
 8004f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f4c:	b004      	add	sp, #16
 8004f4e:	4770      	bx	lr
 8004f50:	20000010 	.word	0x20000010

08004f54 <_puts_r>:
 8004f54:	b570      	push	{r4, r5, r6, lr}
 8004f56:	460e      	mov	r6, r1
 8004f58:	4605      	mov	r5, r0
 8004f5a:	b118      	cbz	r0, 8004f64 <_puts_r+0x10>
 8004f5c:	6983      	ldr	r3, [r0, #24]
 8004f5e:	b90b      	cbnz	r3, 8004f64 <_puts_r+0x10>
 8004f60:	f001 f8c2 	bl	80060e8 <__sinit>
 8004f64:	69ab      	ldr	r3, [r5, #24]
 8004f66:	68ac      	ldr	r4, [r5, #8]
 8004f68:	b913      	cbnz	r3, 8004f70 <_puts_r+0x1c>
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f001 f8bc 	bl	80060e8 <__sinit>
 8004f70:	4b2c      	ldr	r3, [pc, #176]	; (8005024 <_puts_r+0xd0>)
 8004f72:	429c      	cmp	r4, r3
 8004f74:	d120      	bne.n	8004fb8 <_puts_r+0x64>
 8004f76:	686c      	ldr	r4, [r5, #4]
 8004f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f7a:	07db      	lsls	r3, r3, #31
 8004f7c:	d405      	bmi.n	8004f8a <_puts_r+0x36>
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	0598      	lsls	r0, r3, #22
 8004f82:	d402      	bmi.n	8004f8a <_puts_r+0x36>
 8004f84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f86:	f001 f952 	bl	800622e <__retarget_lock_acquire_recursive>
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	0719      	lsls	r1, r3, #28
 8004f8e:	d51d      	bpl.n	8004fcc <_puts_r+0x78>
 8004f90:	6923      	ldr	r3, [r4, #16]
 8004f92:	b1db      	cbz	r3, 8004fcc <_puts_r+0x78>
 8004f94:	3e01      	subs	r6, #1
 8004f96:	68a3      	ldr	r3, [r4, #8]
 8004f98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	60a3      	str	r3, [r4, #8]
 8004fa0:	bb39      	cbnz	r1, 8004ff2 <_puts_r+0x9e>
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	da38      	bge.n	8005018 <_puts_r+0xc4>
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	210a      	movs	r1, #10
 8004faa:	4628      	mov	r0, r5
 8004fac:	f000 f848 	bl	8005040 <__swbuf_r>
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d011      	beq.n	8004fd8 <_puts_r+0x84>
 8004fb4:	250a      	movs	r5, #10
 8004fb6:	e011      	b.n	8004fdc <_puts_r+0x88>
 8004fb8:	4b1b      	ldr	r3, [pc, #108]	; (8005028 <_puts_r+0xd4>)
 8004fba:	429c      	cmp	r4, r3
 8004fbc:	d101      	bne.n	8004fc2 <_puts_r+0x6e>
 8004fbe:	68ac      	ldr	r4, [r5, #8]
 8004fc0:	e7da      	b.n	8004f78 <_puts_r+0x24>
 8004fc2:	4b1a      	ldr	r3, [pc, #104]	; (800502c <_puts_r+0xd8>)
 8004fc4:	429c      	cmp	r4, r3
 8004fc6:	bf08      	it	eq
 8004fc8:	68ec      	ldreq	r4, [r5, #12]
 8004fca:	e7d5      	b.n	8004f78 <_puts_r+0x24>
 8004fcc:	4621      	mov	r1, r4
 8004fce:	4628      	mov	r0, r5
 8004fd0:	f000 f888 	bl	80050e4 <__swsetup_r>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d0dd      	beq.n	8004f94 <_puts_r+0x40>
 8004fd8:	f04f 35ff 	mov.w	r5, #4294967295
 8004fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004fde:	07da      	lsls	r2, r3, #31
 8004fe0:	d405      	bmi.n	8004fee <_puts_r+0x9a>
 8004fe2:	89a3      	ldrh	r3, [r4, #12]
 8004fe4:	059b      	lsls	r3, r3, #22
 8004fe6:	d402      	bmi.n	8004fee <_puts_r+0x9a>
 8004fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004fea:	f001 f921 	bl	8006230 <__retarget_lock_release_recursive>
 8004fee:	4628      	mov	r0, r5
 8004ff0:	bd70      	pop	{r4, r5, r6, pc}
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	da04      	bge.n	8005000 <_puts_r+0xac>
 8004ff6:	69a2      	ldr	r2, [r4, #24]
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	dc06      	bgt.n	800500a <_puts_r+0xb6>
 8004ffc:	290a      	cmp	r1, #10
 8004ffe:	d004      	beq.n	800500a <_puts_r+0xb6>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	6022      	str	r2, [r4, #0]
 8005006:	7019      	strb	r1, [r3, #0]
 8005008:	e7c5      	b.n	8004f96 <_puts_r+0x42>
 800500a:	4622      	mov	r2, r4
 800500c:	4628      	mov	r0, r5
 800500e:	f000 f817 	bl	8005040 <__swbuf_r>
 8005012:	3001      	adds	r0, #1
 8005014:	d1bf      	bne.n	8004f96 <_puts_r+0x42>
 8005016:	e7df      	b.n	8004fd8 <_puts_r+0x84>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	250a      	movs	r5, #10
 800501c:	1c5a      	adds	r2, r3, #1
 800501e:	6022      	str	r2, [r4, #0]
 8005020:	701d      	strb	r5, [r3, #0]
 8005022:	e7db      	b.n	8004fdc <_puts_r+0x88>
 8005024:	0800ba7c 	.word	0x0800ba7c
 8005028:	0800ba9c 	.word	0x0800ba9c
 800502c:	0800ba5c 	.word	0x0800ba5c

08005030 <puts>:
 8005030:	4b02      	ldr	r3, [pc, #8]	; (800503c <puts+0xc>)
 8005032:	4601      	mov	r1, r0
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	f7ff bf8d 	b.w	8004f54 <_puts_r>
 800503a:	bf00      	nop
 800503c:	20000010 	.word	0x20000010

08005040 <__swbuf_r>:
 8005040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005042:	460e      	mov	r6, r1
 8005044:	4614      	mov	r4, r2
 8005046:	4605      	mov	r5, r0
 8005048:	b118      	cbz	r0, 8005052 <__swbuf_r+0x12>
 800504a:	6983      	ldr	r3, [r0, #24]
 800504c:	b90b      	cbnz	r3, 8005052 <__swbuf_r+0x12>
 800504e:	f001 f84b 	bl	80060e8 <__sinit>
 8005052:	4b21      	ldr	r3, [pc, #132]	; (80050d8 <__swbuf_r+0x98>)
 8005054:	429c      	cmp	r4, r3
 8005056:	d12b      	bne.n	80050b0 <__swbuf_r+0x70>
 8005058:	686c      	ldr	r4, [r5, #4]
 800505a:	69a3      	ldr	r3, [r4, #24]
 800505c:	60a3      	str	r3, [r4, #8]
 800505e:	89a3      	ldrh	r3, [r4, #12]
 8005060:	071a      	lsls	r2, r3, #28
 8005062:	d52f      	bpl.n	80050c4 <__swbuf_r+0x84>
 8005064:	6923      	ldr	r3, [r4, #16]
 8005066:	b36b      	cbz	r3, 80050c4 <__swbuf_r+0x84>
 8005068:	6923      	ldr	r3, [r4, #16]
 800506a:	6820      	ldr	r0, [r4, #0]
 800506c:	1ac0      	subs	r0, r0, r3
 800506e:	6963      	ldr	r3, [r4, #20]
 8005070:	b2f6      	uxtb	r6, r6
 8005072:	4283      	cmp	r3, r0
 8005074:	4637      	mov	r7, r6
 8005076:	dc04      	bgt.n	8005082 <__swbuf_r+0x42>
 8005078:	4621      	mov	r1, r4
 800507a:	4628      	mov	r0, r5
 800507c:	f000 ffa0 	bl	8005fc0 <_fflush_r>
 8005080:	bb30      	cbnz	r0, 80050d0 <__swbuf_r+0x90>
 8005082:	68a3      	ldr	r3, [r4, #8]
 8005084:	3b01      	subs	r3, #1
 8005086:	60a3      	str	r3, [r4, #8]
 8005088:	6823      	ldr	r3, [r4, #0]
 800508a:	1c5a      	adds	r2, r3, #1
 800508c:	6022      	str	r2, [r4, #0]
 800508e:	701e      	strb	r6, [r3, #0]
 8005090:	6963      	ldr	r3, [r4, #20]
 8005092:	3001      	adds	r0, #1
 8005094:	4283      	cmp	r3, r0
 8005096:	d004      	beq.n	80050a2 <__swbuf_r+0x62>
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	07db      	lsls	r3, r3, #31
 800509c:	d506      	bpl.n	80050ac <__swbuf_r+0x6c>
 800509e:	2e0a      	cmp	r6, #10
 80050a0:	d104      	bne.n	80050ac <__swbuf_r+0x6c>
 80050a2:	4621      	mov	r1, r4
 80050a4:	4628      	mov	r0, r5
 80050a6:	f000 ff8b 	bl	8005fc0 <_fflush_r>
 80050aa:	b988      	cbnz	r0, 80050d0 <__swbuf_r+0x90>
 80050ac:	4638      	mov	r0, r7
 80050ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b0:	4b0a      	ldr	r3, [pc, #40]	; (80050dc <__swbuf_r+0x9c>)
 80050b2:	429c      	cmp	r4, r3
 80050b4:	d101      	bne.n	80050ba <__swbuf_r+0x7a>
 80050b6:	68ac      	ldr	r4, [r5, #8]
 80050b8:	e7cf      	b.n	800505a <__swbuf_r+0x1a>
 80050ba:	4b09      	ldr	r3, [pc, #36]	; (80050e0 <__swbuf_r+0xa0>)
 80050bc:	429c      	cmp	r4, r3
 80050be:	bf08      	it	eq
 80050c0:	68ec      	ldreq	r4, [r5, #12]
 80050c2:	e7ca      	b.n	800505a <__swbuf_r+0x1a>
 80050c4:	4621      	mov	r1, r4
 80050c6:	4628      	mov	r0, r5
 80050c8:	f000 f80c 	bl	80050e4 <__swsetup_r>
 80050cc:	2800      	cmp	r0, #0
 80050ce:	d0cb      	beq.n	8005068 <__swbuf_r+0x28>
 80050d0:	f04f 37ff 	mov.w	r7, #4294967295
 80050d4:	e7ea      	b.n	80050ac <__swbuf_r+0x6c>
 80050d6:	bf00      	nop
 80050d8:	0800ba7c 	.word	0x0800ba7c
 80050dc:	0800ba9c 	.word	0x0800ba9c
 80050e0:	0800ba5c 	.word	0x0800ba5c

080050e4 <__swsetup_r>:
 80050e4:	4b32      	ldr	r3, [pc, #200]	; (80051b0 <__swsetup_r+0xcc>)
 80050e6:	b570      	push	{r4, r5, r6, lr}
 80050e8:	681d      	ldr	r5, [r3, #0]
 80050ea:	4606      	mov	r6, r0
 80050ec:	460c      	mov	r4, r1
 80050ee:	b125      	cbz	r5, 80050fa <__swsetup_r+0x16>
 80050f0:	69ab      	ldr	r3, [r5, #24]
 80050f2:	b913      	cbnz	r3, 80050fa <__swsetup_r+0x16>
 80050f4:	4628      	mov	r0, r5
 80050f6:	f000 fff7 	bl	80060e8 <__sinit>
 80050fa:	4b2e      	ldr	r3, [pc, #184]	; (80051b4 <__swsetup_r+0xd0>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d10f      	bne.n	8005120 <__swsetup_r+0x3c>
 8005100:	686c      	ldr	r4, [r5, #4]
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005108:	0719      	lsls	r1, r3, #28
 800510a:	d42c      	bmi.n	8005166 <__swsetup_r+0x82>
 800510c:	06dd      	lsls	r5, r3, #27
 800510e:	d411      	bmi.n	8005134 <__swsetup_r+0x50>
 8005110:	2309      	movs	r3, #9
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005118:	81a3      	strh	r3, [r4, #12]
 800511a:	f04f 30ff 	mov.w	r0, #4294967295
 800511e:	e03e      	b.n	800519e <__swsetup_r+0xba>
 8005120:	4b25      	ldr	r3, [pc, #148]	; (80051b8 <__swsetup_r+0xd4>)
 8005122:	429c      	cmp	r4, r3
 8005124:	d101      	bne.n	800512a <__swsetup_r+0x46>
 8005126:	68ac      	ldr	r4, [r5, #8]
 8005128:	e7eb      	b.n	8005102 <__swsetup_r+0x1e>
 800512a:	4b24      	ldr	r3, [pc, #144]	; (80051bc <__swsetup_r+0xd8>)
 800512c:	429c      	cmp	r4, r3
 800512e:	bf08      	it	eq
 8005130:	68ec      	ldreq	r4, [r5, #12]
 8005132:	e7e6      	b.n	8005102 <__swsetup_r+0x1e>
 8005134:	0758      	lsls	r0, r3, #29
 8005136:	d512      	bpl.n	800515e <__swsetup_r+0x7a>
 8005138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800513a:	b141      	cbz	r1, 800514e <__swsetup_r+0x6a>
 800513c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005140:	4299      	cmp	r1, r3
 8005142:	d002      	beq.n	800514a <__swsetup_r+0x66>
 8005144:	4630      	mov	r0, r6
 8005146:	f001 fc89 	bl	8006a5c <_free_r>
 800514a:	2300      	movs	r3, #0
 800514c:	6363      	str	r3, [r4, #52]	; 0x34
 800514e:	89a3      	ldrh	r3, [r4, #12]
 8005150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005154:	81a3      	strh	r3, [r4, #12]
 8005156:	2300      	movs	r3, #0
 8005158:	6063      	str	r3, [r4, #4]
 800515a:	6923      	ldr	r3, [r4, #16]
 800515c:	6023      	str	r3, [r4, #0]
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	f043 0308 	orr.w	r3, r3, #8
 8005164:	81a3      	strh	r3, [r4, #12]
 8005166:	6923      	ldr	r3, [r4, #16]
 8005168:	b94b      	cbnz	r3, 800517e <__swsetup_r+0x9a>
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005174:	d003      	beq.n	800517e <__swsetup_r+0x9a>
 8005176:	4621      	mov	r1, r4
 8005178:	4630      	mov	r0, r6
 800517a:	f001 f87f 	bl	800627c <__smakebuf_r>
 800517e:	89a0      	ldrh	r0, [r4, #12]
 8005180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005184:	f010 0301 	ands.w	r3, r0, #1
 8005188:	d00a      	beq.n	80051a0 <__swsetup_r+0xbc>
 800518a:	2300      	movs	r3, #0
 800518c:	60a3      	str	r3, [r4, #8]
 800518e:	6963      	ldr	r3, [r4, #20]
 8005190:	425b      	negs	r3, r3
 8005192:	61a3      	str	r3, [r4, #24]
 8005194:	6923      	ldr	r3, [r4, #16]
 8005196:	b943      	cbnz	r3, 80051aa <__swsetup_r+0xc6>
 8005198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800519c:	d1ba      	bne.n	8005114 <__swsetup_r+0x30>
 800519e:	bd70      	pop	{r4, r5, r6, pc}
 80051a0:	0781      	lsls	r1, r0, #30
 80051a2:	bf58      	it	pl
 80051a4:	6963      	ldrpl	r3, [r4, #20]
 80051a6:	60a3      	str	r3, [r4, #8]
 80051a8:	e7f4      	b.n	8005194 <__swsetup_r+0xb0>
 80051aa:	2000      	movs	r0, #0
 80051ac:	e7f7      	b.n	800519e <__swsetup_r+0xba>
 80051ae:	bf00      	nop
 80051b0:	20000010 	.word	0x20000010
 80051b4:	0800ba7c 	.word	0x0800ba7c
 80051b8:	0800ba9c 	.word	0x0800ba9c
 80051bc:	0800ba5c 	.word	0x0800ba5c

080051c0 <quorem>:
 80051c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c4:	6903      	ldr	r3, [r0, #16]
 80051c6:	690c      	ldr	r4, [r1, #16]
 80051c8:	42a3      	cmp	r3, r4
 80051ca:	4607      	mov	r7, r0
 80051cc:	f2c0 8081 	blt.w	80052d2 <quorem+0x112>
 80051d0:	3c01      	subs	r4, #1
 80051d2:	f101 0814 	add.w	r8, r1, #20
 80051d6:	f100 0514 	add.w	r5, r0, #20
 80051da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80051e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80051e8:	3301      	adds	r3, #1
 80051ea:	429a      	cmp	r2, r3
 80051ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80051f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80051f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80051f8:	d331      	bcc.n	800525e <quorem+0x9e>
 80051fa:	f04f 0e00 	mov.w	lr, #0
 80051fe:	4640      	mov	r0, r8
 8005200:	46ac      	mov	ip, r5
 8005202:	46f2      	mov	sl, lr
 8005204:	f850 2b04 	ldr.w	r2, [r0], #4
 8005208:	b293      	uxth	r3, r2
 800520a:	fb06 e303 	mla	r3, r6, r3, lr
 800520e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005212:	b29b      	uxth	r3, r3
 8005214:	ebaa 0303 	sub.w	r3, sl, r3
 8005218:	f8dc a000 	ldr.w	sl, [ip]
 800521c:	0c12      	lsrs	r2, r2, #16
 800521e:	fa13 f38a 	uxtah	r3, r3, sl
 8005222:	fb06 e202 	mla	r2, r6, r2, lr
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	9b00      	ldr	r3, [sp, #0]
 800522a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800522e:	b292      	uxth	r2, r2
 8005230:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005238:	f8bd 3000 	ldrh.w	r3, [sp]
 800523c:	4581      	cmp	r9, r0
 800523e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005242:	f84c 3b04 	str.w	r3, [ip], #4
 8005246:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800524a:	d2db      	bcs.n	8005204 <quorem+0x44>
 800524c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005250:	b92b      	cbnz	r3, 800525e <quorem+0x9e>
 8005252:	9b01      	ldr	r3, [sp, #4]
 8005254:	3b04      	subs	r3, #4
 8005256:	429d      	cmp	r5, r3
 8005258:	461a      	mov	r2, r3
 800525a:	d32e      	bcc.n	80052ba <quorem+0xfa>
 800525c:	613c      	str	r4, [r7, #16]
 800525e:	4638      	mov	r0, r7
 8005260:	f001 fae4 	bl	800682c <__mcmp>
 8005264:	2800      	cmp	r0, #0
 8005266:	db24      	blt.n	80052b2 <quorem+0xf2>
 8005268:	3601      	adds	r6, #1
 800526a:	4628      	mov	r0, r5
 800526c:	f04f 0c00 	mov.w	ip, #0
 8005270:	f858 2b04 	ldr.w	r2, [r8], #4
 8005274:	f8d0 e000 	ldr.w	lr, [r0]
 8005278:	b293      	uxth	r3, r2
 800527a:	ebac 0303 	sub.w	r3, ip, r3
 800527e:	0c12      	lsrs	r2, r2, #16
 8005280:	fa13 f38e 	uxtah	r3, r3, lr
 8005284:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005288:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800528c:	b29b      	uxth	r3, r3
 800528e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005292:	45c1      	cmp	r9, r8
 8005294:	f840 3b04 	str.w	r3, [r0], #4
 8005298:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800529c:	d2e8      	bcs.n	8005270 <quorem+0xb0>
 800529e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052a6:	b922      	cbnz	r2, 80052b2 <quorem+0xf2>
 80052a8:	3b04      	subs	r3, #4
 80052aa:	429d      	cmp	r5, r3
 80052ac:	461a      	mov	r2, r3
 80052ae:	d30a      	bcc.n	80052c6 <quorem+0x106>
 80052b0:	613c      	str	r4, [r7, #16]
 80052b2:	4630      	mov	r0, r6
 80052b4:	b003      	add	sp, #12
 80052b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	3b04      	subs	r3, #4
 80052be:	2a00      	cmp	r2, #0
 80052c0:	d1cc      	bne.n	800525c <quorem+0x9c>
 80052c2:	3c01      	subs	r4, #1
 80052c4:	e7c7      	b.n	8005256 <quorem+0x96>
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	3b04      	subs	r3, #4
 80052ca:	2a00      	cmp	r2, #0
 80052cc:	d1f0      	bne.n	80052b0 <quorem+0xf0>
 80052ce:	3c01      	subs	r4, #1
 80052d0:	e7eb      	b.n	80052aa <quorem+0xea>
 80052d2:	2000      	movs	r0, #0
 80052d4:	e7ee      	b.n	80052b4 <quorem+0xf4>
	...

080052d8 <_dtoa_r>:
 80052d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052dc:	ed2d 8b04 	vpush	{d8-d9}
 80052e0:	ec57 6b10 	vmov	r6, r7, d0
 80052e4:	b093      	sub	sp, #76	; 0x4c
 80052e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80052e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80052ec:	9106      	str	r1, [sp, #24]
 80052ee:	ee10 aa10 	vmov	sl, s0
 80052f2:	4604      	mov	r4, r0
 80052f4:	9209      	str	r2, [sp, #36]	; 0x24
 80052f6:	930c      	str	r3, [sp, #48]	; 0x30
 80052f8:	46bb      	mov	fp, r7
 80052fa:	b975      	cbnz	r5, 800531a <_dtoa_r+0x42>
 80052fc:	2010      	movs	r0, #16
 80052fe:	f000 fffd 	bl	80062fc <malloc>
 8005302:	4602      	mov	r2, r0
 8005304:	6260      	str	r0, [r4, #36]	; 0x24
 8005306:	b920      	cbnz	r0, 8005312 <_dtoa_r+0x3a>
 8005308:	4ba7      	ldr	r3, [pc, #668]	; (80055a8 <_dtoa_r+0x2d0>)
 800530a:	21ea      	movs	r1, #234	; 0xea
 800530c:	48a7      	ldr	r0, [pc, #668]	; (80055ac <_dtoa_r+0x2d4>)
 800530e:	f001 fe45 	bl	8006f9c <__assert_func>
 8005312:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005316:	6005      	str	r5, [r0, #0]
 8005318:	60c5      	str	r5, [r0, #12]
 800531a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	b151      	cbz	r1, 8005336 <_dtoa_r+0x5e>
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	604a      	str	r2, [r1, #4]
 8005324:	2301      	movs	r3, #1
 8005326:	4093      	lsls	r3, r2
 8005328:	608b      	str	r3, [r1, #8]
 800532a:	4620      	mov	r0, r4
 800532c:	f001 f83c 	bl	80063a8 <_Bfree>
 8005330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]
 8005336:	1e3b      	subs	r3, r7, #0
 8005338:	bfaa      	itet	ge
 800533a:	2300      	movge	r3, #0
 800533c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005340:	f8c8 3000 	strge.w	r3, [r8]
 8005344:	4b9a      	ldr	r3, [pc, #616]	; (80055b0 <_dtoa_r+0x2d8>)
 8005346:	bfbc      	itt	lt
 8005348:	2201      	movlt	r2, #1
 800534a:	f8c8 2000 	strlt.w	r2, [r8]
 800534e:	ea33 030b 	bics.w	r3, r3, fp
 8005352:	d11b      	bne.n	800538c <_dtoa_r+0xb4>
 8005354:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005356:	f242 730f 	movw	r3, #9999	; 0x270f
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005360:	4333      	orrs	r3, r6
 8005362:	f000 8592 	beq.w	8005e8a <_dtoa_r+0xbb2>
 8005366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005368:	b963      	cbnz	r3, 8005384 <_dtoa_r+0xac>
 800536a:	4b92      	ldr	r3, [pc, #584]	; (80055b4 <_dtoa_r+0x2dc>)
 800536c:	e022      	b.n	80053b4 <_dtoa_r+0xdc>
 800536e:	4b92      	ldr	r3, [pc, #584]	; (80055b8 <_dtoa_r+0x2e0>)
 8005370:	9301      	str	r3, [sp, #4]
 8005372:	3308      	adds	r3, #8
 8005374:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005376:	6013      	str	r3, [r2, #0]
 8005378:	9801      	ldr	r0, [sp, #4]
 800537a:	b013      	add	sp, #76	; 0x4c
 800537c:	ecbd 8b04 	vpop	{d8-d9}
 8005380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005384:	4b8b      	ldr	r3, [pc, #556]	; (80055b4 <_dtoa_r+0x2dc>)
 8005386:	9301      	str	r3, [sp, #4]
 8005388:	3303      	adds	r3, #3
 800538a:	e7f3      	b.n	8005374 <_dtoa_r+0x9c>
 800538c:	2200      	movs	r2, #0
 800538e:	2300      	movs	r3, #0
 8005390:	4650      	mov	r0, sl
 8005392:	4659      	mov	r1, fp
 8005394:	f7fb fc18 	bl	8000bc8 <__aeabi_dcmpeq>
 8005398:	ec4b ab19 	vmov	d9, sl, fp
 800539c:	4680      	mov	r8, r0
 800539e:	b158      	cbz	r0, 80053b8 <_dtoa_r+0xe0>
 80053a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053a2:	2301      	movs	r3, #1
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 856b 	beq.w	8005e84 <_dtoa_r+0xbac>
 80053ae:	4883      	ldr	r0, [pc, #524]	; (80055bc <_dtoa_r+0x2e4>)
 80053b0:	6018      	str	r0, [r3, #0]
 80053b2:	1e43      	subs	r3, r0, #1
 80053b4:	9301      	str	r3, [sp, #4]
 80053b6:	e7df      	b.n	8005378 <_dtoa_r+0xa0>
 80053b8:	ec4b ab10 	vmov	d0, sl, fp
 80053bc:	aa10      	add	r2, sp, #64	; 0x40
 80053be:	a911      	add	r1, sp, #68	; 0x44
 80053c0:	4620      	mov	r0, r4
 80053c2:	f001 fad9 	bl	8006978 <__d2b>
 80053c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80053ca:	ee08 0a10 	vmov	s16, r0
 80053ce:	2d00      	cmp	r5, #0
 80053d0:	f000 8084 	beq.w	80054dc <_dtoa_r+0x204>
 80053d4:	ee19 3a90 	vmov	r3, s19
 80053d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80053e0:	4656      	mov	r6, sl
 80053e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80053e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80053ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80053ee:	4b74      	ldr	r3, [pc, #464]	; (80055c0 <_dtoa_r+0x2e8>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	4630      	mov	r0, r6
 80053f4:	4639      	mov	r1, r7
 80053f6:	f7fa ffc7 	bl	8000388 <__aeabi_dsub>
 80053fa:	a365      	add	r3, pc, #404	; (adr r3, 8005590 <_dtoa_r+0x2b8>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fb f97a 	bl	80006f8 <__aeabi_dmul>
 8005404:	a364      	add	r3, pc, #400	; (adr r3, 8005598 <_dtoa_r+0x2c0>)
 8005406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540a:	f7fa ffbf 	bl	800038c <__adddf3>
 800540e:	4606      	mov	r6, r0
 8005410:	4628      	mov	r0, r5
 8005412:	460f      	mov	r7, r1
 8005414:	f7fb f906 	bl	8000624 <__aeabi_i2d>
 8005418:	a361      	add	r3, pc, #388	; (adr r3, 80055a0 <_dtoa_r+0x2c8>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fb f96b 	bl	80006f8 <__aeabi_dmul>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4630      	mov	r0, r6
 8005428:	4639      	mov	r1, r7
 800542a:	f7fa ffaf 	bl	800038c <__adddf3>
 800542e:	4606      	mov	r6, r0
 8005430:	460f      	mov	r7, r1
 8005432:	f7fb fc11 	bl	8000c58 <__aeabi_d2iz>
 8005436:	2200      	movs	r2, #0
 8005438:	9000      	str	r0, [sp, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	4630      	mov	r0, r6
 800543e:	4639      	mov	r1, r7
 8005440:	f7fb fbcc 	bl	8000bdc <__aeabi_dcmplt>
 8005444:	b150      	cbz	r0, 800545c <_dtoa_r+0x184>
 8005446:	9800      	ldr	r0, [sp, #0]
 8005448:	f7fb f8ec 	bl	8000624 <__aeabi_i2d>
 800544c:	4632      	mov	r2, r6
 800544e:	463b      	mov	r3, r7
 8005450:	f7fb fbba 	bl	8000bc8 <__aeabi_dcmpeq>
 8005454:	b910      	cbnz	r0, 800545c <_dtoa_r+0x184>
 8005456:	9b00      	ldr	r3, [sp, #0]
 8005458:	3b01      	subs	r3, #1
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	9b00      	ldr	r3, [sp, #0]
 800545e:	2b16      	cmp	r3, #22
 8005460:	d85a      	bhi.n	8005518 <_dtoa_r+0x240>
 8005462:	9a00      	ldr	r2, [sp, #0]
 8005464:	4b57      	ldr	r3, [pc, #348]	; (80055c4 <_dtoa_r+0x2ec>)
 8005466:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800546a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546e:	ec51 0b19 	vmov	r0, r1, d9
 8005472:	f7fb fbb3 	bl	8000bdc <__aeabi_dcmplt>
 8005476:	2800      	cmp	r0, #0
 8005478:	d050      	beq.n	800551c <_dtoa_r+0x244>
 800547a:	9b00      	ldr	r3, [sp, #0]
 800547c:	3b01      	subs	r3, #1
 800547e:	9300      	str	r3, [sp, #0]
 8005480:	2300      	movs	r3, #0
 8005482:	930b      	str	r3, [sp, #44]	; 0x2c
 8005484:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005486:	1b5d      	subs	r5, r3, r5
 8005488:	1e6b      	subs	r3, r5, #1
 800548a:	9305      	str	r3, [sp, #20]
 800548c:	bf45      	ittet	mi
 800548e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005492:	9304      	strmi	r3, [sp, #16]
 8005494:	2300      	movpl	r3, #0
 8005496:	2300      	movmi	r3, #0
 8005498:	bf4c      	ite	mi
 800549a:	9305      	strmi	r3, [sp, #20]
 800549c:	9304      	strpl	r3, [sp, #16]
 800549e:	9b00      	ldr	r3, [sp, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	db3d      	blt.n	8005520 <_dtoa_r+0x248>
 80054a4:	9b05      	ldr	r3, [sp, #20]
 80054a6:	9a00      	ldr	r2, [sp, #0]
 80054a8:	920a      	str	r2, [sp, #40]	; 0x28
 80054aa:	4413      	add	r3, r2
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	2300      	movs	r3, #0
 80054b0:	9307      	str	r3, [sp, #28]
 80054b2:	9b06      	ldr	r3, [sp, #24]
 80054b4:	2b09      	cmp	r3, #9
 80054b6:	f200 8089 	bhi.w	80055cc <_dtoa_r+0x2f4>
 80054ba:	2b05      	cmp	r3, #5
 80054bc:	bfc4      	itt	gt
 80054be:	3b04      	subgt	r3, #4
 80054c0:	9306      	strgt	r3, [sp, #24]
 80054c2:	9b06      	ldr	r3, [sp, #24]
 80054c4:	f1a3 0302 	sub.w	r3, r3, #2
 80054c8:	bfcc      	ite	gt
 80054ca:	2500      	movgt	r5, #0
 80054cc:	2501      	movle	r5, #1
 80054ce:	2b03      	cmp	r3, #3
 80054d0:	f200 8087 	bhi.w	80055e2 <_dtoa_r+0x30a>
 80054d4:	e8df f003 	tbb	[pc, r3]
 80054d8:	59383a2d 	.word	0x59383a2d
 80054dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80054e0:	441d      	add	r5, r3
 80054e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80054e6:	2b20      	cmp	r3, #32
 80054e8:	bfc1      	itttt	gt
 80054ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80054ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80054f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80054f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80054fa:	bfda      	itte	le
 80054fc:	f1c3 0320 	rsble	r3, r3, #32
 8005500:	fa06 f003 	lslle.w	r0, r6, r3
 8005504:	4318      	orrgt	r0, r3
 8005506:	f7fb f87d 	bl	8000604 <__aeabi_ui2d>
 800550a:	2301      	movs	r3, #1
 800550c:	4606      	mov	r6, r0
 800550e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005512:	3d01      	subs	r5, #1
 8005514:	930e      	str	r3, [sp, #56]	; 0x38
 8005516:	e76a      	b.n	80053ee <_dtoa_r+0x116>
 8005518:	2301      	movs	r3, #1
 800551a:	e7b2      	b.n	8005482 <_dtoa_r+0x1aa>
 800551c:	900b      	str	r0, [sp, #44]	; 0x2c
 800551e:	e7b1      	b.n	8005484 <_dtoa_r+0x1ac>
 8005520:	9b04      	ldr	r3, [sp, #16]
 8005522:	9a00      	ldr	r2, [sp, #0]
 8005524:	1a9b      	subs	r3, r3, r2
 8005526:	9304      	str	r3, [sp, #16]
 8005528:	4253      	negs	r3, r2
 800552a:	9307      	str	r3, [sp, #28]
 800552c:	2300      	movs	r3, #0
 800552e:	930a      	str	r3, [sp, #40]	; 0x28
 8005530:	e7bf      	b.n	80054b2 <_dtoa_r+0x1da>
 8005532:	2300      	movs	r3, #0
 8005534:	9308      	str	r3, [sp, #32]
 8005536:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005538:	2b00      	cmp	r3, #0
 800553a:	dc55      	bgt.n	80055e8 <_dtoa_r+0x310>
 800553c:	2301      	movs	r3, #1
 800553e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005542:	461a      	mov	r2, r3
 8005544:	9209      	str	r2, [sp, #36]	; 0x24
 8005546:	e00c      	b.n	8005562 <_dtoa_r+0x28a>
 8005548:	2301      	movs	r3, #1
 800554a:	e7f3      	b.n	8005534 <_dtoa_r+0x25c>
 800554c:	2300      	movs	r3, #0
 800554e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005550:	9308      	str	r3, [sp, #32]
 8005552:	9b00      	ldr	r3, [sp, #0]
 8005554:	4413      	add	r3, r2
 8005556:	9302      	str	r3, [sp, #8]
 8005558:	3301      	adds	r3, #1
 800555a:	2b01      	cmp	r3, #1
 800555c:	9303      	str	r3, [sp, #12]
 800555e:	bfb8      	it	lt
 8005560:	2301      	movlt	r3, #1
 8005562:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005564:	2200      	movs	r2, #0
 8005566:	6042      	str	r2, [r0, #4]
 8005568:	2204      	movs	r2, #4
 800556a:	f102 0614 	add.w	r6, r2, #20
 800556e:	429e      	cmp	r6, r3
 8005570:	6841      	ldr	r1, [r0, #4]
 8005572:	d93d      	bls.n	80055f0 <_dtoa_r+0x318>
 8005574:	4620      	mov	r0, r4
 8005576:	f000 fed7 	bl	8006328 <_Balloc>
 800557a:	9001      	str	r0, [sp, #4]
 800557c:	2800      	cmp	r0, #0
 800557e:	d13b      	bne.n	80055f8 <_dtoa_r+0x320>
 8005580:	4b11      	ldr	r3, [pc, #68]	; (80055c8 <_dtoa_r+0x2f0>)
 8005582:	4602      	mov	r2, r0
 8005584:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005588:	e6c0      	b.n	800530c <_dtoa_r+0x34>
 800558a:	2301      	movs	r3, #1
 800558c:	e7df      	b.n	800554e <_dtoa_r+0x276>
 800558e:	bf00      	nop
 8005590:	636f4361 	.word	0x636f4361
 8005594:	3fd287a7 	.word	0x3fd287a7
 8005598:	8b60c8b3 	.word	0x8b60c8b3
 800559c:	3fc68a28 	.word	0x3fc68a28
 80055a0:	509f79fb 	.word	0x509f79fb
 80055a4:	3fd34413 	.word	0x3fd34413
 80055a8:	0800b9d9 	.word	0x0800b9d9
 80055ac:	0800b9f0 	.word	0x0800b9f0
 80055b0:	7ff00000 	.word	0x7ff00000
 80055b4:	0800b9d5 	.word	0x0800b9d5
 80055b8:	0800b9cc 	.word	0x0800b9cc
 80055bc:	0800b9a9 	.word	0x0800b9a9
 80055c0:	3ff80000 	.word	0x3ff80000
 80055c4:	0800bb40 	.word	0x0800bb40
 80055c8:	0800ba4b 	.word	0x0800ba4b
 80055cc:	2501      	movs	r5, #1
 80055ce:	2300      	movs	r3, #0
 80055d0:	9306      	str	r3, [sp, #24]
 80055d2:	9508      	str	r5, [sp, #32]
 80055d4:	f04f 33ff 	mov.w	r3, #4294967295
 80055d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055dc:	2200      	movs	r2, #0
 80055de:	2312      	movs	r3, #18
 80055e0:	e7b0      	b.n	8005544 <_dtoa_r+0x26c>
 80055e2:	2301      	movs	r3, #1
 80055e4:	9308      	str	r3, [sp, #32]
 80055e6:	e7f5      	b.n	80055d4 <_dtoa_r+0x2fc>
 80055e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80055ee:	e7b8      	b.n	8005562 <_dtoa_r+0x28a>
 80055f0:	3101      	adds	r1, #1
 80055f2:	6041      	str	r1, [r0, #4]
 80055f4:	0052      	lsls	r2, r2, #1
 80055f6:	e7b8      	b.n	800556a <_dtoa_r+0x292>
 80055f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055fa:	9a01      	ldr	r2, [sp, #4]
 80055fc:	601a      	str	r2, [r3, #0]
 80055fe:	9b03      	ldr	r3, [sp, #12]
 8005600:	2b0e      	cmp	r3, #14
 8005602:	f200 809d 	bhi.w	8005740 <_dtoa_r+0x468>
 8005606:	2d00      	cmp	r5, #0
 8005608:	f000 809a 	beq.w	8005740 <_dtoa_r+0x468>
 800560c:	9b00      	ldr	r3, [sp, #0]
 800560e:	2b00      	cmp	r3, #0
 8005610:	dd32      	ble.n	8005678 <_dtoa_r+0x3a0>
 8005612:	4ab7      	ldr	r2, [pc, #732]	; (80058f0 <_dtoa_r+0x618>)
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800561c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005620:	9b00      	ldr	r3, [sp, #0]
 8005622:	05d8      	lsls	r0, r3, #23
 8005624:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005628:	d516      	bpl.n	8005658 <_dtoa_r+0x380>
 800562a:	4bb2      	ldr	r3, [pc, #712]	; (80058f4 <_dtoa_r+0x61c>)
 800562c:	ec51 0b19 	vmov	r0, r1, d9
 8005630:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005634:	f7fb f98a 	bl	800094c <__aeabi_ddiv>
 8005638:	f007 070f 	and.w	r7, r7, #15
 800563c:	4682      	mov	sl, r0
 800563e:	468b      	mov	fp, r1
 8005640:	2503      	movs	r5, #3
 8005642:	4eac      	ldr	r6, [pc, #688]	; (80058f4 <_dtoa_r+0x61c>)
 8005644:	b957      	cbnz	r7, 800565c <_dtoa_r+0x384>
 8005646:	4642      	mov	r2, r8
 8005648:	464b      	mov	r3, r9
 800564a:	4650      	mov	r0, sl
 800564c:	4659      	mov	r1, fp
 800564e:	f7fb f97d 	bl	800094c <__aeabi_ddiv>
 8005652:	4682      	mov	sl, r0
 8005654:	468b      	mov	fp, r1
 8005656:	e028      	b.n	80056aa <_dtoa_r+0x3d2>
 8005658:	2502      	movs	r5, #2
 800565a:	e7f2      	b.n	8005642 <_dtoa_r+0x36a>
 800565c:	07f9      	lsls	r1, r7, #31
 800565e:	d508      	bpl.n	8005672 <_dtoa_r+0x39a>
 8005660:	4640      	mov	r0, r8
 8005662:	4649      	mov	r1, r9
 8005664:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005668:	f7fb f846 	bl	80006f8 <__aeabi_dmul>
 800566c:	3501      	adds	r5, #1
 800566e:	4680      	mov	r8, r0
 8005670:	4689      	mov	r9, r1
 8005672:	107f      	asrs	r7, r7, #1
 8005674:	3608      	adds	r6, #8
 8005676:	e7e5      	b.n	8005644 <_dtoa_r+0x36c>
 8005678:	f000 809b 	beq.w	80057b2 <_dtoa_r+0x4da>
 800567c:	9b00      	ldr	r3, [sp, #0]
 800567e:	4f9d      	ldr	r7, [pc, #628]	; (80058f4 <_dtoa_r+0x61c>)
 8005680:	425e      	negs	r6, r3
 8005682:	4b9b      	ldr	r3, [pc, #620]	; (80058f0 <_dtoa_r+0x618>)
 8005684:	f006 020f 	and.w	r2, r6, #15
 8005688:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	ec51 0b19 	vmov	r0, r1, d9
 8005694:	f7fb f830 	bl	80006f8 <__aeabi_dmul>
 8005698:	1136      	asrs	r6, r6, #4
 800569a:	4682      	mov	sl, r0
 800569c:	468b      	mov	fp, r1
 800569e:	2300      	movs	r3, #0
 80056a0:	2502      	movs	r5, #2
 80056a2:	2e00      	cmp	r6, #0
 80056a4:	d17a      	bne.n	800579c <_dtoa_r+0x4c4>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1d3      	bne.n	8005652 <_dtoa_r+0x37a>
 80056aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 8082 	beq.w	80057b6 <_dtoa_r+0x4de>
 80056b2:	4b91      	ldr	r3, [pc, #580]	; (80058f8 <_dtoa_r+0x620>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	4650      	mov	r0, sl
 80056b8:	4659      	mov	r1, fp
 80056ba:	f7fb fa8f 	bl	8000bdc <__aeabi_dcmplt>
 80056be:	2800      	cmp	r0, #0
 80056c0:	d079      	beq.n	80057b6 <_dtoa_r+0x4de>
 80056c2:	9b03      	ldr	r3, [sp, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d076      	beq.n	80057b6 <_dtoa_r+0x4de>
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	dd36      	ble.n	800573c <_dtoa_r+0x464>
 80056ce:	9b00      	ldr	r3, [sp, #0]
 80056d0:	4650      	mov	r0, sl
 80056d2:	4659      	mov	r1, fp
 80056d4:	1e5f      	subs	r7, r3, #1
 80056d6:	2200      	movs	r2, #0
 80056d8:	4b88      	ldr	r3, [pc, #544]	; (80058fc <_dtoa_r+0x624>)
 80056da:	f7fb f80d 	bl	80006f8 <__aeabi_dmul>
 80056de:	9e02      	ldr	r6, [sp, #8]
 80056e0:	4682      	mov	sl, r0
 80056e2:	468b      	mov	fp, r1
 80056e4:	3501      	adds	r5, #1
 80056e6:	4628      	mov	r0, r5
 80056e8:	f7fa ff9c 	bl	8000624 <__aeabi_i2d>
 80056ec:	4652      	mov	r2, sl
 80056ee:	465b      	mov	r3, fp
 80056f0:	f7fb f802 	bl	80006f8 <__aeabi_dmul>
 80056f4:	4b82      	ldr	r3, [pc, #520]	; (8005900 <_dtoa_r+0x628>)
 80056f6:	2200      	movs	r2, #0
 80056f8:	f7fa fe48 	bl	800038c <__adddf3>
 80056fc:	46d0      	mov	r8, sl
 80056fe:	46d9      	mov	r9, fp
 8005700:	4682      	mov	sl, r0
 8005702:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005706:	2e00      	cmp	r6, #0
 8005708:	d158      	bne.n	80057bc <_dtoa_r+0x4e4>
 800570a:	4b7e      	ldr	r3, [pc, #504]	; (8005904 <_dtoa_r+0x62c>)
 800570c:	2200      	movs	r2, #0
 800570e:	4640      	mov	r0, r8
 8005710:	4649      	mov	r1, r9
 8005712:	f7fa fe39 	bl	8000388 <__aeabi_dsub>
 8005716:	4652      	mov	r2, sl
 8005718:	465b      	mov	r3, fp
 800571a:	4680      	mov	r8, r0
 800571c:	4689      	mov	r9, r1
 800571e:	f7fb fa7b 	bl	8000c18 <__aeabi_dcmpgt>
 8005722:	2800      	cmp	r0, #0
 8005724:	f040 8295 	bne.w	8005c52 <_dtoa_r+0x97a>
 8005728:	4652      	mov	r2, sl
 800572a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800572e:	4640      	mov	r0, r8
 8005730:	4649      	mov	r1, r9
 8005732:	f7fb fa53 	bl	8000bdc <__aeabi_dcmplt>
 8005736:	2800      	cmp	r0, #0
 8005738:	f040 8289 	bne.w	8005c4e <_dtoa_r+0x976>
 800573c:	ec5b ab19 	vmov	sl, fp, d9
 8005740:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005742:	2b00      	cmp	r3, #0
 8005744:	f2c0 8148 	blt.w	80059d8 <_dtoa_r+0x700>
 8005748:	9a00      	ldr	r2, [sp, #0]
 800574a:	2a0e      	cmp	r2, #14
 800574c:	f300 8144 	bgt.w	80059d8 <_dtoa_r+0x700>
 8005750:	4b67      	ldr	r3, [pc, #412]	; (80058f0 <_dtoa_r+0x618>)
 8005752:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005756:	e9d3 8900 	ldrd	r8, r9, [r3]
 800575a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800575c:	2b00      	cmp	r3, #0
 800575e:	f280 80d5 	bge.w	800590c <_dtoa_r+0x634>
 8005762:	9b03      	ldr	r3, [sp, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f300 80d1 	bgt.w	800590c <_dtoa_r+0x634>
 800576a:	f040 826f 	bne.w	8005c4c <_dtoa_r+0x974>
 800576e:	4b65      	ldr	r3, [pc, #404]	; (8005904 <_dtoa_r+0x62c>)
 8005770:	2200      	movs	r2, #0
 8005772:	4640      	mov	r0, r8
 8005774:	4649      	mov	r1, r9
 8005776:	f7fa ffbf 	bl	80006f8 <__aeabi_dmul>
 800577a:	4652      	mov	r2, sl
 800577c:	465b      	mov	r3, fp
 800577e:	f7fb fa41 	bl	8000c04 <__aeabi_dcmpge>
 8005782:	9e03      	ldr	r6, [sp, #12]
 8005784:	4637      	mov	r7, r6
 8005786:	2800      	cmp	r0, #0
 8005788:	f040 8245 	bne.w	8005c16 <_dtoa_r+0x93e>
 800578c:	9d01      	ldr	r5, [sp, #4]
 800578e:	2331      	movs	r3, #49	; 0x31
 8005790:	f805 3b01 	strb.w	r3, [r5], #1
 8005794:	9b00      	ldr	r3, [sp, #0]
 8005796:	3301      	adds	r3, #1
 8005798:	9300      	str	r3, [sp, #0]
 800579a:	e240      	b.n	8005c1e <_dtoa_r+0x946>
 800579c:	07f2      	lsls	r2, r6, #31
 800579e:	d505      	bpl.n	80057ac <_dtoa_r+0x4d4>
 80057a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057a4:	f7fa ffa8 	bl	80006f8 <__aeabi_dmul>
 80057a8:	3501      	adds	r5, #1
 80057aa:	2301      	movs	r3, #1
 80057ac:	1076      	asrs	r6, r6, #1
 80057ae:	3708      	adds	r7, #8
 80057b0:	e777      	b.n	80056a2 <_dtoa_r+0x3ca>
 80057b2:	2502      	movs	r5, #2
 80057b4:	e779      	b.n	80056aa <_dtoa_r+0x3d2>
 80057b6:	9f00      	ldr	r7, [sp, #0]
 80057b8:	9e03      	ldr	r6, [sp, #12]
 80057ba:	e794      	b.n	80056e6 <_dtoa_r+0x40e>
 80057bc:	9901      	ldr	r1, [sp, #4]
 80057be:	4b4c      	ldr	r3, [pc, #304]	; (80058f0 <_dtoa_r+0x618>)
 80057c0:	4431      	add	r1, r6
 80057c2:	910d      	str	r1, [sp, #52]	; 0x34
 80057c4:	9908      	ldr	r1, [sp, #32]
 80057c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80057ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80057ce:	2900      	cmp	r1, #0
 80057d0:	d043      	beq.n	800585a <_dtoa_r+0x582>
 80057d2:	494d      	ldr	r1, [pc, #308]	; (8005908 <_dtoa_r+0x630>)
 80057d4:	2000      	movs	r0, #0
 80057d6:	f7fb f8b9 	bl	800094c <__aeabi_ddiv>
 80057da:	4652      	mov	r2, sl
 80057dc:	465b      	mov	r3, fp
 80057de:	f7fa fdd3 	bl	8000388 <__aeabi_dsub>
 80057e2:	9d01      	ldr	r5, [sp, #4]
 80057e4:	4682      	mov	sl, r0
 80057e6:	468b      	mov	fp, r1
 80057e8:	4649      	mov	r1, r9
 80057ea:	4640      	mov	r0, r8
 80057ec:	f7fb fa34 	bl	8000c58 <__aeabi_d2iz>
 80057f0:	4606      	mov	r6, r0
 80057f2:	f7fa ff17 	bl	8000624 <__aeabi_i2d>
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	4640      	mov	r0, r8
 80057fc:	4649      	mov	r1, r9
 80057fe:	f7fa fdc3 	bl	8000388 <__aeabi_dsub>
 8005802:	3630      	adds	r6, #48	; 0x30
 8005804:	f805 6b01 	strb.w	r6, [r5], #1
 8005808:	4652      	mov	r2, sl
 800580a:	465b      	mov	r3, fp
 800580c:	4680      	mov	r8, r0
 800580e:	4689      	mov	r9, r1
 8005810:	f7fb f9e4 	bl	8000bdc <__aeabi_dcmplt>
 8005814:	2800      	cmp	r0, #0
 8005816:	d163      	bne.n	80058e0 <_dtoa_r+0x608>
 8005818:	4642      	mov	r2, r8
 800581a:	464b      	mov	r3, r9
 800581c:	4936      	ldr	r1, [pc, #216]	; (80058f8 <_dtoa_r+0x620>)
 800581e:	2000      	movs	r0, #0
 8005820:	f7fa fdb2 	bl	8000388 <__aeabi_dsub>
 8005824:	4652      	mov	r2, sl
 8005826:	465b      	mov	r3, fp
 8005828:	f7fb f9d8 	bl	8000bdc <__aeabi_dcmplt>
 800582c:	2800      	cmp	r0, #0
 800582e:	f040 80b5 	bne.w	800599c <_dtoa_r+0x6c4>
 8005832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005834:	429d      	cmp	r5, r3
 8005836:	d081      	beq.n	800573c <_dtoa_r+0x464>
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <_dtoa_r+0x624>)
 800583a:	2200      	movs	r2, #0
 800583c:	4650      	mov	r0, sl
 800583e:	4659      	mov	r1, fp
 8005840:	f7fa ff5a 	bl	80006f8 <__aeabi_dmul>
 8005844:	4b2d      	ldr	r3, [pc, #180]	; (80058fc <_dtoa_r+0x624>)
 8005846:	4682      	mov	sl, r0
 8005848:	468b      	mov	fp, r1
 800584a:	4640      	mov	r0, r8
 800584c:	4649      	mov	r1, r9
 800584e:	2200      	movs	r2, #0
 8005850:	f7fa ff52 	bl	80006f8 <__aeabi_dmul>
 8005854:	4680      	mov	r8, r0
 8005856:	4689      	mov	r9, r1
 8005858:	e7c6      	b.n	80057e8 <_dtoa_r+0x510>
 800585a:	4650      	mov	r0, sl
 800585c:	4659      	mov	r1, fp
 800585e:	f7fa ff4b 	bl	80006f8 <__aeabi_dmul>
 8005862:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005864:	9d01      	ldr	r5, [sp, #4]
 8005866:	930f      	str	r3, [sp, #60]	; 0x3c
 8005868:	4682      	mov	sl, r0
 800586a:	468b      	mov	fp, r1
 800586c:	4649      	mov	r1, r9
 800586e:	4640      	mov	r0, r8
 8005870:	f7fb f9f2 	bl	8000c58 <__aeabi_d2iz>
 8005874:	4606      	mov	r6, r0
 8005876:	f7fa fed5 	bl	8000624 <__aeabi_i2d>
 800587a:	3630      	adds	r6, #48	; 0x30
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4640      	mov	r0, r8
 8005882:	4649      	mov	r1, r9
 8005884:	f7fa fd80 	bl	8000388 <__aeabi_dsub>
 8005888:	f805 6b01 	strb.w	r6, [r5], #1
 800588c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800588e:	429d      	cmp	r5, r3
 8005890:	4680      	mov	r8, r0
 8005892:	4689      	mov	r9, r1
 8005894:	f04f 0200 	mov.w	r2, #0
 8005898:	d124      	bne.n	80058e4 <_dtoa_r+0x60c>
 800589a:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <_dtoa_r+0x630>)
 800589c:	4650      	mov	r0, sl
 800589e:	4659      	mov	r1, fp
 80058a0:	f7fa fd74 	bl	800038c <__adddf3>
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4640      	mov	r0, r8
 80058aa:	4649      	mov	r1, r9
 80058ac:	f7fb f9b4 	bl	8000c18 <__aeabi_dcmpgt>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d173      	bne.n	800599c <_dtoa_r+0x6c4>
 80058b4:	4652      	mov	r2, sl
 80058b6:	465b      	mov	r3, fp
 80058b8:	4913      	ldr	r1, [pc, #76]	; (8005908 <_dtoa_r+0x630>)
 80058ba:	2000      	movs	r0, #0
 80058bc:	f7fa fd64 	bl	8000388 <__aeabi_dsub>
 80058c0:	4602      	mov	r2, r0
 80058c2:	460b      	mov	r3, r1
 80058c4:	4640      	mov	r0, r8
 80058c6:	4649      	mov	r1, r9
 80058c8:	f7fb f988 	bl	8000bdc <__aeabi_dcmplt>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	f43f af35 	beq.w	800573c <_dtoa_r+0x464>
 80058d2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80058d4:	1e6b      	subs	r3, r5, #1
 80058d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80058d8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80058dc:	2b30      	cmp	r3, #48	; 0x30
 80058de:	d0f8      	beq.n	80058d2 <_dtoa_r+0x5fa>
 80058e0:	9700      	str	r7, [sp, #0]
 80058e2:	e049      	b.n	8005978 <_dtoa_r+0x6a0>
 80058e4:	4b05      	ldr	r3, [pc, #20]	; (80058fc <_dtoa_r+0x624>)
 80058e6:	f7fa ff07 	bl	80006f8 <__aeabi_dmul>
 80058ea:	4680      	mov	r8, r0
 80058ec:	4689      	mov	r9, r1
 80058ee:	e7bd      	b.n	800586c <_dtoa_r+0x594>
 80058f0:	0800bb40 	.word	0x0800bb40
 80058f4:	0800bb18 	.word	0x0800bb18
 80058f8:	3ff00000 	.word	0x3ff00000
 80058fc:	40240000 	.word	0x40240000
 8005900:	401c0000 	.word	0x401c0000
 8005904:	40140000 	.word	0x40140000
 8005908:	3fe00000 	.word	0x3fe00000
 800590c:	9d01      	ldr	r5, [sp, #4]
 800590e:	4656      	mov	r6, sl
 8005910:	465f      	mov	r7, fp
 8005912:	4642      	mov	r2, r8
 8005914:	464b      	mov	r3, r9
 8005916:	4630      	mov	r0, r6
 8005918:	4639      	mov	r1, r7
 800591a:	f7fb f817 	bl	800094c <__aeabi_ddiv>
 800591e:	f7fb f99b 	bl	8000c58 <__aeabi_d2iz>
 8005922:	4682      	mov	sl, r0
 8005924:	f7fa fe7e 	bl	8000624 <__aeabi_i2d>
 8005928:	4642      	mov	r2, r8
 800592a:	464b      	mov	r3, r9
 800592c:	f7fa fee4 	bl	80006f8 <__aeabi_dmul>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4630      	mov	r0, r6
 8005936:	4639      	mov	r1, r7
 8005938:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800593c:	f7fa fd24 	bl	8000388 <__aeabi_dsub>
 8005940:	f805 6b01 	strb.w	r6, [r5], #1
 8005944:	9e01      	ldr	r6, [sp, #4]
 8005946:	9f03      	ldr	r7, [sp, #12]
 8005948:	1bae      	subs	r6, r5, r6
 800594a:	42b7      	cmp	r7, r6
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	d135      	bne.n	80059be <_dtoa_r+0x6e6>
 8005952:	f7fa fd1b 	bl	800038c <__adddf3>
 8005956:	4642      	mov	r2, r8
 8005958:	464b      	mov	r3, r9
 800595a:	4606      	mov	r6, r0
 800595c:	460f      	mov	r7, r1
 800595e:	f7fb f95b 	bl	8000c18 <__aeabi_dcmpgt>
 8005962:	b9d0      	cbnz	r0, 800599a <_dtoa_r+0x6c2>
 8005964:	4642      	mov	r2, r8
 8005966:	464b      	mov	r3, r9
 8005968:	4630      	mov	r0, r6
 800596a:	4639      	mov	r1, r7
 800596c:	f7fb f92c 	bl	8000bc8 <__aeabi_dcmpeq>
 8005970:	b110      	cbz	r0, 8005978 <_dtoa_r+0x6a0>
 8005972:	f01a 0f01 	tst.w	sl, #1
 8005976:	d110      	bne.n	800599a <_dtoa_r+0x6c2>
 8005978:	4620      	mov	r0, r4
 800597a:	ee18 1a10 	vmov	r1, s16
 800597e:	f000 fd13 	bl	80063a8 <_Bfree>
 8005982:	2300      	movs	r3, #0
 8005984:	9800      	ldr	r0, [sp, #0]
 8005986:	702b      	strb	r3, [r5, #0]
 8005988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800598a:	3001      	adds	r0, #1
 800598c:	6018      	str	r0, [r3, #0]
 800598e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005990:	2b00      	cmp	r3, #0
 8005992:	f43f acf1 	beq.w	8005378 <_dtoa_r+0xa0>
 8005996:	601d      	str	r5, [r3, #0]
 8005998:	e4ee      	b.n	8005378 <_dtoa_r+0xa0>
 800599a:	9f00      	ldr	r7, [sp, #0]
 800599c:	462b      	mov	r3, r5
 800599e:	461d      	mov	r5, r3
 80059a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80059a4:	2a39      	cmp	r2, #57	; 0x39
 80059a6:	d106      	bne.n	80059b6 <_dtoa_r+0x6de>
 80059a8:	9a01      	ldr	r2, [sp, #4]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d1f7      	bne.n	800599e <_dtoa_r+0x6c6>
 80059ae:	9901      	ldr	r1, [sp, #4]
 80059b0:	2230      	movs	r2, #48	; 0x30
 80059b2:	3701      	adds	r7, #1
 80059b4:	700a      	strb	r2, [r1, #0]
 80059b6:	781a      	ldrb	r2, [r3, #0]
 80059b8:	3201      	adds	r2, #1
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	e790      	b.n	80058e0 <_dtoa_r+0x608>
 80059be:	4ba6      	ldr	r3, [pc, #664]	; (8005c58 <_dtoa_r+0x980>)
 80059c0:	2200      	movs	r2, #0
 80059c2:	f7fa fe99 	bl	80006f8 <__aeabi_dmul>
 80059c6:	2200      	movs	r2, #0
 80059c8:	2300      	movs	r3, #0
 80059ca:	4606      	mov	r6, r0
 80059cc:	460f      	mov	r7, r1
 80059ce:	f7fb f8fb 	bl	8000bc8 <__aeabi_dcmpeq>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	d09d      	beq.n	8005912 <_dtoa_r+0x63a>
 80059d6:	e7cf      	b.n	8005978 <_dtoa_r+0x6a0>
 80059d8:	9a08      	ldr	r2, [sp, #32]
 80059da:	2a00      	cmp	r2, #0
 80059dc:	f000 80d7 	beq.w	8005b8e <_dtoa_r+0x8b6>
 80059e0:	9a06      	ldr	r2, [sp, #24]
 80059e2:	2a01      	cmp	r2, #1
 80059e4:	f300 80ba 	bgt.w	8005b5c <_dtoa_r+0x884>
 80059e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059ea:	2a00      	cmp	r2, #0
 80059ec:	f000 80b2 	beq.w	8005b54 <_dtoa_r+0x87c>
 80059f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80059f4:	9e07      	ldr	r6, [sp, #28]
 80059f6:	9d04      	ldr	r5, [sp, #16]
 80059f8:	9a04      	ldr	r2, [sp, #16]
 80059fa:	441a      	add	r2, r3
 80059fc:	9204      	str	r2, [sp, #16]
 80059fe:	9a05      	ldr	r2, [sp, #20]
 8005a00:	2101      	movs	r1, #1
 8005a02:	441a      	add	r2, r3
 8005a04:	4620      	mov	r0, r4
 8005a06:	9205      	str	r2, [sp, #20]
 8005a08:	f000 fd86 	bl	8006518 <__i2b>
 8005a0c:	4607      	mov	r7, r0
 8005a0e:	2d00      	cmp	r5, #0
 8005a10:	dd0c      	ble.n	8005a2c <_dtoa_r+0x754>
 8005a12:	9b05      	ldr	r3, [sp, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dd09      	ble.n	8005a2c <_dtoa_r+0x754>
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	9a04      	ldr	r2, [sp, #16]
 8005a1c:	bfa8      	it	ge
 8005a1e:	462b      	movge	r3, r5
 8005a20:	1ad2      	subs	r2, r2, r3
 8005a22:	9204      	str	r2, [sp, #16]
 8005a24:	9a05      	ldr	r2, [sp, #20]
 8005a26:	1aed      	subs	r5, r5, r3
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	9305      	str	r3, [sp, #20]
 8005a2c:	9b07      	ldr	r3, [sp, #28]
 8005a2e:	b31b      	cbz	r3, 8005a78 <_dtoa_r+0x7a0>
 8005a30:	9b08      	ldr	r3, [sp, #32]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 80af 	beq.w	8005b96 <_dtoa_r+0x8be>
 8005a38:	2e00      	cmp	r6, #0
 8005a3a:	dd13      	ble.n	8005a64 <_dtoa_r+0x78c>
 8005a3c:	4639      	mov	r1, r7
 8005a3e:	4632      	mov	r2, r6
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 fe29 	bl	8006698 <__pow5mult>
 8005a46:	ee18 2a10 	vmov	r2, s16
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	4607      	mov	r7, r0
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f000 fd78 	bl	8006544 <__multiply>
 8005a54:	ee18 1a10 	vmov	r1, s16
 8005a58:	4680      	mov	r8, r0
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 fca4 	bl	80063a8 <_Bfree>
 8005a60:	ee08 8a10 	vmov	s16, r8
 8005a64:	9b07      	ldr	r3, [sp, #28]
 8005a66:	1b9a      	subs	r2, r3, r6
 8005a68:	d006      	beq.n	8005a78 <_dtoa_r+0x7a0>
 8005a6a:	ee18 1a10 	vmov	r1, s16
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f000 fe12 	bl	8006698 <__pow5mult>
 8005a74:	ee08 0a10 	vmov	s16, r0
 8005a78:	2101      	movs	r1, #1
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f000 fd4c 	bl	8006518 <__i2b>
 8005a80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	4606      	mov	r6, r0
 8005a86:	f340 8088 	ble.w	8005b9a <_dtoa_r+0x8c2>
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	4601      	mov	r1, r0
 8005a8e:	4620      	mov	r0, r4
 8005a90:	f000 fe02 	bl	8006698 <__pow5mult>
 8005a94:	9b06      	ldr	r3, [sp, #24]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	4606      	mov	r6, r0
 8005a9a:	f340 8081 	ble.w	8005ba0 <_dtoa_r+0x8c8>
 8005a9e:	f04f 0800 	mov.w	r8, #0
 8005aa2:	6933      	ldr	r3, [r6, #16]
 8005aa4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005aa8:	6918      	ldr	r0, [r3, #16]
 8005aaa:	f000 fce5 	bl	8006478 <__hi0bits>
 8005aae:	f1c0 0020 	rsb	r0, r0, #32
 8005ab2:	9b05      	ldr	r3, [sp, #20]
 8005ab4:	4418      	add	r0, r3
 8005ab6:	f010 001f 	ands.w	r0, r0, #31
 8005aba:	f000 8092 	beq.w	8005be2 <_dtoa_r+0x90a>
 8005abe:	f1c0 0320 	rsb	r3, r0, #32
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	f340 808a 	ble.w	8005bdc <_dtoa_r+0x904>
 8005ac8:	f1c0 001c 	rsb	r0, r0, #28
 8005acc:	9b04      	ldr	r3, [sp, #16]
 8005ace:	4403      	add	r3, r0
 8005ad0:	9304      	str	r3, [sp, #16]
 8005ad2:	9b05      	ldr	r3, [sp, #20]
 8005ad4:	4403      	add	r3, r0
 8005ad6:	4405      	add	r5, r0
 8005ad8:	9305      	str	r3, [sp, #20]
 8005ada:	9b04      	ldr	r3, [sp, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	dd07      	ble.n	8005af0 <_dtoa_r+0x818>
 8005ae0:	ee18 1a10 	vmov	r1, s16
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	4620      	mov	r0, r4
 8005ae8:	f000 fe30 	bl	800674c <__lshift>
 8005aec:	ee08 0a10 	vmov	s16, r0
 8005af0:	9b05      	ldr	r3, [sp, #20]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	dd05      	ble.n	8005b02 <_dtoa_r+0x82a>
 8005af6:	4631      	mov	r1, r6
 8005af8:	461a      	mov	r2, r3
 8005afa:	4620      	mov	r0, r4
 8005afc:	f000 fe26 	bl	800674c <__lshift>
 8005b00:	4606      	mov	r6, r0
 8005b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d06e      	beq.n	8005be6 <_dtoa_r+0x90e>
 8005b08:	ee18 0a10 	vmov	r0, s16
 8005b0c:	4631      	mov	r1, r6
 8005b0e:	f000 fe8d 	bl	800682c <__mcmp>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	da67      	bge.n	8005be6 <_dtoa_r+0x90e>
 8005b16:	9b00      	ldr	r3, [sp, #0]
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	ee18 1a10 	vmov	r1, s16
 8005b1e:	9300      	str	r3, [sp, #0]
 8005b20:	220a      	movs	r2, #10
 8005b22:	2300      	movs	r3, #0
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 fc61 	bl	80063ec <__multadd>
 8005b2a:	9b08      	ldr	r3, [sp, #32]
 8005b2c:	ee08 0a10 	vmov	s16, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 81b1 	beq.w	8005e98 <_dtoa_r+0xbc0>
 8005b36:	2300      	movs	r3, #0
 8005b38:	4639      	mov	r1, r7
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	f000 fc55 	bl	80063ec <__multadd>
 8005b42:	9b02      	ldr	r3, [sp, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	4607      	mov	r7, r0
 8005b48:	f300 808e 	bgt.w	8005c68 <_dtoa_r+0x990>
 8005b4c:	9b06      	ldr	r3, [sp, #24]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	dc51      	bgt.n	8005bf6 <_dtoa_r+0x91e>
 8005b52:	e089      	b.n	8005c68 <_dtoa_r+0x990>
 8005b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005b56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005b5a:	e74b      	b.n	80059f4 <_dtoa_r+0x71c>
 8005b5c:	9b03      	ldr	r3, [sp, #12]
 8005b5e:	1e5e      	subs	r6, r3, #1
 8005b60:	9b07      	ldr	r3, [sp, #28]
 8005b62:	42b3      	cmp	r3, r6
 8005b64:	bfbf      	itttt	lt
 8005b66:	9b07      	ldrlt	r3, [sp, #28]
 8005b68:	9607      	strlt	r6, [sp, #28]
 8005b6a:	1af2      	sublt	r2, r6, r3
 8005b6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005b6e:	bfb6      	itet	lt
 8005b70:	189b      	addlt	r3, r3, r2
 8005b72:	1b9e      	subge	r6, r3, r6
 8005b74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005b76:	9b03      	ldr	r3, [sp, #12]
 8005b78:	bfb8      	it	lt
 8005b7a:	2600      	movlt	r6, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	bfb7      	itett	lt
 8005b80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005b84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005b88:	1a9d      	sublt	r5, r3, r2
 8005b8a:	2300      	movlt	r3, #0
 8005b8c:	e734      	b.n	80059f8 <_dtoa_r+0x720>
 8005b8e:	9e07      	ldr	r6, [sp, #28]
 8005b90:	9d04      	ldr	r5, [sp, #16]
 8005b92:	9f08      	ldr	r7, [sp, #32]
 8005b94:	e73b      	b.n	8005a0e <_dtoa_r+0x736>
 8005b96:	9a07      	ldr	r2, [sp, #28]
 8005b98:	e767      	b.n	8005a6a <_dtoa_r+0x792>
 8005b9a:	9b06      	ldr	r3, [sp, #24]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	dc18      	bgt.n	8005bd2 <_dtoa_r+0x8fa>
 8005ba0:	f1ba 0f00 	cmp.w	sl, #0
 8005ba4:	d115      	bne.n	8005bd2 <_dtoa_r+0x8fa>
 8005ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005baa:	b993      	cbnz	r3, 8005bd2 <_dtoa_r+0x8fa>
 8005bac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005bb0:	0d1b      	lsrs	r3, r3, #20
 8005bb2:	051b      	lsls	r3, r3, #20
 8005bb4:	b183      	cbz	r3, 8005bd8 <_dtoa_r+0x900>
 8005bb6:	9b04      	ldr	r3, [sp, #16]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	9304      	str	r3, [sp, #16]
 8005bbc:	9b05      	ldr	r3, [sp, #20]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	9305      	str	r3, [sp, #20]
 8005bc2:	f04f 0801 	mov.w	r8, #1
 8005bc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f47f af6a 	bne.w	8005aa2 <_dtoa_r+0x7ca>
 8005bce:	2001      	movs	r0, #1
 8005bd0:	e76f      	b.n	8005ab2 <_dtoa_r+0x7da>
 8005bd2:	f04f 0800 	mov.w	r8, #0
 8005bd6:	e7f6      	b.n	8005bc6 <_dtoa_r+0x8ee>
 8005bd8:	4698      	mov	r8, r3
 8005bda:	e7f4      	b.n	8005bc6 <_dtoa_r+0x8ee>
 8005bdc:	f43f af7d 	beq.w	8005ada <_dtoa_r+0x802>
 8005be0:	4618      	mov	r0, r3
 8005be2:	301c      	adds	r0, #28
 8005be4:	e772      	b.n	8005acc <_dtoa_r+0x7f4>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	dc37      	bgt.n	8005c5c <_dtoa_r+0x984>
 8005bec:	9b06      	ldr	r3, [sp, #24]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	dd34      	ble.n	8005c5c <_dtoa_r+0x984>
 8005bf2:	9b03      	ldr	r3, [sp, #12]
 8005bf4:	9302      	str	r3, [sp, #8]
 8005bf6:	9b02      	ldr	r3, [sp, #8]
 8005bf8:	b96b      	cbnz	r3, 8005c16 <_dtoa_r+0x93e>
 8005bfa:	4631      	mov	r1, r6
 8005bfc:	2205      	movs	r2, #5
 8005bfe:	4620      	mov	r0, r4
 8005c00:	f000 fbf4 	bl	80063ec <__multadd>
 8005c04:	4601      	mov	r1, r0
 8005c06:	4606      	mov	r6, r0
 8005c08:	ee18 0a10 	vmov	r0, s16
 8005c0c:	f000 fe0e 	bl	800682c <__mcmp>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	f73f adbb 	bgt.w	800578c <_dtoa_r+0x4b4>
 8005c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c18:	9d01      	ldr	r5, [sp, #4]
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	9300      	str	r3, [sp, #0]
 8005c1e:	f04f 0800 	mov.w	r8, #0
 8005c22:	4631      	mov	r1, r6
 8005c24:	4620      	mov	r0, r4
 8005c26:	f000 fbbf 	bl	80063a8 <_Bfree>
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	f43f aea4 	beq.w	8005978 <_dtoa_r+0x6a0>
 8005c30:	f1b8 0f00 	cmp.w	r8, #0
 8005c34:	d005      	beq.n	8005c42 <_dtoa_r+0x96a>
 8005c36:	45b8      	cmp	r8, r7
 8005c38:	d003      	beq.n	8005c42 <_dtoa_r+0x96a>
 8005c3a:	4641      	mov	r1, r8
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 fbb3 	bl	80063a8 <_Bfree>
 8005c42:	4639      	mov	r1, r7
 8005c44:	4620      	mov	r0, r4
 8005c46:	f000 fbaf 	bl	80063a8 <_Bfree>
 8005c4a:	e695      	b.n	8005978 <_dtoa_r+0x6a0>
 8005c4c:	2600      	movs	r6, #0
 8005c4e:	4637      	mov	r7, r6
 8005c50:	e7e1      	b.n	8005c16 <_dtoa_r+0x93e>
 8005c52:	9700      	str	r7, [sp, #0]
 8005c54:	4637      	mov	r7, r6
 8005c56:	e599      	b.n	800578c <_dtoa_r+0x4b4>
 8005c58:	40240000 	.word	0x40240000
 8005c5c:	9b08      	ldr	r3, [sp, #32]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 80ca 	beq.w	8005df8 <_dtoa_r+0xb20>
 8005c64:	9b03      	ldr	r3, [sp, #12]
 8005c66:	9302      	str	r3, [sp, #8]
 8005c68:	2d00      	cmp	r5, #0
 8005c6a:	dd05      	ble.n	8005c78 <_dtoa_r+0x9a0>
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	462a      	mov	r2, r5
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fd6b 	bl	800674c <__lshift>
 8005c76:	4607      	mov	r7, r0
 8005c78:	f1b8 0f00 	cmp.w	r8, #0
 8005c7c:	d05b      	beq.n	8005d36 <_dtoa_r+0xa5e>
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fb51 	bl	8006328 <_Balloc>
 8005c86:	4605      	mov	r5, r0
 8005c88:	b928      	cbnz	r0, 8005c96 <_dtoa_r+0x9be>
 8005c8a:	4b87      	ldr	r3, [pc, #540]	; (8005ea8 <_dtoa_r+0xbd0>)
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005c92:	f7ff bb3b 	b.w	800530c <_dtoa_r+0x34>
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	3202      	adds	r2, #2
 8005c9a:	0092      	lsls	r2, r2, #2
 8005c9c:	f107 010c 	add.w	r1, r7, #12
 8005ca0:	300c      	adds	r0, #12
 8005ca2:	f000 fb33 	bl	800630c <memcpy>
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	4629      	mov	r1, r5
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 fd4e 	bl	800674c <__lshift>
 8005cb0:	9b01      	ldr	r3, [sp, #4]
 8005cb2:	f103 0901 	add.w	r9, r3, #1
 8005cb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005cba:	4413      	add	r3, r2
 8005cbc:	9305      	str	r3, [sp, #20]
 8005cbe:	f00a 0301 	and.w	r3, sl, #1
 8005cc2:	46b8      	mov	r8, r7
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	4607      	mov	r7, r0
 8005cc8:	4631      	mov	r1, r6
 8005cca:	ee18 0a10 	vmov	r0, s16
 8005cce:	f7ff fa77 	bl	80051c0 <quorem>
 8005cd2:	4641      	mov	r1, r8
 8005cd4:	9002      	str	r0, [sp, #8]
 8005cd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005cda:	ee18 0a10 	vmov	r0, s16
 8005cde:	f000 fda5 	bl	800682c <__mcmp>
 8005ce2:	463a      	mov	r2, r7
 8005ce4:	9003      	str	r0, [sp, #12]
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4620      	mov	r0, r4
 8005cea:	f000 fdbb 	bl	8006864 <__mdiff>
 8005cee:	68c2      	ldr	r2, [r0, #12]
 8005cf0:	f109 3bff 	add.w	fp, r9, #4294967295
 8005cf4:	4605      	mov	r5, r0
 8005cf6:	bb02      	cbnz	r2, 8005d3a <_dtoa_r+0xa62>
 8005cf8:	4601      	mov	r1, r0
 8005cfa:	ee18 0a10 	vmov	r0, s16
 8005cfe:	f000 fd95 	bl	800682c <__mcmp>
 8005d02:	4602      	mov	r2, r0
 8005d04:	4629      	mov	r1, r5
 8005d06:	4620      	mov	r0, r4
 8005d08:	9207      	str	r2, [sp, #28]
 8005d0a:	f000 fb4d 	bl	80063a8 <_Bfree>
 8005d0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005d12:	ea43 0102 	orr.w	r1, r3, r2
 8005d16:	9b04      	ldr	r3, [sp, #16]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	464d      	mov	r5, r9
 8005d1c:	d10f      	bne.n	8005d3e <_dtoa_r+0xa66>
 8005d1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d22:	d02a      	beq.n	8005d7a <_dtoa_r+0xaa2>
 8005d24:	9b03      	ldr	r3, [sp, #12]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd02      	ble.n	8005d30 <_dtoa_r+0xa58>
 8005d2a:	9b02      	ldr	r3, [sp, #8]
 8005d2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005d30:	f88b a000 	strb.w	sl, [fp]
 8005d34:	e775      	b.n	8005c22 <_dtoa_r+0x94a>
 8005d36:	4638      	mov	r0, r7
 8005d38:	e7ba      	b.n	8005cb0 <_dtoa_r+0x9d8>
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	e7e2      	b.n	8005d04 <_dtoa_r+0xa2c>
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	db04      	blt.n	8005d4e <_dtoa_r+0xa76>
 8005d44:	9906      	ldr	r1, [sp, #24]
 8005d46:	430b      	orrs	r3, r1
 8005d48:	9904      	ldr	r1, [sp, #16]
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	d122      	bne.n	8005d94 <_dtoa_r+0xabc>
 8005d4e:	2a00      	cmp	r2, #0
 8005d50:	ddee      	ble.n	8005d30 <_dtoa_r+0xa58>
 8005d52:	ee18 1a10 	vmov	r1, s16
 8005d56:	2201      	movs	r2, #1
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 fcf7 	bl	800674c <__lshift>
 8005d5e:	4631      	mov	r1, r6
 8005d60:	ee08 0a10 	vmov	s16, r0
 8005d64:	f000 fd62 	bl	800682c <__mcmp>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	dc03      	bgt.n	8005d74 <_dtoa_r+0xa9c>
 8005d6c:	d1e0      	bne.n	8005d30 <_dtoa_r+0xa58>
 8005d6e:	f01a 0f01 	tst.w	sl, #1
 8005d72:	d0dd      	beq.n	8005d30 <_dtoa_r+0xa58>
 8005d74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d78:	d1d7      	bne.n	8005d2a <_dtoa_r+0xa52>
 8005d7a:	2339      	movs	r3, #57	; 0x39
 8005d7c:	f88b 3000 	strb.w	r3, [fp]
 8005d80:	462b      	mov	r3, r5
 8005d82:	461d      	mov	r5, r3
 8005d84:	3b01      	subs	r3, #1
 8005d86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005d8a:	2a39      	cmp	r2, #57	; 0x39
 8005d8c:	d071      	beq.n	8005e72 <_dtoa_r+0xb9a>
 8005d8e:	3201      	adds	r2, #1
 8005d90:	701a      	strb	r2, [r3, #0]
 8005d92:	e746      	b.n	8005c22 <_dtoa_r+0x94a>
 8005d94:	2a00      	cmp	r2, #0
 8005d96:	dd07      	ble.n	8005da8 <_dtoa_r+0xad0>
 8005d98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005d9c:	d0ed      	beq.n	8005d7a <_dtoa_r+0xaa2>
 8005d9e:	f10a 0301 	add.w	r3, sl, #1
 8005da2:	f88b 3000 	strb.w	r3, [fp]
 8005da6:	e73c      	b.n	8005c22 <_dtoa_r+0x94a>
 8005da8:	9b05      	ldr	r3, [sp, #20]
 8005daa:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005dae:	4599      	cmp	r9, r3
 8005db0:	d047      	beq.n	8005e42 <_dtoa_r+0xb6a>
 8005db2:	ee18 1a10 	vmov	r1, s16
 8005db6:	2300      	movs	r3, #0
 8005db8:	220a      	movs	r2, #10
 8005dba:	4620      	mov	r0, r4
 8005dbc:	f000 fb16 	bl	80063ec <__multadd>
 8005dc0:	45b8      	cmp	r8, r7
 8005dc2:	ee08 0a10 	vmov	s16, r0
 8005dc6:	f04f 0300 	mov.w	r3, #0
 8005dca:	f04f 020a 	mov.w	r2, #10
 8005dce:	4641      	mov	r1, r8
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	d106      	bne.n	8005de2 <_dtoa_r+0xb0a>
 8005dd4:	f000 fb0a 	bl	80063ec <__multadd>
 8005dd8:	4680      	mov	r8, r0
 8005dda:	4607      	mov	r7, r0
 8005ddc:	f109 0901 	add.w	r9, r9, #1
 8005de0:	e772      	b.n	8005cc8 <_dtoa_r+0x9f0>
 8005de2:	f000 fb03 	bl	80063ec <__multadd>
 8005de6:	4639      	mov	r1, r7
 8005de8:	4680      	mov	r8, r0
 8005dea:	2300      	movs	r3, #0
 8005dec:	220a      	movs	r2, #10
 8005dee:	4620      	mov	r0, r4
 8005df0:	f000 fafc 	bl	80063ec <__multadd>
 8005df4:	4607      	mov	r7, r0
 8005df6:	e7f1      	b.n	8005ddc <_dtoa_r+0xb04>
 8005df8:	9b03      	ldr	r3, [sp, #12]
 8005dfa:	9302      	str	r3, [sp, #8]
 8005dfc:	9d01      	ldr	r5, [sp, #4]
 8005dfe:	ee18 0a10 	vmov	r0, s16
 8005e02:	4631      	mov	r1, r6
 8005e04:	f7ff f9dc 	bl	80051c0 <quorem>
 8005e08:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005e0c:	9b01      	ldr	r3, [sp, #4]
 8005e0e:	f805 ab01 	strb.w	sl, [r5], #1
 8005e12:	1aea      	subs	r2, r5, r3
 8005e14:	9b02      	ldr	r3, [sp, #8]
 8005e16:	4293      	cmp	r3, r2
 8005e18:	dd09      	ble.n	8005e2e <_dtoa_r+0xb56>
 8005e1a:	ee18 1a10 	vmov	r1, s16
 8005e1e:	2300      	movs	r3, #0
 8005e20:	220a      	movs	r2, #10
 8005e22:	4620      	mov	r0, r4
 8005e24:	f000 fae2 	bl	80063ec <__multadd>
 8005e28:	ee08 0a10 	vmov	s16, r0
 8005e2c:	e7e7      	b.n	8005dfe <_dtoa_r+0xb26>
 8005e2e:	9b02      	ldr	r3, [sp, #8]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	bfc8      	it	gt
 8005e34:	461d      	movgt	r5, r3
 8005e36:	9b01      	ldr	r3, [sp, #4]
 8005e38:	bfd8      	it	le
 8005e3a:	2501      	movle	r5, #1
 8005e3c:	441d      	add	r5, r3
 8005e3e:	f04f 0800 	mov.w	r8, #0
 8005e42:	ee18 1a10 	vmov	r1, s16
 8005e46:	2201      	movs	r2, #1
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 fc7f 	bl	800674c <__lshift>
 8005e4e:	4631      	mov	r1, r6
 8005e50:	ee08 0a10 	vmov	s16, r0
 8005e54:	f000 fcea 	bl	800682c <__mcmp>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	dc91      	bgt.n	8005d80 <_dtoa_r+0xaa8>
 8005e5c:	d102      	bne.n	8005e64 <_dtoa_r+0xb8c>
 8005e5e:	f01a 0f01 	tst.w	sl, #1
 8005e62:	d18d      	bne.n	8005d80 <_dtoa_r+0xaa8>
 8005e64:	462b      	mov	r3, r5
 8005e66:	461d      	mov	r5, r3
 8005e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e6c:	2a30      	cmp	r2, #48	; 0x30
 8005e6e:	d0fa      	beq.n	8005e66 <_dtoa_r+0xb8e>
 8005e70:	e6d7      	b.n	8005c22 <_dtoa_r+0x94a>
 8005e72:	9a01      	ldr	r2, [sp, #4]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d184      	bne.n	8005d82 <_dtoa_r+0xaaa>
 8005e78:	9b00      	ldr	r3, [sp, #0]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	9300      	str	r3, [sp, #0]
 8005e7e:	2331      	movs	r3, #49	; 0x31
 8005e80:	7013      	strb	r3, [r2, #0]
 8005e82:	e6ce      	b.n	8005c22 <_dtoa_r+0x94a>
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <_dtoa_r+0xbd4>)
 8005e86:	f7ff ba95 	b.w	80053b4 <_dtoa_r+0xdc>
 8005e8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f47f aa6e 	bne.w	800536e <_dtoa_r+0x96>
 8005e92:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <_dtoa_r+0xbd8>)
 8005e94:	f7ff ba8e 	b.w	80053b4 <_dtoa_r+0xdc>
 8005e98:	9b02      	ldr	r3, [sp, #8]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	dcae      	bgt.n	8005dfc <_dtoa_r+0xb24>
 8005e9e:	9b06      	ldr	r3, [sp, #24]
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	f73f aea8 	bgt.w	8005bf6 <_dtoa_r+0x91e>
 8005ea6:	e7a9      	b.n	8005dfc <_dtoa_r+0xb24>
 8005ea8:	0800ba4b 	.word	0x0800ba4b
 8005eac:	0800b9a8 	.word	0x0800b9a8
 8005eb0:	0800b9cc 	.word	0x0800b9cc

08005eb4 <__sflush_r>:
 8005eb4:	898a      	ldrh	r2, [r1, #12]
 8005eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eba:	4605      	mov	r5, r0
 8005ebc:	0710      	lsls	r0, r2, #28
 8005ebe:	460c      	mov	r4, r1
 8005ec0:	d458      	bmi.n	8005f74 <__sflush_r+0xc0>
 8005ec2:	684b      	ldr	r3, [r1, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dc05      	bgt.n	8005ed4 <__sflush_r+0x20>
 8005ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	dc02      	bgt.n	8005ed4 <__sflush_r+0x20>
 8005ece:	2000      	movs	r0, #0
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ed6:	2e00      	cmp	r6, #0
 8005ed8:	d0f9      	beq.n	8005ece <__sflush_r+0x1a>
 8005eda:	2300      	movs	r3, #0
 8005edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ee0:	682f      	ldr	r7, [r5, #0]
 8005ee2:	602b      	str	r3, [r5, #0]
 8005ee4:	d032      	beq.n	8005f4c <__sflush_r+0x98>
 8005ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ee8:	89a3      	ldrh	r3, [r4, #12]
 8005eea:	075a      	lsls	r2, r3, #29
 8005eec:	d505      	bpl.n	8005efa <__sflush_r+0x46>
 8005eee:	6863      	ldr	r3, [r4, #4]
 8005ef0:	1ac0      	subs	r0, r0, r3
 8005ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ef4:	b10b      	cbz	r3, 8005efa <__sflush_r+0x46>
 8005ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ef8:	1ac0      	subs	r0, r0, r3
 8005efa:	2300      	movs	r3, #0
 8005efc:	4602      	mov	r2, r0
 8005efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005f00:	6a21      	ldr	r1, [r4, #32]
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b0      	blx	r6
 8005f06:	1c43      	adds	r3, r0, #1
 8005f08:	89a3      	ldrh	r3, [r4, #12]
 8005f0a:	d106      	bne.n	8005f1a <__sflush_r+0x66>
 8005f0c:	6829      	ldr	r1, [r5, #0]
 8005f0e:	291d      	cmp	r1, #29
 8005f10:	d82c      	bhi.n	8005f6c <__sflush_r+0xb8>
 8005f12:	4a2a      	ldr	r2, [pc, #168]	; (8005fbc <__sflush_r+0x108>)
 8005f14:	40ca      	lsrs	r2, r1
 8005f16:	07d6      	lsls	r6, r2, #31
 8005f18:	d528      	bpl.n	8005f6c <__sflush_r+0xb8>
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	6062      	str	r2, [r4, #4]
 8005f1e:	04d9      	lsls	r1, r3, #19
 8005f20:	6922      	ldr	r2, [r4, #16]
 8005f22:	6022      	str	r2, [r4, #0]
 8005f24:	d504      	bpl.n	8005f30 <__sflush_r+0x7c>
 8005f26:	1c42      	adds	r2, r0, #1
 8005f28:	d101      	bne.n	8005f2e <__sflush_r+0x7a>
 8005f2a:	682b      	ldr	r3, [r5, #0]
 8005f2c:	b903      	cbnz	r3, 8005f30 <__sflush_r+0x7c>
 8005f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8005f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f32:	602f      	str	r7, [r5, #0]
 8005f34:	2900      	cmp	r1, #0
 8005f36:	d0ca      	beq.n	8005ece <__sflush_r+0x1a>
 8005f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f3c:	4299      	cmp	r1, r3
 8005f3e:	d002      	beq.n	8005f46 <__sflush_r+0x92>
 8005f40:	4628      	mov	r0, r5
 8005f42:	f000 fd8b 	bl	8006a5c <_free_r>
 8005f46:	2000      	movs	r0, #0
 8005f48:	6360      	str	r0, [r4, #52]	; 0x34
 8005f4a:	e7c1      	b.n	8005ed0 <__sflush_r+0x1c>
 8005f4c:	6a21      	ldr	r1, [r4, #32]
 8005f4e:	2301      	movs	r3, #1
 8005f50:	4628      	mov	r0, r5
 8005f52:	47b0      	blx	r6
 8005f54:	1c41      	adds	r1, r0, #1
 8005f56:	d1c7      	bne.n	8005ee8 <__sflush_r+0x34>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0c4      	beq.n	8005ee8 <__sflush_r+0x34>
 8005f5e:	2b1d      	cmp	r3, #29
 8005f60:	d001      	beq.n	8005f66 <__sflush_r+0xb2>
 8005f62:	2b16      	cmp	r3, #22
 8005f64:	d101      	bne.n	8005f6a <__sflush_r+0xb6>
 8005f66:	602f      	str	r7, [r5, #0]
 8005f68:	e7b1      	b.n	8005ece <__sflush_r+0x1a>
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	e7ad      	b.n	8005ed0 <__sflush_r+0x1c>
 8005f74:	690f      	ldr	r7, [r1, #16]
 8005f76:	2f00      	cmp	r7, #0
 8005f78:	d0a9      	beq.n	8005ece <__sflush_r+0x1a>
 8005f7a:	0793      	lsls	r3, r2, #30
 8005f7c:	680e      	ldr	r6, [r1, #0]
 8005f7e:	bf08      	it	eq
 8005f80:	694b      	ldreq	r3, [r1, #20]
 8005f82:	600f      	str	r7, [r1, #0]
 8005f84:	bf18      	it	ne
 8005f86:	2300      	movne	r3, #0
 8005f88:	eba6 0807 	sub.w	r8, r6, r7
 8005f8c:	608b      	str	r3, [r1, #8]
 8005f8e:	f1b8 0f00 	cmp.w	r8, #0
 8005f92:	dd9c      	ble.n	8005ece <__sflush_r+0x1a>
 8005f94:	6a21      	ldr	r1, [r4, #32]
 8005f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f98:	4643      	mov	r3, r8
 8005f9a:	463a      	mov	r2, r7
 8005f9c:	4628      	mov	r0, r5
 8005f9e:	47b0      	blx	r6
 8005fa0:	2800      	cmp	r0, #0
 8005fa2:	dc06      	bgt.n	8005fb2 <__sflush_r+0xfe>
 8005fa4:	89a3      	ldrh	r3, [r4, #12]
 8005fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb0:	e78e      	b.n	8005ed0 <__sflush_r+0x1c>
 8005fb2:	4407      	add	r7, r0
 8005fb4:	eba8 0800 	sub.w	r8, r8, r0
 8005fb8:	e7e9      	b.n	8005f8e <__sflush_r+0xda>
 8005fba:	bf00      	nop
 8005fbc:	20400001 	.word	0x20400001

08005fc0 <_fflush_r>:
 8005fc0:	b538      	push	{r3, r4, r5, lr}
 8005fc2:	690b      	ldr	r3, [r1, #16]
 8005fc4:	4605      	mov	r5, r0
 8005fc6:	460c      	mov	r4, r1
 8005fc8:	b913      	cbnz	r3, 8005fd0 <_fflush_r+0x10>
 8005fca:	2500      	movs	r5, #0
 8005fcc:	4628      	mov	r0, r5
 8005fce:	bd38      	pop	{r3, r4, r5, pc}
 8005fd0:	b118      	cbz	r0, 8005fda <_fflush_r+0x1a>
 8005fd2:	6983      	ldr	r3, [r0, #24]
 8005fd4:	b90b      	cbnz	r3, 8005fda <_fflush_r+0x1a>
 8005fd6:	f000 f887 	bl	80060e8 <__sinit>
 8005fda:	4b14      	ldr	r3, [pc, #80]	; (800602c <_fflush_r+0x6c>)
 8005fdc:	429c      	cmp	r4, r3
 8005fde:	d11b      	bne.n	8006018 <_fflush_r+0x58>
 8005fe0:	686c      	ldr	r4, [r5, #4]
 8005fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d0ef      	beq.n	8005fca <_fflush_r+0xa>
 8005fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fec:	07d0      	lsls	r0, r2, #31
 8005fee:	d404      	bmi.n	8005ffa <_fflush_r+0x3a>
 8005ff0:	0599      	lsls	r1, r3, #22
 8005ff2:	d402      	bmi.n	8005ffa <_fflush_r+0x3a>
 8005ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ff6:	f000 f91a 	bl	800622e <__retarget_lock_acquire_recursive>
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	f7ff ff59 	bl	8005eb4 <__sflush_r>
 8006002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006004:	07da      	lsls	r2, r3, #31
 8006006:	4605      	mov	r5, r0
 8006008:	d4e0      	bmi.n	8005fcc <_fflush_r+0xc>
 800600a:	89a3      	ldrh	r3, [r4, #12]
 800600c:	059b      	lsls	r3, r3, #22
 800600e:	d4dd      	bmi.n	8005fcc <_fflush_r+0xc>
 8006010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006012:	f000 f90d 	bl	8006230 <__retarget_lock_release_recursive>
 8006016:	e7d9      	b.n	8005fcc <_fflush_r+0xc>
 8006018:	4b05      	ldr	r3, [pc, #20]	; (8006030 <_fflush_r+0x70>)
 800601a:	429c      	cmp	r4, r3
 800601c:	d101      	bne.n	8006022 <_fflush_r+0x62>
 800601e:	68ac      	ldr	r4, [r5, #8]
 8006020:	e7df      	b.n	8005fe2 <_fflush_r+0x22>
 8006022:	4b04      	ldr	r3, [pc, #16]	; (8006034 <_fflush_r+0x74>)
 8006024:	429c      	cmp	r4, r3
 8006026:	bf08      	it	eq
 8006028:	68ec      	ldreq	r4, [r5, #12]
 800602a:	e7da      	b.n	8005fe2 <_fflush_r+0x22>
 800602c:	0800ba7c 	.word	0x0800ba7c
 8006030:	0800ba9c 	.word	0x0800ba9c
 8006034:	0800ba5c 	.word	0x0800ba5c

08006038 <std>:
 8006038:	2300      	movs	r3, #0
 800603a:	b510      	push	{r4, lr}
 800603c:	4604      	mov	r4, r0
 800603e:	e9c0 3300 	strd	r3, r3, [r0]
 8006042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006046:	6083      	str	r3, [r0, #8]
 8006048:	8181      	strh	r1, [r0, #12]
 800604a:	6643      	str	r3, [r0, #100]	; 0x64
 800604c:	81c2      	strh	r2, [r0, #14]
 800604e:	6183      	str	r3, [r0, #24]
 8006050:	4619      	mov	r1, r3
 8006052:	2208      	movs	r2, #8
 8006054:	305c      	adds	r0, #92	; 0x5c
 8006056:	f7fe faf3 	bl	8004640 <memset>
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <std+0x38>)
 800605c:	6263      	str	r3, [r4, #36]	; 0x24
 800605e:	4b05      	ldr	r3, [pc, #20]	; (8006074 <std+0x3c>)
 8006060:	62a3      	str	r3, [r4, #40]	; 0x28
 8006062:	4b05      	ldr	r3, [pc, #20]	; (8006078 <std+0x40>)
 8006064:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006066:	4b05      	ldr	r3, [pc, #20]	; (800607c <std+0x44>)
 8006068:	6224      	str	r4, [r4, #32]
 800606a:	6323      	str	r3, [r4, #48]	; 0x30
 800606c:	bd10      	pop	{r4, pc}
 800606e:	bf00      	nop
 8006070:	08006ef1 	.word	0x08006ef1
 8006074:	08006f13 	.word	0x08006f13
 8006078:	08006f4b 	.word	0x08006f4b
 800607c:	08006f6f 	.word	0x08006f6f

08006080 <_cleanup_r>:
 8006080:	4901      	ldr	r1, [pc, #4]	; (8006088 <_cleanup_r+0x8>)
 8006082:	f000 b8af 	b.w	80061e4 <_fwalk_reent>
 8006086:	bf00      	nop
 8006088:	08005fc1 	.word	0x08005fc1

0800608c <__sfmoreglue>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	2268      	movs	r2, #104	; 0x68
 8006090:	1e4d      	subs	r5, r1, #1
 8006092:	4355      	muls	r5, r2
 8006094:	460e      	mov	r6, r1
 8006096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800609a:	f000 fd4b 	bl	8006b34 <_malloc_r>
 800609e:	4604      	mov	r4, r0
 80060a0:	b140      	cbz	r0, 80060b4 <__sfmoreglue+0x28>
 80060a2:	2100      	movs	r1, #0
 80060a4:	e9c0 1600 	strd	r1, r6, [r0]
 80060a8:	300c      	adds	r0, #12
 80060aa:	60a0      	str	r0, [r4, #8]
 80060ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060b0:	f7fe fac6 	bl	8004640 <memset>
 80060b4:	4620      	mov	r0, r4
 80060b6:	bd70      	pop	{r4, r5, r6, pc}

080060b8 <__sfp_lock_acquire>:
 80060b8:	4801      	ldr	r0, [pc, #4]	; (80060c0 <__sfp_lock_acquire+0x8>)
 80060ba:	f000 b8b8 	b.w	800622e <__retarget_lock_acquire_recursive>
 80060be:	bf00      	nop
 80060c0:	20003ca1 	.word	0x20003ca1

080060c4 <__sfp_lock_release>:
 80060c4:	4801      	ldr	r0, [pc, #4]	; (80060cc <__sfp_lock_release+0x8>)
 80060c6:	f000 b8b3 	b.w	8006230 <__retarget_lock_release_recursive>
 80060ca:	bf00      	nop
 80060cc:	20003ca1 	.word	0x20003ca1

080060d0 <__sinit_lock_acquire>:
 80060d0:	4801      	ldr	r0, [pc, #4]	; (80060d8 <__sinit_lock_acquire+0x8>)
 80060d2:	f000 b8ac 	b.w	800622e <__retarget_lock_acquire_recursive>
 80060d6:	bf00      	nop
 80060d8:	20003ca2 	.word	0x20003ca2

080060dc <__sinit_lock_release>:
 80060dc:	4801      	ldr	r0, [pc, #4]	; (80060e4 <__sinit_lock_release+0x8>)
 80060de:	f000 b8a7 	b.w	8006230 <__retarget_lock_release_recursive>
 80060e2:	bf00      	nop
 80060e4:	20003ca2 	.word	0x20003ca2

080060e8 <__sinit>:
 80060e8:	b510      	push	{r4, lr}
 80060ea:	4604      	mov	r4, r0
 80060ec:	f7ff fff0 	bl	80060d0 <__sinit_lock_acquire>
 80060f0:	69a3      	ldr	r3, [r4, #24]
 80060f2:	b11b      	cbz	r3, 80060fc <__sinit+0x14>
 80060f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f8:	f7ff bff0 	b.w	80060dc <__sinit_lock_release>
 80060fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006100:	6523      	str	r3, [r4, #80]	; 0x50
 8006102:	4b13      	ldr	r3, [pc, #76]	; (8006150 <__sinit+0x68>)
 8006104:	4a13      	ldr	r2, [pc, #76]	; (8006154 <__sinit+0x6c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	62a2      	str	r2, [r4, #40]	; 0x28
 800610a:	42a3      	cmp	r3, r4
 800610c:	bf04      	itt	eq
 800610e:	2301      	moveq	r3, #1
 8006110:	61a3      	streq	r3, [r4, #24]
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f820 	bl	8006158 <__sfp>
 8006118:	6060      	str	r0, [r4, #4]
 800611a:	4620      	mov	r0, r4
 800611c:	f000 f81c 	bl	8006158 <__sfp>
 8006120:	60a0      	str	r0, [r4, #8]
 8006122:	4620      	mov	r0, r4
 8006124:	f000 f818 	bl	8006158 <__sfp>
 8006128:	2200      	movs	r2, #0
 800612a:	60e0      	str	r0, [r4, #12]
 800612c:	2104      	movs	r1, #4
 800612e:	6860      	ldr	r0, [r4, #4]
 8006130:	f7ff ff82 	bl	8006038 <std>
 8006134:	68a0      	ldr	r0, [r4, #8]
 8006136:	2201      	movs	r2, #1
 8006138:	2109      	movs	r1, #9
 800613a:	f7ff ff7d 	bl	8006038 <std>
 800613e:	68e0      	ldr	r0, [r4, #12]
 8006140:	2202      	movs	r2, #2
 8006142:	2112      	movs	r1, #18
 8006144:	f7ff ff78 	bl	8006038 <std>
 8006148:	2301      	movs	r3, #1
 800614a:	61a3      	str	r3, [r4, #24]
 800614c:	e7d2      	b.n	80060f4 <__sinit+0xc>
 800614e:	bf00      	nop
 8006150:	0800b994 	.word	0x0800b994
 8006154:	08006081 	.word	0x08006081

08006158 <__sfp>:
 8006158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800615a:	4607      	mov	r7, r0
 800615c:	f7ff ffac 	bl	80060b8 <__sfp_lock_acquire>
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <__sfp+0x84>)
 8006162:	681e      	ldr	r6, [r3, #0]
 8006164:	69b3      	ldr	r3, [r6, #24]
 8006166:	b913      	cbnz	r3, 800616e <__sfp+0x16>
 8006168:	4630      	mov	r0, r6
 800616a:	f7ff ffbd 	bl	80060e8 <__sinit>
 800616e:	3648      	adds	r6, #72	; 0x48
 8006170:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006174:	3b01      	subs	r3, #1
 8006176:	d503      	bpl.n	8006180 <__sfp+0x28>
 8006178:	6833      	ldr	r3, [r6, #0]
 800617a:	b30b      	cbz	r3, 80061c0 <__sfp+0x68>
 800617c:	6836      	ldr	r6, [r6, #0]
 800617e:	e7f7      	b.n	8006170 <__sfp+0x18>
 8006180:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006184:	b9d5      	cbnz	r5, 80061bc <__sfp+0x64>
 8006186:	4b16      	ldr	r3, [pc, #88]	; (80061e0 <__sfp+0x88>)
 8006188:	60e3      	str	r3, [r4, #12]
 800618a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800618e:	6665      	str	r5, [r4, #100]	; 0x64
 8006190:	f000 f84c 	bl	800622c <__retarget_lock_init_recursive>
 8006194:	f7ff ff96 	bl	80060c4 <__sfp_lock_release>
 8006198:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800619c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80061a0:	6025      	str	r5, [r4, #0]
 80061a2:	61a5      	str	r5, [r4, #24]
 80061a4:	2208      	movs	r2, #8
 80061a6:	4629      	mov	r1, r5
 80061a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80061ac:	f7fe fa48 	bl	8004640 <memset>
 80061b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061b8:	4620      	mov	r0, r4
 80061ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061bc:	3468      	adds	r4, #104	; 0x68
 80061be:	e7d9      	b.n	8006174 <__sfp+0x1c>
 80061c0:	2104      	movs	r1, #4
 80061c2:	4638      	mov	r0, r7
 80061c4:	f7ff ff62 	bl	800608c <__sfmoreglue>
 80061c8:	4604      	mov	r4, r0
 80061ca:	6030      	str	r0, [r6, #0]
 80061cc:	2800      	cmp	r0, #0
 80061ce:	d1d5      	bne.n	800617c <__sfp+0x24>
 80061d0:	f7ff ff78 	bl	80060c4 <__sfp_lock_release>
 80061d4:	230c      	movs	r3, #12
 80061d6:	603b      	str	r3, [r7, #0]
 80061d8:	e7ee      	b.n	80061b8 <__sfp+0x60>
 80061da:	bf00      	nop
 80061dc:	0800b994 	.word	0x0800b994
 80061e0:	ffff0001 	.word	0xffff0001

080061e4 <_fwalk_reent>:
 80061e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061e8:	4606      	mov	r6, r0
 80061ea:	4688      	mov	r8, r1
 80061ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061f0:	2700      	movs	r7, #0
 80061f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061f6:	f1b9 0901 	subs.w	r9, r9, #1
 80061fa:	d505      	bpl.n	8006208 <_fwalk_reent+0x24>
 80061fc:	6824      	ldr	r4, [r4, #0]
 80061fe:	2c00      	cmp	r4, #0
 8006200:	d1f7      	bne.n	80061f2 <_fwalk_reent+0xe>
 8006202:	4638      	mov	r0, r7
 8006204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006208:	89ab      	ldrh	r3, [r5, #12]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d907      	bls.n	800621e <_fwalk_reent+0x3a>
 800620e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006212:	3301      	adds	r3, #1
 8006214:	d003      	beq.n	800621e <_fwalk_reent+0x3a>
 8006216:	4629      	mov	r1, r5
 8006218:	4630      	mov	r0, r6
 800621a:	47c0      	blx	r8
 800621c:	4307      	orrs	r7, r0
 800621e:	3568      	adds	r5, #104	; 0x68
 8006220:	e7e9      	b.n	80061f6 <_fwalk_reent+0x12>
	...

08006224 <_localeconv_r>:
 8006224:	4800      	ldr	r0, [pc, #0]	; (8006228 <_localeconv_r+0x4>)
 8006226:	4770      	bx	lr
 8006228:	20000164 	.word	0x20000164

0800622c <__retarget_lock_init_recursive>:
 800622c:	4770      	bx	lr

0800622e <__retarget_lock_acquire_recursive>:
 800622e:	4770      	bx	lr

08006230 <__retarget_lock_release_recursive>:
 8006230:	4770      	bx	lr

08006232 <__swhatbuf_r>:
 8006232:	b570      	push	{r4, r5, r6, lr}
 8006234:	460e      	mov	r6, r1
 8006236:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800623a:	2900      	cmp	r1, #0
 800623c:	b096      	sub	sp, #88	; 0x58
 800623e:	4614      	mov	r4, r2
 8006240:	461d      	mov	r5, r3
 8006242:	da08      	bge.n	8006256 <__swhatbuf_r+0x24>
 8006244:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006248:	2200      	movs	r2, #0
 800624a:	602a      	str	r2, [r5, #0]
 800624c:	061a      	lsls	r2, r3, #24
 800624e:	d410      	bmi.n	8006272 <__swhatbuf_r+0x40>
 8006250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006254:	e00e      	b.n	8006274 <__swhatbuf_r+0x42>
 8006256:	466a      	mov	r2, sp
 8006258:	f000 fee0 	bl	800701c <_fstat_r>
 800625c:	2800      	cmp	r0, #0
 800625e:	dbf1      	blt.n	8006244 <__swhatbuf_r+0x12>
 8006260:	9a01      	ldr	r2, [sp, #4]
 8006262:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006266:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800626a:	425a      	negs	r2, r3
 800626c:	415a      	adcs	r2, r3
 800626e:	602a      	str	r2, [r5, #0]
 8006270:	e7ee      	b.n	8006250 <__swhatbuf_r+0x1e>
 8006272:	2340      	movs	r3, #64	; 0x40
 8006274:	2000      	movs	r0, #0
 8006276:	6023      	str	r3, [r4, #0]
 8006278:	b016      	add	sp, #88	; 0x58
 800627a:	bd70      	pop	{r4, r5, r6, pc}

0800627c <__smakebuf_r>:
 800627c:	898b      	ldrh	r3, [r1, #12]
 800627e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006280:	079d      	lsls	r5, r3, #30
 8006282:	4606      	mov	r6, r0
 8006284:	460c      	mov	r4, r1
 8006286:	d507      	bpl.n	8006298 <__smakebuf_r+0x1c>
 8006288:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	6123      	str	r3, [r4, #16]
 8006290:	2301      	movs	r3, #1
 8006292:	6163      	str	r3, [r4, #20]
 8006294:	b002      	add	sp, #8
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	ab01      	add	r3, sp, #4
 800629a:	466a      	mov	r2, sp
 800629c:	f7ff ffc9 	bl	8006232 <__swhatbuf_r>
 80062a0:	9900      	ldr	r1, [sp, #0]
 80062a2:	4605      	mov	r5, r0
 80062a4:	4630      	mov	r0, r6
 80062a6:	f000 fc45 	bl	8006b34 <_malloc_r>
 80062aa:	b948      	cbnz	r0, 80062c0 <__smakebuf_r+0x44>
 80062ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062b0:	059a      	lsls	r2, r3, #22
 80062b2:	d4ef      	bmi.n	8006294 <__smakebuf_r+0x18>
 80062b4:	f023 0303 	bic.w	r3, r3, #3
 80062b8:	f043 0302 	orr.w	r3, r3, #2
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	e7e3      	b.n	8006288 <__smakebuf_r+0xc>
 80062c0:	4b0d      	ldr	r3, [pc, #52]	; (80062f8 <__smakebuf_r+0x7c>)
 80062c2:	62b3      	str	r3, [r6, #40]	; 0x28
 80062c4:	89a3      	ldrh	r3, [r4, #12]
 80062c6:	6020      	str	r0, [r4, #0]
 80062c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	9b00      	ldr	r3, [sp, #0]
 80062d0:	6163      	str	r3, [r4, #20]
 80062d2:	9b01      	ldr	r3, [sp, #4]
 80062d4:	6120      	str	r0, [r4, #16]
 80062d6:	b15b      	cbz	r3, 80062f0 <__smakebuf_r+0x74>
 80062d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062dc:	4630      	mov	r0, r6
 80062de:	f000 feaf 	bl	8007040 <_isatty_r>
 80062e2:	b128      	cbz	r0, 80062f0 <__smakebuf_r+0x74>
 80062e4:	89a3      	ldrh	r3, [r4, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	f043 0301 	orr.w	r3, r3, #1
 80062ee:	81a3      	strh	r3, [r4, #12]
 80062f0:	89a0      	ldrh	r0, [r4, #12]
 80062f2:	4305      	orrs	r5, r0
 80062f4:	81a5      	strh	r5, [r4, #12]
 80062f6:	e7cd      	b.n	8006294 <__smakebuf_r+0x18>
 80062f8:	08006081 	.word	0x08006081

080062fc <malloc>:
 80062fc:	4b02      	ldr	r3, [pc, #8]	; (8006308 <malloc+0xc>)
 80062fe:	4601      	mov	r1, r0
 8006300:	6818      	ldr	r0, [r3, #0]
 8006302:	f000 bc17 	b.w	8006b34 <_malloc_r>
 8006306:	bf00      	nop
 8006308:	20000010 	.word	0x20000010

0800630c <memcpy>:
 800630c:	440a      	add	r2, r1
 800630e:	4291      	cmp	r1, r2
 8006310:	f100 33ff 	add.w	r3, r0, #4294967295
 8006314:	d100      	bne.n	8006318 <memcpy+0xc>
 8006316:	4770      	bx	lr
 8006318:	b510      	push	{r4, lr}
 800631a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800631e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006322:	4291      	cmp	r1, r2
 8006324:	d1f9      	bne.n	800631a <memcpy+0xe>
 8006326:	bd10      	pop	{r4, pc}

08006328 <_Balloc>:
 8006328:	b570      	push	{r4, r5, r6, lr}
 800632a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	b976      	cbnz	r6, 8006350 <_Balloc+0x28>
 8006332:	2010      	movs	r0, #16
 8006334:	f7ff ffe2 	bl	80062fc <malloc>
 8006338:	4602      	mov	r2, r0
 800633a:	6260      	str	r0, [r4, #36]	; 0x24
 800633c:	b920      	cbnz	r0, 8006348 <_Balloc+0x20>
 800633e:	4b18      	ldr	r3, [pc, #96]	; (80063a0 <_Balloc+0x78>)
 8006340:	4818      	ldr	r0, [pc, #96]	; (80063a4 <_Balloc+0x7c>)
 8006342:	2166      	movs	r1, #102	; 0x66
 8006344:	f000 fe2a 	bl	8006f9c <__assert_func>
 8006348:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800634c:	6006      	str	r6, [r0, #0]
 800634e:	60c6      	str	r6, [r0, #12]
 8006350:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006352:	68f3      	ldr	r3, [r6, #12]
 8006354:	b183      	cbz	r3, 8006378 <_Balloc+0x50>
 8006356:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800635e:	b9b8      	cbnz	r0, 8006390 <_Balloc+0x68>
 8006360:	2101      	movs	r1, #1
 8006362:	fa01 f605 	lsl.w	r6, r1, r5
 8006366:	1d72      	adds	r2, r6, #5
 8006368:	0092      	lsls	r2, r2, #2
 800636a:	4620      	mov	r0, r4
 800636c:	f000 fb60 	bl	8006a30 <_calloc_r>
 8006370:	b160      	cbz	r0, 800638c <_Balloc+0x64>
 8006372:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006376:	e00e      	b.n	8006396 <_Balloc+0x6e>
 8006378:	2221      	movs	r2, #33	; 0x21
 800637a:	2104      	movs	r1, #4
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fb57 	bl	8006a30 <_calloc_r>
 8006382:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006384:	60f0      	str	r0, [r6, #12]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d1e4      	bne.n	8006356 <_Balloc+0x2e>
 800638c:	2000      	movs	r0, #0
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	6802      	ldr	r2, [r0, #0]
 8006392:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006396:	2300      	movs	r3, #0
 8006398:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800639c:	e7f7      	b.n	800638e <_Balloc+0x66>
 800639e:	bf00      	nop
 80063a0:	0800b9d9 	.word	0x0800b9d9
 80063a4:	0800babc 	.word	0x0800babc

080063a8 <_Bfree>:
 80063a8:	b570      	push	{r4, r5, r6, lr}
 80063aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063ac:	4605      	mov	r5, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	b976      	cbnz	r6, 80063d0 <_Bfree+0x28>
 80063b2:	2010      	movs	r0, #16
 80063b4:	f7ff ffa2 	bl	80062fc <malloc>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6268      	str	r0, [r5, #36]	; 0x24
 80063bc:	b920      	cbnz	r0, 80063c8 <_Bfree+0x20>
 80063be:	4b09      	ldr	r3, [pc, #36]	; (80063e4 <_Bfree+0x3c>)
 80063c0:	4809      	ldr	r0, [pc, #36]	; (80063e8 <_Bfree+0x40>)
 80063c2:	218a      	movs	r1, #138	; 0x8a
 80063c4:	f000 fdea 	bl	8006f9c <__assert_func>
 80063c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063cc:	6006      	str	r6, [r0, #0]
 80063ce:	60c6      	str	r6, [r0, #12]
 80063d0:	b13c      	cbz	r4, 80063e2 <_Bfree+0x3a>
 80063d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063d4:	6862      	ldr	r2, [r4, #4]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063dc:	6021      	str	r1, [r4, #0]
 80063de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	0800b9d9 	.word	0x0800b9d9
 80063e8:	0800babc 	.word	0x0800babc

080063ec <__multadd>:
 80063ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f0:	690d      	ldr	r5, [r1, #16]
 80063f2:	4607      	mov	r7, r0
 80063f4:	460c      	mov	r4, r1
 80063f6:	461e      	mov	r6, r3
 80063f8:	f101 0c14 	add.w	ip, r1, #20
 80063fc:	2000      	movs	r0, #0
 80063fe:	f8dc 3000 	ldr.w	r3, [ip]
 8006402:	b299      	uxth	r1, r3
 8006404:	fb02 6101 	mla	r1, r2, r1, r6
 8006408:	0c1e      	lsrs	r6, r3, #16
 800640a:	0c0b      	lsrs	r3, r1, #16
 800640c:	fb02 3306 	mla	r3, r2, r6, r3
 8006410:	b289      	uxth	r1, r1
 8006412:	3001      	adds	r0, #1
 8006414:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006418:	4285      	cmp	r5, r0
 800641a:	f84c 1b04 	str.w	r1, [ip], #4
 800641e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006422:	dcec      	bgt.n	80063fe <__multadd+0x12>
 8006424:	b30e      	cbz	r6, 800646a <__multadd+0x7e>
 8006426:	68a3      	ldr	r3, [r4, #8]
 8006428:	42ab      	cmp	r3, r5
 800642a:	dc19      	bgt.n	8006460 <__multadd+0x74>
 800642c:	6861      	ldr	r1, [r4, #4]
 800642e:	4638      	mov	r0, r7
 8006430:	3101      	adds	r1, #1
 8006432:	f7ff ff79 	bl	8006328 <_Balloc>
 8006436:	4680      	mov	r8, r0
 8006438:	b928      	cbnz	r0, 8006446 <__multadd+0x5a>
 800643a:	4602      	mov	r2, r0
 800643c:	4b0c      	ldr	r3, [pc, #48]	; (8006470 <__multadd+0x84>)
 800643e:	480d      	ldr	r0, [pc, #52]	; (8006474 <__multadd+0x88>)
 8006440:	21b5      	movs	r1, #181	; 0xb5
 8006442:	f000 fdab 	bl	8006f9c <__assert_func>
 8006446:	6922      	ldr	r2, [r4, #16]
 8006448:	3202      	adds	r2, #2
 800644a:	f104 010c 	add.w	r1, r4, #12
 800644e:	0092      	lsls	r2, r2, #2
 8006450:	300c      	adds	r0, #12
 8006452:	f7ff ff5b 	bl	800630c <memcpy>
 8006456:	4621      	mov	r1, r4
 8006458:	4638      	mov	r0, r7
 800645a:	f7ff ffa5 	bl	80063a8 <_Bfree>
 800645e:	4644      	mov	r4, r8
 8006460:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006464:	3501      	adds	r5, #1
 8006466:	615e      	str	r6, [r3, #20]
 8006468:	6125      	str	r5, [r4, #16]
 800646a:	4620      	mov	r0, r4
 800646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006470:	0800ba4b 	.word	0x0800ba4b
 8006474:	0800babc 	.word	0x0800babc

08006478 <__hi0bits>:
 8006478:	0c03      	lsrs	r3, r0, #16
 800647a:	041b      	lsls	r3, r3, #16
 800647c:	b9d3      	cbnz	r3, 80064b4 <__hi0bits+0x3c>
 800647e:	0400      	lsls	r0, r0, #16
 8006480:	2310      	movs	r3, #16
 8006482:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006486:	bf04      	itt	eq
 8006488:	0200      	lsleq	r0, r0, #8
 800648a:	3308      	addeq	r3, #8
 800648c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006490:	bf04      	itt	eq
 8006492:	0100      	lsleq	r0, r0, #4
 8006494:	3304      	addeq	r3, #4
 8006496:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800649a:	bf04      	itt	eq
 800649c:	0080      	lsleq	r0, r0, #2
 800649e:	3302      	addeq	r3, #2
 80064a0:	2800      	cmp	r0, #0
 80064a2:	db05      	blt.n	80064b0 <__hi0bits+0x38>
 80064a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80064a8:	f103 0301 	add.w	r3, r3, #1
 80064ac:	bf08      	it	eq
 80064ae:	2320      	moveq	r3, #32
 80064b0:	4618      	mov	r0, r3
 80064b2:	4770      	bx	lr
 80064b4:	2300      	movs	r3, #0
 80064b6:	e7e4      	b.n	8006482 <__hi0bits+0xa>

080064b8 <__lo0bits>:
 80064b8:	6803      	ldr	r3, [r0, #0]
 80064ba:	f013 0207 	ands.w	r2, r3, #7
 80064be:	4601      	mov	r1, r0
 80064c0:	d00b      	beq.n	80064da <__lo0bits+0x22>
 80064c2:	07da      	lsls	r2, r3, #31
 80064c4:	d423      	bmi.n	800650e <__lo0bits+0x56>
 80064c6:	0798      	lsls	r0, r3, #30
 80064c8:	bf49      	itett	mi
 80064ca:	085b      	lsrmi	r3, r3, #1
 80064cc:	089b      	lsrpl	r3, r3, #2
 80064ce:	2001      	movmi	r0, #1
 80064d0:	600b      	strmi	r3, [r1, #0]
 80064d2:	bf5c      	itt	pl
 80064d4:	600b      	strpl	r3, [r1, #0]
 80064d6:	2002      	movpl	r0, #2
 80064d8:	4770      	bx	lr
 80064da:	b298      	uxth	r0, r3
 80064dc:	b9a8      	cbnz	r0, 800650a <__lo0bits+0x52>
 80064de:	0c1b      	lsrs	r3, r3, #16
 80064e0:	2010      	movs	r0, #16
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	b90a      	cbnz	r2, 80064ea <__lo0bits+0x32>
 80064e6:	3008      	adds	r0, #8
 80064e8:	0a1b      	lsrs	r3, r3, #8
 80064ea:	071a      	lsls	r2, r3, #28
 80064ec:	bf04      	itt	eq
 80064ee:	091b      	lsreq	r3, r3, #4
 80064f0:	3004      	addeq	r0, #4
 80064f2:	079a      	lsls	r2, r3, #30
 80064f4:	bf04      	itt	eq
 80064f6:	089b      	lsreq	r3, r3, #2
 80064f8:	3002      	addeq	r0, #2
 80064fa:	07da      	lsls	r2, r3, #31
 80064fc:	d403      	bmi.n	8006506 <__lo0bits+0x4e>
 80064fe:	085b      	lsrs	r3, r3, #1
 8006500:	f100 0001 	add.w	r0, r0, #1
 8006504:	d005      	beq.n	8006512 <__lo0bits+0x5a>
 8006506:	600b      	str	r3, [r1, #0]
 8006508:	4770      	bx	lr
 800650a:	4610      	mov	r0, r2
 800650c:	e7e9      	b.n	80064e2 <__lo0bits+0x2a>
 800650e:	2000      	movs	r0, #0
 8006510:	4770      	bx	lr
 8006512:	2020      	movs	r0, #32
 8006514:	4770      	bx	lr
	...

08006518 <__i2b>:
 8006518:	b510      	push	{r4, lr}
 800651a:	460c      	mov	r4, r1
 800651c:	2101      	movs	r1, #1
 800651e:	f7ff ff03 	bl	8006328 <_Balloc>
 8006522:	4602      	mov	r2, r0
 8006524:	b928      	cbnz	r0, 8006532 <__i2b+0x1a>
 8006526:	4b05      	ldr	r3, [pc, #20]	; (800653c <__i2b+0x24>)
 8006528:	4805      	ldr	r0, [pc, #20]	; (8006540 <__i2b+0x28>)
 800652a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800652e:	f000 fd35 	bl	8006f9c <__assert_func>
 8006532:	2301      	movs	r3, #1
 8006534:	6144      	str	r4, [r0, #20]
 8006536:	6103      	str	r3, [r0, #16]
 8006538:	bd10      	pop	{r4, pc}
 800653a:	bf00      	nop
 800653c:	0800ba4b 	.word	0x0800ba4b
 8006540:	0800babc 	.word	0x0800babc

08006544 <__multiply>:
 8006544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006548:	4691      	mov	r9, r2
 800654a:	690a      	ldr	r2, [r1, #16]
 800654c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006550:	429a      	cmp	r2, r3
 8006552:	bfb8      	it	lt
 8006554:	460b      	movlt	r3, r1
 8006556:	460c      	mov	r4, r1
 8006558:	bfbc      	itt	lt
 800655a:	464c      	movlt	r4, r9
 800655c:	4699      	movlt	r9, r3
 800655e:	6927      	ldr	r7, [r4, #16]
 8006560:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006564:	68a3      	ldr	r3, [r4, #8]
 8006566:	6861      	ldr	r1, [r4, #4]
 8006568:	eb07 060a 	add.w	r6, r7, sl
 800656c:	42b3      	cmp	r3, r6
 800656e:	b085      	sub	sp, #20
 8006570:	bfb8      	it	lt
 8006572:	3101      	addlt	r1, #1
 8006574:	f7ff fed8 	bl	8006328 <_Balloc>
 8006578:	b930      	cbnz	r0, 8006588 <__multiply+0x44>
 800657a:	4602      	mov	r2, r0
 800657c:	4b44      	ldr	r3, [pc, #272]	; (8006690 <__multiply+0x14c>)
 800657e:	4845      	ldr	r0, [pc, #276]	; (8006694 <__multiply+0x150>)
 8006580:	f240 115d 	movw	r1, #349	; 0x15d
 8006584:	f000 fd0a 	bl	8006f9c <__assert_func>
 8006588:	f100 0514 	add.w	r5, r0, #20
 800658c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006590:	462b      	mov	r3, r5
 8006592:	2200      	movs	r2, #0
 8006594:	4543      	cmp	r3, r8
 8006596:	d321      	bcc.n	80065dc <__multiply+0x98>
 8006598:	f104 0314 	add.w	r3, r4, #20
 800659c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065a0:	f109 0314 	add.w	r3, r9, #20
 80065a4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065a8:	9202      	str	r2, [sp, #8]
 80065aa:	1b3a      	subs	r2, r7, r4
 80065ac:	3a15      	subs	r2, #21
 80065ae:	f022 0203 	bic.w	r2, r2, #3
 80065b2:	3204      	adds	r2, #4
 80065b4:	f104 0115 	add.w	r1, r4, #21
 80065b8:	428f      	cmp	r7, r1
 80065ba:	bf38      	it	cc
 80065bc:	2204      	movcc	r2, #4
 80065be:	9201      	str	r2, [sp, #4]
 80065c0:	9a02      	ldr	r2, [sp, #8]
 80065c2:	9303      	str	r3, [sp, #12]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d80c      	bhi.n	80065e2 <__multiply+0x9e>
 80065c8:	2e00      	cmp	r6, #0
 80065ca:	dd03      	ble.n	80065d4 <__multiply+0x90>
 80065cc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d05a      	beq.n	800668a <__multiply+0x146>
 80065d4:	6106      	str	r6, [r0, #16]
 80065d6:	b005      	add	sp, #20
 80065d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065dc:	f843 2b04 	str.w	r2, [r3], #4
 80065e0:	e7d8      	b.n	8006594 <__multiply+0x50>
 80065e2:	f8b3 a000 	ldrh.w	sl, [r3]
 80065e6:	f1ba 0f00 	cmp.w	sl, #0
 80065ea:	d024      	beq.n	8006636 <__multiply+0xf2>
 80065ec:	f104 0e14 	add.w	lr, r4, #20
 80065f0:	46a9      	mov	r9, r5
 80065f2:	f04f 0c00 	mov.w	ip, #0
 80065f6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80065fa:	f8d9 1000 	ldr.w	r1, [r9]
 80065fe:	fa1f fb82 	uxth.w	fp, r2
 8006602:	b289      	uxth	r1, r1
 8006604:	fb0a 110b 	mla	r1, sl, fp, r1
 8006608:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800660c:	f8d9 2000 	ldr.w	r2, [r9]
 8006610:	4461      	add	r1, ip
 8006612:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006616:	fb0a c20b 	mla	r2, sl, fp, ip
 800661a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800661e:	b289      	uxth	r1, r1
 8006620:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006624:	4577      	cmp	r7, lr
 8006626:	f849 1b04 	str.w	r1, [r9], #4
 800662a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800662e:	d8e2      	bhi.n	80065f6 <__multiply+0xb2>
 8006630:	9a01      	ldr	r2, [sp, #4]
 8006632:	f845 c002 	str.w	ip, [r5, r2]
 8006636:	9a03      	ldr	r2, [sp, #12]
 8006638:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800663c:	3304      	adds	r3, #4
 800663e:	f1b9 0f00 	cmp.w	r9, #0
 8006642:	d020      	beq.n	8006686 <__multiply+0x142>
 8006644:	6829      	ldr	r1, [r5, #0]
 8006646:	f104 0c14 	add.w	ip, r4, #20
 800664a:	46ae      	mov	lr, r5
 800664c:	f04f 0a00 	mov.w	sl, #0
 8006650:	f8bc b000 	ldrh.w	fp, [ip]
 8006654:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006658:	fb09 220b 	mla	r2, r9, fp, r2
 800665c:	4492      	add	sl, r2
 800665e:	b289      	uxth	r1, r1
 8006660:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006664:	f84e 1b04 	str.w	r1, [lr], #4
 8006668:	f85c 2b04 	ldr.w	r2, [ip], #4
 800666c:	f8be 1000 	ldrh.w	r1, [lr]
 8006670:	0c12      	lsrs	r2, r2, #16
 8006672:	fb09 1102 	mla	r1, r9, r2, r1
 8006676:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800667a:	4567      	cmp	r7, ip
 800667c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006680:	d8e6      	bhi.n	8006650 <__multiply+0x10c>
 8006682:	9a01      	ldr	r2, [sp, #4]
 8006684:	50a9      	str	r1, [r5, r2]
 8006686:	3504      	adds	r5, #4
 8006688:	e79a      	b.n	80065c0 <__multiply+0x7c>
 800668a:	3e01      	subs	r6, #1
 800668c:	e79c      	b.n	80065c8 <__multiply+0x84>
 800668e:	bf00      	nop
 8006690:	0800ba4b 	.word	0x0800ba4b
 8006694:	0800babc 	.word	0x0800babc

08006698 <__pow5mult>:
 8006698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800669c:	4615      	mov	r5, r2
 800669e:	f012 0203 	ands.w	r2, r2, #3
 80066a2:	4606      	mov	r6, r0
 80066a4:	460f      	mov	r7, r1
 80066a6:	d007      	beq.n	80066b8 <__pow5mult+0x20>
 80066a8:	4c25      	ldr	r4, [pc, #148]	; (8006740 <__pow5mult+0xa8>)
 80066aa:	3a01      	subs	r2, #1
 80066ac:	2300      	movs	r3, #0
 80066ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066b2:	f7ff fe9b 	bl	80063ec <__multadd>
 80066b6:	4607      	mov	r7, r0
 80066b8:	10ad      	asrs	r5, r5, #2
 80066ba:	d03d      	beq.n	8006738 <__pow5mult+0xa0>
 80066bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066be:	b97c      	cbnz	r4, 80066e0 <__pow5mult+0x48>
 80066c0:	2010      	movs	r0, #16
 80066c2:	f7ff fe1b 	bl	80062fc <malloc>
 80066c6:	4602      	mov	r2, r0
 80066c8:	6270      	str	r0, [r6, #36]	; 0x24
 80066ca:	b928      	cbnz	r0, 80066d8 <__pow5mult+0x40>
 80066cc:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <__pow5mult+0xac>)
 80066ce:	481e      	ldr	r0, [pc, #120]	; (8006748 <__pow5mult+0xb0>)
 80066d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066d4:	f000 fc62 	bl	8006f9c <__assert_func>
 80066d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066dc:	6004      	str	r4, [r0, #0]
 80066de:	60c4      	str	r4, [r0, #12]
 80066e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066e8:	b94c      	cbnz	r4, 80066fe <__pow5mult+0x66>
 80066ea:	f240 2171 	movw	r1, #625	; 0x271
 80066ee:	4630      	mov	r0, r6
 80066f0:	f7ff ff12 	bl	8006518 <__i2b>
 80066f4:	2300      	movs	r3, #0
 80066f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80066fa:	4604      	mov	r4, r0
 80066fc:	6003      	str	r3, [r0, #0]
 80066fe:	f04f 0900 	mov.w	r9, #0
 8006702:	07eb      	lsls	r3, r5, #31
 8006704:	d50a      	bpl.n	800671c <__pow5mult+0x84>
 8006706:	4639      	mov	r1, r7
 8006708:	4622      	mov	r2, r4
 800670a:	4630      	mov	r0, r6
 800670c:	f7ff ff1a 	bl	8006544 <__multiply>
 8006710:	4639      	mov	r1, r7
 8006712:	4680      	mov	r8, r0
 8006714:	4630      	mov	r0, r6
 8006716:	f7ff fe47 	bl	80063a8 <_Bfree>
 800671a:	4647      	mov	r7, r8
 800671c:	106d      	asrs	r5, r5, #1
 800671e:	d00b      	beq.n	8006738 <__pow5mult+0xa0>
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	b938      	cbnz	r0, 8006734 <__pow5mult+0x9c>
 8006724:	4622      	mov	r2, r4
 8006726:	4621      	mov	r1, r4
 8006728:	4630      	mov	r0, r6
 800672a:	f7ff ff0b 	bl	8006544 <__multiply>
 800672e:	6020      	str	r0, [r4, #0]
 8006730:	f8c0 9000 	str.w	r9, [r0]
 8006734:	4604      	mov	r4, r0
 8006736:	e7e4      	b.n	8006702 <__pow5mult+0x6a>
 8006738:	4638      	mov	r0, r7
 800673a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800673e:	bf00      	nop
 8006740:	0800bc08 	.word	0x0800bc08
 8006744:	0800b9d9 	.word	0x0800b9d9
 8006748:	0800babc 	.word	0x0800babc

0800674c <__lshift>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	460c      	mov	r4, r1
 8006752:	6849      	ldr	r1, [r1, #4]
 8006754:	6923      	ldr	r3, [r4, #16]
 8006756:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800675a:	68a3      	ldr	r3, [r4, #8]
 800675c:	4607      	mov	r7, r0
 800675e:	4691      	mov	r9, r2
 8006760:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006764:	f108 0601 	add.w	r6, r8, #1
 8006768:	42b3      	cmp	r3, r6
 800676a:	db0b      	blt.n	8006784 <__lshift+0x38>
 800676c:	4638      	mov	r0, r7
 800676e:	f7ff fddb 	bl	8006328 <_Balloc>
 8006772:	4605      	mov	r5, r0
 8006774:	b948      	cbnz	r0, 800678a <__lshift+0x3e>
 8006776:	4602      	mov	r2, r0
 8006778:	4b2a      	ldr	r3, [pc, #168]	; (8006824 <__lshift+0xd8>)
 800677a:	482b      	ldr	r0, [pc, #172]	; (8006828 <__lshift+0xdc>)
 800677c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006780:	f000 fc0c 	bl	8006f9c <__assert_func>
 8006784:	3101      	adds	r1, #1
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	e7ee      	b.n	8006768 <__lshift+0x1c>
 800678a:	2300      	movs	r3, #0
 800678c:	f100 0114 	add.w	r1, r0, #20
 8006790:	f100 0210 	add.w	r2, r0, #16
 8006794:	4618      	mov	r0, r3
 8006796:	4553      	cmp	r3, sl
 8006798:	db37      	blt.n	800680a <__lshift+0xbe>
 800679a:	6920      	ldr	r0, [r4, #16]
 800679c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067a0:	f104 0314 	add.w	r3, r4, #20
 80067a4:	f019 091f 	ands.w	r9, r9, #31
 80067a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067ac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067b0:	d02f      	beq.n	8006812 <__lshift+0xc6>
 80067b2:	f1c9 0e20 	rsb	lr, r9, #32
 80067b6:	468a      	mov	sl, r1
 80067b8:	f04f 0c00 	mov.w	ip, #0
 80067bc:	681a      	ldr	r2, [r3, #0]
 80067be:	fa02 f209 	lsl.w	r2, r2, r9
 80067c2:	ea42 020c 	orr.w	r2, r2, ip
 80067c6:	f84a 2b04 	str.w	r2, [sl], #4
 80067ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ce:	4298      	cmp	r0, r3
 80067d0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80067d4:	d8f2      	bhi.n	80067bc <__lshift+0x70>
 80067d6:	1b03      	subs	r3, r0, r4
 80067d8:	3b15      	subs	r3, #21
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	3304      	adds	r3, #4
 80067e0:	f104 0215 	add.w	r2, r4, #21
 80067e4:	4290      	cmp	r0, r2
 80067e6:	bf38      	it	cc
 80067e8:	2304      	movcc	r3, #4
 80067ea:	f841 c003 	str.w	ip, [r1, r3]
 80067ee:	f1bc 0f00 	cmp.w	ip, #0
 80067f2:	d001      	beq.n	80067f8 <__lshift+0xac>
 80067f4:	f108 0602 	add.w	r6, r8, #2
 80067f8:	3e01      	subs	r6, #1
 80067fa:	4638      	mov	r0, r7
 80067fc:	612e      	str	r6, [r5, #16]
 80067fe:	4621      	mov	r1, r4
 8006800:	f7ff fdd2 	bl	80063a8 <_Bfree>
 8006804:	4628      	mov	r0, r5
 8006806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800680a:	f842 0f04 	str.w	r0, [r2, #4]!
 800680e:	3301      	adds	r3, #1
 8006810:	e7c1      	b.n	8006796 <__lshift+0x4a>
 8006812:	3904      	subs	r1, #4
 8006814:	f853 2b04 	ldr.w	r2, [r3], #4
 8006818:	f841 2f04 	str.w	r2, [r1, #4]!
 800681c:	4298      	cmp	r0, r3
 800681e:	d8f9      	bhi.n	8006814 <__lshift+0xc8>
 8006820:	e7ea      	b.n	80067f8 <__lshift+0xac>
 8006822:	bf00      	nop
 8006824:	0800ba4b 	.word	0x0800ba4b
 8006828:	0800babc 	.word	0x0800babc

0800682c <__mcmp>:
 800682c:	b530      	push	{r4, r5, lr}
 800682e:	6902      	ldr	r2, [r0, #16]
 8006830:	690c      	ldr	r4, [r1, #16]
 8006832:	1b12      	subs	r2, r2, r4
 8006834:	d10e      	bne.n	8006854 <__mcmp+0x28>
 8006836:	f100 0314 	add.w	r3, r0, #20
 800683a:	3114      	adds	r1, #20
 800683c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006840:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006844:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006848:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800684c:	42a5      	cmp	r5, r4
 800684e:	d003      	beq.n	8006858 <__mcmp+0x2c>
 8006850:	d305      	bcc.n	800685e <__mcmp+0x32>
 8006852:	2201      	movs	r2, #1
 8006854:	4610      	mov	r0, r2
 8006856:	bd30      	pop	{r4, r5, pc}
 8006858:	4283      	cmp	r3, r0
 800685a:	d3f3      	bcc.n	8006844 <__mcmp+0x18>
 800685c:	e7fa      	b.n	8006854 <__mcmp+0x28>
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	e7f7      	b.n	8006854 <__mcmp+0x28>

08006864 <__mdiff>:
 8006864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006868:	460c      	mov	r4, r1
 800686a:	4606      	mov	r6, r0
 800686c:	4611      	mov	r1, r2
 800686e:	4620      	mov	r0, r4
 8006870:	4690      	mov	r8, r2
 8006872:	f7ff ffdb 	bl	800682c <__mcmp>
 8006876:	1e05      	subs	r5, r0, #0
 8006878:	d110      	bne.n	800689c <__mdiff+0x38>
 800687a:	4629      	mov	r1, r5
 800687c:	4630      	mov	r0, r6
 800687e:	f7ff fd53 	bl	8006328 <_Balloc>
 8006882:	b930      	cbnz	r0, 8006892 <__mdiff+0x2e>
 8006884:	4b3a      	ldr	r3, [pc, #232]	; (8006970 <__mdiff+0x10c>)
 8006886:	4602      	mov	r2, r0
 8006888:	f240 2132 	movw	r1, #562	; 0x232
 800688c:	4839      	ldr	r0, [pc, #228]	; (8006974 <__mdiff+0x110>)
 800688e:	f000 fb85 	bl	8006f9c <__assert_func>
 8006892:	2301      	movs	r3, #1
 8006894:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800689c:	bfa4      	itt	ge
 800689e:	4643      	movge	r3, r8
 80068a0:	46a0      	movge	r8, r4
 80068a2:	4630      	mov	r0, r6
 80068a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068a8:	bfa6      	itte	ge
 80068aa:	461c      	movge	r4, r3
 80068ac:	2500      	movge	r5, #0
 80068ae:	2501      	movlt	r5, #1
 80068b0:	f7ff fd3a 	bl	8006328 <_Balloc>
 80068b4:	b920      	cbnz	r0, 80068c0 <__mdiff+0x5c>
 80068b6:	4b2e      	ldr	r3, [pc, #184]	; (8006970 <__mdiff+0x10c>)
 80068b8:	4602      	mov	r2, r0
 80068ba:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068be:	e7e5      	b.n	800688c <__mdiff+0x28>
 80068c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068c4:	6926      	ldr	r6, [r4, #16]
 80068c6:	60c5      	str	r5, [r0, #12]
 80068c8:	f104 0914 	add.w	r9, r4, #20
 80068cc:	f108 0514 	add.w	r5, r8, #20
 80068d0:	f100 0e14 	add.w	lr, r0, #20
 80068d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80068d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068dc:	f108 0210 	add.w	r2, r8, #16
 80068e0:	46f2      	mov	sl, lr
 80068e2:	2100      	movs	r1, #0
 80068e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80068e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80068ec:	fa1f f883 	uxth.w	r8, r3
 80068f0:	fa11 f18b 	uxtah	r1, r1, fp
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	eba1 0808 	sub.w	r8, r1, r8
 80068fa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068fe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006902:	fa1f f888 	uxth.w	r8, r8
 8006906:	1419      	asrs	r1, r3, #16
 8006908:	454e      	cmp	r6, r9
 800690a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800690e:	f84a 3b04 	str.w	r3, [sl], #4
 8006912:	d8e7      	bhi.n	80068e4 <__mdiff+0x80>
 8006914:	1b33      	subs	r3, r6, r4
 8006916:	3b15      	subs	r3, #21
 8006918:	f023 0303 	bic.w	r3, r3, #3
 800691c:	3304      	adds	r3, #4
 800691e:	3415      	adds	r4, #21
 8006920:	42a6      	cmp	r6, r4
 8006922:	bf38      	it	cc
 8006924:	2304      	movcc	r3, #4
 8006926:	441d      	add	r5, r3
 8006928:	4473      	add	r3, lr
 800692a:	469e      	mov	lr, r3
 800692c:	462e      	mov	r6, r5
 800692e:	4566      	cmp	r6, ip
 8006930:	d30e      	bcc.n	8006950 <__mdiff+0xec>
 8006932:	f10c 0203 	add.w	r2, ip, #3
 8006936:	1b52      	subs	r2, r2, r5
 8006938:	f022 0203 	bic.w	r2, r2, #3
 800693c:	3d03      	subs	r5, #3
 800693e:	45ac      	cmp	ip, r5
 8006940:	bf38      	it	cc
 8006942:	2200      	movcc	r2, #0
 8006944:	441a      	add	r2, r3
 8006946:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800694a:	b17b      	cbz	r3, 800696c <__mdiff+0x108>
 800694c:	6107      	str	r7, [r0, #16]
 800694e:	e7a3      	b.n	8006898 <__mdiff+0x34>
 8006950:	f856 8b04 	ldr.w	r8, [r6], #4
 8006954:	fa11 f288 	uxtah	r2, r1, r8
 8006958:	1414      	asrs	r4, r2, #16
 800695a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800695e:	b292      	uxth	r2, r2
 8006960:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006964:	f84e 2b04 	str.w	r2, [lr], #4
 8006968:	1421      	asrs	r1, r4, #16
 800696a:	e7e0      	b.n	800692e <__mdiff+0xca>
 800696c:	3f01      	subs	r7, #1
 800696e:	e7ea      	b.n	8006946 <__mdiff+0xe2>
 8006970:	0800ba4b 	.word	0x0800ba4b
 8006974:	0800babc 	.word	0x0800babc

08006978 <__d2b>:
 8006978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800697c:	4689      	mov	r9, r1
 800697e:	2101      	movs	r1, #1
 8006980:	ec57 6b10 	vmov	r6, r7, d0
 8006984:	4690      	mov	r8, r2
 8006986:	f7ff fccf 	bl	8006328 <_Balloc>
 800698a:	4604      	mov	r4, r0
 800698c:	b930      	cbnz	r0, 800699c <__d2b+0x24>
 800698e:	4602      	mov	r2, r0
 8006990:	4b25      	ldr	r3, [pc, #148]	; (8006a28 <__d2b+0xb0>)
 8006992:	4826      	ldr	r0, [pc, #152]	; (8006a2c <__d2b+0xb4>)
 8006994:	f240 310a 	movw	r1, #778	; 0x30a
 8006998:	f000 fb00 	bl	8006f9c <__assert_func>
 800699c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80069a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069a4:	bb35      	cbnz	r5, 80069f4 <__d2b+0x7c>
 80069a6:	2e00      	cmp	r6, #0
 80069a8:	9301      	str	r3, [sp, #4]
 80069aa:	d028      	beq.n	80069fe <__d2b+0x86>
 80069ac:	4668      	mov	r0, sp
 80069ae:	9600      	str	r6, [sp, #0]
 80069b0:	f7ff fd82 	bl	80064b8 <__lo0bits>
 80069b4:	9900      	ldr	r1, [sp, #0]
 80069b6:	b300      	cbz	r0, 80069fa <__d2b+0x82>
 80069b8:	9a01      	ldr	r2, [sp, #4]
 80069ba:	f1c0 0320 	rsb	r3, r0, #32
 80069be:	fa02 f303 	lsl.w	r3, r2, r3
 80069c2:	430b      	orrs	r3, r1
 80069c4:	40c2      	lsrs	r2, r0
 80069c6:	6163      	str	r3, [r4, #20]
 80069c8:	9201      	str	r2, [sp, #4]
 80069ca:	9b01      	ldr	r3, [sp, #4]
 80069cc:	61a3      	str	r3, [r4, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	bf14      	ite	ne
 80069d2:	2202      	movne	r2, #2
 80069d4:	2201      	moveq	r2, #1
 80069d6:	6122      	str	r2, [r4, #16]
 80069d8:	b1d5      	cbz	r5, 8006a10 <__d2b+0x98>
 80069da:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069de:	4405      	add	r5, r0
 80069e0:	f8c9 5000 	str.w	r5, [r9]
 80069e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80069e8:	f8c8 0000 	str.w	r0, [r8]
 80069ec:	4620      	mov	r0, r4
 80069ee:	b003      	add	sp, #12
 80069f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069f8:	e7d5      	b.n	80069a6 <__d2b+0x2e>
 80069fa:	6161      	str	r1, [r4, #20]
 80069fc:	e7e5      	b.n	80069ca <__d2b+0x52>
 80069fe:	a801      	add	r0, sp, #4
 8006a00:	f7ff fd5a 	bl	80064b8 <__lo0bits>
 8006a04:	9b01      	ldr	r3, [sp, #4]
 8006a06:	6163      	str	r3, [r4, #20]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	6122      	str	r2, [r4, #16]
 8006a0c:	3020      	adds	r0, #32
 8006a0e:	e7e3      	b.n	80069d8 <__d2b+0x60>
 8006a10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a18:	f8c9 0000 	str.w	r0, [r9]
 8006a1c:	6918      	ldr	r0, [r3, #16]
 8006a1e:	f7ff fd2b 	bl	8006478 <__hi0bits>
 8006a22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a26:	e7df      	b.n	80069e8 <__d2b+0x70>
 8006a28:	0800ba4b 	.word	0x0800ba4b
 8006a2c:	0800babc 	.word	0x0800babc

08006a30 <_calloc_r>:
 8006a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a32:	fba1 2402 	umull	r2, r4, r1, r2
 8006a36:	b94c      	cbnz	r4, 8006a4c <_calloc_r+0x1c>
 8006a38:	4611      	mov	r1, r2
 8006a3a:	9201      	str	r2, [sp, #4]
 8006a3c:	f000 f87a 	bl	8006b34 <_malloc_r>
 8006a40:	9a01      	ldr	r2, [sp, #4]
 8006a42:	4605      	mov	r5, r0
 8006a44:	b930      	cbnz	r0, 8006a54 <_calloc_r+0x24>
 8006a46:	4628      	mov	r0, r5
 8006a48:	b003      	add	sp, #12
 8006a4a:	bd30      	pop	{r4, r5, pc}
 8006a4c:	220c      	movs	r2, #12
 8006a4e:	6002      	str	r2, [r0, #0]
 8006a50:	2500      	movs	r5, #0
 8006a52:	e7f8      	b.n	8006a46 <_calloc_r+0x16>
 8006a54:	4621      	mov	r1, r4
 8006a56:	f7fd fdf3 	bl	8004640 <memset>
 8006a5a:	e7f4      	b.n	8006a46 <_calloc_r+0x16>

08006a5c <_free_r>:
 8006a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a5e:	2900      	cmp	r1, #0
 8006a60:	d044      	beq.n	8006aec <_free_r+0x90>
 8006a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a66:	9001      	str	r0, [sp, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a6e:	bfb8      	it	lt
 8006a70:	18e4      	addlt	r4, r4, r3
 8006a72:	f000 fb19 	bl	80070a8 <__malloc_lock>
 8006a76:	4a1e      	ldr	r2, [pc, #120]	; (8006af0 <_free_r+0x94>)
 8006a78:	9801      	ldr	r0, [sp, #4]
 8006a7a:	6813      	ldr	r3, [r2, #0]
 8006a7c:	b933      	cbnz	r3, 8006a8c <_free_r+0x30>
 8006a7e:	6063      	str	r3, [r4, #4]
 8006a80:	6014      	str	r4, [r2, #0]
 8006a82:	b003      	add	sp, #12
 8006a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a88:	f000 bb14 	b.w	80070b4 <__malloc_unlock>
 8006a8c:	42a3      	cmp	r3, r4
 8006a8e:	d908      	bls.n	8006aa2 <_free_r+0x46>
 8006a90:	6825      	ldr	r5, [r4, #0]
 8006a92:	1961      	adds	r1, r4, r5
 8006a94:	428b      	cmp	r3, r1
 8006a96:	bf01      	itttt	eq
 8006a98:	6819      	ldreq	r1, [r3, #0]
 8006a9a:	685b      	ldreq	r3, [r3, #4]
 8006a9c:	1949      	addeq	r1, r1, r5
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	e7ed      	b.n	8006a7e <_free_r+0x22>
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	b10b      	cbz	r3, 8006aac <_free_r+0x50>
 8006aa8:	42a3      	cmp	r3, r4
 8006aaa:	d9fa      	bls.n	8006aa2 <_free_r+0x46>
 8006aac:	6811      	ldr	r1, [r2, #0]
 8006aae:	1855      	adds	r5, r2, r1
 8006ab0:	42a5      	cmp	r5, r4
 8006ab2:	d10b      	bne.n	8006acc <_free_r+0x70>
 8006ab4:	6824      	ldr	r4, [r4, #0]
 8006ab6:	4421      	add	r1, r4
 8006ab8:	1854      	adds	r4, r2, r1
 8006aba:	42a3      	cmp	r3, r4
 8006abc:	6011      	str	r1, [r2, #0]
 8006abe:	d1e0      	bne.n	8006a82 <_free_r+0x26>
 8006ac0:	681c      	ldr	r4, [r3, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	6053      	str	r3, [r2, #4]
 8006ac6:	4421      	add	r1, r4
 8006ac8:	6011      	str	r1, [r2, #0]
 8006aca:	e7da      	b.n	8006a82 <_free_r+0x26>
 8006acc:	d902      	bls.n	8006ad4 <_free_r+0x78>
 8006ace:	230c      	movs	r3, #12
 8006ad0:	6003      	str	r3, [r0, #0]
 8006ad2:	e7d6      	b.n	8006a82 <_free_r+0x26>
 8006ad4:	6825      	ldr	r5, [r4, #0]
 8006ad6:	1961      	adds	r1, r4, r5
 8006ad8:	428b      	cmp	r3, r1
 8006ada:	bf04      	itt	eq
 8006adc:	6819      	ldreq	r1, [r3, #0]
 8006ade:	685b      	ldreq	r3, [r3, #4]
 8006ae0:	6063      	str	r3, [r4, #4]
 8006ae2:	bf04      	itt	eq
 8006ae4:	1949      	addeq	r1, r1, r5
 8006ae6:	6021      	streq	r1, [r4, #0]
 8006ae8:	6054      	str	r4, [r2, #4]
 8006aea:	e7ca      	b.n	8006a82 <_free_r+0x26>
 8006aec:	b003      	add	sp, #12
 8006aee:	bd30      	pop	{r4, r5, pc}
 8006af0:	20003ca4 	.word	0x20003ca4

08006af4 <sbrk_aligned>:
 8006af4:	b570      	push	{r4, r5, r6, lr}
 8006af6:	4e0e      	ldr	r6, [pc, #56]	; (8006b30 <sbrk_aligned+0x3c>)
 8006af8:	460c      	mov	r4, r1
 8006afa:	6831      	ldr	r1, [r6, #0]
 8006afc:	4605      	mov	r5, r0
 8006afe:	b911      	cbnz	r1, 8006b06 <sbrk_aligned+0x12>
 8006b00:	f000 f9e6 	bl	8006ed0 <_sbrk_r>
 8006b04:	6030      	str	r0, [r6, #0]
 8006b06:	4621      	mov	r1, r4
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f000 f9e1 	bl	8006ed0 <_sbrk_r>
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	d00a      	beq.n	8006b28 <sbrk_aligned+0x34>
 8006b12:	1cc4      	adds	r4, r0, #3
 8006b14:	f024 0403 	bic.w	r4, r4, #3
 8006b18:	42a0      	cmp	r0, r4
 8006b1a:	d007      	beq.n	8006b2c <sbrk_aligned+0x38>
 8006b1c:	1a21      	subs	r1, r4, r0
 8006b1e:	4628      	mov	r0, r5
 8006b20:	f000 f9d6 	bl	8006ed0 <_sbrk_r>
 8006b24:	3001      	adds	r0, #1
 8006b26:	d101      	bne.n	8006b2c <sbrk_aligned+0x38>
 8006b28:	f04f 34ff 	mov.w	r4, #4294967295
 8006b2c:	4620      	mov	r0, r4
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	20003ca8 	.word	0x20003ca8

08006b34 <_malloc_r>:
 8006b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b38:	1ccd      	adds	r5, r1, #3
 8006b3a:	f025 0503 	bic.w	r5, r5, #3
 8006b3e:	3508      	adds	r5, #8
 8006b40:	2d0c      	cmp	r5, #12
 8006b42:	bf38      	it	cc
 8006b44:	250c      	movcc	r5, #12
 8006b46:	2d00      	cmp	r5, #0
 8006b48:	4607      	mov	r7, r0
 8006b4a:	db01      	blt.n	8006b50 <_malloc_r+0x1c>
 8006b4c:	42a9      	cmp	r1, r5
 8006b4e:	d905      	bls.n	8006b5c <_malloc_r+0x28>
 8006b50:	230c      	movs	r3, #12
 8006b52:	603b      	str	r3, [r7, #0]
 8006b54:	2600      	movs	r6, #0
 8006b56:	4630      	mov	r0, r6
 8006b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b5c:	4e2e      	ldr	r6, [pc, #184]	; (8006c18 <_malloc_r+0xe4>)
 8006b5e:	f000 faa3 	bl	80070a8 <__malloc_lock>
 8006b62:	6833      	ldr	r3, [r6, #0]
 8006b64:	461c      	mov	r4, r3
 8006b66:	bb34      	cbnz	r4, 8006bb6 <_malloc_r+0x82>
 8006b68:	4629      	mov	r1, r5
 8006b6a:	4638      	mov	r0, r7
 8006b6c:	f7ff ffc2 	bl	8006af4 <sbrk_aligned>
 8006b70:	1c43      	adds	r3, r0, #1
 8006b72:	4604      	mov	r4, r0
 8006b74:	d14d      	bne.n	8006c12 <_malloc_r+0xde>
 8006b76:	6834      	ldr	r4, [r6, #0]
 8006b78:	4626      	mov	r6, r4
 8006b7a:	2e00      	cmp	r6, #0
 8006b7c:	d140      	bne.n	8006c00 <_malloc_r+0xcc>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	4631      	mov	r1, r6
 8006b82:	4638      	mov	r0, r7
 8006b84:	eb04 0803 	add.w	r8, r4, r3
 8006b88:	f000 f9a2 	bl	8006ed0 <_sbrk_r>
 8006b8c:	4580      	cmp	r8, r0
 8006b8e:	d13a      	bne.n	8006c06 <_malloc_r+0xd2>
 8006b90:	6821      	ldr	r1, [r4, #0]
 8006b92:	3503      	adds	r5, #3
 8006b94:	1a6d      	subs	r5, r5, r1
 8006b96:	f025 0503 	bic.w	r5, r5, #3
 8006b9a:	3508      	adds	r5, #8
 8006b9c:	2d0c      	cmp	r5, #12
 8006b9e:	bf38      	it	cc
 8006ba0:	250c      	movcc	r5, #12
 8006ba2:	4629      	mov	r1, r5
 8006ba4:	4638      	mov	r0, r7
 8006ba6:	f7ff ffa5 	bl	8006af4 <sbrk_aligned>
 8006baa:	3001      	adds	r0, #1
 8006bac:	d02b      	beq.n	8006c06 <_malloc_r+0xd2>
 8006bae:	6823      	ldr	r3, [r4, #0]
 8006bb0:	442b      	add	r3, r5
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	e00e      	b.n	8006bd4 <_malloc_r+0xa0>
 8006bb6:	6822      	ldr	r2, [r4, #0]
 8006bb8:	1b52      	subs	r2, r2, r5
 8006bba:	d41e      	bmi.n	8006bfa <_malloc_r+0xc6>
 8006bbc:	2a0b      	cmp	r2, #11
 8006bbe:	d916      	bls.n	8006bee <_malloc_r+0xba>
 8006bc0:	1961      	adds	r1, r4, r5
 8006bc2:	42a3      	cmp	r3, r4
 8006bc4:	6025      	str	r5, [r4, #0]
 8006bc6:	bf18      	it	ne
 8006bc8:	6059      	strne	r1, [r3, #4]
 8006bca:	6863      	ldr	r3, [r4, #4]
 8006bcc:	bf08      	it	eq
 8006bce:	6031      	streq	r1, [r6, #0]
 8006bd0:	5162      	str	r2, [r4, r5]
 8006bd2:	604b      	str	r3, [r1, #4]
 8006bd4:	4638      	mov	r0, r7
 8006bd6:	f104 060b 	add.w	r6, r4, #11
 8006bda:	f000 fa6b 	bl	80070b4 <__malloc_unlock>
 8006bde:	f026 0607 	bic.w	r6, r6, #7
 8006be2:	1d23      	adds	r3, r4, #4
 8006be4:	1af2      	subs	r2, r6, r3
 8006be6:	d0b6      	beq.n	8006b56 <_malloc_r+0x22>
 8006be8:	1b9b      	subs	r3, r3, r6
 8006bea:	50a3      	str	r3, [r4, r2]
 8006bec:	e7b3      	b.n	8006b56 <_malloc_r+0x22>
 8006bee:	6862      	ldr	r2, [r4, #4]
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	bf0c      	ite	eq
 8006bf4:	6032      	streq	r2, [r6, #0]
 8006bf6:	605a      	strne	r2, [r3, #4]
 8006bf8:	e7ec      	b.n	8006bd4 <_malloc_r+0xa0>
 8006bfa:	4623      	mov	r3, r4
 8006bfc:	6864      	ldr	r4, [r4, #4]
 8006bfe:	e7b2      	b.n	8006b66 <_malloc_r+0x32>
 8006c00:	4634      	mov	r4, r6
 8006c02:	6876      	ldr	r6, [r6, #4]
 8006c04:	e7b9      	b.n	8006b7a <_malloc_r+0x46>
 8006c06:	230c      	movs	r3, #12
 8006c08:	603b      	str	r3, [r7, #0]
 8006c0a:	4638      	mov	r0, r7
 8006c0c:	f000 fa52 	bl	80070b4 <__malloc_unlock>
 8006c10:	e7a1      	b.n	8006b56 <_malloc_r+0x22>
 8006c12:	6025      	str	r5, [r4, #0]
 8006c14:	e7de      	b.n	8006bd4 <_malloc_r+0xa0>
 8006c16:	bf00      	nop
 8006c18:	20003ca4 	.word	0x20003ca4

08006c1c <__sfputc_r>:
 8006c1c:	6893      	ldr	r3, [r2, #8]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	b410      	push	{r4}
 8006c24:	6093      	str	r3, [r2, #8]
 8006c26:	da08      	bge.n	8006c3a <__sfputc_r+0x1e>
 8006c28:	6994      	ldr	r4, [r2, #24]
 8006c2a:	42a3      	cmp	r3, r4
 8006c2c:	db01      	blt.n	8006c32 <__sfputc_r+0x16>
 8006c2e:	290a      	cmp	r1, #10
 8006c30:	d103      	bne.n	8006c3a <__sfputc_r+0x1e>
 8006c32:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c36:	f7fe ba03 	b.w	8005040 <__swbuf_r>
 8006c3a:	6813      	ldr	r3, [r2, #0]
 8006c3c:	1c58      	adds	r0, r3, #1
 8006c3e:	6010      	str	r0, [r2, #0]
 8006c40:	7019      	strb	r1, [r3, #0]
 8006c42:	4608      	mov	r0, r1
 8006c44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <__sfputs_r>:
 8006c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	460f      	mov	r7, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	18d5      	adds	r5, r2, r3
 8006c54:	42ac      	cmp	r4, r5
 8006c56:	d101      	bne.n	8006c5c <__sfputs_r+0x12>
 8006c58:	2000      	movs	r0, #0
 8006c5a:	e007      	b.n	8006c6c <__sfputs_r+0x22>
 8006c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c60:	463a      	mov	r2, r7
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ffda 	bl	8006c1c <__sfputc_r>
 8006c68:	1c43      	adds	r3, r0, #1
 8006c6a:	d1f3      	bne.n	8006c54 <__sfputs_r+0xa>
 8006c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c70 <_vfiprintf_r>:
 8006c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c74:	460d      	mov	r5, r1
 8006c76:	b09d      	sub	sp, #116	; 0x74
 8006c78:	4614      	mov	r4, r2
 8006c7a:	4698      	mov	r8, r3
 8006c7c:	4606      	mov	r6, r0
 8006c7e:	b118      	cbz	r0, 8006c88 <_vfiprintf_r+0x18>
 8006c80:	6983      	ldr	r3, [r0, #24]
 8006c82:	b90b      	cbnz	r3, 8006c88 <_vfiprintf_r+0x18>
 8006c84:	f7ff fa30 	bl	80060e8 <__sinit>
 8006c88:	4b89      	ldr	r3, [pc, #548]	; (8006eb0 <_vfiprintf_r+0x240>)
 8006c8a:	429d      	cmp	r5, r3
 8006c8c:	d11b      	bne.n	8006cc6 <_vfiprintf_r+0x56>
 8006c8e:	6875      	ldr	r5, [r6, #4]
 8006c90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c92:	07d9      	lsls	r1, r3, #31
 8006c94:	d405      	bmi.n	8006ca2 <_vfiprintf_r+0x32>
 8006c96:	89ab      	ldrh	r3, [r5, #12]
 8006c98:	059a      	lsls	r2, r3, #22
 8006c9a:	d402      	bmi.n	8006ca2 <_vfiprintf_r+0x32>
 8006c9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c9e:	f7ff fac6 	bl	800622e <__retarget_lock_acquire_recursive>
 8006ca2:	89ab      	ldrh	r3, [r5, #12]
 8006ca4:	071b      	lsls	r3, r3, #28
 8006ca6:	d501      	bpl.n	8006cac <_vfiprintf_r+0x3c>
 8006ca8:	692b      	ldr	r3, [r5, #16]
 8006caa:	b9eb      	cbnz	r3, 8006ce8 <_vfiprintf_r+0x78>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7fe fa18 	bl	80050e4 <__swsetup_r>
 8006cb4:	b1c0      	cbz	r0, 8006ce8 <_vfiprintf_r+0x78>
 8006cb6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006cb8:	07dc      	lsls	r4, r3, #31
 8006cba:	d50e      	bpl.n	8006cda <_vfiprintf_r+0x6a>
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	b01d      	add	sp, #116	; 0x74
 8006cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc6:	4b7b      	ldr	r3, [pc, #492]	; (8006eb4 <_vfiprintf_r+0x244>)
 8006cc8:	429d      	cmp	r5, r3
 8006cca:	d101      	bne.n	8006cd0 <_vfiprintf_r+0x60>
 8006ccc:	68b5      	ldr	r5, [r6, #8]
 8006cce:	e7df      	b.n	8006c90 <_vfiprintf_r+0x20>
 8006cd0:	4b79      	ldr	r3, [pc, #484]	; (8006eb8 <_vfiprintf_r+0x248>)
 8006cd2:	429d      	cmp	r5, r3
 8006cd4:	bf08      	it	eq
 8006cd6:	68f5      	ldreq	r5, [r6, #12]
 8006cd8:	e7da      	b.n	8006c90 <_vfiprintf_r+0x20>
 8006cda:	89ab      	ldrh	r3, [r5, #12]
 8006cdc:	0598      	lsls	r0, r3, #22
 8006cde:	d4ed      	bmi.n	8006cbc <_vfiprintf_r+0x4c>
 8006ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ce2:	f7ff faa5 	bl	8006230 <__retarget_lock_release_recursive>
 8006ce6:	e7e9      	b.n	8006cbc <_vfiprintf_r+0x4c>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	9309      	str	r3, [sp, #36]	; 0x24
 8006cec:	2320      	movs	r3, #32
 8006cee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006cf2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006cf6:	2330      	movs	r3, #48	; 0x30
 8006cf8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006ebc <_vfiprintf_r+0x24c>
 8006cfc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d00:	f04f 0901 	mov.w	r9, #1
 8006d04:	4623      	mov	r3, r4
 8006d06:	469a      	mov	sl, r3
 8006d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d0c:	b10a      	cbz	r2, 8006d12 <_vfiprintf_r+0xa2>
 8006d0e:	2a25      	cmp	r2, #37	; 0x25
 8006d10:	d1f9      	bne.n	8006d06 <_vfiprintf_r+0x96>
 8006d12:	ebba 0b04 	subs.w	fp, sl, r4
 8006d16:	d00b      	beq.n	8006d30 <_vfiprintf_r+0xc0>
 8006d18:	465b      	mov	r3, fp
 8006d1a:	4622      	mov	r2, r4
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	4630      	mov	r0, r6
 8006d20:	f7ff ff93 	bl	8006c4a <__sfputs_r>
 8006d24:	3001      	adds	r0, #1
 8006d26:	f000 80aa 	beq.w	8006e7e <_vfiprintf_r+0x20e>
 8006d2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d2c:	445a      	add	r2, fp
 8006d2e:	9209      	str	r2, [sp, #36]	; 0x24
 8006d30:	f89a 3000 	ldrb.w	r3, [sl]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f000 80a2 	beq.w	8006e7e <_vfiprintf_r+0x20e>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d44:	f10a 0a01 	add.w	sl, sl, #1
 8006d48:	9304      	str	r3, [sp, #16]
 8006d4a:	9307      	str	r3, [sp, #28]
 8006d4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d50:	931a      	str	r3, [sp, #104]	; 0x68
 8006d52:	4654      	mov	r4, sl
 8006d54:	2205      	movs	r2, #5
 8006d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d5a:	4858      	ldr	r0, [pc, #352]	; (8006ebc <_vfiprintf_r+0x24c>)
 8006d5c:	f7f9 fac0 	bl	80002e0 <memchr>
 8006d60:	9a04      	ldr	r2, [sp, #16]
 8006d62:	b9d8      	cbnz	r0, 8006d9c <_vfiprintf_r+0x12c>
 8006d64:	06d1      	lsls	r1, r2, #27
 8006d66:	bf44      	itt	mi
 8006d68:	2320      	movmi	r3, #32
 8006d6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d6e:	0713      	lsls	r3, r2, #28
 8006d70:	bf44      	itt	mi
 8006d72:	232b      	movmi	r3, #43	; 0x2b
 8006d74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006d78:	f89a 3000 	ldrb.w	r3, [sl]
 8006d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8006d7e:	d015      	beq.n	8006dac <_vfiprintf_r+0x13c>
 8006d80:	9a07      	ldr	r2, [sp, #28]
 8006d82:	4654      	mov	r4, sl
 8006d84:	2000      	movs	r0, #0
 8006d86:	f04f 0c0a 	mov.w	ip, #10
 8006d8a:	4621      	mov	r1, r4
 8006d8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d90:	3b30      	subs	r3, #48	; 0x30
 8006d92:	2b09      	cmp	r3, #9
 8006d94:	d94e      	bls.n	8006e34 <_vfiprintf_r+0x1c4>
 8006d96:	b1b0      	cbz	r0, 8006dc6 <_vfiprintf_r+0x156>
 8006d98:	9207      	str	r2, [sp, #28]
 8006d9a:	e014      	b.n	8006dc6 <_vfiprintf_r+0x156>
 8006d9c:	eba0 0308 	sub.w	r3, r0, r8
 8006da0:	fa09 f303 	lsl.w	r3, r9, r3
 8006da4:	4313      	orrs	r3, r2
 8006da6:	9304      	str	r3, [sp, #16]
 8006da8:	46a2      	mov	sl, r4
 8006daa:	e7d2      	b.n	8006d52 <_vfiprintf_r+0xe2>
 8006dac:	9b03      	ldr	r3, [sp, #12]
 8006dae:	1d19      	adds	r1, r3, #4
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	9103      	str	r1, [sp, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	bfbb      	ittet	lt
 8006db8:	425b      	neglt	r3, r3
 8006dba:	f042 0202 	orrlt.w	r2, r2, #2
 8006dbe:	9307      	strge	r3, [sp, #28]
 8006dc0:	9307      	strlt	r3, [sp, #28]
 8006dc2:	bfb8      	it	lt
 8006dc4:	9204      	strlt	r2, [sp, #16]
 8006dc6:	7823      	ldrb	r3, [r4, #0]
 8006dc8:	2b2e      	cmp	r3, #46	; 0x2e
 8006dca:	d10c      	bne.n	8006de6 <_vfiprintf_r+0x176>
 8006dcc:	7863      	ldrb	r3, [r4, #1]
 8006dce:	2b2a      	cmp	r3, #42	; 0x2a
 8006dd0:	d135      	bne.n	8006e3e <_vfiprintf_r+0x1ce>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	1d1a      	adds	r2, r3, #4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	9203      	str	r2, [sp, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	bfb8      	it	lt
 8006dde:	f04f 33ff 	movlt.w	r3, #4294967295
 8006de2:	3402      	adds	r4, #2
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006ecc <_vfiprintf_r+0x25c>
 8006dea:	7821      	ldrb	r1, [r4, #0]
 8006dec:	2203      	movs	r2, #3
 8006dee:	4650      	mov	r0, sl
 8006df0:	f7f9 fa76 	bl	80002e0 <memchr>
 8006df4:	b140      	cbz	r0, 8006e08 <_vfiprintf_r+0x198>
 8006df6:	2340      	movs	r3, #64	; 0x40
 8006df8:	eba0 000a 	sub.w	r0, r0, sl
 8006dfc:	fa03 f000 	lsl.w	r0, r3, r0
 8006e00:	9b04      	ldr	r3, [sp, #16]
 8006e02:	4303      	orrs	r3, r0
 8006e04:	3401      	adds	r4, #1
 8006e06:	9304      	str	r3, [sp, #16]
 8006e08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0c:	482c      	ldr	r0, [pc, #176]	; (8006ec0 <_vfiprintf_r+0x250>)
 8006e0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e12:	2206      	movs	r2, #6
 8006e14:	f7f9 fa64 	bl	80002e0 <memchr>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	d03f      	beq.n	8006e9c <_vfiprintf_r+0x22c>
 8006e1c:	4b29      	ldr	r3, [pc, #164]	; (8006ec4 <_vfiprintf_r+0x254>)
 8006e1e:	bb1b      	cbnz	r3, 8006e68 <_vfiprintf_r+0x1f8>
 8006e20:	9b03      	ldr	r3, [sp, #12]
 8006e22:	3307      	adds	r3, #7
 8006e24:	f023 0307 	bic.w	r3, r3, #7
 8006e28:	3308      	adds	r3, #8
 8006e2a:	9303      	str	r3, [sp, #12]
 8006e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2e:	443b      	add	r3, r7
 8006e30:	9309      	str	r3, [sp, #36]	; 0x24
 8006e32:	e767      	b.n	8006d04 <_vfiprintf_r+0x94>
 8006e34:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e38:	460c      	mov	r4, r1
 8006e3a:	2001      	movs	r0, #1
 8006e3c:	e7a5      	b.n	8006d8a <_vfiprintf_r+0x11a>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	3401      	adds	r4, #1
 8006e42:	9305      	str	r3, [sp, #20]
 8006e44:	4619      	mov	r1, r3
 8006e46:	f04f 0c0a 	mov.w	ip, #10
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e50:	3a30      	subs	r2, #48	; 0x30
 8006e52:	2a09      	cmp	r2, #9
 8006e54:	d903      	bls.n	8006e5e <_vfiprintf_r+0x1ee>
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0c5      	beq.n	8006de6 <_vfiprintf_r+0x176>
 8006e5a:	9105      	str	r1, [sp, #20]
 8006e5c:	e7c3      	b.n	8006de6 <_vfiprintf_r+0x176>
 8006e5e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e62:	4604      	mov	r4, r0
 8006e64:	2301      	movs	r3, #1
 8006e66:	e7f0      	b.n	8006e4a <_vfiprintf_r+0x1da>
 8006e68:	ab03      	add	r3, sp, #12
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	462a      	mov	r2, r5
 8006e6e:	4b16      	ldr	r3, [pc, #88]	; (8006ec8 <_vfiprintf_r+0x258>)
 8006e70:	a904      	add	r1, sp, #16
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7fd fc8c 	bl	8004790 <_printf_float>
 8006e78:	4607      	mov	r7, r0
 8006e7a:	1c78      	adds	r0, r7, #1
 8006e7c:	d1d6      	bne.n	8006e2c <_vfiprintf_r+0x1bc>
 8006e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e80:	07d9      	lsls	r1, r3, #31
 8006e82:	d405      	bmi.n	8006e90 <_vfiprintf_r+0x220>
 8006e84:	89ab      	ldrh	r3, [r5, #12]
 8006e86:	059a      	lsls	r2, r3, #22
 8006e88:	d402      	bmi.n	8006e90 <_vfiprintf_r+0x220>
 8006e8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e8c:	f7ff f9d0 	bl	8006230 <__retarget_lock_release_recursive>
 8006e90:	89ab      	ldrh	r3, [r5, #12]
 8006e92:	065b      	lsls	r3, r3, #25
 8006e94:	f53f af12 	bmi.w	8006cbc <_vfiprintf_r+0x4c>
 8006e98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e9a:	e711      	b.n	8006cc0 <_vfiprintf_r+0x50>
 8006e9c:	ab03      	add	r3, sp, #12
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	462a      	mov	r2, r5
 8006ea2:	4b09      	ldr	r3, [pc, #36]	; (8006ec8 <_vfiprintf_r+0x258>)
 8006ea4:	a904      	add	r1, sp, #16
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	f7fd ff16 	bl	8004cd8 <_printf_i>
 8006eac:	e7e4      	b.n	8006e78 <_vfiprintf_r+0x208>
 8006eae:	bf00      	nop
 8006eb0:	0800ba7c 	.word	0x0800ba7c
 8006eb4:	0800ba9c 	.word	0x0800ba9c
 8006eb8:	0800ba5c 	.word	0x0800ba5c
 8006ebc:	0800bc14 	.word	0x0800bc14
 8006ec0:	0800bc1e 	.word	0x0800bc1e
 8006ec4:	08004791 	.word	0x08004791
 8006ec8:	08006c4b 	.word	0x08006c4b
 8006ecc:	0800bc1a 	.word	0x0800bc1a

08006ed0 <_sbrk_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d06      	ldr	r5, [pc, #24]	; (8006eec <_sbrk_r+0x1c>)
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	602b      	str	r3, [r5, #0]
 8006edc:	f7fa fc04 	bl	80016e8 <_sbrk>
 8006ee0:	1c43      	adds	r3, r0, #1
 8006ee2:	d102      	bne.n	8006eea <_sbrk_r+0x1a>
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	b103      	cbz	r3, 8006eea <_sbrk_r+0x1a>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	bd38      	pop	{r3, r4, r5, pc}
 8006eec:	20003cac 	.word	0x20003cac

08006ef0 <__sread>:
 8006ef0:	b510      	push	{r4, lr}
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ef8:	f000 f8e2 	bl	80070c0 <_read_r>
 8006efc:	2800      	cmp	r0, #0
 8006efe:	bfab      	itete	ge
 8006f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f02:	89a3      	ldrhlt	r3, [r4, #12]
 8006f04:	181b      	addge	r3, r3, r0
 8006f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f0a:	bfac      	ite	ge
 8006f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f0e:	81a3      	strhlt	r3, [r4, #12]
 8006f10:	bd10      	pop	{r4, pc}

08006f12 <__swrite>:
 8006f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f16:	461f      	mov	r7, r3
 8006f18:	898b      	ldrh	r3, [r1, #12]
 8006f1a:	05db      	lsls	r3, r3, #23
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	4616      	mov	r6, r2
 8006f22:	d505      	bpl.n	8006f30 <__swrite+0x1e>
 8006f24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f28:	2302      	movs	r3, #2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f000 f898 	bl	8007060 <_lseek_r>
 8006f30:	89a3      	ldrh	r3, [r4, #12]
 8006f32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f3a:	81a3      	strh	r3, [r4, #12]
 8006f3c:	4632      	mov	r2, r6
 8006f3e:	463b      	mov	r3, r7
 8006f40:	4628      	mov	r0, r5
 8006f42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f46:	f000 b817 	b.w	8006f78 <_write_r>

08006f4a <__sseek>:
 8006f4a:	b510      	push	{r4, lr}
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f52:	f000 f885 	bl	8007060 <_lseek_r>
 8006f56:	1c43      	adds	r3, r0, #1
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	bf15      	itete	ne
 8006f5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006f5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006f62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006f66:	81a3      	strheq	r3, [r4, #12]
 8006f68:	bf18      	it	ne
 8006f6a:	81a3      	strhne	r3, [r4, #12]
 8006f6c:	bd10      	pop	{r4, pc}

08006f6e <__sclose>:
 8006f6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f72:	f000 b831 	b.w	8006fd8 <_close_r>
	...

08006f78 <_write_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d07      	ldr	r5, [pc, #28]	; (8006f98 <_write_r+0x20>)
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	4608      	mov	r0, r1
 8006f80:	4611      	mov	r1, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7fa fb94 	bl	80016b4 <_write>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_write_r+0x1e>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_write_r+0x1e>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	20003cac 	.word	0x20003cac

08006f9c <__assert_func>:
 8006f9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f9e:	4614      	mov	r4, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <__assert_func+0x2c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4605      	mov	r5, r0
 8006fa8:	68d8      	ldr	r0, [r3, #12]
 8006faa:	b14c      	cbz	r4, 8006fc0 <__assert_func+0x24>
 8006fac:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <__assert_func+0x30>)
 8006fae:	9100      	str	r1, [sp, #0]
 8006fb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fb4:	4906      	ldr	r1, [pc, #24]	; (8006fd0 <__assert_func+0x34>)
 8006fb6:	462b      	mov	r3, r5
 8006fb8:	f000 f81e 	bl	8006ff8 <fiprintf>
 8006fbc:	f000 f89f 	bl	80070fe <abort>
 8006fc0:	4b04      	ldr	r3, [pc, #16]	; (8006fd4 <__assert_func+0x38>)
 8006fc2:	461c      	mov	r4, r3
 8006fc4:	e7f3      	b.n	8006fae <__assert_func+0x12>
 8006fc6:	bf00      	nop
 8006fc8:	20000010 	.word	0x20000010
 8006fcc:	0800bc25 	.word	0x0800bc25
 8006fd0:	0800bc32 	.word	0x0800bc32
 8006fd4:	0800722e 	.word	0x0800722e

08006fd8 <_close_r>:
 8006fd8:	b538      	push	{r3, r4, r5, lr}
 8006fda:	4d06      	ldr	r5, [pc, #24]	; (8006ff4 <_close_r+0x1c>)
 8006fdc:	2300      	movs	r3, #0
 8006fde:	4604      	mov	r4, r0
 8006fe0:	4608      	mov	r0, r1
 8006fe2:	602b      	str	r3, [r5, #0]
 8006fe4:	f7fa fb74 	bl	80016d0 <_close>
 8006fe8:	1c43      	adds	r3, r0, #1
 8006fea:	d102      	bne.n	8006ff2 <_close_r+0x1a>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	b103      	cbz	r3, 8006ff2 <_close_r+0x1a>
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	bd38      	pop	{r3, r4, r5, pc}
 8006ff4:	20003cac 	.word	0x20003cac

08006ff8 <fiprintf>:
 8006ff8:	b40e      	push	{r1, r2, r3}
 8006ffa:	b503      	push	{r0, r1, lr}
 8006ffc:	4601      	mov	r1, r0
 8006ffe:	ab03      	add	r3, sp, #12
 8007000:	4805      	ldr	r0, [pc, #20]	; (8007018 <fiprintf+0x20>)
 8007002:	f853 2b04 	ldr.w	r2, [r3], #4
 8007006:	6800      	ldr	r0, [r0, #0]
 8007008:	9301      	str	r3, [sp, #4]
 800700a:	f7ff fe31 	bl	8006c70 <_vfiprintf_r>
 800700e:	b002      	add	sp, #8
 8007010:	f85d eb04 	ldr.w	lr, [sp], #4
 8007014:	b003      	add	sp, #12
 8007016:	4770      	bx	lr
 8007018:	20000010 	.word	0x20000010

0800701c <_fstat_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4d07      	ldr	r5, [pc, #28]	; (800703c <_fstat_r+0x20>)
 8007020:	2300      	movs	r3, #0
 8007022:	4604      	mov	r4, r0
 8007024:	4608      	mov	r0, r1
 8007026:	4611      	mov	r1, r2
 8007028:	602b      	str	r3, [r5, #0]
 800702a:	f7fa fb54 	bl	80016d6 <_fstat>
 800702e:	1c43      	adds	r3, r0, #1
 8007030:	d102      	bne.n	8007038 <_fstat_r+0x1c>
 8007032:	682b      	ldr	r3, [r5, #0]
 8007034:	b103      	cbz	r3, 8007038 <_fstat_r+0x1c>
 8007036:	6023      	str	r3, [r4, #0]
 8007038:	bd38      	pop	{r3, r4, r5, pc}
 800703a:	bf00      	nop
 800703c:	20003cac 	.word	0x20003cac

08007040 <_isatty_r>:
 8007040:	b538      	push	{r3, r4, r5, lr}
 8007042:	4d06      	ldr	r5, [pc, #24]	; (800705c <_isatty_r+0x1c>)
 8007044:	2300      	movs	r3, #0
 8007046:	4604      	mov	r4, r0
 8007048:	4608      	mov	r0, r1
 800704a:	602b      	str	r3, [r5, #0]
 800704c:	f7fa fb48 	bl	80016e0 <_isatty>
 8007050:	1c43      	adds	r3, r0, #1
 8007052:	d102      	bne.n	800705a <_isatty_r+0x1a>
 8007054:	682b      	ldr	r3, [r5, #0]
 8007056:	b103      	cbz	r3, 800705a <_isatty_r+0x1a>
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	bd38      	pop	{r3, r4, r5, pc}
 800705c:	20003cac 	.word	0x20003cac

08007060 <_lseek_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4d07      	ldr	r5, [pc, #28]	; (8007080 <_lseek_r+0x20>)
 8007064:	4604      	mov	r4, r0
 8007066:	4608      	mov	r0, r1
 8007068:	4611      	mov	r1, r2
 800706a:	2200      	movs	r2, #0
 800706c:	602a      	str	r2, [r5, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	f7fa fb38 	bl	80016e4 <_lseek>
 8007074:	1c43      	adds	r3, r0, #1
 8007076:	d102      	bne.n	800707e <_lseek_r+0x1e>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	b103      	cbz	r3, 800707e <_lseek_r+0x1e>
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	bd38      	pop	{r3, r4, r5, pc}
 8007080:	20003cac 	.word	0x20003cac

08007084 <__ascii_mbtowc>:
 8007084:	b082      	sub	sp, #8
 8007086:	b901      	cbnz	r1, 800708a <__ascii_mbtowc+0x6>
 8007088:	a901      	add	r1, sp, #4
 800708a:	b142      	cbz	r2, 800709e <__ascii_mbtowc+0x1a>
 800708c:	b14b      	cbz	r3, 80070a2 <__ascii_mbtowc+0x1e>
 800708e:	7813      	ldrb	r3, [r2, #0]
 8007090:	600b      	str	r3, [r1, #0]
 8007092:	7812      	ldrb	r2, [r2, #0]
 8007094:	1e10      	subs	r0, r2, #0
 8007096:	bf18      	it	ne
 8007098:	2001      	movne	r0, #1
 800709a:	b002      	add	sp, #8
 800709c:	4770      	bx	lr
 800709e:	4610      	mov	r0, r2
 80070a0:	e7fb      	b.n	800709a <__ascii_mbtowc+0x16>
 80070a2:	f06f 0001 	mvn.w	r0, #1
 80070a6:	e7f8      	b.n	800709a <__ascii_mbtowc+0x16>

080070a8 <__malloc_lock>:
 80070a8:	4801      	ldr	r0, [pc, #4]	; (80070b0 <__malloc_lock+0x8>)
 80070aa:	f7ff b8c0 	b.w	800622e <__retarget_lock_acquire_recursive>
 80070ae:	bf00      	nop
 80070b0:	20003ca0 	.word	0x20003ca0

080070b4 <__malloc_unlock>:
 80070b4:	4801      	ldr	r0, [pc, #4]	; (80070bc <__malloc_unlock+0x8>)
 80070b6:	f7ff b8bb 	b.w	8006230 <__retarget_lock_release_recursive>
 80070ba:	bf00      	nop
 80070bc:	20003ca0 	.word	0x20003ca0

080070c0 <_read_r>:
 80070c0:	b538      	push	{r3, r4, r5, lr}
 80070c2:	4d07      	ldr	r5, [pc, #28]	; (80070e0 <_read_r+0x20>)
 80070c4:	4604      	mov	r4, r0
 80070c6:	4608      	mov	r0, r1
 80070c8:	4611      	mov	r1, r2
 80070ca:	2200      	movs	r2, #0
 80070cc:	602a      	str	r2, [r5, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	f7fa fae2 	bl	8001698 <_read>
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	d102      	bne.n	80070de <_read_r+0x1e>
 80070d8:	682b      	ldr	r3, [r5, #0]
 80070da:	b103      	cbz	r3, 80070de <_read_r+0x1e>
 80070dc:	6023      	str	r3, [r4, #0]
 80070de:	bd38      	pop	{r3, r4, r5, pc}
 80070e0:	20003cac 	.word	0x20003cac

080070e4 <__ascii_wctomb>:
 80070e4:	b149      	cbz	r1, 80070fa <__ascii_wctomb+0x16>
 80070e6:	2aff      	cmp	r2, #255	; 0xff
 80070e8:	bf85      	ittet	hi
 80070ea:	238a      	movhi	r3, #138	; 0x8a
 80070ec:	6003      	strhi	r3, [r0, #0]
 80070ee:	700a      	strbls	r2, [r1, #0]
 80070f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80070f4:	bf98      	it	ls
 80070f6:	2001      	movls	r0, #1
 80070f8:	4770      	bx	lr
 80070fa:	4608      	mov	r0, r1
 80070fc:	4770      	bx	lr

080070fe <abort>:
 80070fe:	b508      	push	{r3, lr}
 8007100:	2006      	movs	r0, #6
 8007102:	f000 f82b 	bl	800715c <raise>
 8007106:	2001      	movs	r0, #1
 8007108:	f7fa fac0 	bl	800168c <_exit>

0800710c <_raise_r>:
 800710c:	291f      	cmp	r1, #31
 800710e:	b538      	push	{r3, r4, r5, lr}
 8007110:	4604      	mov	r4, r0
 8007112:	460d      	mov	r5, r1
 8007114:	d904      	bls.n	8007120 <_raise_r+0x14>
 8007116:	2316      	movs	r3, #22
 8007118:	6003      	str	r3, [r0, #0]
 800711a:	f04f 30ff 	mov.w	r0, #4294967295
 800711e:	bd38      	pop	{r3, r4, r5, pc}
 8007120:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007122:	b112      	cbz	r2, 800712a <_raise_r+0x1e>
 8007124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007128:	b94b      	cbnz	r3, 800713e <_raise_r+0x32>
 800712a:	4620      	mov	r0, r4
 800712c:	f000 f830 	bl	8007190 <_getpid_r>
 8007130:	462a      	mov	r2, r5
 8007132:	4601      	mov	r1, r0
 8007134:	4620      	mov	r0, r4
 8007136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800713a:	f000 b817 	b.w	800716c <_kill_r>
 800713e:	2b01      	cmp	r3, #1
 8007140:	d00a      	beq.n	8007158 <_raise_r+0x4c>
 8007142:	1c59      	adds	r1, r3, #1
 8007144:	d103      	bne.n	800714e <_raise_r+0x42>
 8007146:	2316      	movs	r3, #22
 8007148:	6003      	str	r3, [r0, #0]
 800714a:	2001      	movs	r0, #1
 800714c:	e7e7      	b.n	800711e <_raise_r+0x12>
 800714e:	2400      	movs	r4, #0
 8007150:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007154:	4628      	mov	r0, r5
 8007156:	4798      	blx	r3
 8007158:	2000      	movs	r0, #0
 800715a:	e7e0      	b.n	800711e <_raise_r+0x12>

0800715c <raise>:
 800715c:	4b02      	ldr	r3, [pc, #8]	; (8007168 <raise+0xc>)
 800715e:	4601      	mov	r1, r0
 8007160:	6818      	ldr	r0, [r3, #0]
 8007162:	f7ff bfd3 	b.w	800710c <_raise_r>
 8007166:	bf00      	nop
 8007168:	20000010 	.word	0x20000010

0800716c <_kill_r>:
 800716c:	b538      	push	{r3, r4, r5, lr}
 800716e:	4d07      	ldr	r5, [pc, #28]	; (800718c <_kill_r+0x20>)
 8007170:	2300      	movs	r3, #0
 8007172:	4604      	mov	r4, r0
 8007174:	4608      	mov	r0, r1
 8007176:	4611      	mov	r1, r2
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	f7fa fa7f 	bl	800167c <_kill>
 800717e:	1c43      	adds	r3, r0, #1
 8007180:	d102      	bne.n	8007188 <_kill_r+0x1c>
 8007182:	682b      	ldr	r3, [r5, #0]
 8007184:	b103      	cbz	r3, 8007188 <_kill_r+0x1c>
 8007186:	6023      	str	r3, [r4, #0]
 8007188:	bd38      	pop	{r3, r4, r5, pc}
 800718a:	bf00      	nop
 800718c:	20003cac 	.word	0x20003cac

08007190 <_getpid_r>:
 8007190:	f7fa ba72 	b.w	8001678 <_getpid>

08007194 <sqrtf>:
 8007194:	b508      	push	{r3, lr}
 8007196:	ed2d 8b02 	vpush	{d8}
 800719a:	eeb0 8a40 	vmov.f32	s16, s0
 800719e:	f000 f817 	bl	80071d0 <__ieee754_sqrtf>
 80071a2:	eeb4 8a48 	vcmp.f32	s16, s16
 80071a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071aa:	d60c      	bvs.n	80071c6 <sqrtf+0x32>
 80071ac:	eddf 8a07 	vldr	s17, [pc, #28]	; 80071cc <sqrtf+0x38>
 80071b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80071b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071b8:	d505      	bpl.n	80071c6 <sqrtf+0x32>
 80071ba:	f7fd fa17 	bl	80045ec <__errno>
 80071be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80071c2:	2321      	movs	r3, #33	; 0x21
 80071c4:	6003      	str	r3, [r0, #0]
 80071c6:	ecbd 8b02 	vpop	{d8}
 80071ca:	bd08      	pop	{r3, pc}
 80071cc:	00000000 	.word	0x00000000

080071d0 <__ieee754_sqrtf>:
 80071d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80071d4:	4770      	bx	lr
	...

080071d8 <_init>:
 80071d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071da:	bf00      	nop
 80071dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071de:	bc08      	pop	{r3}
 80071e0:	469e      	mov	lr, r3
 80071e2:	4770      	bx	lr

080071e4 <_fini>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr
