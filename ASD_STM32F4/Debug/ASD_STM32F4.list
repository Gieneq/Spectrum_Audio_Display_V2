
ASD_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006798  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003264  08006968  08006968  00016968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009bcc  08009bcc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08009bcc  08009bcc  00019bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009bd4  08009bd4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009bd4  08009bd4  00019bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009bd8  08009bd8  00019bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009bdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000051c8  200001e4  08009dc0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200053ac  08009dc0  000253ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189af  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038c7  00000000  00000000  00038bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f70e  00000000  00000000  0003c48a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d80  00000000  00000000  0004bb98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  0004c918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024981  00000000  00000000  0004da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019971  00000000  00000000  00072399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1081  00000000  00000000  0008bd0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  0016cd8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003848  00000000  00000000  0016ce4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006950 	.word	0x08006950

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e8 	.word	0x200001e8
 800020c:	08006950 	.word	0x08006950

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b974 	b.w	8001048 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9d08      	ldr	r5, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	468e      	mov	lr, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14d      	bne.n	8000e22 <__udivmoddi4+0xaa>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4694      	mov	ip, r2
 8000d8a:	d969      	bls.n	8000e60 <__udivmoddi4+0xe8>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b152      	cbz	r2, 8000da8 <__udivmoddi4+0x30>
 8000d92:	fa01 f302 	lsl.w	r3, r1, r2
 8000d96:	f1c2 0120 	rsb	r1, r2, #32
 8000d9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da2:	ea41 0e03 	orr.w	lr, r1, r3
 8000da6:	4094      	lsls	r4, r2
 8000da8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dac:	0c21      	lsrs	r1, r4, #16
 8000dae:	fbbe f6f8 	udiv	r6, lr, r8
 8000db2:	fa1f f78c 	uxth.w	r7, ip
 8000db6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dbe:	fb06 f107 	mul.w	r1, r6, r7
 8000dc2:	4299      	cmp	r1, r3
 8000dc4:	d90a      	bls.n	8000ddc <__udivmoddi4+0x64>
 8000dc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dce:	f080 811f 	bcs.w	8001010 <__udivmoddi4+0x298>
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	f240 811c 	bls.w	8001010 <__udivmoddi4+0x298>
 8000dd8:	3e02      	subs	r6, #2
 8000dda:	4463      	add	r3, ip
 8000ddc:	1a5b      	subs	r3, r3, r1
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dec:	fb00 f707 	mul.w	r7, r0, r7
 8000df0:	42a7      	cmp	r7, r4
 8000df2:	d90a      	bls.n	8000e0a <__udivmoddi4+0x92>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	f080 810a 	bcs.w	8001014 <__udivmoddi4+0x29c>
 8000e00:	42a7      	cmp	r7, r4
 8000e02:	f240 8107 	bls.w	8001014 <__udivmoddi4+0x29c>
 8000e06:	4464      	add	r4, ip
 8000e08:	3802      	subs	r0, #2
 8000e0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0e:	1be4      	subs	r4, r4, r7
 8000e10:	2600      	movs	r6, #0
 8000e12:	b11d      	cbz	r5, 8000e1c <__udivmoddi4+0xa4>
 8000e14:	40d4      	lsrs	r4, r2
 8000e16:	2300      	movs	r3, #0
 8000e18:	e9c5 4300 	strd	r4, r3, [r5]
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d909      	bls.n	8000e3a <__udivmoddi4+0xc2>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	f000 80ef 	beq.w	800100a <__udivmoddi4+0x292>
 8000e2c:	2600      	movs	r6, #0
 8000e2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e32:	4630      	mov	r0, r6
 8000e34:	4631      	mov	r1, r6
 8000e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e3a:	fab3 f683 	clz	r6, r3
 8000e3e:	2e00      	cmp	r6, #0
 8000e40:	d14a      	bne.n	8000ed8 <__udivmoddi4+0x160>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xd4>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 80f9 	bhi.w	800103e <__udivmoddi4+0x2c6>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	469e      	mov	lr, r3
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e0      	beq.n	8000e1c <__udivmoddi4+0xa4>
 8000e5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5e:	e7dd      	b.n	8000e1c <__udivmoddi4+0xa4>
 8000e60:	b902      	cbnz	r2, 8000e64 <__udivmoddi4+0xec>
 8000e62:	deff      	udf	#255	; 0xff
 8000e64:	fab2 f282 	clz	r2, r2
 8000e68:	2a00      	cmp	r2, #0
 8000e6a:	f040 8092 	bne.w	8000f92 <__udivmoddi4+0x21a>
 8000e6e:	eba1 010c 	sub.w	r1, r1, ip
 8000e72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e76:	fa1f fe8c 	uxth.w	lr, ip
 8000e7a:	2601      	movs	r6, #1
 8000e7c:	0c20      	lsrs	r0, r4, #16
 8000e7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e82:	fb07 1113 	mls	r1, r7, r3, r1
 8000e86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e8a:	fb0e f003 	mul.w	r0, lr, r3
 8000e8e:	4288      	cmp	r0, r1
 8000e90:	d908      	bls.n	8000ea4 <__udivmoddi4+0x12c>
 8000e92:	eb1c 0101 	adds.w	r1, ip, r1
 8000e96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e9a:	d202      	bcs.n	8000ea2 <__udivmoddi4+0x12a>
 8000e9c:	4288      	cmp	r0, r1
 8000e9e:	f200 80cb 	bhi.w	8001038 <__udivmoddi4+0x2c0>
 8000ea2:	4643      	mov	r3, r8
 8000ea4:	1a09      	subs	r1, r1, r0
 8000ea6:	b2a4      	uxth	r4, r4
 8000ea8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eac:	fb07 1110 	mls	r1, r7, r0, r1
 8000eb0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb4:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	d908      	bls.n	8000ece <__udivmoddi4+0x156>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec4:	d202      	bcs.n	8000ecc <__udivmoddi4+0x154>
 8000ec6:	45a6      	cmp	lr, r4
 8000ec8:	f200 80bb 	bhi.w	8001042 <__udivmoddi4+0x2ca>
 8000ecc:	4608      	mov	r0, r1
 8000ece:	eba4 040e 	sub.w	r4, r4, lr
 8000ed2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed6:	e79c      	b.n	8000e12 <__udivmoddi4+0x9a>
 8000ed8:	f1c6 0720 	rsb	r7, r6, #32
 8000edc:	40b3      	lsls	r3, r6
 8000ede:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee6:	fa20 f407 	lsr.w	r4, r0, r7
 8000eea:	fa01 f306 	lsl.w	r3, r1, r6
 8000eee:	431c      	orrs	r4, r3
 8000ef0:	40f9      	lsrs	r1, r7
 8000ef2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef6:	fa00 f306 	lsl.w	r3, r0, r6
 8000efa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efe:	0c20      	lsrs	r0, r4, #16
 8000f00:	fa1f fe8c 	uxth.w	lr, ip
 8000f04:	fb09 1118 	mls	r1, r9, r8, r1
 8000f08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f10:	4288      	cmp	r0, r1
 8000f12:	fa02 f206 	lsl.w	r2, r2, r6
 8000f16:	d90b      	bls.n	8000f30 <__udivmoddi4+0x1b8>
 8000f18:	eb1c 0101 	adds.w	r1, ip, r1
 8000f1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f20:	f080 8088 	bcs.w	8001034 <__udivmoddi4+0x2bc>
 8000f24:	4288      	cmp	r0, r1
 8000f26:	f240 8085 	bls.w	8001034 <__udivmoddi4+0x2bc>
 8000f2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2e:	4461      	add	r1, ip
 8000f30:	1a09      	subs	r1, r1, r0
 8000f32:	b2a4      	uxth	r4, r4
 8000f34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f38:	fb09 1110 	mls	r1, r9, r0, r1
 8000f3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f44:	458e      	cmp	lr, r1
 8000f46:	d908      	bls.n	8000f5a <__udivmoddi4+0x1e2>
 8000f48:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f50:	d26c      	bcs.n	800102c <__udivmoddi4+0x2b4>
 8000f52:	458e      	cmp	lr, r1
 8000f54:	d96a      	bls.n	800102c <__udivmoddi4+0x2b4>
 8000f56:	3802      	subs	r0, #2
 8000f58:	4461      	add	r1, ip
 8000f5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000f62:	eba1 010e 	sub.w	r1, r1, lr
 8000f66:	42a1      	cmp	r1, r4
 8000f68:	46c8      	mov	r8, r9
 8000f6a:	46a6      	mov	lr, r4
 8000f6c:	d356      	bcc.n	800101c <__udivmoddi4+0x2a4>
 8000f6e:	d053      	beq.n	8001018 <__udivmoddi4+0x2a0>
 8000f70:	b15d      	cbz	r5, 8000f8a <__udivmoddi4+0x212>
 8000f72:	ebb3 0208 	subs.w	r2, r3, r8
 8000f76:	eb61 010e 	sbc.w	r1, r1, lr
 8000f7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f82:	40f1      	lsrs	r1, r6
 8000f84:	431f      	orrs	r7, r3
 8000f86:	e9c5 7100 	strd	r7, r1, [r5]
 8000f8a:	2600      	movs	r6, #0
 8000f8c:	4631      	mov	r1, r6
 8000f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f92:	f1c2 0320 	rsb	r3, r2, #32
 8000f96:	40d8      	lsrs	r0, r3
 8000f98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000fa0:	4091      	lsls	r1, r2
 8000fa2:	4301      	orrs	r1, r0
 8000fa4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa8:	fa1f fe8c 	uxth.w	lr, ip
 8000fac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb4:	0c0b      	lsrs	r3, r1, #16
 8000fb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fba:	fb00 f60e 	mul.w	r6, r0, lr
 8000fbe:	429e      	cmp	r6, r3
 8000fc0:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc4:	d908      	bls.n	8000fd8 <__udivmoddi4+0x260>
 8000fc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000fca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fce:	d22f      	bcs.n	8001030 <__udivmoddi4+0x2b8>
 8000fd0:	429e      	cmp	r6, r3
 8000fd2:	d92d      	bls.n	8001030 <__udivmoddi4+0x2b8>
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	4463      	add	r3, ip
 8000fd8:	1b9b      	subs	r3, r3, r6
 8000fda:	b289      	uxth	r1, r1
 8000fdc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fe0:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe8:	fb06 f30e 	mul.w	r3, r6, lr
 8000fec:	428b      	cmp	r3, r1
 8000fee:	d908      	bls.n	8001002 <__udivmoddi4+0x28a>
 8000ff0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff8:	d216      	bcs.n	8001028 <__udivmoddi4+0x2b0>
 8000ffa:	428b      	cmp	r3, r1
 8000ffc:	d914      	bls.n	8001028 <__udivmoddi4+0x2b0>
 8000ffe:	3e02      	subs	r6, #2
 8001000:	4461      	add	r1, ip
 8001002:	1ac9      	subs	r1, r1, r3
 8001004:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001008:	e738      	b.n	8000e7c <__udivmoddi4+0x104>
 800100a:	462e      	mov	r6, r5
 800100c:	4628      	mov	r0, r5
 800100e:	e705      	b.n	8000e1c <__udivmoddi4+0xa4>
 8001010:	4606      	mov	r6, r0
 8001012:	e6e3      	b.n	8000ddc <__udivmoddi4+0x64>
 8001014:	4618      	mov	r0, r3
 8001016:	e6f8      	b.n	8000e0a <__udivmoddi4+0x92>
 8001018:	454b      	cmp	r3, r9
 800101a:	d2a9      	bcs.n	8000f70 <__udivmoddi4+0x1f8>
 800101c:	ebb9 0802 	subs.w	r8, r9, r2
 8001020:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001024:	3801      	subs	r0, #1
 8001026:	e7a3      	b.n	8000f70 <__udivmoddi4+0x1f8>
 8001028:	4646      	mov	r6, r8
 800102a:	e7ea      	b.n	8001002 <__udivmoddi4+0x28a>
 800102c:	4620      	mov	r0, r4
 800102e:	e794      	b.n	8000f5a <__udivmoddi4+0x1e2>
 8001030:	4640      	mov	r0, r8
 8001032:	e7d1      	b.n	8000fd8 <__udivmoddi4+0x260>
 8001034:	46d0      	mov	r8, sl
 8001036:	e77b      	b.n	8000f30 <__udivmoddi4+0x1b8>
 8001038:	3b02      	subs	r3, #2
 800103a:	4461      	add	r1, ip
 800103c:	e732      	b.n	8000ea4 <__udivmoddi4+0x12c>
 800103e:	4630      	mov	r0, r6
 8001040:	e709      	b.n	8000e56 <__udivmoddi4+0xde>
 8001042:	4464      	add	r4, ip
 8001044:	3802      	subs	r0, #2
 8001046:	e742      	b.n	8000ece <__udivmoddi4+0x156>

08001048 <__aeabi_idiv0>:
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <ASD_FFT_Init>:
float32_t fft_input[FFT_SAMPLES_COUNT * 2];
float32_t fft_magnitudes[FFT_SAMPLES_COUNT * 2]; // twice long to calc derrivative


void ASD_FFT_Init() {
	key_samples[0] = (uint16_t *)(&samples_buffer[0]);
 800104c:	490f      	ldr	r1, [pc, #60]	; (800108c <ASD_FFT_Init+0x40>)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <ASD_FFT_Init+0x44>)
	key_samples[1] = (uint16_t *)(&samples_buffer[FFT_SAMPLES_COUNT]);

	key_magnitudes[0] = (float32_t *)(&fft_magnitudes[0]);
	key_magnitudes[1] = (float32_t *)(&fft_magnitudes[FFT_SAMPLES_COUNT]);

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples_buffer, FFT_SAMPLES_COUNT * 2);
 8001050:	4810      	ldr	r0, [pc, #64]	; (8001094 <ASD_FFT_Init+0x48>)
	key_samples[1] = (uint16_t *)(&samples_buffer[FFT_SAMPLES_COUNT]);
 8001052:	f501 6200 	add.w	r2, r1, #2048	; 0x800
void ASD_FFT_Init() {
 8001056:	b510      	push	{r4, lr}
	key_samples[0] = (uint16_t *)(&samples_buffer[0]);
 8001058:	6019      	str	r1, [r3, #0]
	key_samples[1] = (uint16_t *)(&samples_buffer[FFT_SAMPLES_COUNT]);
 800105a:	605a      	str	r2, [r3, #4]
	key_magnitudes[0] = (float32_t *)(&fft_magnitudes[0]);
 800105c:	4a0e      	ldr	r2, [pc, #56]	; (8001098 <ASD_FFT_Init+0x4c>)
 800105e:	4b0f      	ldr	r3, [pc, #60]	; (800109c <ASD_FFT_Init+0x50>)
 8001060:	6013      	str	r3, [r2, #0]
	key_magnitudes[1] = (float32_t *)(&fft_magnitudes[FFT_SAMPLES_COUNT]);
 8001062:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001066:	6053      	str	r3, [r2, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)samples_buffer, FFT_SAMPLES_COUNT * 2);
 8001068:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800106c:	f000 fc9c 	bl	80019a8 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim6);
 8001070:	480b      	ldr	r0, [pc, #44]	; (80010a0 <ASD_FFT_Init+0x54>)
 8001072:	f001 fbf5 	bl	8002860 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 8001076:	480b      	ldr	r0, [pc, #44]	; (80010a4 <ASD_FFT_Init+0x58>)
 8001078:	f001 fc28 	bl	80028cc <HAL_TIM_Base_Start_IT>
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, fft_input, 0, 1);
}
 800107c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, fft_input, 0, 1);
 8001080:	4909      	ldr	r1, [pc, #36]	; (80010a8 <ASD_FFT_Init+0x5c>)
 8001082:	480a      	ldr	r0, [pc, #40]	; (80010ac <ASD_FFT_Init+0x60>)
 8001084:	2301      	movs	r3, #1
 8001086:	2200      	movs	r2, #0
 8001088:	f002 ba18 	b.w	80034bc <arm_cfft_f32>
 800108c:	20004214 	.word	0x20004214
 8001090:	20004208 	.word	0x20004208
 8001094:	20005218 	.word	0x20005218
 8001098:	20004200 	.word	0x20004200
 800109c:	20002200 	.word	0x20002200
 80010a0:	200052c4 	.word	0x200052c4
 80010a4:	2000530c 	.word	0x2000530c
 80010a8:	20000200 	.word	0x20000200
 80010ac:	080069d4 	.word	0x080069d4

080010b0 <ASD_Next_Sample_Aquired>:

void ASD_Next_Sample_Aquired() {
	sapling_time_micros = __HAL_TIM_GET_COUNTER(&htim6);
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <ASD_Next_Sample_Aquired+0x34>)
 80010b2:	490d      	ldr	r1, [pc, #52]	; (80010e8 <ASD_Next_Sample_Aquired+0x38>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	800b      	strh	r3, [r1, #0]
	__HAL_TIM_SET_COUNTER(&htim6,0);
 80010bc:	2300      	movs	r3, #0
 80010be:	6253      	str	r3, [r2, #36]	; 0x24

	if(state == STATE_FINISHED) {
 80010c0:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <ASD_Next_Sample_Aquired+0x3c>)
 80010c2:	6813      	ldr	r3, [r2, #0]
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d10b      	bne.n	80010e0 <ASD_Next_Sample_Aquired+0x30>
		samplesBufferIndex ^= 1;
 80010c8:	4909      	ldr	r1, [pc, #36]	; (80010f0 <ASD_Next_Sample_Aquired+0x40>)
 80010ca:	680b      	ldr	r3, [r1, #0]
 80010cc:	f083 0301 	eor.w	r3, r3, #1
 80010d0:	600b      	str	r3, [r1, #0]
		magnitudesBufferIndex ^= 1;
 80010d2:	4908      	ldr	r1, [pc, #32]	; (80010f4 <ASD_Next_Sample_Aquired+0x44>)
 80010d4:	680b      	ldr	r3, [r1, #0]
 80010d6:	f083 0301 	eor.w	r3, r3, #1
 80010da:	600b      	str	r3, [r1, #0]
		state = STATE_READY;
 80010dc:	2301      	movs	r3, #1
 80010de:	6013      	str	r3, [r2, #0]
	}
}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	200052c4 	.word	0x200052c4
 80010e8:	20005214 	.word	0x20005214
 80010ec:	20000004 	.word	0x20000004
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20004210 	.word	0x20004210

080010f8 <ASD_update>:
// jak koniec bufora 0 to uzupelnia pierwszy
// fft liczy sie na próbkach z 1 pozniej z 0
//magnitudy tez na zmiane
//animacje licze z ostatnich magnitud, startowane od przerwania z DMA

void ASD_update() {
 80010f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if(state == STATE_READY){
 80010fc:	4d16      	ldr	r5, [pc, #88]	; (8001158 <ASD_update+0x60>)
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	2b01      	cmp	r3, #1
 8001102:	d124      	bne.n	800114e <ASD_update+0x56>

		uint16_t * startSamplesBuffer = key_samples[samplesBufferIndex];
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <ASD_update+0x64>)
 8001106:	4e16      	ldr	r6, [pc, #88]	; (8001160 <ASD_update+0x68>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <ASD_update+0x6c>)
 800110c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
		float32_t * startMagnitudesBuffer = key_magnitudes[magnitudesBufferIndex];
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <ASD_update+0x70>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b15      	ldr	r3, [pc, #84]	; (800116c <ASD_update+0x74>)
 8001116:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]

		for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i++)
 800111a:	2400      	movs	r4, #0
			fft_input[i] = (i%2 == 0 ? startSamplesBuffer[i/2] : 0.0);
 800111c:	f04f 0900 	mov.w	r9, #0
 8001120:	07e3      	lsls	r3, r4, #31
 8001122:	d416      	bmi.n	8001152 <ASD_update+0x5a>
 8001124:	1063      	asrs	r3, r4, #1
 8001126:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 800112a:	f7ff fa7b 	bl	8000624 <__aeabi_i2d>
 800112e:	f7ff fdbb 	bl	8000ca8 <__aeabi_d2f>
		for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i++)
 8001132:	3401      	adds	r4, #1
 8001134:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
			fft_input[i] = (i%2 == 0 ? startSamplesBuffer[i/2] : 0.0);
 8001138:	f846 0b04 	str.w	r0, [r6], #4
		for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i++)
 800113c:	d1f0      	bne.n	8001120 <ASD_update+0x28>

		arm_cmplx_mag_f32(fft_input, startMagnitudesBuffer, FFT_SAMPLES_COUNT);
 800113e:	4808      	ldr	r0, [pc, #32]	; (8001160 <ASD_update+0x68>)
 8001140:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001144:	4639      	mov	r1, r7
 8001146:	f002 fa33 	bl	80035b0 <arm_cmplx_mag_f32>

		state = STATE_FINISHED;
 800114a:	2303      	movs	r3, #3
 800114c:	602b      	str	r3, [r5, #0]
	}


}
 800114e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			fft_input[i] = (i%2 == 0 ? startSamplesBuffer[i/2] : 0.0);
 8001152:	4648      	mov	r0, r9
 8001154:	e7ed      	b.n	8001132 <ASD_update+0x3a>
 8001156:	bf00      	nop
 8001158:	20000004 	.word	0x20000004
 800115c:	20000000 	.word	0x20000000
 8001160:	20000200 	.word	0x20000200
 8001164:	20004208 	.word	0x20004208
 8001168:	20004210 	.word	0x20004210
 800116c:	20004200 	.word	0x20004200

08001170 <ASD_Print_Results>:


void ASD_Print_Results(){
 8001170:	b510      	push	{r4, lr}
	float32_t sapling_time_millis = sapling_time_micros/1000.0;
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <ASD_Print_Results+0x64>)
void ASD_Print_Results(){
 8001174:	ed2d 8b02 	vpush	{d8}
	float32_t sapling_time_millis = sapling_time_micros/1000.0;
 8001178:	8818      	ldrh	r0, [r3, #0]
void ASD_Print_Results(){
 800117a:	b086      	sub	sp, #24
	float32_t sapling_time_millis = sapling_time_micros/1000.0;
 800117c:	b280      	uxth	r0, r0
 800117e:	f7ff fa51 	bl	8000624 <__aeabi_i2d>
 8001182:	2200      	movs	r2, #0
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <ASD_Print_Results+0x68>)
 8001186:	f7ff fbe1 	bl	800094c <__aeabi_ddiv>
 800118a:	f7ff fd8d 	bl	8000ca8 <__aeabi_d2f>
	float32_t sampling_freq_kHz = 1.0/(sapling_time_millis/FFT_SAMPLES_COUNT);
	printf("Sampling time: %.2f us. Sampling frequency: %.2f kHz, idx %d\n", sapling_time_millis, sampling_freq_kHz, samplesBufferIndex);
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <ASD_Print_Results+0x6c>)
	float32_t sapling_time_millis = sapling_time_micros/1000.0;
 8001190:	ee08 0a10 	vmov	s16, r0
	printf("Sampling time: %.2f us. Sampling frequency: %.2f kHz, idx %d\n", sapling_time_millis, sampling_freq_kHz, samplesBufferIndex);
 8001194:	681c      	ldr	r4, [r3, #0]
 8001196:	f7ff fa57 	bl	8000648 <__aeabi_f2d>
	float32_t sampling_freq_kHz = 1.0/(sapling_time_millis/FFT_SAMPLES_COUNT);
 800119a:	eddf 7a11 	vldr	s15, [pc, #68]	; 80011e0 <ASD_Print_Results+0x70>
	printf("Sampling time: %.2f us. Sampling frequency: %.2f kHz, idx %d\n", sapling_time_millis, sampling_freq_kHz, samplesBufferIndex);
 800119e:	9402      	str	r4, [sp, #8]
	float32_t sampling_freq_kHz = 1.0/(sapling_time_millis/FFT_SAMPLES_COUNT);
 80011a0:	ee28 8a27 	vmul.f32	s16, s16, s15
	printf("Sampling time: %.2f us. Sampling frequency: %.2f kHz, idx %d\n", sapling_time_millis, sampling_freq_kHz, samplesBufferIndex);
 80011a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80011a8:	eec7 7a88 	vdiv.f32	s15, s15, s16
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80011b4:	ee17 0a90 	vmov	r0, s15
 80011b8:	f7ff fa46 	bl	8000648 <__aeabi_f2d>
 80011bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80011c0:	e9cd 0100 	strd	r0, r1, [sp]
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <ASD_Print_Results+0x74>)
 80011c6:	f003 fa69 	bl	800469c <iprintf>
}
 80011ca:	b006      	add	sp, #24
 80011cc:	ecbd 8b02 	vpop	{d8}
 80011d0:	bd10      	pop	{r4, pc}
 80011d2:	bf00      	nop
 80011d4:	20005214 	.word	0x20005214
 80011d8:	408f4000 	.word	0x408f4000
 80011dc:	20000000 	.word	0x20000000
 80011e0:	3a800000 	.word	0x3a800000
 80011e4:	08006968 	.word	0x08006968

080011e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80011e8:	b530      	push	{r4, r5, lr}
 80011ea:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ec:	2210      	movs	r2, #16
 80011ee:	2100      	movs	r1, #0
 80011f0:	4668      	mov	r0, sp
 80011f2:	f002 fde1 	bl	8003db8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <MX_ADC1_Init+0x5c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f8:	4a13      	ldr	r2, [pc, #76]	; (8001248 <MX_ADC1_Init+0x60>)
 80011fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011fe:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001200:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001202:	e9c0 2300 	strd	r2, r3, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_ADC1_Init+0x64>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001208:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800120a:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800120c:	7605      	strb	r5, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800120e:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001212:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001214:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001216:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001218:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800121a:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800121e:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001220:	f000 fb1c 	bl	800185c <HAL_ADC_Init>
 8001224:	b108      	cbz	r0, 800122a <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8001226:	f000 f92b 	bl	8001480 <Error_Handler>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800122a:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_ADC1_Init+0x5c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800122e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001230:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 8001232:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001236:	f000 fca9 	bl	8001b8c <HAL_ADC_ConfigChannel>
 800123a:	b108      	cbz	r0, 8001240 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 800123c:	f000 f920 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001240:	b005      	add	sp, #20
 8001242:	bd30      	pop	{r4, r5, pc}
 8001244:	20005218 	.word	0x20005218
 8001248:	40012000 	.word	0x40012000
 800124c:	0f000001 	.word	0x0f000001

08001250 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001250:	b570      	push	{r4, r5, r6, lr}
 8001252:	4606      	mov	r6, r0
 8001254:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	2214      	movs	r2, #20
 8001258:	2100      	movs	r1, #0
 800125a:	a803      	add	r0, sp, #12
 800125c:	f002 fdac 	bl	8003db8 <memset>
  if(adcHandle->Instance==ADC1)
 8001260:	6832      	ldr	r2, [r6, #0]
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_ADC_MspInit+0x94>)
 8001264:	429a      	cmp	r2, r3
 8001266:	d13a      	bne.n	80012de <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001268:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 800126c:	2500      	movs	r5, #0
 800126e:	9501      	str	r5, [sp, #4]
 8001270:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001274:	4c1d      	ldr	r4, [pc, #116]	; (80012ec <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800127a:	645a      	str	r2, [r3, #68]	; 0x44
 800127c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800127e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001282:	9201      	str	r2, [sp, #4]
 8001284:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	9502      	str	r5, [sp, #8]
 8001288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800128a:	f042 0201 	orr.w	r2, r2, #1
 800128e:	631a      	str	r2, [r3, #48]	; 0x30
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	9302      	str	r3, [sp, #8]
 8001298:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2201      	movs	r2, #1
 800129c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a0:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a4:	f000 ff02 	bl	80020ac <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80012ae:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012b6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ba:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012c2:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c6:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c8:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012cc:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012d0:	f000 fd74 	bl	8001dbc <HAL_DMA_Init>
 80012d4:	b108      	cbz	r0, 80012da <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 80012d6:	f000 f8d3 	bl	8001480 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012da:	63b4      	str	r4, [r6, #56]	; 0x38
 80012dc:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80012de:	b008      	add	sp, #32
 80012e0:	bd70      	pop	{r4, r5, r6, pc}
 80012e2:	bf00      	nop
 80012e4:	40012000 	.word	0x40012000
 80012e8:	40020000 	.word	0x40020000
 80012ec:	20005260 	.word	0x20005260
 80012f0:	40026410 	.word	0x40026410

080012f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012f4:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012f6:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <MX_DMA_Init+0x30>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	9201      	str	r2, [sp, #4]
 80012fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012fe:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001302:	6319      	str	r1, [r3, #48]	; 0x30
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	9301      	str	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 800130c:	2102      	movs	r1, #2
 800130e:	2038      	movs	r0, #56	; 0x38
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001310:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001312:	f000 fce9 	bl	8001ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001316:	2038      	movs	r0, #56	; 0x38

}
 8001318:	b003      	add	sp, #12
 800131a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800131e:	f000 bd15 	b.w	8001d4c <HAL_NVIC_EnableIRQ>
 8001322:	bf00      	nop
 8001324:	40023800 	.word	0x40023800

08001328 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001328:	b082      	sub	sp, #8

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	4b06      	ldr	r3, [pc, #24]	; (8001348 <MX_GPIO_Init+0x20>)
 8001330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	9b01      	ldr	r3, [sp, #4]

}
 8001342:	b002      	add	sp, #8
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800134c:	b507      	push	{r0, r1, r2, lr}
  if (ch == '\n') {
 800134e:	280a      	cmp	r0, #10
{
 8001350:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 8001352:	d102      	bne.n	800135a <__io_putchar+0xe>
    __io_putchar('\r');
 8001354:	200d      	movs	r0, #13
 8001356:	f7ff fff9 	bl	800134c <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	2201      	movs	r2, #1
 8001360:	a901      	add	r1, sp, #4
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <__io_putchar+0x24>)
 8001364:	f001 fd26 	bl	8002db4 <HAL_UART_Transmit>

  return 1;
}
 8001368:	2001      	movs	r0, #1
 800136a:	b003      	add	sp, #12
 800136c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001370:	20005354 	.word	0x20005354

08001374 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  if (htim == &htim7 )
 8001374:	4b02      	ldr	r3, [pc, #8]	; (8001380 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8001376:	4283      	cmp	r3, r0
 8001378:	d101      	bne.n	800137e <HAL_TIM_PeriodElapsedCallback+0xa>
  {
    ASD_update();
 800137a:	f7ff bebd 	b.w	80010f8 <ASD_update>
  }
}
 800137e:	4770      	bx	lr
 8001380:	2000530c 	.word	0x2000530c

08001384 <HAL_ADC_ConvCpltCallback>:
		ASD_Next_Sample_Aquired();
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
	if(AdcHandle == &hadc1)
 8001384:	4b02      	ldr	r3, [pc, #8]	; (8001390 <HAL_ADC_ConvCpltCallback+0xc>)
 8001386:	4283      	cmp	r3, r0
 8001388:	d101      	bne.n	800138e <HAL_ADC_ConvCpltCallback+0xa>
		ASD_Next_Sample_Aquired();
 800138a:	f7ff be91 	b.w	80010b0 <ASD_Next_Sample_Aquired>
}
 800138e:	4770      	bx	lr
 8001390:	20005218 	.word	0x20005218

08001394 <HAL_ADC_ConvHalfCpltCallback>:
 8001394:	f7ff bff6 	b.w	8001384 <HAL_ADC_ConvCpltCallback>

08001398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b510      	push	{r4, lr}
 800139a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139c:	2214      	movs	r2, #20
 800139e:	2100      	movs	r1, #0
 80013a0:	a808      	add	r0, sp, #32
 80013a2:	f002 fd09 	bl	8003db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a6:	2214      	movs	r2, #20
 80013a8:	2100      	movs	r1, #0
 80013aa:	a802      	add	r0, sp, #8
 80013ac:	f002 fd04 	bl	8003db8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013b0:	2300      	movs	r3, #0
 80013b2:	4a21      	ldr	r2, [pc, #132]	; (8001438 <SystemClock_Config+0xa0>)
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80013b8:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80013bc:	6411      	str	r1, [r2, #64]	; 0x40
 80013be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80013c0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80013c4:	9200      	str	r2, [sp, #0]
 80013c6:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013c8:	4a1c      	ldr	r2, [pc, #112]	; (800143c <SystemClock_Config+0xa4>)
 80013ca:	9301      	str	r3, [sp, #4]
 80013cc:	6811      	ldr	r1, [r2, #0]
 80013ce:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80013d2:	6011      	str	r1, [r2, #0]
 80013d4:	6812      	ldr	r2, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d6:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d8:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013dc:	2008      	movs	r0, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013de:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e2:	9201      	str	r2, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 180;
 80013e4:	23b4      	movs	r3, #180	; 0xb4
 80013e6:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ea:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013ec:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ee:	2101      	movs	r1, #1
 80013f0:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f2:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013f4:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013f8:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013fc:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013fe:	f001 f867 	bl	80024d0 <HAL_RCC_OscConfig>
 8001402:	b108      	cbz	r0, 8001408 <SystemClock_Config+0x70>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001404:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001406:	e7fe      	b.n	8001406 <SystemClock_Config+0x6e>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001408:	f000 ff24 	bl	8002254 <HAL_PWREx_EnableOverDrive>
 800140c:	b108      	cbz	r0, 8001412 <SystemClock_Config+0x7a>
 800140e:	b672      	cpsid	i
  while (1)
 8001410:	e7fe      	b.n	8001410 <SystemClock_Config+0x78>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001414:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001418:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800141a:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 800141e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001422:	2105      	movs	r1, #5
 8001424:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001426:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800142a:	f000 ff4d 	bl	80022c8 <HAL_RCC_ClockConfig>
 800142e:	b108      	cbz	r0, 8001434 <SystemClock_Config+0x9c>
 8001430:	b672      	cpsid	i
  while (1)
 8001432:	e7fe      	b.n	8001432 <SystemClock_Config+0x9a>
}
 8001434:	b014      	add	sp, #80	; 0x50
 8001436:	bd10      	pop	{r4, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <main>:
{
 8001440:	b508      	push	{r3, lr}
  HAL_Init();
 8001442:	f000 f9cb 	bl	80017dc <HAL_Init>
  SystemClock_Config();
 8001446:	f7ff ffa7 	bl	8001398 <SystemClock_Config>
  MX_GPIO_Init();
 800144a:	f7ff ff6d 	bl	8001328 <MX_GPIO_Init>
  MX_DMA_Init();
 800144e:	f7ff ff51 	bl	80012f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001452:	f000 f923 	bl	800169c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001456:	f7ff fec7 	bl	80011e8 <MX_ADC1_Init>
  MX_TIM6_Init();
 800145a:	f000 f8a7 	bl	80015ac <MX_TIM6_Init>
  MX_TIM7_Init();
 800145e:	f000 f8c7 	bl	80015f0 <MX_TIM7_Init>
  ASD_FFT_Init();
 8001462:	f7ff fdf3 	bl	800104c <ASD_FFT_Init>
  printf("Loop started\n");
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <main+0x3c>)
 8001468:	f003 f99e 	bl	80047a8 <puts>
	  ASD_Print_Results();
 800146c:	f7ff fe80 	bl	8001170 <ASD_Print_Results>
	  HAL_Delay(500);
 8001470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001474:	f000 f9de 	bl	8001834 <HAL_Delay>
  while (1)
 8001478:	e7f8      	b.n	800146c <main+0x2c>
 800147a:	bf00      	nop
 800147c:	080069a6 	.word	0x080069a6

08001480 <Error_Handler>:
 8001480:	b672      	cpsid	i
  while (1)
 8001482:	e7fe      	b.n	8001482 <Error_Handler+0x2>

08001484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001484:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <HAL_MspInit+0x34>)
 8001488:	2100      	movs	r1, #0
 800148a:	9100      	str	r1, [sp, #0]
 800148c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800148e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001492:	645a      	str	r2, [r3, #68]	; 0x44
 8001494:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001496:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800149a:	9200      	str	r2, [sp, #0]
 800149c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	9101      	str	r1, [sp, #4]
 80014a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a6:	641a      	str	r2, [r3, #64]	; 0x40
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	9301      	str	r3, [sp, #4]
 80014b0:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b2:	b002      	add	sp, #8
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800

080014bc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <NMI_Handler>

080014be <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <HardFault_Handler>

080014c0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <MemManage_Handler>

080014c2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <BusFault_Handler>

080014c4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler>

080014c6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 b9a0 	b.w	8001810 <HAL_IncTick>

080014d0 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80014d0:	4801      	ldr	r0, [pc, #4]	; (80014d8 <TIM7_IRQHandler+0x8>)
 80014d2:	f001 ba39 	b.w	8002948 <HAL_TIM_IRQHandler>
 80014d6:	bf00      	nop
 80014d8:	2000530c 	.word	0x2000530c

080014dc <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80014dc:	4801      	ldr	r0, [pc, #4]	; (80014e4 <DMA2_Stream0_IRQHandler+0x8>)
 80014de:	f000 bd27 	b.w	8001f30 <HAL_DMA_IRQHandler>
 80014e2:	bf00      	nop
 80014e4:	20005260 	.word	0x20005260

080014e8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80014e8:	2001      	movs	r0, #1
 80014ea:	4770      	bx	lr

080014ec <_kill>:

int _kill(int pid, int sig)
{
 80014ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014ee:	f002 fc39 	bl	8003d64 <__errno>
 80014f2:	2316      	movs	r3, #22
 80014f4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80014f6:	f04f 30ff 	mov.w	r0, #4294967295
 80014fa:	bd08      	pop	{r3, pc}

080014fc <_exit>:

void _exit (int status)
{
 80014fc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80014fe:	f002 fc31 	bl	8003d64 <__errno>
 8001502:	2316      	movs	r3, #22
 8001504:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001506:	e7fe      	b.n	8001506 <_exit+0xa>

08001508 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001508:	b570      	push	{r4, r5, r6, lr}
 800150a:	460d      	mov	r5, r1
 800150c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150e:	460e      	mov	r6, r1
 8001510:	1b73      	subs	r3, r6, r5
 8001512:	429c      	cmp	r4, r3
 8001514:	dc01      	bgt.n	800151a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001516:	4620      	mov	r0, r4
 8001518:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800151a:	f3af 8000 	nop.w
 800151e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001522:	e7f5      	b.n	8001510 <_read+0x8>

08001524 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001524:	b570      	push	{r4, r5, r6, lr}
 8001526:	460d      	mov	r5, r1
 8001528:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	460e      	mov	r6, r1
 800152c:	1b73      	subs	r3, r6, r5
 800152e:	429c      	cmp	r4, r3
 8001530:	dc01      	bgt.n	8001536 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001532:	4620      	mov	r0, r4
 8001534:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001536:	f816 0b01 	ldrb.w	r0, [r6], #1
 800153a:	f7ff ff07 	bl	800134c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	e7f5      	b.n	800152c <_write+0x8>

08001540 <_close>:

int _close(int file)
{
	return -1;
}
 8001540:	f04f 30ff 	mov.w	r0, #4294967295
 8001544:	4770      	bx	lr

08001546 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001546:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800154c:	2000      	movs	r0, #0
 800154e:	4770      	bx	lr

08001550 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001550:	2001      	movs	r0, #1
 8001552:	4770      	bx	lr

08001554 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001554:	2000      	movs	r0, #0
 8001556:	4770      	bx	lr

08001558 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4a0b      	ldr	r2, [pc, #44]	; (8001588 <_sbrk+0x30>)
 800155a:	6811      	ldr	r1, [r2, #0]
{
 800155c:	b510      	push	{r4, lr}
 800155e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001560:	b909      	cbnz	r1, 8001566 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001562:	490a      	ldr	r1, [pc, #40]	; (800158c <_sbrk+0x34>)
 8001564:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	6810      	ldr	r0, [r2, #0]
 8001568:	4909      	ldr	r1, [pc, #36]	; (8001590 <_sbrk+0x38>)
 800156a:	4c0a      	ldr	r4, [pc, #40]	; (8001594 <_sbrk+0x3c>)
 800156c:	4403      	add	r3, r0
 800156e:	1b09      	subs	r1, r1, r4
 8001570:	428b      	cmp	r3, r1
 8001572:	d906      	bls.n	8001582 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001574:	f002 fbf6 	bl	8003d64 <__errno>
 8001578:	230c      	movs	r3, #12
 800157a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800157c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001580:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001582:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001584:	e7fc      	b.n	8001580 <_sbrk+0x28>
 8001586:	bf00      	nop
 8001588:	200052c0 	.word	0x200052c0
 800158c:	200053b0 	.word	0x200053b0
 8001590:	20020000 	.word	0x20020000
 8001594:	00000400 	.word	0x00000400

08001598 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <SystemInit+0x10>)
 800159a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800159e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015ac:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 90-1;
 80015ae:	4a0e      	ldr	r2, [pc, #56]	; (80015e8 <MX_TIM6_Init+0x3c>)
  htim6.Instance = TIM6;
 80015b0:	480e      	ldr	r0, [pc, #56]	; (80015ec <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = 90-1;
 80015b2:	2359      	movs	r3, #89	; 0x59
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 90-1;
 80015b6:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 80015ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015be:	e9cd 4400 	strd	r4, r4, [sp]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c2:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 65535;
 80015c4:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015c8:	f001 fac6 	bl	8002b58 <HAL_TIM_Base_Init>
 80015cc:	b108      	cbz	r0, 80015d2 <MX_TIM6_Init+0x26>
  {
    Error_Handler();
 80015ce:	f7ff ff57 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015d2:	4806      	ldr	r0, [pc, #24]	; (80015ec <MX_TIM6_Init+0x40>)
 80015d4:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d6:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015da:	f001 fae9 	bl	8002bb0 <HAL_TIMEx_MasterConfigSynchronization>
 80015de:	b108      	cbz	r0, 80015e4 <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 80015e0:	f7ff ff4e 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80015e4:	b002      	add	sp, #8
 80015e6:	bd10      	pop	{r4, pc}
 80015e8:	40001000 	.word	0x40001000
 80015ec:	200052c4 	.word	0x200052c4

080015f0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80015f0:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 90-1;
 80015f2:	4a0e      	ldr	r2, [pc, #56]	; (800162c <MX_TIM7_Init+0x3c>)
  htim7.Instance = TIM7;
 80015f4:	480e      	ldr	r0, [pc, #56]	; (8001630 <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = 90-1;
 80015f6:	2359      	movs	r3, #89	; 0x59
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f8:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 90-1;
 80015fa:	e9c0 2300 	strd	r2, r3, [r0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 100-1;
 80015fe:	2363      	movs	r3, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001600:	e9cd 4400 	strd	r4, r4, [sp]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001604:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 100-1;
 8001606:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800160a:	f001 faa5 	bl	8002b58 <HAL_TIM_Base_Init>
 800160e:	b108      	cbz	r0, 8001614 <MX_TIM7_Init+0x24>
  {
    Error_Handler();
 8001610:	f7ff ff36 	bl	8001480 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001614:	4806      	ldr	r0, [pc, #24]	; (8001630 <MX_TIM7_Init+0x40>)
 8001616:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001618:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800161c:	f001 fac8 	bl	8002bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8001620:	b108      	cbz	r0, 8001626 <MX_TIM7_Init+0x36>
  {
    Error_Handler();
 8001622:	f7ff ff2d 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001626:	b002      	add	sp, #8
 8001628:	bd10      	pop	{r4, pc}
 800162a:	bf00      	nop
 800162c:	40001400 	.word	0x40001400
 8001630:	2000530c 	.word	0x2000530c

08001634 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001634:	b507      	push	{r0, r1, r2, lr}

  if(tim_baseHandle->Instance==TIM6)
 8001636:	6803      	ldr	r3, [r0, #0]
 8001638:	4a15      	ldr	r2, [pc, #84]	; (8001690 <HAL_TIM_Base_MspInit+0x5c>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d10e      	bne.n	800165c <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	4b14      	ldr	r3, [pc, #80]	; (8001694 <HAL_TIM_Base_MspInit+0x60>)
 8001644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001646:	f042 0210 	orr.w	r2, r2, #16
 800164a:	641a      	str	r2, [r3, #64]	; 0x40
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001656:	b003      	add	sp, #12
 8001658:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM7)
 800165c:	4a0e      	ldr	r2, [pc, #56]	; (8001698 <HAL_TIM_Base_MspInit+0x64>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d1f9      	bne.n	8001656 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001662:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <HAL_TIM_Base_MspInit+0x60>)
 8001664:	2200      	movs	r2, #0
 8001666:	9201      	str	r2, [sp, #4]
 8001668:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800166a:	f041 0120 	orr.w	r1, r1, #32
 800166e:	6419      	str	r1, [r3, #64]	; 0x40
 8001670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001672:	f003 0320 	and.w	r3, r3, #32
 8001676:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 8001678:	2104      	movs	r1, #4
 800167a:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 800167c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_IRQn, 4, 0);
 800167e:	f000 fb33 	bl	8001ce8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001682:	2037      	movs	r0, #55	; 0x37
}
 8001684:	b003      	add	sp, #12
 8001686:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800168a:	f000 bb5f 	b.w	8001d4c <HAL_NVIC_EnableIRQ>
 800168e:	bf00      	nop
 8001690:	40001000 	.word	0x40001000
 8001694:	40023800 	.word	0x40023800
 8001698:	40001400 	.word	0x40001400

0800169c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800169c:	480b      	ldr	r0, [pc, #44]	; (80016cc <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800169e:	4a0c      	ldr	r2, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x34>)
{
 80016a0:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 80016a2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016a6:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016aa:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016ac:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016ae:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016b6:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	f001 fb4d 	bl	8002d58 <HAL_UART_Init>
 80016be:	b118      	cbz	r0, 80016c8 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80016c4:	f7ff bedc 	b.w	8001480 <Error_Handler>
}
 80016c8:	bd08      	pop	{r3, pc}
 80016ca:	bf00      	nop
 80016cc:	20005354 	.word	0x20005354
 80016d0:	40004400 	.word	0x40004400

080016d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d4:	b510      	push	{r4, lr}
 80016d6:	4604      	mov	r4, r0
 80016d8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	2214      	movs	r2, #20
 80016dc:	2100      	movs	r1, #0
 80016de:	a803      	add	r0, sp, #12
 80016e0:	f002 fb6a 	bl	8003db8 <memset>
  if(uartHandle->Instance==USART2)
 80016e4:	6822      	ldr	r2, [r4, #0]
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <HAL_UART_MspInit+0x64>)
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d122      	bne.n	8001732 <HAL_UART_MspInit+0x5e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ec:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80016f0:	2100      	movs	r1, #0
 80016f2:	9101      	str	r1, [sp, #4]
 80016f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f6:	4811      	ldr	r0, [pc, #68]	; (800173c <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80016fc:	641a      	str	r2, [r3, #64]	; 0x40
 80016fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001700:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001704:	9201      	str	r2, [sp, #4]
 8001706:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001708:	9102      	str	r1, [sp, #8]
 800170a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	631a      	str	r2, [r3, #48]	; 0x30
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	9302      	str	r3, [sp, #8]
 800171a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	220c      	movs	r2, #12
 800171e:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001720:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001726:	2307      	movs	r3, #7
 8001728:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	a903      	add	r1, sp, #12
 800172e:	f000 fcbd 	bl	80020ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001732:	b008      	add	sp, #32
 8001734:	bd10      	pop	{r4, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	40020000 	.word	0x40020000

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001746:	490e      	ldr	r1, [pc, #56]	; (8001780 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001748:	4a0e      	ldr	r2, [pc, #56]	; (8001784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800175c:	4c0b      	ldr	r4, [pc, #44]	; (800178c <LoopFillZerobss+0x26>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800176a:	f7ff ff15 	bl	8001598 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800176e:	f002 faff 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7ff fe65 	bl	8001440 <main>
  bx  lr    
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001784:	08009bdc 	.word	0x08009bdc
  ldr r2, =_sbss
 8001788:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800178c:	200053ac 	.word	0x200053ac

08001790 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC_IRQHandler>
	...

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001796:	4a0e      	ldr	r2, [pc, #56]	; (80017d0 <HAL_InitTick+0x3c>)
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_InitTick+0x40>)
{
 800179a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	7818      	ldrb	r0, [r3, #0]
 800179e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a2:	fbb3 f3f0 	udiv	r3, r3, r0
 80017a6:	6810      	ldr	r0, [r2, #0]
 80017a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80017ac:	f000 fadc 	bl	8001d68 <HAL_SYSTICK_Config>
 80017b0:	4604      	mov	r4, r0
 80017b2:	b958      	cbnz	r0, 80017cc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b4:	2d0f      	cmp	r5, #15
 80017b6:	d809      	bhi.n	80017cc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b8:	4602      	mov	r2, r0
 80017ba:	4629      	mov	r1, r5
 80017bc:	f04f 30ff 	mov.w	r0, #4294967295
 80017c0:	f000 fa92 	bl	8001ce8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c4:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <HAL_InitTick+0x44>)
 80017c6:	4620      	mov	r0, r4
 80017c8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80017ca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80017cc:	2001      	movs	r0, #1
 80017ce:	e7fc      	b.n	80017ca <HAL_InitTick+0x36>
 80017d0:	20000008 	.word	0x20000008
 80017d4:	2000000c 	.word	0x2000000c
 80017d8:	20000010 	.word	0x20000010

080017dc <HAL_Init>:
{
 80017dc:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017de:	4b0b      	ldr	r3, [pc, #44]	; (800180c <HAL_Init+0x30>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017e6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80017ee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017f6:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017f8:	2003      	movs	r0, #3
 80017fa:	f000 fa63 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017fe:	200f      	movs	r0, #15
 8001800:	f7ff ffc8 	bl	8001794 <HAL_InitTick>
  HAL_MspInit();
 8001804:	f7ff fe3e 	bl	8001484 <HAL_MspInit>
}
 8001808:	2000      	movs	r0, #0
 800180a:	bd08      	pop	{r3, pc}
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001810:	4a03      	ldr	r2, [pc, #12]	; (8001820 <HAL_IncTick+0x10>)
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <HAL_IncTick+0x14>)
 8001814:	6811      	ldr	r1, [r2, #0]
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	440b      	add	r3, r1
 800181a:	6013      	str	r3, [r2, #0]
}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20005398 	.word	0x20005398
 8001824:	2000000c 	.word	0x2000000c

08001828 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001828:	4b01      	ldr	r3, [pc, #4]	; (8001830 <HAL_GetTick+0x8>)
 800182a:	6818      	ldr	r0, [r3, #0]
}
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20005398 	.word	0x20005398

08001834 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b538      	push	{r3, r4, r5, lr}
 8001836:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001838:	f7ff fff6 	bl	8001828 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	bf1c      	itt	ne
 8001840:	4b05      	ldrne	r3, [pc, #20]	; (8001858 <HAL_Delay+0x24>)
 8001842:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001844:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001846:	bf18      	it	ne
 8001848:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184a:	f7ff ffed 	bl	8001828 <HAL_GetTick>
 800184e:	1b43      	subs	r3, r0, r5
 8001850:	42a3      	cmp	r3, r4
 8001852:	d3fa      	bcc.n	800184a <HAL_Delay+0x16>
  {
  }
}
 8001854:	bd38      	pop	{r3, r4, r5, pc}
 8001856:	bf00      	nop
 8001858:	2000000c 	.word	0x2000000c

0800185c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800185c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800185e:	4604      	mov	r4, r0
 8001860:	2800      	cmp	r0, #0
 8001862:	f000 809b 	beq.w	800199c <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001866:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8001868:	b925      	cbnz	r5, 8001874 <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800186a:	f7ff fcf1 	bl	8001250 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800186e:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001870:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001874:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001876:	06db      	lsls	r3, r3, #27
 8001878:	f100 808e 	bmi.w	8001998 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800187c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800187e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001882:	f023 0302 	bic.w	r3, r3, #2
 8001886:	f043 0302 	orr.w	r3, r3, #2
 800188a:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800188c:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <HAL_ADC_Init+0x144>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001894:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	6861      	ldr	r1, [r4, #4]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189e:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018a0:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018aa:	685a      	ldr	r2, [r3, #4]
 80018ac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018b2:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018b4:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018b6:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018ba:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c2:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018c4:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018d2:	4934      	ldr	r1, [pc, #208]	; (80019a4 <HAL_ADC_Init+0x148>)
 80018d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018d6:	428a      	cmp	r2, r1
 80018d8:	d052      	beq.n	8001980 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018da:	6899      	ldr	r1, [r3, #8]
 80018dc:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80018e0:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018e2:	6899      	ldr	r1, [r3, #8]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018e8:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ea:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018f8:	689a      	ldr	r2, [r3, #8]
 80018fa:	f022 0202 	bic.w	r2, r2, #2
 80018fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	7e21      	ldrb	r1, [r4, #24]
 8001904:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8001908:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800190a:	f894 2020 	ldrb.w	r2, [r4, #32]
 800190e:	2a00      	cmp	r2, #0
 8001910:	d03e      	beq.n	8001990 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001912:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001914:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001916:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800191a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800191c:	685a      	ldr	r2, [r3, #4]
 800191e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001922:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	3901      	subs	r1, #1
 8001928:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800192c:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800192e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001930:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001932:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800193a:	3901      	subs	r1, #1
 800193c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001940:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8001950:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 8001954:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001956:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001958:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800195a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800195e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001960:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8001962:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001964:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8001968:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800196a:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800196c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800196e:	f023 0303 	bic.w	r3, r3, #3
 8001972:	f043 0301 	orr.w	r3, r3, #1
 8001976:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8001978:	2300      	movs	r3, #0
 800197a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800197e:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001986:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800198e:	e7b2      	b.n	80018f6 <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001996:	e7c9      	b.n	800192c <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8001998:	2001      	movs	r0, #1
 800199a:	e7ed      	b.n	8001978 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 800199c:	2001      	movs	r0, #1
 800199e:	e7ee      	b.n	800197e <HAL_ADC_Init+0x122>
 80019a0:	40012300 	.word	0x40012300
 80019a4:	0f000001 	.word	0x0f000001

080019a8 <HAL_ADC_Start_DMA>:
{
 80019a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80019aa:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 80019ac:	2200      	movs	r2, #0
 80019ae:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80019b0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80019b4:	2a01      	cmp	r2, #1
{
 80019b6:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80019b8:	f000 808c 	beq.w	8001ad4 <HAL_ADC_Start_DMA+0x12c>
 80019bc:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019be:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 80019c0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80019c4:	68b2      	ldr	r2, [r6, #8]
 80019c6:	07d4      	lsls	r4, r2, #31
 80019c8:	d554      	bpl.n	8001a74 <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80019ca:	68b2      	ldr	r2, [r6, #8]
 80019cc:	05d0      	lsls	r0, r2, #23
 80019ce:	d464      	bmi.n	8001a9a <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80019d0:	68b4      	ldr	r4, [r6, #8]
 80019d2:	f014 0401 	ands.w	r4, r4, #1
 80019d6:	d074      	beq.n	8001ac2 <HAL_ADC_Start_DMA+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 80019d8:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80019da:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80019de:	f020 0001 	bic.w	r0, r0, #1
 80019e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80019e6:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80019e8:	6872      	ldr	r2, [r6, #4]
 80019ea:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80019ec:	bf41      	itttt	mi
 80019ee:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 80019f0:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80019f4:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80019f8:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019fa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80019fc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019fe:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a02:	bf1c      	itt	ne
 8001a04:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 8001a06:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001a0a:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 8001a0c:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a0e:	4a33      	ldr	r2, [pc, #204]	; (8001adc <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 8001a10:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a14:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a16:	4a32      	ldr	r2, [pc, #200]	; (8001ae0 <HAL_ADC_Start_DMA+0x138>)
 8001a18:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a1a:	4a32      	ldr	r2, [pc, #200]	; (8001ae4 <HAL_ADC_Start_DMA+0x13c>)
 8001a1c:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a1e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a22:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001a24:	6872      	ldr	r2, [r6, #4]
 8001a26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001a2a:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001a2c:	68b2      	ldr	r2, [r6, #8]
 8001a2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a32:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001a34:	460a      	mov	r2, r1
 8001a36:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8001a3a:	f000 fa3f 	bl	8001ebc <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001a3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ae8 <HAL_ADC_Start_DMA+0x140>)
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	6850      	ldr	r0, [r2, #4]
 8001a44:	4929      	ldr	r1, [pc, #164]	; (8001aec <HAL_ADC_Start_DMA+0x144>)
 8001a46:	f010 001f 	ands.w	r0, r0, #31
 8001a4a:	d132      	bne.n	8001ab2 <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001a4c:	428b      	cmp	r3, r1
 8001a4e:	d007      	beq.n	8001a60 <HAL_ADC_Start_DMA+0xb8>
 8001a50:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8001a54:	428b      	cmp	r3, r1
 8001a56:	d125      	bne.n	8001aa4 <HAL_ADC_Start_DMA+0xfc>
 8001a58:	6852      	ldr	r2, [r2, #4]
 8001a5a:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001a5e:	d107      	bne.n	8001a70 <HAL_ADC_Start_DMA+0xc8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001a60:	6898      	ldr	r0, [r3, #8]
 8001a62:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001a66:	d137      	bne.n	8001ad8 <HAL_ADC_Start_DMA+0x130>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a6e:	609a      	str	r2, [r3, #8]
}
 8001a70:	b002      	add	sp, #8
 8001a72:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8001a74:	68b2      	ldr	r2, [r6, #8]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a7c:	4a1c      	ldr	r2, [pc, #112]	; (8001af0 <HAL_ADC_Start_DMA+0x148>)
 8001a7e:	6810      	ldr	r0, [r2, #0]
 8001a80:	4a1c      	ldr	r2, [pc, #112]	; (8001af4 <HAL_ADC_Start_DMA+0x14c>)
 8001a82:	fbb0 f0f2 	udiv	r0, r0, r2
 8001a86:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001a8a:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8001a8c:	9a01      	ldr	r2, [sp, #4]
 8001a8e:	2a00      	cmp	r2, #0
 8001a90:	d09b      	beq.n	80019ca <HAL_ADC_Start_DMA+0x22>
      counter--;
 8001a92:	9a01      	ldr	r2, [sp, #4]
 8001a94:	3a01      	subs	r2, #1
 8001a96:	9201      	str	r2, [sp, #4]
 8001a98:	e7f8      	b.n	8001a8c <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a9a:	68b2      	ldr	r2, [r6, #8]
 8001a9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa0:	60b2      	str	r2, [r6, #8]
 8001aa2:	e795      	b.n	80019d0 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001aa4:	4914      	ldr	r1, [pc, #80]	; (8001af8 <HAL_ADC_Start_DMA+0x150>)
 8001aa6:	428b      	cmp	r3, r1
 8001aa8:	d1e2      	bne.n	8001a70 <HAL_ADC_Start_DMA+0xc8>
 8001aaa:	6852      	ldr	r2, [r2, #4]
 8001aac:	f012 0f10 	tst.w	r2, #16
 8001ab0:	e7d5      	b.n	8001a5e <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001ab2:	428b      	cmp	r3, r1
 8001ab4:	d110      	bne.n	8001ad8 <HAL_ADC_Start_DMA+0x130>
 8001ab6:	6898      	ldr	r0, [r3, #8]
 8001ab8:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8001abc:	d0d4      	beq.n	8001a68 <HAL_ADC_Start_DMA+0xc0>
  return HAL_OK;
 8001abe:	4620      	mov	r0, r4
 8001ac0:	e7d6      	b.n	8001a70 <HAL_ADC_Start_DMA+0xc8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8001ac4:	f043 0310 	orr.w	r3, r3, #16
 8001ac8:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	646b      	str	r3, [r5, #68]	; 0x44
 8001ad2:	e7f4      	b.n	8001abe <HAL_ADC_Start_DMA+0x116>
  __HAL_LOCK(hadc);
 8001ad4:	2002      	movs	r0, #2
 8001ad6:	e7cb      	b.n	8001a70 <HAL_ADC_Start_DMA+0xc8>
  return HAL_OK;
 8001ad8:	2000      	movs	r0, #0
 8001ada:	e7c9      	b.n	8001a70 <HAL_ADC_Start_DMA+0xc8>
 8001adc:	08001b1f 	.word	0x08001b1f
 8001ae0:	08001afd 	.word	0x08001afd
 8001ae4:	08001b09 	.word	0x08001b09
 8001ae8:	40012300 	.word	0x40012300
 8001aec:	40012000 	.word	0x40012000
 8001af0:	20000008 	.word	0x20000008
 8001af4:	000f4240 	.word	0x000f4240
 8001af8:	40012200 	.word	0x40012200

08001afc <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001afc:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001afe:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001b00:	f7ff fc48 	bl	8001394 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b04:	bd08      	pop	{r3, pc}

08001b06 <HAL_ADC_ErrorCallback>:
 8001b06:	4770      	bx	lr

08001b08 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b08:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001b0a:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b0c:	2340      	movs	r3, #64	; 0x40
 8001b0e:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b10:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b18:	f7ff fff5 	bl	8001b06 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b1c:	bd08      	pop	{r3, pc}

08001b1e <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b22:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8001b26:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b2a:	d123      	bne.n	8001b74 <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b30:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6891      	ldr	r1, [r2, #8]
 8001b36:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8001b3a:	d117      	bne.n	8001b6c <ADC_DMAConvCplt+0x4e>
 8001b3c:	7e19      	ldrb	r1, [r3, #24]
 8001b3e:	b9a9      	cbnz	r1, 8001b6c <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b42:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8001b46:	d002      	beq.n	8001b4e <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b48:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b4a:	0548      	lsls	r0, r1, #21
 8001b4c:	d40e      	bmi.n	8001b6c <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b4e:	6851      	ldr	r1, [r2, #4]
 8001b50:	f021 0120 	bic.w	r1, r1, #32
 8001b54:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b5c:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b60:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b62:	bf5e      	ittt	pl
 8001b64:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8001b66:	f042 0201 	orrpl.w	r2, r2, #1
 8001b6a:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fc09 	bl	8001384 <HAL_ADC_ConvCpltCallback>
}
 8001b72:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b74:	06d2      	lsls	r2, r2, #27
 8001b76:	d503      	bpl.n	8001b80 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff ffc4 	bl	8001b06 <HAL_ADC_ErrorCallback>
 8001b7e:	e7f8      	b.n	8001b72 <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8001b82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b88:	4718      	bx	r3
	...

08001b8c <HAL_ADC_ConfigChannel>:
{
 8001b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8001b92:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d069      	beq.n	8001c6e <HAL_ADC_ConfigChannel+0xe2>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ba0:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001ba2:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ba4:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ba6:	2d09      	cmp	r5, #9
 8001ba8:	b2ac      	uxth	r4, r5
 8001baa:	d934      	bls.n	8001c16 <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8001bb0:	68df      	ldr	r7, [r3, #12]
 8001bb2:	3a1e      	subs	r2, #30
 8001bb4:	f04f 0c07 	mov.w	ip, #7
 8001bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8001bbc:	ea27 070c 	bic.w	r7, r7, ip
 8001bc0:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bc2:	68df      	ldr	r7, [r3, #12]
 8001bc4:	fa06 f202 	lsl.w	r2, r6, r2
 8001bc8:	433a      	orrs	r2, r7
 8001bca:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8001bcc:	6849      	ldr	r1, [r1, #4]
 8001bce:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bd0:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8001bd4:	d82f      	bhi.n	8001c36 <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bd6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001bd8:	3a05      	subs	r2, #5
 8001bda:	261f      	movs	r6, #31
 8001bdc:	4096      	lsls	r6, r2
 8001bde:	ea21 0106 	bic.w	r1, r1, r6
 8001be2:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001be4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001be6:	fa04 f202 	lsl.w	r2, r4, r2
 8001bea:	430a      	orrs	r2, r1
 8001bec:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bee:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_ADC_ConfigChannel+0x124>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d10a      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x7e>
 8001bf4:	2d12      	cmp	r5, #18
 8001bf6:	d13c      	bne.n	8001c72 <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_ADC_ConfigChannel+0x128>)
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8001c00:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c08:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8001c10:	4618      	mov	r0, r3
}
 8001c12:	b003      	add	sp, #12
 8001c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c16:	691f      	ldr	r7, [r3, #16]
 8001c18:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8001c1c:	f04f 0c07 	mov.w	ip, #7
 8001c20:	fa0c fc02 	lsl.w	ip, ip, r2
 8001c24:	ea27 070c 	bic.w	r7, r7, ip
 8001c28:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c2a:	691f      	ldr	r7, [r3, #16]
 8001c2c:	fa06 f202 	lsl.w	r2, r6, r2
 8001c30:	433a      	orrs	r2, r7
 8001c32:	611a      	str	r2, [r3, #16]
 8001c34:	e7ca      	b.n	8001bcc <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8001c36:	290c      	cmp	r1, #12
 8001c38:	f04f 011f 	mov.w	r1, #31
 8001c3c:	d80b      	bhi.n	8001c56 <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c3e:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8001c40:	3a23      	subs	r2, #35	; 0x23
 8001c42:	4091      	lsls	r1, r2
 8001c44:	ea26 0101 	bic.w	r1, r6, r1
 8001c48:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c4c:	fa04 f202 	lsl.w	r2, r4, r2
 8001c50:	430a      	orrs	r2, r1
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
 8001c54:	e7cb      	b.n	8001bee <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c56:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8001c58:	3a41      	subs	r2, #65	; 0x41
 8001c5a:	4091      	lsls	r1, r2
 8001c5c:	ea26 0101 	bic.w	r1, r6, r1
 8001c60:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001c62:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c64:	fa04 f202 	lsl.w	r2, r4, r2
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c6c:	e7bf      	b.n	8001bee <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8001c6e:	2002      	movs	r0, #2
 8001c70:	e7cf      	b.n	8001c12 <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <HAL_ADC_ConfigChannel+0x12c>)
 8001c74:	429d      	cmp	r5, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_ADC_ConfigChannel+0xf0>
 8001c78:	2d11      	cmp	r5, #17
 8001c7a:	d1c6      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001c7c:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_ADC_ConfigChannel+0x128>)
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8001c84:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c86:	685a      	ldr	r2, [r3, #4]
 8001c88:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c8c:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_ADC_ConfigChannel+0x12c>)
 8001c90:	429d      	cmp	r5, r3
 8001c92:	d1ba      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_ADC_ConfigChannel+0x130>)
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_ADC_ConfigChannel+0x134>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c9e:	220a      	movs	r2, #10
 8001ca0:	4353      	muls	r3, r2
        counter--;
 8001ca2:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8001ca4:	9b01      	ldr	r3, [sp, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0af      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 8001caa:	9b01      	ldr	r3, [sp, #4]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	e7f8      	b.n	8001ca2 <HAL_ADC_ConfigChannel+0x116>
 8001cb0:	40012000 	.word	0x40012000
 8001cb4:	40012300 	.word	0x40012300
 8001cb8:	10000012 	.word	0x10000012
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	000f4240 	.word	0x000f4240

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4907      	ldr	r1, [pc, #28]	; (8001ce4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001cc6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cce:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ce0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cea:	b530      	push	{r4, r5, lr}
 8001cec:	68dc      	ldr	r4, [r3, #12]
 8001cee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf2:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	2d04      	cmp	r5, #4
 8001cfa:	bf28      	it	cs
 8001cfc:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d04:	bf8c      	ite	hi
 8001d06:	3c03      	subhi	r4, #3
 8001d08:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d0a:	fa03 f505 	lsl.w	r5, r3, r5
 8001d0e:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d12:	40a3      	lsls	r3, r4
 8001d14:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	bfac      	ite	ge
 8001d22:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	4a08      	ldrlt	r2, [pc, #32]	; (8001d48 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	bfb8      	it	lt
 8001d2e:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d32:	b2db      	uxtb	r3, r3
 8001d34:	bfaa      	itet	ge
 8001d36:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d40:	bd30      	pop	{r4, r5, pc}
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00
 8001d48:	e000ed14 	.word	0xe000ed14

08001d4c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	2800      	cmp	r0, #0
 8001d4e:	db08      	blt.n	8001d62 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d50:	0942      	lsrs	r2, r0, #5
 8001d52:	2301      	movs	r3, #1
 8001d54:	f000 001f 	and.w	r0, r0, #31
 8001d58:	fa03 f000 	lsl.w	r0, r3, r0
 8001d5c:	4b01      	ldr	r3, [pc, #4]	; (8001d64 <HAL_NVIC_EnableIRQ+0x18>)
 8001d5e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100

08001d68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d68:	3801      	subs	r0, #1
 8001d6a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d6e:	d20b      	bcs.n	8001d88 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	4a05      	ldr	r2, [pc, #20]	; (8001d8c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d76:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d78:	21f0      	movs	r1, #240	; 0xf0
 8001d7a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d80:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d82:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d84:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d86:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d88:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d8a:	4770      	bx	lr
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d90:	6803      	ldr	r3, [r0, #0]
{
 8001d92:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001d94:	4c08      	ldr	r4, [pc, #32]	; (8001db8 <DMA_CalcBaseAndBitshift+0x28>)
{
 8001d96:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001d98:	b2d9      	uxtb	r1, r3
 8001d9a:	3910      	subs	r1, #16
 8001d9c:	2018      	movs	r0, #24
 8001d9e:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001da2:	5c20      	ldrb	r0, [r4, r0]
 8001da4:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001da6:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8001daa:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8001dae:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001db0:	bf88      	it	hi
 8001db2:	3004      	addhi	r0, #4
 8001db4:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8001db6:	bd10      	pop	{r4, pc}
 8001db8:	080069cb 	.word	0x080069cb

08001dbc <HAL_DMA_Init>:
{
 8001dbc:	b570      	push	{r4, r5, r6, lr}
 8001dbe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff fd32 	bl	8001828 <HAL_GetTick>
 8001dc4:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001dc6:	2c00      	cmp	r4, #0
 8001dc8:	d073      	beq.n	8001eb2 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001dd0:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001dd8:	6813      	ldr	r3, [r2, #0]
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001de0:	6821      	ldr	r1, [r4, #0]
 8001de2:	680b      	ldr	r3, [r1, #0]
 8001de4:	07d8      	lsls	r0, r3, #31
 8001de6:	d42f      	bmi.n	8001e48 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8001de8:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dea:	4d33      	ldr	r5, [pc, #204]	; (8001eb8 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dec:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001dee:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df0:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	68e2      	ldr	r2, [r4, #12]
 8001df8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	6922      	ldr	r2, [r4, #16]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	6962      	ldr	r2, [r4, #20]
 8001e00:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e02:	69e2      	ldr	r2, [r4, #28]
 8001e04:	4303      	orrs	r3, r0
 8001e06:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e08:	6a22      	ldr	r2, [r4, #32]
 8001e0a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e0e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e10:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e14:	bf02      	ittt	eq
 8001e16:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8001e1a:	4335      	orreq	r5, r6
 8001e1c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8001e1e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8001e20:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e22:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e24:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8001e28:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e2c:	d133      	bne.n	8001e96 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8001e2e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e30:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8001e32:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e34:	b37d      	cbz	r5, 8001e96 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e36:	b990      	cbnz	r0, 8001e5e <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8001e38:	2a01      	cmp	r2, #1
 8001e3a:	d021      	beq.n	8001e80 <HAL_DMA_Init+0xc4>
 8001e3c:	f032 0202 	bics.w	r2, r2, #2
 8001e40:	d129      	bne.n	8001e96 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e42:	01ea      	lsls	r2, r5, #7
 8001e44:	d527      	bpl.n	8001e96 <HAL_DMA_Init+0xda>
 8001e46:	e01e      	b.n	8001e86 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e48:	f7ff fcee 	bl	8001828 <HAL_GetTick>
 8001e4c:	1b40      	subs	r0, r0, r5
 8001e4e:	2805      	cmp	r0, #5
 8001e50:	d9c6      	bls.n	8001de0 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e52:	2320      	movs	r3, #32
 8001e54:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e56:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001e58:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001e5c:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001e5e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001e62:	d114      	bne.n	8001e8e <HAL_DMA_Init+0xd2>
    switch (tmp)
 8001e64:	2a03      	cmp	r2, #3
 8001e66:	d816      	bhi.n	8001e96 <HAL_DMA_Init+0xda>
 8001e68:	a001      	add	r0, pc, #4	; (adr r0, 8001e70 <HAL_DMA_Init+0xb4>)
 8001e6a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001e87 	.word	0x08001e87
 8001e74:	08001e43 	.word	0x08001e43
 8001e78:	08001e87 	.word	0x08001e87
 8001e7c:	08001e81 	.word	0x08001e81
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e80:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8001e84:	d107      	bne.n	8001e96 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	e7e4      	b.n	8001e58 <HAL_DMA_Init+0x9c>
    switch (tmp)
 8001e8e:	2a02      	cmp	r2, #2
 8001e90:	d9f9      	bls.n	8001e86 <HAL_DMA_Init+0xca>
 8001e92:	2a03      	cmp	r2, #3
 8001e94:	d0d5      	beq.n	8001e42 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8001e96:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f7ff ff79 	bl	8001d90 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e9e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001ea0:	233f      	movs	r3, #63	; 0x3f
 8001ea2:	4093      	lsls	r3, r2
 8001ea4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001ea8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eaa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001eac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001eb0:	e7d4      	b.n	8001e5c <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8001eb2:	2001      	movs	r0, #1
 8001eb4:	e7d2      	b.n	8001e5c <HAL_DMA_Init+0xa0>
 8001eb6:	bf00      	nop
 8001eb8:	f010803f 	.word	0xf010803f

08001ebc <HAL_DMA_Start_IT>:
{
 8001ebc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001ebe:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec2:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001ec4:	2c01      	cmp	r4, #1
 8001ec6:	d031      	beq.n	8001f2c <HAL_DMA_Start_IT+0x70>
 8001ec8:	2401      	movs	r4, #1
 8001eca:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ece:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001ed2:	2c01      	cmp	r4, #1
 8001ed4:	f04f 0500 	mov.w	r5, #0
 8001ed8:	f04f 0402 	mov.w	r4, #2
 8001edc:	d124      	bne.n	8001f28 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ede:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ee2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ee4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ee6:	6825      	ldr	r5, [r4, #0]
 8001ee8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001eec:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001eee:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ef0:	6883      	ldr	r3, [r0, #8]
 8001ef2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001ef4:	bf0e      	itee	eq
 8001ef6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001ef8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001efa:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001efc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001efe:	bf08      	it	eq
 8001f00:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f02:	233f      	movs	r3, #63	; 0x3f
 8001f04:	4093      	lsls	r3, r2
 8001f06:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	f043 0316 	orr.w	r3, r3, #22
 8001f0e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001f10:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f12:	b11b      	cbz	r3, 8001f1c <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	f043 0308 	orr.w	r3, r3, #8
 8001f1a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001f1c:	6823      	ldr	r3, [r4, #0]
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f24:	2000      	movs	r0, #0
}
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001f28:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001f2c:	2002      	movs	r0, #2
 8001f2e:	e7fa      	b.n	8001f26 <HAL_DMA_Start_IT+0x6a>

08001f30 <HAL_DMA_IRQHandler>:
{
 8001f30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f36:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f38:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f3a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001f3e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f40:	2208      	movs	r2, #8
 8001f42:	409a      	lsls	r2, r3
 8001f44:	4232      	tst	r2, r6
{
 8001f46:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f48:	d00c      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f4a:	6801      	ldr	r1, [r0, #0]
 8001f4c:	6808      	ldr	r0, [r1, #0]
 8001f4e:	0740      	lsls	r0, r0, #29
 8001f50:	d508      	bpl.n	8001f64 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f52:	6808      	ldr	r0, [r1, #0]
 8001f54:	f020 0004 	bic.w	r0, r0, #4
 8001f58:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f5a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f5c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001f5e:	f042 0201 	orr.w	r2, r2, #1
 8001f62:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f64:	2201      	movs	r2, #1
 8001f66:	409a      	lsls	r2, r3
 8001f68:	4232      	tst	r2, r6
 8001f6a:	d008      	beq.n	8001f7e <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f6c:	6821      	ldr	r1, [r4, #0]
 8001f6e:	6949      	ldr	r1, [r1, #20]
 8001f70:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f72:	bf41      	itttt	mi
 8001f74:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f76:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001f78:	f042 0202 	orrmi.w	r2, r2, #2
 8001f7c:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	2204      	movs	r2, #4
 8001f80:	409a      	lsls	r2, r3
 8001f82:	4232      	tst	r2, r6
 8001f84:	d008      	beq.n	8001f98 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f86:	6821      	ldr	r1, [r4, #0]
 8001f88:	6809      	ldr	r1, [r1, #0]
 8001f8a:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f8c:	bf41      	itttt	mi
 8001f8e:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f90:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8001f92:	f042 0204 	orrmi.w	r2, r2, #4
 8001f96:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f98:	2210      	movs	r2, #16
 8001f9a:	409a      	lsls	r2, r3
 8001f9c:	4232      	tst	r2, r6
 8001f9e:	d010      	beq.n	8001fc2 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	0709      	lsls	r1, r1, #28
 8001fa6:	d50c      	bpl.n	8001fc2 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fa8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	0350      	lsls	r0, r2, #13
 8001fae:	d537      	bpl.n	8002020 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	0319      	lsls	r1, r3, #12
 8001fb4:	d401      	bmi.n	8001fba <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001fb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fb8:	e000      	b.n	8001fbc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 8001fbc:	b10b      	cbz	r3, 8001fc2 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 8001fbe:	4620      	mov	r0, r4
 8001fc0:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc2:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	408a      	lsls	r2, r1
 8001fc8:	4232      	tst	r2, r6
 8001fca:	d03a      	beq.n	8002042 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	06c6      	lsls	r6, r0, #27
 8001fd2:	d536      	bpl.n	8002042 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fd4:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fd6:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001fda:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fdc:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fde:	d127      	bne.n	8002030 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fe0:	f022 0216 	bic.w	r2, r2, #22
 8001fe4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fe6:	695a      	ldr	r2, [r3, #20]
 8001fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fec:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fee:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001ff0:	b90a      	cbnz	r2, 8001ff6 <HAL_DMA_IRQHandler+0xc6>
 8001ff2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001ff4:	b11a      	cbz	r2, 8001ffe <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	f022 0208 	bic.w	r2, r2, #8
 8001ffc:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffe:	233f      	movs	r3, #63	; 0x3f
 8002000:	408b      	lsls	r3, r1
 8002002:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8002004:	2301      	movs	r3, #1
 8002006:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800200a:	2300      	movs	r3, #0
 800200c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8002010:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8002012:	2b00      	cmp	r3, #0
 8002014:	d045      	beq.n	80020a2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8002016:	4620      	mov	r0, r4
}
 8002018:	b003      	add	sp, #12
 800201a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800201e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002024:	bf5e      	ittt	pl
 8002026:	681a      	ldrpl	r2, [r3, #0]
 8002028:	f022 0208 	bicpl.w	r2, r2, #8
 800202c:	601a      	strpl	r2, [r3, #0]
 800202e:	e7c2      	b.n	8001fb6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002030:	0350      	lsls	r0, r2, #13
 8002032:	d527      	bpl.n	8002084 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	0319      	lsls	r1, r3, #12
 8002038:	d431      	bmi.n	800209e <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800203a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800203c:	b10b      	cbz	r3, 8002042 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800203e:	4620      	mov	r0, r4
 8002040:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002042:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002044:	b36b      	cbz	r3, 80020a2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002046:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002048:	07da      	lsls	r2, r3, #31
 800204a:	d519      	bpl.n	8002080 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 800204c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800204e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002052:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8002056:	2305      	movs	r3, #5
 8002058:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800205c:	6813      	ldr	r3, [r2, #0]
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 8002064:	9b01      	ldr	r3, [sp, #4]
 8002066:	3301      	adds	r3, #1
 8002068:	42bb      	cmp	r3, r7
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	d802      	bhi.n	8002074 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800206e:	6813      	ldr	r3, [r2, #0]
 8002070:	07db      	lsls	r3, r3, #31
 8002072:	d4f7      	bmi.n	8002064 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 8002074:	2301      	movs	r3, #1
 8002076:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800207a:	2300      	movs	r3, #0
 800207c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8002080:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002082:	e7c6      	b.n	8002012 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800208a:	d108      	bne.n	800209e <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800208c:	6819      	ldr	r1, [r3, #0]
 800208e:	f021 0110 	bic.w	r1, r1, #16
 8002092:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8002094:	2301      	movs	r3, #1
 8002096:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800209a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800209e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020a0:	e7cc      	b.n	800203c <HAL_DMA_IRQHandler+0x10c>
}
 80020a2:	b003      	add	sp, #12
 80020a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020a6:	bf00      	nop
 80020a8:	20000008 	.word	0x20000008

080020ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b0:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8002250 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b4:	4a64      	ldr	r2, [pc, #400]	; (8002248 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020b6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80020ba:	2401      	movs	r4, #1
 80020bc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020be:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80020c2:	43ac      	bics	r4, r5
 80020c4:	f040 80ad 	bne.w	8002222 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020c8:	684d      	ldr	r5, [r1, #4]
 80020ca:	f005 0403 	and.w	r4, r5, #3
 80020ce:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d2:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d4:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020d6:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020da:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020dc:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e0:	d834      	bhi.n	800214c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80020e2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020e4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020e8:	68cf      	ldr	r7, [r1, #12]
 80020ea:	fa07 f708 	lsl.w	r7, r7, r8
 80020ee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80020f2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80020f4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020f6:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020fa:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80020fe:	409f      	lsls	r7, r3
 8002100:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8002104:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8002106:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002108:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800210c:	688f      	ldr	r7, [r1, #8]
 800210e:	fa07 f708 	lsl.w	r7, r7, r8
 8002112:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002116:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8002118:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211a:	d119      	bne.n	8002150 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800211c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8002120:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002124:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8002128:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8002130:	f04f 0e0f 	mov.w	lr, #15
 8002134:	fa0e fe0b 	lsl.w	lr, lr, fp
 8002138:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800213c:	690f      	ldr	r7, [r1, #16]
 800213e:	fa07 f70b 	lsl.w	r7, r7, fp
 8002142:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8002146:	f8ca 7020 	str.w	r7, [sl, #32]
 800214a:	e001      	b.n	8002150 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214c:	2c03      	cmp	r4, #3
 800214e:	d1da      	bne.n	8002106 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8002150:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002152:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002156:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002158:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800215a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800215e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002160:	d05f      	beq.n	8002222 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	f04f 0a00 	mov.w	sl, #0
 8002166:	f8cd a004 	str.w	sl, [sp, #4]
 800216a:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800216e:	4c37      	ldr	r4, [pc, #220]	; (800224c <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002170:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002174:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002178:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 800217c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8002180:	9601      	str	r6, [sp, #4]
 8002182:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002184:	f023 0603 	bic.w	r6, r3, #3
 8002188:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 800218c:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002190:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002194:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002198:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800219c:	270f      	movs	r7, #15
 800219e:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a8:	d042      	beq.n	8002230 <HAL_GPIO_Init+0x184>
 80021aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021ae:	42a0      	cmp	r0, r4
 80021b0:	d040      	beq.n	8002234 <HAL_GPIO_Init+0x188>
 80021b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021b6:	42a0      	cmp	r0, r4
 80021b8:	d03e      	beq.n	8002238 <HAL_GPIO_Init+0x18c>
 80021ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021be:	42a0      	cmp	r0, r4
 80021c0:	d03c      	beq.n	800223c <HAL_GPIO_Init+0x190>
 80021c2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021c6:	42a0      	cmp	r0, r4
 80021c8:	d03a      	beq.n	8002240 <HAL_GPIO_Init+0x194>
 80021ca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021ce:	42a0      	cmp	r0, r4
 80021d0:	d038      	beq.n	8002244 <HAL_GPIO_Init+0x198>
 80021d2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021d6:	42a0      	cmp	r0, r4
 80021d8:	bf0c      	ite	eq
 80021da:	2406      	moveq	r4, #6
 80021dc:	2407      	movne	r4, #7
 80021de:	fa04 f40e 	lsl.w	r4, r4, lr
 80021e2:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021e4:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80021e6:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80021e8:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021ec:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80021ee:	bf54      	ite	pl
 80021f0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80021f2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80021f6:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80021f8:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021fa:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80021fc:	bf54      	ite	pl
 80021fe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8002200:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8002204:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8002206:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002208:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800220a:	bf54      	ite	pl
 800220c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800220e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8002212:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002214:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002216:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8002218:	bf54      	ite	pl
 800221a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800221c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8002220:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002222:	3301      	adds	r3, #1
 8002224:	2b10      	cmp	r3, #16
 8002226:	f47f af47 	bne.w	80020b8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800222a:	b003      	add	sp, #12
 800222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002230:	4654      	mov	r4, sl
 8002232:	e7d4      	b.n	80021de <HAL_GPIO_Init+0x132>
 8002234:	2401      	movs	r4, #1
 8002236:	e7d2      	b.n	80021de <HAL_GPIO_Init+0x132>
 8002238:	2402      	movs	r4, #2
 800223a:	e7d0      	b.n	80021de <HAL_GPIO_Init+0x132>
 800223c:	2403      	movs	r4, #3
 800223e:	e7ce      	b.n	80021de <HAL_GPIO_Init+0x132>
 8002240:	2404      	movs	r4, #4
 8002242:	e7cc      	b.n	80021de <HAL_GPIO_Init+0x132>
 8002244:	2405      	movs	r4, #5
 8002246:	e7ca      	b.n	80021de <HAL_GPIO_Init+0x132>
 8002248:	40013c00 	.word	0x40013c00
 800224c:	40020000 	.word	0x40020000
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002254:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800225c:	4d18      	ldr	r5, [pc, #96]	; (80022c0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800225e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002260:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002264:	641a      	str	r2, [r3, #64]	; 0x40
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226c:	9301      	str	r3, [sp, #4]
 800226e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002270:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_PWREx_EnableOverDrive+0x70>)
 8002272:	2201      	movs	r2, #1
 8002274:	641a      	str	r2, [r3, #64]	; 0x40
  tickstart = HAL_GetTick();
 8002276:	f7ff fad7 	bl	8001828 <HAL_GetTick>
 800227a:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800227c:	686b      	ldr	r3, [r5, #4]
 800227e:	03da      	lsls	r2, r3, #15
 8002280:	d50b      	bpl.n	800229a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_PWREx_EnableOverDrive+0x70>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002284:	4d0e      	ldr	r5, [pc, #56]	; (80022c0 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002286:	2201      	movs	r2, #1
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
  tickstart = HAL_GetTick();
 800228a:	f7ff facd 	bl	8001828 <HAL_GetTick>
 800228e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002290:	686b      	ldr	r3, [r5, #4]
 8002292:	039b      	lsls	r3, r3, #14
 8002294:	d50a      	bpl.n	80022ac <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8002296:	2000      	movs	r0, #0
 8002298:	e006      	b.n	80022a8 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800229a:	f7ff fac5 	bl	8001828 <HAL_GetTick>
 800229e:	1b00      	subs	r0, r0, r4
 80022a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80022a4:	d9ea      	bls.n	800227c <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 80022a6:	2003      	movs	r0, #3
}
 80022a8:	b003      	add	sp, #12
 80022aa:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80022ac:	f7ff fabc 	bl	8001828 <HAL_GetTick>
 80022b0:	1b00      	subs	r0, r0, r4
 80022b2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80022b6:	d9eb      	bls.n	8002290 <HAL_PWREx_EnableOverDrive+0x3c>
 80022b8:	e7f5      	b.n	80022a6 <HAL_PWREx_EnableOverDrive+0x52>
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40007000 	.word	0x40007000
 80022c4:	420e0000 	.word	0x420e0000

080022c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80022cc:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ce:	4604      	mov	r4, r0
 80022d0:	b910      	cbnz	r0, 80022d8 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 80022d2:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 80022d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b44      	ldr	r3, [pc, #272]	; (80023ec <HAL_RCC_ClockConfig+0x124>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	f002 020f 	and.w	r2, r2, #15
 80022e0:	428a      	cmp	r2, r1
 80022e2:	d328      	bcc.n	8002336 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022e4:	6822      	ldr	r2, [r4, #0]
 80022e6:	0797      	lsls	r7, r2, #30
 80022e8:	d42d      	bmi.n	8002346 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	07d0      	lsls	r0, r2, #31
 80022ec:	d441      	bmi.n	8002372 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ee:	4b3f      	ldr	r3, [pc, #252]	; (80023ec <HAL_RCC_ClockConfig+0x124>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	f002 020f 	and.w	r2, r2, #15
 80022f6:	42aa      	cmp	r2, r5
 80022f8:	d866      	bhi.n	80023c8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022fa:	6822      	ldr	r2, [r4, #0]
 80022fc:	0751      	lsls	r1, r2, #29
 80022fe:	d46c      	bmi.n	80023da <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002300:	0713      	lsls	r3, r2, #28
 8002302:	d507      	bpl.n	8002314 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002304:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 8002306:	6921      	ldr	r1, [r4, #16]
 8002308:	6893      	ldr	r3, [r2, #8]
 800230a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800230e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002312:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002314:	f000 f894 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 8002318:	4b35      	ldr	r3, [pc, #212]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 800231a:	4a36      	ldr	r2, [pc, #216]	; (80023f4 <HAL_RCC_ClockConfig+0x12c>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	40d8      	lsrs	r0, r3
 8002326:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <HAL_RCC_ClockConfig+0x130>)
 8002328:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 800232a:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCC_ClockConfig+0x134>)
 800232c:	6818      	ldr	r0, [r3, #0]
 800232e:	f7ff fa31 	bl	8001794 <HAL_InitTick>
  return HAL_OK;
 8002332:	2000      	movs	r0, #0
 8002334:	e7ce      	b.n	80022d4 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002336:	b2ca      	uxtb	r2, r1
 8002338:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 030f 	and.w	r3, r3, #15
 8002340:	428b      	cmp	r3, r1
 8002342:	d1c6      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xa>
 8002344:	e7ce      	b.n	80022e4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002346:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 8002348:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800234c:	bf1e      	ittt	ne
 800234e:	6899      	ldrne	r1, [r3, #8]
 8002350:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8002354:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002358:	bf42      	ittt	mi
 800235a:	6899      	ldrmi	r1, [r3, #8]
 800235c:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8002360:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002362:	4923      	ldr	r1, [pc, #140]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 8002364:	68a0      	ldr	r0, [r4, #8]
 8002366:	688b      	ldr	r3, [r1, #8]
 8002368:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800236c:	4303      	orrs	r3, r0
 800236e:	608b      	str	r3, [r1, #8]
 8002370:	e7bb      	b.n	80022ea <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002372:	6862      	ldr	r2, [r4, #4]
 8002374:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 8002376:	2a01      	cmp	r2, #1
 8002378:	d11c      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002380:	d0a7      	beq.n	80022d2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002382:	4e1b      	ldr	r6, [pc, #108]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 8002384:	68b3      	ldr	r3, [r6, #8]
 8002386:	f023 0303 	bic.w	r3, r3, #3
 800238a:	4313      	orrs	r3, r2
 800238c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800238e:	f7ff fa4b 	bl	8001828 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002396:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002398:	68b3      	ldr	r3, [r6, #8]
 800239a:	6862      	ldr	r2, [r4, #4]
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023a4:	d0a3      	beq.n	80022ee <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023a6:	f7ff fa3f 	bl	8001828 <HAL_GetTick>
 80023aa:	1bc0      	subs	r0, r0, r7
 80023ac:	4540      	cmp	r0, r8
 80023ae:	d9f3      	bls.n	8002398 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80023b0:	2003      	movs	r0, #3
 80023b2:	e78f      	b.n	80022d4 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023b4:	1e91      	subs	r1, r2, #2
 80023b6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	d802      	bhi.n	80023c2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023bc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80023c0:	e7de      	b.n	8002380 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c2:	f013 0f02 	tst.w	r3, #2
 80023c6:	e7db      	b.n	8002380 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c8:	b2ea      	uxtb	r2, r5
 80023ca:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	42ab      	cmp	r3, r5
 80023d4:	f47f af7d 	bne.w	80022d2 <HAL_RCC_ClockConfig+0xa>
 80023d8:	e78f      	b.n	80022fa <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023da:	4905      	ldr	r1, [pc, #20]	; (80023f0 <HAL_RCC_ClockConfig+0x128>)
 80023dc:	68e0      	ldr	r0, [r4, #12]
 80023de:	688b      	ldr	r3, [r1, #8]
 80023e0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80023e4:	4303      	orrs	r3, r0
 80023e6:	608b      	str	r3, [r1, #8]
 80023e8:	e78a      	b.n	8002300 <HAL_RCC_ClockConfig+0x38>
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00
 80023f0:	40023800 	.word	0x40023800
 80023f4:	080069b3 	.word	0x080069b3
 80023f8:	20000008 	.word	0x20000008
 80023fc:	20000010 	.word	0x20000010

08002400 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800240e:	6810      	ldr	r0, [r2, #0]
}
 8002410:	40d8      	lsrs	r0, r3
 8002412:	4770      	bx	lr
 8002414:	40023800 	.word	0x40023800
 8002418:	080069c3 	.word	0x080069c3
 800241c:	20000008 	.word	0x20000008

08002420 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002420:	4b04      	ldr	r3, [pc, #16]	; (8002434 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002422:	4a05      	ldr	r2, [pc, #20]	; (8002438 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800242a:	5cd3      	ldrb	r3, [r2, r3]
 800242c:	4a03      	ldr	r2, [pc, #12]	; (800243c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800242e:	6810      	ldr	r0, [r2, #0]
}
 8002430:	40d8      	lsrs	r0, r3
 8002432:	4770      	bx	lr
 8002434:	40023800 	.word	0x40023800
 8002438:	080069c3 	.word	0x080069c3
 800243c:	20000008 	.word	0x20000008

08002440 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002440:	4920      	ldr	r1, [pc, #128]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x84>)
{
 8002442:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002444:	688b      	ldr	r3, [r1, #8]
 8002446:	f003 030c 	and.w	r3, r3, #12
 800244a:	2b08      	cmp	r3, #8
 800244c:	d007      	beq.n	800245e <HAL_RCC_GetSysClockFreq+0x1e>
 800244e:	2b0c      	cmp	r3, #12
 8002450:	d020      	beq.n	8002494 <HAL_RCC_GetSysClockFreq+0x54>
 8002452:	481d      	ldr	r0, [pc, #116]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x88>)
 8002454:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_RCC_GetSysClockFreq+0x8c>)
 8002456:	2b04      	cmp	r3, #4
 8002458:	bf08      	it	eq
 800245a:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800245c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800245e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002460:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002462:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002464:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002468:	bf14      	ite	ne
 800246a:	4818      	ldrne	r0, [pc, #96]	; (80024cc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246c:	4816      	ldreq	r0, [pc, #88]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800246e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8002472:	bf18      	it	ne
 8002474:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002476:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247a:	fba1 0100 	umull	r0, r1, r1, r0
 800247e:	f7fe fc63 	bl	8000d48 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x84>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 800248e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002492:	e7e3      	b.n	800245c <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002494:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002496:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002498:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800249a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800249e:	bf14      	ite	ne
 80024a0:	480a      	ldrne	r0, [pc, #40]	; (80024cc <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a2:	4809      	ldreq	r0, [pc, #36]	; (80024c8 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80024a8:	bf18      	it	ne
 80024aa:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024ac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b0:	fba1 0100 	umull	r0, r1, r1, r0
 80024b4:	f7fe fc48 	bl	8000d48 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024b8:	4b02      	ldr	r3, [pc, #8]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x84>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80024c0:	e7e5      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x4e>
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	00f42400 	.word	0x00f42400
 80024cc:	017d7840 	.word	0x017d7840

080024d0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d4:	4604      	mov	r4, r0
 80024d6:	2800      	cmp	r0, #0
 80024d8:	d030      	beq.n	800253c <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	6803      	ldr	r3, [r0, #0]
 80024dc:	07df      	lsls	r7, r3, #31
 80024de:	d410      	bmi.n	8002502 <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	079e      	lsls	r6, r3, #30
 80024e4:	d463      	bmi.n	80025ae <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e6:	6823      	ldr	r3, [r4, #0]
 80024e8:	071a      	lsls	r2, r3, #28
 80024ea:	f100 80ad 	bmi.w	8002648 <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	075b      	lsls	r3, r3, #29
 80024f2:	f100 80cd 	bmi.w	8002690 <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024f6:	69a0      	ldr	r0, [r4, #24]
 80024f8:	2800      	cmp	r0, #0
 80024fa:	f040 8135 	bne.w	8002768 <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80024fe:	2000      	movs	r0, #0
 8002500:	e034      	b.n	800256c <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002502:	4b96      	ldr	r3, [pc, #600]	; (800275c <HAL_RCC_OscConfig+0x28c>)
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	f002 020c 	and.w	r2, r2, #12
 800250a:	2a04      	cmp	r2, #4
 800250c:	d00f      	beq.n	800252e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002514:	2a08      	cmp	r2, #8
 8002516:	d102      	bne.n	800251e <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	0255      	lsls	r5, r2, #9
 800251c:	d407      	bmi.n	800252e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002524:	2a0c      	cmp	r2, #12
 8002526:	d10b      	bne.n	8002540 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	0258      	lsls	r0, r3, #9
 800252c:	d508      	bpl.n	8002540 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800252e:	4b8b      	ldr	r3, [pc, #556]	; (800275c <HAL_RCC_OscConfig+0x28c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	0399      	lsls	r1, r3, #14
 8002534:	d5d4      	bpl.n	80024e0 <HAL_RCC_OscConfig+0x10>
 8002536:	6863      	ldr	r3, [r4, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d1d1      	bne.n	80024e0 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800253c:	2001      	movs	r0, #1
 800253e:	e015      	b.n	800256c <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002540:	6863      	ldr	r3, [r4, #4]
 8002542:	4d86      	ldr	r5, [pc, #536]	; (800275c <HAL_RCC_OscConfig+0x28c>)
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002548:	d113      	bne.n	8002572 <HAL_RCC_OscConfig+0xa2>
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002550:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002552:	f7ff f969 	bl	8001828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002556:	4e81      	ldr	r6, [pc, #516]	; (800275c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002558:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255a:	6833      	ldr	r3, [r6, #0]
 800255c:	039a      	lsls	r2, r3, #14
 800255e:	d4bf      	bmi.n	80024e0 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff f962 	bl	8001828 <HAL_GetTick>
 8002564:	1b40      	subs	r0, r0, r5
 8002566:	2864      	cmp	r0, #100	; 0x64
 8002568:	d9f7      	bls.n	800255a <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 800256a:	2003      	movs	r0, #3
}
 800256c:	b002      	add	sp, #8
 800256e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002572:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002576:	d104      	bne.n	8002582 <HAL_RCC_OscConfig+0xb2>
 8002578:	682b      	ldr	r3, [r5, #0]
 800257a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800257e:	602b      	str	r3, [r5, #0]
 8002580:	e7e3      	b.n	800254a <HAL_RCC_OscConfig+0x7a>
 8002582:	682a      	ldr	r2, [r5, #0]
 8002584:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002588:	602a      	str	r2, [r5, #0]
 800258a:	682a      	ldr	r2, [r5, #0]
 800258c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002590:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1dd      	bne.n	8002552 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002596:	f7ff f947 	bl	8001828 <HAL_GetTick>
 800259a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259c:	682b      	ldr	r3, [r5, #0]
 800259e:	039b      	lsls	r3, r3, #14
 80025a0:	d59e      	bpl.n	80024e0 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a2:	f7ff f941 	bl	8001828 <HAL_GetTick>
 80025a6:	1b80      	subs	r0, r0, r6
 80025a8:	2864      	cmp	r0, #100	; 0x64
 80025aa:	d9f7      	bls.n	800259c <HAL_RCC_OscConfig+0xcc>
 80025ac:	e7dd      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025ae:	4b6b      	ldr	r3, [pc, #428]	; (800275c <HAL_RCC_OscConfig+0x28c>)
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	f012 0f0c 	tst.w	r2, #12
 80025b6:	d00f      	beq.n	80025d8 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025b8:	689a      	ldr	r2, [r3, #8]
 80025ba:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80025be:	2a08      	cmp	r2, #8
 80025c0:	d102      	bne.n	80025c8 <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	0257      	lsls	r7, r2, #9
 80025c6:	d507      	bpl.n	80025d8 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025ce:	2a0c      	cmp	r2, #12
 80025d0:	d111      	bne.n	80025f6 <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	025e      	lsls	r6, r3, #9
 80025d6:	d40e      	bmi.n	80025f6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025d8:	4a60      	ldr	r2, [pc, #384]	; (800275c <HAL_RCC_OscConfig+0x28c>)
 80025da:	6813      	ldr	r3, [r2, #0]
 80025dc:	079d      	lsls	r5, r3, #30
 80025de:	d502      	bpl.n	80025e6 <HAL_RCC_OscConfig+0x116>
 80025e0:	68e3      	ldr	r3, [r4, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d1aa      	bne.n	800253c <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025e6:	6813      	ldr	r3, [r2, #0]
 80025e8:	6921      	ldr	r1, [r4, #16]
 80025ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025ee:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80025f2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f4:	e777      	b.n	80024e6 <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f6:	68e2      	ldr	r2, [r4, #12]
 80025f8:	4b59      	ldr	r3, [pc, #356]	; (8002760 <HAL_RCC_OscConfig+0x290>)
 80025fa:	b1b2      	cbz	r2, 800262a <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 80025fc:	2201      	movs	r2, #1
 80025fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002600:	f7ff f912 	bl	8001828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	4d55      	ldr	r5, [pc, #340]	; (800275c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002606:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	682b      	ldr	r3, [r5, #0]
 800260a:	0798      	lsls	r0, r3, #30
 800260c:	d507      	bpl.n	800261e <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800260e:	682b      	ldr	r3, [r5, #0]
 8002610:	6922      	ldr	r2, [r4, #16]
 8002612:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002616:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800261a:	602b      	str	r3, [r5, #0]
 800261c:	e763      	b.n	80024e6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff f903 	bl	8001828 <HAL_GetTick>
 8002622:	1b80      	subs	r0, r0, r6
 8002624:	2802      	cmp	r0, #2
 8002626:	d9ef      	bls.n	8002608 <HAL_RCC_OscConfig+0x138>
 8002628:	e79f      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 800262a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800262c:	f7ff f8fc 	bl	8001828 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002630:	4e4a      	ldr	r6, [pc, #296]	; (800275c <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8002632:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002634:	6833      	ldr	r3, [r6, #0]
 8002636:	0799      	lsls	r1, r3, #30
 8002638:	f57f af55 	bpl.w	80024e6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800263c:	f7ff f8f4 	bl	8001828 <HAL_GetTick>
 8002640:	1b40      	subs	r0, r0, r5
 8002642:	2802      	cmp	r0, #2
 8002644:	d9f6      	bls.n	8002634 <HAL_RCC_OscConfig+0x164>
 8002646:	e790      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002648:	6962      	ldr	r2, [r4, #20]
 800264a:	4b45      	ldr	r3, [pc, #276]	; (8002760 <HAL_RCC_OscConfig+0x290>)
 800264c:	b182      	cbz	r2, 8002670 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 800264e:	2201      	movs	r2, #1
 8002650:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002654:	f7ff f8e8 	bl	8001828 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002658:	4e40      	ldr	r6, [pc, #256]	; (800275c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800265a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800265e:	079f      	lsls	r7, r3, #30
 8002660:	f53f af45 	bmi.w	80024ee <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002664:	f7ff f8e0 	bl	8001828 <HAL_GetTick>
 8002668:	1b40      	subs	r0, r0, r5
 800266a:	2802      	cmp	r0, #2
 800266c:	d9f6      	bls.n	800265c <HAL_RCC_OscConfig+0x18c>
 800266e:	e77c      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 8002670:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8002674:	f7ff f8d8 	bl	8001828 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002678:	4e38      	ldr	r6, [pc, #224]	; (800275c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800267a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800267c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800267e:	0798      	lsls	r0, r3, #30
 8002680:	f57f af35 	bpl.w	80024ee <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002684:	f7ff f8d0 	bl	8001828 <HAL_GetTick>
 8002688:	1b40      	subs	r0, r0, r5
 800268a:	2802      	cmp	r0, #2
 800268c:	d9f6      	bls.n	800267c <HAL_RCC_OscConfig+0x1ac>
 800268e:	e76c      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002690:	4b32      	ldr	r3, [pc, #200]	; (800275c <HAL_RCC_OscConfig+0x28c>)
 8002692:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002694:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8002698:	d128      	bne.n	80026ec <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800269a:	9201      	str	r2, [sp, #4]
 800269c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800269e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026a2:	641a      	str	r2, [r3, #64]	; 0x40
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026aa:	9301      	str	r3, [sp, #4]
 80026ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026ae:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	4d2c      	ldr	r5, [pc, #176]	; (8002764 <HAL_RCC_OscConfig+0x294>)
 80026b2:	682b      	ldr	r3, [r5, #0]
 80026b4:	05d9      	lsls	r1, r3, #23
 80026b6:	d51b      	bpl.n	80026f0 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	68a3      	ldr	r3, [r4, #8]
 80026ba:	4d28      	ldr	r5, [pc, #160]	; (800275c <HAL_RCC_OscConfig+0x28c>)
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d127      	bne.n	8002710 <HAL_RCC_OscConfig+0x240>
 80026c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80026c2:	f043 0301 	orr.w	r3, r3, #1
 80026c6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80026c8:	f7ff f8ae 	bl	8001828 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026cc:	4e23      	ldr	r6, [pc, #140]	; (800275c <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80026ce:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80026d6:	079b      	lsls	r3, r3, #30
 80026d8:	d539      	bpl.n	800274e <HAL_RCC_OscConfig+0x27e>
    if(pwrclkchanged == SET)
 80026da:	2f00      	cmp	r7, #0
 80026dc:	f43f af0b 	beq.w	80024f6 <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4a1e      	ldr	r2, [pc, #120]	; (800275c <HAL_RCC_OscConfig+0x28c>)
 80026e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	e704      	b.n	80024f6 <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 80026ec:	2700      	movs	r7, #0
 80026ee:	e7df      	b.n	80026b0 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026f0:	682b      	ldr	r3, [r5, #0]
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80026f8:	f7ff f896 	bl	8001828 <HAL_GetTick>
 80026fc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	682b      	ldr	r3, [r5, #0]
 8002700:	05da      	lsls	r2, r3, #23
 8002702:	d4d9      	bmi.n	80026b8 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002704:	f7ff f890 	bl	8001828 <HAL_GetTick>
 8002708:	1b80      	subs	r0, r0, r6
 800270a:	2802      	cmp	r0, #2
 800270c:	d9f7      	bls.n	80026fe <HAL_RCC_OscConfig+0x22e>
 800270e:	e72c      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002710:	2b05      	cmp	r3, #5
 8002712:	d104      	bne.n	800271e <HAL_RCC_OscConfig+0x24e>
 8002714:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	672b      	str	r3, [r5, #112]	; 0x70
 800271c:	e7d0      	b.n	80026c0 <HAL_RCC_OscConfig+0x1f0>
 800271e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002720:	f022 0201 	bic.w	r2, r2, #1
 8002724:	672a      	str	r2, [r5, #112]	; 0x70
 8002726:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8002728:	f022 0204 	bic.w	r2, r2, #4
 800272c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1ca      	bne.n	80026c8 <HAL_RCC_OscConfig+0x1f8>
      tickstart = HAL_GetTick();
 8002732:	f7ff f879 	bl	8001828 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800273a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800273e:	0798      	lsls	r0, r3, #30
 8002740:	d5cb      	bpl.n	80026da <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7ff f871 	bl	8001828 <HAL_GetTick>
 8002746:	1b80      	subs	r0, r0, r6
 8002748:	4540      	cmp	r0, r8
 800274a:	d9f7      	bls.n	800273c <HAL_RCC_OscConfig+0x26c>
 800274c:	e70d      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800274e:	f7ff f86b 	bl	8001828 <HAL_GetTick>
 8002752:	1b40      	subs	r0, r0, r5
 8002754:	4540      	cmp	r0, r8
 8002756:	d9bd      	bls.n	80026d4 <HAL_RCC_OscConfig+0x204>
 8002758:	e707      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
 800275a:	bf00      	nop
 800275c:	40023800 	.word	0x40023800
 8002760:	42470000 	.word	0x42470000
 8002764:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002768:	4d3b      	ldr	r5, [pc, #236]	; (8002858 <HAL_RCC_OscConfig+0x388>)
 800276a:	68ab      	ldr	r3, [r5, #8]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b08      	cmp	r3, #8
 8002772:	d040      	beq.n	80027f6 <HAL_RCC_OscConfig+0x326>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002774:	4b39      	ldr	r3, [pc, #228]	; (800285c <HAL_RCC_OscConfig+0x38c>)
 8002776:	2200      	movs	r2, #0
 8002778:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800277a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277c:	d12e      	bne.n	80027dc <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 800277e:	f7ff f853 	bl	8001828 <HAL_GetTick>
 8002782:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002784:	682b      	ldr	r3, [r5, #0]
 8002786:	0199      	lsls	r1, r3, #6
 8002788:	d422      	bmi.n	80027d0 <HAL_RCC_OscConfig+0x300>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800278a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800278e:	4313      	orrs	r3, r2
 8002790:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002792:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002796:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002798:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800279c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800279e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80027a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80027a4:	0852      	lsrs	r2, r2, #1
 80027a6:	3a01      	subs	r2, #1
 80027a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80027ac:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCC_OscConfig+0x38c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b0:	4d29      	ldr	r5, [pc, #164]	; (8002858 <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_ENABLE();
 80027b2:	2201      	movs	r2, #1
 80027b4:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80027b6:	f7ff f837 	bl	8001828 <HAL_GetTick>
 80027ba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027bc:	682b      	ldr	r3, [r5, #0]
 80027be:	019a      	lsls	r2, r3, #6
 80027c0:	f53f ae9d 	bmi.w	80024fe <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027c4:	f7ff f830 	bl	8001828 <HAL_GetTick>
 80027c8:	1b00      	subs	r0, r0, r4
 80027ca:	2802      	cmp	r0, #2
 80027cc:	d9f6      	bls.n	80027bc <HAL_RCC_OscConfig+0x2ec>
 80027ce:	e6cc      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027d0:	f7ff f82a 	bl	8001828 <HAL_GetTick>
 80027d4:	1b80      	subs	r0, r0, r6
 80027d6:	2802      	cmp	r0, #2
 80027d8:	d9d4      	bls.n	8002784 <HAL_RCC_OscConfig+0x2b4>
 80027da:	e6c6      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 80027dc:	f7ff f824 	bl	8001828 <HAL_GetTick>
 80027e0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e2:	682b      	ldr	r3, [r5, #0]
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	f57f ae8a 	bpl.w	80024fe <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff f81d 	bl	8001828 <HAL_GetTick>
 80027ee:	1b00      	subs	r0, r0, r4
 80027f0:	2802      	cmp	r0, #2
 80027f2:	d9f6      	bls.n	80027e2 <HAL_RCC_OscConfig+0x312>
 80027f4:	e6b9      	b.n	800256a <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027f6:	2801      	cmp	r0, #1
 80027f8:	f43f aeb8 	beq.w	800256c <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 80027fc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fe:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002800:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002804:	4291      	cmp	r1, r2
 8002806:	f47f ae99 	bne.w	800253c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002810:	428a      	cmp	r2, r1
 8002812:	f47f ae93 	bne.w	800253c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002816:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002818:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800281c:	401a      	ands	r2, r3
 800281e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8002822:	f47f ae8b 	bne.w	800253c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002826:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002828:	0852      	lsrs	r2, r2, #1
 800282a:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 800282e:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002830:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8002834:	f47f ae82 	bne.w	800253c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002838:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800283a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283e:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8002842:	f47f ae7b 	bne.w	800253c <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002846:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002848:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284c:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8002850:	f43f ae55 	beq.w	80024fe <HAL_RCC_OscConfig+0x2e>
 8002854:	e672      	b.n	800253c <HAL_RCC_OscConfig+0x6c>
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	42470000 	.word	0x42470000

08002860 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002860:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002864:	2b01      	cmp	r3, #1
 8002866:	d12c      	bne.n	80028c2 <HAL_TIM_Base_Start+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002868:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800286a:	4a17      	ldr	r2, [pc, #92]	; (80028c8 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 800286c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002870:	6803      	ldr	r3, [r0, #0]
 8002872:	4293      	cmp	r3, r2
 8002874:	d01a      	beq.n	80028ac <HAL_TIM_Base_Start+0x4c>
 8002876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800287a:	d017      	beq.n	80028ac <HAL_TIM_Base_Start+0x4c>
 800287c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <HAL_TIM_Base_Start+0x4c>
 8002884:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002888:	4293      	cmp	r3, r2
 800288a:	d00f      	beq.n	80028ac <HAL_TIM_Base_Start+0x4c>
 800288c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002890:	4293      	cmp	r3, r2
 8002892:	d00b      	beq.n	80028ac <HAL_TIM_Base_Start+0x4c>
 8002894:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <HAL_TIM_Base_Start+0x4c>
 800289c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <HAL_TIM_Base_Start+0x4c>
 80028a4:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d104      	bne.n	80028b6 <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b2:	2a06      	cmp	r2, #6
 80028b4:	d003      	beq.n	80028be <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f042 0201 	orr.w	r2, r2, #1
 80028bc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028be:	2000      	movs	r0, #0
}
 80028c0:	4770      	bx	lr
    return HAL_ERROR;
 80028c2:	2001      	movs	r0, #1
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40010000 	.word	0x40010000

080028cc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028cc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d130      	bne.n	8002936 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d4:	2302      	movs	r3, #2
 80028d6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028da:	6803      	ldr	r3, [r0, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e4:	4a15      	ldr	r2, [pc, #84]	; (800293c <HAL_TIM_Base_Start_IT+0x70>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d01a      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x54>
 80028ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ee:	d017      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x54>
 80028f0:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d013      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x54>
 80028f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00f      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x54>
 8002900:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002904:	4293      	cmp	r3, r2
 8002906:	d00b      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x54>
 8002908:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800290c:	4293      	cmp	r3, r2
 800290e:	d007      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x54>
 8002910:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8002914:	4293      	cmp	r3, r2
 8002916:	d003      	beq.n	8002920 <HAL_TIM_Base_Start_IT+0x54>
 8002918:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800291c:	4293      	cmp	r3, r2
 800291e:	d104      	bne.n	800292a <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002920:	689a      	ldr	r2, [r3, #8]
 8002922:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002926:	2a06      	cmp	r2, #6
 8002928:	d003      	beq.n	8002932 <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002932:	2000      	movs	r0, #0
}
 8002934:	4770      	bx	lr
    return HAL_ERROR;
 8002936:	2001      	movs	r0, #1
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40010000 	.word	0x40010000

08002940 <HAL_TIM_OC_DelayElapsedCallback>:
 8002940:	4770      	bx	lr

08002942 <HAL_TIM_IC_CaptureCallback>:
 8002942:	4770      	bx	lr

08002944 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002944:	4770      	bx	lr

08002946 <HAL_TIM_TriggerCallback>:
 8002946:	4770      	bx	lr

08002948 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002948:	6803      	ldr	r3, [r0, #0]
 800294a:	691a      	ldr	r2, [r3, #16]
 800294c:	0791      	lsls	r1, r2, #30
{
 800294e:	b510      	push	{r4, lr}
 8002950:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002952:	d50e      	bpl.n	8002972 <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	0792      	lsls	r2, r2, #30
 8002958:	d50b      	bpl.n	8002972 <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800295a:	f06f 0202 	mvn.w	r2, #2
 800295e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002960:	2201      	movs	r2, #1
 8002962:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	079b      	lsls	r3, r3, #30
 8002968:	d077      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800296a:	f7ff ffea 	bl	8002942 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800296e:	2300      	movs	r3, #0
 8002970:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002972:	6823      	ldr	r3, [r4, #0]
 8002974:	691a      	ldr	r2, [r3, #16]
 8002976:	0750      	lsls	r0, r2, #29
 8002978:	d510      	bpl.n	800299c <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	0751      	lsls	r1, r2, #29
 800297e:	d50d      	bpl.n	800299c <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002980:	f06f 0204 	mvn.w	r2, #4
 8002984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002986:	2202      	movs	r2, #2
 8002988:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002990:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002992:	d068      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002994:	f7ff ffd5 	bl	8002942 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002998:	2300      	movs	r3, #0
 800299a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800299c:	6823      	ldr	r3, [r4, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	0712      	lsls	r2, r2, #28
 80029a2:	d50f      	bpl.n	80029c4 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	0710      	lsls	r0, r2, #28
 80029a8:	d50c      	bpl.n	80029c4 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029aa:	f06f 0208 	mvn.w	r2, #8
 80029ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b0:	2204      	movs	r2, #4
 80029b2:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029b8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029ba:	d05a      	beq.n	8002a72 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80029bc:	f7ff ffc1 	bl	8002942 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029c0:	2300      	movs	r3, #0
 80029c2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c4:	6823      	ldr	r3, [r4, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	06d2      	lsls	r2, r2, #27
 80029ca:	d510      	bpl.n	80029ee <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	06d0      	lsls	r0, r2, #27
 80029d0:	d50d      	bpl.n	80029ee <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d2:	f06f 0210 	mvn.w	r2, #16
 80029d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029d8:	2208      	movs	r2, #8
 80029da:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e4:	d04b      	beq.n	8002a7e <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80029e6:	f7ff ffac 	bl	8002942 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	2300      	movs	r3, #0
 80029ec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	07d1      	lsls	r1, r2, #31
 80029f4:	d508      	bpl.n	8002a08 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	07d2      	lsls	r2, r2, #31
 80029fa:	d505      	bpl.n	8002a08 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029fc:	f06f 0201 	mvn.w	r2, #1
 8002a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a02:	4620      	mov	r0, r4
 8002a04:	f7fe fcb6 	bl	8001374 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a08:	6823      	ldr	r3, [r4, #0]
 8002a0a:	691a      	ldr	r2, [r3, #16]
 8002a0c:	0610      	lsls	r0, r2, #24
 8002a0e:	d508      	bpl.n	8002a22 <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	0611      	lsls	r1, r2, #24
 8002a14:	d505      	bpl.n	8002a22 <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f000 f906 	bl	8002c2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a22:	6823      	ldr	r3, [r4, #0]
 8002a24:	691a      	ldr	r2, [r3, #16]
 8002a26:	0652      	lsls	r2, r2, #25
 8002a28:	d508      	bpl.n	8002a3c <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a2a:	68da      	ldr	r2, [r3, #12]
 8002a2c:	0650      	lsls	r0, r2, #25
 8002a2e:	d505      	bpl.n	8002a3c <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7ff ff85 	bl	8002946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	0691      	lsls	r1, r2, #26
 8002a42:	d522      	bpl.n	8002a8a <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	0692      	lsls	r2, r2, #26
 8002a48:	d51f      	bpl.n	8002a8a <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a4a:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a4e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a50:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002a56:	f000 b8e9 	b.w	8002c2c <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	f7ff ff71 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5e:	4620      	mov	r0, r4
 8002a60:	f7ff ff70 	bl	8002944 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a64:	e783      	b.n	800296e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	f7ff ff6b 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	f7ff ff6a 	bl	8002944 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a70:	e792      	b.n	8002998 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a72:	f7ff ff65 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a76:	4620      	mov	r0, r4
 8002a78:	f7ff ff64 	bl	8002944 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a7c:	e7a0      	b.n	80029c0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7e:	f7ff ff5f 	bl	8002940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a82:	4620      	mov	r0, r4
 8002a84:	f7ff ff5e 	bl	8002944 <HAL_TIM_PWM_PulseFinishedCallback>
 8002a88:	e7af      	b.n	80029ea <HAL_TIM_IRQHandler+0xa2>
}
 8002a8a:	bd10      	pop	{r4, pc}

08002a8c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a8c:	4a30      	ldr	r2, [pc, #192]	; (8002b50 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002a8e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a90:	4290      	cmp	r0, r2
 8002a92:	d012      	beq.n	8002aba <TIM_Base_SetConfig+0x2e>
 8002a94:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002a98:	d00f      	beq.n	8002aba <TIM_Base_SetConfig+0x2e>
 8002a9a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002a9e:	4290      	cmp	r0, r2
 8002aa0:	d00b      	beq.n	8002aba <TIM_Base_SetConfig+0x2e>
 8002aa2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aa6:	4290      	cmp	r0, r2
 8002aa8:	d007      	beq.n	8002aba <TIM_Base_SetConfig+0x2e>
 8002aaa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002aae:	4290      	cmp	r0, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_Base_SetConfig+0x2e>
 8002ab2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002ab6:	4290      	cmp	r0, r2
 8002ab8:	d119      	bne.n	8002aee <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002aba:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002abc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ac0:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac2:	4a23      	ldr	r2, [pc, #140]	; (8002b50 <TIM_Base_SetConfig+0xc4>)
 8002ac4:	4290      	cmp	r0, r2
 8002ac6:	d029      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002ac8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002acc:	d026      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002ace:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8002ad2:	4290      	cmp	r0, r2
 8002ad4:	d022      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002ad6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ada:	4290      	cmp	r0, r2
 8002adc:	d01e      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002ade:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ae2:	4290      	cmp	r0, r2
 8002ae4:	d01a      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002ae6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002aea:	4290      	cmp	r0, r2
 8002aec:	d016      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002aee:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <TIM_Base_SetConfig+0xc8>)
 8002af0:	4290      	cmp	r0, r2
 8002af2:	d013      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002af4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002af8:	4290      	cmp	r0, r2
 8002afa:	d00f      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002afc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b00:	4290      	cmp	r0, r2
 8002b02:	d00b      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002b04:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002b08:	4290      	cmp	r0, r2
 8002b0a:	d007      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002b0c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b10:	4290      	cmp	r0, r2
 8002b12:	d003      	beq.n	8002b1c <TIM_Base_SetConfig+0x90>
 8002b14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002b18:	4290      	cmp	r0, r2
 8002b1a:	d103      	bne.n	8002b24 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b1c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b22:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b24:	694a      	ldr	r2, [r1, #20]
 8002b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b2a:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002b2c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b2e:	688b      	ldr	r3, [r1, #8]
 8002b30:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b32:	680b      	ldr	r3, [r1, #0]
 8002b34:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b36:	4b06      	ldr	r3, [pc, #24]	; (8002b50 <TIM_Base_SetConfig+0xc4>)
 8002b38:	4298      	cmp	r0, r3
 8002b3a:	d003      	beq.n	8002b44 <TIM_Base_SetConfig+0xb8>
 8002b3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b40:	4298      	cmp	r0, r3
 8002b42:	d101      	bne.n	8002b48 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b44:	690b      	ldr	r3, [r1, #16]
 8002b46:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	6143      	str	r3, [r0, #20]
}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40014000 	.word	0x40014000

08002b58 <HAL_TIM_Base_Init>:
{
 8002b58:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	b330      	cbz	r0, 8002bac <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002b5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002b62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b66:	b91b      	cbnz	r3, 8002b70 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002b68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002b6c:	f7fe fd62 	bl	8001634 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b72:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b78:	1d21      	adds	r1, r4, #4
 8002b7a:	f7ff ff87 	bl	8002a8c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 8002b84:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b86:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8002b8a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002b8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002b92:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b96:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b9e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002ba2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002ba6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002baa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002bac:	2001      	movs	r0, #1
 8002bae:	e7fc      	b.n	8002baa <HAL_TIM_Base_Init+0x52>

08002bb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bb0:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bb2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	f04f 0302 	mov.w	r3, #2
 8002bbc:	d032      	beq.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc2:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bc4:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 8002bc6:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002bc8:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bca:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bce:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bd0:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd2:	4c15      	ldr	r4, [pc, #84]	; (8002c28 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 8002bd4:	42a3      	cmp	r3, r4
 8002bd6:	d01a      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bdc:	d017      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002bde:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 8002be2:	42a3      	cmp	r3, r4
 8002be4:	d013      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002be6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002bea:	42a3      	cmp	r3, r4
 8002bec:	d00f      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002bee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002bf2:	42a3      	cmp	r3, r4
 8002bf4:	d00b      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002bf6:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8002bfa:	42a3      	cmp	r3, r4
 8002bfc:	d007      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002bfe:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 8002c02:	42a3      	cmp	r3, r4
 8002c04:	d003      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8002c06:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002c0a:	42a3      	cmp	r3, r4
 8002c0c:	d104      	bne.n	8002c18 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c0e:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c14:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c1e:	2300      	movs	r3, #0
 8002c20:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8002c24:	4618      	mov	r0, r3

  return HAL_OK;
}
 8002c26:	bd30      	pop	{r4, r5, pc}
 8002c28:	40010000 	.word	0x40010000

08002c2c <HAL_TIMEx_CommutCallback>:
 8002c2c:	4770      	bx	lr

08002c2e <HAL_TIMEx_BreakCallback>:
 8002c2e:	4770      	bx	lr

08002c30 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c30:	6802      	ldr	r2, [r0, #0]
 8002c32:	68c1      	ldr	r1, [r0, #12]
 8002c34:	6913      	ldr	r3, [r2, #16]
 8002c36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c3a:	430b      	orrs	r3, r1
{
 8002c3c:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3e:	6113      	str	r3, [r2, #16]
{
 8002c40:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c42:	6883      	ldr	r3, [r0, #8]
 8002c44:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002c46:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c48:	4303      	orrs	r3, r0
 8002c4a:	6968      	ldr	r0, [r5, #20]
 8002c4c:	4303      	orrs	r3, r0
 8002c4e:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002c54:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c58:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002c5a:	430b      	orrs	r3, r1
 8002c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c5e:	6953      	ldr	r3, [r2, #20]
 8002c60:	69a9      	ldr	r1, [r5, #24]
 8002c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c66:	430b      	orrs	r3, r1
 8002c68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ce8 <UART_SetConfig+0xb8>)
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d003      	beq.n	8002c78 <UART_SetConfig+0x48>
 8002c70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d123      	bne.n	8002cc0 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c78:	f7ff fbd2 	bl	8002420 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c7c:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c7e:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c84:	e9d5 4600 	ldrd	r4, r6, [r5]
 8002c88:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c8c:	d11b      	bne.n	8002cc6 <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c8e:	19b2      	adds	r2, r6, r6
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	415b      	adcs	r3, r3
 8002c96:	f7fe f857 	bl	8000d48 <__aeabi_uldivmod>
 8002c9a:	2164      	movs	r1, #100	; 0x64
 8002c9c:	fbb0 f5f1 	udiv	r5, r0, r1
 8002ca0:	fb01 0315 	mls	r3, r1, r5, r0
 8002ca4:	00db      	lsls	r3, r3, #3
 8002ca6:	3332      	adds	r3, #50	; 0x32
 8002ca8:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cac:	f003 0207 	and.w	r2, r3, #7
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8002cb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002cba:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cbc:	60a3      	str	r3, [r4, #8]
  }
}
 8002cbe:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cc0:	f7ff fb9e 	bl	8002400 <HAL_RCC_GetPCLK1Freq>
 8002cc4:	e7da      	b.n	8002c7c <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cc6:	00b2      	lsls	r2, r6, #2
 8002cc8:	0fb3      	lsrs	r3, r6, #30
 8002cca:	f7fe f83d 	bl	8000d48 <__aeabi_uldivmod>
 8002cce:	2264      	movs	r2, #100	; 0x64
 8002cd0:	fbb0 f1f2 	udiv	r1, r0, r2
 8002cd4:	fb02 0311 	mls	r3, r2, r1, r0
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	3332      	adds	r3, #50	; 0x32
 8002cdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ce0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002ce4:	e7ea      	b.n	8002cbc <UART_SetConfig+0x8c>
 8002ce6:	bf00      	nop
 8002ce8:	40011000 	.word	0x40011000

08002cec <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8002cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cee:	4604      	mov	r4, r0
 8002cf0:	460e      	mov	r6, r1
 8002cf2:	4617      	mov	r7, r2
 8002cf4:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cf6:	6822      	ldr	r2, [r4, #0]
 8002cf8:	6813      	ldr	r3, [r2, #0]
 8002cfa:	ea36 0303 	bics.w	r3, r6, r3
 8002cfe:	d101      	bne.n	8002d04 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002d00:	2000      	movs	r0, #0
 8002d02:	e028      	b.n	8002d56 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8002d04:	1c6b      	adds	r3, r5, #1
 8002d06:	d0f7      	beq.n	8002cf8 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002d08:	b125      	cbz	r5, 8002d14 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8002d0a:	f7fe fd8d 	bl	8001828 <HAL_GetTick>
 8002d0e:	1bc0      	subs	r0, r0, r7
 8002d10:	4285      	cmp	r5, r0
 8002d12:	d2f0      	bcs.n	8002cf6 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d14:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d16:	f102 030c 	add.w	r3, r2, #12
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d22:	320c      	adds	r2, #12
 8002d24:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8002d28:	6821      	ldr	r1, [r4, #0]
 8002d2a:	2800      	cmp	r0, #0
 8002d2c:	d1f2      	bne.n	8002d14 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	f101 0314 	add.w	r3, r1, #20
 8002d32:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d36:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3a:	f101 0014 	add.w	r0, r1, #20
 8002d3e:	e840 3200 	strex	r2, r3, [r0]
 8002d42:	2a00      	cmp	r2, #0
 8002d44:	d1f3      	bne.n	8002d2e <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8002d46:	2320      	movs	r3, #32
 8002d48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8002d4c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8002d50:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8002d54:	2003      	movs	r0, #3
}
 8002d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002d58 <HAL_UART_Init>:
{
 8002d58:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	b340      	cbz	r0, 8002db0 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d62:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d66:	b91b      	cbnz	r3, 8002d70 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002d68:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8002d6c:	f7fe fcb2 	bl	80016d4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002d70:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d72:	2324      	movs	r3, #36	; 0x24
 8002d74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8002d78:	68d3      	ldr	r3, [r2, #12]
 8002d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002d7e:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002d80:	4620      	mov	r0, r4
 8002d82:	f7ff ff55 	bl	8002c30 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d86:	6823      	ldr	r3, [r4, #0]
 8002d88:	691a      	ldr	r2, [r3, #16]
 8002d8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d8e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d96:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d9e:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002da2:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002da6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002daa:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8002dae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002db0:	2001      	movs	r0, #1
 8002db2:	e7fc      	b.n	8002dae <HAL_UART_Init+0x56>

08002db4 <HAL_UART_Transmit>:
{
 8002db4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002db6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002db8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8002dbc:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8002dbe:	2a20      	cmp	r2, #32
{
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc4:	d149      	bne.n	8002e5a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8002dc6:	2900      	cmp	r1, #0
 8002dc8:	d045      	beq.n	8002e56 <HAL_UART_Transmit+0xa2>
 8002dca:	2f00      	cmp	r7, #0
 8002dcc:	d043      	beq.n	8002e56 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8002dce:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8002dd2:	2a01      	cmp	r2, #1
 8002dd4:	d041      	beq.n	8002e5a <HAL_UART_Transmit+0xa6>
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ddc:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dde:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de0:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002de2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002de6:	f7fe fd1f 	bl	8001828 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dea:	68a1      	ldr	r1, [r4, #8]
 8002dec:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8002dee:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8002df4:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8002df6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df8:	d103      	bne.n	8002e02 <HAL_UART_Transmit+0x4e>
 8002dfa:	6921      	ldr	r1, [r4, #16]
 8002dfc:	b909      	cbnz	r1, 8002e02 <HAL_UART_Transmit+0x4e>
 8002dfe:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002e00:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8002e02:	2100      	movs	r1, #0
 8002e04:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002e08:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002e0a:	b289      	uxth	r1, r1
 8002e0c:	b941      	cbnz	r1, 8002e20 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e0e:	2140      	movs	r1, #64	; 0x40
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff ff6b 	bl	8002cec <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002e16:	b960      	cbnz	r0, 8002e32 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8002e1e:	e009      	b.n	8002e34 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e20:	2180      	movs	r1, #128	; 0x80
 8002e22:	4620      	mov	r0, r4
 8002e24:	e9cd 2300 	strd	r2, r3, [sp]
 8002e28:	f7ff ff60 	bl	8002cec <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002e2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e30:	b110      	cbz	r0, 8002e38 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8002e32:	2003      	movs	r0, #3
}
 8002e34:	b003      	add	sp, #12
 8002e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e38:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 8002e3a:	b94e      	cbnz	r6, 8002e50 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e3c:	f835 1b02 	ldrh.w	r1, [r5], #2
 8002e40:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e44:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8002e46:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002e48:	3901      	subs	r1, #1
 8002e4a:	b289      	uxth	r1, r1
 8002e4c:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002e4e:	e7db      	b.n	8002e08 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e50:	f816 1b01 	ldrb.w	r1, [r6], #1
 8002e54:	e7f6      	b.n	8002e44 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8002e56:	2001      	movs	r0, #1
 8002e58:	e7ec      	b.n	8002e34 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8002e5a:	2002      	movs	r0, #2
 8002e5c:	e7ea      	b.n	8002e34 <HAL_UART_Transmit+0x80>
	...

08002e60 <arm_cfft_radix8by2_f32>:
 8002e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e64:	ed2d 8b08 	vpush	{d8-d11}
 8002e68:	4607      	mov	r7, r0
 8002e6a:	4608      	mov	r0, r1
 8002e6c:	f8b7 e000 	ldrh.w	lr, [r7]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8002e76:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8002e7a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8002e7e:	f000 80b0 	beq.w	8002fe2 <arm_cfft_radix8by2_f32+0x182>
 8002e82:	008b      	lsls	r3, r1, #2
 8002e84:	3310      	adds	r3, #16
 8002e86:	18c6      	adds	r6, r0, r3
 8002e88:	3210      	adds	r2, #16
 8002e8a:	4443      	add	r3, r8
 8002e8c:	f100 0510 	add.w	r5, r0, #16
 8002e90:	f108 0410 	add.w	r4, r8, #16
 8002e94:	ed54 1a04 	vldr	s3, [r4, #-16]
 8002e98:	ed54 6a03 	vldr	s13, [r4, #-12]
 8002e9c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8002ea0:	ed53 3a03 	vldr	s7, [r3, #-12]
 8002ea4:	ed53 5a02 	vldr	s11, [r3, #-8]
 8002ea8:	ed13 5a01 	vldr	s10, [r3, #-4]
 8002eac:	ed14 0a02 	vldr	s0, [r4, #-8]
 8002eb0:	ed54 7a01 	vldr	s15, [r4, #-4]
 8002eb4:	ed16 2a04 	vldr	s4, [r6, #-16]
 8002eb8:	ed56 2a03 	vldr	s5, [r6, #-12]
 8002ebc:	ed15 6a03 	vldr	s12, [r5, #-12]
 8002ec0:	ed15 7a01 	vldr	s14, [r5, #-4]
 8002ec4:	ed15 3a04 	vldr	s6, [r5, #-16]
 8002ec8:	ed56 0a02 	vldr	s1, [r6, #-8]
 8002ecc:	ed16 1a01 	vldr	s2, [r6, #-4]
 8002ed0:	ed55 4a02 	vldr	s9, [r5, #-8]
 8002ed4:	ee73 ba21 	vadd.f32	s23, s6, s3
 8002ed8:	ee36 ba26 	vadd.f32	s22, s12, s13
 8002edc:	ee37 aa27 	vadd.f32	s20, s14, s15
 8002ee0:	ee72 9a04 	vadd.f32	s19, s4, s8
 8002ee4:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8002ee8:	ee31 8a05 	vadd.f32	s16, s2, s10
 8002eec:	ee74 aa80 	vadd.f32	s21, s9, s0
 8002ef0:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8002ef4:	ed45 ba04 	vstr	s23, [r5, #-16]
 8002ef8:	ed05 ba03 	vstr	s22, [r5, #-12]
 8002efc:	ed45 aa02 	vstr	s21, [r5, #-8]
 8002f00:	ed05 aa01 	vstr	s20, [r5, #-4]
 8002f04:	ed06 8a01 	vstr	s16, [r6, #-4]
 8002f08:	ed46 9a04 	vstr	s19, [r6, #-16]
 8002f0c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8002f10:	ed46 8a02 	vstr	s17, [r6, #-8]
 8002f14:	ee76 6a66 	vsub.f32	s13, s12, s13
 8002f18:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8002f1c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8002f20:	ed52 2a04 	vldr	s5, [r2, #-16]
 8002f24:	ee33 3a61 	vsub.f32	s6, s6, s3
 8002f28:	ee34 4a42 	vsub.f32	s8, s8, s4
 8002f2c:	ee26 8a86 	vmul.f32	s16, s13, s12
 8002f30:	ee24 2a06 	vmul.f32	s4, s8, s12
 8002f34:	ee63 1a22 	vmul.f32	s3, s6, s5
 8002f38:	ee24 4a22 	vmul.f32	s8, s8, s5
 8002f3c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8002f40:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8002f44:	ee23 6a86 	vmul.f32	s12, s7, s12
 8002f48:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8002f4c:	ee36 6a04 	vadd.f32	s12, s12, s8
 8002f50:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8002f54:	ee72 3a63 	vsub.f32	s7, s4, s7
 8002f58:	ee71 2a88 	vadd.f32	s5, s3, s16
 8002f5c:	ed44 6a03 	vstr	s13, [r4, #-12]
 8002f60:	ed44 2a04 	vstr	s5, [r4, #-16]
 8002f64:	ed43 3a04 	vstr	s7, [r3, #-16]
 8002f68:	ed03 6a03 	vstr	s12, [r3, #-12]
 8002f6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f70:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8002f74:	ed12 7a01 	vldr	s14, [r2, #-4]
 8002f78:	ed52 5a02 	vldr	s11, [r2, #-8]
 8002f7c:	ee35 6a41 	vsub.f32	s12, s10, s2
 8002f80:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8002f84:	ee67 3a87 	vmul.f32	s7, s15, s14
 8002f88:	ee26 5a87 	vmul.f32	s10, s13, s14
 8002f8c:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8002f90:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8002f94:	ee64 4a87 	vmul.f32	s9, s9, s14
 8002f98:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8002f9c:	ee26 7a07 	vmul.f32	s14, s12, s14
 8002fa0:	ee26 6a25 	vmul.f32	s12, s12, s11
 8002fa4:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8002fa8:	ee74 5a23 	vadd.f32	s11, s8, s7
 8002fac:	ee35 6a46 	vsub.f32	s12, s10, s12
 8002fb0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8002fb4:	f1be 0e01 	subs.w	lr, lr, #1
 8002fb8:	ed44 5a02 	vstr	s11, [r4, #-8]
 8002fbc:	f105 0510 	add.w	r5, r5, #16
 8002fc0:	ed44 7a01 	vstr	s15, [r4, #-4]
 8002fc4:	f106 0610 	add.w	r6, r6, #16
 8002fc8:	ed03 6a02 	vstr	s12, [r3, #-8]
 8002fcc:	ed03 7a01 	vstr	s14, [r3, #-4]
 8002fd0:	f102 0210 	add.w	r2, r2, #16
 8002fd4:	f104 0410 	add.w	r4, r4, #16
 8002fd8:	f103 0310 	add.w	r3, r3, #16
 8002fdc:	f47f af5a 	bne.w	8002e94 <arm_cfft_radix8by2_f32+0x34>
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	b28c      	uxth	r4, r1
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	f000 fbca 	bl	8003780 <arm_radix8_butterfly_f32>
 8002fec:	ecbd 8b08 	vpop	{d8-d11}
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	4640      	mov	r0, r8
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002ffc:	f000 bbc0 	b.w	8003780 <arm_radix8_butterfly_f32>

08003000 <arm_cfft_radix8by4_f32>:
 8003000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	ed2d 8b0a 	vpush	{d8-d12}
 8003008:	8802      	ldrh	r2, [r0, #0]
 800300a:	ed91 6a00 	vldr	s12, [r1]
 800300e:	b08f      	sub	sp, #60	; 0x3c
 8003010:	460f      	mov	r7, r1
 8003012:	0852      	lsrs	r2, r2, #1
 8003014:	6841      	ldr	r1, [r0, #4]
 8003016:	900c      	str	r0, [sp, #48]	; 0x30
 8003018:	0093      	lsls	r3, r2, #2
 800301a:	4638      	mov	r0, r7
 800301c:	4418      	add	r0, r3
 800301e:	4606      	mov	r6, r0
 8003020:	9009      	str	r0, [sp, #36]	; 0x24
 8003022:	4418      	add	r0, r3
 8003024:	edd0 6a00 	vldr	s13, [r0]
 8003028:	ed96 4a00 	vldr	s8, [r6]
 800302c:	edd6 2a01 	vldr	s5, [r6, #4]
 8003030:	edd0 7a01 	vldr	s15, [r0, #4]
 8003034:	900a      	str	r0, [sp, #40]	; 0x28
 8003036:	ee76 5a26 	vadd.f32	s11, s12, s13
 800303a:	4604      	mov	r4, r0
 800303c:	4625      	mov	r5, r4
 800303e:	441c      	add	r4, r3
 8003040:	edd4 4a00 	vldr	s9, [r4]
 8003044:	ed97 7a01 	vldr	s14, [r7, #4]
 8003048:	ed94 3a01 	vldr	s6, [r4, #4]
 800304c:	9401      	str	r4, [sp, #4]
 800304e:	ee35 5a84 	vadd.f32	s10, s11, s8
 8003052:	4630      	mov	r0, r6
 8003054:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003058:	463e      	mov	r6, r7
 800305a:	ee15 ea10 	vmov	lr, s10
 800305e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8003062:	f846 eb08 	str.w	lr, [r6], #8
 8003066:	ee37 6a27 	vadd.f32	s12, s14, s15
 800306a:	ed90 5a01 	vldr	s10, [r0, #4]
 800306e:	9605      	str	r6, [sp, #20]
 8003070:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003074:	9e01      	ldr	r6, [sp, #4]
 8003076:	9707      	str	r7, [sp, #28]
 8003078:	ee76 3aa2 	vadd.f32	s7, s13, s5
 800307c:	ed96 2a01 	vldr	s4, [r6, #4]
 8003080:	ee36 7a05 	vadd.f32	s14, s12, s10
 8003084:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8003088:	ee37 5ac4 	vsub.f32	s10, s15, s8
 800308c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003090:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8003094:	4604      	mov	r4, r0
 8003096:	46a3      	mov	fp, r4
 8003098:	ee37 7a02 	vadd.f32	s14, s14, s4
 800309c:	ee35 5a24 	vadd.f32	s10, s10, s9
 80030a0:	ee14 8a10 	vmov	r8, s8
 80030a4:	46a4      	mov	ip, r4
 80030a6:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80030aa:	ed87 7a01 	vstr	s14, [r7, #4]
 80030ae:	f84b 8b08 	str.w	r8, [fp], #8
 80030b2:	f1ac 0704 	sub.w	r7, ip, #4
 80030b6:	ed8c 5a01 	vstr	s10, [ip, #4]
 80030ba:	f101 0c08 	add.w	ip, r1, #8
 80030be:	462c      	mov	r4, r5
 80030c0:	f8cd c010 	str.w	ip, [sp, #16]
 80030c4:	ee15 ca90 	vmov	ip, s11
 80030c8:	ee36 6a62 	vsub.f32	s12, s12, s5
 80030cc:	f844 cb08 	str.w	ip, [r4], #8
 80030d0:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80030d4:	ee36 6a43 	vsub.f32	s12, s12, s6
 80030d8:	9406      	str	r4, [sp, #24]
 80030da:	ee76 6a83 	vadd.f32	s13, s13, s6
 80030de:	f101 0410 	add.w	r4, r1, #16
 80030e2:	0852      	lsrs	r2, r2, #1
 80030e4:	9402      	str	r4, [sp, #8]
 80030e6:	ed85 6a01 	vstr	s12, [r5, #4]
 80030ea:	462c      	mov	r4, r5
 80030ec:	f101 0518 	add.w	r5, r1, #24
 80030f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80030f2:	46b2      	mov	sl, r6
 80030f4:	9503      	str	r5, [sp, #12]
 80030f6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80030fa:	3a02      	subs	r2, #2
 80030fc:	ee16 5a90 	vmov	r5, s13
 8003100:	46b6      	mov	lr, r6
 8003102:	4630      	mov	r0, r6
 8003104:	0852      	lsrs	r2, r2, #1
 8003106:	f84a 5b08 	str.w	r5, [sl], #8
 800310a:	f1a0 0604 	sub.w	r6, r0, #4
 800310e:	edce 7a01 	vstr	s15, [lr, #4]
 8003112:	9208      	str	r2, [sp, #32]
 8003114:	f000 8130 	beq.w	8003378 <arm_cfft_radix8by4_f32+0x378>
 8003118:	4691      	mov	r9, r2
 800311a:	9a07      	ldr	r2, [sp, #28]
 800311c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003120:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8003124:	3b08      	subs	r3, #8
 8003126:	f102 0510 	add.w	r5, r2, #16
 800312a:	f101 0c20 	add.w	ip, r1, #32
 800312e:	f1a4 020c 	sub.w	r2, r4, #12
 8003132:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8003136:	4433      	add	r3, r6
 8003138:	3410      	adds	r4, #16
 800313a:	4650      	mov	r0, sl
 800313c:	4659      	mov	r1, fp
 800313e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8003142:	ed14 5a02 	vldr	s10, [r4, #-8]
 8003146:	ed91 7a00 	vldr	s14, [r1]
 800314a:	edd0 7a00 	vldr	s15, [r0]
 800314e:	ed54 5a01 	vldr	s11, [r4, #-4]
 8003152:	ed15 4a01 	vldr	s8, [r5, #-4]
 8003156:	edd0 6a01 	vldr	s13, [r0, #4]
 800315a:	ed91 6a01 	vldr	s12, [r1, #4]
 800315e:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003162:	ee34 0a25 	vadd.f32	s0, s8, s11
 8003166:	ee78 4a07 	vadd.f32	s9, s16, s14
 800316a:	ee74 5a65 	vsub.f32	s11, s8, s11
 800316e:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8003172:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8003176:	ed45 4a02 	vstr	s9, [r5, #-8]
 800317a:	edd1 4a01 	vldr	s9, [r1, #4]
 800317e:	ed90 4a01 	vldr	s8, [r0, #4]
 8003182:	ee70 4a24 	vadd.f32	s9, s0, s9
 8003186:	ee75 aa06 	vadd.f32	s21, s10, s12
 800318a:	ee74 4a84 	vadd.f32	s9, s9, s8
 800318e:	ee35 aac7 	vsub.f32	s20, s11, s14
 8003192:	ed45 4a01 	vstr	s9, [r5, #-4]
 8003196:	edd6 1a00 	vldr	s3, [r6]
 800319a:	edd7 0a00 	vldr	s1, [r7]
 800319e:	ed92 4a02 	vldr	s8, [r2, #8]
 80031a2:	edd3 3a02 	vldr	s7, [r3, #8]
 80031a6:	ed93 2a01 	vldr	s4, [r3, #4]
 80031aa:	ed16 1a01 	vldr	s2, [r6, #-4]
 80031ae:	edd2 2a01 	vldr	s5, [r2, #4]
 80031b2:	ed57 9a01 	vldr	s19, [r7, #-4]
 80031b6:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80031ba:	ee39 3a81 	vadd.f32	s6, s19, s2
 80031be:	ee74 8a84 	vadd.f32	s17, s9, s8
 80031c2:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80031c6:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80031ca:	ee7a aae6 	vsub.f32	s21, s21, s13
 80031ce:	ee18 aa90 	vmov	sl, s17
 80031d2:	f847 a908 	str.w	sl, [r7], #-8
 80031d6:	edd2 8a01 	vldr	s17, [r2, #4]
 80031da:	ed93 9a01 	vldr	s18, [r3, #4]
 80031de:	ee73 8a28 	vadd.f32	s17, s6, s17
 80031e2:	ee3a aa27 	vadd.f32	s20, s20, s15
 80031e6:	ee78 8a89 	vadd.f32	s17, s17, s18
 80031ea:	ee74 0a63 	vsub.f32	s1, s8, s7
 80031ee:	edc7 8a01 	vstr	s17, [r7, #4]
 80031f2:	ed18 ba02 	vldr	s22, [r8, #-8]
 80031f6:	ed58 8a01 	vldr	s17, [r8, #-4]
 80031fa:	ee39 1ac1 	vsub.f32	s2, s19, s2
 80031fe:	ee6a ba28 	vmul.f32	s23, s20, s17
 8003202:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8003206:	ee71 9ae2 	vsub.f32	s19, s3, s5
 800320a:	ee31 9a20 	vadd.f32	s18, s2, s1
 800320e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8003212:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8003216:	ee6a aaa8 	vmul.f32	s21, s21, s17
 800321a:	ee69 baa8 	vmul.f32	s23, s19, s17
 800321e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8003222:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8003226:	ee69 8a28 	vmul.f32	s17, s18, s17
 800322a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 800322e:	ee1c aa10 	vmov	sl, s24
 8003232:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8003236:	f841 ab08 	str.w	sl, [r1], #8
 800323a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 800323e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8003242:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8003246:	ee33 3a62 	vsub.f32	s6, s6, s5
 800324a:	ed01 aa01 	vstr	s20, [r1, #-4]
 800324e:	edc2 8a01 	vstr	s17, [r2, #4]
 8003252:	ed82 ba02 	vstr	s22, [r2, #8]
 8003256:	ed5c 4a04 	vldr	s9, [ip, #-16]
 800325a:	ee74 3a63 	vsub.f32	s7, s8, s7
 800325e:	ee38 8a47 	vsub.f32	s16, s16, s14
 8003262:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8003266:	ee30 0a46 	vsub.f32	s0, s0, s12
 800326a:	ee33 3a42 	vsub.f32	s6, s6, s4
 800326e:	ee38 8a67 	vsub.f32	s16, s16, s15
 8003272:	ee30 0a66 	vsub.f32	s0, s0, s13
 8003276:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 800327a:	ee63 8a04 	vmul.f32	s17, s6, s8
 800327e:	ee28 aa24 	vmul.f32	s20, s16, s9
 8003282:	ee60 9a04 	vmul.f32	s19, s0, s8
 8003286:	ee28 8a04 	vmul.f32	s16, s16, s8
 800328a:	ee20 0a24 	vmul.f32	s0, s0, s9
 800328e:	ee63 3a84 	vmul.f32	s7, s7, s8
 8003292:	ee39 4a68 	vsub.f32	s8, s18, s17
 8003296:	ee7a 9a29 	vadd.f32	s19, s20, s19
 800329a:	ee14 aa10 	vmov	sl, s8
 800329e:	ee30 0a48 	vsub.f32	s0, s0, s16
 80032a2:	ee63 4a24 	vmul.f32	s9, s6, s9
 80032a6:	ed44 9a02 	vstr	s19, [r4, #-8]
 80032aa:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80032ae:	ed04 0a01 	vstr	s0, [r4, #-4]
 80032b2:	f846 a908 	str.w	sl, [r6], #-8
 80032b6:	ee35 6a46 	vsub.f32	s12, s10, s12
 80032ba:	ee35 7a87 	vadd.f32	s14, s11, s14
 80032be:	edc6 3a01 	vstr	s7, [r6, #4]
 80032c2:	ee76 6a26 	vadd.f32	s13, s12, s13
 80032c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ca:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80032ce:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80032d2:	ee67 5a86 	vmul.f32	s11, s15, s12
 80032d6:	ee26 5a87 	vmul.f32	s10, s13, s14
 80032da:	ee72 2a62 	vsub.f32	s5, s4, s5
 80032de:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80032e2:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80032e6:	ee75 5a25 	vadd.f32	s11, s10, s11
 80032ea:	ee62 0a86 	vmul.f32	s1, s5, s12
 80032ee:	ee66 6a86 	vmul.f32	s13, s13, s12
 80032f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032f6:	ee21 6a06 	vmul.f32	s12, s2, s12
 80032fa:	ee62 2a87 	vmul.f32	s5, s5, s14
 80032fe:	ee21 1a07 	vmul.f32	s2, s2, s14
 8003302:	ee15 aa90 	vmov	sl, s11
 8003306:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800330a:	f840 ab08 	str.w	sl, [r0], #8
 800330e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8003312:	ee76 2a22 	vadd.f32	s5, s12, s5
 8003316:	f1b9 0901 	subs.w	r9, r9, #1
 800331a:	ed40 7a01 	vstr	s15, [r0, #-4]
 800331e:	f105 0508 	add.w	r5, r5, #8
 8003322:	ed83 1a02 	vstr	s2, [r3, #8]
 8003326:	edc3 2a01 	vstr	s5, [r3, #4]
 800332a:	f108 0808 	add.w	r8, r8, #8
 800332e:	f1a2 0208 	sub.w	r2, r2, #8
 8003332:	f10c 0c10 	add.w	ip, ip, #16
 8003336:	f104 0408 	add.w	r4, r4, #8
 800333a:	f10e 0e18 	add.w	lr, lr, #24
 800333e:	f1a3 0308 	sub.w	r3, r3, #8
 8003342:	f47f aefc 	bne.w	800313e <arm_cfft_radix8by4_f32+0x13e>
 8003346:	9908      	ldr	r1, [sp, #32]
 8003348:	9802      	ldr	r0, [sp, #8]
 800334a:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 800334e:	00cb      	lsls	r3, r1, #3
 8003350:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8003354:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8003358:	9102      	str	r1, [sp, #8]
 800335a:	9905      	ldr	r1, [sp, #20]
 800335c:	4419      	add	r1, r3
 800335e:	9105      	str	r1, [sp, #20]
 8003360:	9904      	ldr	r1, [sp, #16]
 8003362:	4419      	add	r1, r3
 8003364:	9104      	str	r1, [sp, #16]
 8003366:	9906      	ldr	r1, [sp, #24]
 8003368:	449b      	add	fp, r3
 800336a:	4419      	add	r1, r3
 800336c:	449a      	add	sl, r3
 800336e:	9b03      	ldr	r3, [sp, #12]
 8003370:	9106      	str	r1, [sp, #24]
 8003372:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003376:	9303      	str	r3, [sp, #12]
 8003378:	9a05      	ldr	r2, [sp, #20]
 800337a:	9806      	ldr	r0, [sp, #24]
 800337c:	ed92 4a00 	vldr	s8, [r2]
 8003380:	ed90 7a00 	vldr	s14, [r0]
 8003384:	ed9b 3a00 	vldr	s6, [fp]
 8003388:	edda 3a00 	vldr	s7, [sl]
 800338c:	edd2 4a01 	vldr	s9, [r2, #4]
 8003390:	edd0 6a01 	vldr	s13, [r0, #4]
 8003394:	ed9a 2a01 	vldr	s4, [sl, #4]
 8003398:	eddb 7a01 	vldr	s15, [fp, #4]
 800339c:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80033a0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80033a2:	ee34 6a07 	vadd.f32	s12, s8, s14
 80033a6:	ee74 5aa6 	vadd.f32	s11, s9, s13
 80033aa:	ee36 5a03 	vadd.f32	s10, s12, s6
 80033ae:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80033b2:	ee35 5a23 	vadd.f32	s10, s10, s7
 80033b6:	ee34 7a47 	vsub.f32	s14, s8, s14
 80033ba:	ed82 5a00 	vstr	s10, [r2]
 80033be:	ed9b 5a01 	vldr	s10, [fp, #4]
 80033c2:	edda 4a01 	vldr	s9, [sl, #4]
 80033c6:	ee35 5a85 	vadd.f32	s10, s11, s10
 80033ca:	ee37 4a27 	vadd.f32	s8, s14, s15
 80033ce:	ee35 5a24 	vadd.f32	s10, s10, s9
 80033d2:	ee76 4ac3 	vsub.f32	s9, s13, s6
 80033d6:	ed82 5a01 	vstr	s10, [r2, #4]
 80033da:	9a04      	ldr	r2, [sp, #16]
 80033dc:	ee34 5aa3 	vadd.f32	s10, s9, s7
 80033e0:	edd2 1a00 	vldr	s3, [r2]
 80033e4:	edd2 2a01 	vldr	s5, [r2, #4]
 80033e8:	9a02      	ldr	r2, [sp, #8]
 80033ea:	ee34 4a42 	vsub.f32	s8, s8, s4
 80033ee:	ee36 6a43 	vsub.f32	s12, s12, s6
 80033f2:	ee64 4a21 	vmul.f32	s9, s8, s3
 80033f6:	ee24 4a22 	vmul.f32	s8, s8, s5
 80033fa:	ee65 2a22 	vmul.f32	s5, s10, s5
 80033fe:	ee25 5a21 	vmul.f32	s10, s10, s3
 8003402:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8003406:	ee35 5a44 	vsub.f32	s10, s10, s8
 800340a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800340e:	edcb 2a00 	vstr	s5, [fp]
 8003412:	ed8b 5a01 	vstr	s10, [fp, #4]
 8003416:	ed92 4a01 	vldr	s8, [r2, #4]
 800341a:	ed92 5a00 	vldr	s10, [r2]
 800341e:	9a03      	ldr	r2, [sp, #12]
 8003420:	ee36 6a63 	vsub.f32	s12, s12, s7
 8003424:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8003428:	ee66 4a05 	vmul.f32	s9, s12, s10
 800342c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8003430:	ee26 6a04 	vmul.f32	s12, s12, s8
 8003434:	ee65 5a84 	vmul.f32	s11, s11, s8
 8003438:	ee35 6a46 	vsub.f32	s12, s10, s12
 800343c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8003440:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003444:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003448:	ed80 6a01 	vstr	s12, [r0, #4]
 800344c:	edc0 5a00 	vstr	s11, [r0]
 8003450:	edd2 5a01 	vldr	s11, [r2, #4]
 8003454:	9807      	ldr	r0, [sp, #28]
 8003456:	ee77 7a02 	vadd.f32	s15, s14, s4
 800345a:	ee36 7ae3 	vsub.f32	s14, s13, s7
 800345e:	edd2 6a00 	vldr	s13, [r2]
 8003462:	ee27 6aa6 	vmul.f32	s12, s15, s13
 8003466:	ee67 6a26 	vmul.f32	s13, s14, s13
 800346a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800346e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003472:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003476:	ee36 7a07 	vadd.f32	s14, s12, s14
 800347a:	edca 7a01 	vstr	s15, [sl, #4]
 800347e:	ed8a 7a00 	vstr	s14, [sl]
 8003482:	6872      	ldr	r2, [r6, #4]
 8003484:	4621      	mov	r1, r4
 8003486:	2304      	movs	r3, #4
 8003488:	f000 f97a 	bl	8003780 <arm_radix8_butterfly_f32>
 800348c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800348e:	6872      	ldr	r2, [r6, #4]
 8003490:	4621      	mov	r1, r4
 8003492:	2304      	movs	r3, #4
 8003494:	f000 f974 	bl	8003780 <arm_radix8_butterfly_f32>
 8003498:	980a      	ldr	r0, [sp, #40]	; 0x28
 800349a:	6872      	ldr	r2, [r6, #4]
 800349c:	4621      	mov	r1, r4
 800349e:	2304      	movs	r3, #4
 80034a0:	f000 f96e 	bl	8003780 <arm_radix8_butterfly_f32>
 80034a4:	6872      	ldr	r2, [r6, #4]
 80034a6:	9801      	ldr	r0, [sp, #4]
 80034a8:	4621      	mov	r1, r4
 80034aa:	2304      	movs	r3, #4
 80034ac:	b00f      	add	sp, #60	; 0x3c
 80034ae:	ecbd 8b0a 	vpop	{d8-d12}
 80034b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034b6:	f000 b963 	b.w	8003780 <arm_radix8_butterfly_f32>
 80034ba:	bf00      	nop

080034bc <arm_cfft_f32>:
 80034bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034c0:	2a01      	cmp	r2, #1
 80034c2:	4606      	mov	r6, r0
 80034c4:	4617      	mov	r7, r2
 80034c6:	460c      	mov	r4, r1
 80034c8:	4698      	mov	r8, r3
 80034ca:	8805      	ldrh	r5, [r0, #0]
 80034cc:	d054      	beq.n	8003578 <arm_cfft_f32+0xbc>
 80034ce:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80034d2:	d04c      	beq.n	800356e <arm_cfft_f32+0xb2>
 80034d4:	d916      	bls.n	8003504 <arm_cfft_f32+0x48>
 80034d6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80034da:	d01a      	beq.n	8003512 <arm_cfft_f32+0x56>
 80034dc:	d95c      	bls.n	8003598 <arm_cfft_f32+0xdc>
 80034de:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80034e2:	d044      	beq.n	800356e <arm_cfft_f32+0xb2>
 80034e4:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80034e8:	d105      	bne.n	80034f6 <arm_cfft_f32+0x3a>
 80034ea:	2301      	movs	r3, #1
 80034ec:	6872      	ldr	r2, [r6, #4]
 80034ee:	4629      	mov	r1, r5
 80034f0:	4620      	mov	r0, r4
 80034f2:	f000 f945 	bl	8003780 <arm_radix8_butterfly_f32>
 80034f6:	f1b8 0f00 	cmp.w	r8, #0
 80034fa:	d111      	bne.n	8003520 <arm_cfft_f32+0x64>
 80034fc:	2f01      	cmp	r7, #1
 80034fe:	d016      	beq.n	800352e <arm_cfft_f32+0x72>
 8003500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003504:	2d20      	cmp	r5, #32
 8003506:	d032      	beq.n	800356e <arm_cfft_f32+0xb2>
 8003508:	d94a      	bls.n	80035a0 <arm_cfft_f32+0xe4>
 800350a:	2d40      	cmp	r5, #64	; 0x40
 800350c:	d0ed      	beq.n	80034ea <arm_cfft_f32+0x2e>
 800350e:	2d80      	cmp	r5, #128	; 0x80
 8003510:	d1f1      	bne.n	80034f6 <arm_cfft_f32+0x3a>
 8003512:	4621      	mov	r1, r4
 8003514:	4630      	mov	r0, r6
 8003516:	f7ff fca3 	bl	8002e60 <arm_cfft_radix8by2_f32>
 800351a:	f1b8 0f00 	cmp.w	r8, #0
 800351e:	d0ed      	beq.n	80034fc <arm_cfft_f32+0x40>
 8003520:	68b2      	ldr	r2, [r6, #8]
 8003522:	89b1      	ldrh	r1, [r6, #12]
 8003524:	4620      	mov	r0, r4
 8003526:	f7fc fe73 	bl	8000210 <arm_bitreversal_32>
 800352a:	2f01      	cmp	r7, #1
 800352c:	d1e8      	bne.n	8003500 <arm_cfft_f32+0x44>
 800352e:	ee07 5a90 	vmov	s15, r5
 8003532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800353a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800353e:	2d00      	cmp	r5, #0
 8003540:	d0de      	beq.n	8003500 <arm_cfft_f32+0x44>
 8003542:	f104 0108 	add.w	r1, r4, #8
 8003546:	2300      	movs	r3, #0
 8003548:	3301      	adds	r3, #1
 800354a:	429d      	cmp	r5, r3
 800354c:	f101 0108 	add.w	r1, r1, #8
 8003550:	ed11 7a04 	vldr	s14, [r1, #-16]
 8003554:	ed51 7a03 	vldr	s15, [r1, #-12]
 8003558:	ee27 7a26 	vmul.f32	s14, s14, s13
 800355c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8003560:	ed01 7a04 	vstr	s14, [r1, #-16]
 8003564:	ed41 7a03 	vstr	s15, [r1, #-12]
 8003568:	d1ee      	bne.n	8003548 <arm_cfft_f32+0x8c>
 800356a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800356e:	4621      	mov	r1, r4
 8003570:	4630      	mov	r0, r6
 8003572:	f7ff fd45 	bl	8003000 <arm_cfft_radix8by4_f32>
 8003576:	e7be      	b.n	80034f6 <arm_cfft_f32+0x3a>
 8003578:	b1ad      	cbz	r5, 80035a6 <arm_cfft_f32+0xea>
 800357a:	f101 030c 	add.w	r3, r1, #12
 800357e:	2200      	movs	r2, #0
 8003580:	ed53 7a02 	vldr	s15, [r3, #-8]
 8003584:	3201      	adds	r2, #1
 8003586:	eef1 7a67 	vneg.f32	s15, s15
 800358a:	4295      	cmp	r5, r2
 800358c:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003590:	f103 0308 	add.w	r3, r3, #8
 8003594:	d1f4      	bne.n	8003580 <arm_cfft_f32+0xc4>
 8003596:	e79a      	b.n	80034ce <arm_cfft_f32+0x12>
 8003598:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 800359c:	d0a5      	beq.n	80034ea <arm_cfft_f32+0x2e>
 800359e:	e7aa      	b.n	80034f6 <arm_cfft_f32+0x3a>
 80035a0:	2d10      	cmp	r5, #16
 80035a2:	d0b6      	beq.n	8003512 <arm_cfft_f32+0x56>
 80035a4:	e7a7      	b.n	80034f6 <arm_cfft_f32+0x3a>
 80035a6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80035aa:	d894      	bhi.n	80034d6 <arm_cfft_f32+0x1a>
 80035ac:	e7aa      	b.n	8003504 <arm_cfft_f32+0x48>
 80035ae:	bf00      	nop

080035b0 <arm_cmplx_mag_f32>:
 80035b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035b4:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80035b8:	b084      	sub	sp, #16
 80035ba:	d07f      	beq.n	80036bc <arm_cmplx_mag_f32+0x10c>
 80035bc:	2700      	movs	r7, #0
 80035be:	f100 0420 	add.w	r4, r0, #32
 80035c2:	f101 0510 	add.w	r5, r1, #16
 80035c6:	4646      	mov	r6, r8
 80035c8:	e05a      	b.n	8003680 <arm_cmplx_mag_f32+0xd0>
 80035ca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80035ce:	eeb4 0a40 	vcmp.f32	s0, s0
 80035d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d6:	f040 80a4 	bne.w	8003722 <arm_cmplx_mag_f32+0x172>
 80035da:	ed05 0a04 	vstr	s0, [r5, #-16]
 80035de:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 80035e2:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 80035e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80035ea:	ee20 0a00 	vmul.f32	s0, s0, s0
 80035ee:	ee77 7a80 	vadd.f32	s15, s15, s0
 80035f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fa:	f2c0 808f 	blt.w	800371c <arm_cmplx_mag_f32+0x16c>
 80035fe:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003602:	eeb4 0a40 	vcmp.f32	s0, s0
 8003606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360a:	f040 80af 	bne.w	800376c <arm_cmplx_mag_f32+0x1bc>
 800360e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8003612:	ed54 7a04 	vldr	s15, [r4, #-16]
 8003616:	ed14 0a03 	vldr	s0, [r4, #-12]
 800361a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800361e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003622:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	db72      	blt.n	8003716 <arm_cmplx_mag_f32+0x166>
 8003630:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003634:	eeb4 0a40 	vcmp.f32	s0, s0
 8003638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800363c:	f040 808c 	bne.w	8003758 <arm_cmplx_mag_f32+0x1a8>
 8003640:	ed05 0a02 	vstr	s0, [r5, #-8]
 8003644:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003648:	ed14 0a01 	vldr	s0, [r4, #-4]
 800364c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003650:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003654:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003658:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800365c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003660:	db20      	blt.n	80036a4 <arm_cmplx_mag_f32+0xf4>
 8003662:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003666:	eeb4 0a40 	vcmp.f32	s0, s0
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	d169      	bne.n	8003744 <arm_cmplx_mag_f32+0x194>
 8003670:	3e01      	subs	r6, #1
 8003672:	ed05 0a01 	vstr	s0, [r5, #-4]
 8003676:	f104 0420 	add.w	r4, r4, #32
 800367a:	f105 0510 	add.w	r5, r5, #16
 800367e:	d019      	beq.n	80036b4 <arm_cmplx_mag_f32+0x104>
 8003680:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8003684:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8003688:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800368c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003690:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003694:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369c:	da95      	bge.n	80035ca <arm_cmplx_mag_f32+0x1a>
 800369e:	f845 7c10 	str.w	r7, [r5, #-16]
 80036a2:	e79c      	b.n	80035de <arm_cmplx_mag_f32+0x2e>
 80036a4:	3e01      	subs	r6, #1
 80036a6:	f845 7c04 	str.w	r7, [r5, #-4]
 80036aa:	f104 0420 	add.w	r4, r4, #32
 80036ae:	f105 0510 	add.w	r5, r5, #16
 80036b2:	d1e5      	bne.n	8003680 <arm_cmplx_mag_f32+0xd0>
 80036b4:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80036b8:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80036bc:	f012 0503 	ands.w	r5, r2, #3
 80036c0:	d026      	beq.n	8003710 <arm_cmplx_mag_f32+0x160>
 80036c2:	2600      	movs	r6, #0
 80036c4:	f100 0408 	add.w	r4, r0, #8
 80036c8:	e00c      	b.n	80036e4 <arm_cmplx_mag_f32+0x134>
 80036ca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80036ce:	eeb4 0a40 	vcmp.f32	s0, s0
 80036d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d6:	d12e      	bne.n	8003736 <arm_cmplx_mag_f32+0x186>
 80036d8:	3d01      	subs	r5, #1
 80036da:	ed01 0a01 	vstr	s0, [r1, #-4]
 80036de:	f104 0408 	add.w	r4, r4, #8
 80036e2:	d015      	beq.n	8003710 <arm_cmplx_mag_f32+0x160>
 80036e4:	ed54 7a02 	vldr	s15, [r4, #-8]
 80036e8:	ed14 0a01 	vldr	s0, [r4, #-4]
 80036ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80036f0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80036f4:	3104      	adds	r1, #4
 80036f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 80036fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	dae2      	bge.n	80036ca <arm_cmplx_mag_f32+0x11a>
 8003704:	3d01      	subs	r5, #1
 8003706:	f841 6c04 	str.w	r6, [r1, #-4]
 800370a:	f104 0408 	add.w	r4, r4, #8
 800370e:	d1e9      	bne.n	80036e4 <arm_cmplx_mag_f32+0x134>
 8003710:	b004      	add	sp, #16
 8003712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003716:	f845 7c08 	str.w	r7, [r5, #-8]
 800371a:	e793      	b.n	8003644 <arm_cmplx_mag_f32+0x94>
 800371c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8003720:	e777      	b.n	8003612 <arm_cmplx_mag_f32+0x62>
 8003722:	eeb0 0a67 	vmov.f32	s0, s15
 8003726:	9203      	str	r2, [sp, #12]
 8003728:	9102      	str	r1, [sp, #8]
 800372a:	9001      	str	r0, [sp, #4]
 800372c:	f003 f8ee 	bl	800690c <sqrtf>
 8003730:	a801      	add	r0, sp, #4
 8003732:	c807      	ldmia	r0, {r0, r1, r2}
 8003734:	e751      	b.n	80035da <arm_cmplx_mag_f32+0x2a>
 8003736:	eeb0 0a67 	vmov.f32	s0, s15
 800373a:	9101      	str	r1, [sp, #4]
 800373c:	f003 f8e6 	bl	800690c <sqrtf>
 8003740:	9901      	ldr	r1, [sp, #4]
 8003742:	e7c9      	b.n	80036d8 <arm_cmplx_mag_f32+0x128>
 8003744:	eeb0 0a67 	vmov.f32	s0, s15
 8003748:	9203      	str	r2, [sp, #12]
 800374a:	9102      	str	r1, [sp, #8]
 800374c:	9001      	str	r0, [sp, #4]
 800374e:	f003 f8dd 	bl	800690c <sqrtf>
 8003752:	a801      	add	r0, sp, #4
 8003754:	c807      	ldmia	r0, {r0, r1, r2}
 8003756:	e78b      	b.n	8003670 <arm_cmplx_mag_f32+0xc0>
 8003758:	eeb0 0a67 	vmov.f32	s0, s15
 800375c:	9203      	str	r2, [sp, #12]
 800375e:	9102      	str	r1, [sp, #8]
 8003760:	9001      	str	r0, [sp, #4]
 8003762:	f003 f8d3 	bl	800690c <sqrtf>
 8003766:	a801      	add	r0, sp, #4
 8003768:	c807      	ldmia	r0, {r0, r1, r2}
 800376a:	e769      	b.n	8003640 <arm_cmplx_mag_f32+0x90>
 800376c:	eeb0 0a67 	vmov.f32	s0, s15
 8003770:	9203      	str	r2, [sp, #12]
 8003772:	9102      	str	r1, [sp, #8]
 8003774:	9001      	str	r0, [sp, #4]
 8003776:	f003 f8c9 	bl	800690c <sqrtf>
 800377a:	a801      	add	r0, sp, #4
 800377c:	c807      	ldmia	r0, {r0, r1, r2}
 800377e:	e746      	b.n	800360e <arm_cmplx_mag_f32+0x5e>

08003780 <arm_radix8_butterfly_f32>:
 8003780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003784:	ed2d 8b10 	vpush	{d8-d15}
 8003788:	461c      	mov	r4, r3
 800378a:	b09d      	sub	sp, #116	; 0x74
 800378c:	4603      	mov	r3, r0
 800378e:	3304      	adds	r3, #4
 8003790:	ed9f bac4 	vldr	s22, [pc, #784]	; 8003aa4 <arm_radix8_butterfly_f32+0x324>
 8003794:	9019      	str	r0, [sp, #100]	; 0x64
 8003796:	921a      	str	r2, [sp, #104]	; 0x68
 8003798:	468b      	mov	fp, r1
 800379a:	931b      	str	r3, [sp, #108]	; 0x6c
 800379c:	468a      	mov	sl, r1
 800379e:	46a1      	mov	r9, r4
 80037a0:	4607      	mov	r7, r0
 80037a2:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80037a6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80037aa:	eb03 0508 	add.w	r5, r3, r8
 80037ae:	195c      	adds	r4, r3, r5
 80037b0:	00de      	lsls	r6, r3, #3
 80037b2:	191a      	adds	r2, r3, r4
 80037b4:	9600      	str	r6, [sp, #0]
 80037b6:	1898      	adds	r0, r3, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	9e00      	ldr	r6, [sp, #0]
 80037bc:	9311      	str	r3, [sp, #68]	; 0x44
 80037be:	4401      	add	r1, r0
 80037c0:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80037c4:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80037c8:	19be      	adds	r6, r7, r6
 80037ca:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80037ce:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80037d2:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80037d6:	9f00      	ldr	r7, [sp, #0]
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	eb06 0e07 	add.w	lr, r6, r7
 80037de:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80037e0:	9302      	str	r3, [sp, #8]
 80037e2:	3204      	adds	r2, #4
 80037e4:	3104      	adds	r1, #4
 80037e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80037ea:	f04f 0c00 	mov.w	ip, #0
 80037ee:	edde 7a00 	vldr	s15, [lr]
 80037f2:	edd6 6a00 	vldr	s13, [r6]
 80037f6:	ed95 2a00 	vldr	s4, [r5]
 80037fa:	ed17 aa01 	vldr	s20, [r7, #-4]
 80037fe:	edd4 4a00 	vldr	s9, [r4]
 8003802:	ed90 5a00 	vldr	s10, [r0]
 8003806:	ed12 7a01 	vldr	s14, [r2, #-4]
 800380a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800380e:	ee77 8a85 	vadd.f32	s17, s15, s10
 8003812:	ee76 3a87 	vadd.f32	s7, s13, s14
 8003816:	ee32 4a20 	vadd.f32	s8, s4, s1
 800381a:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800381e:	ee33 6a84 	vadd.f32	s12, s7, s8
 8003822:	ee73 5a28 	vadd.f32	s11, s6, s17
 8003826:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800382a:	ee75 6a86 	vadd.f32	s13, s11, s12
 800382e:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8003832:	ed47 6a01 	vstr	s13, [r7, #-4]
 8003836:	edc4 5a00 	vstr	s11, [r4]
 800383a:	ed92 9a00 	vldr	s18, [r2]
 800383e:	ed95 1a01 	vldr	s2, [r5, #4]
 8003842:	edd6 5a01 	vldr	s11, [r6, #4]
 8003846:	ed91 6a00 	vldr	s12, [r1]
 800384a:	edd7 2a00 	vldr	s5, [r7]
 800384e:	edd4 1a01 	vldr	s3, [r4, #4]
 8003852:	edde 6a01 	vldr	s13, [lr, #4]
 8003856:	edd0 9a01 	vldr	s19, [r0, #4]
 800385a:	ee72 0a60 	vsub.f32	s1, s4, s1
 800385e:	ee71 aa46 	vsub.f32	s21, s2, s12
 8003862:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8003866:	ee37 0a60 	vsub.f32	s0, s14, s1
 800386a:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800386e:	ee37 7a20 	vadd.f32	s14, s14, s1
 8003872:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8003876:	ee37 5ac5 	vsub.f32	s10, s15, s10
 800387a:	ee75 5a89 	vadd.f32	s11, s11, s18
 800387e:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8003882:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8003886:	ee31 6a06 	vadd.f32	s12, s2, s12
 800388a:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800388e:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8003892:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8003896:	ee72 1ae1 	vsub.f32	s3, s5, s3
 800389a:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800389e:	ee62 2a0b 	vmul.f32	s5, s4, s22
 80038a2:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80038a6:	ee33 3a68 	vsub.f32	s6, s6, s17
 80038aa:	ee36 0a88 	vadd.f32	s0, s13, s16
 80038ae:	ee75 8a86 	vadd.f32	s17, s11, s12
 80038b2:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80038b6:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80038ba:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80038be:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80038c2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80038c6:	ee75 4a27 	vadd.f32	s9, s10, s15
 80038ca:	ee71 5a49 	vsub.f32	s11, s2, s18
 80038ce:	ee31 2a09 	vadd.f32	s4, s2, s18
 80038d2:	ee75 7a67 	vsub.f32	s15, s10, s15
 80038d6:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80038da:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80038de:	ee73 0a06 	vadd.f32	s1, s6, s12
 80038e2:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80038e6:	ee36 5a87 	vadd.f32	s10, s13, s14
 80038ea:	ee32 8a28 	vadd.f32	s16, s4, s17
 80038ee:	ee33 6a46 	vsub.f32	s12, s6, s12
 80038f2:	ee34 4a25 	vadd.f32	s8, s8, s11
 80038f6:	ee33 3a80 	vadd.f32	s6, s7, s0
 80038fa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80038fe:	ee71 5a64 	vsub.f32	s11, s2, s9
 8003902:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8003906:	ee32 2a68 	vsub.f32	s4, s4, s17
 800390a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800390e:	ee74 4a81 	vadd.f32	s9, s9, s2
 8003912:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8003916:	44dc      	add	ip, fp
 8003918:	45e2      	cmp	sl, ip
 800391a:	ed87 8a00 	vstr	s16, [r7]
 800391e:	ed84 2a01 	vstr	s4, [r4, #4]
 8003922:	441f      	add	r7, r3
 8003924:	edce 0a00 	vstr	s1, [lr]
 8003928:	441c      	add	r4, r3
 800392a:	ed80 6a00 	vstr	s12, [r0]
 800392e:	edce 1a01 	vstr	s3, [lr, #4]
 8003932:	ed80 4a01 	vstr	s8, [r0, #4]
 8003936:	449e      	add	lr, r3
 8003938:	ed86 3a00 	vstr	s6, [r6]
 800393c:	4418      	add	r0, r3
 800393e:	ed41 3a01 	vstr	s7, [r1, #-4]
 8003942:	ed02 5a01 	vstr	s10, [r2, #-4]
 8003946:	ed85 7a00 	vstr	s14, [r5]
 800394a:	edc6 5a01 	vstr	s11, [r6, #4]
 800394e:	edc1 4a00 	vstr	s9, [r1]
 8003952:	441e      	add	r6, r3
 8003954:	edc2 6a00 	vstr	s13, [r2]
 8003958:	4419      	add	r1, r3
 800395a:	edc5 7a01 	vstr	s15, [r5, #4]
 800395e:	441a      	add	r2, r3
 8003960:	441d      	add	r5, r3
 8003962:	f63f af44 	bhi.w	80037ee <arm_radix8_butterfly_f32+0x6e>
 8003966:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003968:	2a07      	cmp	r2, #7
 800396a:	f240 81f5 	bls.w	8003d58 <arm_radix8_butterfly_f32+0x5d8>
 800396e:	f108 0101 	add.w	r1, r8, #1
 8003972:	188f      	adds	r7, r1, r2
 8003974:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8003978:	19d6      	adds	r6, r2, r7
 800397a:	eb08 0c09 	add.w	ip, r8, r9
 800397e:	1994      	adds	r4, r2, r6
 8003980:	eb0c 0e09 	add.w	lr, ip, r9
 8003984:	4610      	mov	r0, r2
 8003986:	9701      	str	r7, [sp, #4]
 8003988:	4420      	add	r0, r4
 800398a:	eb0e 0709 	add.w	r7, lr, r9
 800398e:	1815      	adds	r5, r2, r0
 8003990:	eb07 0209 	add.w	r2, r7, r9
 8003994:	9203      	str	r2, [sp, #12]
 8003996:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003998:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800399c:	9117      	str	r1, [sp, #92]	; 0x5c
 800399e:	440a      	add	r2, r1
 80039a0:	9900      	ldr	r1, [sp, #0]
 80039a2:	3108      	adds	r1, #8
 80039a4:	9100      	str	r1, [sp, #0]
 80039a6:	9902      	ldr	r1, [sp, #8]
 80039a8:	3108      	adds	r1, #8
 80039aa:	9102      	str	r1, [sp, #8]
 80039ac:	9919      	ldr	r1, [sp, #100]	; 0x64
 80039ae:	00ff      	lsls	r7, r7, #3
 80039b0:	9715      	str	r7, [sp, #84]	; 0x54
 80039b2:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80039b6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80039ba:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80039be:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80039c0:	9903      	ldr	r1, [sp, #12]
 80039c2:	19d7      	adds	r7, r2, r7
 80039c4:	00c9      	lsls	r1, r1, #3
 80039c6:	9114      	str	r1, [sp, #80]	; 0x50
 80039c8:	9710      	str	r7, [sp, #64]	; 0x40
 80039ca:	9919      	ldr	r1, [sp, #100]	; 0x64
 80039cc:	9f00      	ldr	r7, [sp, #0]
 80039ce:	19cf      	adds	r7, r1, r7
 80039d0:	970d      	str	r7, [sp, #52]	; 0x34
 80039d2:	9f02      	ldr	r7, [sp, #8]
 80039d4:	19cf      	adds	r7, r1, r7
 80039d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80039da:	970c      	str	r7, [sp, #48]	; 0x30
 80039dc:	9f01      	ldr	r7, [sp, #4]
 80039de:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80039e2:	3504      	adds	r5, #4
 80039e4:	3004      	adds	r0, #4
 80039e6:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80039ea:	9508      	str	r5, [sp, #32]
 80039ec:	9009      	str	r0, [sp, #36]	; 0x24
 80039ee:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80039f0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80039f2:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80039f6:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80039fa:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80039fe:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003a00:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8003a04:	1945      	adds	r5, r0, r5
 8003a06:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003a0a:	460f      	mov	r7, r1
 8003a0c:	3404      	adds	r4, #4
 8003a0e:	4641      	mov	r1, r8
 8003a10:	1841      	adds	r1, r0, r1
 8003a12:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8003a16:	940a      	str	r4, [sp, #40]	; 0x28
 8003a18:	eb00 0c06 	add.w	ip, r0, r6
 8003a1c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003a20:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8003a22:	9506      	str	r5, [sp, #24]
 8003a24:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003a26:	9105      	str	r1, [sp, #20]
 8003a28:	4639      	mov	r1, r7
 8003a2a:	1905      	adds	r5, r0, r4
 8003a2c:	3108      	adds	r1, #8
 8003a2e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003a30:	9507      	str	r5, [sp, #28]
 8003a32:	910f      	str	r1, [sp, #60]	; 0x3c
 8003a34:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8003a38:	2101      	movs	r1, #1
 8003a3a:	eb00 0e06 	add.w	lr, r0, r6
 8003a3e:	9518      	str	r5, [sp, #96]	; 0x60
 8003a40:	9404      	str	r4, [sp, #16]
 8003a42:	9103      	str	r1, [sp, #12]
 8003a44:	4620      	mov	r0, r4
 8003a46:	4689      	mov	r9, r1
 8003a48:	9e06      	ldr	r6, [sp, #24]
 8003a4a:	ed90 fa00 	vldr	s30, [r0]
 8003a4e:	edd6 7a01 	vldr	s15, [r6, #4]
 8003a52:	edd0 ba01 	vldr	s23, [r0, #4]
 8003a56:	edcd 7a00 	vstr	s15, [sp]
 8003a5a:	a80d      	add	r0, sp, #52	; 0x34
 8003a5c:	edde 7a01 	vldr	s15, [lr, #4]
 8003a60:	9c05      	ldr	r4, [sp, #20]
 8003a62:	9d07      	ldr	r5, [sp, #28]
 8003a64:	edd2 fa00 	vldr	s31, [r2]
 8003a68:	ed92 ca01 	vldr	s24, [r2, #4]
 8003a6c:	edcd 7a01 	vstr	s15, [sp, #4]
 8003a70:	c807      	ldmia	r0, {r0, r1, r2}
 8003a72:	eddc 7a01 	vldr	s15, [ip, #4]
 8003a76:	edd4 ea00 	vldr	s29, [r4]
 8003a7a:	ed95 ea00 	vldr	s28, [r5]
 8003a7e:	edd6 da00 	vldr	s27, [r6]
 8003a82:	edd4 aa01 	vldr	s21, [r4, #4]
 8003a86:	ed95 aa01 	vldr	s20, [r5, #4]
 8003a8a:	ed9e da00 	vldr	s26, [lr]
 8003a8e:	eddc ca00 	vldr	s25, [ip]
 8003a92:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a96:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003a98:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003a9a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003a9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003a9e:	edcd 7a02 	vstr	s15, [sp, #8]
 8003aa2:	e001      	b.n	8003aa8 <arm_radix8_butterfly_f32+0x328>
 8003aa4:	3f3504f3 	.word	0x3f3504f3
 8003aa8:	ed16 6a01 	vldr	s12, [r6, #-4]
 8003aac:	ed91 5a00 	vldr	s10, [r1]
 8003ab0:	ed57 9a01 	vldr	s19, [r7, #-4]
 8003ab4:	edd5 7a00 	vldr	s15, [r5]
 8003ab8:	ed18 7a01 	vldr	s14, [r8, #-4]
 8003abc:	edd2 3a00 	vldr	s7, [r2]
 8003ac0:	ed94 3a00 	vldr	s6, [r4]
 8003ac4:	ed90 2a00 	vldr	s4, [r0]
 8003ac8:	ed92 0a01 	vldr	s0, [r2, #4]
 8003acc:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003ad0:	ee32 1a06 	vadd.f32	s2, s4, s12
 8003ad4:	ee33 4a29 	vadd.f32	s8, s6, s19
 8003ad8:	ee77 4a87 	vadd.f32	s9, s15, s14
 8003adc:	ee78 1a04 	vadd.f32	s3, s16, s8
 8003ae0:	ee71 6a24 	vadd.f32	s13, s2, s9
 8003ae4:	ee32 2a46 	vsub.f32	s4, s4, s12
 8003ae8:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8003aec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003af0:	ed82 6a00 	vstr	s12, [r2]
 8003af4:	edd5 8a01 	vldr	s17, [r5, #4]
 8003af8:	ed90 9a01 	vldr	s18, [r0, #4]
 8003afc:	edd6 2a00 	vldr	s5, [r6]
 8003b00:	ed98 7a00 	vldr	s14, [r8]
 8003b04:	edd4 0a01 	vldr	s1, [r4, #4]
 8003b08:	ed91 6a01 	vldr	s12, [r1, #4]
 8003b0c:	edd7 5a00 	vldr	s11, [r7]
 8003b10:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8003b14:	ee33 3a69 	vsub.f32	s6, s6, s19
 8003b18:	ee39 5a62 	vsub.f32	s10, s18, s5
 8003b1c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8003b20:	ee38 4a44 	vsub.f32	s8, s16, s8
 8003b24:	ee38 7a87 	vadd.f32	s14, s17, s14
 8003b28:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8003b2c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8003b30:	ee75 8a69 	vsub.f32	s17, s10, s19
 8003b34:	ee32 9a27 	vadd.f32	s18, s4, s15
 8003b38:	ee35 5a29 	vadd.f32	s10, s10, s19
 8003b3c:	ee72 7a67 	vsub.f32	s15, s4, s15
 8003b40:	ee30 2a06 	vadd.f32	s4, s0, s12
 8003b44:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8003b48:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8003b4c:	ee32 9a08 	vadd.f32	s18, s4, s16
 8003b50:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8003b54:	ee32 2a48 	vsub.f32	s4, s4, s16
 8003b58:	ee71 4a64 	vsub.f32	s9, s2, s9
 8003b5c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8003b60:	ee32 1a87 	vadd.f32	s2, s5, s14
 8003b64:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8003b68:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8003b6c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8003b70:	ee73 0a29 	vadd.f32	s1, s6, s19
 8003b74:	ee36 0a28 	vadd.f32	s0, s12, s17
 8003b78:	ee33 3a69 	vsub.f32	s6, s6, s19
 8003b7c:	ee32 7a64 	vsub.f32	s14, s4, s9
 8003b80:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8003b84:	ee36 6a68 	vsub.f32	s12, s12, s17
 8003b88:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8003b8c:	ee75 8a85 	vadd.f32	s17, s11, s10
 8003b90:	ee74 3a22 	vadd.f32	s7, s8, s5
 8003b94:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8003b98:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8003b9c:	ee79 1a41 	vsub.f32	s3, s18, s2
 8003ba0:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8003ba4:	ee76 5a43 	vsub.f32	s11, s12, s6
 8003ba8:	ee74 2a62 	vsub.f32	s5, s8, s5
 8003bac:	ee74 4a82 	vadd.f32	s9, s9, s4
 8003bb0:	ee30 4a60 	vsub.f32	s8, s0, s1
 8003bb4:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8003bb8:	ee30 0a80 	vadd.f32	s0, s1, s0
 8003bbc:	ee77 9a85 	vadd.f32	s19, s15, s10
 8003bc0:	ee33 6a06 	vadd.f32	s12, s6, s12
 8003bc4:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003bc8:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8003bcc:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8003bd0:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8003bd4:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8003bd8:	ee39 1a01 	vadd.f32	s2, s18, s2
 8003bdc:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8003be0:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8003be4:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8003be8:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8003bec:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8003bf0:	ee35 3a03 	vadd.f32	s6, s10, s6
 8003bf4:	ee72 6a66 	vsub.f32	s13, s4, s13
 8003bf8:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8003bfc:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8003c00:	ed9d 4a02 	vldr	s8, [sp, #8]
 8003c04:	ed82 1a01 	vstr	s2, [r2, #4]
 8003c08:	ee77 3a63 	vsub.f32	s7, s14, s7
 8003c0c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8003c10:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003c14:	ed81 3a00 	vstr	s6, [r1]
 8003c18:	ee30 9a89 	vadd.f32	s18, s1, s18
 8003c1c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8003c20:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8003c24:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8003c28:	ee67 2a22 	vmul.f32	s5, s14, s5
 8003c2c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8003c30:	ee27 7a24 	vmul.f32	s14, s14, s9
 8003c34:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8003c38:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8003c3c:	ee64 8a28 	vmul.f32	s17, s8, s17
 8003c40:	ed9d 4a00 	vldr	s8, [sp]
 8003c44:	edc1 6a01 	vstr	s13, [r1, #4]
 8003c48:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8003c4c:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8003c50:	ee64 9a29 	vmul.f32	s19, s8, s19
 8003c54:	ee24 4a25 	vmul.f32	s8, s8, s11
 8003c58:	ee30 7a87 	vadd.f32	s14, s1, s14
 8003c5c:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003c60:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8003c64:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8003c68:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8003c6c:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8003c70:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8003c74:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8003c78:	ee75 1a21 	vadd.f32	s3, s10, s3
 8003c7c:	ee30 0a68 	vsub.f32	s0, s0, s17
 8003c80:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8003c84:	ee70 0a84 	vadd.f32	s1, s1, s8
 8003c88:	ee36 6a67 	vsub.f32	s12, s12, s15
 8003c8c:	44d9      	add	r9, fp
 8003c8e:	45ca      	cmp	sl, r9
 8003c90:	ed84 9a00 	vstr	s18, [r4]
 8003c94:	edc4 3a01 	vstr	s7, [r4, #4]
 8003c98:	441a      	add	r2, r3
 8003c9a:	ed07 7a01 	vstr	s14, [r7, #-4]
 8003c9e:	edc7 2a00 	vstr	s5, [r7]
 8003ca2:	4419      	add	r1, r3
 8003ca4:	ed80 2a00 	vstr	s4, [r0]
 8003ca8:	ed80 8a01 	vstr	s16, [r0, #4]
 8003cac:	441c      	add	r4, r3
 8003cae:	ed48 1a01 	vstr	s3, [r8, #-4]
 8003cb2:	ed88 0a00 	vstr	s0, [r8]
 8003cb6:	441f      	add	r7, r3
 8003cb8:	ed46 4a01 	vstr	s9, [r6, #-4]
 8003cbc:	4418      	add	r0, r3
 8003cbe:	edc6 9a00 	vstr	s19, [r6]
 8003cc2:	4498      	add	r8, r3
 8003cc4:	edc5 0a00 	vstr	s1, [r5]
 8003cc8:	ed85 6a01 	vstr	s12, [r5, #4]
 8003ccc:	441e      	add	r6, r3
 8003cce:	441d      	add	r5, r3
 8003cd0:	f63f aeea 	bhi.w	8003aa8 <arm_radix8_butterfly_f32+0x328>
 8003cd4:	9a03      	ldr	r2, [sp, #12]
 8003cd6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003cd8:	3201      	adds	r2, #1
 8003cda:	4611      	mov	r1, r2
 8003cdc:	9203      	str	r2, [sp, #12]
 8003cde:	9a04      	ldr	r2, [sp, #16]
 8003ce0:	4402      	add	r2, r0
 8003ce2:	9204      	str	r2, [sp, #16]
 8003ce4:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8003ce6:	9a05      	ldr	r2, [sp, #20]
 8003ce8:	4402      	add	r2, r0
 8003cea:	9205      	str	r2, [sp, #20]
 8003cec:	9812      	ldr	r0, [sp, #72]	; 0x48
 8003cee:	9a07      	ldr	r2, [sp, #28]
 8003cf0:	4402      	add	r2, r0
 8003cf2:	9207      	str	r2, [sp, #28]
 8003cf4:	9816      	ldr	r0, [sp, #88]	; 0x58
 8003cf6:	9a06      	ldr	r2, [sp, #24]
 8003cf8:	4402      	add	r2, r0
 8003cfa:	9206      	str	r2, [sp, #24]
 8003cfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003cfe:	4496      	add	lr, r2
 8003d00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8003d02:	4494      	add	ip, r2
 8003d04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003d06:	3208      	adds	r2, #8
 8003d08:	920f      	str	r2, [sp, #60]	; 0x3c
 8003d0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d0c:	3208      	adds	r2, #8
 8003d0e:	920e      	str	r2, [sp, #56]	; 0x38
 8003d10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003d12:	3208      	adds	r2, #8
 8003d14:	920d      	str	r2, [sp, #52]	; 0x34
 8003d16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003d18:	3208      	adds	r2, #8
 8003d1a:	920c      	str	r2, [sp, #48]	; 0x30
 8003d1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003d1e:	3208      	adds	r2, #8
 8003d20:	920b      	str	r2, [sp, #44]	; 0x2c
 8003d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d24:	3208      	adds	r2, #8
 8003d26:	920a      	str	r2, [sp, #40]	; 0x28
 8003d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d2a:	3208      	adds	r2, #8
 8003d2c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d2e:	9a08      	ldr	r2, [sp, #32]
 8003d30:	3208      	adds	r2, #8
 8003d32:	9208      	str	r2, [sp, #32]
 8003d34:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003d36:	9811      	ldr	r0, [sp, #68]	; 0x44
 8003d38:	4288      	cmp	r0, r1
 8003d3a:	4622      	mov	r2, r4
 8003d3c:	d007      	beq.n	8003d4e <arm_radix8_butterfly_f32+0x5ce>
 8003d3e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8003d40:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8003d44:	4621      	mov	r1, r4
 8003d46:	4401      	add	r1, r0
 8003d48:	9110      	str	r1, [sp, #64]	; 0x40
 8003d4a:	9804      	ldr	r0, [sp, #16]
 8003d4c:	e67c      	b.n	8003a48 <arm_radix8_butterfly_f32+0x2c8>
 8003d4e:	4683      	mov	fp, r0
 8003d50:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8003d54:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8003d56:	e524      	b.n	80037a2 <arm_radix8_butterfly_f32+0x22>
 8003d58:	b01d      	add	sp, #116	; 0x74
 8003d5a:	ecbd 8b10 	vpop	{d8-d15}
 8003d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d62:	bf00      	nop

08003d64 <__errno>:
 8003d64:	4b01      	ldr	r3, [pc, #4]	; (8003d6c <__errno+0x8>)
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000014 	.word	0x20000014

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	4d0d      	ldr	r5, [pc, #52]	; (8003da8 <__libc_init_array+0x38>)
 8003d74:	4c0d      	ldr	r4, [pc, #52]	; (8003dac <__libc_init_array+0x3c>)
 8003d76:	1b64      	subs	r4, r4, r5
 8003d78:	10a4      	asrs	r4, r4, #2
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	4d0b      	ldr	r5, [pc, #44]	; (8003db0 <__libc_init_array+0x40>)
 8003d82:	4c0c      	ldr	r4, [pc, #48]	; (8003db4 <__libc_init_array+0x44>)
 8003d84:	f002 fde4 	bl	8006950 <_init>
 8003d88:	1b64      	subs	r4, r4, r5
 8003d8a:	10a4      	asrs	r4, r4, #2
 8003d8c:	2600      	movs	r6, #0
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	08009bd4 	.word	0x08009bd4
 8003dac:	08009bd4 	.word	0x08009bd4
 8003db0:	08009bd4 	.word	0x08009bd4
 8003db4:	08009bd8 	.word	0x08009bd8

08003db8 <memset>:
 8003db8:	4402      	add	r2, r0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <memset+0xa>
 8003dc0:	4770      	bx	lr
 8003dc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003dc6:	e7f9      	b.n	8003dbc <memset+0x4>

08003dc8 <__cvt>:
 8003dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	ec55 4b10 	vmov	r4, r5, d0
 8003dd0:	2d00      	cmp	r5, #0
 8003dd2:	460e      	mov	r6, r1
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	462b      	mov	r3, r5
 8003dd8:	bfbb      	ittet	lt
 8003dda:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003dde:	461d      	movlt	r5, r3
 8003de0:	2300      	movge	r3, #0
 8003de2:	232d      	movlt	r3, #45	; 0x2d
 8003de4:	700b      	strb	r3, [r1, #0]
 8003de6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003de8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003dec:	4691      	mov	r9, r2
 8003dee:	f023 0820 	bic.w	r8, r3, #32
 8003df2:	bfbc      	itt	lt
 8003df4:	4622      	movlt	r2, r4
 8003df6:	4614      	movlt	r4, r2
 8003df8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dfc:	d005      	beq.n	8003e0a <__cvt+0x42>
 8003dfe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e02:	d100      	bne.n	8003e06 <__cvt+0x3e>
 8003e04:	3601      	adds	r6, #1
 8003e06:	2102      	movs	r1, #2
 8003e08:	e000      	b.n	8003e0c <__cvt+0x44>
 8003e0a:	2103      	movs	r1, #3
 8003e0c:	ab03      	add	r3, sp, #12
 8003e0e:	9301      	str	r3, [sp, #4]
 8003e10:	ab02      	add	r3, sp, #8
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	ec45 4b10 	vmov	d0, r4, r5
 8003e18:	4653      	mov	r3, sl
 8003e1a:	4632      	mov	r2, r6
 8003e1c:	f000 fe18 	bl	8004a50 <_dtoa_r>
 8003e20:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003e24:	4607      	mov	r7, r0
 8003e26:	d102      	bne.n	8003e2e <__cvt+0x66>
 8003e28:	f019 0f01 	tst.w	r9, #1
 8003e2c:	d022      	beq.n	8003e74 <__cvt+0xac>
 8003e2e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e32:	eb07 0906 	add.w	r9, r7, r6
 8003e36:	d110      	bne.n	8003e5a <__cvt+0x92>
 8003e38:	783b      	ldrb	r3, [r7, #0]
 8003e3a:	2b30      	cmp	r3, #48	; 0x30
 8003e3c:	d10a      	bne.n	8003e54 <__cvt+0x8c>
 8003e3e:	2200      	movs	r2, #0
 8003e40:	2300      	movs	r3, #0
 8003e42:	4620      	mov	r0, r4
 8003e44:	4629      	mov	r1, r5
 8003e46:	f7fc febf 	bl	8000bc8 <__aeabi_dcmpeq>
 8003e4a:	b918      	cbnz	r0, 8003e54 <__cvt+0x8c>
 8003e4c:	f1c6 0601 	rsb	r6, r6, #1
 8003e50:	f8ca 6000 	str.w	r6, [sl]
 8003e54:	f8da 3000 	ldr.w	r3, [sl]
 8003e58:	4499      	add	r9, r3
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4620      	mov	r0, r4
 8003e60:	4629      	mov	r1, r5
 8003e62:	f7fc feb1 	bl	8000bc8 <__aeabi_dcmpeq>
 8003e66:	b108      	cbz	r0, 8003e6c <__cvt+0xa4>
 8003e68:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e6c:	2230      	movs	r2, #48	; 0x30
 8003e6e:	9b03      	ldr	r3, [sp, #12]
 8003e70:	454b      	cmp	r3, r9
 8003e72:	d307      	bcc.n	8003e84 <__cvt+0xbc>
 8003e74:	9b03      	ldr	r3, [sp, #12]
 8003e76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e78:	1bdb      	subs	r3, r3, r7
 8003e7a:	4638      	mov	r0, r7
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	b004      	add	sp, #16
 8003e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e84:	1c59      	adds	r1, r3, #1
 8003e86:	9103      	str	r1, [sp, #12]
 8003e88:	701a      	strb	r2, [r3, #0]
 8003e8a:	e7f0      	b.n	8003e6e <__cvt+0xa6>

08003e8c <__exponent>:
 8003e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2900      	cmp	r1, #0
 8003e92:	bfb8      	it	lt
 8003e94:	4249      	neglt	r1, r1
 8003e96:	f803 2b02 	strb.w	r2, [r3], #2
 8003e9a:	bfb4      	ite	lt
 8003e9c:	222d      	movlt	r2, #45	; 0x2d
 8003e9e:	222b      	movge	r2, #43	; 0x2b
 8003ea0:	2909      	cmp	r1, #9
 8003ea2:	7042      	strb	r2, [r0, #1]
 8003ea4:	dd2a      	ble.n	8003efc <__exponent+0x70>
 8003ea6:	f10d 0407 	add.w	r4, sp, #7
 8003eaa:	46a4      	mov	ip, r4
 8003eac:	270a      	movs	r7, #10
 8003eae:	46a6      	mov	lr, r4
 8003eb0:	460a      	mov	r2, r1
 8003eb2:	fb91 f6f7 	sdiv	r6, r1, r7
 8003eb6:	fb07 1516 	mls	r5, r7, r6, r1
 8003eba:	3530      	adds	r5, #48	; 0x30
 8003ebc:	2a63      	cmp	r2, #99	; 0x63
 8003ebe:	f104 34ff 	add.w	r4, r4, #4294967295
 8003ec2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003ec6:	4631      	mov	r1, r6
 8003ec8:	dcf1      	bgt.n	8003eae <__exponent+0x22>
 8003eca:	3130      	adds	r1, #48	; 0x30
 8003ecc:	f1ae 0502 	sub.w	r5, lr, #2
 8003ed0:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003ed4:	1c44      	adds	r4, r0, #1
 8003ed6:	4629      	mov	r1, r5
 8003ed8:	4561      	cmp	r1, ip
 8003eda:	d30a      	bcc.n	8003ef2 <__exponent+0x66>
 8003edc:	f10d 0209 	add.w	r2, sp, #9
 8003ee0:	eba2 020e 	sub.w	r2, r2, lr
 8003ee4:	4565      	cmp	r5, ip
 8003ee6:	bf88      	it	hi
 8003ee8:	2200      	movhi	r2, #0
 8003eea:	4413      	add	r3, r2
 8003eec:	1a18      	subs	r0, r3, r0
 8003eee:	b003      	add	sp, #12
 8003ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ef6:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003efa:	e7ed      	b.n	8003ed8 <__exponent+0x4c>
 8003efc:	2330      	movs	r3, #48	; 0x30
 8003efe:	3130      	adds	r1, #48	; 0x30
 8003f00:	7083      	strb	r3, [r0, #2]
 8003f02:	70c1      	strb	r1, [r0, #3]
 8003f04:	1d03      	adds	r3, r0, #4
 8003f06:	e7f1      	b.n	8003eec <__exponent+0x60>

08003f08 <_printf_float>:
 8003f08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f0c:	ed2d 8b02 	vpush	{d8}
 8003f10:	b08d      	sub	sp, #52	; 0x34
 8003f12:	460c      	mov	r4, r1
 8003f14:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003f18:	4616      	mov	r6, r2
 8003f1a:	461f      	mov	r7, r3
 8003f1c:	4605      	mov	r5, r0
 8003f1e:	f001 fd3d 	bl	800599c <_localeconv_r>
 8003f22:	f8d0 a000 	ldr.w	sl, [r0]
 8003f26:	4650      	mov	r0, sl
 8003f28:	f7fc f9d2 	bl	80002d0 <strlen>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8003f30:	6823      	ldr	r3, [r4, #0]
 8003f32:	9305      	str	r3, [sp, #20]
 8003f34:	f8d8 3000 	ldr.w	r3, [r8]
 8003f38:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003f3c:	3307      	adds	r3, #7
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	f103 0208 	add.w	r2, r3, #8
 8003f46:	f8c8 2000 	str.w	r2, [r8]
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f52:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003f56:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f5a:	9307      	str	r3, [sp, #28]
 8003f5c:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f60:	ee08 0a10 	vmov	s16, r0
 8003f64:	4b9f      	ldr	r3, [pc, #636]	; (80041e4 <_printf_float+0x2dc>)
 8003f66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6e:	f7fc fe5d 	bl	8000c2c <__aeabi_dcmpun>
 8003f72:	bb88      	cbnz	r0, 8003fd8 <_printf_float+0xd0>
 8003f74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f78:	4b9a      	ldr	r3, [pc, #616]	; (80041e4 <_printf_float+0x2dc>)
 8003f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f7e:	f7fc fe37 	bl	8000bf0 <__aeabi_dcmple>
 8003f82:	bb48      	cbnz	r0, 8003fd8 <_printf_float+0xd0>
 8003f84:	2200      	movs	r2, #0
 8003f86:	2300      	movs	r3, #0
 8003f88:	4640      	mov	r0, r8
 8003f8a:	4649      	mov	r1, r9
 8003f8c:	f7fc fe26 	bl	8000bdc <__aeabi_dcmplt>
 8003f90:	b110      	cbz	r0, 8003f98 <_printf_float+0x90>
 8003f92:	232d      	movs	r3, #45	; 0x2d
 8003f94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f98:	4b93      	ldr	r3, [pc, #588]	; (80041e8 <_printf_float+0x2e0>)
 8003f9a:	4894      	ldr	r0, [pc, #592]	; (80041ec <_printf_float+0x2e4>)
 8003f9c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003fa0:	bf94      	ite	ls
 8003fa2:	4698      	movls	r8, r3
 8003fa4:	4680      	movhi	r8, r0
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	6123      	str	r3, [r4, #16]
 8003faa:	9b05      	ldr	r3, [sp, #20]
 8003fac:	f023 0204 	bic.w	r2, r3, #4
 8003fb0:	6022      	str	r2, [r4, #0]
 8003fb2:	f04f 0900 	mov.w	r9, #0
 8003fb6:	9700      	str	r7, [sp, #0]
 8003fb8:	4633      	mov	r3, r6
 8003fba:	aa0b      	add	r2, sp, #44	; 0x2c
 8003fbc:	4621      	mov	r1, r4
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	f000 f9d8 	bl	8004374 <_printf_common>
 8003fc4:	3001      	adds	r0, #1
 8003fc6:	f040 8090 	bne.w	80040ea <_printf_float+0x1e2>
 8003fca:	f04f 30ff 	mov.w	r0, #4294967295
 8003fce:	b00d      	add	sp, #52	; 0x34
 8003fd0:	ecbd 8b02 	vpop	{d8}
 8003fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fd8:	4642      	mov	r2, r8
 8003fda:	464b      	mov	r3, r9
 8003fdc:	4640      	mov	r0, r8
 8003fde:	4649      	mov	r1, r9
 8003fe0:	f7fc fe24 	bl	8000c2c <__aeabi_dcmpun>
 8003fe4:	b140      	cbz	r0, 8003ff8 <_printf_float+0xf0>
 8003fe6:	464b      	mov	r3, r9
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	bfbc      	itt	lt
 8003fec:	232d      	movlt	r3, #45	; 0x2d
 8003fee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003ff2:	487f      	ldr	r0, [pc, #508]	; (80041f0 <_printf_float+0x2e8>)
 8003ff4:	4b7f      	ldr	r3, [pc, #508]	; (80041f4 <_printf_float+0x2ec>)
 8003ff6:	e7d1      	b.n	8003f9c <_printf_float+0x94>
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003ffe:	9206      	str	r2, [sp, #24]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	d13f      	bne.n	8004084 <_printf_float+0x17c>
 8004004:	2306      	movs	r3, #6
 8004006:	6063      	str	r3, [r4, #4]
 8004008:	9b05      	ldr	r3, [sp, #20]
 800400a:	6861      	ldr	r1, [r4, #4]
 800400c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004010:	2300      	movs	r3, #0
 8004012:	9303      	str	r3, [sp, #12]
 8004014:	ab0a      	add	r3, sp, #40	; 0x28
 8004016:	e9cd b301 	strd	fp, r3, [sp, #4]
 800401a:	ab09      	add	r3, sp, #36	; 0x24
 800401c:	ec49 8b10 	vmov	d0, r8, r9
 8004020:	9300      	str	r3, [sp, #0]
 8004022:	6022      	str	r2, [r4, #0]
 8004024:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004028:	4628      	mov	r0, r5
 800402a:	f7ff fecd 	bl	8003dc8 <__cvt>
 800402e:	9b06      	ldr	r3, [sp, #24]
 8004030:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004032:	2b47      	cmp	r3, #71	; 0x47
 8004034:	4680      	mov	r8, r0
 8004036:	d108      	bne.n	800404a <_printf_float+0x142>
 8004038:	1cc8      	adds	r0, r1, #3
 800403a:	db02      	blt.n	8004042 <_printf_float+0x13a>
 800403c:	6863      	ldr	r3, [r4, #4]
 800403e:	4299      	cmp	r1, r3
 8004040:	dd41      	ble.n	80040c6 <_printf_float+0x1be>
 8004042:	f1ab 0b02 	sub.w	fp, fp, #2
 8004046:	fa5f fb8b 	uxtb.w	fp, fp
 800404a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800404e:	d820      	bhi.n	8004092 <_printf_float+0x18a>
 8004050:	3901      	subs	r1, #1
 8004052:	465a      	mov	r2, fp
 8004054:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004058:	9109      	str	r1, [sp, #36]	; 0x24
 800405a:	f7ff ff17 	bl	8003e8c <__exponent>
 800405e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004060:	1813      	adds	r3, r2, r0
 8004062:	2a01      	cmp	r2, #1
 8004064:	4681      	mov	r9, r0
 8004066:	6123      	str	r3, [r4, #16]
 8004068:	dc02      	bgt.n	8004070 <_printf_float+0x168>
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	07d2      	lsls	r2, r2, #31
 800406e:	d501      	bpl.n	8004074 <_printf_float+0x16c>
 8004070:	3301      	adds	r3, #1
 8004072:	6123      	str	r3, [r4, #16]
 8004074:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004078:	2b00      	cmp	r3, #0
 800407a:	d09c      	beq.n	8003fb6 <_printf_float+0xae>
 800407c:	232d      	movs	r3, #45	; 0x2d
 800407e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004082:	e798      	b.n	8003fb6 <_printf_float+0xae>
 8004084:	9a06      	ldr	r2, [sp, #24]
 8004086:	2a47      	cmp	r2, #71	; 0x47
 8004088:	d1be      	bne.n	8004008 <_printf_float+0x100>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1bc      	bne.n	8004008 <_printf_float+0x100>
 800408e:	2301      	movs	r3, #1
 8004090:	e7b9      	b.n	8004006 <_printf_float+0xfe>
 8004092:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004096:	d118      	bne.n	80040ca <_printf_float+0x1c2>
 8004098:	2900      	cmp	r1, #0
 800409a:	6863      	ldr	r3, [r4, #4]
 800409c:	dd0b      	ble.n	80040b6 <_printf_float+0x1ae>
 800409e:	6121      	str	r1, [r4, #16]
 80040a0:	b913      	cbnz	r3, 80040a8 <_printf_float+0x1a0>
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	07d0      	lsls	r0, r2, #31
 80040a6:	d502      	bpl.n	80040ae <_printf_float+0x1a6>
 80040a8:	3301      	adds	r3, #1
 80040aa:	440b      	add	r3, r1
 80040ac:	6123      	str	r3, [r4, #16]
 80040ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80040b0:	f04f 0900 	mov.w	r9, #0
 80040b4:	e7de      	b.n	8004074 <_printf_float+0x16c>
 80040b6:	b913      	cbnz	r3, 80040be <_printf_float+0x1b6>
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	07d2      	lsls	r2, r2, #31
 80040bc:	d501      	bpl.n	80040c2 <_printf_float+0x1ba>
 80040be:	3302      	adds	r3, #2
 80040c0:	e7f4      	b.n	80040ac <_printf_float+0x1a4>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e7f2      	b.n	80040ac <_printf_float+0x1a4>
 80040c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80040ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80040cc:	4299      	cmp	r1, r3
 80040ce:	db05      	blt.n	80040dc <_printf_float+0x1d4>
 80040d0:	6823      	ldr	r3, [r4, #0]
 80040d2:	6121      	str	r1, [r4, #16]
 80040d4:	07d8      	lsls	r0, r3, #31
 80040d6:	d5ea      	bpl.n	80040ae <_printf_float+0x1a6>
 80040d8:	1c4b      	adds	r3, r1, #1
 80040da:	e7e7      	b.n	80040ac <_printf_float+0x1a4>
 80040dc:	2900      	cmp	r1, #0
 80040de:	bfd4      	ite	le
 80040e0:	f1c1 0202 	rsble	r2, r1, #2
 80040e4:	2201      	movgt	r2, #1
 80040e6:	4413      	add	r3, r2
 80040e8:	e7e0      	b.n	80040ac <_printf_float+0x1a4>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	055a      	lsls	r2, r3, #21
 80040ee:	d407      	bmi.n	8004100 <_printf_float+0x1f8>
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	4642      	mov	r2, r8
 80040f4:	4631      	mov	r1, r6
 80040f6:	4628      	mov	r0, r5
 80040f8:	47b8      	blx	r7
 80040fa:	3001      	adds	r0, #1
 80040fc:	d12c      	bne.n	8004158 <_printf_float+0x250>
 80040fe:	e764      	b.n	8003fca <_printf_float+0xc2>
 8004100:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004104:	f240 80e0 	bls.w	80042c8 <_printf_float+0x3c0>
 8004108:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800410c:	2200      	movs	r2, #0
 800410e:	2300      	movs	r3, #0
 8004110:	f7fc fd5a 	bl	8000bc8 <__aeabi_dcmpeq>
 8004114:	2800      	cmp	r0, #0
 8004116:	d034      	beq.n	8004182 <_printf_float+0x27a>
 8004118:	4a37      	ldr	r2, [pc, #220]	; (80041f8 <_printf_float+0x2f0>)
 800411a:	2301      	movs	r3, #1
 800411c:	4631      	mov	r1, r6
 800411e:	4628      	mov	r0, r5
 8004120:	47b8      	blx	r7
 8004122:	3001      	adds	r0, #1
 8004124:	f43f af51 	beq.w	8003fca <_printf_float+0xc2>
 8004128:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800412c:	429a      	cmp	r2, r3
 800412e:	db02      	blt.n	8004136 <_printf_float+0x22e>
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	07d8      	lsls	r0, r3, #31
 8004134:	d510      	bpl.n	8004158 <_printf_float+0x250>
 8004136:	ee18 3a10 	vmov	r3, s16
 800413a:	4652      	mov	r2, sl
 800413c:	4631      	mov	r1, r6
 800413e:	4628      	mov	r0, r5
 8004140:	47b8      	blx	r7
 8004142:	3001      	adds	r0, #1
 8004144:	f43f af41 	beq.w	8003fca <_printf_float+0xc2>
 8004148:	f04f 0800 	mov.w	r8, #0
 800414c:	f104 091a 	add.w	r9, r4, #26
 8004150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004152:	3b01      	subs	r3, #1
 8004154:	4543      	cmp	r3, r8
 8004156:	dc09      	bgt.n	800416c <_printf_float+0x264>
 8004158:	6823      	ldr	r3, [r4, #0]
 800415a:	079b      	lsls	r3, r3, #30
 800415c:	f100 8105 	bmi.w	800436a <_printf_float+0x462>
 8004160:	68e0      	ldr	r0, [r4, #12]
 8004162:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004164:	4298      	cmp	r0, r3
 8004166:	bfb8      	it	lt
 8004168:	4618      	movlt	r0, r3
 800416a:	e730      	b.n	8003fce <_printf_float+0xc6>
 800416c:	2301      	movs	r3, #1
 800416e:	464a      	mov	r2, r9
 8004170:	4631      	mov	r1, r6
 8004172:	4628      	mov	r0, r5
 8004174:	47b8      	blx	r7
 8004176:	3001      	adds	r0, #1
 8004178:	f43f af27 	beq.w	8003fca <_printf_float+0xc2>
 800417c:	f108 0801 	add.w	r8, r8, #1
 8004180:	e7e6      	b.n	8004150 <_printf_float+0x248>
 8004182:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	dc39      	bgt.n	80041fc <_printf_float+0x2f4>
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <_printf_float+0x2f0>)
 800418a:	2301      	movs	r3, #1
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f af19 	beq.w	8003fca <_printf_float+0xc2>
 8004198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800419c:	4313      	orrs	r3, r2
 800419e:	d102      	bne.n	80041a6 <_printf_float+0x29e>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	07d9      	lsls	r1, r3, #31
 80041a4:	d5d8      	bpl.n	8004158 <_printf_float+0x250>
 80041a6:	ee18 3a10 	vmov	r3, s16
 80041aa:	4652      	mov	r2, sl
 80041ac:	4631      	mov	r1, r6
 80041ae:	4628      	mov	r0, r5
 80041b0:	47b8      	blx	r7
 80041b2:	3001      	adds	r0, #1
 80041b4:	f43f af09 	beq.w	8003fca <_printf_float+0xc2>
 80041b8:	f04f 0900 	mov.w	r9, #0
 80041bc:	f104 0a1a 	add.w	sl, r4, #26
 80041c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c2:	425b      	negs	r3, r3
 80041c4:	454b      	cmp	r3, r9
 80041c6:	dc01      	bgt.n	80041cc <_printf_float+0x2c4>
 80041c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041ca:	e792      	b.n	80040f2 <_printf_float+0x1ea>
 80041cc:	2301      	movs	r3, #1
 80041ce:	4652      	mov	r2, sl
 80041d0:	4631      	mov	r1, r6
 80041d2:	4628      	mov	r0, r5
 80041d4:	47b8      	blx	r7
 80041d6:	3001      	adds	r0, #1
 80041d8:	f43f aef7 	beq.w	8003fca <_printf_float+0xc2>
 80041dc:	f109 0901 	add.w	r9, r9, #1
 80041e0:	e7ee      	b.n	80041c0 <_printf_float+0x2b8>
 80041e2:	bf00      	nop
 80041e4:	7fefffff 	.word	0x7fefffff
 80041e8:	080097f8 	.word	0x080097f8
 80041ec:	080097fc 	.word	0x080097fc
 80041f0:	08009804 	.word	0x08009804
 80041f4:	08009800 	.word	0x08009800
 80041f8:	08009808 	.word	0x08009808
 80041fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004200:	429a      	cmp	r2, r3
 8004202:	bfa8      	it	ge
 8004204:	461a      	movge	r2, r3
 8004206:	2a00      	cmp	r2, #0
 8004208:	4691      	mov	r9, r2
 800420a:	dc37      	bgt.n	800427c <_printf_float+0x374>
 800420c:	f04f 0b00 	mov.w	fp, #0
 8004210:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004214:	f104 021a 	add.w	r2, r4, #26
 8004218:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800421a:	9305      	str	r3, [sp, #20]
 800421c:	eba3 0309 	sub.w	r3, r3, r9
 8004220:	455b      	cmp	r3, fp
 8004222:	dc33      	bgt.n	800428c <_printf_float+0x384>
 8004224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004228:	429a      	cmp	r2, r3
 800422a:	db3b      	blt.n	80042a4 <_printf_float+0x39c>
 800422c:	6823      	ldr	r3, [r4, #0]
 800422e:	07da      	lsls	r2, r3, #31
 8004230:	d438      	bmi.n	80042a4 <_printf_float+0x39c>
 8004232:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004234:	9a05      	ldr	r2, [sp, #20]
 8004236:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004238:	1a9a      	subs	r2, r3, r2
 800423a:	eba3 0901 	sub.w	r9, r3, r1
 800423e:	4591      	cmp	r9, r2
 8004240:	bfa8      	it	ge
 8004242:	4691      	movge	r9, r2
 8004244:	f1b9 0f00 	cmp.w	r9, #0
 8004248:	dc35      	bgt.n	80042b6 <_printf_float+0x3ae>
 800424a:	f04f 0800 	mov.w	r8, #0
 800424e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004252:	f104 0a1a 	add.w	sl, r4, #26
 8004256:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	eba3 0309 	sub.w	r3, r3, r9
 8004260:	4543      	cmp	r3, r8
 8004262:	f77f af79 	ble.w	8004158 <_printf_float+0x250>
 8004266:	2301      	movs	r3, #1
 8004268:	4652      	mov	r2, sl
 800426a:	4631      	mov	r1, r6
 800426c:	4628      	mov	r0, r5
 800426e:	47b8      	blx	r7
 8004270:	3001      	adds	r0, #1
 8004272:	f43f aeaa 	beq.w	8003fca <_printf_float+0xc2>
 8004276:	f108 0801 	add.w	r8, r8, #1
 800427a:	e7ec      	b.n	8004256 <_printf_float+0x34e>
 800427c:	4613      	mov	r3, r2
 800427e:	4631      	mov	r1, r6
 8004280:	4642      	mov	r2, r8
 8004282:	4628      	mov	r0, r5
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	d1c0      	bne.n	800420c <_printf_float+0x304>
 800428a:	e69e      	b.n	8003fca <_printf_float+0xc2>
 800428c:	2301      	movs	r3, #1
 800428e:	4631      	mov	r1, r6
 8004290:	4628      	mov	r0, r5
 8004292:	9205      	str	r2, [sp, #20]
 8004294:	47b8      	blx	r7
 8004296:	3001      	adds	r0, #1
 8004298:	f43f ae97 	beq.w	8003fca <_printf_float+0xc2>
 800429c:	9a05      	ldr	r2, [sp, #20]
 800429e:	f10b 0b01 	add.w	fp, fp, #1
 80042a2:	e7b9      	b.n	8004218 <_printf_float+0x310>
 80042a4:	ee18 3a10 	vmov	r3, s16
 80042a8:	4652      	mov	r2, sl
 80042aa:	4631      	mov	r1, r6
 80042ac:	4628      	mov	r0, r5
 80042ae:	47b8      	blx	r7
 80042b0:	3001      	adds	r0, #1
 80042b2:	d1be      	bne.n	8004232 <_printf_float+0x32a>
 80042b4:	e689      	b.n	8003fca <_printf_float+0xc2>
 80042b6:	9a05      	ldr	r2, [sp, #20]
 80042b8:	464b      	mov	r3, r9
 80042ba:	4442      	add	r2, r8
 80042bc:	4631      	mov	r1, r6
 80042be:	4628      	mov	r0, r5
 80042c0:	47b8      	blx	r7
 80042c2:	3001      	adds	r0, #1
 80042c4:	d1c1      	bne.n	800424a <_printf_float+0x342>
 80042c6:	e680      	b.n	8003fca <_printf_float+0xc2>
 80042c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80042ca:	2a01      	cmp	r2, #1
 80042cc:	dc01      	bgt.n	80042d2 <_printf_float+0x3ca>
 80042ce:	07db      	lsls	r3, r3, #31
 80042d0:	d538      	bpl.n	8004344 <_printf_float+0x43c>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4642      	mov	r2, r8
 80042d6:	4631      	mov	r1, r6
 80042d8:	4628      	mov	r0, r5
 80042da:	47b8      	blx	r7
 80042dc:	3001      	adds	r0, #1
 80042de:	f43f ae74 	beq.w	8003fca <_printf_float+0xc2>
 80042e2:	ee18 3a10 	vmov	r3, s16
 80042e6:	4652      	mov	r2, sl
 80042e8:	4631      	mov	r1, r6
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b8      	blx	r7
 80042ee:	3001      	adds	r0, #1
 80042f0:	f43f ae6b 	beq.w	8003fca <_printf_float+0xc2>
 80042f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042f8:	2200      	movs	r2, #0
 80042fa:	2300      	movs	r3, #0
 80042fc:	f7fc fc64 	bl	8000bc8 <__aeabi_dcmpeq>
 8004300:	b9d8      	cbnz	r0, 800433a <_printf_float+0x432>
 8004302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004304:	f108 0201 	add.w	r2, r8, #1
 8004308:	3b01      	subs	r3, #1
 800430a:	4631      	mov	r1, r6
 800430c:	4628      	mov	r0, r5
 800430e:	47b8      	blx	r7
 8004310:	3001      	adds	r0, #1
 8004312:	d10e      	bne.n	8004332 <_printf_float+0x42a>
 8004314:	e659      	b.n	8003fca <_printf_float+0xc2>
 8004316:	2301      	movs	r3, #1
 8004318:	4652      	mov	r2, sl
 800431a:	4631      	mov	r1, r6
 800431c:	4628      	mov	r0, r5
 800431e:	47b8      	blx	r7
 8004320:	3001      	adds	r0, #1
 8004322:	f43f ae52 	beq.w	8003fca <_printf_float+0xc2>
 8004326:	f108 0801 	add.w	r8, r8, #1
 800432a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800432c:	3b01      	subs	r3, #1
 800432e:	4543      	cmp	r3, r8
 8004330:	dcf1      	bgt.n	8004316 <_printf_float+0x40e>
 8004332:	464b      	mov	r3, r9
 8004334:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004338:	e6dc      	b.n	80040f4 <_printf_float+0x1ec>
 800433a:	f04f 0800 	mov.w	r8, #0
 800433e:	f104 0a1a 	add.w	sl, r4, #26
 8004342:	e7f2      	b.n	800432a <_printf_float+0x422>
 8004344:	2301      	movs	r3, #1
 8004346:	4642      	mov	r2, r8
 8004348:	e7df      	b.n	800430a <_printf_float+0x402>
 800434a:	2301      	movs	r3, #1
 800434c:	464a      	mov	r2, r9
 800434e:	4631      	mov	r1, r6
 8004350:	4628      	mov	r0, r5
 8004352:	47b8      	blx	r7
 8004354:	3001      	adds	r0, #1
 8004356:	f43f ae38 	beq.w	8003fca <_printf_float+0xc2>
 800435a:	f108 0801 	add.w	r8, r8, #1
 800435e:	68e3      	ldr	r3, [r4, #12]
 8004360:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004362:	1a5b      	subs	r3, r3, r1
 8004364:	4543      	cmp	r3, r8
 8004366:	dcf0      	bgt.n	800434a <_printf_float+0x442>
 8004368:	e6fa      	b.n	8004160 <_printf_float+0x258>
 800436a:	f04f 0800 	mov.w	r8, #0
 800436e:	f104 0919 	add.w	r9, r4, #25
 8004372:	e7f4      	b.n	800435e <_printf_float+0x456>

08004374 <_printf_common>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4616      	mov	r6, r2
 800437a:	4699      	mov	r9, r3
 800437c:	688a      	ldr	r2, [r1, #8]
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004384:	4293      	cmp	r3, r2
 8004386:	bfb8      	it	lt
 8004388:	4613      	movlt	r3, r2
 800438a:	6033      	str	r3, [r6, #0]
 800438c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004390:	4607      	mov	r7, r0
 8004392:	460c      	mov	r4, r1
 8004394:	b10a      	cbz	r2, 800439a <_printf_common+0x26>
 8004396:	3301      	adds	r3, #1
 8004398:	6033      	str	r3, [r6, #0]
 800439a:	6823      	ldr	r3, [r4, #0]
 800439c:	0699      	lsls	r1, r3, #26
 800439e:	bf42      	ittt	mi
 80043a0:	6833      	ldrmi	r3, [r6, #0]
 80043a2:	3302      	addmi	r3, #2
 80043a4:	6033      	strmi	r3, [r6, #0]
 80043a6:	6825      	ldr	r5, [r4, #0]
 80043a8:	f015 0506 	ands.w	r5, r5, #6
 80043ac:	d106      	bne.n	80043bc <_printf_common+0x48>
 80043ae:	f104 0a19 	add.w	sl, r4, #25
 80043b2:	68e3      	ldr	r3, [r4, #12]
 80043b4:	6832      	ldr	r2, [r6, #0]
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	42ab      	cmp	r3, r5
 80043ba:	dc26      	bgt.n	800440a <_printf_common+0x96>
 80043bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043c0:	1e13      	subs	r3, r2, #0
 80043c2:	6822      	ldr	r2, [r4, #0]
 80043c4:	bf18      	it	ne
 80043c6:	2301      	movne	r3, #1
 80043c8:	0692      	lsls	r2, r2, #26
 80043ca:	d42b      	bmi.n	8004424 <_printf_common+0xb0>
 80043cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043d0:	4649      	mov	r1, r9
 80043d2:	4638      	mov	r0, r7
 80043d4:	47c0      	blx	r8
 80043d6:	3001      	adds	r0, #1
 80043d8:	d01e      	beq.n	8004418 <_printf_common+0xa4>
 80043da:	6823      	ldr	r3, [r4, #0]
 80043dc:	68e5      	ldr	r5, [r4, #12]
 80043de:	6832      	ldr	r2, [r6, #0]
 80043e0:	f003 0306 	and.w	r3, r3, #6
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	bf08      	it	eq
 80043e8:	1aad      	subeq	r5, r5, r2
 80043ea:	68a3      	ldr	r3, [r4, #8]
 80043ec:	6922      	ldr	r2, [r4, #16]
 80043ee:	bf0c      	ite	eq
 80043f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f4:	2500      	movne	r5, #0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bfc4      	itt	gt
 80043fa:	1a9b      	subgt	r3, r3, r2
 80043fc:	18ed      	addgt	r5, r5, r3
 80043fe:	2600      	movs	r6, #0
 8004400:	341a      	adds	r4, #26
 8004402:	42b5      	cmp	r5, r6
 8004404:	d11a      	bne.n	800443c <_printf_common+0xc8>
 8004406:	2000      	movs	r0, #0
 8004408:	e008      	b.n	800441c <_printf_common+0xa8>
 800440a:	2301      	movs	r3, #1
 800440c:	4652      	mov	r2, sl
 800440e:	4649      	mov	r1, r9
 8004410:	4638      	mov	r0, r7
 8004412:	47c0      	blx	r8
 8004414:	3001      	adds	r0, #1
 8004416:	d103      	bne.n	8004420 <_printf_common+0xac>
 8004418:	f04f 30ff 	mov.w	r0, #4294967295
 800441c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004420:	3501      	adds	r5, #1
 8004422:	e7c6      	b.n	80043b2 <_printf_common+0x3e>
 8004424:	18e1      	adds	r1, r4, r3
 8004426:	1c5a      	adds	r2, r3, #1
 8004428:	2030      	movs	r0, #48	; 0x30
 800442a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800442e:	4422      	add	r2, r4
 8004430:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004434:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004438:	3302      	adds	r3, #2
 800443a:	e7c7      	b.n	80043cc <_printf_common+0x58>
 800443c:	2301      	movs	r3, #1
 800443e:	4622      	mov	r2, r4
 8004440:	4649      	mov	r1, r9
 8004442:	4638      	mov	r0, r7
 8004444:	47c0      	blx	r8
 8004446:	3001      	adds	r0, #1
 8004448:	d0e6      	beq.n	8004418 <_printf_common+0xa4>
 800444a:	3601      	adds	r6, #1
 800444c:	e7d9      	b.n	8004402 <_printf_common+0x8e>
	...

08004450 <_printf_i>:
 8004450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004454:	7e0f      	ldrb	r7, [r1, #24]
 8004456:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004458:	2f78      	cmp	r7, #120	; 0x78
 800445a:	4691      	mov	r9, r2
 800445c:	4680      	mov	r8, r0
 800445e:	460c      	mov	r4, r1
 8004460:	469a      	mov	sl, r3
 8004462:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004466:	d807      	bhi.n	8004478 <_printf_i+0x28>
 8004468:	2f62      	cmp	r7, #98	; 0x62
 800446a:	d80a      	bhi.n	8004482 <_printf_i+0x32>
 800446c:	2f00      	cmp	r7, #0
 800446e:	f000 80d8 	beq.w	8004622 <_printf_i+0x1d2>
 8004472:	2f58      	cmp	r7, #88	; 0x58
 8004474:	f000 80a3 	beq.w	80045be <_printf_i+0x16e>
 8004478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800447c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004480:	e03a      	b.n	80044f8 <_printf_i+0xa8>
 8004482:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004486:	2b15      	cmp	r3, #21
 8004488:	d8f6      	bhi.n	8004478 <_printf_i+0x28>
 800448a:	a101      	add	r1, pc, #4	; (adr r1, 8004490 <_printf_i+0x40>)
 800448c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004490:	080044e9 	.word	0x080044e9
 8004494:	080044fd 	.word	0x080044fd
 8004498:	08004479 	.word	0x08004479
 800449c:	08004479 	.word	0x08004479
 80044a0:	08004479 	.word	0x08004479
 80044a4:	08004479 	.word	0x08004479
 80044a8:	080044fd 	.word	0x080044fd
 80044ac:	08004479 	.word	0x08004479
 80044b0:	08004479 	.word	0x08004479
 80044b4:	08004479 	.word	0x08004479
 80044b8:	08004479 	.word	0x08004479
 80044bc:	08004609 	.word	0x08004609
 80044c0:	0800452d 	.word	0x0800452d
 80044c4:	080045eb 	.word	0x080045eb
 80044c8:	08004479 	.word	0x08004479
 80044cc:	08004479 	.word	0x08004479
 80044d0:	0800462b 	.word	0x0800462b
 80044d4:	08004479 	.word	0x08004479
 80044d8:	0800452d 	.word	0x0800452d
 80044dc:	08004479 	.word	0x08004479
 80044e0:	08004479 	.word	0x08004479
 80044e4:	080045f3 	.word	0x080045f3
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	1d1a      	adds	r2, r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	602a      	str	r2, [r5, #0]
 80044f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0a3      	b.n	8004644 <_printf_i+0x1f4>
 80044fc:	6820      	ldr	r0, [r4, #0]
 80044fe:	6829      	ldr	r1, [r5, #0]
 8004500:	0606      	lsls	r6, r0, #24
 8004502:	f101 0304 	add.w	r3, r1, #4
 8004506:	d50a      	bpl.n	800451e <_printf_i+0xce>
 8004508:	680e      	ldr	r6, [r1, #0]
 800450a:	602b      	str	r3, [r5, #0]
 800450c:	2e00      	cmp	r6, #0
 800450e:	da03      	bge.n	8004518 <_printf_i+0xc8>
 8004510:	232d      	movs	r3, #45	; 0x2d
 8004512:	4276      	negs	r6, r6
 8004514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004518:	485e      	ldr	r0, [pc, #376]	; (8004694 <_printf_i+0x244>)
 800451a:	230a      	movs	r3, #10
 800451c:	e019      	b.n	8004552 <_printf_i+0x102>
 800451e:	680e      	ldr	r6, [r1, #0]
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004526:	bf18      	it	ne
 8004528:	b236      	sxthne	r6, r6
 800452a:	e7ef      	b.n	800450c <_printf_i+0xbc>
 800452c:	682b      	ldr	r3, [r5, #0]
 800452e:	6820      	ldr	r0, [r4, #0]
 8004530:	1d19      	adds	r1, r3, #4
 8004532:	6029      	str	r1, [r5, #0]
 8004534:	0601      	lsls	r1, r0, #24
 8004536:	d501      	bpl.n	800453c <_printf_i+0xec>
 8004538:	681e      	ldr	r6, [r3, #0]
 800453a:	e002      	b.n	8004542 <_printf_i+0xf2>
 800453c:	0646      	lsls	r6, r0, #25
 800453e:	d5fb      	bpl.n	8004538 <_printf_i+0xe8>
 8004540:	881e      	ldrh	r6, [r3, #0]
 8004542:	4854      	ldr	r0, [pc, #336]	; (8004694 <_printf_i+0x244>)
 8004544:	2f6f      	cmp	r7, #111	; 0x6f
 8004546:	bf0c      	ite	eq
 8004548:	2308      	moveq	r3, #8
 800454a:	230a      	movne	r3, #10
 800454c:	2100      	movs	r1, #0
 800454e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004552:	6865      	ldr	r5, [r4, #4]
 8004554:	60a5      	str	r5, [r4, #8]
 8004556:	2d00      	cmp	r5, #0
 8004558:	bfa2      	ittt	ge
 800455a:	6821      	ldrge	r1, [r4, #0]
 800455c:	f021 0104 	bicge.w	r1, r1, #4
 8004560:	6021      	strge	r1, [r4, #0]
 8004562:	b90e      	cbnz	r6, 8004568 <_printf_i+0x118>
 8004564:	2d00      	cmp	r5, #0
 8004566:	d04d      	beq.n	8004604 <_printf_i+0x1b4>
 8004568:	4615      	mov	r5, r2
 800456a:	fbb6 f1f3 	udiv	r1, r6, r3
 800456e:	fb03 6711 	mls	r7, r3, r1, r6
 8004572:	5dc7      	ldrb	r7, [r0, r7]
 8004574:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004578:	4637      	mov	r7, r6
 800457a:	42bb      	cmp	r3, r7
 800457c:	460e      	mov	r6, r1
 800457e:	d9f4      	bls.n	800456a <_printf_i+0x11a>
 8004580:	2b08      	cmp	r3, #8
 8004582:	d10b      	bne.n	800459c <_printf_i+0x14c>
 8004584:	6823      	ldr	r3, [r4, #0]
 8004586:	07de      	lsls	r6, r3, #31
 8004588:	d508      	bpl.n	800459c <_printf_i+0x14c>
 800458a:	6923      	ldr	r3, [r4, #16]
 800458c:	6861      	ldr	r1, [r4, #4]
 800458e:	4299      	cmp	r1, r3
 8004590:	bfde      	ittt	le
 8004592:	2330      	movle	r3, #48	; 0x30
 8004594:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004598:	f105 35ff 	addle.w	r5, r5, #4294967295
 800459c:	1b52      	subs	r2, r2, r5
 800459e:	6122      	str	r2, [r4, #16]
 80045a0:	f8cd a000 	str.w	sl, [sp]
 80045a4:	464b      	mov	r3, r9
 80045a6:	aa03      	add	r2, sp, #12
 80045a8:	4621      	mov	r1, r4
 80045aa:	4640      	mov	r0, r8
 80045ac:	f7ff fee2 	bl	8004374 <_printf_common>
 80045b0:	3001      	adds	r0, #1
 80045b2:	d14c      	bne.n	800464e <_printf_i+0x1fe>
 80045b4:	f04f 30ff 	mov.w	r0, #4294967295
 80045b8:	b004      	add	sp, #16
 80045ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045be:	4835      	ldr	r0, [pc, #212]	; (8004694 <_printf_i+0x244>)
 80045c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80045c4:	6829      	ldr	r1, [r5, #0]
 80045c6:	6823      	ldr	r3, [r4, #0]
 80045c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80045cc:	6029      	str	r1, [r5, #0]
 80045ce:	061d      	lsls	r5, r3, #24
 80045d0:	d514      	bpl.n	80045fc <_printf_i+0x1ac>
 80045d2:	07df      	lsls	r7, r3, #31
 80045d4:	bf44      	itt	mi
 80045d6:	f043 0320 	orrmi.w	r3, r3, #32
 80045da:	6023      	strmi	r3, [r4, #0]
 80045dc:	b91e      	cbnz	r6, 80045e6 <_printf_i+0x196>
 80045de:	6823      	ldr	r3, [r4, #0]
 80045e0:	f023 0320 	bic.w	r3, r3, #32
 80045e4:	6023      	str	r3, [r4, #0]
 80045e6:	2310      	movs	r3, #16
 80045e8:	e7b0      	b.n	800454c <_printf_i+0xfc>
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	f043 0320 	orr.w	r3, r3, #32
 80045f0:	6023      	str	r3, [r4, #0]
 80045f2:	2378      	movs	r3, #120	; 0x78
 80045f4:	4828      	ldr	r0, [pc, #160]	; (8004698 <_printf_i+0x248>)
 80045f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045fa:	e7e3      	b.n	80045c4 <_printf_i+0x174>
 80045fc:	0659      	lsls	r1, r3, #25
 80045fe:	bf48      	it	mi
 8004600:	b2b6      	uxthmi	r6, r6
 8004602:	e7e6      	b.n	80045d2 <_printf_i+0x182>
 8004604:	4615      	mov	r5, r2
 8004606:	e7bb      	b.n	8004580 <_printf_i+0x130>
 8004608:	682b      	ldr	r3, [r5, #0]
 800460a:	6826      	ldr	r6, [r4, #0]
 800460c:	6961      	ldr	r1, [r4, #20]
 800460e:	1d18      	adds	r0, r3, #4
 8004610:	6028      	str	r0, [r5, #0]
 8004612:	0635      	lsls	r5, r6, #24
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	d501      	bpl.n	800461c <_printf_i+0x1cc>
 8004618:	6019      	str	r1, [r3, #0]
 800461a:	e002      	b.n	8004622 <_printf_i+0x1d2>
 800461c:	0670      	lsls	r0, r6, #25
 800461e:	d5fb      	bpl.n	8004618 <_printf_i+0x1c8>
 8004620:	8019      	strh	r1, [r3, #0]
 8004622:	2300      	movs	r3, #0
 8004624:	6123      	str	r3, [r4, #16]
 8004626:	4615      	mov	r5, r2
 8004628:	e7ba      	b.n	80045a0 <_printf_i+0x150>
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	1d1a      	adds	r2, r3, #4
 800462e:	602a      	str	r2, [r5, #0]
 8004630:	681d      	ldr	r5, [r3, #0]
 8004632:	6862      	ldr	r2, [r4, #4]
 8004634:	2100      	movs	r1, #0
 8004636:	4628      	mov	r0, r5
 8004638:	f7fb fe52 	bl	80002e0 <memchr>
 800463c:	b108      	cbz	r0, 8004642 <_printf_i+0x1f2>
 800463e:	1b40      	subs	r0, r0, r5
 8004640:	6060      	str	r0, [r4, #4]
 8004642:	6863      	ldr	r3, [r4, #4]
 8004644:	6123      	str	r3, [r4, #16]
 8004646:	2300      	movs	r3, #0
 8004648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800464c:	e7a8      	b.n	80045a0 <_printf_i+0x150>
 800464e:	6923      	ldr	r3, [r4, #16]
 8004650:	462a      	mov	r2, r5
 8004652:	4649      	mov	r1, r9
 8004654:	4640      	mov	r0, r8
 8004656:	47d0      	blx	sl
 8004658:	3001      	adds	r0, #1
 800465a:	d0ab      	beq.n	80045b4 <_printf_i+0x164>
 800465c:	6823      	ldr	r3, [r4, #0]
 800465e:	079b      	lsls	r3, r3, #30
 8004660:	d413      	bmi.n	800468a <_printf_i+0x23a>
 8004662:	68e0      	ldr	r0, [r4, #12]
 8004664:	9b03      	ldr	r3, [sp, #12]
 8004666:	4298      	cmp	r0, r3
 8004668:	bfb8      	it	lt
 800466a:	4618      	movlt	r0, r3
 800466c:	e7a4      	b.n	80045b8 <_printf_i+0x168>
 800466e:	2301      	movs	r3, #1
 8004670:	4632      	mov	r2, r6
 8004672:	4649      	mov	r1, r9
 8004674:	4640      	mov	r0, r8
 8004676:	47d0      	blx	sl
 8004678:	3001      	adds	r0, #1
 800467a:	d09b      	beq.n	80045b4 <_printf_i+0x164>
 800467c:	3501      	adds	r5, #1
 800467e:	68e3      	ldr	r3, [r4, #12]
 8004680:	9903      	ldr	r1, [sp, #12]
 8004682:	1a5b      	subs	r3, r3, r1
 8004684:	42ab      	cmp	r3, r5
 8004686:	dcf2      	bgt.n	800466e <_printf_i+0x21e>
 8004688:	e7eb      	b.n	8004662 <_printf_i+0x212>
 800468a:	2500      	movs	r5, #0
 800468c:	f104 0619 	add.w	r6, r4, #25
 8004690:	e7f5      	b.n	800467e <_printf_i+0x22e>
 8004692:	bf00      	nop
 8004694:	0800980a 	.word	0x0800980a
 8004698:	0800981b 	.word	0x0800981b

0800469c <iprintf>:
 800469c:	b40f      	push	{r0, r1, r2, r3}
 800469e:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <iprintf+0x2c>)
 80046a0:	b513      	push	{r0, r1, r4, lr}
 80046a2:	681c      	ldr	r4, [r3, #0]
 80046a4:	b124      	cbz	r4, 80046b0 <iprintf+0x14>
 80046a6:	69a3      	ldr	r3, [r4, #24]
 80046a8:	b913      	cbnz	r3, 80046b0 <iprintf+0x14>
 80046aa:	4620      	mov	r0, r4
 80046ac:	f001 f8d8 	bl	8005860 <__sinit>
 80046b0:	ab05      	add	r3, sp, #20
 80046b2:	9a04      	ldr	r2, [sp, #16]
 80046b4:	68a1      	ldr	r1, [r4, #8]
 80046b6:	9301      	str	r3, [sp, #4]
 80046b8:	4620      	mov	r0, r4
 80046ba:	f001 fe95 	bl	80063e8 <_vfiprintf_r>
 80046be:	b002      	add	sp, #8
 80046c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046c4:	b004      	add	sp, #16
 80046c6:	4770      	bx	lr
 80046c8:	20000014 	.word	0x20000014

080046cc <_puts_r>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	460e      	mov	r6, r1
 80046d0:	4605      	mov	r5, r0
 80046d2:	b118      	cbz	r0, 80046dc <_puts_r+0x10>
 80046d4:	6983      	ldr	r3, [r0, #24]
 80046d6:	b90b      	cbnz	r3, 80046dc <_puts_r+0x10>
 80046d8:	f001 f8c2 	bl	8005860 <__sinit>
 80046dc:	69ab      	ldr	r3, [r5, #24]
 80046de:	68ac      	ldr	r4, [r5, #8]
 80046e0:	b913      	cbnz	r3, 80046e8 <_puts_r+0x1c>
 80046e2:	4628      	mov	r0, r5
 80046e4:	f001 f8bc 	bl	8005860 <__sinit>
 80046e8:	4b2c      	ldr	r3, [pc, #176]	; (800479c <_puts_r+0xd0>)
 80046ea:	429c      	cmp	r4, r3
 80046ec:	d120      	bne.n	8004730 <_puts_r+0x64>
 80046ee:	686c      	ldr	r4, [r5, #4]
 80046f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046f2:	07db      	lsls	r3, r3, #31
 80046f4:	d405      	bmi.n	8004702 <_puts_r+0x36>
 80046f6:	89a3      	ldrh	r3, [r4, #12]
 80046f8:	0598      	lsls	r0, r3, #22
 80046fa:	d402      	bmi.n	8004702 <_puts_r+0x36>
 80046fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046fe:	f001 f952 	bl	80059a6 <__retarget_lock_acquire_recursive>
 8004702:	89a3      	ldrh	r3, [r4, #12]
 8004704:	0719      	lsls	r1, r3, #28
 8004706:	d51d      	bpl.n	8004744 <_puts_r+0x78>
 8004708:	6923      	ldr	r3, [r4, #16]
 800470a:	b1db      	cbz	r3, 8004744 <_puts_r+0x78>
 800470c:	3e01      	subs	r6, #1
 800470e:	68a3      	ldr	r3, [r4, #8]
 8004710:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004714:	3b01      	subs	r3, #1
 8004716:	60a3      	str	r3, [r4, #8]
 8004718:	bb39      	cbnz	r1, 800476a <_puts_r+0x9e>
 800471a:	2b00      	cmp	r3, #0
 800471c:	da38      	bge.n	8004790 <_puts_r+0xc4>
 800471e:	4622      	mov	r2, r4
 8004720:	210a      	movs	r1, #10
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f848 	bl	80047b8 <__swbuf_r>
 8004728:	3001      	adds	r0, #1
 800472a:	d011      	beq.n	8004750 <_puts_r+0x84>
 800472c:	250a      	movs	r5, #10
 800472e:	e011      	b.n	8004754 <_puts_r+0x88>
 8004730:	4b1b      	ldr	r3, [pc, #108]	; (80047a0 <_puts_r+0xd4>)
 8004732:	429c      	cmp	r4, r3
 8004734:	d101      	bne.n	800473a <_puts_r+0x6e>
 8004736:	68ac      	ldr	r4, [r5, #8]
 8004738:	e7da      	b.n	80046f0 <_puts_r+0x24>
 800473a:	4b1a      	ldr	r3, [pc, #104]	; (80047a4 <_puts_r+0xd8>)
 800473c:	429c      	cmp	r4, r3
 800473e:	bf08      	it	eq
 8004740:	68ec      	ldreq	r4, [r5, #12]
 8004742:	e7d5      	b.n	80046f0 <_puts_r+0x24>
 8004744:	4621      	mov	r1, r4
 8004746:	4628      	mov	r0, r5
 8004748:	f000 f888 	bl	800485c <__swsetup_r>
 800474c:	2800      	cmp	r0, #0
 800474e:	d0dd      	beq.n	800470c <_puts_r+0x40>
 8004750:	f04f 35ff 	mov.w	r5, #4294967295
 8004754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004756:	07da      	lsls	r2, r3, #31
 8004758:	d405      	bmi.n	8004766 <_puts_r+0x9a>
 800475a:	89a3      	ldrh	r3, [r4, #12]
 800475c:	059b      	lsls	r3, r3, #22
 800475e:	d402      	bmi.n	8004766 <_puts_r+0x9a>
 8004760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004762:	f001 f921 	bl	80059a8 <__retarget_lock_release_recursive>
 8004766:	4628      	mov	r0, r5
 8004768:	bd70      	pop	{r4, r5, r6, pc}
 800476a:	2b00      	cmp	r3, #0
 800476c:	da04      	bge.n	8004778 <_puts_r+0xac>
 800476e:	69a2      	ldr	r2, [r4, #24]
 8004770:	429a      	cmp	r2, r3
 8004772:	dc06      	bgt.n	8004782 <_puts_r+0xb6>
 8004774:	290a      	cmp	r1, #10
 8004776:	d004      	beq.n	8004782 <_puts_r+0xb6>
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	6022      	str	r2, [r4, #0]
 800477e:	7019      	strb	r1, [r3, #0]
 8004780:	e7c5      	b.n	800470e <_puts_r+0x42>
 8004782:	4622      	mov	r2, r4
 8004784:	4628      	mov	r0, r5
 8004786:	f000 f817 	bl	80047b8 <__swbuf_r>
 800478a:	3001      	adds	r0, #1
 800478c:	d1bf      	bne.n	800470e <_puts_r+0x42>
 800478e:	e7df      	b.n	8004750 <_puts_r+0x84>
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	250a      	movs	r5, #10
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	6022      	str	r2, [r4, #0]
 8004798:	701d      	strb	r5, [r3, #0]
 800479a:	e7db      	b.n	8004754 <_puts_r+0x88>
 800479c:	080098dc 	.word	0x080098dc
 80047a0:	080098fc 	.word	0x080098fc
 80047a4:	080098bc 	.word	0x080098bc

080047a8 <puts>:
 80047a8:	4b02      	ldr	r3, [pc, #8]	; (80047b4 <puts+0xc>)
 80047aa:	4601      	mov	r1, r0
 80047ac:	6818      	ldr	r0, [r3, #0]
 80047ae:	f7ff bf8d 	b.w	80046cc <_puts_r>
 80047b2:	bf00      	nop
 80047b4:	20000014 	.word	0x20000014

080047b8 <__swbuf_r>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	460e      	mov	r6, r1
 80047bc:	4614      	mov	r4, r2
 80047be:	4605      	mov	r5, r0
 80047c0:	b118      	cbz	r0, 80047ca <__swbuf_r+0x12>
 80047c2:	6983      	ldr	r3, [r0, #24]
 80047c4:	b90b      	cbnz	r3, 80047ca <__swbuf_r+0x12>
 80047c6:	f001 f84b 	bl	8005860 <__sinit>
 80047ca:	4b21      	ldr	r3, [pc, #132]	; (8004850 <__swbuf_r+0x98>)
 80047cc:	429c      	cmp	r4, r3
 80047ce:	d12b      	bne.n	8004828 <__swbuf_r+0x70>
 80047d0:	686c      	ldr	r4, [r5, #4]
 80047d2:	69a3      	ldr	r3, [r4, #24]
 80047d4:	60a3      	str	r3, [r4, #8]
 80047d6:	89a3      	ldrh	r3, [r4, #12]
 80047d8:	071a      	lsls	r2, r3, #28
 80047da:	d52f      	bpl.n	800483c <__swbuf_r+0x84>
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	b36b      	cbz	r3, 800483c <__swbuf_r+0x84>
 80047e0:	6923      	ldr	r3, [r4, #16]
 80047e2:	6820      	ldr	r0, [r4, #0]
 80047e4:	1ac0      	subs	r0, r0, r3
 80047e6:	6963      	ldr	r3, [r4, #20]
 80047e8:	b2f6      	uxtb	r6, r6
 80047ea:	4283      	cmp	r3, r0
 80047ec:	4637      	mov	r7, r6
 80047ee:	dc04      	bgt.n	80047fa <__swbuf_r+0x42>
 80047f0:	4621      	mov	r1, r4
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 ffa0 	bl	8005738 <_fflush_r>
 80047f8:	bb30      	cbnz	r0, 8004848 <__swbuf_r+0x90>
 80047fa:	68a3      	ldr	r3, [r4, #8]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	60a3      	str	r3, [r4, #8]
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	6022      	str	r2, [r4, #0]
 8004806:	701e      	strb	r6, [r3, #0]
 8004808:	6963      	ldr	r3, [r4, #20]
 800480a:	3001      	adds	r0, #1
 800480c:	4283      	cmp	r3, r0
 800480e:	d004      	beq.n	800481a <__swbuf_r+0x62>
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	07db      	lsls	r3, r3, #31
 8004814:	d506      	bpl.n	8004824 <__swbuf_r+0x6c>
 8004816:	2e0a      	cmp	r6, #10
 8004818:	d104      	bne.n	8004824 <__swbuf_r+0x6c>
 800481a:	4621      	mov	r1, r4
 800481c:	4628      	mov	r0, r5
 800481e:	f000 ff8b 	bl	8005738 <_fflush_r>
 8004822:	b988      	cbnz	r0, 8004848 <__swbuf_r+0x90>
 8004824:	4638      	mov	r0, r7
 8004826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <__swbuf_r+0x9c>)
 800482a:	429c      	cmp	r4, r3
 800482c:	d101      	bne.n	8004832 <__swbuf_r+0x7a>
 800482e:	68ac      	ldr	r4, [r5, #8]
 8004830:	e7cf      	b.n	80047d2 <__swbuf_r+0x1a>
 8004832:	4b09      	ldr	r3, [pc, #36]	; (8004858 <__swbuf_r+0xa0>)
 8004834:	429c      	cmp	r4, r3
 8004836:	bf08      	it	eq
 8004838:	68ec      	ldreq	r4, [r5, #12]
 800483a:	e7ca      	b.n	80047d2 <__swbuf_r+0x1a>
 800483c:	4621      	mov	r1, r4
 800483e:	4628      	mov	r0, r5
 8004840:	f000 f80c 	bl	800485c <__swsetup_r>
 8004844:	2800      	cmp	r0, #0
 8004846:	d0cb      	beq.n	80047e0 <__swbuf_r+0x28>
 8004848:	f04f 37ff 	mov.w	r7, #4294967295
 800484c:	e7ea      	b.n	8004824 <__swbuf_r+0x6c>
 800484e:	bf00      	nop
 8004850:	080098dc 	.word	0x080098dc
 8004854:	080098fc 	.word	0x080098fc
 8004858:	080098bc 	.word	0x080098bc

0800485c <__swsetup_r>:
 800485c:	4b32      	ldr	r3, [pc, #200]	; (8004928 <__swsetup_r+0xcc>)
 800485e:	b570      	push	{r4, r5, r6, lr}
 8004860:	681d      	ldr	r5, [r3, #0]
 8004862:	4606      	mov	r6, r0
 8004864:	460c      	mov	r4, r1
 8004866:	b125      	cbz	r5, 8004872 <__swsetup_r+0x16>
 8004868:	69ab      	ldr	r3, [r5, #24]
 800486a:	b913      	cbnz	r3, 8004872 <__swsetup_r+0x16>
 800486c:	4628      	mov	r0, r5
 800486e:	f000 fff7 	bl	8005860 <__sinit>
 8004872:	4b2e      	ldr	r3, [pc, #184]	; (800492c <__swsetup_r+0xd0>)
 8004874:	429c      	cmp	r4, r3
 8004876:	d10f      	bne.n	8004898 <__swsetup_r+0x3c>
 8004878:	686c      	ldr	r4, [r5, #4]
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004880:	0719      	lsls	r1, r3, #28
 8004882:	d42c      	bmi.n	80048de <__swsetup_r+0x82>
 8004884:	06dd      	lsls	r5, r3, #27
 8004886:	d411      	bmi.n	80048ac <__swsetup_r+0x50>
 8004888:	2309      	movs	r3, #9
 800488a:	6033      	str	r3, [r6, #0]
 800488c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004890:	81a3      	strh	r3, [r4, #12]
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	e03e      	b.n	8004916 <__swsetup_r+0xba>
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <__swsetup_r+0xd4>)
 800489a:	429c      	cmp	r4, r3
 800489c:	d101      	bne.n	80048a2 <__swsetup_r+0x46>
 800489e:	68ac      	ldr	r4, [r5, #8]
 80048a0:	e7eb      	b.n	800487a <__swsetup_r+0x1e>
 80048a2:	4b24      	ldr	r3, [pc, #144]	; (8004934 <__swsetup_r+0xd8>)
 80048a4:	429c      	cmp	r4, r3
 80048a6:	bf08      	it	eq
 80048a8:	68ec      	ldreq	r4, [r5, #12]
 80048aa:	e7e6      	b.n	800487a <__swsetup_r+0x1e>
 80048ac:	0758      	lsls	r0, r3, #29
 80048ae:	d512      	bpl.n	80048d6 <__swsetup_r+0x7a>
 80048b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048b2:	b141      	cbz	r1, 80048c6 <__swsetup_r+0x6a>
 80048b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048b8:	4299      	cmp	r1, r3
 80048ba:	d002      	beq.n	80048c2 <__swsetup_r+0x66>
 80048bc:	4630      	mov	r0, r6
 80048be:	f001 fc89 	bl	80061d4 <_free_r>
 80048c2:	2300      	movs	r3, #0
 80048c4:	6363      	str	r3, [r4, #52]	; 0x34
 80048c6:	89a3      	ldrh	r3, [r4, #12]
 80048c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048cc:	81a3      	strh	r3, [r4, #12]
 80048ce:	2300      	movs	r3, #0
 80048d0:	6063      	str	r3, [r4, #4]
 80048d2:	6923      	ldr	r3, [r4, #16]
 80048d4:	6023      	str	r3, [r4, #0]
 80048d6:	89a3      	ldrh	r3, [r4, #12]
 80048d8:	f043 0308 	orr.w	r3, r3, #8
 80048dc:	81a3      	strh	r3, [r4, #12]
 80048de:	6923      	ldr	r3, [r4, #16]
 80048e0:	b94b      	cbnz	r3, 80048f6 <__swsetup_r+0x9a>
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ec:	d003      	beq.n	80048f6 <__swsetup_r+0x9a>
 80048ee:	4621      	mov	r1, r4
 80048f0:	4630      	mov	r0, r6
 80048f2:	f001 f87f 	bl	80059f4 <__smakebuf_r>
 80048f6:	89a0      	ldrh	r0, [r4, #12]
 80048f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048fc:	f010 0301 	ands.w	r3, r0, #1
 8004900:	d00a      	beq.n	8004918 <__swsetup_r+0xbc>
 8004902:	2300      	movs	r3, #0
 8004904:	60a3      	str	r3, [r4, #8]
 8004906:	6963      	ldr	r3, [r4, #20]
 8004908:	425b      	negs	r3, r3
 800490a:	61a3      	str	r3, [r4, #24]
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	b943      	cbnz	r3, 8004922 <__swsetup_r+0xc6>
 8004910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004914:	d1ba      	bne.n	800488c <__swsetup_r+0x30>
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	0781      	lsls	r1, r0, #30
 800491a:	bf58      	it	pl
 800491c:	6963      	ldrpl	r3, [r4, #20]
 800491e:	60a3      	str	r3, [r4, #8]
 8004920:	e7f4      	b.n	800490c <__swsetup_r+0xb0>
 8004922:	2000      	movs	r0, #0
 8004924:	e7f7      	b.n	8004916 <__swsetup_r+0xba>
 8004926:	bf00      	nop
 8004928:	20000014 	.word	0x20000014
 800492c:	080098dc 	.word	0x080098dc
 8004930:	080098fc 	.word	0x080098fc
 8004934:	080098bc 	.word	0x080098bc

08004938 <quorem>:
 8004938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800493c:	6903      	ldr	r3, [r0, #16]
 800493e:	690c      	ldr	r4, [r1, #16]
 8004940:	42a3      	cmp	r3, r4
 8004942:	4607      	mov	r7, r0
 8004944:	f2c0 8081 	blt.w	8004a4a <quorem+0x112>
 8004948:	3c01      	subs	r4, #1
 800494a:	f101 0814 	add.w	r8, r1, #20
 800494e:	f100 0514 	add.w	r5, r0, #20
 8004952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004956:	9301      	str	r3, [sp, #4]
 8004958:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800495c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004960:	3301      	adds	r3, #1
 8004962:	429a      	cmp	r2, r3
 8004964:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004968:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800496c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004970:	d331      	bcc.n	80049d6 <quorem+0x9e>
 8004972:	f04f 0e00 	mov.w	lr, #0
 8004976:	4640      	mov	r0, r8
 8004978:	46ac      	mov	ip, r5
 800497a:	46f2      	mov	sl, lr
 800497c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004980:	b293      	uxth	r3, r2
 8004982:	fb06 e303 	mla	r3, r6, r3, lr
 8004986:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800498a:	b29b      	uxth	r3, r3
 800498c:	ebaa 0303 	sub.w	r3, sl, r3
 8004990:	f8dc a000 	ldr.w	sl, [ip]
 8004994:	0c12      	lsrs	r2, r2, #16
 8004996:	fa13 f38a 	uxtah	r3, r3, sl
 800499a:	fb06 e202 	mla	r2, r6, r2, lr
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	9b00      	ldr	r3, [sp, #0]
 80049a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049a6:	b292      	uxth	r2, r2
 80049a8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80049ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80049b4:	4581      	cmp	r9, r0
 80049b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049ba:	f84c 3b04 	str.w	r3, [ip], #4
 80049be:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80049c2:	d2db      	bcs.n	800497c <quorem+0x44>
 80049c4:	f855 300b 	ldr.w	r3, [r5, fp]
 80049c8:	b92b      	cbnz	r3, 80049d6 <quorem+0x9e>
 80049ca:	9b01      	ldr	r3, [sp, #4]
 80049cc:	3b04      	subs	r3, #4
 80049ce:	429d      	cmp	r5, r3
 80049d0:	461a      	mov	r2, r3
 80049d2:	d32e      	bcc.n	8004a32 <quorem+0xfa>
 80049d4:	613c      	str	r4, [r7, #16]
 80049d6:	4638      	mov	r0, r7
 80049d8:	f001 fae4 	bl	8005fa4 <__mcmp>
 80049dc:	2800      	cmp	r0, #0
 80049de:	db24      	blt.n	8004a2a <quorem+0xf2>
 80049e0:	3601      	adds	r6, #1
 80049e2:	4628      	mov	r0, r5
 80049e4:	f04f 0c00 	mov.w	ip, #0
 80049e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80049ec:	f8d0 e000 	ldr.w	lr, [r0]
 80049f0:	b293      	uxth	r3, r2
 80049f2:	ebac 0303 	sub.w	r3, ip, r3
 80049f6:	0c12      	lsrs	r2, r2, #16
 80049f8:	fa13 f38e 	uxtah	r3, r3, lr
 80049fc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a0a:	45c1      	cmp	r9, r8
 8004a0c:	f840 3b04 	str.w	r3, [r0], #4
 8004a10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a14:	d2e8      	bcs.n	80049e8 <quorem+0xb0>
 8004a16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a1e:	b922      	cbnz	r2, 8004a2a <quorem+0xf2>
 8004a20:	3b04      	subs	r3, #4
 8004a22:	429d      	cmp	r5, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	d30a      	bcc.n	8004a3e <quorem+0x106>
 8004a28:	613c      	str	r4, [r7, #16]
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	b003      	add	sp, #12
 8004a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	3b04      	subs	r3, #4
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d1cc      	bne.n	80049d4 <quorem+0x9c>
 8004a3a:	3c01      	subs	r4, #1
 8004a3c:	e7c7      	b.n	80049ce <quorem+0x96>
 8004a3e:	6812      	ldr	r2, [r2, #0]
 8004a40:	3b04      	subs	r3, #4
 8004a42:	2a00      	cmp	r2, #0
 8004a44:	d1f0      	bne.n	8004a28 <quorem+0xf0>
 8004a46:	3c01      	subs	r4, #1
 8004a48:	e7eb      	b.n	8004a22 <quorem+0xea>
 8004a4a:	2000      	movs	r0, #0
 8004a4c:	e7ee      	b.n	8004a2c <quorem+0xf4>
	...

08004a50 <_dtoa_r>:
 8004a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a54:	ed2d 8b04 	vpush	{d8-d9}
 8004a58:	ec57 6b10 	vmov	r6, r7, d0
 8004a5c:	b093      	sub	sp, #76	; 0x4c
 8004a5e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a60:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004a64:	9106      	str	r1, [sp, #24]
 8004a66:	ee10 aa10 	vmov	sl, s0
 8004a6a:	4604      	mov	r4, r0
 8004a6c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a6e:	930c      	str	r3, [sp, #48]	; 0x30
 8004a70:	46bb      	mov	fp, r7
 8004a72:	b975      	cbnz	r5, 8004a92 <_dtoa_r+0x42>
 8004a74:	2010      	movs	r0, #16
 8004a76:	f000 fffd 	bl	8005a74 <malloc>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	6260      	str	r0, [r4, #36]	; 0x24
 8004a7e:	b920      	cbnz	r0, 8004a8a <_dtoa_r+0x3a>
 8004a80:	4ba7      	ldr	r3, [pc, #668]	; (8004d20 <_dtoa_r+0x2d0>)
 8004a82:	21ea      	movs	r1, #234	; 0xea
 8004a84:	48a7      	ldr	r0, [pc, #668]	; (8004d24 <_dtoa_r+0x2d4>)
 8004a86:	f001 fe45 	bl	8006714 <__assert_func>
 8004a8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a8e:	6005      	str	r5, [r0, #0]
 8004a90:	60c5      	str	r5, [r0, #12]
 8004a92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a94:	6819      	ldr	r1, [r3, #0]
 8004a96:	b151      	cbz	r1, 8004aae <_dtoa_r+0x5e>
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	604a      	str	r2, [r1, #4]
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	4093      	lsls	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
 8004aa2:	4620      	mov	r0, r4
 8004aa4:	f001 f83c 	bl	8005b20 <_Bfree>
 8004aa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004aaa:	2200      	movs	r2, #0
 8004aac:	601a      	str	r2, [r3, #0]
 8004aae:	1e3b      	subs	r3, r7, #0
 8004ab0:	bfaa      	itet	ge
 8004ab2:	2300      	movge	r3, #0
 8004ab4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004ab8:	f8c8 3000 	strge.w	r3, [r8]
 8004abc:	4b9a      	ldr	r3, [pc, #616]	; (8004d28 <_dtoa_r+0x2d8>)
 8004abe:	bfbc      	itt	lt
 8004ac0:	2201      	movlt	r2, #1
 8004ac2:	f8c8 2000 	strlt.w	r2, [r8]
 8004ac6:	ea33 030b 	bics.w	r3, r3, fp
 8004aca:	d11b      	bne.n	8004b04 <_dtoa_r+0xb4>
 8004acc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ace:	f242 730f 	movw	r3, #9999	; 0x270f
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004ad8:	4333      	orrs	r3, r6
 8004ada:	f000 8592 	beq.w	8005602 <_dtoa_r+0xbb2>
 8004ade:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ae0:	b963      	cbnz	r3, 8004afc <_dtoa_r+0xac>
 8004ae2:	4b92      	ldr	r3, [pc, #584]	; (8004d2c <_dtoa_r+0x2dc>)
 8004ae4:	e022      	b.n	8004b2c <_dtoa_r+0xdc>
 8004ae6:	4b92      	ldr	r3, [pc, #584]	; (8004d30 <_dtoa_r+0x2e0>)
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	3308      	adds	r3, #8
 8004aec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	9801      	ldr	r0, [sp, #4]
 8004af2:	b013      	add	sp, #76	; 0x4c
 8004af4:	ecbd 8b04 	vpop	{d8-d9}
 8004af8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afc:	4b8b      	ldr	r3, [pc, #556]	; (8004d2c <_dtoa_r+0x2dc>)
 8004afe:	9301      	str	r3, [sp, #4]
 8004b00:	3303      	adds	r3, #3
 8004b02:	e7f3      	b.n	8004aec <_dtoa_r+0x9c>
 8004b04:	2200      	movs	r2, #0
 8004b06:	2300      	movs	r3, #0
 8004b08:	4650      	mov	r0, sl
 8004b0a:	4659      	mov	r1, fp
 8004b0c:	f7fc f85c 	bl	8000bc8 <__aeabi_dcmpeq>
 8004b10:	ec4b ab19 	vmov	d9, sl, fp
 8004b14:	4680      	mov	r8, r0
 8004b16:	b158      	cbz	r0, 8004b30 <_dtoa_r+0xe0>
 8004b18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 856b 	beq.w	80055fc <_dtoa_r+0xbac>
 8004b26:	4883      	ldr	r0, [pc, #524]	; (8004d34 <_dtoa_r+0x2e4>)
 8004b28:	6018      	str	r0, [r3, #0]
 8004b2a:	1e43      	subs	r3, r0, #1
 8004b2c:	9301      	str	r3, [sp, #4]
 8004b2e:	e7df      	b.n	8004af0 <_dtoa_r+0xa0>
 8004b30:	ec4b ab10 	vmov	d0, sl, fp
 8004b34:	aa10      	add	r2, sp, #64	; 0x40
 8004b36:	a911      	add	r1, sp, #68	; 0x44
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f001 fad9 	bl	80060f0 <__d2b>
 8004b3e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004b42:	ee08 0a10 	vmov	s16, r0
 8004b46:	2d00      	cmp	r5, #0
 8004b48:	f000 8084 	beq.w	8004c54 <_dtoa_r+0x204>
 8004b4c:	ee19 3a90 	vmov	r3, s19
 8004b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b54:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004b58:	4656      	mov	r6, sl
 8004b5a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004b5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004b62:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004b66:	4b74      	ldr	r3, [pc, #464]	; (8004d38 <_dtoa_r+0x2e8>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	4630      	mov	r0, r6
 8004b6c:	4639      	mov	r1, r7
 8004b6e:	f7fb fc0b 	bl	8000388 <__aeabi_dsub>
 8004b72:	a365      	add	r3, pc, #404	; (adr r3, 8004d08 <_dtoa_r+0x2b8>)
 8004b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b78:	f7fb fdbe 	bl	80006f8 <__aeabi_dmul>
 8004b7c:	a364      	add	r3, pc, #400	; (adr r3, 8004d10 <_dtoa_r+0x2c0>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	f7fb fc03 	bl	800038c <__adddf3>
 8004b86:	4606      	mov	r6, r0
 8004b88:	4628      	mov	r0, r5
 8004b8a:	460f      	mov	r7, r1
 8004b8c:	f7fb fd4a 	bl	8000624 <__aeabi_i2d>
 8004b90:	a361      	add	r3, pc, #388	; (adr r3, 8004d18 <_dtoa_r+0x2c8>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fdaf 	bl	80006f8 <__aeabi_dmul>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4630      	mov	r0, r6
 8004ba0:	4639      	mov	r1, r7
 8004ba2:	f7fb fbf3 	bl	800038c <__adddf3>
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	460f      	mov	r7, r1
 8004baa:	f7fc f855 	bl	8000c58 <__aeabi_d2iz>
 8004bae:	2200      	movs	r2, #0
 8004bb0:	9000      	str	r0, [sp, #0]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	4639      	mov	r1, r7
 8004bb8:	f7fc f810 	bl	8000bdc <__aeabi_dcmplt>
 8004bbc:	b150      	cbz	r0, 8004bd4 <_dtoa_r+0x184>
 8004bbe:	9800      	ldr	r0, [sp, #0]
 8004bc0:	f7fb fd30 	bl	8000624 <__aeabi_i2d>
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	f7fb fffe 	bl	8000bc8 <__aeabi_dcmpeq>
 8004bcc:	b910      	cbnz	r0, 8004bd4 <_dtoa_r+0x184>
 8004bce:	9b00      	ldr	r3, [sp, #0]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	9300      	str	r3, [sp, #0]
 8004bd4:	9b00      	ldr	r3, [sp, #0]
 8004bd6:	2b16      	cmp	r3, #22
 8004bd8:	d85a      	bhi.n	8004c90 <_dtoa_r+0x240>
 8004bda:	9a00      	ldr	r2, [sp, #0]
 8004bdc:	4b57      	ldr	r3, [pc, #348]	; (8004d3c <_dtoa_r+0x2ec>)
 8004bde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	ec51 0b19 	vmov	r0, r1, d9
 8004bea:	f7fb fff7 	bl	8000bdc <__aeabi_dcmplt>
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	d050      	beq.n	8004c94 <_dtoa_r+0x244>
 8004bf2:	9b00      	ldr	r3, [sp, #0]
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	9300      	str	r3, [sp, #0]
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bfc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004bfe:	1b5d      	subs	r5, r3, r5
 8004c00:	1e6b      	subs	r3, r5, #1
 8004c02:	9305      	str	r3, [sp, #20]
 8004c04:	bf45      	ittet	mi
 8004c06:	f1c5 0301 	rsbmi	r3, r5, #1
 8004c0a:	9304      	strmi	r3, [sp, #16]
 8004c0c:	2300      	movpl	r3, #0
 8004c0e:	2300      	movmi	r3, #0
 8004c10:	bf4c      	ite	mi
 8004c12:	9305      	strmi	r3, [sp, #20]
 8004c14:	9304      	strpl	r3, [sp, #16]
 8004c16:	9b00      	ldr	r3, [sp, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	db3d      	blt.n	8004c98 <_dtoa_r+0x248>
 8004c1c:	9b05      	ldr	r3, [sp, #20]
 8004c1e:	9a00      	ldr	r2, [sp, #0]
 8004c20:	920a      	str	r2, [sp, #40]	; 0x28
 8004c22:	4413      	add	r3, r2
 8004c24:	9305      	str	r3, [sp, #20]
 8004c26:	2300      	movs	r3, #0
 8004c28:	9307      	str	r3, [sp, #28]
 8004c2a:	9b06      	ldr	r3, [sp, #24]
 8004c2c:	2b09      	cmp	r3, #9
 8004c2e:	f200 8089 	bhi.w	8004d44 <_dtoa_r+0x2f4>
 8004c32:	2b05      	cmp	r3, #5
 8004c34:	bfc4      	itt	gt
 8004c36:	3b04      	subgt	r3, #4
 8004c38:	9306      	strgt	r3, [sp, #24]
 8004c3a:	9b06      	ldr	r3, [sp, #24]
 8004c3c:	f1a3 0302 	sub.w	r3, r3, #2
 8004c40:	bfcc      	ite	gt
 8004c42:	2500      	movgt	r5, #0
 8004c44:	2501      	movle	r5, #1
 8004c46:	2b03      	cmp	r3, #3
 8004c48:	f200 8087 	bhi.w	8004d5a <_dtoa_r+0x30a>
 8004c4c:	e8df f003 	tbb	[pc, r3]
 8004c50:	59383a2d 	.word	0x59383a2d
 8004c54:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004c58:	441d      	add	r5, r3
 8004c5a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004c5e:	2b20      	cmp	r3, #32
 8004c60:	bfc1      	itttt	gt
 8004c62:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004c66:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004c6a:	fa0b f303 	lslgt.w	r3, fp, r3
 8004c6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004c72:	bfda      	itte	le
 8004c74:	f1c3 0320 	rsble	r3, r3, #32
 8004c78:	fa06 f003 	lslle.w	r0, r6, r3
 8004c7c:	4318      	orrgt	r0, r3
 8004c7e:	f7fb fcc1 	bl	8000604 <__aeabi_ui2d>
 8004c82:	2301      	movs	r3, #1
 8004c84:	4606      	mov	r6, r0
 8004c86:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004c8a:	3d01      	subs	r5, #1
 8004c8c:	930e      	str	r3, [sp, #56]	; 0x38
 8004c8e:	e76a      	b.n	8004b66 <_dtoa_r+0x116>
 8004c90:	2301      	movs	r3, #1
 8004c92:	e7b2      	b.n	8004bfa <_dtoa_r+0x1aa>
 8004c94:	900b      	str	r0, [sp, #44]	; 0x2c
 8004c96:	e7b1      	b.n	8004bfc <_dtoa_r+0x1ac>
 8004c98:	9b04      	ldr	r3, [sp, #16]
 8004c9a:	9a00      	ldr	r2, [sp, #0]
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	9304      	str	r3, [sp, #16]
 8004ca0:	4253      	negs	r3, r2
 8004ca2:	9307      	str	r3, [sp, #28]
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ca8:	e7bf      	b.n	8004c2a <_dtoa_r+0x1da>
 8004caa:	2300      	movs	r3, #0
 8004cac:	9308      	str	r3, [sp, #32]
 8004cae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	dc55      	bgt.n	8004d60 <_dtoa_r+0x310>
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004cba:	461a      	mov	r2, r3
 8004cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8004cbe:	e00c      	b.n	8004cda <_dtoa_r+0x28a>
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e7f3      	b.n	8004cac <_dtoa_r+0x25c>
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004cc8:	9308      	str	r3, [sp, #32]
 8004cca:	9b00      	ldr	r3, [sp, #0]
 8004ccc:	4413      	add	r3, r2
 8004cce:	9302      	str	r3, [sp, #8]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	9303      	str	r3, [sp, #12]
 8004cd6:	bfb8      	it	lt
 8004cd8:	2301      	movlt	r3, #1
 8004cda:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004cdc:	2200      	movs	r2, #0
 8004cde:	6042      	str	r2, [r0, #4]
 8004ce0:	2204      	movs	r2, #4
 8004ce2:	f102 0614 	add.w	r6, r2, #20
 8004ce6:	429e      	cmp	r6, r3
 8004ce8:	6841      	ldr	r1, [r0, #4]
 8004cea:	d93d      	bls.n	8004d68 <_dtoa_r+0x318>
 8004cec:	4620      	mov	r0, r4
 8004cee:	f000 fed7 	bl	8005aa0 <_Balloc>
 8004cf2:	9001      	str	r0, [sp, #4]
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	d13b      	bne.n	8004d70 <_dtoa_r+0x320>
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <_dtoa_r+0x2f0>)
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d00:	e6c0      	b.n	8004a84 <_dtoa_r+0x34>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e7df      	b.n	8004cc6 <_dtoa_r+0x276>
 8004d06:	bf00      	nop
 8004d08:	636f4361 	.word	0x636f4361
 8004d0c:	3fd287a7 	.word	0x3fd287a7
 8004d10:	8b60c8b3 	.word	0x8b60c8b3
 8004d14:	3fc68a28 	.word	0x3fc68a28
 8004d18:	509f79fb 	.word	0x509f79fb
 8004d1c:	3fd34413 	.word	0x3fd34413
 8004d20:	08009839 	.word	0x08009839
 8004d24:	08009850 	.word	0x08009850
 8004d28:	7ff00000 	.word	0x7ff00000
 8004d2c:	08009835 	.word	0x08009835
 8004d30:	0800982c 	.word	0x0800982c
 8004d34:	08009809 	.word	0x08009809
 8004d38:	3ff80000 	.word	0x3ff80000
 8004d3c:	080099a0 	.word	0x080099a0
 8004d40:	080098ab 	.word	0x080098ab
 8004d44:	2501      	movs	r5, #1
 8004d46:	2300      	movs	r3, #0
 8004d48:	9306      	str	r3, [sp, #24]
 8004d4a:	9508      	str	r5, [sp, #32]
 8004d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8004d50:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d54:	2200      	movs	r2, #0
 8004d56:	2312      	movs	r3, #18
 8004d58:	e7b0      	b.n	8004cbc <_dtoa_r+0x26c>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	9308      	str	r3, [sp, #32]
 8004d5e:	e7f5      	b.n	8004d4c <_dtoa_r+0x2fc>
 8004d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d62:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004d66:	e7b8      	b.n	8004cda <_dtoa_r+0x28a>
 8004d68:	3101      	adds	r1, #1
 8004d6a:	6041      	str	r1, [r0, #4]
 8004d6c:	0052      	lsls	r2, r2, #1
 8004d6e:	e7b8      	b.n	8004ce2 <_dtoa_r+0x292>
 8004d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d72:	9a01      	ldr	r2, [sp, #4]
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	9b03      	ldr	r3, [sp, #12]
 8004d78:	2b0e      	cmp	r3, #14
 8004d7a:	f200 809d 	bhi.w	8004eb8 <_dtoa_r+0x468>
 8004d7e:	2d00      	cmp	r5, #0
 8004d80:	f000 809a 	beq.w	8004eb8 <_dtoa_r+0x468>
 8004d84:	9b00      	ldr	r3, [sp, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	dd32      	ble.n	8004df0 <_dtoa_r+0x3a0>
 8004d8a:	4ab7      	ldr	r2, [pc, #732]	; (8005068 <_dtoa_r+0x618>)
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004d94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d98:	9b00      	ldr	r3, [sp, #0]
 8004d9a:	05d8      	lsls	r0, r3, #23
 8004d9c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004da0:	d516      	bpl.n	8004dd0 <_dtoa_r+0x380>
 8004da2:	4bb2      	ldr	r3, [pc, #712]	; (800506c <_dtoa_r+0x61c>)
 8004da4:	ec51 0b19 	vmov	r0, r1, d9
 8004da8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dac:	f7fb fdce 	bl	800094c <__aeabi_ddiv>
 8004db0:	f007 070f 	and.w	r7, r7, #15
 8004db4:	4682      	mov	sl, r0
 8004db6:	468b      	mov	fp, r1
 8004db8:	2503      	movs	r5, #3
 8004dba:	4eac      	ldr	r6, [pc, #688]	; (800506c <_dtoa_r+0x61c>)
 8004dbc:	b957      	cbnz	r7, 8004dd4 <_dtoa_r+0x384>
 8004dbe:	4642      	mov	r2, r8
 8004dc0:	464b      	mov	r3, r9
 8004dc2:	4650      	mov	r0, sl
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	f7fb fdc1 	bl	800094c <__aeabi_ddiv>
 8004dca:	4682      	mov	sl, r0
 8004dcc:	468b      	mov	fp, r1
 8004dce:	e028      	b.n	8004e22 <_dtoa_r+0x3d2>
 8004dd0:	2502      	movs	r5, #2
 8004dd2:	e7f2      	b.n	8004dba <_dtoa_r+0x36a>
 8004dd4:	07f9      	lsls	r1, r7, #31
 8004dd6:	d508      	bpl.n	8004dea <_dtoa_r+0x39a>
 8004dd8:	4640      	mov	r0, r8
 8004dda:	4649      	mov	r1, r9
 8004ddc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004de0:	f7fb fc8a 	bl	80006f8 <__aeabi_dmul>
 8004de4:	3501      	adds	r5, #1
 8004de6:	4680      	mov	r8, r0
 8004de8:	4689      	mov	r9, r1
 8004dea:	107f      	asrs	r7, r7, #1
 8004dec:	3608      	adds	r6, #8
 8004dee:	e7e5      	b.n	8004dbc <_dtoa_r+0x36c>
 8004df0:	f000 809b 	beq.w	8004f2a <_dtoa_r+0x4da>
 8004df4:	9b00      	ldr	r3, [sp, #0]
 8004df6:	4f9d      	ldr	r7, [pc, #628]	; (800506c <_dtoa_r+0x61c>)
 8004df8:	425e      	negs	r6, r3
 8004dfa:	4b9b      	ldr	r3, [pc, #620]	; (8005068 <_dtoa_r+0x618>)
 8004dfc:	f006 020f 	and.w	r2, r6, #15
 8004e00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	ec51 0b19 	vmov	r0, r1, d9
 8004e0c:	f7fb fc74 	bl	80006f8 <__aeabi_dmul>
 8004e10:	1136      	asrs	r6, r6, #4
 8004e12:	4682      	mov	sl, r0
 8004e14:	468b      	mov	fp, r1
 8004e16:	2300      	movs	r3, #0
 8004e18:	2502      	movs	r5, #2
 8004e1a:	2e00      	cmp	r6, #0
 8004e1c:	d17a      	bne.n	8004f14 <_dtoa_r+0x4c4>
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1d3      	bne.n	8004dca <_dtoa_r+0x37a>
 8004e22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	f000 8082 	beq.w	8004f2e <_dtoa_r+0x4de>
 8004e2a:	4b91      	ldr	r3, [pc, #580]	; (8005070 <_dtoa_r+0x620>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4650      	mov	r0, sl
 8004e30:	4659      	mov	r1, fp
 8004e32:	f7fb fed3 	bl	8000bdc <__aeabi_dcmplt>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d079      	beq.n	8004f2e <_dtoa_r+0x4de>
 8004e3a:	9b03      	ldr	r3, [sp, #12]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d076      	beq.n	8004f2e <_dtoa_r+0x4de>
 8004e40:	9b02      	ldr	r3, [sp, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	dd36      	ble.n	8004eb4 <_dtoa_r+0x464>
 8004e46:	9b00      	ldr	r3, [sp, #0]
 8004e48:	4650      	mov	r0, sl
 8004e4a:	4659      	mov	r1, fp
 8004e4c:	1e5f      	subs	r7, r3, #1
 8004e4e:	2200      	movs	r2, #0
 8004e50:	4b88      	ldr	r3, [pc, #544]	; (8005074 <_dtoa_r+0x624>)
 8004e52:	f7fb fc51 	bl	80006f8 <__aeabi_dmul>
 8004e56:	9e02      	ldr	r6, [sp, #8]
 8004e58:	4682      	mov	sl, r0
 8004e5a:	468b      	mov	fp, r1
 8004e5c:	3501      	adds	r5, #1
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f7fb fbe0 	bl	8000624 <__aeabi_i2d>
 8004e64:	4652      	mov	r2, sl
 8004e66:	465b      	mov	r3, fp
 8004e68:	f7fb fc46 	bl	80006f8 <__aeabi_dmul>
 8004e6c:	4b82      	ldr	r3, [pc, #520]	; (8005078 <_dtoa_r+0x628>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f7fb fa8c 	bl	800038c <__adddf3>
 8004e74:	46d0      	mov	r8, sl
 8004e76:	46d9      	mov	r9, fp
 8004e78:	4682      	mov	sl, r0
 8004e7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004e7e:	2e00      	cmp	r6, #0
 8004e80:	d158      	bne.n	8004f34 <_dtoa_r+0x4e4>
 8004e82:	4b7e      	ldr	r3, [pc, #504]	; (800507c <_dtoa_r+0x62c>)
 8004e84:	2200      	movs	r2, #0
 8004e86:	4640      	mov	r0, r8
 8004e88:	4649      	mov	r1, r9
 8004e8a:	f7fb fa7d 	bl	8000388 <__aeabi_dsub>
 8004e8e:	4652      	mov	r2, sl
 8004e90:	465b      	mov	r3, fp
 8004e92:	4680      	mov	r8, r0
 8004e94:	4689      	mov	r9, r1
 8004e96:	f7fb febf 	bl	8000c18 <__aeabi_dcmpgt>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	f040 8295 	bne.w	80053ca <_dtoa_r+0x97a>
 8004ea0:	4652      	mov	r2, sl
 8004ea2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004ea6:	4640      	mov	r0, r8
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	f7fb fe97 	bl	8000bdc <__aeabi_dcmplt>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f040 8289 	bne.w	80053c6 <_dtoa_r+0x976>
 8004eb4:	ec5b ab19 	vmov	sl, fp, d9
 8004eb8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f2c0 8148 	blt.w	8005150 <_dtoa_r+0x700>
 8004ec0:	9a00      	ldr	r2, [sp, #0]
 8004ec2:	2a0e      	cmp	r2, #14
 8004ec4:	f300 8144 	bgt.w	8005150 <_dtoa_r+0x700>
 8004ec8:	4b67      	ldr	r3, [pc, #412]	; (8005068 <_dtoa_r+0x618>)
 8004eca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ece:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ed2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f280 80d5 	bge.w	8005084 <_dtoa_r+0x634>
 8004eda:	9b03      	ldr	r3, [sp, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f300 80d1 	bgt.w	8005084 <_dtoa_r+0x634>
 8004ee2:	f040 826f 	bne.w	80053c4 <_dtoa_r+0x974>
 8004ee6:	4b65      	ldr	r3, [pc, #404]	; (800507c <_dtoa_r+0x62c>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	4640      	mov	r0, r8
 8004eec:	4649      	mov	r1, r9
 8004eee:	f7fb fc03 	bl	80006f8 <__aeabi_dmul>
 8004ef2:	4652      	mov	r2, sl
 8004ef4:	465b      	mov	r3, fp
 8004ef6:	f7fb fe85 	bl	8000c04 <__aeabi_dcmpge>
 8004efa:	9e03      	ldr	r6, [sp, #12]
 8004efc:	4637      	mov	r7, r6
 8004efe:	2800      	cmp	r0, #0
 8004f00:	f040 8245 	bne.w	800538e <_dtoa_r+0x93e>
 8004f04:	9d01      	ldr	r5, [sp, #4]
 8004f06:	2331      	movs	r3, #49	; 0x31
 8004f08:	f805 3b01 	strb.w	r3, [r5], #1
 8004f0c:	9b00      	ldr	r3, [sp, #0]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	e240      	b.n	8005396 <_dtoa_r+0x946>
 8004f14:	07f2      	lsls	r2, r6, #31
 8004f16:	d505      	bpl.n	8004f24 <_dtoa_r+0x4d4>
 8004f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1c:	f7fb fbec 	bl	80006f8 <__aeabi_dmul>
 8004f20:	3501      	adds	r5, #1
 8004f22:	2301      	movs	r3, #1
 8004f24:	1076      	asrs	r6, r6, #1
 8004f26:	3708      	adds	r7, #8
 8004f28:	e777      	b.n	8004e1a <_dtoa_r+0x3ca>
 8004f2a:	2502      	movs	r5, #2
 8004f2c:	e779      	b.n	8004e22 <_dtoa_r+0x3d2>
 8004f2e:	9f00      	ldr	r7, [sp, #0]
 8004f30:	9e03      	ldr	r6, [sp, #12]
 8004f32:	e794      	b.n	8004e5e <_dtoa_r+0x40e>
 8004f34:	9901      	ldr	r1, [sp, #4]
 8004f36:	4b4c      	ldr	r3, [pc, #304]	; (8005068 <_dtoa_r+0x618>)
 8004f38:	4431      	add	r1, r6
 8004f3a:	910d      	str	r1, [sp, #52]	; 0x34
 8004f3c:	9908      	ldr	r1, [sp, #32]
 8004f3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004f42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004f46:	2900      	cmp	r1, #0
 8004f48:	d043      	beq.n	8004fd2 <_dtoa_r+0x582>
 8004f4a:	494d      	ldr	r1, [pc, #308]	; (8005080 <_dtoa_r+0x630>)
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f7fb fcfd 	bl	800094c <__aeabi_ddiv>
 8004f52:	4652      	mov	r2, sl
 8004f54:	465b      	mov	r3, fp
 8004f56:	f7fb fa17 	bl	8000388 <__aeabi_dsub>
 8004f5a:	9d01      	ldr	r5, [sp, #4]
 8004f5c:	4682      	mov	sl, r0
 8004f5e:	468b      	mov	fp, r1
 8004f60:	4649      	mov	r1, r9
 8004f62:	4640      	mov	r0, r8
 8004f64:	f7fb fe78 	bl	8000c58 <__aeabi_d2iz>
 8004f68:	4606      	mov	r6, r0
 8004f6a:	f7fb fb5b 	bl	8000624 <__aeabi_i2d>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4640      	mov	r0, r8
 8004f74:	4649      	mov	r1, r9
 8004f76:	f7fb fa07 	bl	8000388 <__aeabi_dsub>
 8004f7a:	3630      	adds	r6, #48	; 0x30
 8004f7c:	f805 6b01 	strb.w	r6, [r5], #1
 8004f80:	4652      	mov	r2, sl
 8004f82:	465b      	mov	r3, fp
 8004f84:	4680      	mov	r8, r0
 8004f86:	4689      	mov	r9, r1
 8004f88:	f7fb fe28 	bl	8000bdc <__aeabi_dcmplt>
 8004f8c:	2800      	cmp	r0, #0
 8004f8e:	d163      	bne.n	8005058 <_dtoa_r+0x608>
 8004f90:	4642      	mov	r2, r8
 8004f92:	464b      	mov	r3, r9
 8004f94:	4936      	ldr	r1, [pc, #216]	; (8005070 <_dtoa_r+0x620>)
 8004f96:	2000      	movs	r0, #0
 8004f98:	f7fb f9f6 	bl	8000388 <__aeabi_dsub>
 8004f9c:	4652      	mov	r2, sl
 8004f9e:	465b      	mov	r3, fp
 8004fa0:	f7fb fe1c 	bl	8000bdc <__aeabi_dcmplt>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	f040 80b5 	bne.w	8005114 <_dtoa_r+0x6c4>
 8004faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fac:	429d      	cmp	r5, r3
 8004fae:	d081      	beq.n	8004eb4 <_dtoa_r+0x464>
 8004fb0:	4b30      	ldr	r3, [pc, #192]	; (8005074 <_dtoa_r+0x624>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4650      	mov	r0, sl
 8004fb6:	4659      	mov	r1, fp
 8004fb8:	f7fb fb9e 	bl	80006f8 <__aeabi_dmul>
 8004fbc:	4b2d      	ldr	r3, [pc, #180]	; (8005074 <_dtoa_r+0x624>)
 8004fbe:	4682      	mov	sl, r0
 8004fc0:	468b      	mov	fp, r1
 8004fc2:	4640      	mov	r0, r8
 8004fc4:	4649      	mov	r1, r9
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f7fb fb96 	bl	80006f8 <__aeabi_dmul>
 8004fcc:	4680      	mov	r8, r0
 8004fce:	4689      	mov	r9, r1
 8004fd0:	e7c6      	b.n	8004f60 <_dtoa_r+0x510>
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	f7fb fb8f 	bl	80006f8 <__aeabi_dmul>
 8004fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fdc:	9d01      	ldr	r5, [sp, #4]
 8004fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8004fe0:	4682      	mov	sl, r0
 8004fe2:	468b      	mov	fp, r1
 8004fe4:	4649      	mov	r1, r9
 8004fe6:	4640      	mov	r0, r8
 8004fe8:	f7fb fe36 	bl	8000c58 <__aeabi_d2iz>
 8004fec:	4606      	mov	r6, r0
 8004fee:	f7fb fb19 	bl	8000624 <__aeabi_i2d>
 8004ff2:	3630      	adds	r6, #48	; 0x30
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4640      	mov	r0, r8
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	f7fb f9c4 	bl	8000388 <__aeabi_dsub>
 8005000:	f805 6b01 	strb.w	r6, [r5], #1
 8005004:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005006:	429d      	cmp	r5, r3
 8005008:	4680      	mov	r8, r0
 800500a:	4689      	mov	r9, r1
 800500c:	f04f 0200 	mov.w	r2, #0
 8005010:	d124      	bne.n	800505c <_dtoa_r+0x60c>
 8005012:	4b1b      	ldr	r3, [pc, #108]	; (8005080 <_dtoa_r+0x630>)
 8005014:	4650      	mov	r0, sl
 8005016:	4659      	mov	r1, fp
 8005018:	f7fb f9b8 	bl	800038c <__adddf3>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4640      	mov	r0, r8
 8005022:	4649      	mov	r1, r9
 8005024:	f7fb fdf8 	bl	8000c18 <__aeabi_dcmpgt>
 8005028:	2800      	cmp	r0, #0
 800502a:	d173      	bne.n	8005114 <_dtoa_r+0x6c4>
 800502c:	4652      	mov	r2, sl
 800502e:	465b      	mov	r3, fp
 8005030:	4913      	ldr	r1, [pc, #76]	; (8005080 <_dtoa_r+0x630>)
 8005032:	2000      	movs	r0, #0
 8005034:	f7fb f9a8 	bl	8000388 <__aeabi_dsub>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4640      	mov	r0, r8
 800503e:	4649      	mov	r1, r9
 8005040:	f7fb fdcc 	bl	8000bdc <__aeabi_dcmplt>
 8005044:	2800      	cmp	r0, #0
 8005046:	f43f af35 	beq.w	8004eb4 <_dtoa_r+0x464>
 800504a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800504c:	1e6b      	subs	r3, r5, #1
 800504e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005050:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005054:	2b30      	cmp	r3, #48	; 0x30
 8005056:	d0f8      	beq.n	800504a <_dtoa_r+0x5fa>
 8005058:	9700      	str	r7, [sp, #0]
 800505a:	e049      	b.n	80050f0 <_dtoa_r+0x6a0>
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <_dtoa_r+0x624>)
 800505e:	f7fb fb4b 	bl	80006f8 <__aeabi_dmul>
 8005062:	4680      	mov	r8, r0
 8005064:	4689      	mov	r9, r1
 8005066:	e7bd      	b.n	8004fe4 <_dtoa_r+0x594>
 8005068:	080099a0 	.word	0x080099a0
 800506c:	08009978 	.word	0x08009978
 8005070:	3ff00000 	.word	0x3ff00000
 8005074:	40240000 	.word	0x40240000
 8005078:	401c0000 	.word	0x401c0000
 800507c:	40140000 	.word	0x40140000
 8005080:	3fe00000 	.word	0x3fe00000
 8005084:	9d01      	ldr	r5, [sp, #4]
 8005086:	4656      	mov	r6, sl
 8005088:	465f      	mov	r7, fp
 800508a:	4642      	mov	r2, r8
 800508c:	464b      	mov	r3, r9
 800508e:	4630      	mov	r0, r6
 8005090:	4639      	mov	r1, r7
 8005092:	f7fb fc5b 	bl	800094c <__aeabi_ddiv>
 8005096:	f7fb fddf 	bl	8000c58 <__aeabi_d2iz>
 800509a:	4682      	mov	sl, r0
 800509c:	f7fb fac2 	bl	8000624 <__aeabi_i2d>
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	f7fb fb28 	bl	80006f8 <__aeabi_dmul>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	4630      	mov	r0, r6
 80050ae:	4639      	mov	r1, r7
 80050b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80050b4:	f7fb f968 	bl	8000388 <__aeabi_dsub>
 80050b8:	f805 6b01 	strb.w	r6, [r5], #1
 80050bc:	9e01      	ldr	r6, [sp, #4]
 80050be:	9f03      	ldr	r7, [sp, #12]
 80050c0:	1bae      	subs	r6, r5, r6
 80050c2:	42b7      	cmp	r7, r6
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	d135      	bne.n	8005136 <_dtoa_r+0x6e6>
 80050ca:	f7fb f95f 	bl	800038c <__adddf3>
 80050ce:	4642      	mov	r2, r8
 80050d0:	464b      	mov	r3, r9
 80050d2:	4606      	mov	r6, r0
 80050d4:	460f      	mov	r7, r1
 80050d6:	f7fb fd9f 	bl	8000c18 <__aeabi_dcmpgt>
 80050da:	b9d0      	cbnz	r0, 8005112 <_dtoa_r+0x6c2>
 80050dc:	4642      	mov	r2, r8
 80050de:	464b      	mov	r3, r9
 80050e0:	4630      	mov	r0, r6
 80050e2:	4639      	mov	r1, r7
 80050e4:	f7fb fd70 	bl	8000bc8 <__aeabi_dcmpeq>
 80050e8:	b110      	cbz	r0, 80050f0 <_dtoa_r+0x6a0>
 80050ea:	f01a 0f01 	tst.w	sl, #1
 80050ee:	d110      	bne.n	8005112 <_dtoa_r+0x6c2>
 80050f0:	4620      	mov	r0, r4
 80050f2:	ee18 1a10 	vmov	r1, s16
 80050f6:	f000 fd13 	bl	8005b20 <_Bfree>
 80050fa:	2300      	movs	r3, #0
 80050fc:	9800      	ldr	r0, [sp, #0]
 80050fe:	702b      	strb	r3, [r5, #0]
 8005100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005102:	3001      	adds	r0, #1
 8005104:	6018      	str	r0, [r3, #0]
 8005106:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005108:	2b00      	cmp	r3, #0
 800510a:	f43f acf1 	beq.w	8004af0 <_dtoa_r+0xa0>
 800510e:	601d      	str	r5, [r3, #0]
 8005110:	e4ee      	b.n	8004af0 <_dtoa_r+0xa0>
 8005112:	9f00      	ldr	r7, [sp, #0]
 8005114:	462b      	mov	r3, r5
 8005116:	461d      	mov	r5, r3
 8005118:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800511c:	2a39      	cmp	r2, #57	; 0x39
 800511e:	d106      	bne.n	800512e <_dtoa_r+0x6de>
 8005120:	9a01      	ldr	r2, [sp, #4]
 8005122:	429a      	cmp	r2, r3
 8005124:	d1f7      	bne.n	8005116 <_dtoa_r+0x6c6>
 8005126:	9901      	ldr	r1, [sp, #4]
 8005128:	2230      	movs	r2, #48	; 0x30
 800512a:	3701      	adds	r7, #1
 800512c:	700a      	strb	r2, [r1, #0]
 800512e:	781a      	ldrb	r2, [r3, #0]
 8005130:	3201      	adds	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
 8005134:	e790      	b.n	8005058 <_dtoa_r+0x608>
 8005136:	4ba6      	ldr	r3, [pc, #664]	; (80053d0 <_dtoa_r+0x980>)
 8005138:	2200      	movs	r2, #0
 800513a:	f7fb fadd 	bl	80006f8 <__aeabi_dmul>
 800513e:	2200      	movs	r2, #0
 8005140:	2300      	movs	r3, #0
 8005142:	4606      	mov	r6, r0
 8005144:	460f      	mov	r7, r1
 8005146:	f7fb fd3f 	bl	8000bc8 <__aeabi_dcmpeq>
 800514a:	2800      	cmp	r0, #0
 800514c:	d09d      	beq.n	800508a <_dtoa_r+0x63a>
 800514e:	e7cf      	b.n	80050f0 <_dtoa_r+0x6a0>
 8005150:	9a08      	ldr	r2, [sp, #32]
 8005152:	2a00      	cmp	r2, #0
 8005154:	f000 80d7 	beq.w	8005306 <_dtoa_r+0x8b6>
 8005158:	9a06      	ldr	r2, [sp, #24]
 800515a:	2a01      	cmp	r2, #1
 800515c:	f300 80ba 	bgt.w	80052d4 <_dtoa_r+0x884>
 8005160:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005162:	2a00      	cmp	r2, #0
 8005164:	f000 80b2 	beq.w	80052cc <_dtoa_r+0x87c>
 8005168:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800516c:	9e07      	ldr	r6, [sp, #28]
 800516e:	9d04      	ldr	r5, [sp, #16]
 8005170:	9a04      	ldr	r2, [sp, #16]
 8005172:	441a      	add	r2, r3
 8005174:	9204      	str	r2, [sp, #16]
 8005176:	9a05      	ldr	r2, [sp, #20]
 8005178:	2101      	movs	r1, #1
 800517a:	441a      	add	r2, r3
 800517c:	4620      	mov	r0, r4
 800517e:	9205      	str	r2, [sp, #20]
 8005180:	f000 fd86 	bl	8005c90 <__i2b>
 8005184:	4607      	mov	r7, r0
 8005186:	2d00      	cmp	r5, #0
 8005188:	dd0c      	ble.n	80051a4 <_dtoa_r+0x754>
 800518a:	9b05      	ldr	r3, [sp, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	dd09      	ble.n	80051a4 <_dtoa_r+0x754>
 8005190:	42ab      	cmp	r3, r5
 8005192:	9a04      	ldr	r2, [sp, #16]
 8005194:	bfa8      	it	ge
 8005196:	462b      	movge	r3, r5
 8005198:	1ad2      	subs	r2, r2, r3
 800519a:	9204      	str	r2, [sp, #16]
 800519c:	9a05      	ldr	r2, [sp, #20]
 800519e:	1aed      	subs	r5, r5, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	9305      	str	r3, [sp, #20]
 80051a4:	9b07      	ldr	r3, [sp, #28]
 80051a6:	b31b      	cbz	r3, 80051f0 <_dtoa_r+0x7a0>
 80051a8:	9b08      	ldr	r3, [sp, #32]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f000 80af 	beq.w	800530e <_dtoa_r+0x8be>
 80051b0:	2e00      	cmp	r6, #0
 80051b2:	dd13      	ble.n	80051dc <_dtoa_r+0x78c>
 80051b4:	4639      	mov	r1, r7
 80051b6:	4632      	mov	r2, r6
 80051b8:	4620      	mov	r0, r4
 80051ba:	f000 fe29 	bl	8005e10 <__pow5mult>
 80051be:	ee18 2a10 	vmov	r2, s16
 80051c2:	4601      	mov	r1, r0
 80051c4:	4607      	mov	r7, r0
 80051c6:	4620      	mov	r0, r4
 80051c8:	f000 fd78 	bl	8005cbc <__multiply>
 80051cc:	ee18 1a10 	vmov	r1, s16
 80051d0:	4680      	mov	r8, r0
 80051d2:	4620      	mov	r0, r4
 80051d4:	f000 fca4 	bl	8005b20 <_Bfree>
 80051d8:	ee08 8a10 	vmov	s16, r8
 80051dc:	9b07      	ldr	r3, [sp, #28]
 80051de:	1b9a      	subs	r2, r3, r6
 80051e0:	d006      	beq.n	80051f0 <_dtoa_r+0x7a0>
 80051e2:	ee18 1a10 	vmov	r1, s16
 80051e6:	4620      	mov	r0, r4
 80051e8:	f000 fe12 	bl	8005e10 <__pow5mult>
 80051ec:	ee08 0a10 	vmov	s16, r0
 80051f0:	2101      	movs	r1, #1
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 fd4c 	bl	8005c90 <__i2b>
 80051f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	4606      	mov	r6, r0
 80051fe:	f340 8088 	ble.w	8005312 <_dtoa_r+0x8c2>
 8005202:	461a      	mov	r2, r3
 8005204:	4601      	mov	r1, r0
 8005206:	4620      	mov	r0, r4
 8005208:	f000 fe02 	bl	8005e10 <__pow5mult>
 800520c:	9b06      	ldr	r3, [sp, #24]
 800520e:	2b01      	cmp	r3, #1
 8005210:	4606      	mov	r6, r0
 8005212:	f340 8081 	ble.w	8005318 <_dtoa_r+0x8c8>
 8005216:	f04f 0800 	mov.w	r8, #0
 800521a:	6933      	ldr	r3, [r6, #16]
 800521c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005220:	6918      	ldr	r0, [r3, #16]
 8005222:	f000 fce5 	bl	8005bf0 <__hi0bits>
 8005226:	f1c0 0020 	rsb	r0, r0, #32
 800522a:	9b05      	ldr	r3, [sp, #20]
 800522c:	4418      	add	r0, r3
 800522e:	f010 001f 	ands.w	r0, r0, #31
 8005232:	f000 8092 	beq.w	800535a <_dtoa_r+0x90a>
 8005236:	f1c0 0320 	rsb	r3, r0, #32
 800523a:	2b04      	cmp	r3, #4
 800523c:	f340 808a 	ble.w	8005354 <_dtoa_r+0x904>
 8005240:	f1c0 001c 	rsb	r0, r0, #28
 8005244:	9b04      	ldr	r3, [sp, #16]
 8005246:	4403      	add	r3, r0
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	9b05      	ldr	r3, [sp, #20]
 800524c:	4403      	add	r3, r0
 800524e:	4405      	add	r5, r0
 8005250:	9305      	str	r3, [sp, #20]
 8005252:	9b04      	ldr	r3, [sp, #16]
 8005254:	2b00      	cmp	r3, #0
 8005256:	dd07      	ble.n	8005268 <_dtoa_r+0x818>
 8005258:	ee18 1a10 	vmov	r1, s16
 800525c:	461a      	mov	r2, r3
 800525e:	4620      	mov	r0, r4
 8005260:	f000 fe30 	bl	8005ec4 <__lshift>
 8005264:	ee08 0a10 	vmov	s16, r0
 8005268:	9b05      	ldr	r3, [sp, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	dd05      	ble.n	800527a <_dtoa_r+0x82a>
 800526e:	4631      	mov	r1, r6
 8005270:	461a      	mov	r2, r3
 8005272:	4620      	mov	r0, r4
 8005274:	f000 fe26 	bl	8005ec4 <__lshift>
 8005278:	4606      	mov	r6, r0
 800527a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d06e      	beq.n	800535e <_dtoa_r+0x90e>
 8005280:	ee18 0a10 	vmov	r0, s16
 8005284:	4631      	mov	r1, r6
 8005286:	f000 fe8d 	bl	8005fa4 <__mcmp>
 800528a:	2800      	cmp	r0, #0
 800528c:	da67      	bge.n	800535e <_dtoa_r+0x90e>
 800528e:	9b00      	ldr	r3, [sp, #0]
 8005290:	3b01      	subs	r3, #1
 8005292:	ee18 1a10 	vmov	r1, s16
 8005296:	9300      	str	r3, [sp, #0]
 8005298:	220a      	movs	r2, #10
 800529a:	2300      	movs	r3, #0
 800529c:	4620      	mov	r0, r4
 800529e:	f000 fc61 	bl	8005b64 <__multadd>
 80052a2:	9b08      	ldr	r3, [sp, #32]
 80052a4:	ee08 0a10 	vmov	s16, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 81b1 	beq.w	8005610 <_dtoa_r+0xbc0>
 80052ae:	2300      	movs	r3, #0
 80052b0:	4639      	mov	r1, r7
 80052b2:	220a      	movs	r2, #10
 80052b4:	4620      	mov	r0, r4
 80052b6:	f000 fc55 	bl	8005b64 <__multadd>
 80052ba:	9b02      	ldr	r3, [sp, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	4607      	mov	r7, r0
 80052c0:	f300 808e 	bgt.w	80053e0 <_dtoa_r+0x990>
 80052c4:	9b06      	ldr	r3, [sp, #24]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	dc51      	bgt.n	800536e <_dtoa_r+0x91e>
 80052ca:	e089      	b.n	80053e0 <_dtoa_r+0x990>
 80052cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80052ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80052d2:	e74b      	b.n	800516c <_dtoa_r+0x71c>
 80052d4:	9b03      	ldr	r3, [sp, #12]
 80052d6:	1e5e      	subs	r6, r3, #1
 80052d8:	9b07      	ldr	r3, [sp, #28]
 80052da:	42b3      	cmp	r3, r6
 80052dc:	bfbf      	itttt	lt
 80052de:	9b07      	ldrlt	r3, [sp, #28]
 80052e0:	9607      	strlt	r6, [sp, #28]
 80052e2:	1af2      	sublt	r2, r6, r3
 80052e4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80052e6:	bfb6      	itet	lt
 80052e8:	189b      	addlt	r3, r3, r2
 80052ea:	1b9e      	subge	r6, r3, r6
 80052ec:	930a      	strlt	r3, [sp, #40]	; 0x28
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	bfb8      	it	lt
 80052f2:	2600      	movlt	r6, #0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	bfb7      	itett	lt
 80052f8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80052fc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005300:	1a9d      	sublt	r5, r3, r2
 8005302:	2300      	movlt	r3, #0
 8005304:	e734      	b.n	8005170 <_dtoa_r+0x720>
 8005306:	9e07      	ldr	r6, [sp, #28]
 8005308:	9d04      	ldr	r5, [sp, #16]
 800530a:	9f08      	ldr	r7, [sp, #32]
 800530c:	e73b      	b.n	8005186 <_dtoa_r+0x736>
 800530e:	9a07      	ldr	r2, [sp, #28]
 8005310:	e767      	b.n	80051e2 <_dtoa_r+0x792>
 8005312:	9b06      	ldr	r3, [sp, #24]
 8005314:	2b01      	cmp	r3, #1
 8005316:	dc18      	bgt.n	800534a <_dtoa_r+0x8fa>
 8005318:	f1ba 0f00 	cmp.w	sl, #0
 800531c:	d115      	bne.n	800534a <_dtoa_r+0x8fa>
 800531e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005322:	b993      	cbnz	r3, 800534a <_dtoa_r+0x8fa>
 8005324:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005328:	0d1b      	lsrs	r3, r3, #20
 800532a:	051b      	lsls	r3, r3, #20
 800532c:	b183      	cbz	r3, 8005350 <_dtoa_r+0x900>
 800532e:	9b04      	ldr	r3, [sp, #16]
 8005330:	3301      	adds	r3, #1
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	9b05      	ldr	r3, [sp, #20]
 8005336:	3301      	adds	r3, #1
 8005338:	9305      	str	r3, [sp, #20]
 800533a:	f04f 0801 	mov.w	r8, #1
 800533e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005340:	2b00      	cmp	r3, #0
 8005342:	f47f af6a 	bne.w	800521a <_dtoa_r+0x7ca>
 8005346:	2001      	movs	r0, #1
 8005348:	e76f      	b.n	800522a <_dtoa_r+0x7da>
 800534a:	f04f 0800 	mov.w	r8, #0
 800534e:	e7f6      	b.n	800533e <_dtoa_r+0x8ee>
 8005350:	4698      	mov	r8, r3
 8005352:	e7f4      	b.n	800533e <_dtoa_r+0x8ee>
 8005354:	f43f af7d 	beq.w	8005252 <_dtoa_r+0x802>
 8005358:	4618      	mov	r0, r3
 800535a:	301c      	adds	r0, #28
 800535c:	e772      	b.n	8005244 <_dtoa_r+0x7f4>
 800535e:	9b03      	ldr	r3, [sp, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	dc37      	bgt.n	80053d4 <_dtoa_r+0x984>
 8005364:	9b06      	ldr	r3, [sp, #24]
 8005366:	2b02      	cmp	r3, #2
 8005368:	dd34      	ble.n	80053d4 <_dtoa_r+0x984>
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	9302      	str	r3, [sp, #8]
 800536e:	9b02      	ldr	r3, [sp, #8]
 8005370:	b96b      	cbnz	r3, 800538e <_dtoa_r+0x93e>
 8005372:	4631      	mov	r1, r6
 8005374:	2205      	movs	r2, #5
 8005376:	4620      	mov	r0, r4
 8005378:	f000 fbf4 	bl	8005b64 <__multadd>
 800537c:	4601      	mov	r1, r0
 800537e:	4606      	mov	r6, r0
 8005380:	ee18 0a10 	vmov	r0, s16
 8005384:	f000 fe0e 	bl	8005fa4 <__mcmp>
 8005388:	2800      	cmp	r0, #0
 800538a:	f73f adbb 	bgt.w	8004f04 <_dtoa_r+0x4b4>
 800538e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005390:	9d01      	ldr	r5, [sp, #4]
 8005392:	43db      	mvns	r3, r3
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	f04f 0800 	mov.w	r8, #0
 800539a:	4631      	mov	r1, r6
 800539c:	4620      	mov	r0, r4
 800539e:	f000 fbbf 	bl	8005b20 <_Bfree>
 80053a2:	2f00      	cmp	r7, #0
 80053a4:	f43f aea4 	beq.w	80050f0 <_dtoa_r+0x6a0>
 80053a8:	f1b8 0f00 	cmp.w	r8, #0
 80053ac:	d005      	beq.n	80053ba <_dtoa_r+0x96a>
 80053ae:	45b8      	cmp	r8, r7
 80053b0:	d003      	beq.n	80053ba <_dtoa_r+0x96a>
 80053b2:	4641      	mov	r1, r8
 80053b4:	4620      	mov	r0, r4
 80053b6:	f000 fbb3 	bl	8005b20 <_Bfree>
 80053ba:	4639      	mov	r1, r7
 80053bc:	4620      	mov	r0, r4
 80053be:	f000 fbaf 	bl	8005b20 <_Bfree>
 80053c2:	e695      	b.n	80050f0 <_dtoa_r+0x6a0>
 80053c4:	2600      	movs	r6, #0
 80053c6:	4637      	mov	r7, r6
 80053c8:	e7e1      	b.n	800538e <_dtoa_r+0x93e>
 80053ca:	9700      	str	r7, [sp, #0]
 80053cc:	4637      	mov	r7, r6
 80053ce:	e599      	b.n	8004f04 <_dtoa_r+0x4b4>
 80053d0:	40240000 	.word	0x40240000
 80053d4:	9b08      	ldr	r3, [sp, #32]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 80ca 	beq.w	8005570 <_dtoa_r+0xb20>
 80053dc:	9b03      	ldr	r3, [sp, #12]
 80053de:	9302      	str	r3, [sp, #8]
 80053e0:	2d00      	cmp	r5, #0
 80053e2:	dd05      	ble.n	80053f0 <_dtoa_r+0x9a0>
 80053e4:	4639      	mov	r1, r7
 80053e6:	462a      	mov	r2, r5
 80053e8:	4620      	mov	r0, r4
 80053ea:	f000 fd6b 	bl	8005ec4 <__lshift>
 80053ee:	4607      	mov	r7, r0
 80053f0:	f1b8 0f00 	cmp.w	r8, #0
 80053f4:	d05b      	beq.n	80054ae <_dtoa_r+0xa5e>
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4620      	mov	r0, r4
 80053fa:	f000 fb51 	bl	8005aa0 <_Balloc>
 80053fe:	4605      	mov	r5, r0
 8005400:	b928      	cbnz	r0, 800540e <_dtoa_r+0x9be>
 8005402:	4b87      	ldr	r3, [pc, #540]	; (8005620 <_dtoa_r+0xbd0>)
 8005404:	4602      	mov	r2, r0
 8005406:	f240 21ea 	movw	r1, #746	; 0x2ea
 800540a:	f7ff bb3b 	b.w	8004a84 <_dtoa_r+0x34>
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	3202      	adds	r2, #2
 8005412:	0092      	lsls	r2, r2, #2
 8005414:	f107 010c 	add.w	r1, r7, #12
 8005418:	300c      	adds	r0, #12
 800541a:	f000 fb33 	bl	8005a84 <memcpy>
 800541e:	2201      	movs	r2, #1
 8005420:	4629      	mov	r1, r5
 8005422:	4620      	mov	r0, r4
 8005424:	f000 fd4e 	bl	8005ec4 <__lshift>
 8005428:	9b01      	ldr	r3, [sp, #4]
 800542a:	f103 0901 	add.w	r9, r3, #1
 800542e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005432:	4413      	add	r3, r2
 8005434:	9305      	str	r3, [sp, #20]
 8005436:	f00a 0301 	and.w	r3, sl, #1
 800543a:	46b8      	mov	r8, r7
 800543c:	9304      	str	r3, [sp, #16]
 800543e:	4607      	mov	r7, r0
 8005440:	4631      	mov	r1, r6
 8005442:	ee18 0a10 	vmov	r0, s16
 8005446:	f7ff fa77 	bl	8004938 <quorem>
 800544a:	4641      	mov	r1, r8
 800544c:	9002      	str	r0, [sp, #8]
 800544e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005452:	ee18 0a10 	vmov	r0, s16
 8005456:	f000 fda5 	bl	8005fa4 <__mcmp>
 800545a:	463a      	mov	r2, r7
 800545c:	9003      	str	r0, [sp, #12]
 800545e:	4631      	mov	r1, r6
 8005460:	4620      	mov	r0, r4
 8005462:	f000 fdbb 	bl	8005fdc <__mdiff>
 8005466:	68c2      	ldr	r2, [r0, #12]
 8005468:	f109 3bff 	add.w	fp, r9, #4294967295
 800546c:	4605      	mov	r5, r0
 800546e:	bb02      	cbnz	r2, 80054b2 <_dtoa_r+0xa62>
 8005470:	4601      	mov	r1, r0
 8005472:	ee18 0a10 	vmov	r0, s16
 8005476:	f000 fd95 	bl	8005fa4 <__mcmp>
 800547a:	4602      	mov	r2, r0
 800547c:	4629      	mov	r1, r5
 800547e:	4620      	mov	r0, r4
 8005480:	9207      	str	r2, [sp, #28]
 8005482:	f000 fb4d 	bl	8005b20 <_Bfree>
 8005486:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800548a:	ea43 0102 	orr.w	r1, r3, r2
 800548e:	9b04      	ldr	r3, [sp, #16]
 8005490:	430b      	orrs	r3, r1
 8005492:	464d      	mov	r5, r9
 8005494:	d10f      	bne.n	80054b6 <_dtoa_r+0xa66>
 8005496:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800549a:	d02a      	beq.n	80054f2 <_dtoa_r+0xaa2>
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dd02      	ble.n	80054a8 <_dtoa_r+0xa58>
 80054a2:	9b02      	ldr	r3, [sp, #8]
 80054a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80054a8:	f88b a000 	strb.w	sl, [fp]
 80054ac:	e775      	b.n	800539a <_dtoa_r+0x94a>
 80054ae:	4638      	mov	r0, r7
 80054b0:	e7ba      	b.n	8005428 <_dtoa_r+0x9d8>
 80054b2:	2201      	movs	r2, #1
 80054b4:	e7e2      	b.n	800547c <_dtoa_r+0xa2c>
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	db04      	blt.n	80054c6 <_dtoa_r+0xa76>
 80054bc:	9906      	ldr	r1, [sp, #24]
 80054be:	430b      	orrs	r3, r1
 80054c0:	9904      	ldr	r1, [sp, #16]
 80054c2:	430b      	orrs	r3, r1
 80054c4:	d122      	bne.n	800550c <_dtoa_r+0xabc>
 80054c6:	2a00      	cmp	r2, #0
 80054c8:	ddee      	ble.n	80054a8 <_dtoa_r+0xa58>
 80054ca:	ee18 1a10 	vmov	r1, s16
 80054ce:	2201      	movs	r2, #1
 80054d0:	4620      	mov	r0, r4
 80054d2:	f000 fcf7 	bl	8005ec4 <__lshift>
 80054d6:	4631      	mov	r1, r6
 80054d8:	ee08 0a10 	vmov	s16, r0
 80054dc:	f000 fd62 	bl	8005fa4 <__mcmp>
 80054e0:	2800      	cmp	r0, #0
 80054e2:	dc03      	bgt.n	80054ec <_dtoa_r+0xa9c>
 80054e4:	d1e0      	bne.n	80054a8 <_dtoa_r+0xa58>
 80054e6:	f01a 0f01 	tst.w	sl, #1
 80054ea:	d0dd      	beq.n	80054a8 <_dtoa_r+0xa58>
 80054ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80054f0:	d1d7      	bne.n	80054a2 <_dtoa_r+0xa52>
 80054f2:	2339      	movs	r3, #57	; 0x39
 80054f4:	f88b 3000 	strb.w	r3, [fp]
 80054f8:	462b      	mov	r3, r5
 80054fa:	461d      	mov	r5, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005502:	2a39      	cmp	r2, #57	; 0x39
 8005504:	d071      	beq.n	80055ea <_dtoa_r+0xb9a>
 8005506:	3201      	adds	r2, #1
 8005508:	701a      	strb	r2, [r3, #0]
 800550a:	e746      	b.n	800539a <_dtoa_r+0x94a>
 800550c:	2a00      	cmp	r2, #0
 800550e:	dd07      	ble.n	8005520 <_dtoa_r+0xad0>
 8005510:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005514:	d0ed      	beq.n	80054f2 <_dtoa_r+0xaa2>
 8005516:	f10a 0301 	add.w	r3, sl, #1
 800551a:	f88b 3000 	strb.w	r3, [fp]
 800551e:	e73c      	b.n	800539a <_dtoa_r+0x94a>
 8005520:	9b05      	ldr	r3, [sp, #20]
 8005522:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005526:	4599      	cmp	r9, r3
 8005528:	d047      	beq.n	80055ba <_dtoa_r+0xb6a>
 800552a:	ee18 1a10 	vmov	r1, s16
 800552e:	2300      	movs	r3, #0
 8005530:	220a      	movs	r2, #10
 8005532:	4620      	mov	r0, r4
 8005534:	f000 fb16 	bl	8005b64 <__multadd>
 8005538:	45b8      	cmp	r8, r7
 800553a:	ee08 0a10 	vmov	s16, r0
 800553e:	f04f 0300 	mov.w	r3, #0
 8005542:	f04f 020a 	mov.w	r2, #10
 8005546:	4641      	mov	r1, r8
 8005548:	4620      	mov	r0, r4
 800554a:	d106      	bne.n	800555a <_dtoa_r+0xb0a>
 800554c:	f000 fb0a 	bl	8005b64 <__multadd>
 8005550:	4680      	mov	r8, r0
 8005552:	4607      	mov	r7, r0
 8005554:	f109 0901 	add.w	r9, r9, #1
 8005558:	e772      	b.n	8005440 <_dtoa_r+0x9f0>
 800555a:	f000 fb03 	bl	8005b64 <__multadd>
 800555e:	4639      	mov	r1, r7
 8005560:	4680      	mov	r8, r0
 8005562:	2300      	movs	r3, #0
 8005564:	220a      	movs	r2, #10
 8005566:	4620      	mov	r0, r4
 8005568:	f000 fafc 	bl	8005b64 <__multadd>
 800556c:	4607      	mov	r7, r0
 800556e:	e7f1      	b.n	8005554 <_dtoa_r+0xb04>
 8005570:	9b03      	ldr	r3, [sp, #12]
 8005572:	9302      	str	r3, [sp, #8]
 8005574:	9d01      	ldr	r5, [sp, #4]
 8005576:	ee18 0a10 	vmov	r0, s16
 800557a:	4631      	mov	r1, r6
 800557c:	f7ff f9dc 	bl	8004938 <quorem>
 8005580:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005584:	9b01      	ldr	r3, [sp, #4]
 8005586:	f805 ab01 	strb.w	sl, [r5], #1
 800558a:	1aea      	subs	r2, r5, r3
 800558c:	9b02      	ldr	r3, [sp, #8]
 800558e:	4293      	cmp	r3, r2
 8005590:	dd09      	ble.n	80055a6 <_dtoa_r+0xb56>
 8005592:	ee18 1a10 	vmov	r1, s16
 8005596:	2300      	movs	r3, #0
 8005598:	220a      	movs	r2, #10
 800559a:	4620      	mov	r0, r4
 800559c:	f000 fae2 	bl	8005b64 <__multadd>
 80055a0:	ee08 0a10 	vmov	s16, r0
 80055a4:	e7e7      	b.n	8005576 <_dtoa_r+0xb26>
 80055a6:	9b02      	ldr	r3, [sp, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	bfc8      	it	gt
 80055ac:	461d      	movgt	r5, r3
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	bfd8      	it	le
 80055b2:	2501      	movle	r5, #1
 80055b4:	441d      	add	r5, r3
 80055b6:	f04f 0800 	mov.w	r8, #0
 80055ba:	ee18 1a10 	vmov	r1, s16
 80055be:	2201      	movs	r2, #1
 80055c0:	4620      	mov	r0, r4
 80055c2:	f000 fc7f 	bl	8005ec4 <__lshift>
 80055c6:	4631      	mov	r1, r6
 80055c8:	ee08 0a10 	vmov	s16, r0
 80055cc:	f000 fcea 	bl	8005fa4 <__mcmp>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	dc91      	bgt.n	80054f8 <_dtoa_r+0xaa8>
 80055d4:	d102      	bne.n	80055dc <_dtoa_r+0xb8c>
 80055d6:	f01a 0f01 	tst.w	sl, #1
 80055da:	d18d      	bne.n	80054f8 <_dtoa_r+0xaa8>
 80055dc:	462b      	mov	r3, r5
 80055de:	461d      	mov	r5, r3
 80055e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80055e4:	2a30      	cmp	r2, #48	; 0x30
 80055e6:	d0fa      	beq.n	80055de <_dtoa_r+0xb8e>
 80055e8:	e6d7      	b.n	800539a <_dtoa_r+0x94a>
 80055ea:	9a01      	ldr	r2, [sp, #4]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d184      	bne.n	80054fa <_dtoa_r+0xaaa>
 80055f0:	9b00      	ldr	r3, [sp, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	2331      	movs	r3, #49	; 0x31
 80055f8:	7013      	strb	r3, [r2, #0]
 80055fa:	e6ce      	b.n	800539a <_dtoa_r+0x94a>
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <_dtoa_r+0xbd4>)
 80055fe:	f7ff ba95 	b.w	8004b2c <_dtoa_r+0xdc>
 8005602:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005604:	2b00      	cmp	r3, #0
 8005606:	f47f aa6e 	bne.w	8004ae6 <_dtoa_r+0x96>
 800560a:	4b07      	ldr	r3, [pc, #28]	; (8005628 <_dtoa_r+0xbd8>)
 800560c:	f7ff ba8e 	b.w	8004b2c <_dtoa_r+0xdc>
 8005610:	9b02      	ldr	r3, [sp, #8]
 8005612:	2b00      	cmp	r3, #0
 8005614:	dcae      	bgt.n	8005574 <_dtoa_r+0xb24>
 8005616:	9b06      	ldr	r3, [sp, #24]
 8005618:	2b02      	cmp	r3, #2
 800561a:	f73f aea8 	bgt.w	800536e <_dtoa_r+0x91e>
 800561e:	e7a9      	b.n	8005574 <_dtoa_r+0xb24>
 8005620:	080098ab 	.word	0x080098ab
 8005624:	08009808 	.word	0x08009808
 8005628:	0800982c 	.word	0x0800982c

0800562c <__sflush_r>:
 800562c:	898a      	ldrh	r2, [r1, #12]
 800562e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005632:	4605      	mov	r5, r0
 8005634:	0710      	lsls	r0, r2, #28
 8005636:	460c      	mov	r4, r1
 8005638:	d458      	bmi.n	80056ec <__sflush_r+0xc0>
 800563a:	684b      	ldr	r3, [r1, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	dc05      	bgt.n	800564c <__sflush_r+0x20>
 8005640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005642:	2b00      	cmp	r3, #0
 8005644:	dc02      	bgt.n	800564c <__sflush_r+0x20>
 8005646:	2000      	movs	r0, #0
 8005648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800564c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800564e:	2e00      	cmp	r6, #0
 8005650:	d0f9      	beq.n	8005646 <__sflush_r+0x1a>
 8005652:	2300      	movs	r3, #0
 8005654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005658:	682f      	ldr	r7, [r5, #0]
 800565a:	602b      	str	r3, [r5, #0]
 800565c:	d032      	beq.n	80056c4 <__sflush_r+0x98>
 800565e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	075a      	lsls	r2, r3, #29
 8005664:	d505      	bpl.n	8005672 <__sflush_r+0x46>
 8005666:	6863      	ldr	r3, [r4, #4]
 8005668:	1ac0      	subs	r0, r0, r3
 800566a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800566c:	b10b      	cbz	r3, 8005672 <__sflush_r+0x46>
 800566e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005670:	1ac0      	subs	r0, r0, r3
 8005672:	2300      	movs	r3, #0
 8005674:	4602      	mov	r2, r0
 8005676:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005678:	6a21      	ldr	r1, [r4, #32]
 800567a:	4628      	mov	r0, r5
 800567c:	47b0      	blx	r6
 800567e:	1c43      	adds	r3, r0, #1
 8005680:	89a3      	ldrh	r3, [r4, #12]
 8005682:	d106      	bne.n	8005692 <__sflush_r+0x66>
 8005684:	6829      	ldr	r1, [r5, #0]
 8005686:	291d      	cmp	r1, #29
 8005688:	d82c      	bhi.n	80056e4 <__sflush_r+0xb8>
 800568a:	4a2a      	ldr	r2, [pc, #168]	; (8005734 <__sflush_r+0x108>)
 800568c:	40ca      	lsrs	r2, r1
 800568e:	07d6      	lsls	r6, r2, #31
 8005690:	d528      	bpl.n	80056e4 <__sflush_r+0xb8>
 8005692:	2200      	movs	r2, #0
 8005694:	6062      	str	r2, [r4, #4]
 8005696:	04d9      	lsls	r1, r3, #19
 8005698:	6922      	ldr	r2, [r4, #16]
 800569a:	6022      	str	r2, [r4, #0]
 800569c:	d504      	bpl.n	80056a8 <__sflush_r+0x7c>
 800569e:	1c42      	adds	r2, r0, #1
 80056a0:	d101      	bne.n	80056a6 <__sflush_r+0x7a>
 80056a2:	682b      	ldr	r3, [r5, #0]
 80056a4:	b903      	cbnz	r3, 80056a8 <__sflush_r+0x7c>
 80056a6:	6560      	str	r0, [r4, #84]	; 0x54
 80056a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80056aa:	602f      	str	r7, [r5, #0]
 80056ac:	2900      	cmp	r1, #0
 80056ae:	d0ca      	beq.n	8005646 <__sflush_r+0x1a>
 80056b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056b4:	4299      	cmp	r1, r3
 80056b6:	d002      	beq.n	80056be <__sflush_r+0x92>
 80056b8:	4628      	mov	r0, r5
 80056ba:	f000 fd8b 	bl	80061d4 <_free_r>
 80056be:	2000      	movs	r0, #0
 80056c0:	6360      	str	r0, [r4, #52]	; 0x34
 80056c2:	e7c1      	b.n	8005648 <__sflush_r+0x1c>
 80056c4:	6a21      	ldr	r1, [r4, #32]
 80056c6:	2301      	movs	r3, #1
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b0      	blx	r6
 80056cc:	1c41      	adds	r1, r0, #1
 80056ce:	d1c7      	bne.n	8005660 <__sflush_r+0x34>
 80056d0:	682b      	ldr	r3, [r5, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0c4      	beq.n	8005660 <__sflush_r+0x34>
 80056d6:	2b1d      	cmp	r3, #29
 80056d8:	d001      	beq.n	80056de <__sflush_r+0xb2>
 80056da:	2b16      	cmp	r3, #22
 80056dc:	d101      	bne.n	80056e2 <__sflush_r+0xb6>
 80056de:	602f      	str	r7, [r5, #0]
 80056e0:	e7b1      	b.n	8005646 <__sflush_r+0x1a>
 80056e2:	89a3      	ldrh	r3, [r4, #12]
 80056e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056e8:	81a3      	strh	r3, [r4, #12]
 80056ea:	e7ad      	b.n	8005648 <__sflush_r+0x1c>
 80056ec:	690f      	ldr	r7, [r1, #16]
 80056ee:	2f00      	cmp	r7, #0
 80056f0:	d0a9      	beq.n	8005646 <__sflush_r+0x1a>
 80056f2:	0793      	lsls	r3, r2, #30
 80056f4:	680e      	ldr	r6, [r1, #0]
 80056f6:	bf08      	it	eq
 80056f8:	694b      	ldreq	r3, [r1, #20]
 80056fa:	600f      	str	r7, [r1, #0]
 80056fc:	bf18      	it	ne
 80056fe:	2300      	movne	r3, #0
 8005700:	eba6 0807 	sub.w	r8, r6, r7
 8005704:	608b      	str	r3, [r1, #8]
 8005706:	f1b8 0f00 	cmp.w	r8, #0
 800570a:	dd9c      	ble.n	8005646 <__sflush_r+0x1a>
 800570c:	6a21      	ldr	r1, [r4, #32]
 800570e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005710:	4643      	mov	r3, r8
 8005712:	463a      	mov	r2, r7
 8005714:	4628      	mov	r0, r5
 8005716:	47b0      	blx	r6
 8005718:	2800      	cmp	r0, #0
 800571a:	dc06      	bgt.n	800572a <__sflush_r+0xfe>
 800571c:	89a3      	ldrh	r3, [r4, #12]
 800571e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	f04f 30ff 	mov.w	r0, #4294967295
 8005728:	e78e      	b.n	8005648 <__sflush_r+0x1c>
 800572a:	4407      	add	r7, r0
 800572c:	eba8 0800 	sub.w	r8, r8, r0
 8005730:	e7e9      	b.n	8005706 <__sflush_r+0xda>
 8005732:	bf00      	nop
 8005734:	20400001 	.word	0x20400001

08005738 <_fflush_r>:
 8005738:	b538      	push	{r3, r4, r5, lr}
 800573a:	690b      	ldr	r3, [r1, #16]
 800573c:	4605      	mov	r5, r0
 800573e:	460c      	mov	r4, r1
 8005740:	b913      	cbnz	r3, 8005748 <_fflush_r+0x10>
 8005742:	2500      	movs	r5, #0
 8005744:	4628      	mov	r0, r5
 8005746:	bd38      	pop	{r3, r4, r5, pc}
 8005748:	b118      	cbz	r0, 8005752 <_fflush_r+0x1a>
 800574a:	6983      	ldr	r3, [r0, #24]
 800574c:	b90b      	cbnz	r3, 8005752 <_fflush_r+0x1a>
 800574e:	f000 f887 	bl	8005860 <__sinit>
 8005752:	4b14      	ldr	r3, [pc, #80]	; (80057a4 <_fflush_r+0x6c>)
 8005754:	429c      	cmp	r4, r3
 8005756:	d11b      	bne.n	8005790 <_fflush_r+0x58>
 8005758:	686c      	ldr	r4, [r5, #4]
 800575a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d0ef      	beq.n	8005742 <_fflush_r+0xa>
 8005762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005764:	07d0      	lsls	r0, r2, #31
 8005766:	d404      	bmi.n	8005772 <_fflush_r+0x3a>
 8005768:	0599      	lsls	r1, r3, #22
 800576a:	d402      	bmi.n	8005772 <_fflush_r+0x3a>
 800576c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800576e:	f000 f91a 	bl	80059a6 <__retarget_lock_acquire_recursive>
 8005772:	4628      	mov	r0, r5
 8005774:	4621      	mov	r1, r4
 8005776:	f7ff ff59 	bl	800562c <__sflush_r>
 800577a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800577c:	07da      	lsls	r2, r3, #31
 800577e:	4605      	mov	r5, r0
 8005780:	d4e0      	bmi.n	8005744 <_fflush_r+0xc>
 8005782:	89a3      	ldrh	r3, [r4, #12]
 8005784:	059b      	lsls	r3, r3, #22
 8005786:	d4dd      	bmi.n	8005744 <_fflush_r+0xc>
 8005788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800578a:	f000 f90d 	bl	80059a8 <__retarget_lock_release_recursive>
 800578e:	e7d9      	b.n	8005744 <_fflush_r+0xc>
 8005790:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <_fflush_r+0x70>)
 8005792:	429c      	cmp	r4, r3
 8005794:	d101      	bne.n	800579a <_fflush_r+0x62>
 8005796:	68ac      	ldr	r4, [r5, #8]
 8005798:	e7df      	b.n	800575a <_fflush_r+0x22>
 800579a:	4b04      	ldr	r3, [pc, #16]	; (80057ac <_fflush_r+0x74>)
 800579c:	429c      	cmp	r4, r3
 800579e:	bf08      	it	eq
 80057a0:	68ec      	ldreq	r4, [r5, #12]
 80057a2:	e7da      	b.n	800575a <_fflush_r+0x22>
 80057a4:	080098dc 	.word	0x080098dc
 80057a8:	080098fc 	.word	0x080098fc
 80057ac:	080098bc 	.word	0x080098bc

080057b0 <std>:
 80057b0:	2300      	movs	r3, #0
 80057b2:	b510      	push	{r4, lr}
 80057b4:	4604      	mov	r4, r0
 80057b6:	e9c0 3300 	strd	r3, r3, [r0]
 80057ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057be:	6083      	str	r3, [r0, #8]
 80057c0:	8181      	strh	r1, [r0, #12]
 80057c2:	6643      	str	r3, [r0, #100]	; 0x64
 80057c4:	81c2      	strh	r2, [r0, #14]
 80057c6:	6183      	str	r3, [r0, #24]
 80057c8:	4619      	mov	r1, r3
 80057ca:	2208      	movs	r2, #8
 80057cc:	305c      	adds	r0, #92	; 0x5c
 80057ce:	f7fe faf3 	bl	8003db8 <memset>
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <std+0x38>)
 80057d4:	6263      	str	r3, [r4, #36]	; 0x24
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <std+0x3c>)
 80057d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80057da:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <std+0x40>)
 80057dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057de:	4b05      	ldr	r3, [pc, #20]	; (80057f4 <std+0x44>)
 80057e0:	6224      	str	r4, [r4, #32]
 80057e2:	6323      	str	r3, [r4, #48]	; 0x30
 80057e4:	bd10      	pop	{r4, pc}
 80057e6:	bf00      	nop
 80057e8:	08006669 	.word	0x08006669
 80057ec:	0800668b 	.word	0x0800668b
 80057f0:	080066c3 	.word	0x080066c3
 80057f4:	080066e7 	.word	0x080066e7

080057f8 <_cleanup_r>:
 80057f8:	4901      	ldr	r1, [pc, #4]	; (8005800 <_cleanup_r+0x8>)
 80057fa:	f000 b8af 	b.w	800595c <_fwalk_reent>
 80057fe:	bf00      	nop
 8005800:	08005739 	.word	0x08005739

08005804 <__sfmoreglue>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	2268      	movs	r2, #104	; 0x68
 8005808:	1e4d      	subs	r5, r1, #1
 800580a:	4355      	muls	r5, r2
 800580c:	460e      	mov	r6, r1
 800580e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005812:	f000 fd4b 	bl	80062ac <_malloc_r>
 8005816:	4604      	mov	r4, r0
 8005818:	b140      	cbz	r0, 800582c <__sfmoreglue+0x28>
 800581a:	2100      	movs	r1, #0
 800581c:	e9c0 1600 	strd	r1, r6, [r0]
 8005820:	300c      	adds	r0, #12
 8005822:	60a0      	str	r0, [r4, #8]
 8005824:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005828:	f7fe fac6 	bl	8003db8 <memset>
 800582c:	4620      	mov	r0, r4
 800582e:	bd70      	pop	{r4, r5, r6, pc}

08005830 <__sfp_lock_acquire>:
 8005830:	4801      	ldr	r0, [pc, #4]	; (8005838 <__sfp_lock_acquire+0x8>)
 8005832:	f000 b8b8 	b.w	80059a6 <__retarget_lock_acquire_recursive>
 8005836:	bf00      	nop
 8005838:	2000539d 	.word	0x2000539d

0800583c <__sfp_lock_release>:
 800583c:	4801      	ldr	r0, [pc, #4]	; (8005844 <__sfp_lock_release+0x8>)
 800583e:	f000 b8b3 	b.w	80059a8 <__retarget_lock_release_recursive>
 8005842:	bf00      	nop
 8005844:	2000539d 	.word	0x2000539d

08005848 <__sinit_lock_acquire>:
 8005848:	4801      	ldr	r0, [pc, #4]	; (8005850 <__sinit_lock_acquire+0x8>)
 800584a:	f000 b8ac 	b.w	80059a6 <__retarget_lock_acquire_recursive>
 800584e:	bf00      	nop
 8005850:	2000539e 	.word	0x2000539e

08005854 <__sinit_lock_release>:
 8005854:	4801      	ldr	r0, [pc, #4]	; (800585c <__sinit_lock_release+0x8>)
 8005856:	f000 b8a7 	b.w	80059a8 <__retarget_lock_release_recursive>
 800585a:	bf00      	nop
 800585c:	2000539e 	.word	0x2000539e

08005860 <__sinit>:
 8005860:	b510      	push	{r4, lr}
 8005862:	4604      	mov	r4, r0
 8005864:	f7ff fff0 	bl	8005848 <__sinit_lock_acquire>
 8005868:	69a3      	ldr	r3, [r4, #24]
 800586a:	b11b      	cbz	r3, 8005874 <__sinit+0x14>
 800586c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005870:	f7ff bff0 	b.w	8005854 <__sinit_lock_release>
 8005874:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005878:	6523      	str	r3, [r4, #80]	; 0x50
 800587a:	4b13      	ldr	r3, [pc, #76]	; (80058c8 <__sinit+0x68>)
 800587c:	4a13      	ldr	r2, [pc, #76]	; (80058cc <__sinit+0x6c>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	62a2      	str	r2, [r4, #40]	; 0x28
 8005882:	42a3      	cmp	r3, r4
 8005884:	bf04      	itt	eq
 8005886:	2301      	moveq	r3, #1
 8005888:	61a3      	streq	r3, [r4, #24]
 800588a:	4620      	mov	r0, r4
 800588c:	f000 f820 	bl	80058d0 <__sfp>
 8005890:	6060      	str	r0, [r4, #4]
 8005892:	4620      	mov	r0, r4
 8005894:	f000 f81c 	bl	80058d0 <__sfp>
 8005898:	60a0      	str	r0, [r4, #8]
 800589a:	4620      	mov	r0, r4
 800589c:	f000 f818 	bl	80058d0 <__sfp>
 80058a0:	2200      	movs	r2, #0
 80058a2:	60e0      	str	r0, [r4, #12]
 80058a4:	2104      	movs	r1, #4
 80058a6:	6860      	ldr	r0, [r4, #4]
 80058a8:	f7ff ff82 	bl	80057b0 <std>
 80058ac:	68a0      	ldr	r0, [r4, #8]
 80058ae:	2201      	movs	r2, #1
 80058b0:	2109      	movs	r1, #9
 80058b2:	f7ff ff7d 	bl	80057b0 <std>
 80058b6:	68e0      	ldr	r0, [r4, #12]
 80058b8:	2202      	movs	r2, #2
 80058ba:	2112      	movs	r1, #18
 80058bc:	f7ff ff78 	bl	80057b0 <std>
 80058c0:	2301      	movs	r3, #1
 80058c2:	61a3      	str	r3, [r4, #24]
 80058c4:	e7d2      	b.n	800586c <__sinit+0xc>
 80058c6:	bf00      	nop
 80058c8:	080097f4 	.word	0x080097f4
 80058cc:	080057f9 	.word	0x080057f9

080058d0 <__sfp>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	4607      	mov	r7, r0
 80058d4:	f7ff ffac 	bl	8005830 <__sfp_lock_acquire>
 80058d8:	4b1e      	ldr	r3, [pc, #120]	; (8005954 <__sfp+0x84>)
 80058da:	681e      	ldr	r6, [r3, #0]
 80058dc:	69b3      	ldr	r3, [r6, #24]
 80058de:	b913      	cbnz	r3, 80058e6 <__sfp+0x16>
 80058e0:	4630      	mov	r0, r6
 80058e2:	f7ff ffbd 	bl	8005860 <__sinit>
 80058e6:	3648      	adds	r6, #72	; 0x48
 80058e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	d503      	bpl.n	80058f8 <__sfp+0x28>
 80058f0:	6833      	ldr	r3, [r6, #0]
 80058f2:	b30b      	cbz	r3, 8005938 <__sfp+0x68>
 80058f4:	6836      	ldr	r6, [r6, #0]
 80058f6:	e7f7      	b.n	80058e8 <__sfp+0x18>
 80058f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058fc:	b9d5      	cbnz	r5, 8005934 <__sfp+0x64>
 80058fe:	4b16      	ldr	r3, [pc, #88]	; (8005958 <__sfp+0x88>)
 8005900:	60e3      	str	r3, [r4, #12]
 8005902:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005906:	6665      	str	r5, [r4, #100]	; 0x64
 8005908:	f000 f84c 	bl	80059a4 <__retarget_lock_init_recursive>
 800590c:	f7ff ff96 	bl	800583c <__sfp_lock_release>
 8005910:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005914:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005918:	6025      	str	r5, [r4, #0]
 800591a:	61a5      	str	r5, [r4, #24]
 800591c:	2208      	movs	r2, #8
 800591e:	4629      	mov	r1, r5
 8005920:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005924:	f7fe fa48 	bl	8003db8 <memset>
 8005928:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800592c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005930:	4620      	mov	r0, r4
 8005932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005934:	3468      	adds	r4, #104	; 0x68
 8005936:	e7d9      	b.n	80058ec <__sfp+0x1c>
 8005938:	2104      	movs	r1, #4
 800593a:	4638      	mov	r0, r7
 800593c:	f7ff ff62 	bl	8005804 <__sfmoreglue>
 8005940:	4604      	mov	r4, r0
 8005942:	6030      	str	r0, [r6, #0]
 8005944:	2800      	cmp	r0, #0
 8005946:	d1d5      	bne.n	80058f4 <__sfp+0x24>
 8005948:	f7ff ff78 	bl	800583c <__sfp_lock_release>
 800594c:	230c      	movs	r3, #12
 800594e:	603b      	str	r3, [r7, #0]
 8005950:	e7ee      	b.n	8005930 <__sfp+0x60>
 8005952:	bf00      	nop
 8005954:	080097f4 	.word	0x080097f4
 8005958:	ffff0001 	.word	0xffff0001

0800595c <_fwalk_reent>:
 800595c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005960:	4606      	mov	r6, r0
 8005962:	4688      	mov	r8, r1
 8005964:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005968:	2700      	movs	r7, #0
 800596a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800596e:	f1b9 0901 	subs.w	r9, r9, #1
 8005972:	d505      	bpl.n	8005980 <_fwalk_reent+0x24>
 8005974:	6824      	ldr	r4, [r4, #0]
 8005976:	2c00      	cmp	r4, #0
 8005978:	d1f7      	bne.n	800596a <_fwalk_reent+0xe>
 800597a:	4638      	mov	r0, r7
 800597c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005980:	89ab      	ldrh	r3, [r5, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d907      	bls.n	8005996 <_fwalk_reent+0x3a>
 8005986:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800598a:	3301      	adds	r3, #1
 800598c:	d003      	beq.n	8005996 <_fwalk_reent+0x3a>
 800598e:	4629      	mov	r1, r5
 8005990:	4630      	mov	r0, r6
 8005992:	47c0      	blx	r8
 8005994:	4307      	orrs	r7, r0
 8005996:	3568      	adds	r5, #104	; 0x68
 8005998:	e7e9      	b.n	800596e <_fwalk_reent+0x12>
	...

0800599c <_localeconv_r>:
 800599c:	4800      	ldr	r0, [pc, #0]	; (80059a0 <_localeconv_r+0x4>)
 800599e:	4770      	bx	lr
 80059a0:	20000168 	.word	0x20000168

080059a4 <__retarget_lock_init_recursive>:
 80059a4:	4770      	bx	lr

080059a6 <__retarget_lock_acquire_recursive>:
 80059a6:	4770      	bx	lr

080059a8 <__retarget_lock_release_recursive>:
 80059a8:	4770      	bx	lr

080059aa <__swhatbuf_r>:
 80059aa:	b570      	push	{r4, r5, r6, lr}
 80059ac:	460e      	mov	r6, r1
 80059ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059b2:	2900      	cmp	r1, #0
 80059b4:	b096      	sub	sp, #88	; 0x58
 80059b6:	4614      	mov	r4, r2
 80059b8:	461d      	mov	r5, r3
 80059ba:	da08      	bge.n	80059ce <__swhatbuf_r+0x24>
 80059bc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	602a      	str	r2, [r5, #0]
 80059c4:	061a      	lsls	r2, r3, #24
 80059c6:	d410      	bmi.n	80059ea <__swhatbuf_r+0x40>
 80059c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80059cc:	e00e      	b.n	80059ec <__swhatbuf_r+0x42>
 80059ce:	466a      	mov	r2, sp
 80059d0:	f000 fee0 	bl	8006794 <_fstat_r>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	dbf1      	blt.n	80059bc <__swhatbuf_r+0x12>
 80059d8:	9a01      	ldr	r2, [sp, #4]
 80059da:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80059de:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80059e2:	425a      	negs	r2, r3
 80059e4:	415a      	adcs	r2, r3
 80059e6:	602a      	str	r2, [r5, #0]
 80059e8:	e7ee      	b.n	80059c8 <__swhatbuf_r+0x1e>
 80059ea:	2340      	movs	r3, #64	; 0x40
 80059ec:	2000      	movs	r0, #0
 80059ee:	6023      	str	r3, [r4, #0]
 80059f0:	b016      	add	sp, #88	; 0x58
 80059f2:	bd70      	pop	{r4, r5, r6, pc}

080059f4 <__smakebuf_r>:
 80059f4:	898b      	ldrh	r3, [r1, #12]
 80059f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059f8:	079d      	lsls	r5, r3, #30
 80059fa:	4606      	mov	r6, r0
 80059fc:	460c      	mov	r4, r1
 80059fe:	d507      	bpl.n	8005a10 <__smakebuf_r+0x1c>
 8005a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	6123      	str	r3, [r4, #16]
 8005a08:	2301      	movs	r3, #1
 8005a0a:	6163      	str	r3, [r4, #20]
 8005a0c:	b002      	add	sp, #8
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	ab01      	add	r3, sp, #4
 8005a12:	466a      	mov	r2, sp
 8005a14:	f7ff ffc9 	bl	80059aa <__swhatbuf_r>
 8005a18:	9900      	ldr	r1, [sp, #0]
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	4630      	mov	r0, r6
 8005a1e:	f000 fc45 	bl	80062ac <_malloc_r>
 8005a22:	b948      	cbnz	r0, 8005a38 <__smakebuf_r+0x44>
 8005a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a28:	059a      	lsls	r2, r3, #22
 8005a2a:	d4ef      	bmi.n	8005a0c <__smakebuf_r+0x18>
 8005a2c:	f023 0303 	bic.w	r3, r3, #3
 8005a30:	f043 0302 	orr.w	r3, r3, #2
 8005a34:	81a3      	strh	r3, [r4, #12]
 8005a36:	e7e3      	b.n	8005a00 <__smakebuf_r+0xc>
 8005a38:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <__smakebuf_r+0x7c>)
 8005a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8005a3c:	89a3      	ldrh	r3, [r4, #12]
 8005a3e:	6020      	str	r0, [r4, #0]
 8005a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a44:	81a3      	strh	r3, [r4, #12]
 8005a46:	9b00      	ldr	r3, [sp, #0]
 8005a48:	6163      	str	r3, [r4, #20]
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	6120      	str	r0, [r4, #16]
 8005a4e:	b15b      	cbz	r3, 8005a68 <__smakebuf_r+0x74>
 8005a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a54:	4630      	mov	r0, r6
 8005a56:	f000 feaf 	bl	80067b8 <_isatty_r>
 8005a5a:	b128      	cbz	r0, 8005a68 <__smakebuf_r+0x74>
 8005a5c:	89a3      	ldrh	r3, [r4, #12]
 8005a5e:	f023 0303 	bic.w	r3, r3, #3
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	81a3      	strh	r3, [r4, #12]
 8005a68:	89a0      	ldrh	r0, [r4, #12]
 8005a6a:	4305      	orrs	r5, r0
 8005a6c:	81a5      	strh	r5, [r4, #12]
 8005a6e:	e7cd      	b.n	8005a0c <__smakebuf_r+0x18>
 8005a70:	080057f9 	.word	0x080057f9

08005a74 <malloc>:
 8005a74:	4b02      	ldr	r3, [pc, #8]	; (8005a80 <malloc+0xc>)
 8005a76:	4601      	mov	r1, r0
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	f000 bc17 	b.w	80062ac <_malloc_r>
 8005a7e:	bf00      	nop
 8005a80:	20000014 	.word	0x20000014

08005a84 <memcpy>:
 8005a84:	440a      	add	r2, r1
 8005a86:	4291      	cmp	r1, r2
 8005a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a8c:	d100      	bne.n	8005a90 <memcpy+0xc>
 8005a8e:	4770      	bx	lr
 8005a90:	b510      	push	{r4, lr}
 8005a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a9a:	4291      	cmp	r1, r2
 8005a9c:	d1f9      	bne.n	8005a92 <memcpy+0xe>
 8005a9e:	bd10      	pop	{r4, pc}

08005aa0 <_Balloc>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	460d      	mov	r5, r1
 8005aa8:	b976      	cbnz	r6, 8005ac8 <_Balloc+0x28>
 8005aaa:	2010      	movs	r0, #16
 8005aac:	f7ff ffe2 	bl	8005a74 <malloc>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	6260      	str	r0, [r4, #36]	; 0x24
 8005ab4:	b920      	cbnz	r0, 8005ac0 <_Balloc+0x20>
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <_Balloc+0x78>)
 8005ab8:	4818      	ldr	r0, [pc, #96]	; (8005b1c <_Balloc+0x7c>)
 8005aba:	2166      	movs	r1, #102	; 0x66
 8005abc:	f000 fe2a 	bl	8006714 <__assert_func>
 8005ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ac4:	6006      	str	r6, [r0, #0]
 8005ac6:	60c6      	str	r6, [r0, #12]
 8005ac8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005aca:	68f3      	ldr	r3, [r6, #12]
 8005acc:	b183      	cbz	r3, 8005af0 <_Balloc+0x50>
 8005ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ad6:	b9b8      	cbnz	r0, 8005b08 <_Balloc+0x68>
 8005ad8:	2101      	movs	r1, #1
 8005ada:	fa01 f605 	lsl.w	r6, r1, r5
 8005ade:	1d72      	adds	r2, r6, #5
 8005ae0:	0092      	lsls	r2, r2, #2
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 fb60 	bl	80061a8 <_calloc_r>
 8005ae8:	b160      	cbz	r0, 8005b04 <_Balloc+0x64>
 8005aea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aee:	e00e      	b.n	8005b0e <_Balloc+0x6e>
 8005af0:	2221      	movs	r2, #33	; 0x21
 8005af2:	2104      	movs	r1, #4
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 fb57 	bl	80061a8 <_calloc_r>
 8005afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afc:	60f0      	str	r0, [r6, #12]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e4      	bne.n	8005ace <_Balloc+0x2e>
 8005b04:	2000      	movs	r0, #0
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	6802      	ldr	r2, [r0, #0]
 8005b0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b14:	e7f7      	b.n	8005b06 <_Balloc+0x66>
 8005b16:	bf00      	nop
 8005b18:	08009839 	.word	0x08009839
 8005b1c:	0800991c 	.word	0x0800991c

08005b20 <_Bfree>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b24:	4605      	mov	r5, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	b976      	cbnz	r6, 8005b48 <_Bfree+0x28>
 8005b2a:	2010      	movs	r0, #16
 8005b2c:	f7ff ffa2 	bl	8005a74 <malloc>
 8005b30:	4602      	mov	r2, r0
 8005b32:	6268      	str	r0, [r5, #36]	; 0x24
 8005b34:	b920      	cbnz	r0, 8005b40 <_Bfree+0x20>
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <_Bfree+0x3c>)
 8005b38:	4809      	ldr	r0, [pc, #36]	; (8005b60 <_Bfree+0x40>)
 8005b3a:	218a      	movs	r1, #138	; 0x8a
 8005b3c:	f000 fdea 	bl	8006714 <__assert_func>
 8005b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b44:	6006      	str	r6, [r0, #0]
 8005b46:	60c6      	str	r6, [r0, #12]
 8005b48:	b13c      	cbz	r4, 8005b5a <_Bfree+0x3a>
 8005b4a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b4c:	6862      	ldr	r2, [r4, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b54:	6021      	str	r1, [r4, #0]
 8005b56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	08009839 	.word	0x08009839
 8005b60:	0800991c 	.word	0x0800991c

08005b64 <__multadd>:
 8005b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b68:	690d      	ldr	r5, [r1, #16]
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	461e      	mov	r6, r3
 8005b70:	f101 0c14 	add.w	ip, r1, #20
 8005b74:	2000      	movs	r0, #0
 8005b76:	f8dc 3000 	ldr.w	r3, [ip]
 8005b7a:	b299      	uxth	r1, r3
 8005b7c:	fb02 6101 	mla	r1, r2, r1, r6
 8005b80:	0c1e      	lsrs	r6, r3, #16
 8005b82:	0c0b      	lsrs	r3, r1, #16
 8005b84:	fb02 3306 	mla	r3, r2, r6, r3
 8005b88:	b289      	uxth	r1, r1
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b90:	4285      	cmp	r5, r0
 8005b92:	f84c 1b04 	str.w	r1, [ip], #4
 8005b96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b9a:	dcec      	bgt.n	8005b76 <__multadd+0x12>
 8005b9c:	b30e      	cbz	r6, 8005be2 <__multadd+0x7e>
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	dc19      	bgt.n	8005bd8 <__multadd+0x74>
 8005ba4:	6861      	ldr	r1, [r4, #4]
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	3101      	adds	r1, #1
 8005baa:	f7ff ff79 	bl	8005aa0 <_Balloc>
 8005bae:	4680      	mov	r8, r0
 8005bb0:	b928      	cbnz	r0, 8005bbe <__multadd+0x5a>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <__multadd+0x84>)
 8005bb6:	480d      	ldr	r0, [pc, #52]	; (8005bec <__multadd+0x88>)
 8005bb8:	21b5      	movs	r1, #181	; 0xb5
 8005bba:	f000 fdab 	bl	8006714 <__assert_func>
 8005bbe:	6922      	ldr	r2, [r4, #16]
 8005bc0:	3202      	adds	r2, #2
 8005bc2:	f104 010c 	add.w	r1, r4, #12
 8005bc6:	0092      	lsls	r2, r2, #2
 8005bc8:	300c      	adds	r0, #12
 8005bca:	f7ff ff5b 	bl	8005a84 <memcpy>
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7ff ffa5 	bl	8005b20 <_Bfree>
 8005bd6:	4644      	mov	r4, r8
 8005bd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bdc:	3501      	adds	r5, #1
 8005bde:	615e      	str	r6, [r3, #20]
 8005be0:	6125      	str	r5, [r4, #16]
 8005be2:	4620      	mov	r0, r4
 8005be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be8:	080098ab 	.word	0x080098ab
 8005bec:	0800991c 	.word	0x0800991c

08005bf0 <__hi0bits>:
 8005bf0:	0c03      	lsrs	r3, r0, #16
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	b9d3      	cbnz	r3, 8005c2c <__hi0bits+0x3c>
 8005bf6:	0400      	lsls	r0, r0, #16
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bfe:	bf04      	itt	eq
 8005c00:	0200      	lsleq	r0, r0, #8
 8005c02:	3308      	addeq	r3, #8
 8005c04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c08:	bf04      	itt	eq
 8005c0a:	0100      	lsleq	r0, r0, #4
 8005c0c:	3304      	addeq	r3, #4
 8005c0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c12:	bf04      	itt	eq
 8005c14:	0080      	lsleq	r0, r0, #2
 8005c16:	3302      	addeq	r3, #2
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	db05      	blt.n	8005c28 <__hi0bits+0x38>
 8005c1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c20:	f103 0301 	add.w	r3, r3, #1
 8005c24:	bf08      	it	eq
 8005c26:	2320      	moveq	r3, #32
 8005c28:	4618      	mov	r0, r3
 8005c2a:	4770      	bx	lr
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e7e4      	b.n	8005bfa <__hi0bits+0xa>

08005c30 <__lo0bits>:
 8005c30:	6803      	ldr	r3, [r0, #0]
 8005c32:	f013 0207 	ands.w	r2, r3, #7
 8005c36:	4601      	mov	r1, r0
 8005c38:	d00b      	beq.n	8005c52 <__lo0bits+0x22>
 8005c3a:	07da      	lsls	r2, r3, #31
 8005c3c:	d423      	bmi.n	8005c86 <__lo0bits+0x56>
 8005c3e:	0798      	lsls	r0, r3, #30
 8005c40:	bf49      	itett	mi
 8005c42:	085b      	lsrmi	r3, r3, #1
 8005c44:	089b      	lsrpl	r3, r3, #2
 8005c46:	2001      	movmi	r0, #1
 8005c48:	600b      	strmi	r3, [r1, #0]
 8005c4a:	bf5c      	itt	pl
 8005c4c:	600b      	strpl	r3, [r1, #0]
 8005c4e:	2002      	movpl	r0, #2
 8005c50:	4770      	bx	lr
 8005c52:	b298      	uxth	r0, r3
 8005c54:	b9a8      	cbnz	r0, 8005c82 <__lo0bits+0x52>
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	2010      	movs	r0, #16
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	b90a      	cbnz	r2, 8005c62 <__lo0bits+0x32>
 8005c5e:	3008      	adds	r0, #8
 8005c60:	0a1b      	lsrs	r3, r3, #8
 8005c62:	071a      	lsls	r2, r3, #28
 8005c64:	bf04      	itt	eq
 8005c66:	091b      	lsreq	r3, r3, #4
 8005c68:	3004      	addeq	r0, #4
 8005c6a:	079a      	lsls	r2, r3, #30
 8005c6c:	bf04      	itt	eq
 8005c6e:	089b      	lsreq	r3, r3, #2
 8005c70:	3002      	addeq	r0, #2
 8005c72:	07da      	lsls	r2, r3, #31
 8005c74:	d403      	bmi.n	8005c7e <__lo0bits+0x4e>
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	f100 0001 	add.w	r0, r0, #1
 8005c7c:	d005      	beq.n	8005c8a <__lo0bits+0x5a>
 8005c7e:	600b      	str	r3, [r1, #0]
 8005c80:	4770      	bx	lr
 8005c82:	4610      	mov	r0, r2
 8005c84:	e7e9      	b.n	8005c5a <__lo0bits+0x2a>
 8005c86:	2000      	movs	r0, #0
 8005c88:	4770      	bx	lr
 8005c8a:	2020      	movs	r0, #32
 8005c8c:	4770      	bx	lr
	...

08005c90 <__i2b>:
 8005c90:	b510      	push	{r4, lr}
 8005c92:	460c      	mov	r4, r1
 8005c94:	2101      	movs	r1, #1
 8005c96:	f7ff ff03 	bl	8005aa0 <_Balloc>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	b928      	cbnz	r0, 8005caa <__i2b+0x1a>
 8005c9e:	4b05      	ldr	r3, [pc, #20]	; (8005cb4 <__i2b+0x24>)
 8005ca0:	4805      	ldr	r0, [pc, #20]	; (8005cb8 <__i2b+0x28>)
 8005ca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ca6:	f000 fd35 	bl	8006714 <__assert_func>
 8005caa:	2301      	movs	r3, #1
 8005cac:	6144      	str	r4, [r0, #20]
 8005cae:	6103      	str	r3, [r0, #16]
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	bf00      	nop
 8005cb4:	080098ab 	.word	0x080098ab
 8005cb8:	0800991c 	.word	0x0800991c

08005cbc <__multiply>:
 8005cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc0:	4691      	mov	r9, r2
 8005cc2:	690a      	ldr	r2, [r1, #16]
 8005cc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	bfb8      	it	lt
 8005ccc:	460b      	movlt	r3, r1
 8005cce:	460c      	mov	r4, r1
 8005cd0:	bfbc      	itt	lt
 8005cd2:	464c      	movlt	r4, r9
 8005cd4:	4699      	movlt	r9, r3
 8005cd6:	6927      	ldr	r7, [r4, #16]
 8005cd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cdc:	68a3      	ldr	r3, [r4, #8]
 8005cde:	6861      	ldr	r1, [r4, #4]
 8005ce0:	eb07 060a 	add.w	r6, r7, sl
 8005ce4:	42b3      	cmp	r3, r6
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	bfb8      	it	lt
 8005cea:	3101      	addlt	r1, #1
 8005cec:	f7ff fed8 	bl	8005aa0 <_Balloc>
 8005cf0:	b930      	cbnz	r0, 8005d00 <__multiply+0x44>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	4b44      	ldr	r3, [pc, #272]	; (8005e08 <__multiply+0x14c>)
 8005cf6:	4845      	ldr	r0, [pc, #276]	; (8005e0c <__multiply+0x150>)
 8005cf8:	f240 115d 	movw	r1, #349	; 0x15d
 8005cfc:	f000 fd0a 	bl	8006714 <__assert_func>
 8005d00:	f100 0514 	add.w	r5, r0, #20
 8005d04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d08:	462b      	mov	r3, r5
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	4543      	cmp	r3, r8
 8005d0e:	d321      	bcc.n	8005d54 <__multiply+0x98>
 8005d10:	f104 0314 	add.w	r3, r4, #20
 8005d14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d18:	f109 0314 	add.w	r3, r9, #20
 8005d1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d20:	9202      	str	r2, [sp, #8]
 8005d22:	1b3a      	subs	r2, r7, r4
 8005d24:	3a15      	subs	r2, #21
 8005d26:	f022 0203 	bic.w	r2, r2, #3
 8005d2a:	3204      	adds	r2, #4
 8005d2c:	f104 0115 	add.w	r1, r4, #21
 8005d30:	428f      	cmp	r7, r1
 8005d32:	bf38      	it	cc
 8005d34:	2204      	movcc	r2, #4
 8005d36:	9201      	str	r2, [sp, #4]
 8005d38:	9a02      	ldr	r2, [sp, #8]
 8005d3a:	9303      	str	r3, [sp, #12]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d80c      	bhi.n	8005d5a <__multiply+0x9e>
 8005d40:	2e00      	cmp	r6, #0
 8005d42:	dd03      	ble.n	8005d4c <__multiply+0x90>
 8005d44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d05a      	beq.n	8005e02 <__multiply+0x146>
 8005d4c:	6106      	str	r6, [r0, #16]
 8005d4e:	b005      	add	sp, #20
 8005d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d54:	f843 2b04 	str.w	r2, [r3], #4
 8005d58:	e7d8      	b.n	8005d0c <__multiply+0x50>
 8005d5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d5e:	f1ba 0f00 	cmp.w	sl, #0
 8005d62:	d024      	beq.n	8005dae <__multiply+0xf2>
 8005d64:	f104 0e14 	add.w	lr, r4, #20
 8005d68:	46a9      	mov	r9, r5
 8005d6a:	f04f 0c00 	mov.w	ip, #0
 8005d6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d72:	f8d9 1000 	ldr.w	r1, [r9]
 8005d76:	fa1f fb82 	uxth.w	fp, r2
 8005d7a:	b289      	uxth	r1, r1
 8005d7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d84:	f8d9 2000 	ldr.w	r2, [r9]
 8005d88:	4461      	add	r1, ip
 8005d8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d96:	b289      	uxth	r1, r1
 8005d98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d9c:	4577      	cmp	r7, lr
 8005d9e:	f849 1b04 	str.w	r1, [r9], #4
 8005da2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005da6:	d8e2      	bhi.n	8005d6e <__multiply+0xb2>
 8005da8:	9a01      	ldr	r2, [sp, #4]
 8005daa:	f845 c002 	str.w	ip, [r5, r2]
 8005dae:	9a03      	ldr	r2, [sp, #12]
 8005db0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005db4:	3304      	adds	r3, #4
 8005db6:	f1b9 0f00 	cmp.w	r9, #0
 8005dba:	d020      	beq.n	8005dfe <__multiply+0x142>
 8005dbc:	6829      	ldr	r1, [r5, #0]
 8005dbe:	f104 0c14 	add.w	ip, r4, #20
 8005dc2:	46ae      	mov	lr, r5
 8005dc4:	f04f 0a00 	mov.w	sl, #0
 8005dc8:	f8bc b000 	ldrh.w	fp, [ip]
 8005dcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005dd0:	fb09 220b 	mla	r2, r9, fp, r2
 8005dd4:	4492      	add	sl, r2
 8005dd6:	b289      	uxth	r1, r1
 8005dd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ddc:	f84e 1b04 	str.w	r1, [lr], #4
 8005de0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005de4:	f8be 1000 	ldrh.w	r1, [lr]
 8005de8:	0c12      	lsrs	r2, r2, #16
 8005dea:	fb09 1102 	mla	r1, r9, r2, r1
 8005dee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005df2:	4567      	cmp	r7, ip
 8005df4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005df8:	d8e6      	bhi.n	8005dc8 <__multiply+0x10c>
 8005dfa:	9a01      	ldr	r2, [sp, #4]
 8005dfc:	50a9      	str	r1, [r5, r2]
 8005dfe:	3504      	adds	r5, #4
 8005e00:	e79a      	b.n	8005d38 <__multiply+0x7c>
 8005e02:	3e01      	subs	r6, #1
 8005e04:	e79c      	b.n	8005d40 <__multiply+0x84>
 8005e06:	bf00      	nop
 8005e08:	080098ab 	.word	0x080098ab
 8005e0c:	0800991c 	.word	0x0800991c

08005e10 <__pow5mult>:
 8005e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e14:	4615      	mov	r5, r2
 8005e16:	f012 0203 	ands.w	r2, r2, #3
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	460f      	mov	r7, r1
 8005e1e:	d007      	beq.n	8005e30 <__pow5mult+0x20>
 8005e20:	4c25      	ldr	r4, [pc, #148]	; (8005eb8 <__pow5mult+0xa8>)
 8005e22:	3a01      	subs	r2, #1
 8005e24:	2300      	movs	r3, #0
 8005e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e2a:	f7ff fe9b 	bl	8005b64 <__multadd>
 8005e2e:	4607      	mov	r7, r0
 8005e30:	10ad      	asrs	r5, r5, #2
 8005e32:	d03d      	beq.n	8005eb0 <__pow5mult+0xa0>
 8005e34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e36:	b97c      	cbnz	r4, 8005e58 <__pow5mult+0x48>
 8005e38:	2010      	movs	r0, #16
 8005e3a:	f7ff fe1b 	bl	8005a74 <malloc>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	6270      	str	r0, [r6, #36]	; 0x24
 8005e42:	b928      	cbnz	r0, 8005e50 <__pow5mult+0x40>
 8005e44:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <__pow5mult+0xac>)
 8005e46:	481e      	ldr	r0, [pc, #120]	; (8005ec0 <__pow5mult+0xb0>)
 8005e48:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e4c:	f000 fc62 	bl	8006714 <__assert_func>
 8005e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e54:	6004      	str	r4, [r0, #0]
 8005e56:	60c4      	str	r4, [r0, #12]
 8005e58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e60:	b94c      	cbnz	r4, 8005e76 <__pow5mult+0x66>
 8005e62:	f240 2171 	movw	r1, #625	; 0x271
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7ff ff12 	bl	8005c90 <__i2b>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e72:	4604      	mov	r4, r0
 8005e74:	6003      	str	r3, [r0, #0]
 8005e76:	f04f 0900 	mov.w	r9, #0
 8005e7a:	07eb      	lsls	r3, r5, #31
 8005e7c:	d50a      	bpl.n	8005e94 <__pow5mult+0x84>
 8005e7e:	4639      	mov	r1, r7
 8005e80:	4622      	mov	r2, r4
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff ff1a 	bl	8005cbc <__multiply>
 8005e88:	4639      	mov	r1, r7
 8005e8a:	4680      	mov	r8, r0
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f7ff fe47 	bl	8005b20 <_Bfree>
 8005e92:	4647      	mov	r7, r8
 8005e94:	106d      	asrs	r5, r5, #1
 8005e96:	d00b      	beq.n	8005eb0 <__pow5mult+0xa0>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	b938      	cbnz	r0, 8005eac <__pow5mult+0x9c>
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff ff0b 	bl	8005cbc <__multiply>
 8005ea6:	6020      	str	r0, [r4, #0]
 8005ea8:	f8c0 9000 	str.w	r9, [r0]
 8005eac:	4604      	mov	r4, r0
 8005eae:	e7e4      	b.n	8005e7a <__pow5mult+0x6a>
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb6:	bf00      	nop
 8005eb8:	08009a68 	.word	0x08009a68
 8005ebc:	08009839 	.word	0x08009839
 8005ec0:	0800991c 	.word	0x0800991c

08005ec4 <__lshift>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	460c      	mov	r4, r1
 8005eca:	6849      	ldr	r1, [r1, #4]
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ed2:	68a3      	ldr	r3, [r4, #8]
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	4691      	mov	r9, r2
 8005ed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005edc:	f108 0601 	add.w	r6, r8, #1
 8005ee0:	42b3      	cmp	r3, r6
 8005ee2:	db0b      	blt.n	8005efc <__lshift+0x38>
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff fddb 	bl	8005aa0 <_Balloc>
 8005eea:	4605      	mov	r5, r0
 8005eec:	b948      	cbnz	r0, 8005f02 <__lshift+0x3e>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	4b2a      	ldr	r3, [pc, #168]	; (8005f9c <__lshift+0xd8>)
 8005ef2:	482b      	ldr	r0, [pc, #172]	; (8005fa0 <__lshift+0xdc>)
 8005ef4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ef8:	f000 fc0c 	bl	8006714 <__assert_func>
 8005efc:	3101      	adds	r1, #1
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	e7ee      	b.n	8005ee0 <__lshift+0x1c>
 8005f02:	2300      	movs	r3, #0
 8005f04:	f100 0114 	add.w	r1, r0, #20
 8005f08:	f100 0210 	add.w	r2, r0, #16
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	4553      	cmp	r3, sl
 8005f10:	db37      	blt.n	8005f82 <__lshift+0xbe>
 8005f12:	6920      	ldr	r0, [r4, #16]
 8005f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f18:	f104 0314 	add.w	r3, r4, #20
 8005f1c:	f019 091f 	ands.w	r9, r9, #31
 8005f20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f28:	d02f      	beq.n	8005f8a <__lshift+0xc6>
 8005f2a:	f1c9 0e20 	rsb	lr, r9, #32
 8005f2e:	468a      	mov	sl, r1
 8005f30:	f04f 0c00 	mov.w	ip, #0
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	fa02 f209 	lsl.w	r2, r2, r9
 8005f3a:	ea42 020c 	orr.w	r2, r2, ip
 8005f3e:	f84a 2b04 	str.w	r2, [sl], #4
 8005f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f46:	4298      	cmp	r0, r3
 8005f48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f4c:	d8f2      	bhi.n	8005f34 <__lshift+0x70>
 8005f4e:	1b03      	subs	r3, r0, r4
 8005f50:	3b15      	subs	r3, #21
 8005f52:	f023 0303 	bic.w	r3, r3, #3
 8005f56:	3304      	adds	r3, #4
 8005f58:	f104 0215 	add.w	r2, r4, #21
 8005f5c:	4290      	cmp	r0, r2
 8005f5e:	bf38      	it	cc
 8005f60:	2304      	movcc	r3, #4
 8005f62:	f841 c003 	str.w	ip, [r1, r3]
 8005f66:	f1bc 0f00 	cmp.w	ip, #0
 8005f6a:	d001      	beq.n	8005f70 <__lshift+0xac>
 8005f6c:	f108 0602 	add.w	r6, r8, #2
 8005f70:	3e01      	subs	r6, #1
 8005f72:	4638      	mov	r0, r7
 8005f74:	612e      	str	r6, [r5, #16]
 8005f76:	4621      	mov	r1, r4
 8005f78:	f7ff fdd2 	bl	8005b20 <_Bfree>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f86:	3301      	adds	r3, #1
 8005f88:	e7c1      	b.n	8005f0e <__lshift+0x4a>
 8005f8a:	3904      	subs	r1, #4
 8005f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f90:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f94:	4298      	cmp	r0, r3
 8005f96:	d8f9      	bhi.n	8005f8c <__lshift+0xc8>
 8005f98:	e7ea      	b.n	8005f70 <__lshift+0xac>
 8005f9a:	bf00      	nop
 8005f9c:	080098ab 	.word	0x080098ab
 8005fa0:	0800991c 	.word	0x0800991c

08005fa4 <__mcmp>:
 8005fa4:	b530      	push	{r4, r5, lr}
 8005fa6:	6902      	ldr	r2, [r0, #16]
 8005fa8:	690c      	ldr	r4, [r1, #16]
 8005faa:	1b12      	subs	r2, r2, r4
 8005fac:	d10e      	bne.n	8005fcc <__mcmp+0x28>
 8005fae:	f100 0314 	add.w	r3, r0, #20
 8005fb2:	3114      	adds	r1, #20
 8005fb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005fb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005fbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005fc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fc4:	42a5      	cmp	r5, r4
 8005fc6:	d003      	beq.n	8005fd0 <__mcmp+0x2c>
 8005fc8:	d305      	bcc.n	8005fd6 <__mcmp+0x32>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4610      	mov	r0, r2
 8005fce:	bd30      	pop	{r4, r5, pc}
 8005fd0:	4283      	cmp	r3, r0
 8005fd2:	d3f3      	bcc.n	8005fbc <__mcmp+0x18>
 8005fd4:	e7fa      	b.n	8005fcc <__mcmp+0x28>
 8005fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005fda:	e7f7      	b.n	8005fcc <__mcmp+0x28>

08005fdc <__mdiff>:
 8005fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	460c      	mov	r4, r1
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	4690      	mov	r8, r2
 8005fea:	f7ff ffdb 	bl	8005fa4 <__mcmp>
 8005fee:	1e05      	subs	r5, r0, #0
 8005ff0:	d110      	bne.n	8006014 <__mdiff+0x38>
 8005ff2:	4629      	mov	r1, r5
 8005ff4:	4630      	mov	r0, r6
 8005ff6:	f7ff fd53 	bl	8005aa0 <_Balloc>
 8005ffa:	b930      	cbnz	r0, 800600a <__mdiff+0x2e>
 8005ffc:	4b3a      	ldr	r3, [pc, #232]	; (80060e8 <__mdiff+0x10c>)
 8005ffe:	4602      	mov	r2, r0
 8006000:	f240 2132 	movw	r1, #562	; 0x232
 8006004:	4839      	ldr	r0, [pc, #228]	; (80060ec <__mdiff+0x110>)
 8006006:	f000 fb85 	bl	8006714 <__assert_func>
 800600a:	2301      	movs	r3, #1
 800600c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006010:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006014:	bfa4      	itt	ge
 8006016:	4643      	movge	r3, r8
 8006018:	46a0      	movge	r8, r4
 800601a:	4630      	mov	r0, r6
 800601c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006020:	bfa6      	itte	ge
 8006022:	461c      	movge	r4, r3
 8006024:	2500      	movge	r5, #0
 8006026:	2501      	movlt	r5, #1
 8006028:	f7ff fd3a 	bl	8005aa0 <_Balloc>
 800602c:	b920      	cbnz	r0, 8006038 <__mdiff+0x5c>
 800602e:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <__mdiff+0x10c>)
 8006030:	4602      	mov	r2, r0
 8006032:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006036:	e7e5      	b.n	8006004 <__mdiff+0x28>
 8006038:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800603c:	6926      	ldr	r6, [r4, #16]
 800603e:	60c5      	str	r5, [r0, #12]
 8006040:	f104 0914 	add.w	r9, r4, #20
 8006044:	f108 0514 	add.w	r5, r8, #20
 8006048:	f100 0e14 	add.w	lr, r0, #20
 800604c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006050:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006054:	f108 0210 	add.w	r2, r8, #16
 8006058:	46f2      	mov	sl, lr
 800605a:	2100      	movs	r1, #0
 800605c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006060:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006064:	fa1f f883 	uxth.w	r8, r3
 8006068:	fa11 f18b 	uxtah	r1, r1, fp
 800606c:	0c1b      	lsrs	r3, r3, #16
 800606e:	eba1 0808 	sub.w	r8, r1, r8
 8006072:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006076:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800607a:	fa1f f888 	uxth.w	r8, r8
 800607e:	1419      	asrs	r1, r3, #16
 8006080:	454e      	cmp	r6, r9
 8006082:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006086:	f84a 3b04 	str.w	r3, [sl], #4
 800608a:	d8e7      	bhi.n	800605c <__mdiff+0x80>
 800608c:	1b33      	subs	r3, r6, r4
 800608e:	3b15      	subs	r3, #21
 8006090:	f023 0303 	bic.w	r3, r3, #3
 8006094:	3304      	adds	r3, #4
 8006096:	3415      	adds	r4, #21
 8006098:	42a6      	cmp	r6, r4
 800609a:	bf38      	it	cc
 800609c:	2304      	movcc	r3, #4
 800609e:	441d      	add	r5, r3
 80060a0:	4473      	add	r3, lr
 80060a2:	469e      	mov	lr, r3
 80060a4:	462e      	mov	r6, r5
 80060a6:	4566      	cmp	r6, ip
 80060a8:	d30e      	bcc.n	80060c8 <__mdiff+0xec>
 80060aa:	f10c 0203 	add.w	r2, ip, #3
 80060ae:	1b52      	subs	r2, r2, r5
 80060b0:	f022 0203 	bic.w	r2, r2, #3
 80060b4:	3d03      	subs	r5, #3
 80060b6:	45ac      	cmp	ip, r5
 80060b8:	bf38      	it	cc
 80060ba:	2200      	movcc	r2, #0
 80060bc:	441a      	add	r2, r3
 80060be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80060c2:	b17b      	cbz	r3, 80060e4 <__mdiff+0x108>
 80060c4:	6107      	str	r7, [r0, #16]
 80060c6:	e7a3      	b.n	8006010 <__mdiff+0x34>
 80060c8:	f856 8b04 	ldr.w	r8, [r6], #4
 80060cc:	fa11 f288 	uxtah	r2, r1, r8
 80060d0:	1414      	asrs	r4, r2, #16
 80060d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060d6:	b292      	uxth	r2, r2
 80060d8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80060dc:	f84e 2b04 	str.w	r2, [lr], #4
 80060e0:	1421      	asrs	r1, r4, #16
 80060e2:	e7e0      	b.n	80060a6 <__mdiff+0xca>
 80060e4:	3f01      	subs	r7, #1
 80060e6:	e7ea      	b.n	80060be <__mdiff+0xe2>
 80060e8:	080098ab 	.word	0x080098ab
 80060ec:	0800991c 	.word	0x0800991c

080060f0 <__d2b>:
 80060f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060f4:	4689      	mov	r9, r1
 80060f6:	2101      	movs	r1, #1
 80060f8:	ec57 6b10 	vmov	r6, r7, d0
 80060fc:	4690      	mov	r8, r2
 80060fe:	f7ff fccf 	bl	8005aa0 <_Balloc>
 8006102:	4604      	mov	r4, r0
 8006104:	b930      	cbnz	r0, 8006114 <__d2b+0x24>
 8006106:	4602      	mov	r2, r0
 8006108:	4b25      	ldr	r3, [pc, #148]	; (80061a0 <__d2b+0xb0>)
 800610a:	4826      	ldr	r0, [pc, #152]	; (80061a4 <__d2b+0xb4>)
 800610c:	f240 310a 	movw	r1, #778	; 0x30a
 8006110:	f000 fb00 	bl	8006714 <__assert_func>
 8006114:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006118:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800611c:	bb35      	cbnz	r5, 800616c <__d2b+0x7c>
 800611e:	2e00      	cmp	r6, #0
 8006120:	9301      	str	r3, [sp, #4]
 8006122:	d028      	beq.n	8006176 <__d2b+0x86>
 8006124:	4668      	mov	r0, sp
 8006126:	9600      	str	r6, [sp, #0]
 8006128:	f7ff fd82 	bl	8005c30 <__lo0bits>
 800612c:	9900      	ldr	r1, [sp, #0]
 800612e:	b300      	cbz	r0, 8006172 <__d2b+0x82>
 8006130:	9a01      	ldr	r2, [sp, #4]
 8006132:	f1c0 0320 	rsb	r3, r0, #32
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	430b      	orrs	r3, r1
 800613c:	40c2      	lsrs	r2, r0
 800613e:	6163      	str	r3, [r4, #20]
 8006140:	9201      	str	r2, [sp, #4]
 8006142:	9b01      	ldr	r3, [sp, #4]
 8006144:	61a3      	str	r3, [r4, #24]
 8006146:	2b00      	cmp	r3, #0
 8006148:	bf14      	ite	ne
 800614a:	2202      	movne	r2, #2
 800614c:	2201      	moveq	r2, #1
 800614e:	6122      	str	r2, [r4, #16]
 8006150:	b1d5      	cbz	r5, 8006188 <__d2b+0x98>
 8006152:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006156:	4405      	add	r5, r0
 8006158:	f8c9 5000 	str.w	r5, [r9]
 800615c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006160:	f8c8 0000 	str.w	r0, [r8]
 8006164:	4620      	mov	r0, r4
 8006166:	b003      	add	sp, #12
 8006168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800616c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006170:	e7d5      	b.n	800611e <__d2b+0x2e>
 8006172:	6161      	str	r1, [r4, #20]
 8006174:	e7e5      	b.n	8006142 <__d2b+0x52>
 8006176:	a801      	add	r0, sp, #4
 8006178:	f7ff fd5a 	bl	8005c30 <__lo0bits>
 800617c:	9b01      	ldr	r3, [sp, #4]
 800617e:	6163      	str	r3, [r4, #20]
 8006180:	2201      	movs	r2, #1
 8006182:	6122      	str	r2, [r4, #16]
 8006184:	3020      	adds	r0, #32
 8006186:	e7e3      	b.n	8006150 <__d2b+0x60>
 8006188:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800618c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006190:	f8c9 0000 	str.w	r0, [r9]
 8006194:	6918      	ldr	r0, [r3, #16]
 8006196:	f7ff fd2b 	bl	8005bf0 <__hi0bits>
 800619a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800619e:	e7df      	b.n	8006160 <__d2b+0x70>
 80061a0:	080098ab 	.word	0x080098ab
 80061a4:	0800991c 	.word	0x0800991c

080061a8 <_calloc_r>:
 80061a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061aa:	fba1 2402 	umull	r2, r4, r1, r2
 80061ae:	b94c      	cbnz	r4, 80061c4 <_calloc_r+0x1c>
 80061b0:	4611      	mov	r1, r2
 80061b2:	9201      	str	r2, [sp, #4]
 80061b4:	f000 f87a 	bl	80062ac <_malloc_r>
 80061b8:	9a01      	ldr	r2, [sp, #4]
 80061ba:	4605      	mov	r5, r0
 80061bc:	b930      	cbnz	r0, 80061cc <_calloc_r+0x24>
 80061be:	4628      	mov	r0, r5
 80061c0:	b003      	add	sp, #12
 80061c2:	bd30      	pop	{r4, r5, pc}
 80061c4:	220c      	movs	r2, #12
 80061c6:	6002      	str	r2, [r0, #0]
 80061c8:	2500      	movs	r5, #0
 80061ca:	e7f8      	b.n	80061be <_calloc_r+0x16>
 80061cc:	4621      	mov	r1, r4
 80061ce:	f7fd fdf3 	bl	8003db8 <memset>
 80061d2:	e7f4      	b.n	80061be <_calloc_r+0x16>

080061d4 <_free_r>:
 80061d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80061d6:	2900      	cmp	r1, #0
 80061d8:	d044      	beq.n	8006264 <_free_r+0x90>
 80061da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061de:	9001      	str	r0, [sp, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f1a1 0404 	sub.w	r4, r1, #4
 80061e6:	bfb8      	it	lt
 80061e8:	18e4      	addlt	r4, r4, r3
 80061ea:	f000 fb19 	bl	8006820 <__malloc_lock>
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <_free_r+0x94>)
 80061f0:	9801      	ldr	r0, [sp, #4]
 80061f2:	6813      	ldr	r3, [r2, #0]
 80061f4:	b933      	cbnz	r3, 8006204 <_free_r+0x30>
 80061f6:	6063      	str	r3, [r4, #4]
 80061f8:	6014      	str	r4, [r2, #0]
 80061fa:	b003      	add	sp, #12
 80061fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006200:	f000 bb14 	b.w	800682c <__malloc_unlock>
 8006204:	42a3      	cmp	r3, r4
 8006206:	d908      	bls.n	800621a <_free_r+0x46>
 8006208:	6825      	ldr	r5, [r4, #0]
 800620a:	1961      	adds	r1, r4, r5
 800620c:	428b      	cmp	r3, r1
 800620e:	bf01      	itttt	eq
 8006210:	6819      	ldreq	r1, [r3, #0]
 8006212:	685b      	ldreq	r3, [r3, #4]
 8006214:	1949      	addeq	r1, r1, r5
 8006216:	6021      	streq	r1, [r4, #0]
 8006218:	e7ed      	b.n	80061f6 <_free_r+0x22>
 800621a:	461a      	mov	r2, r3
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	b10b      	cbz	r3, 8006224 <_free_r+0x50>
 8006220:	42a3      	cmp	r3, r4
 8006222:	d9fa      	bls.n	800621a <_free_r+0x46>
 8006224:	6811      	ldr	r1, [r2, #0]
 8006226:	1855      	adds	r5, r2, r1
 8006228:	42a5      	cmp	r5, r4
 800622a:	d10b      	bne.n	8006244 <_free_r+0x70>
 800622c:	6824      	ldr	r4, [r4, #0]
 800622e:	4421      	add	r1, r4
 8006230:	1854      	adds	r4, r2, r1
 8006232:	42a3      	cmp	r3, r4
 8006234:	6011      	str	r1, [r2, #0]
 8006236:	d1e0      	bne.n	80061fa <_free_r+0x26>
 8006238:	681c      	ldr	r4, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	6053      	str	r3, [r2, #4]
 800623e:	4421      	add	r1, r4
 8006240:	6011      	str	r1, [r2, #0]
 8006242:	e7da      	b.n	80061fa <_free_r+0x26>
 8006244:	d902      	bls.n	800624c <_free_r+0x78>
 8006246:	230c      	movs	r3, #12
 8006248:	6003      	str	r3, [r0, #0]
 800624a:	e7d6      	b.n	80061fa <_free_r+0x26>
 800624c:	6825      	ldr	r5, [r4, #0]
 800624e:	1961      	adds	r1, r4, r5
 8006250:	428b      	cmp	r3, r1
 8006252:	bf04      	itt	eq
 8006254:	6819      	ldreq	r1, [r3, #0]
 8006256:	685b      	ldreq	r3, [r3, #4]
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	bf04      	itt	eq
 800625c:	1949      	addeq	r1, r1, r5
 800625e:	6021      	streq	r1, [r4, #0]
 8006260:	6054      	str	r4, [r2, #4]
 8006262:	e7ca      	b.n	80061fa <_free_r+0x26>
 8006264:	b003      	add	sp, #12
 8006266:	bd30      	pop	{r4, r5, pc}
 8006268:	200053a0 	.word	0x200053a0

0800626c <sbrk_aligned>:
 800626c:	b570      	push	{r4, r5, r6, lr}
 800626e:	4e0e      	ldr	r6, [pc, #56]	; (80062a8 <sbrk_aligned+0x3c>)
 8006270:	460c      	mov	r4, r1
 8006272:	6831      	ldr	r1, [r6, #0]
 8006274:	4605      	mov	r5, r0
 8006276:	b911      	cbnz	r1, 800627e <sbrk_aligned+0x12>
 8006278:	f000 f9e6 	bl	8006648 <_sbrk_r>
 800627c:	6030      	str	r0, [r6, #0]
 800627e:	4621      	mov	r1, r4
 8006280:	4628      	mov	r0, r5
 8006282:	f000 f9e1 	bl	8006648 <_sbrk_r>
 8006286:	1c43      	adds	r3, r0, #1
 8006288:	d00a      	beq.n	80062a0 <sbrk_aligned+0x34>
 800628a:	1cc4      	adds	r4, r0, #3
 800628c:	f024 0403 	bic.w	r4, r4, #3
 8006290:	42a0      	cmp	r0, r4
 8006292:	d007      	beq.n	80062a4 <sbrk_aligned+0x38>
 8006294:	1a21      	subs	r1, r4, r0
 8006296:	4628      	mov	r0, r5
 8006298:	f000 f9d6 	bl	8006648 <_sbrk_r>
 800629c:	3001      	adds	r0, #1
 800629e:	d101      	bne.n	80062a4 <sbrk_aligned+0x38>
 80062a0:	f04f 34ff 	mov.w	r4, #4294967295
 80062a4:	4620      	mov	r0, r4
 80062a6:	bd70      	pop	{r4, r5, r6, pc}
 80062a8:	200053a4 	.word	0x200053a4

080062ac <_malloc_r>:
 80062ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062b0:	1ccd      	adds	r5, r1, #3
 80062b2:	f025 0503 	bic.w	r5, r5, #3
 80062b6:	3508      	adds	r5, #8
 80062b8:	2d0c      	cmp	r5, #12
 80062ba:	bf38      	it	cc
 80062bc:	250c      	movcc	r5, #12
 80062be:	2d00      	cmp	r5, #0
 80062c0:	4607      	mov	r7, r0
 80062c2:	db01      	blt.n	80062c8 <_malloc_r+0x1c>
 80062c4:	42a9      	cmp	r1, r5
 80062c6:	d905      	bls.n	80062d4 <_malloc_r+0x28>
 80062c8:	230c      	movs	r3, #12
 80062ca:	603b      	str	r3, [r7, #0]
 80062cc:	2600      	movs	r6, #0
 80062ce:	4630      	mov	r0, r6
 80062d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062d4:	4e2e      	ldr	r6, [pc, #184]	; (8006390 <_malloc_r+0xe4>)
 80062d6:	f000 faa3 	bl	8006820 <__malloc_lock>
 80062da:	6833      	ldr	r3, [r6, #0]
 80062dc:	461c      	mov	r4, r3
 80062de:	bb34      	cbnz	r4, 800632e <_malloc_r+0x82>
 80062e0:	4629      	mov	r1, r5
 80062e2:	4638      	mov	r0, r7
 80062e4:	f7ff ffc2 	bl	800626c <sbrk_aligned>
 80062e8:	1c43      	adds	r3, r0, #1
 80062ea:	4604      	mov	r4, r0
 80062ec:	d14d      	bne.n	800638a <_malloc_r+0xde>
 80062ee:	6834      	ldr	r4, [r6, #0]
 80062f0:	4626      	mov	r6, r4
 80062f2:	2e00      	cmp	r6, #0
 80062f4:	d140      	bne.n	8006378 <_malloc_r+0xcc>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	4631      	mov	r1, r6
 80062fa:	4638      	mov	r0, r7
 80062fc:	eb04 0803 	add.w	r8, r4, r3
 8006300:	f000 f9a2 	bl	8006648 <_sbrk_r>
 8006304:	4580      	cmp	r8, r0
 8006306:	d13a      	bne.n	800637e <_malloc_r+0xd2>
 8006308:	6821      	ldr	r1, [r4, #0]
 800630a:	3503      	adds	r5, #3
 800630c:	1a6d      	subs	r5, r5, r1
 800630e:	f025 0503 	bic.w	r5, r5, #3
 8006312:	3508      	adds	r5, #8
 8006314:	2d0c      	cmp	r5, #12
 8006316:	bf38      	it	cc
 8006318:	250c      	movcc	r5, #12
 800631a:	4629      	mov	r1, r5
 800631c:	4638      	mov	r0, r7
 800631e:	f7ff ffa5 	bl	800626c <sbrk_aligned>
 8006322:	3001      	adds	r0, #1
 8006324:	d02b      	beq.n	800637e <_malloc_r+0xd2>
 8006326:	6823      	ldr	r3, [r4, #0]
 8006328:	442b      	add	r3, r5
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	e00e      	b.n	800634c <_malloc_r+0xa0>
 800632e:	6822      	ldr	r2, [r4, #0]
 8006330:	1b52      	subs	r2, r2, r5
 8006332:	d41e      	bmi.n	8006372 <_malloc_r+0xc6>
 8006334:	2a0b      	cmp	r2, #11
 8006336:	d916      	bls.n	8006366 <_malloc_r+0xba>
 8006338:	1961      	adds	r1, r4, r5
 800633a:	42a3      	cmp	r3, r4
 800633c:	6025      	str	r5, [r4, #0]
 800633e:	bf18      	it	ne
 8006340:	6059      	strne	r1, [r3, #4]
 8006342:	6863      	ldr	r3, [r4, #4]
 8006344:	bf08      	it	eq
 8006346:	6031      	streq	r1, [r6, #0]
 8006348:	5162      	str	r2, [r4, r5]
 800634a:	604b      	str	r3, [r1, #4]
 800634c:	4638      	mov	r0, r7
 800634e:	f104 060b 	add.w	r6, r4, #11
 8006352:	f000 fa6b 	bl	800682c <__malloc_unlock>
 8006356:	f026 0607 	bic.w	r6, r6, #7
 800635a:	1d23      	adds	r3, r4, #4
 800635c:	1af2      	subs	r2, r6, r3
 800635e:	d0b6      	beq.n	80062ce <_malloc_r+0x22>
 8006360:	1b9b      	subs	r3, r3, r6
 8006362:	50a3      	str	r3, [r4, r2]
 8006364:	e7b3      	b.n	80062ce <_malloc_r+0x22>
 8006366:	6862      	ldr	r2, [r4, #4]
 8006368:	42a3      	cmp	r3, r4
 800636a:	bf0c      	ite	eq
 800636c:	6032      	streq	r2, [r6, #0]
 800636e:	605a      	strne	r2, [r3, #4]
 8006370:	e7ec      	b.n	800634c <_malloc_r+0xa0>
 8006372:	4623      	mov	r3, r4
 8006374:	6864      	ldr	r4, [r4, #4]
 8006376:	e7b2      	b.n	80062de <_malloc_r+0x32>
 8006378:	4634      	mov	r4, r6
 800637a:	6876      	ldr	r6, [r6, #4]
 800637c:	e7b9      	b.n	80062f2 <_malloc_r+0x46>
 800637e:	230c      	movs	r3, #12
 8006380:	603b      	str	r3, [r7, #0]
 8006382:	4638      	mov	r0, r7
 8006384:	f000 fa52 	bl	800682c <__malloc_unlock>
 8006388:	e7a1      	b.n	80062ce <_malloc_r+0x22>
 800638a:	6025      	str	r5, [r4, #0]
 800638c:	e7de      	b.n	800634c <_malloc_r+0xa0>
 800638e:	bf00      	nop
 8006390:	200053a0 	.word	0x200053a0

08006394 <__sfputc_r>:
 8006394:	6893      	ldr	r3, [r2, #8]
 8006396:	3b01      	subs	r3, #1
 8006398:	2b00      	cmp	r3, #0
 800639a:	b410      	push	{r4}
 800639c:	6093      	str	r3, [r2, #8]
 800639e:	da08      	bge.n	80063b2 <__sfputc_r+0x1e>
 80063a0:	6994      	ldr	r4, [r2, #24]
 80063a2:	42a3      	cmp	r3, r4
 80063a4:	db01      	blt.n	80063aa <__sfputc_r+0x16>
 80063a6:	290a      	cmp	r1, #10
 80063a8:	d103      	bne.n	80063b2 <__sfputc_r+0x1e>
 80063aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063ae:	f7fe ba03 	b.w	80047b8 <__swbuf_r>
 80063b2:	6813      	ldr	r3, [r2, #0]
 80063b4:	1c58      	adds	r0, r3, #1
 80063b6:	6010      	str	r0, [r2, #0]
 80063b8:	7019      	strb	r1, [r3, #0]
 80063ba:	4608      	mov	r0, r1
 80063bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <__sfputs_r>:
 80063c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c4:	4606      	mov	r6, r0
 80063c6:	460f      	mov	r7, r1
 80063c8:	4614      	mov	r4, r2
 80063ca:	18d5      	adds	r5, r2, r3
 80063cc:	42ac      	cmp	r4, r5
 80063ce:	d101      	bne.n	80063d4 <__sfputs_r+0x12>
 80063d0:	2000      	movs	r0, #0
 80063d2:	e007      	b.n	80063e4 <__sfputs_r+0x22>
 80063d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d8:	463a      	mov	r2, r7
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff ffda 	bl	8006394 <__sfputc_r>
 80063e0:	1c43      	adds	r3, r0, #1
 80063e2:	d1f3      	bne.n	80063cc <__sfputs_r+0xa>
 80063e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063e8 <_vfiprintf_r>:
 80063e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ec:	460d      	mov	r5, r1
 80063ee:	b09d      	sub	sp, #116	; 0x74
 80063f0:	4614      	mov	r4, r2
 80063f2:	4698      	mov	r8, r3
 80063f4:	4606      	mov	r6, r0
 80063f6:	b118      	cbz	r0, 8006400 <_vfiprintf_r+0x18>
 80063f8:	6983      	ldr	r3, [r0, #24]
 80063fa:	b90b      	cbnz	r3, 8006400 <_vfiprintf_r+0x18>
 80063fc:	f7ff fa30 	bl	8005860 <__sinit>
 8006400:	4b89      	ldr	r3, [pc, #548]	; (8006628 <_vfiprintf_r+0x240>)
 8006402:	429d      	cmp	r5, r3
 8006404:	d11b      	bne.n	800643e <_vfiprintf_r+0x56>
 8006406:	6875      	ldr	r5, [r6, #4]
 8006408:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800640a:	07d9      	lsls	r1, r3, #31
 800640c:	d405      	bmi.n	800641a <_vfiprintf_r+0x32>
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	059a      	lsls	r2, r3, #22
 8006412:	d402      	bmi.n	800641a <_vfiprintf_r+0x32>
 8006414:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006416:	f7ff fac6 	bl	80059a6 <__retarget_lock_acquire_recursive>
 800641a:	89ab      	ldrh	r3, [r5, #12]
 800641c:	071b      	lsls	r3, r3, #28
 800641e:	d501      	bpl.n	8006424 <_vfiprintf_r+0x3c>
 8006420:	692b      	ldr	r3, [r5, #16]
 8006422:	b9eb      	cbnz	r3, 8006460 <_vfiprintf_r+0x78>
 8006424:	4629      	mov	r1, r5
 8006426:	4630      	mov	r0, r6
 8006428:	f7fe fa18 	bl	800485c <__swsetup_r>
 800642c:	b1c0      	cbz	r0, 8006460 <_vfiprintf_r+0x78>
 800642e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006430:	07dc      	lsls	r4, r3, #31
 8006432:	d50e      	bpl.n	8006452 <_vfiprintf_r+0x6a>
 8006434:	f04f 30ff 	mov.w	r0, #4294967295
 8006438:	b01d      	add	sp, #116	; 0x74
 800643a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643e:	4b7b      	ldr	r3, [pc, #492]	; (800662c <_vfiprintf_r+0x244>)
 8006440:	429d      	cmp	r5, r3
 8006442:	d101      	bne.n	8006448 <_vfiprintf_r+0x60>
 8006444:	68b5      	ldr	r5, [r6, #8]
 8006446:	e7df      	b.n	8006408 <_vfiprintf_r+0x20>
 8006448:	4b79      	ldr	r3, [pc, #484]	; (8006630 <_vfiprintf_r+0x248>)
 800644a:	429d      	cmp	r5, r3
 800644c:	bf08      	it	eq
 800644e:	68f5      	ldreq	r5, [r6, #12]
 8006450:	e7da      	b.n	8006408 <_vfiprintf_r+0x20>
 8006452:	89ab      	ldrh	r3, [r5, #12]
 8006454:	0598      	lsls	r0, r3, #22
 8006456:	d4ed      	bmi.n	8006434 <_vfiprintf_r+0x4c>
 8006458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800645a:	f7ff faa5 	bl	80059a8 <__retarget_lock_release_recursive>
 800645e:	e7e9      	b.n	8006434 <_vfiprintf_r+0x4c>
 8006460:	2300      	movs	r3, #0
 8006462:	9309      	str	r3, [sp, #36]	; 0x24
 8006464:	2320      	movs	r3, #32
 8006466:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800646a:	f8cd 800c 	str.w	r8, [sp, #12]
 800646e:	2330      	movs	r3, #48	; 0x30
 8006470:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006634 <_vfiprintf_r+0x24c>
 8006474:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006478:	f04f 0901 	mov.w	r9, #1
 800647c:	4623      	mov	r3, r4
 800647e:	469a      	mov	sl, r3
 8006480:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006484:	b10a      	cbz	r2, 800648a <_vfiprintf_r+0xa2>
 8006486:	2a25      	cmp	r2, #37	; 0x25
 8006488:	d1f9      	bne.n	800647e <_vfiprintf_r+0x96>
 800648a:	ebba 0b04 	subs.w	fp, sl, r4
 800648e:	d00b      	beq.n	80064a8 <_vfiprintf_r+0xc0>
 8006490:	465b      	mov	r3, fp
 8006492:	4622      	mov	r2, r4
 8006494:	4629      	mov	r1, r5
 8006496:	4630      	mov	r0, r6
 8006498:	f7ff ff93 	bl	80063c2 <__sfputs_r>
 800649c:	3001      	adds	r0, #1
 800649e:	f000 80aa 	beq.w	80065f6 <_vfiprintf_r+0x20e>
 80064a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064a4:	445a      	add	r2, fp
 80064a6:	9209      	str	r2, [sp, #36]	; 0x24
 80064a8:	f89a 3000 	ldrb.w	r3, [sl]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 80a2 	beq.w	80065f6 <_vfiprintf_r+0x20e>
 80064b2:	2300      	movs	r3, #0
 80064b4:	f04f 32ff 	mov.w	r2, #4294967295
 80064b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064bc:	f10a 0a01 	add.w	sl, sl, #1
 80064c0:	9304      	str	r3, [sp, #16]
 80064c2:	9307      	str	r3, [sp, #28]
 80064c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064c8:	931a      	str	r3, [sp, #104]	; 0x68
 80064ca:	4654      	mov	r4, sl
 80064cc:	2205      	movs	r2, #5
 80064ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064d2:	4858      	ldr	r0, [pc, #352]	; (8006634 <_vfiprintf_r+0x24c>)
 80064d4:	f7f9 ff04 	bl	80002e0 <memchr>
 80064d8:	9a04      	ldr	r2, [sp, #16]
 80064da:	b9d8      	cbnz	r0, 8006514 <_vfiprintf_r+0x12c>
 80064dc:	06d1      	lsls	r1, r2, #27
 80064de:	bf44      	itt	mi
 80064e0:	2320      	movmi	r3, #32
 80064e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e6:	0713      	lsls	r3, r2, #28
 80064e8:	bf44      	itt	mi
 80064ea:	232b      	movmi	r3, #43	; 0x2b
 80064ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064f0:	f89a 3000 	ldrb.w	r3, [sl]
 80064f4:	2b2a      	cmp	r3, #42	; 0x2a
 80064f6:	d015      	beq.n	8006524 <_vfiprintf_r+0x13c>
 80064f8:	9a07      	ldr	r2, [sp, #28]
 80064fa:	4654      	mov	r4, sl
 80064fc:	2000      	movs	r0, #0
 80064fe:	f04f 0c0a 	mov.w	ip, #10
 8006502:	4621      	mov	r1, r4
 8006504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006508:	3b30      	subs	r3, #48	; 0x30
 800650a:	2b09      	cmp	r3, #9
 800650c:	d94e      	bls.n	80065ac <_vfiprintf_r+0x1c4>
 800650e:	b1b0      	cbz	r0, 800653e <_vfiprintf_r+0x156>
 8006510:	9207      	str	r2, [sp, #28]
 8006512:	e014      	b.n	800653e <_vfiprintf_r+0x156>
 8006514:	eba0 0308 	sub.w	r3, r0, r8
 8006518:	fa09 f303 	lsl.w	r3, r9, r3
 800651c:	4313      	orrs	r3, r2
 800651e:	9304      	str	r3, [sp, #16]
 8006520:	46a2      	mov	sl, r4
 8006522:	e7d2      	b.n	80064ca <_vfiprintf_r+0xe2>
 8006524:	9b03      	ldr	r3, [sp, #12]
 8006526:	1d19      	adds	r1, r3, #4
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	9103      	str	r1, [sp, #12]
 800652c:	2b00      	cmp	r3, #0
 800652e:	bfbb      	ittet	lt
 8006530:	425b      	neglt	r3, r3
 8006532:	f042 0202 	orrlt.w	r2, r2, #2
 8006536:	9307      	strge	r3, [sp, #28]
 8006538:	9307      	strlt	r3, [sp, #28]
 800653a:	bfb8      	it	lt
 800653c:	9204      	strlt	r2, [sp, #16]
 800653e:	7823      	ldrb	r3, [r4, #0]
 8006540:	2b2e      	cmp	r3, #46	; 0x2e
 8006542:	d10c      	bne.n	800655e <_vfiprintf_r+0x176>
 8006544:	7863      	ldrb	r3, [r4, #1]
 8006546:	2b2a      	cmp	r3, #42	; 0x2a
 8006548:	d135      	bne.n	80065b6 <_vfiprintf_r+0x1ce>
 800654a:	9b03      	ldr	r3, [sp, #12]
 800654c:	1d1a      	adds	r2, r3, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	9203      	str	r2, [sp, #12]
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfb8      	it	lt
 8006556:	f04f 33ff 	movlt.w	r3, #4294967295
 800655a:	3402      	adds	r4, #2
 800655c:	9305      	str	r3, [sp, #20]
 800655e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006644 <_vfiprintf_r+0x25c>
 8006562:	7821      	ldrb	r1, [r4, #0]
 8006564:	2203      	movs	r2, #3
 8006566:	4650      	mov	r0, sl
 8006568:	f7f9 feba 	bl	80002e0 <memchr>
 800656c:	b140      	cbz	r0, 8006580 <_vfiprintf_r+0x198>
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	eba0 000a 	sub.w	r0, r0, sl
 8006574:	fa03 f000 	lsl.w	r0, r3, r0
 8006578:	9b04      	ldr	r3, [sp, #16]
 800657a:	4303      	orrs	r3, r0
 800657c:	3401      	adds	r4, #1
 800657e:	9304      	str	r3, [sp, #16]
 8006580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006584:	482c      	ldr	r0, [pc, #176]	; (8006638 <_vfiprintf_r+0x250>)
 8006586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800658a:	2206      	movs	r2, #6
 800658c:	f7f9 fea8 	bl	80002e0 <memchr>
 8006590:	2800      	cmp	r0, #0
 8006592:	d03f      	beq.n	8006614 <_vfiprintf_r+0x22c>
 8006594:	4b29      	ldr	r3, [pc, #164]	; (800663c <_vfiprintf_r+0x254>)
 8006596:	bb1b      	cbnz	r3, 80065e0 <_vfiprintf_r+0x1f8>
 8006598:	9b03      	ldr	r3, [sp, #12]
 800659a:	3307      	adds	r3, #7
 800659c:	f023 0307 	bic.w	r3, r3, #7
 80065a0:	3308      	adds	r3, #8
 80065a2:	9303      	str	r3, [sp, #12]
 80065a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a6:	443b      	add	r3, r7
 80065a8:	9309      	str	r3, [sp, #36]	; 0x24
 80065aa:	e767      	b.n	800647c <_vfiprintf_r+0x94>
 80065ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80065b0:	460c      	mov	r4, r1
 80065b2:	2001      	movs	r0, #1
 80065b4:	e7a5      	b.n	8006502 <_vfiprintf_r+0x11a>
 80065b6:	2300      	movs	r3, #0
 80065b8:	3401      	adds	r4, #1
 80065ba:	9305      	str	r3, [sp, #20]
 80065bc:	4619      	mov	r1, r3
 80065be:	f04f 0c0a 	mov.w	ip, #10
 80065c2:	4620      	mov	r0, r4
 80065c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065c8:	3a30      	subs	r2, #48	; 0x30
 80065ca:	2a09      	cmp	r2, #9
 80065cc:	d903      	bls.n	80065d6 <_vfiprintf_r+0x1ee>
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d0c5      	beq.n	800655e <_vfiprintf_r+0x176>
 80065d2:	9105      	str	r1, [sp, #20]
 80065d4:	e7c3      	b.n	800655e <_vfiprintf_r+0x176>
 80065d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80065da:	4604      	mov	r4, r0
 80065dc:	2301      	movs	r3, #1
 80065de:	e7f0      	b.n	80065c2 <_vfiprintf_r+0x1da>
 80065e0:	ab03      	add	r3, sp, #12
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	462a      	mov	r2, r5
 80065e6:	4b16      	ldr	r3, [pc, #88]	; (8006640 <_vfiprintf_r+0x258>)
 80065e8:	a904      	add	r1, sp, #16
 80065ea:	4630      	mov	r0, r6
 80065ec:	f7fd fc8c 	bl	8003f08 <_printf_float>
 80065f0:	4607      	mov	r7, r0
 80065f2:	1c78      	adds	r0, r7, #1
 80065f4:	d1d6      	bne.n	80065a4 <_vfiprintf_r+0x1bc>
 80065f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065f8:	07d9      	lsls	r1, r3, #31
 80065fa:	d405      	bmi.n	8006608 <_vfiprintf_r+0x220>
 80065fc:	89ab      	ldrh	r3, [r5, #12]
 80065fe:	059a      	lsls	r2, r3, #22
 8006600:	d402      	bmi.n	8006608 <_vfiprintf_r+0x220>
 8006602:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006604:	f7ff f9d0 	bl	80059a8 <__retarget_lock_release_recursive>
 8006608:	89ab      	ldrh	r3, [r5, #12]
 800660a:	065b      	lsls	r3, r3, #25
 800660c:	f53f af12 	bmi.w	8006434 <_vfiprintf_r+0x4c>
 8006610:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006612:	e711      	b.n	8006438 <_vfiprintf_r+0x50>
 8006614:	ab03      	add	r3, sp, #12
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	462a      	mov	r2, r5
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <_vfiprintf_r+0x258>)
 800661c:	a904      	add	r1, sp, #16
 800661e:	4630      	mov	r0, r6
 8006620:	f7fd ff16 	bl	8004450 <_printf_i>
 8006624:	e7e4      	b.n	80065f0 <_vfiprintf_r+0x208>
 8006626:	bf00      	nop
 8006628:	080098dc 	.word	0x080098dc
 800662c:	080098fc 	.word	0x080098fc
 8006630:	080098bc 	.word	0x080098bc
 8006634:	08009a74 	.word	0x08009a74
 8006638:	08009a7e 	.word	0x08009a7e
 800663c:	08003f09 	.word	0x08003f09
 8006640:	080063c3 	.word	0x080063c3
 8006644:	08009a7a 	.word	0x08009a7a

08006648 <_sbrk_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4d06      	ldr	r5, [pc, #24]	; (8006664 <_sbrk_r+0x1c>)
 800664c:	2300      	movs	r3, #0
 800664e:	4604      	mov	r4, r0
 8006650:	4608      	mov	r0, r1
 8006652:	602b      	str	r3, [r5, #0]
 8006654:	f7fa ff80 	bl	8001558 <_sbrk>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_sbrk_r+0x1a>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_sbrk_r+0x1a>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	200053a8 	.word	0x200053a8

08006668 <__sread>:
 8006668:	b510      	push	{r4, lr}
 800666a:	460c      	mov	r4, r1
 800666c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006670:	f000 f8e2 	bl	8006838 <_read_r>
 8006674:	2800      	cmp	r0, #0
 8006676:	bfab      	itete	ge
 8006678:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800667a:	89a3      	ldrhlt	r3, [r4, #12]
 800667c:	181b      	addge	r3, r3, r0
 800667e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006682:	bfac      	ite	ge
 8006684:	6563      	strge	r3, [r4, #84]	; 0x54
 8006686:	81a3      	strhlt	r3, [r4, #12]
 8006688:	bd10      	pop	{r4, pc}

0800668a <__swrite>:
 800668a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800668e:	461f      	mov	r7, r3
 8006690:	898b      	ldrh	r3, [r1, #12]
 8006692:	05db      	lsls	r3, r3, #23
 8006694:	4605      	mov	r5, r0
 8006696:	460c      	mov	r4, r1
 8006698:	4616      	mov	r6, r2
 800669a:	d505      	bpl.n	80066a8 <__swrite+0x1e>
 800669c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a0:	2302      	movs	r3, #2
 80066a2:	2200      	movs	r2, #0
 80066a4:	f000 f898 	bl	80067d8 <_lseek_r>
 80066a8:	89a3      	ldrh	r3, [r4, #12]
 80066aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066b2:	81a3      	strh	r3, [r4, #12]
 80066b4:	4632      	mov	r2, r6
 80066b6:	463b      	mov	r3, r7
 80066b8:	4628      	mov	r0, r5
 80066ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066be:	f000 b817 	b.w	80066f0 <_write_r>

080066c2 <__sseek>:
 80066c2:	b510      	push	{r4, lr}
 80066c4:	460c      	mov	r4, r1
 80066c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ca:	f000 f885 	bl	80067d8 <_lseek_r>
 80066ce:	1c43      	adds	r3, r0, #1
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	bf15      	itete	ne
 80066d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80066d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066de:	81a3      	strheq	r3, [r4, #12]
 80066e0:	bf18      	it	ne
 80066e2:	81a3      	strhne	r3, [r4, #12]
 80066e4:	bd10      	pop	{r4, pc}

080066e6 <__sclose>:
 80066e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ea:	f000 b831 	b.w	8006750 <_close_r>
	...

080066f0 <_write_r>:
 80066f0:	b538      	push	{r3, r4, r5, lr}
 80066f2:	4d07      	ldr	r5, [pc, #28]	; (8006710 <_write_r+0x20>)
 80066f4:	4604      	mov	r4, r0
 80066f6:	4608      	mov	r0, r1
 80066f8:	4611      	mov	r1, r2
 80066fa:	2200      	movs	r2, #0
 80066fc:	602a      	str	r2, [r5, #0]
 80066fe:	461a      	mov	r2, r3
 8006700:	f7fa ff10 	bl	8001524 <_write>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_write_r+0x1e>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_write_r+0x1e>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	200053a8 	.word	0x200053a8

08006714 <__assert_func>:
 8006714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006716:	4614      	mov	r4, r2
 8006718:	461a      	mov	r2, r3
 800671a:	4b09      	ldr	r3, [pc, #36]	; (8006740 <__assert_func+0x2c>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4605      	mov	r5, r0
 8006720:	68d8      	ldr	r0, [r3, #12]
 8006722:	b14c      	cbz	r4, 8006738 <__assert_func+0x24>
 8006724:	4b07      	ldr	r3, [pc, #28]	; (8006744 <__assert_func+0x30>)
 8006726:	9100      	str	r1, [sp, #0]
 8006728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800672c:	4906      	ldr	r1, [pc, #24]	; (8006748 <__assert_func+0x34>)
 800672e:	462b      	mov	r3, r5
 8006730:	f000 f81e 	bl	8006770 <fiprintf>
 8006734:	f000 f89f 	bl	8006876 <abort>
 8006738:	4b04      	ldr	r3, [pc, #16]	; (800674c <__assert_func+0x38>)
 800673a:	461c      	mov	r4, r3
 800673c:	e7f3      	b.n	8006726 <__assert_func+0x12>
 800673e:	bf00      	nop
 8006740:	20000014 	.word	0x20000014
 8006744:	08009a85 	.word	0x08009a85
 8006748:	08009a92 	.word	0x08009a92
 800674c:	080069a5 	.word	0x080069a5

08006750 <_close_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4d06      	ldr	r5, [pc, #24]	; (800676c <_close_r+0x1c>)
 8006754:	2300      	movs	r3, #0
 8006756:	4604      	mov	r4, r0
 8006758:	4608      	mov	r0, r1
 800675a:	602b      	str	r3, [r5, #0]
 800675c:	f7fa fef0 	bl	8001540 <_close>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_close_r+0x1a>
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	b103      	cbz	r3, 800676a <_close_r+0x1a>
 8006768:	6023      	str	r3, [r4, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	200053a8 	.word	0x200053a8

08006770 <fiprintf>:
 8006770:	b40e      	push	{r1, r2, r3}
 8006772:	b503      	push	{r0, r1, lr}
 8006774:	4601      	mov	r1, r0
 8006776:	ab03      	add	r3, sp, #12
 8006778:	4805      	ldr	r0, [pc, #20]	; (8006790 <fiprintf+0x20>)
 800677a:	f853 2b04 	ldr.w	r2, [r3], #4
 800677e:	6800      	ldr	r0, [r0, #0]
 8006780:	9301      	str	r3, [sp, #4]
 8006782:	f7ff fe31 	bl	80063e8 <_vfiprintf_r>
 8006786:	b002      	add	sp, #8
 8006788:	f85d eb04 	ldr.w	lr, [sp], #4
 800678c:	b003      	add	sp, #12
 800678e:	4770      	bx	lr
 8006790:	20000014 	.word	0x20000014

08006794 <_fstat_r>:
 8006794:	b538      	push	{r3, r4, r5, lr}
 8006796:	4d07      	ldr	r5, [pc, #28]	; (80067b4 <_fstat_r+0x20>)
 8006798:	2300      	movs	r3, #0
 800679a:	4604      	mov	r4, r0
 800679c:	4608      	mov	r0, r1
 800679e:	4611      	mov	r1, r2
 80067a0:	602b      	str	r3, [r5, #0]
 80067a2:	f7fa fed0 	bl	8001546 <_fstat>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d102      	bne.n	80067b0 <_fstat_r+0x1c>
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	b103      	cbz	r3, 80067b0 <_fstat_r+0x1c>
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	bd38      	pop	{r3, r4, r5, pc}
 80067b2:	bf00      	nop
 80067b4:	200053a8 	.word	0x200053a8

080067b8 <_isatty_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4d06      	ldr	r5, [pc, #24]	; (80067d4 <_isatty_r+0x1c>)
 80067bc:	2300      	movs	r3, #0
 80067be:	4604      	mov	r4, r0
 80067c0:	4608      	mov	r0, r1
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	f7fa fec4 	bl	8001550 <_isatty>
 80067c8:	1c43      	adds	r3, r0, #1
 80067ca:	d102      	bne.n	80067d2 <_isatty_r+0x1a>
 80067cc:	682b      	ldr	r3, [r5, #0]
 80067ce:	b103      	cbz	r3, 80067d2 <_isatty_r+0x1a>
 80067d0:	6023      	str	r3, [r4, #0]
 80067d2:	bd38      	pop	{r3, r4, r5, pc}
 80067d4:	200053a8 	.word	0x200053a8

080067d8 <_lseek_r>:
 80067d8:	b538      	push	{r3, r4, r5, lr}
 80067da:	4d07      	ldr	r5, [pc, #28]	; (80067f8 <_lseek_r+0x20>)
 80067dc:	4604      	mov	r4, r0
 80067de:	4608      	mov	r0, r1
 80067e0:	4611      	mov	r1, r2
 80067e2:	2200      	movs	r2, #0
 80067e4:	602a      	str	r2, [r5, #0]
 80067e6:	461a      	mov	r2, r3
 80067e8:	f7fa feb4 	bl	8001554 <_lseek>
 80067ec:	1c43      	adds	r3, r0, #1
 80067ee:	d102      	bne.n	80067f6 <_lseek_r+0x1e>
 80067f0:	682b      	ldr	r3, [r5, #0]
 80067f2:	b103      	cbz	r3, 80067f6 <_lseek_r+0x1e>
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	bd38      	pop	{r3, r4, r5, pc}
 80067f8:	200053a8 	.word	0x200053a8

080067fc <__ascii_mbtowc>:
 80067fc:	b082      	sub	sp, #8
 80067fe:	b901      	cbnz	r1, 8006802 <__ascii_mbtowc+0x6>
 8006800:	a901      	add	r1, sp, #4
 8006802:	b142      	cbz	r2, 8006816 <__ascii_mbtowc+0x1a>
 8006804:	b14b      	cbz	r3, 800681a <__ascii_mbtowc+0x1e>
 8006806:	7813      	ldrb	r3, [r2, #0]
 8006808:	600b      	str	r3, [r1, #0]
 800680a:	7812      	ldrb	r2, [r2, #0]
 800680c:	1e10      	subs	r0, r2, #0
 800680e:	bf18      	it	ne
 8006810:	2001      	movne	r0, #1
 8006812:	b002      	add	sp, #8
 8006814:	4770      	bx	lr
 8006816:	4610      	mov	r0, r2
 8006818:	e7fb      	b.n	8006812 <__ascii_mbtowc+0x16>
 800681a:	f06f 0001 	mvn.w	r0, #1
 800681e:	e7f8      	b.n	8006812 <__ascii_mbtowc+0x16>

08006820 <__malloc_lock>:
 8006820:	4801      	ldr	r0, [pc, #4]	; (8006828 <__malloc_lock+0x8>)
 8006822:	f7ff b8c0 	b.w	80059a6 <__retarget_lock_acquire_recursive>
 8006826:	bf00      	nop
 8006828:	2000539c 	.word	0x2000539c

0800682c <__malloc_unlock>:
 800682c:	4801      	ldr	r0, [pc, #4]	; (8006834 <__malloc_unlock+0x8>)
 800682e:	f7ff b8bb 	b.w	80059a8 <__retarget_lock_release_recursive>
 8006832:	bf00      	nop
 8006834:	2000539c 	.word	0x2000539c

08006838 <_read_r>:
 8006838:	b538      	push	{r3, r4, r5, lr}
 800683a:	4d07      	ldr	r5, [pc, #28]	; (8006858 <_read_r+0x20>)
 800683c:	4604      	mov	r4, r0
 800683e:	4608      	mov	r0, r1
 8006840:	4611      	mov	r1, r2
 8006842:	2200      	movs	r2, #0
 8006844:	602a      	str	r2, [r5, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	f7fa fe5e 	bl	8001508 <_read>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d102      	bne.n	8006856 <_read_r+0x1e>
 8006850:	682b      	ldr	r3, [r5, #0]
 8006852:	b103      	cbz	r3, 8006856 <_read_r+0x1e>
 8006854:	6023      	str	r3, [r4, #0]
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	200053a8 	.word	0x200053a8

0800685c <__ascii_wctomb>:
 800685c:	b149      	cbz	r1, 8006872 <__ascii_wctomb+0x16>
 800685e:	2aff      	cmp	r2, #255	; 0xff
 8006860:	bf85      	ittet	hi
 8006862:	238a      	movhi	r3, #138	; 0x8a
 8006864:	6003      	strhi	r3, [r0, #0]
 8006866:	700a      	strbls	r2, [r1, #0]
 8006868:	f04f 30ff 	movhi.w	r0, #4294967295
 800686c:	bf98      	it	ls
 800686e:	2001      	movls	r0, #1
 8006870:	4770      	bx	lr
 8006872:	4608      	mov	r0, r1
 8006874:	4770      	bx	lr

08006876 <abort>:
 8006876:	b508      	push	{r3, lr}
 8006878:	2006      	movs	r0, #6
 800687a:	f000 f82b 	bl	80068d4 <raise>
 800687e:	2001      	movs	r0, #1
 8006880:	f7fa fe3c 	bl	80014fc <_exit>

08006884 <_raise_r>:
 8006884:	291f      	cmp	r1, #31
 8006886:	b538      	push	{r3, r4, r5, lr}
 8006888:	4604      	mov	r4, r0
 800688a:	460d      	mov	r5, r1
 800688c:	d904      	bls.n	8006898 <_raise_r+0x14>
 800688e:	2316      	movs	r3, #22
 8006890:	6003      	str	r3, [r0, #0]
 8006892:	f04f 30ff 	mov.w	r0, #4294967295
 8006896:	bd38      	pop	{r3, r4, r5, pc}
 8006898:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800689a:	b112      	cbz	r2, 80068a2 <_raise_r+0x1e>
 800689c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80068a0:	b94b      	cbnz	r3, 80068b6 <_raise_r+0x32>
 80068a2:	4620      	mov	r0, r4
 80068a4:	f000 f830 	bl	8006908 <_getpid_r>
 80068a8:	462a      	mov	r2, r5
 80068aa:	4601      	mov	r1, r0
 80068ac:	4620      	mov	r0, r4
 80068ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b2:	f000 b817 	b.w	80068e4 <_kill_r>
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d00a      	beq.n	80068d0 <_raise_r+0x4c>
 80068ba:	1c59      	adds	r1, r3, #1
 80068bc:	d103      	bne.n	80068c6 <_raise_r+0x42>
 80068be:	2316      	movs	r3, #22
 80068c0:	6003      	str	r3, [r0, #0]
 80068c2:	2001      	movs	r0, #1
 80068c4:	e7e7      	b.n	8006896 <_raise_r+0x12>
 80068c6:	2400      	movs	r4, #0
 80068c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80068cc:	4628      	mov	r0, r5
 80068ce:	4798      	blx	r3
 80068d0:	2000      	movs	r0, #0
 80068d2:	e7e0      	b.n	8006896 <_raise_r+0x12>

080068d4 <raise>:
 80068d4:	4b02      	ldr	r3, [pc, #8]	; (80068e0 <raise+0xc>)
 80068d6:	4601      	mov	r1, r0
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	f7ff bfd3 	b.w	8006884 <_raise_r>
 80068de:	bf00      	nop
 80068e0:	20000014 	.word	0x20000014

080068e4 <_kill_r>:
 80068e4:	b538      	push	{r3, r4, r5, lr}
 80068e6:	4d07      	ldr	r5, [pc, #28]	; (8006904 <_kill_r+0x20>)
 80068e8:	2300      	movs	r3, #0
 80068ea:	4604      	mov	r4, r0
 80068ec:	4608      	mov	r0, r1
 80068ee:	4611      	mov	r1, r2
 80068f0:	602b      	str	r3, [r5, #0]
 80068f2:	f7fa fdfb 	bl	80014ec <_kill>
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d102      	bne.n	8006900 <_kill_r+0x1c>
 80068fa:	682b      	ldr	r3, [r5, #0]
 80068fc:	b103      	cbz	r3, 8006900 <_kill_r+0x1c>
 80068fe:	6023      	str	r3, [r4, #0]
 8006900:	bd38      	pop	{r3, r4, r5, pc}
 8006902:	bf00      	nop
 8006904:	200053a8 	.word	0x200053a8

08006908 <_getpid_r>:
 8006908:	f7fa bdee 	b.w	80014e8 <_getpid>

0800690c <sqrtf>:
 800690c:	b508      	push	{r3, lr}
 800690e:	ed2d 8b02 	vpush	{d8}
 8006912:	eeb0 8a40 	vmov.f32	s16, s0
 8006916:	f000 f817 	bl	8006948 <__ieee754_sqrtf>
 800691a:	eeb4 8a48 	vcmp.f32	s16, s16
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	d60c      	bvs.n	800693e <sqrtf+0x32>
 8006924:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006944 <sqrtf+0x38>
 8006928:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006930:	d505      	bpl.n	800693e <sqrtf+0x32>
 8006932:	f7fd fa17 	bl	8003d64 <__errno>
 8006936:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800693a:	2321      	movs	r3, #33	; 0x21
 800693c:	6003      	str	r3, [r0, #0]
 800693e:	ecbd 8b02 	vpop	{d8}
 8006942:	bd08      	pop	{r3, pc}
 8006944:	00000000 	.word	0x00000000

08006948 <__ieee754_sqrtf>:
 8006948:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800694c:	4770      	bx	lr
	...

08006950 <_init>:
 8006950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006952:	bf00      	nop
 8006954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006956:	bc08      	pop	{r3}
 8006958:	469e      	mov	lr, r3
 800695a:	4770      	bx	lr

0800695c <_fini>:
 800695c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695e:	bf00      	nop
 8006960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006962:	bc08      	pop	{r3}
 8006964:	469e      	mov	lr, r3
 8006966:	4770      	bx	lr
