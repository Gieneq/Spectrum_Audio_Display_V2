
ASD_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005044  08008578  08008578  00018578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5bc  0800d5bc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5bc  0800d5bc  0001d5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5c4  0800d5c4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5c4  0800d5c4  0001d5c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5c8  0800d5c8  0001d5c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800d5cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007a60  200001ec  0800d7b8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007c4c  0800d7b8  00027c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002531a  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057ca  00000000  00000000  00045536  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000166cb  00000000  00000000  0004ad00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001358  00000000  00000000  000613d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d40  00000000  00000000  00062728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029a96  00000000  00000000  00064468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b1e1  00000000  00000000  0008defe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7b41  00000000  00000000  000b90df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  001a0c20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bd0  00000000  00000000  001a0ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800855c 	.word	0x0800855c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f0 	.word	0x200001f0
 800020c:	0800855c 	.word	0x0800855c

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2uiz>:
 8000ca8:	004a      	lsls	r2, r1, #1
 8000caa:	d211      	bcs.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb0:	d211      	bcs.n	8000cd6 <__aeabi_d2uiz+0x2e>
 8000cb2:	d50d      	bpl.n	8000cd0 <__aeabi_d2uiz+0x28>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d40e      	bmi.n	8000cdc <__aeabi_d2uiz+0x34>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	fa23 f002 	lsr.w	r0, r3, r2
 8000cce:	4770      	bx	lr
 8000cd0:	f04f 0000 	mov.w	r0, #0
 8000cd4:	4770      	bx	lr
 8000cd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cda:	d102      	bne.n	8000ce2 <__aeabi_d2uiz+0x3a>
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	4770      	bx	lr
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2f>:
 8000ce8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cf0:	bf24      	itt	cs
 8000cf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cfa:	d90d      	bls.n	8000d18 <__aeabi_d2f+0x30>
 8000cfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000d04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000d08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000d0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d10:	bf08      	it	eq
 8000d12:	f020 0001 	biceq.w	r0, r0, #1
 8000d16:	4770      	bx	lr
 8000d18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d1c:	d121      	bne.n	8000d62 <__aeabi_d2f+0x7a>
 8000d1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d22:	bfbc      	itt	lt
 8000d24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d28:	4770      	bxlt	lr
 8000d2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d32:	f1c2 0218 	rsb	r2, r2, #24
 8000d36:	f1c2 0c20 	rsb	ip, r2, #32
 8000d3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d42:	bf18      	it	ne
 8000d44:	f040 0001 	orrne.w	r0, r0, #1
 8000d48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d54:	ea40 000c 	orr.w	r0, r0, ip
 8000d58:	fa23 f302 	lsr.w	r3, r3, r2
 8000d5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d60:	e7cc      	b.n	8000cfc <__aeabi_d2f+0x14>
 8000d62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d66:	d107      	bne.n	8000d78 <__aeabi_d2f+0x90>
 8000d68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d6c:	bf1e      	ittt	ne
 8000d6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d76:	4770      	bxne	lr
 8000d78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b974 	b.w	8001088 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f806 	bl	8000db8 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__udivmoddi4>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	9d08      	ldr	r5, [sp, #32]
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	468e      	mov	lr, r1
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d14d      	bne.n	8000e62 <__udivmoddi4+0xaa>
 8000dc6:	428a      	cmp	r2, r1
 8000dc8:	4694      	mov	ip, r2
 8000dca:	d969      	bls.n	8000ea0 <__udivmoddi4+0xe8>
 8000dcc:	fab2 f282 	clz	r2, r2
 8000dd0:	b152      	cbz	r2, 8000de8 <__udivmoddi4+0x30>
 8000dd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000dd6:	f1c2 0120 	rsb	r1, r2, #32
 8000dda:	fa20 f101 	lsr.w	r1, r0, r1
 8000dde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de2:	ea41 0e03 	orr.w	lr, r1, r3
 8000de6:	4094      	lsls	r4, r2
 8000de8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dec:	0c21      	lsrs	r1, r4, #16
 8000dee:	fbbe f6f8 	udiv	r6, lr, r8
 8000df2:	fa1f f78c 	uxth.w	r7, ip
 8000df6:	fb08 e316 	mls	r3, r8, r6, lr
 8000dfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dfe:	fb06 f107 	mul.w	r1, r6, r7
 8000e02:	4299      	cmp	r1, r3
 8000e04:	d90a      	bls.n	8000e1c <__udivmoddi4+0x64>
 8000e06:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e0e:	f080 811f 	bcs.w	8001050 <__udivmoddi4+0x298>
 8000e12:	4299      	cmp	r1, r3
 8000e14:	f240 811c 	bls.w	8001050 <__udivmoddi4+0x298>
 8000e18:	3e02      	subs	r6, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a5b      	subs	r3, r3, r1
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e24:	fb08 3310 	mls	r3, r8, r0, r3
 8000e28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e2c:	fb00 f707 	mul.w	r7, r0, r7
 8000e30:	42a7      	cmp	r7, r4
 8000e32:	d90a      	bls.n	8000e4a <__udivmoddi4+0x92>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3c:	f080 810a 	bcs.w	8001054 <__udivmoddi4+0x29c>
 8000e40:	42a7      	cmp	r7, r4
 8000e42:	f240 8107 	bls.w	8001054 <__udivmoddi4+0x29c>
 8000e46:	4464      	add	r4, ip
 8000e48:	3802      	subs	r0, #2
 8000e4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e4e:	1be4      	subs	r4, r4, r7
 8000e50:	2600      	movs	r6, #0
 8000e52:	b11d      	cbz	r5, 8000e5c <__udivmoddi4+0xa4>
 8000e54:	40d4      	lsrs	r4, r2
 8000e56:	2300      	movs	r3, #0
 8000e58:	e9c5 4300 	strd	r4, r3, [r5]
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d909      	bls.n	8000e7a <__udivmoddi4+0xc2>
 8000e66:	2d00      	cmp	r5, #0
 8000e68:	f000 80ef 	beq.w	800104a <__udivmoddi4+0x292>
 8000e6c:	2600      	movs	r6, #0
 8000e6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000e72:	4630      	mov	r0, r6
 8000e74:	4631      	mov	r1, r6
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	fab3 f683 	clz	r6, r3
 8000e7e:	2e00      	cmp	r6, #0
 8000e80:	d14a      	bne.n	8000f18 <__udivmoddi4+0x160>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d302      	bcc.n	8000e8c <__udivmoddi4+0xd4>
 8000e86:	4282      	cmp	r2, r0
 8000e88:	f200 80f9 	bhi.w	800107e <__udivmoddi4+0x2c6>
 8000e8c:	1a84      	subs	r4, r0, r2
 8000e8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	469e      	mov	lr, r3
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d0e0      	beq.n	8000e5c <__udivmoddi4+0xa4>
 8000e9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e9e:	e7dd      	b.n	8000e5c <__udivmoddi4+0xa4>
 8000ea0:	b902      	cbnz	r2, 8000ea4 <__udivmoddi4+0xec>
 8000ea2:	deff      	udf	#255	; 0xff
 8000ea4:	fab2 f282 	clz	r2, r2
 8000ea8:	2a00      	cmp	r2, #0
 8000eaa:	f040 8092 	bne.w	8000fd2 <__udivmoddi4+0x21a>
 8000eae:	eba1 010c 	sub.w	r1, r1, ip
 8000eb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb6:	fa1f fe8c 	uxth.w	lr, ip
 8000eba:	2601      	movs	r6, #1
 8000ebc:	0c20      	lsrs	r0, r4, #16
 8000ebe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ec2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ec6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eca:	fb0e f003 	mul.w	r0, lr, r3
 8000ece:	4288      	cmp	r0, r1
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x12c>
 8000ed2:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000eda:	d202      	bcs.n	8000ee2 <__udivmoddi4+0x12a>
 8000edc:	4288      	cmp	r0, r1
 8000ede:	f200 80cb 	bhi.w	8001078 <__udivmoddi4+0x2c0>
 8000ee2:	4643      	mov	r3, r8
 8000ee4:	1a09      	subs	r1, r1, r0
 8000ee6:	b2a4      	uxth	r4, r4
 8000ee8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eec:	fb07 1110 	mls	r1, r7, r0, r1
 8000ef0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ef4:	fb0e fe00 	mul.w	lr, lr, r0
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x156>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f04:	d202      	bcs.n	8000f0c <__udivmoddi4+0x154>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	f200 80bb 	bhi.w	8001082 <__udivmoddi4+0x2ca>
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	eba4 040e 	sub.w	r4, r4, lr
 8000f12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f16:	e79c      	b.n	8000e52 <__udivmoddi4+0x9a>
 8000f18:	f1c6 0720 	rsb	r7, r6, #32
 8000f1c:	40b3      	lsls	r3, r6
 8000f1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f26:	fa20 f407 	lsr.w	r4, r0, r7
 8000f2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f2e:	431c      	orrs	r4, r3
 8000f30:	40f9      	lsrs	r1, r7
 8000f32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f36:	fa00 f306 	lsl.w	r3, r0, r6
 8000f3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f3e:	0c20      	lsrs	r0, r4, #16
 8000f40:	fa1f fe8c 	uxth.w	lr, ip
 8000f44:	fb09 1118 	mls	r1, r9, r8, r1
 8000f48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000f50:	4288      	cmp	r0, r1
 8000f52:	fa02 f206 	lsl.w	r2, r2, r6
 8000f56:	d90b      	bls.n	8000f70 <__udivmoddi4+0x1b8>
 8000f58:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f60:	f080 8088 	bcs.w	8001074 <__udivmoddi4+0x2bc>
 8000f64:	4288      	cmp	r0, r1
 8000f66:	f240 8085 	bls.w	8001074 <__udivmoddi4+0x2bc>
 8000f6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000f6e:	4461      	add	r1, ip
 8000f70:	1a09      	subs	r1, r1, r0
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f78:	fb09 1110 	mls	r1, r9, r0, r1
 8000f7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f84:	458e      	cmp	lr, r1
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x1e2>
 8000f88:	eb1c 0101 	adds.w	r1, ip, r1
 8000f8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f90:	d26c      	bcs.n	800106c <__udivmoddi4+0x2b4>
 8000f92:	458e      	cmp	lr, r1
 8000f94:	d96a      	bls.n	800106c <__udivmoddi4+0x2b4>
 8000f96:	3802      	subs	r0, #2
 8000f98:	4461      	add	r1, ip
 8000f9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000fa2:	eba1 010e 	sub.w	r1, r1, lr
 8000fa6:	42a1      	cmp	r1, r4
 8000fa8:	46c8      	mov	r8, r9
 8000faa:	46a6      	mov	lr, r4
 8000fac:	d356      	bcc.n	800105c <__udivmoddi4+0x2a4>
 8000fae:	d053      	beq.n	8001058 <__udivmoddi4+0x2a0>
 8000fb0:	b15d      	cbz	r5, 8000fca <__udivmoddi4+0x212>
 8000fb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000fb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000fba:	fa01 f707 	lsl.w	r7, r1, r7
 8000fbe:	fa22 f306 	lsr.w	r3, r2, r6
 8000fc2:	40f1      	lsrs	r1, r6
 8000fc4:	431f      	orrs	r7, r3
 8000fc6:	e9c5 7100 	strd	r7, r1, [r5]
 8000fca:	2600      	movs	r6, #0
 8000fcc:	4631      	mov	r1, r6
 8000fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd2:	f1c2 0320 	rsb	r3, r2, #32
 8000fd6:	40d8      	lsrs	r0, r3
 8000fd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fdc:	fa21 f303 	lsr.w	r3, r1, r3
 8000fe0:	4091      	lsls	r1, r2
 8000fe2:	4301      	orrs	r1, r0
 8000fe4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe8:	fa1f fe8c 	uxth.w	lr, ip
 8000fec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ff0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ff4:	0c0b      	lsrs	r3, r1, #16
 8000ff6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ffa:	fb00 f60e 	mul.w	r6, r0, lr
 8000ffe:	429e      	cmp	r6, r3
 8001000:	fa04 f402 	lsl.w	r4, r4, r2
 8001004:	d908      	bls.n	8001018 <__udivmoddi4+0x260>
 8001006:	eb1c 0303 	adds.w	r3, ip, r3
 800100a:	f100 38ff 	add.w	r8, r0, #4294967295
 800100e:	d22f      	bcs.n	8001070 <__udivmoddi4+0x2b8>
 8001010:	429e      	cmp	r6, r3
 8001012:	d92d      	bls.n	8001070 <__udivmoddi4+0x2b8>
 8001014:	3802      	subs	r0, #2
 8001016:	4463      	add	r3, ip
 8001018:	1b9b      	subs	r3, r3, r6
 800101a:	b289      	uxth	r1, r1
 800101c:	fbb3 f6f7 	udiv	r6, r3, r7
 8001020:	fb07 3316 	mls	r3, r7, r6, r3
 8001024:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001028:	fb06 f30e 	mul.w	r3, r6, lr
 800102c:	428b      	cmp	r3, r1
 800102e:	d908      	bls.n	8001042 <__udivmoddi4+0x28a>
 8001030:	eb1c 0101 	adds.w	r1, ip, r1
 8001034:	f106 38ff 	add.w	r8, r6, #4294967295
 8001038:	d216      	bcs.n	8001068 <__udivmoddi4+0x2b0>
 800103a:	428b      	cmp	r3, r1
 800103c:	d914      	bls.n	8001068 <__udivmoddi4+0x2b0>
 800103e:	3e02      	subs	r6, #2
 8001040:	4461      	add	r1, ip
 8001042:	1ac9      	subs	r1, r1, r3
 8001044:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001048:	e738      	b.n	8000ebc <__udivmoddi4+0x104>
 800104a:	462e      	mov	r6, r5
 800104c:	4628      	mov	r0, r5
 800104e:	e705      	b.n	8000e5c <__udivmoddi4+0xa4>
 8001050:	4606      	mov	r6, r0
 8001052:	e6e3      	b.n	8000e1c <__udivmoddi4+0x64>
 8001054:	4618      	mov	r0, r3
 8001056:	e6f8      	b.n	8000e4a <__udivmoddi4+0x92>
 8001058:	454b      	cmp	r3, r9
 800105a:	d2a9      	bcs.n	8000fb0 <__udivmoddi4+0x1f8>
 800105c:	ebb9 0802 	subs.w	r8, r9, r2
 8001060:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001064:	3801      	subs	r0, #1
 8001066:	e7a3      	b.n	8000fb0 <__udivmoddi4+0x1f8>
 8001068:	4646      	mov	r6, r8
 800106a:	e7ea      	b.n	8001042 <__udivmoddi4+0x28a>
 800106c:	4620      	mov	r0, r4
 800106e:	e794      	b.n	8000f9a <__udivmoddi4+0x1e2>
 8001070:	4640      	mov	r0, r8
 8001072:	e7d1      	b.n	8001018 <__udivmoddi4+0x260>
 8001074:	46d0      	mov	r8, sl
 8001076:	e77b      	b.n	8000f70 <__udivmoddi4+0x1b8>
 8001078:	3b02      	subs	r3, #2
 800107a:	4461      	add	r1, ip
 800107c:	e732      	b.n	8000ee4 <__udivmoddi4+0x12c>
 800107e:	4630      	mov	r0, r6
 8001080:	e709      	b.n	8000e96 <__udivmoddi4+0xde>
 8001082:	4464      	add	r4, ip
 8001084:	3802      	subs	r0, #2
 8001086:	e742      	b.n	8000f0e <__udivmoddi4+0x156>

08001088 <__aeabi_idiv0>:
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <ASD_Animation_dummy>:
#define MIN_VALUE 120

static const float32_t HUE_INCREMENT = 255.0/(BANDS_COUNT * DISPLAY_HEIGHT);
static uint16_t _hueIdx = 0;

void ASD_Animation_dummy(bounds_t* bounds) {
 800108c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	if(HAL_GetTick() - lastParticleGenTime > PARTICLE_GEN_INTERVAL) {
 8001090:	4c30      	ldr	r4, [pc, #192]	; (8001154 <ASD_Animation_dummy+0xc8>)
 8001092:	f001 fbb5 	bl	8002800 <HAL_GetTick>
 8001096:	6823      	ldr	r3, [r4, #0]
 8001098:	1ac0      	subs	r0, r0, r3
 800109a:	2850      	cmp	r0, #80	; 0x50
 800109c:	d943      	bls.n	8001126 <ASD_Animation_dummy+0x9a>
		lastParticleGenTime = HAL_GetTick();
 800109e:	f001 fbaf 	bl	8002800 <HAL_GetTick>
		uint8_t rndValue;
		int nextX, nextY;
		int incr = 0;

		while(1) {
			rndValue = NOISE[(HAL_GetTick() + incr++) % NOISE_LENGTH];
 80010a2:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800115c <ASD_Animation_dummy+0xd0>
		lastParticleGenTime = HAL_GetTick();
 80010a6:	6020      	str	r0, [r4, #0]
 80010a8:	f04f 0a00 	mov.w	sl, #0
			rndValue ^= (uint8_t)(HAL_GetTick());

			nextX = (rndValue + 81) % BANDS_COUNT;
 80010ac:	2713      	movs	r7, #19
			nextY = (rndValue + 7) % DISPLAY_HEIGHT;
 80010ae:	f04f 0815 	mov.w	r8, #21
			rndValue = NOISE[(HAL_GetTick() + incr++) % NOISE_LENGTH];
 80010b2:	f001 fba5 	bl	8002800 <HAL_GetTick>
 80010b6:	4450      	add	r0, sl
 80010b8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80010bc:	f819 5000 	ldrb.w	r5, [r9, r0]
			rndValue ^= (uint8_t)(HAL_GetTick());
 80010c0:	f001 fb9e 	bl	8002800 <HAL_GetTick>
 80010c4:	4068      	eors	r0, r5
 80010c6:	b2c4      	uxtb	r4, r0
			nextX = (rndValue + 81) % BANDS_COUNT;
 80010c8:	f104 0651 	add.w	r6, r4, #81	; 0x51
			nextY = (rndValue + 7) % DISPLAY_HEIGHT;
 80010cc:	1de5      	adds	r5, r4, #7
			nextX = (rndValue + 81) % BANDS_COUNT;
 80010ce:	fbb6 f3f7 	udiv	r3, r6, r7
 80010d2:	fb07 6613 	mls	r6, r7, r3, r6

			CHSV* currentPixel = ASD_DISP_getPixel(nextX, nextY);
 80010d6:	4630      	mov	r0, r6
			nextY = (rndValue + 7) % DISPLAY_HEIGHT;
 80010d8:	fbb5 f1f8 	udiv	r1, r5, r8
 80010dc:	fb08 5111 	mls	r1, r8, r1, r5
			CHSV* currentPixel = ASD_DISP_getPixel(nextX, nextY);
 80010e0:	9103      	str	r1, [sp, #12]
 80010e2:	f000 faf9 	bl	80016d8 <ASD_DISP_getPixel>
			//todo change pixel count to true max
			if(((currentPixel != NULL) && (currentPixel->val <= 0)) || incr > (BANDS_COUNT * DISPLAY_HEIGHT))
 80010e6:	9903      	ldr	r1, [sp, #12]
 80010e8:	b108      	cbz	r0, 80010ee <ASD_Animation_dummy+0x62>
 80010ea:	7883      	ldrb	r3, [r0, #2]
 80010ec:	b123      	cbz	r3, 80010f8 <ASD_Animation_dummy+0x6c>
 80010ee:	f10a 0a01 	add.w	sl, sl, #1
 80010f2:	f5ba 7fc8 	cmp.w	sl, #400	; 0x190
 80010f6:	d1dc      	bne.n	80010b2 <ASD_Animation_dummy+0x26>
				break;
		}

		uint8_t nextHue = (uint8_t)((uint32_t)(rndValue + 41) % 256);
		uint8_t nextSat = (uint8_t)((uint32_t)(rndValue + 123) % (256-MIN_SATURATION) + MIN_SATURATION);
 80010f8:	f104 037b 	add.w	r3, r4, #123	; 0x7b
 80010fc:	2238      	movs	r2, #56	; 0x38
 80010fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8001102:	fb02 3310 	mls	r3, r2, r0, r3
		uint8_t nextVal = (uint8_t)((uint32_t)(rndValue + 7) % (256-MIN_VALUE) + MIN_VALUE);
 8001106:	2088      	movs	r0, #136	; 0x88
		uint8_t nextHue = (uint8_t)((uint32_t)(rndValue + 41) % 256);
 8001108:	f104 0229 	add.w	r2, r4, #41	; 0x29
		uint8_t nextVal = (uint8_t)((uint32_t)(rndValue + 7) % (256-MIN_VALUE) + MIN_VALUE);
 800110c:	fbb5 f4f0 	udiv	r4, r5, r0
 8001110:	fb00 5514 	mls	r5, r0, r4, r5
 8001114:	3578      	adds	r5, #120	; 0x78
		uint8_t nextSat = (uint8_t)((uint32_t)(rndValue + 123) % (256-MIN_SATURATION) + MIN_SATURATION);
 8001116:	3b38      	subs	r3, #56	; 0x38

		ASD_DISP_setPixel(nextX, nextY, nextHue, nextSat, nextVal);
 8001118:	b2ed      	uxtb	r5, r5
 800111a:	9500      	str	r5, [sp, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	4630      	mov	r0, r6
 8001122:	f000 faed 	bl	8001700 <ASD_DISP_setPixel>
	}

	_hueIdx = 0;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <ASD_Animation_dummy+0xcc>)
 8001128:	2400      	movs	r4, #0
 800112a:	801c      	strh	r4, [r3, #0]
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
		for (int iy = 0; iy < DISPLAY_HEIGHT; iy++) {
 800112c:	2500      	movs	r5, #0
			CHSV* currentPixel = ASD_DISP_getPixel(ix, iy);
 800112e:	4629      	mov	r1, r5
 8001130:	4620      	mov	r0, r4
 8001132:	f000 fad1 	bl	80016d8 <ASD_DISP_getPixel>
			if(currentPixel != NULL) {
 8001136:	b118      	cbz	r0, 8001140 <ASD_Animation_dummy+0xb4>
				if(currentPixel->val > 0)
 8001138:	7883      	ldrb	r3, [r0, #2]
 800113a:	b10b      	cbz	r3, 8001140 <ASD_Animation_dummy+0xb4>
					currentPixel->val--;
 800113c:	3b01      	subs	r3, #1
 800113e:	7083      	strb	r3, [r0, #2]
		for (int iy = 0; iy < DISPLAY_HEIGHT; iy++) {
 8001140:	3501      	adds	r5, #1
 8001142:	2d15      	cmp	r5, #21
 8001144:	d1f3      	bne.n	800112e <ASD_Animation_dummy+0xa2>
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8001146:	3401      	adds	r4, #1
 8001148:	2c13      	cmp	r4, #19
 800114a:	d1ef      	bne.n	800112c <ASD_Animation_dummy+0xa0>
			}
		}
	}
}
 800114c:	b004      	add	sp, #16
 800114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001152:	bf00      	nop
 8001154:	2000020c 	.word	0x2000020c
 8001158:	20000208 	.word	0x20000208
 800115c:	08008578 	.word	0x08008578

08001160 <ASD_Animation_flame>:
			}
		}
	}
}

void ASD_Animation_flame(bounds_t* bouds) {
 8001160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001164:	ed2d 8b02 	vpush	{d8}
 8001168:	4ab3      	ldr	r2, [pc, #716]	; (8001438 <ASD_Animation_flame+0x2d8>)
	float32_t dt = bouds->dt_sec;
 800116a:	ed90 8a39 	vldr	s16, [r0, #228]	; 0xe4
void ASD_Animation_flame(bounds_t* bouds) {
 800116e:	4606      	mov	r6, r0
	 *                      GRAVITY                       *
	 ******************************************************/

	/* Acceleration */
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
		_barAccelerations[ix] = -GRAVITY_FACTOR;
 8001170:	48b2      	ldr	r0, [pc, #712]	; (800143c <ASD_Animation_flame+0x2dc>)
void ASD_Animation_flame(bounds_t* bouds) {
 8001172:	b087      	sub	sp, #28
	float32_t dt = bouds->dt_sec;
 8001174:	4611      	mov	r1, r2
 8001176:	2313      	movs	r3, #19
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8001178:	3b01      	subs	r3, #1
		_barAccelerations[ix] = -GRAVITY_FACTOR;
 800117a:	f841 0b04 	str.w	r0, [r1], #4
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 800117e:	d1fb      	bne.n	8001178 <ASD_Animation_flame+0x18>
 8001180:	49af      	ldr	r1, [pc, #700]	; (8001440 <ASD_Animation_flame+0x2e0>)
 8001182:	4cad      	ldr	r4, [pc, #692]	; (8001438 <ASD_Animation_flame+0x2d8>)
 8001184:	4608      	mov	r0, r1
 8001186:	2313      	movs	r3, #19
	}

	/* Velocity */
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
		_barVelocity[ix] += _barAccelerations[ix] * dt;
 8001188:	edd0 7a00 	vldr	s15, [r0]
 800118c:	ecb4 7a01 	vldmia	r4!, {s14}
 8001190:	eee7 7a08 	vfma.f32	s15, s14, s16
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 8001194:	3b01      	subs	r3, #1
		_barVelocity[ix] += _barAccelerations[ix] * dt;
 8001196:	ece0 7a01 	vstmia	r0!, {s15}
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 800119a:	d1f5      	bne.n	8001188 <ASD_Animation_flame+0x28>
 800119c:	4ba9      	ldr	r3, [pc, #676]	; (8001444 <ASD_Animation_flame+0x2e4>)
 800119e:	9304      	str	r3, [sp, #16]
 80011a0:	4634      	mov	r4, r6
 80011a2:	f106 074c 	add.w	r7, r6, #76	; 0x4c
 80011a6:	2000      	movs	r0, #0
	}

	/* Position */
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
		_barHeights[ix] += _barVelocity[ix] * dt;
 80011a8:	edd3 7a00 	vldr	s15, [r3]
 80011ac:	ecb1 7a01 	vldmia	r1!, {s14}
 80011b0:	eee7 7a08 	vfma.f32	s15, s14, s16
 80011b4:	ece3 7a01 	vstmia	r3!, {s15}

		if(bouds->heights[ix] > _barHeights[ix]) {
 80011b8:	ecb4 7a01 	vldmia	r4!, {s14}
 80011bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c4:	d507      	bpl.n	80011d6 <ASD_Animation_flame+0x76>
			if(!bouds->isIdle) //prevent from bottom flicekring, i hope
 80011c6:	f8d6 50ec 	ldr.w	r5, [r6, #236]	; 0xec
 80011ca:	b90d      	cbnz	r5, 80011d0 <ASD_Animation_flame+0x70>
				_barHeights[ix] = bouds->heights[ix];
 80011cc:	ed03 7a01 	vstr	s14, [r3, #-4]
			_barVelocity[ix] = 0;//todo alboz roznicy polozen albo ze struktury
 80011d0:	f841 0c04 	str.w	r0, [r1, #-4]
			_barAccelerations[ix] = 0;//todo inertia
 80011d4:	6010      	str	r0, [r2, #0]
		}

		if(_barHeights[ix] <= 0.0) {
 80011d6:	ed53 7a01 	vldr	s15, [r3, #-4]
 80011da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			_barHeights[ix] = 0.0;
			_barVelocity[ix] = 0;
			_barAccelerations[ix] = 0;
 80011e2:	bf9e      	ittt	ls
 80011e4:	6010      	strls	r0, [r2, #0]
			_barHeights[ix] = 0.0;
 80011e6:	f843 0c04 	strls.w	r0, [r3, #-4]
			_barVelocity[ix] = 0;
 80011ea:	f841 0c04 	strls.w	r0, [r1, #-4]
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 80011ee:	42bc      	cmp	r4, r7
 80011f0:	f102 0204 	add.w	r2, r2, #4
 80011f4:	d1d8      	bne.n	80011a8 <ASD_Animation_flame+0x48>

	/******************************************************
	 *                        Burn                        *
	 ******************************************************/

	if(HAL_GetTick() - lastBurnTime > BURN_INTERVAL) {
 80011f6:	f001 fb03 	bl	8002800 <HAL_GetTick>
 80011fa:	4a93      	ldr	r2, [pc, #588]	; (8001448 <ASD_Animation_flame+0x2e8>)
 80011fc:	6813      	ldr	r3, [r2, #0]
 80011fe:	1ac0      	subs	r0, r0, r3
 8001200:	282a      	cmp	r0, #42	; 0x2a
 8001202:	d915      	bls.n	8001230 <ASD_Animation_flame+0xd0>
		lastBurnTime += BURN_INTERVAL;
 8001204:	332a      	adds	r3, #42	; 0x2a
 8001206:	4d91      	ldr	r5, [pc, #580]	; (800144c <ASD_Animation_flame+0x2ec>)
 8001208:	6013      	str	r3, [r2, #0]
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 800120a:	2300      	movs	r3, #0
		for (int iy = 0; iy < DISPLAY_HEIGHT; iy++) {
 800120c:	18e9      	adds	r1, r5, r3
 800120e:	2200      	movs	r2, #0
	if(x > 0 && x < BANDS_COUNT && y > 0 && y < DISPLAY_HEIGHT)
 8001210:	1e5c      	subs	r4, r3, #1
 8001212:	2c11      	cmp	r4, #17
 8001214:	d804      	bhi.n	8001220 <ASD_Animation_flame+0xc0>
 8001216:	b11a      	cbz	r2, 8001220 <ASD_Animation_flame+0xc0>
		return burn_value[x + y * BANDS_COUNT];
 8001218:	7808      	ldrb	r0, [r1, #0]
			if(burnTick > 0) {
 800121a:	b108      	cbz	r0, 8001220 <ASD_Animation_flame+0xc0>
				setPixelBurnTicks(ix, iy, --burnTick);
 800121c:	3801      	subs	r0, #1
		burn_value[x + y * BANDS_COUNT] = ticksLeft;
 800121e:	7008      	strb	r0, [r1, #0]
		for (int iy = 0; iy < DISPLAY_HEIGHT; iy++) {
 8001220:	3201      	adds	r2, #1
 8001222:	2a15      	cmp	r2, #21
 8001224:	f101 0113 	add.w	r1, r1, #19
 8001228:	d1f3      	bne.n	8001212 <ASD_Animation_flame+0xb2>
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 800122a:	3301      	adds	r3, #1
 800122c:	2b13      	cmp	r3, #19
 800122e:	d1ed      	bne.n	800120c <ASD_Animation_flame+0xac>
		makeDisplayBurnTick();
	}

	////////////////////

	_hueCounter += 1;
 8001230:	4a87      	ldr	r2, [pc, #540]	; (8001450 <ASD_Animation_flame+0x2f0>)
 8001232:	6813      	ldr	r3, [r2, #0]
 8001234:	3301      	adds	r3, #1
	if(_hueCounter > 8){
 8001236:	2b08      	cmp	r3, #8
 8001238:	f300 808a 	bgt.w	8001350 <ASD_Animation_flame+0x1f0>
	_hueCounter += 1;
 800123c:	6013      	str	r3, [r2, #0]

	/******************************************************
	 *                     Animation                      *
	 ******************************************************/

	_flicker += dt * FLICKER_SPEED;
 800123e:	4c85      	ldr	r4, [pc, #532]	; (8001454 <ASD_Animation_flame+0x2f4>)
 8001240:	6820      	ldr	r0, [r4, #0]
 8001242:	f7ff fa01 	bl	8000648 <__aeabi_f2d>
 8001246:	4680      	mov	r8, r0
 8001248:	ee18 0a10 	vmov	r0, s16
 800124c:	4689      	mov	r9, r1
 800124e:	f7ff f9fb 	bl	8000648 <__aeabi_f2d>
 8001252:	a377      	add	r3, pc, #476	; (adr r3, 8001430 <ASD_Animation_flame+0x2d0>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff fa4e 	bl	80006f8 <__aeabi_dmul>
 800125c:	460b      	mov	r3, r1
 800125e:	4602      	mov	r2, r0
 8001260:	4649      	mov	r1, r9
 8001262:	4640      	mov	r0, r8
 8001264:	f7ff f892 	bl	800038c <__adddf3>
 8001268:	f7ff fd3e 	bl	8000ce8 <__aeabi_d2f>
	while(_flicker >= FLICKER_LENGTH)
 800126c:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8001458 <ASD_Animation_flame+0x2f8>
	_flicker += dt * FLICKER_SPEED;
 8001270:	6020      	str	r0, [r4, #0]
 8001272:	ee07 0a90 	vmov	s15, r0
	while(_flicker >= FLICKER_LENGTH)
 8001276:	2300      	movs	r3, #0
 8001278:	eef4 7ac7 	vcmpe.f32	s15, s14
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	da6f      	bge.n	8001362 <ASD_Animation_flame+0x202>
 8001282:	b10b      	cbz	r3, 8001288 <ASD_Animation_flame+0x128>
 8001284:	edc4 7a00 	vstr	s15, [r4]
		_flicker -= FLICKER_LENGTH;
	uint32_t flickerIndex = (uint32_t)(_flicker);
 8001288:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800128c:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 800144c <ASD_Animation_flame+0x2ec>
 8001290:	edcd 7a02 	vstr	s15, [sp, #8]
 8001294:	f04f 37ff 	mov.w	r7, #4294967295

	for (int ix = 0; ix < BANDS_COUNT; ix++) {
		int barHeight = (int)(60.0 * _barHeights[ix]); //drawable
 8001298:	9b04      	ldr	r3, [sp, #16]
 800129a:	9703      	str	r7, [sp, #12]
 800129c:	f853 0b04 	ldr.w	r0, [r3], #4
 80012a0:	9304      	str	r3, [sp, #16]
 80012a2:	f7ff f9d1 	bl	8000648 <__aeabi_f2d>
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <ASD_Animation_flame+0x2fc>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	f7ff fa25 	bl	80006f8 <__aeabi_dmul>
 80012ae:	f7ff fcd3 	bl	8000c58 <__aeabi_d2iz>
 80012b2:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <ASD_Animation_flame+0x300>)
 80012b4:	2815      	cmp	r0, #21
 80012b6:	bfa8      	it	ge
 80012b8:	2015      	movge	r0, #21
 80012ba:	1a1b      	subs	r3, r3, r0
 80012bc:	f06f 0905 	mvn.w	r9, #5
 80012c0:	3701      	adds	r7, #1
		if(barHeight > DISPLAY_HEIGHT)
 80012c2:	4604      	mov	r4, r0
			barHeight = DISPLAY_HEIGHT;

		for (int iy = 0; iy < barHeight; iy++) {
 80012c4:	9305      	str	r3, [sp, #20]
 80012c6:	fb09 f900 	mul.w	r9, r9, r0
 80012ca:	f04f 0800 	mov.w	r8, #0
 80012ce:	4544      	cmp	r4, r8
 80012d0:	dc4b      	bgt.n	800136a <ASD_Animation_flame+0x20a>
		for (int iy = barHeight; iy < DISPLAY_HEIGHT; iy++) {
			uint8_t burnTick = getPixelBurnTick(ix, iy);
			if(burnTick > 0) {
				ASD_DISP_setPixel(ix, iy, 255 +_hueShift, 255, burnTick);
			} else {
				ASD_DISP_setPixel(ix, iy, 0, 255, 0);
 80012d2:	2500      	movs	r5, #0
		for (int iy = barHeight; iy < DISPLAY_HEIGHT; iy++) {
 80012d4:	2c15      	cmp	r4, #21
 80012d6:	f040 808d 	bne.w	80013f4 <ASD_Animation_flame+0x294>
	for (int ix = 0; ix < BANDS_COUNT; ix++) {
 80012da:	9b02      	ldr	r3, [sp, #8]
 80012dc:	2f12      	cmp	r7, #18
 80012de:	f103 0303 	add.w	r3, r3, #3
 80012e2:	f10b 0b01 	add.w	fp, fp, #1
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	d1d6      	bne.n	8001298 <ASD_Animation_flame+0x138>
	}

	/******************************************************
	 *                       Blaze                        *
	 ******************************************************/
	if(bouds->bassTrig)
 80012ea:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
 80012ee:	4c5d      	ldr	r4, [pc, #372]	; (8001464 <ASD_Animation_flame+0x304>)
 80012f0:	b113      	cbz	r3, 80012f8 <ASD_Animation_flame+0x198>
		_lastBlazeTime = HAL_GetTick();
 80012f2:	f001 fa85 	bl	8002800 <HAL_GetTick>
 80012f6:	6020      	str	r0, [r4, #0]

	if(HAL_GetTick() - _lastBlazeTime < BLAZE_INTERVAL){
 80012f8:	f001 fa82 	bl	8002800 <HAL_GetTick>
 80012fc:	6823      	ldr	r3, [r4, #0]
 80012fe:	1ac0      	subs	r0, r0, r3
 8001300:	f240 2325 	movw	r3, #549	; 0x225
 8001304:	4298      	cmp	r0, r3
 8001306:	f200 808f 	bhi.w	8001428 <ASD_Animation_flame+0x2c8>
		float32_t blazeValue = (MAX_BRIGHTNESS - MIN_BRIGHTNESS)*(1.0 - ((HAL_GetTick() - _lastBlazeTime) / BLAZE_INTERVAL));
 800130a:	f001 fa79 	bl	8002800 <HAL_GetTick>
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	1ac0      	subs	r0, r0, r3
 8001312:	f240 2326 	movw	r3, #550	; 0x226
 8001316:	fbb0 f0f3 	udiv	r0, r0, r3
 800131a:	f7ff f973 	bl	8000604 <__aeabi_ui2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	2000      	movs	r0, #0
 8001324:	4950      	ldr	r1, [pc, #320]	; (8001468 <ASD_Animation_flame+0x308>)
 8001326:	f7ff f82f 	bl	8000388 <__aeabi_dsub>
 800132a:	4b50      	ldr	r3, [pc, #320]	; (800146c <ASD_Animation_flame+0x30c>)
 800132c:	2200      	movs	r2, #0
 800132e:	f7ff f9e3 	bl	80006f8 <__aeabi_dmul>
 8001332:	f7ff fcd9 	bl	8000ce8 <__aeabi_d2f>
		ASD_DISP_setMaxBrightness(MIN_BRIGHTNESS + blazeValue);
 8001336:	ee07 0a90 	vmov	s15, r0
 800133a:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800133e:	ee37 0a80 	vadd.f32	s0, s15, s0
	} else
		ASD_DISP_setMaxBrightness(MIN_BRIGHTNESS);

}
 8001342:	b007      	add	sp, #28
 8001344:	ecbd 8b02 	vpop	{d8}
 8001348:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		ASD_DISP_setMaxBrightness(MIN_BRIGHTNESS);
 800134c:	f000 ba46 	b.w	80017dc <ASD_DISP_setMaxBrightness>
		_hueCounter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	6013      	str	r3, [r2, #0]
		_hueShift++;
 8001354:	4a46      	ldr	r2, [pc, #280]	; (8001470 <ASD_Animation_flame+0x310>)
 8001356:	7813      	ldrb	r3, [r2, #0]
 8001358:	3301      	adds	r3, #1
 800135a:	b2db      	uxtb	r3, r3
 800135c:	7013      	strb	r3, [r2, #0]
		if(_hueShift > 255)
 800135e:	7813      	ldrb	r3, [r2, #0]
 8001360:	e76d      	b.n	800123e <ASD_Animation_flame+0xde>
		_flicker -= FLICKER_LENGTH;
 8001362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001366:	2301      	movs	r3, #1
 8001368:	e786      	b.n	8001278 <ASD_Animation_flame+0x118>
			uint8_t hue = (FIRE_TONGUE_HUE[DISPLAY_HEIGHT - 1 - (barHeight - iy - 1)] + _hueShift) % 255;
 800136a:	9b05      	ldr	r3, [sp, #20]
			uint8_t value = 255 - (uint8_t)(FLICKER[flickerIndexShifted]*0.75);
 800136c:	4a41      	ldr	r2, [pc, #260]	; (8001474 <ASD_Animation_flame+0x314>)
			uint8_t hue = (FIRE_TONGUE_HUE[DISPLAY_HEIGHT - 1 - (barHeight - iy - 1)] + _hueShift) % 255;
 800136e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8001372:	9305      	str	r3, [sp, #20]
 8001374:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <ASD_Animation_flame+0x310>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	441d      	add	r5, r3
 800137a:	23ff      	movs	r3, #255	; 0xff
 800137c:	fbb5 f3f3 	udiv	r3, r5, r3
 8001380:	441d      	add	r5, r3
			uint8_t flickerIndexShifted = (uint8_t)((flickerIndex + iy + ix * 3)%FLICKER_LENGTH);
 8001382:	9b02      	ldr	r3, [sp, #8]
 8001384:	4443      	add	r3, r8
			uint8_t value = 255 - (uint8_t)(FLICKER[flickerIndexShifted]*0.75);
 8001386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			ASD_DISP_setPixel(ix, iy, hue, saturation, value);
 800138a:	f509 7a8f 	add.w	sl, r9, #286	; 0x11e
 800138e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
			uint8_t value = 255 - (uint8_t)(FLICKER[flickerIndexShifted]*0.75);
 8001392:	5cd0      	ldrb	r0, [r2, r3]
			ASD_DISP_setPixel(ix, iy, hue, saturation, value);
 8001394:	bfa8      	it	ge
 8001396:	f04f 0aff 	movge.w	sl, #255	; 0xff
			uint8_t value = 255 - (uint8_t)(FLICKER[flickerIndexShifted]*0.75);
 800139a:	f7ff f943 	bl	8000624 <__aeabi_i2d>
 800139e:	4b33      	ldr	r3, [pc, #204]	; (800146c <ASD_Animation_flame+0x30c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	f7ff f9a9 	bl	80006f8 <__aeabi_dmul>
 80013a6:	f7ff fc7f 	bl	8000ca8 <__aeabi_d2uiz>
 80013aa:	43c0      	mvns	r0, r0
			ASD_DISP_setPixel(ix, iy, hue, saturation, value);
 80013ac:	b2c0      	uxtb	r0, r0
 80013ae:	fa5f fa8a 	uxtb.w	sl, sl
 80013b2:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 80013b6:	4653      	mov	r3, sl
 80013b8:	9000      	str	r0, [sp, #0]
 80013ba:	462a      	mov	r2, r5
 80013bc:	4641      	mov	r1, r8
 80013be:	4638      	mov	r0, r7
 80013c0:	f000 f99e 	bl	8001700 <ASD_DISP_setPixel>
			uint8_t burnValue = 14 + (uint8_t)(ASD_UTILS_getRandom()%22);
 80013c4:	f000 fbf0 	bl	8001ba8 <ASD_UTILS_getRandom>
	if(x > 0 && x < BANDS_COUNT && y > 0 && y < DISPLAY_HEIGHT)
 80013c8:	9b03      	ldr	r3, [sp, #12]
 80013ca:	2b11      	cmp	r3, #17
 80013cc:	d80d      	bhi.n	80013ea <ASD_Animation_flame+0x28a>
 80013ce:	f1b8 0f00 	cmp.w	r8, #0
 80013d2:	d00a      	beq.n	80013ea <ASD_Animation_flame+0x28a>
			uint8_t burnValue = 14 + (uint8_t)(ASD_UTILS_getRandom()%22);
 80013d4:	2216      	movs	r2, #22
		burn_value[x + y * BANDS_COUNT] = ticksLeft;
 80013d6:	2313      	movs	r3, #19
 80013d8:	fb03 f308 	mul.w	r3, r3, r8
			uint8_t burnValue = 14 + (uint8_t)(ASD_UTILS_getRandom()%22);
 80013dc:	fbb0 f1f2 	udiv	r1, r0, r2
 80013e0:	fb02 0011 	mls	r0, r2, r1, r0
 80013e4:	300e      	adds	r0, #14
		burn_value[x + y * BANDS_COUNT] = ticksLeft;
 80013e6:	f80b 0003 	strb.w	r0, [fp, r3]
		for (int iy = 0; iy < barHeight; iy++) {
 80013ea:	f108 0801 	add.w	r8, r8, #1
 80013ee:	f109 0906 	add.w	r9, r9, #6
 80013f2:	e76c      	b.n	80012ce <ASD_Animation_flame+0x16e>
	if(x > 0 && x < BANDS_COUNT && y > 0 && y < DISPLAY_HEIGHT)
 80013f4:	9b03      	ldr	r3, [sp, #12]
 80013f6:	2b11      	cmp	r3, #17
 80013f8:	d812      	bhi.n	8001420 <ASD_Animation_flame+0x2c0>
 80013fa:	2c00      	cmp	r4, #0
 80013fc:	dd10      	ble.n	8001420 <ASD_Animation_flame+0x2c0>
		return burn_value[x + y * BANDS_COUNT];
 80013fe:	2313      	movs	r3, #19
 8001400:	4363      	muls	r3, r4
 8001402:	f81b 3003 	ldrb.w	r3, [fp, r3]
			if(burnTick > 0) {
 8001406:	b15b      	cbz	r3, 8001420 <ASD_Animation_flame+0x2c0>
				ASD_DISP_setPixel(ix, iy, 255 +_hueShift, 255, burnTick);
 8001408:	4a19      	ldr	r2, [pc, #100]	; (8001470 <ASD_Animation_flame+0x310>)
 800140a:	7812      	ldrb	r2, [r2, #0]
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	3a01      	subs	r2, #1
 8001410:	23ff      	movs	r3, #255	; 0xff
 8001412:	b2d2      	uxtb	r2, r2
				ASD_DISP_setPixel(ix, iy, 0, 255, 0);
 8001414:	4621      	mov	r1, r4
 8001416:	4638      	mov	r0, r7
 8001418:	f000 f972 	bl	8001700 <ASD_DISP_setPixel>
		for (int iy = barHeight; iy < DISPLAY_HEIGHT; iy++) {
 800141c:	3401      	adds	r4, #1
 800141e:	e759      	b.n	80012d4 <ASD_Animation_flame+0x174>
				ASD_DISP_setPixel(ix, iy, 0, 255, 0);
 8001420:	9500      	str	r5, [sp, #0]
 8001422:	23ff      	movs	r3, #255	; 0xff
 8001424:	2200      	movs	r2, #0
 8001426:	e7f5      	b.n	8001414 <ASD_Animation_flame+0x2b4>
		ASD_DISP_setMaxBrightness(MIN_BRIGHTNESS);
 8001428:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 800142c:	e789      	b.n	8001342 <ASD_Animation_flame+0x1e2>
 800142e:	bf00      	nop
 8001430:	d7c6fbd2 	.word	0xd7c6fbd2
 8001434:	3f22599e 	.word	0x3f22599e
 8001438:	20000210 	.word	0x20000210
 800143c:	ad2febff 	.word	0xad2febff
 8001440:	200002a8 	.word	0x200002a8
 8001444:	2000025c 	.word	0x2000025c
 8001448:	2000048c 	.word	0x2000048c
 800144c:	200002fc 	.word	0x200002fc
 8001450:	20000000 	.word	0x20000000
 8001454:	200002f4 	.word	0x200002f4
 8001458:	43000000 	.word	0x43000000
 800145c:	404e0000 	.word	0x404e0000
 8001460:	0800860d 	.word	0x0800860d
 8001464:	200002f8 	.word	0x200002f8
 8001468:	3ff00000 	.word	0x3ff00000
 800146c:	3fe80000 	.word	0x3fe80000
 8001470:	20000004 	.word	0x20000004
 8001474:	0800860d 	.word	0x0800860d

08001478 <ASD_CORE_updateGeneral>:
//			_swipeCurrentFreq++;
//		}
//		_swipeNextCounter++;
//	}

	HAL_GPIO_TogglePin(SWIPE_NEXT_GPIO_Port, SWIPE_NEXT_Pin);
 8001478:	4801      	ldr	r0, [pc, #4]	; (8001480 <ASD_CORE_updateGeneral+0x8>)
 800147a:	2101      	movs	r1, #1
 800147c:	f002 b80f 	b.w	800349e <HAL_GPIO_TogglePin>
 8001480:	40020400 	.word	0x40020400

08001484 <ASD_CORE_processSignal>:
}


void ASD_CORE_processSignal() {
	/* Evaluate sampling time - load recorded time and start over. Then evaluate sampling frequency */
	_samplingTimeMicros = __HAL_TIM_GET_COUNTER(&htim6);
 8001484:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <ASD_CORE_processSignal+0xec>)
 8001486:	681b      	ldr	r3, [r3, #0]
void ASD_CORE_processSignal() {
 8001488:	b570      	push	{r4, r5, r6, lr}
	_samplingTimeMicros = __HAL_TIM_GET_COUNTER(&htim6);
 800148a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800148c:	4c39      	ldr	r4, [pc, #228]	; (8001574 <ASD_CORE_processSignal+0xf0>)
 800148e:	4d3a      	ldr	r5, [pc, #232]	; (8001578 <ASD_CORE_processSignal+0xf4>)
 8001490:	8020      	strh	r0, [r4, #0]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 8001492:	2600      	movs	r6, #0
 8001494:	625e      	str	r6, [r3, #36]	; 0x24
	_samplingFrequency = 1000.0 * FFT_SAMPLES_COUNT / _samplingTimeMicros;
 8001496:	b280      	uxth	r0, r0
 8001498:	f7ff f8c4 	bl	8000624 <__aeabi_i2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	2000      	movs	r0, #0
 80014a2:	4936      	ldr	r1, [pc, #216]	; (800157c <ASD_CORE_processSignal+0xf8>)
 80014a4:	f7ff fa52 	bl	800094c <__aeabi_ddiv>
 80014a8:	f7ff fbfe 	bl	8000ca8 <__aeabi_d2uiz>
 80014ac:	4b34      	ldr	r3, [pc, #208]	; (8001580 <ASD_CORE_processSignal+0xfc>)

	/* Calculate FFT then convert it to bounds. Save evaluation time. */
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_SET);
 80014ae:	2201      	movs	r2, #1
 80014b0:	4611      	mov	r1, r2
	_samplingFrequency = 1000.0 * FFT_SAMPLES_COUNT / _samplingTimeMicros;
 80014b2:	8018      	strh	r0, [r3, #0]
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_SET);
 80014b4:	4833      	ldr	r0, [pc, #204]	; (8001584 <ASD_CORE_processSignal+0x100>)
 80014b6:	f001 ffed 	bl	8003494 <HAL_GPIO_WritePin>
	ASD_FFT_toggleBuffers();
 80014ba:	f000 f9c5 	bl	8001848 <ASD_FFT_toggleBuffers>
	ASD_FFT_evalFFT(bands);
 80014be:	4832      	ldr	r0, [pc, #200]	; (8001588 <ASD_CORE_processSignal+0x104>)
 80014c0:	f000 f9e4 	bl	800188c <ASD_FFT_evalFFT>

	ASD_FFT_evalDynamics(bands, &bounds, _samplingTimeMicros);
 80014c4:	8823      	ldrh	r3, [r4, #0]
 80014c6:	4c31      	ldr	r4, [pc, #196]	; (800158c <ASD_CORE_processSignal+0x108>)
 80014c8:	482f      	ldr	r0, [pc, #188]	; (8001588 <ASD_CORE_processSignal+0x104>)
 80014ca:	ee00 3a10 	vmov	s0, r3
 80014ce:	4621      	mov	r1, r4
 80014d0:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80014d4:	f000 fa98 	bl	8001a08 <ASD_FFT_evalDynamics>
	int triggered = !bounds->isIdle;
 80014d8:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
	if(idleState == IDLE_ON) {
 80014dc:	4c2c      	ldr	r4, [pc, #176]	; (8001590 <ASD_CORE_processSignal+0x10c>)
 80014de:	7822      	ldrb	r2, [r4, #0]
 80014e0:	b95a      	cbnz	r2, 80014fa <ASD_CORE_processSignal+0x76>
		if(triggered) {
 80014e2:	b9eb      	cbnz	r3, 8001520 <ASD_CORE_processSignal+0x9c>
			idleState = IDLE_ON_DISABLING;
 80014e4:	2301      	movs	r3, #1
 80014e6:	7023      	strb	r3, [r4, #0]
			idleDetectorInterval = IDLE_DETECTOR_ON_DISABLING_INTERVAL;
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <ASD_CORE_processSignal+0x110>)
 80014ea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
			idleDetectorInterval = IDLE_DETECTOR_OFF_ENABLING_INTERVAL;
 80014ee:	601a      	str	r2, [r3, #0]
			idleDetectorStartTime = HAL_GetTick();
 80014f0:	f001 f986 	bl	8002800 <HAL_GetTick>
 80014f4:	4b28      	ldr	r3, [pc, #160]	; (8001598 <ASD_CORE_processSignal+0x114>)
 80014f6:	6018      	str	r0, [r3, #0]
 80014f8:	e012      	b.n	8001520 <ASD_CORE_processSignal+0x9c>
	} else if(idleState == IDLE_ON_DISABLING) {
 80014fa:	2a01      	cmp	r2, #1
 80014fc:	d11c      	bne.n	8001538 <ASD_CORE_processSignal+0xb4>
		if(triggered) {
 80014fe:	b973      	cbnz	r3, 800151e <ASD_CORE_processSignal+0x9a>
			if(HAL_GetTick() - idleDetectorStartTime > idleDetectorInterval){
 8001500:	f001 f97e 	bl	8002800 <HAL_GetTick>
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <ASD_CORE_processSignal+0x114>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	1ac0      	subs	r0, r0, r3
 800150a:	4b22      	ldr	r3, [pc, #136]	; (8001594 <ASD_CORE_processSignal+0x110>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4298      	cmp	r0, r3
 8001510:	d906      	bls.n	8001520 <ASD_CORE_processSignal+0x9c>
				idleState = IDLE_OFF; //SUCCESS
 8001512:	2302      	movs	r3, #2
 8001514:	7023      	strb	r3, [r4, #0]
	_currentAnimation = _attachedAnimation;
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <ASD_CORE_processSignal+0x118>)
 8001518:	681b      	ldr	r3, [r3, #0]
	_currentAnimation = ASD_Animation_dummy;
 800151a:	602b      	str	r3, [r5, #0]
}
 800151c:	e000      	b.n	8001520 <ASD_CORE_processSignal+0x9c>
			idleState = IDLE_ON;
 800151e:	7026      	strb	r6, [r4, #0]
	updateIdleDetector(&bounds);
	_currentAnimation(&bounds);
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	481a      	ldr	r0, [pc, #104]	; (800158c <ASD_CORE_processSignal+0x108>)
 8001524:	4798      	blx	r3
	ASD_DISP_prepare();
 8001526:	f000 f905 	bl	8001734 <ASD_DISP_prepare>
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
}
 800152a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
 800152e:	4815      	ldr	r0, [pc, #84]	; (8001584 <ASD_CORE_processSignal+0x100>)
 8001530:	2200      	movs	r2, #0
 8001532:	2101      	movs	r1, #1
 8001534:	f001 bfae 	b.w	8003494 <HAL_GPIO_WritePin>
	} else if(idleState == IDLE_OFF) {
 8001538:	2a02      	cmp	r2, #2
 800153a:	d107      	bne.n	800154c <ASD_CORE_processSignal+0xc8>
		if(!triggered) {
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0ef      	beq.n	8001520 <ASD_CORE_processSignal+0x9c>
			idleState = IDLE_OFF_ENABLING;
 8001540:	2303      	movs	r3, #3
 8001542:	7023      	strb	r3, [r4, #0]
			idleDetectorInterval = IDLE_DETECTOR_OFF_ENABLING_INTERVAL;
 8001544:	f241 7270 	movw	r2, #6000	; 0x1770
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <ASD_CORE_processSignal+0x110>)
 800154a:	e7d0      	b.n	80014ee <ASD_CORE_processSignal+0x6a>
	} else if(idleState == IDLE_OFF_ENABLING) {
 800154c:	2a03      	cmp	r2, #3
 800154e:	d1e7      	bne.n	8001520 <ASD_CORE_processSignal+0x9c>
		if(!triggered) {
 8001550:	b15b      	cbz	r3, 800156a <ASD_CORE_processSignal+0xe6>
			if(HAL_GetTick() - idleDetectorStartTime > idleDetectorInterval){
 8001552:	f001 f955 	bl	8002800 <HAL_GetTick>
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <ASD_CORE_processSignal+0x114>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	1ac0      	subs	r0, r0, r3
 800155c:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <ASD_CORE_processSignal+0x110>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4298      	cmp	r0, r3
 8001562:	d9dd      	bls.n	8001520 <ASD_CORE_processSignal+0x9c>
	_currentAnimation = ASD_Animation_dummy;
 8001564:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <ASD_CORE_processSignal+0x11c>)
				idleState = IDLE_ON; //SUCCESS
 8001566:	7026      	strb	r6, [r4, #0]
	_currentAnimation = ASD_Animation_dummy;
 8001568:	e7d7      	b.n	800151a <ASD_CORE_processSignal+0x96>
			idleState = IDLE_OFF;
 800156a:	2302      	movs	r3, #2
 800156c:	7023      	strb	r3, [r4, #0]
 800156e:	e7d7      	b.n	8001520 <ASD_CORE_processSignal+0x9c>
 8001570:	20007b20 	.word	0x20007b20
 8001574:	20000008 	.word	0x20000008
 8001578:	20000494 	.word	0x20000494
 800157c:	412f4000 	.word	0x412f4000
 8001580:	20000006 	.word	0x20000006
 8001584:	40020800 	.word	0x40020800
 8001588:	2000049c 	.word	0x2000049c
 800158c:	200004e8 	.word	0x200004e8
 8001590:	200005e8 	.word	0x200005e8
 8001594:	200005e0 	.word	0x200005e0
 8001598:	200005e4 	.word	0x200005e4
 800159c:	20000490 	.word	0x20000490
 80015a0:	0800108d 	.word	0x0800108d

080015a4 <ASD_CORE_render>:


void ASD_CORE_render() {
	ASD_DISP_render();
 80015a4:	f000 b906 	b.w	80017b4 <ASD_DISP_render>

080015a8 <ASD_CORE_setSwipe>:
	}
}

/* Not working, I don't know why. Toggle signal is uneven on oscilloscope */
void ASD_CORE_setSwipe(int swipesCount) {
	_swipesCount = swipesCount;
 80015a8:	4b01      	ldr	r3, [pc, #4]	; (80015b0 <ASD_CORE_setSwipe+0x8>)
 80015aa:	6018      	str	r0, [r3, #0]
}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000498 	.word	0x20000498

080015b4 <ASD_CORE_selectSignalSource>:


void ASD_CORE_selectSignalSource(source_t source) {
	//todo some relay to switch signal to ADC
}
 80015b4:	4770      	bx	lr
	...

080015b8 <ASD_CORE_attachAnimation>:


void ASD_CORE_attachAnimation(animation_t animation){
	_attachedAnimation = animation;
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <ASD_CORE_attachAnimation+0x14>)
 80015ba:	6018      	str	r0, [r3, #0]
	if(idleState == IDLE_OFF || idleState == IDLE_OFF_ENABLING)
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <ASD_CORE_attachAnimation+0x18>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	3b02      	subs	r3, #2
 80015c2:	2b01      	cmp	r3, #1
	_currentAnimation = _attachedAnimation;
 80015c4:	bf9c      	itt	ls
 80015c6:	4b03      	ldrls	r3, [pc, #12]	; (80015d4 <ASD_CORE_attachAnimation+0x1c>)
 80015c8:	6018      	strls	r0, [r3, #0]
		onLeaveIdleState();
}
 80015ca:	4770      	bx	lr
 80015cc:	20000490 	.word	0x20000490
 80015d0:	200005e8 	.word	0x200005e8
 80015d4:	20000494 	.word	0x20000494

080015d8 <ASD_CORE_init>:
void ASD_CORE_init() {
 80015d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ASD_FFT_init();
 80015da:	f000 f905 	bl	80017e8 <ASD_FFT_init>
	HAL_TIM_Base_Start(&htim6); //timing
 80015de:	4813      	ldr	r0, [pc, #76]	; (800162c <ASD_CORE_init+0x54>)
    HAL_TIM_Base_Start(&htim2); //DAC trigger event
 80015e0:	4d13      	ldr	r5, [pc, #76]	; (8001630 <ASD_CORE_init+0x58>)
	HAL_TIM_Base_Start(&htim6); //timing
 80015e2:	f002 fc6b 	bl	8003ebc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim10); //random generator
 80015e6:	4813      	ldr	r0, [pc, #76]	; (8001634 <ASD_CORE_init+0x5c>)
 80015e8:	f002 fc68 	bl	8003ebc <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim7); // swipe animation
 80015ec:	4812      	ldr	r0, [pc, #72]	; (8001638 <ASD_CORE_init+0x60>)
 80015ee:	f002 fc9b 	bl	8003f28 <HAL_TIM_Base_Start_IT>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)DAC_SINE_SAMPLES, DAC_SINE_SAMPLES_COUNT, DAC_ALIGN_12B_R);
 80015f2:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(BATCH_DONE_GPIO_Port, BATCH_DONE_Pin, GPIO_PIN_RESET);
 80015f4:	4811      	ldr	r0, [pc, #68]	; (800163c <ASD_CORE_init+0x64>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	2101      	movs	r1, #1
 80015fa:	f001 ff4b 	bl	8003494 <HAL_GPIO_WritePin>
    HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, (uint32_t*)DAC_SINE_SAMPLES, DAC_SINE_SAMPLES_COUNT, DAC_ALIGN_12B_R);
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <ASD_CORE_init+0x68>)
 8001600:	9400      	str	r4, [sp, #0]
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	4621      	mov	r1, r4
 8001606:	480f      	ldr	r0, [pc, #60]	; (8001644 <ASD_CORE_init+0x6c>)
 8001608:	f001 fbc2 	bl	8002d90 <HAL_DAC_Start_DMA>
    HAL_TIM_Base_Start(&htim2); //DAC trigger event
 800160c:	4628      	mov	r0, r5
 800160e:	f002 fc55 	bl	8003ebc <HAL_TIM_Base_Start>
		__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001612:	682a      	ldr	r2, [r5, #0]
    ASD_CORE_attachAnimation(ASD_Animation_dummy);
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <ASD_CORE_init+0x70>)
		__HAL_TIM_SET_AUTORELOAD(&htim2, arr);
 8001616:	231b      	movs	r3, #27
 8001618:	62d3      	str	r3, [r2, #44]	; 0x2c
 800161a:	60eb      	str	r3, [r5, #12]
    ASD_CORE_attachAnimation(ASD_Animation_dummy);
 800161c:	f7ff ffcc 	bl	80015b8 <ASD_CORE_attachAnimation>
    idleState = IDLE_ON;
 8001620:	4b0a      	ldr	r3, [pc, #40]	; (800164c <ASD_CORE_init+0x74>)
 8001622:	701c      	strb	r4, [r3, #0]
	_currentAnimation = ASD_Animation_dummy;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <ASD_CORE_init+0x78>)
 8001626:	6018      	str	r0, [r3, #0]
}
 8001628:	b003      	add	sp, #12
 800162a:	bd30      	pop	{r4, r5, pc}
 800162c:	20007b20 	.word	0x20007b20
 8001630:	20007ad8 	.word	0x20007ad8
 8001634:	20007a90 	.word	0x20007a90
 8001638:	20007b68 	.word	0x20007b68
 800163c:	40020800 	.word	0x40020800
 8001640:	0800868e 	.word	0x0800868e
 8001644:	200078b4 	.word	0x200078b4
 8001648:	0800108d 	.word	0x0800108d
 800164c:	200005e8 	.word	0x200005e8
 8001650:	20000494 	.word	0x20000494

08001654 <hsv2rgb_raw_C>:
    // Convert hue, saturation and brightness ( HSV/HSB ) to RGB
    // "Dimming" is used on saturation and brightness to make
    // the output more visually linear.

    // Apply dimming curves
    uint8_t value = APPLY_DIMMING( (uint8_t)(hsv->val * _maxBrightness));
 8001654:	7883      	ldrb	r3, [r0, #2]
 8001656:	ee07 3a90 	vmov	s15, r3
 800165a:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <hsv2rgb_raw_C+0x80>)
 800165c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001660:	ed93 7a00 	vldr	s14, [r3]
    uint8_t saturation = hsv->sat;

    // The brightness floor is minimum number that all of
    // R, G, and B will be set to.
    uint8_t invsat = APPLY_DIMMING( 255 - saturation);
 8001664:	7843      	ldrb	r3, [r0, #1]
{
 8001666:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t value = APPLY_DIMMING( (uint8_t)(hsv->val * _maxBrightness));
 8001668:	ee67 7a87 	vmul.f32	s15, s15, s14
    // create the specific hue desired.
    uint8_t color_amplitude = value - brightness_floor;

    // Figure out which section of the hue wheel we're in,
    // and how far offset we are withing that section
    uint8_t section = hsv->hue / HSV_SECTION_3; // 0..2
 800166c:	7805      	ldrb	r5, [r0, #0]
    uint8_t value = APPLY_DIMMING( (uint8_t)(hsv->val * _maxBrightness));
 800166e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    uint8_t invsat = APPLY_DIMMING( 255 - saturation);
 8001672:	43db      	mvns	r3, r3
    uint8_t value = APPLY_DIMMING( (uint8_t)(hsv->val * _maxBrightness));
 8001674:	edcd 7a01 	vstr	s15, [sp, #4]
 8001678:	f89d 7004 	ldrb.w	r7, [sp, #4]
    uint8_t brightness_floor = (value * invsat) / 256;
 800167c:	b2db      	uxtb	r3, r3
 800167e:	fb13 f407 	smulbb	r4, r3, r7
    uint8_t offset = hsv->hue % HSV_SECTION_3;  // 0..63
 8001682:	f005 023f 	and.w	r2, r5, #63	; 0x3f
    uint8_t color_amplitude = value - brightness_floor;
 8001686:	eba7 2714 	sub.w	r7, r7, r4, lsr #8

    uint8_t rampup = offset; // 0..63
    uint8_t rampdown = (HSV_SECTION_3 - 1) - offset; // 63..0
 800168a:	f1c2 033f 	rsb	r3, r2, #63	; 0x3f
    uint8_t color_amplitude = value - brightness_floor;
 800168e:	b2ff      	uxtb	r7, r7

    //  //rampdown *= 4; // 0..252

    // compute color-amplitude-scaled-down versions of rampup and rampdown
    uint8_t rampup_amp_adj   = (rampup   * color_amplitude) / (256 / 4);
    uint8_t rampdown_amp_adj = (rampdown * color_amplitude) / (256 / 4);
 8001690:	b2db      	uxtb	r3, r3
    uint8_t rampup_amp_adj   = (rampup   * color_amplitude) / (256 / 4);
 8001692:	fb12 f007 	smulbb	r0, r2, r7
    uint8_t rampdown_amp_adj = (rampdown * color_amplitude) / (256 / 4);
 8001696:	fb13 f307 	smulbb	r3, r3, r7
    uint8_t rampup_amp_adj   = (rampup   * color_amplitude) / (256 / 4);
 800169a:	1180      	asrs	r0, r0, #6
    uint8_t rampdown_amp_adj = (rampdown * color_amplitude) / (256 / 4);
 800169c:	119b      	asrs	r3, r3, #6

    // add brightness_floor offset to everything
    uint8_t rampup_adj_with_floor   = rampup_amp_adj   + brightness_floor;
 800169e:	eb00 2014 	add.w	r0, r0, r4, lsr #8
    uint8_t rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor;
 80016a2:	eb03 2314 	add.w	r3, r3, r4, lsr #8


    if( section ) {
 80016a6:	2d3f      	cmp	r5, #63	; 0x3f
    uint8_t brightness_floor = (value * invsat) / 256;
 80016a8:	ea4f 2614 	mov.w	r6, r4, lsr #8
    uint8_t rampup_adj_with_floor   = rampup_amp_adj   + brightness_floor;
 80016ac:	b2c0      	uxtb	r0, r0
    uint8_t rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor;
 80016ae:	b2db      	uxtb	r3, r3
    if( section ) {
 80016b0:	d90b      	bls.n	80016ca <hsv2rgb_raw_C+0x76>
        if( section == 1) {
 80016b2:	3d40      	subs	r5, #64	; 0x40
 80016b4:	2d3f      	cmp	r5, #63	; 0x3f
            // section 1: 0x40..0x7F
            rgb->r = brightness_floor;
 80016b6:	bf9d      	ittte	ls
 80016b8:	700e      	strbls	r6, [r1, #0]
            rgb->g = rampdown_adj_with_floor;
 80016ba:	704b      	strbls	r3, [r1, #1]
            rgb->b = rampup_adj_with_floor;
 80016bc:	7088      	strbls	r0, [r1, #2]
        } else {
            // section 2; 0x80..0xBF
            rgb->r = rampup_adj_with_floor;
 80016be:	7008      	strbhi	r0, [r1, #0]
            rgb->g = brightness_floor;
 80016c0:	bf84      	itt	hi
 80016c2:	704e      	strbhi	r6, [r1, #1]
            rgb->b = rampdown_adj_with_floor;
 80016c4:	708b      	strbhi	r3, [r1, #2]
        // section 0: 0x00..0x3F
        rgb->r = rampdown_adj_with_floor;
        rgb->g = rampup_adj_with_floor;
        rgb->b = brightness_floor;
    }
}
 80016c6:	b003      	add	sp, #12
 80016c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rgb->r = rampdown_adj_with_floor;
 80016ca:	700b      	strb	r3, [r1, #0]
        rgb->g = rampup_adj_with_floor;
 80016cc:	7048      	strb	r0, [r1, #1]
        rgb->b = brightness_floor;
 80016ce:	708e      	strb	r6, [r1, #2]
}
 80016d0:	e7f9      	b.n	80016c6 <hsv2rgb_raw_C+0x72>
 80016d2:	bf00      	nop
 80016d4:	20000a98 	.word	0x20000a98

080016d8 <ASD_DISP_getPixel>:

CHSV* ASD_DISP_getPixel(int x, int y) {
	x = BANDS_COUNT - x - 1;
	y = (x%2?DISPLAY_HEIGHT-y-1:y);
 80016d8:	07c2      	lsls	r2, r0, #31
	x = BANDS_COUNT - x - 1;
 80016da:	f1c0 0312 	rsb	r3, r0, #18
	y = (x%2?DISPLAY_HEIGHT-y-1:y);
 80016de:	bf48      	it	mi
 80016e0:	f1c1 0114 	rsbmi	r1, r1, #20
	int idx = y + x * DISPLAY_HEIGHT;
 80016e4:	2015      	movs	r0, #21
 80016e6:	fb00 1103 	mla	r1, r0, r3, r1
	if(idx >= 399)//todo def
 80016ea:	f5b1 7fc7 	cmp.w	r1, #398	; 0x18e
		return NULL;

	return _draw_hsv_buffer + idx;
 80016ee:	bfdd      	ittte	le
 80016f0:	4802      	ldrle	r0, [pc, #8]	; (80016fc <ASD_DISP_getPixel+0x24>)
 80016f2:	eb01 0141 	addle.w	r1, r1, r1, lsl #1
 80016f6:	1840      	addle	r0, r0, r1
		return NULL;
 80016f8:	2000      	movgt	r0, #0
//	return &_draw_hsv_buffer[idx];
}
 80016fa:	4770      	bx	lr
 80016fc:	200005e9 	.word	0x200005e9

08001700 <ASD_DISP_setPixel>:

void ASD_DISP_setPixel(int x, int y, uint8_t hue, uint8_t saturation, uint8_t value) {
 8001700:	b510      	push	{r4, lr}
	x = BANDS_COUNT - x - 1;
 8001702:	f1c0 0412 	rsb	r4, r0, #18
	y = (x%2?DISPLAY_HEIGHT-y-1:y);
 8001706:	07c0      	lsls	r0, r0, #31
 8001708:	bf48      	it	mi
 800170a:	f1c1 0114 	rsbmi	r1, r1, #20
	int idx = y + x * DISPLAY_HEIGHT;
 800170e:	2015      	movs	r0, #21
 8001710:	fb00 1104 	mla	r1, r0, r4, r1

	if(idx >= 399)//todo def
 8001714:	f5b1 7fc7 	cmp.w	r1, #398	; 0x18e
 8001718:	dc08      	bgt.n	800172c <ASD_DISP_setPixel+0x2c>
		return;

	_draw_hsv_buffer[idx].hue = hue;
 800171a:	4c05      	ldr	r4, [pc, #20]	; (8001730 <ASD_DISP_setPixel+0x30>)
 800171c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001720:	1860      	adds	r0, r4, r1
 8001722:	5462      	strb	r2, [r4, r1]
	_draw_hsv_buffer[idx].saturation = saturation;
 8001724:	7043      	strb	r3, [r0, #1]
	_draw_hsv_buffer[idx].value = value;
 8001726:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800172a:	7083      	strb	r3, [r0, #2]
}
 800172c:	bd10      	pop	{r4, pc}
 800172e:	bf00      	nop
 8001730:	200005e9 	.word	0x200005e9

08001734 <ASD_DISP_prepare>:

void ASD_DISP_prepare() {
 8001734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	/* Clear transmit buffer */
	for(int i = 0; i < 1245; i++)
		_transmit_buffer[i] = 0;
 8001738:	4819      	ldr	r0, [pc, #100]	; (80017a0 <ASD_DISP_prepare+0x6c>)
 800173a:	4c19      	ldr	r4, [pc, #100]	; (80017a0 <ASD_DISP_prepare+0x6c>)
//
	for(int pixel_idx = 0; pixel_idx < 399; pixel_idx++) {
		hsvData = _draw_hsv_buffer[pixel_idx];
 800173c:	4f19      	ldr	r7, [pc, #100]	; (80017a4 <ASD_DISP_prepare+0x70>)
 800173e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80017b0 <ASD_DISP_prepare+0x7c>
		hsv2rgb_raw_C(&hsvData, &rgbData);
 8001742:	4e19      	ldr	r6, [pc, #100]	; (80017a8 <ASD_DISP_prepare+0x74>)
		_transmit_buffer[i] = 0;
 8001744:	f241 3274 	movw	r2, #4980	; 0x1374
 8001748:	2100      	movs	r1, #0
 800174a:	f004 f95f 	bl	8005a0c <memset>
 800174e:	2500      	movs	r5, #0
		hsvData = _draw_hsv_buffer[pixel_idx];
 8001750:	eb08 0305 	add.w	r3, r8, r5
 8001754:	f838 2005 	ldrh.w	r2, [r8, r5]
 8001758:	789b      	ldrb	r3, [r3, #2]
		hsv2rgb_raw_C(&hsvData, &rgbData);
 800175a:	4913      	ldr	r1, [pc, #76]	; (80017a8 <ASD_DISP_prepare+0x74>)
 800175c:	4811      	ldr	r0, [pc, #68]	; (80017a4 <ASD_DISP_prepare+0x70>)
		hsvData = _draw_hsv_buffer[pixel_idx];
 800175e:	803a      	strh	r2, [r7, #0]
 8001760:	70bb      	strb	r3, [r7, #2]
		hsv2rgb_raw_C(&hsvData, &rgbData);
 8001762:	f7ff ff77 	bl	8001654 <hsv2rgb_raw_C>
//		//convert rgb to protocol data each pixel send as 3xuint32_t
		int green_transmit_data_idx = pixel_idx * 3 + 0;
		int red_transmit_data_idx   = pixel_idx * 3 + 1;
		int blue_transmit_data_idx  = pixel_idx * 3 + 2;
//
		_transmit_buffer[green_transmit_data_idx] |=  COLOR_LUT[rgbData.g];
 8001766:	4a11      	ldr	r2, [pc, #68]	; (80017ac <ASD_DISP_prepare+0x78>)
 8001768:	7871      	ldrb	r1, [r6, #1]
 800176a:	6823      	ldr	r3, [r4, #0]
 800176c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8001770:	430b      	orrs	r3, r1
		_transmit_buffer[red_transmit_data_idx]   |=  COLOR_LUT[rgbData.r];
 8001772:	7831      	ldrb	r1, [r6, #0]
		_transmit_buffer[green_transmit_data_idx] |=  COLOR_LUT[rgbData.g];
 8001774:	6023      	str	r3, [r4, #0]
		_transmit_buffer[red_transmit_data_idx]   |=  COLOR_LUT[rgbData.r];
 8001776:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800177a:	6863      	ldr	r3, [r4, #4]
 800177c:	430b      	orrs	r3, r1
		_transmit_buffer[blue_transmit_data_idx]  |=  COLOR_LUT[rgbData.b];
 800177e:	78b1      	ldrb	r1, [r6, #2]
		_transmit_buffer[red_transmit_data_idx]   |=  COLOR_LUT[rgbData.r];
 8001780:	6063      	str	r3, [r4, #4]
		_transmit_buffer[blue_transmit_data_idx]  |=  COLOR_LUT[rgbData.b];
 8001782:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001786:	68a3      	ldr	r3, [r4, #8]
 8001788:	4313      	orrs	r3, r2
 800178a:	60a3      	str	r3, [r4, #8]
	for(int pixel_idx = 0; pixel_idx < 399; pixel_idx++) {
 800178c:	3503      	adds	r5, #3
 800178e:	f240 43ad 	movw	r3, #1197	; 0x4ad
 8001792:	429d      	cmp	r5, r3
 8001794:	f104 040c 	add.w	r4, r4, #12
 8001798:	d1da      	bne.n	8001750 <ASD_DISP_prepare+0x1c>
	}
//	//RES always zeros
}
 800179a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800179e:	bf00      	nop
 80017a0:	20000a9c 	.word	0x20000a9c
 80017a4:	20001e10 	.word	0x20001e10
 80017a8:	20001e13 	.word	0x20001e13
 80017ac:	08008790 	.word	0x08008790
 80017b0:	200005e9 	.word	0x200005e9

080017b4 <ASD_DISP_render>:

void ASD_DISP_render() {
 80017b4:	b508      	push	{r3, lr}
	if (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_BUSY)
 80017b6:	4807      	ldr	r0, [pc, #28]	; (80017d4 <ASD_DISP_render+0x20>)
 80017b8:	f002 fb7c 	bl	8003eb4 <HAL_SPI_GetState>
 80017bc:	2802      	cmp	r0, #2
 80017be:	d007      	beq.n	80017d0 <ASD_DISP_render+0x1c>
		HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)(_transmit_buffer), 4980);
}
 80017c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		HAL_SPI_Transmit_DMA(&hspi2, (uint8_t*)(_transmit_buffer), 4980);
 80017c4:	4904      	ldr	r1, [pc, #16]	; (80017d8 <ASD_DISP_render+0x24>)
 80017c6:	4803      	ldr	r0, [pc, #12]	; (80017d4 <ASD_DISP_render+0x20>)
 80017c8:	f241 3274 	movw	r2, #4980	; 0x1374
 80017cc:	f002 bac0 	b.w	8003d50 <HAL_SPI_Transmit_DMA>
}
 80017d0:	bd08      	pop	{r3, pc}
 80017d2:	bf00      	nop
 80017d4:	20007a34 	.word	0x20007a34
 80017d8:	20000a9c 	.word	0x20000a9c

080017dc <ASD_DISP_setMaxBrightness>:

void ASD_DISP_setMaxBrightness(float32_t brightness) {
	_maxBrightness = brightness;
 80017dc:	4b01      	ldr	r3, [pc, #4]	; (80017e4 <ASD_DISP_setMaxBrightness+0x8>)
 80017de:	ed83 0a00 	vstr	s0, [r3]
}
 80017e2:	4770      	bx	lr
 80017e4:	20000a98 	.word	0x20000a98

080017e8 <ASD_FFT_init>:
#define BASS_ENERGY_THRESHOLD 49.9
#define ENERGY_COLLECT_COUNT 4

void ASD_FFT_init() {
	/* Key points used in double buffering */
	_keySamples[0] = (uint16_t *)(&_samplesBuffer[0]);
 80017e8:	490f      	ldr	r1, [pc, #60]	; (8001828 <ASD_FFT_init+0x40>)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <ASD_FFT_init+0x44>)
	_keySamples[1] = (uint16_t *)(&_samplesBuffer[FFT_SAMPLES_COUNT]);
 80017ec:	f501 6200 	add.w	r2, r1, #2048	; 0x800
	_keySamples[0] = (uint16_t *)(&_samplesBuffer[0]);
 80017f0:	6019      	str	r1, [r3, #0]
	_keySamples[1] = (uint16_t *)(&_samplesBuffer[FFT_SAMPLES_COUNT]);
 80017f2:	605a      	str	r2, [r3, #4]
	_samplesBufferIndex = 1;
 80017f4:	4b0e      	ldr	r3, [pc, #56]	; (8001830 <ASD_FFT_init+0x48>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

	_keyMagnitudes[0] = (float32_t *)(&_magnitudes[0]);
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <ASD_FFT_init+0x4c>)
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <ASD_FFT_init+0x50>)
 80017fe:	6013      	str	r3, [r2, #0]
	_keyMagnitudes[1] = (float32_t *)(&_magnitudes[FFT_SAMPLES_COUNT]);
 8001800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001804:	6053      	str	r3, [r2, #4]
	_magnitudesBufferIndex = 0;
 8001806:	4b0d      	ldr	r3, [pc, #52]	; (800183c <ASD_FFT_init+0x54>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

	/* Preset samples of test signal. 2x1024 samples for 1024FFT feed */
	for(int i = 0; i < 2048; i++)
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <ASD_FFT_init+0x58>)
		_samplesBuffer[i] = ADC_SAMPLES[i];
 800180e:	f833 0b02 	ldrh.w	r0, [r3], #2
 8001812:	f821 0012 	strh.w	r0, [r1, r2, lsl #1]
	for(int i = 0; i < 2048; i++)
 8001816:	3201      	adds	r2, #1
 8001818:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800181c:	d1f7      	bne.n	800180e <ASD_FFT_init+0x26>

	/* Use _samplesBuffer_hole to use test data */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)_samplesBuffer, FFT_SAMPLES_COUNT * 2);
 800181e:	4902      	ldr	r1, [pc, #8]	; (8001828 <ASD_FFT_init+0x40>)
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <ASD_FFT_init+0x5c>)
 8001822:	f001 b8ad 	b.w	8002980 <HAL_ADC_Start_DMA>
 8001826:	bf00      	nop
 8001828:	20005e84 	.word	0x20005e84
 800182c:	20001e78 	.word	0x20001e78
 8001830:	2000000c 	.word	0x2000000c
 8001834:	20001e70 	.word	0x20001e70
 8001838:	20001e80 	.word	0x20001e80
 800183c:	20003e80 	.word	0x20003e80
 8001840:	08008b90 	.word	0x08008b90
 8001844:	2000780c 	.word	0x2000780c

08001848 <ASD_FFT_toggleBuffers>:
}


void ASD_FFT_toggleBuffers() {
	/* Toggle buffers */
	_samplesBufferIndex ^= 1;
 8001848:	4a0a      	ldr	r2, [pc, #40]	; (8001874 <ASD_FFT_toggleBuffers+0x2c>)
 800184a:	6813      	ldr	r3, [r2, #0]
 800184c:	f083 0301 	eor.w	r3, r3, #1
 8001850:	6013      	str	r3, [r2, #0]
	_selectedSamplesBuffer = _keySamples[_samplesBufferIndex];
 8001852:	4a09      	ldr	r2, [pc, #36]	; (8001878 <ASD_FFT_toggleBuffers+0x30>)
 8001854:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001858:	4b08      	ldr	r3, [pc, #32]	; (800187c <ASD_FFT_toggleBuffers+0x34>)
 800185a:	601a      	str	r2, [r3, #0]

	_magnitudesBufferIndex ^= 1;
 800185c:	4a08      	ldr	r2, [pc, #32]	; (8001880 <ASD_FFT_toggleBuffers+0x38>)
 800185e:	6813      	ldr	r3, [r2, #0]
 8001860:	f083 0301 	eor.w	r3, r3, #1
 8001864:	6013      	str	r3, [r2, #0]
	_selectedMagnitudes = _keyMagnitudes[_magnitudesBufferIndex];
 8001866:	4a07      	ldr	r2, [pc, #28]	; (8001884 <ASD_FFT_toggleBuffers+0x3c>)
 8001868:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <ASD_FFT_toggleBuffers+0x40>)
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	2000000c 	.word	0x2000000c
 8001878:	20001e78 	.word	0x20001e78
 800187c:	20006e88 	.word	0x20006e88
 8001880:	20003e80 	.word	0x20003e80
 8001884:	20001e70 	.word	0x20001e70
 8001888:	20006e84 	.word	0x20006e84

0800188c <ASD_FFT_evalFFT>:

float32_t* ASD_FFT_evalFFT(float32_t* boundHeights) {
 800188c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800188e:	4b4e      	ldr	r3, [pc, #312]	; (80019c8 <ASD_FFT_evalFFT+0x13c>)
 8001890:	ed2d 8b02 	vpush	{d8}

	/* Image part */
	for(int i = 1; i < FFT_SAMPLES_COUNT * 2; i+=2)
		_processingSamples[i] = 0.0;
 8001894:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 80019cc <ASD_FFT_evalFFT+0x140>
float32_t* ASD_FFT_evalFFT(float32_t* boundHeights) {
 8001898:	4605      	mov	r5, r0
 800189a:	4619      	mov	r1, r3
	for(int i = 1; i < FFT_SAMPLES_COUNT * 2; i+=2)
 800189c:	2201      	movs	r2, #1
 800189e:	f640 0001 	movw	r0, #2049	; 0x801
 80018a2:	3202      	adds	r2, #2
 80018a4:	4282      	cmp	r2, r0
		_processingSamples[i] = 0.0;
 80018a6:	ed81 8a01 	vstr	s16, [r1, #4]
	for(int i = 1; i < FFT_SAMPLES_COUNT * 2; i+=2)
 80018aa:	f101 0108 	add.w	r1, r1, #8
 80018ae:	d1f8      	bne.n	80018a2 <ASD_FFT_evalFFT+0x16>

	/* Real part */
	mean = 0.0;
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
		float32_t smple = (float32_t)(_selectedSamplesBuffer[i/2]) / 2048.0 ;
 80018b0:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <ASD_FFT_evalFFT+0x144>)
 80018b2:	4945      	ldr	r1, [pc, #276]	; (80019c8 <ASD_FFT_evalFFT+0x13c>)
 80018b4:	eddf 7a45 	vldr	s15, [pc, #276]	; 80019cc <ASD_FFT_evalFFT+0x140>
 80018b8:	eddf 6a46 	vldr	s13, [pc, #280]	; 80019d4 <ASD_FFT_evalFFT+0x148>
 80018bc:	6810      	ldr	r0, [r2, #0]
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
 80018be:	2200      	movs	r2, #0
		float32_t smple = (float32_t)(_selectedSamplesBuffer[i/2]) / 2048.0 ;
 80018c0:	1054      	asrs	r4, r2, #1
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
 80018c2:	3202      	adds	r2, #2
		float32_t smple = (float32_t)(_selectedSamplesBuffer[i/2]) / 2048.0 ;
 80018c4:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
 80018c8:	ee07 4a10 	vmov	s14, r4
 80018cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		_processingSamples[i] = smple;
 80018d0:	460c      	mov	r4, r1
		float32_t smple = (float32_t)(_selectedSamplesBuffer[i/2]) / 2048.0 ;
 80018d2:	ee27 7a26 	vmul.f32	s14, s14, s13
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
 80018d6:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
		mean += smple;
 80018da:	ee77 7a87 	vadd.f32	s15, s15, s14
		_processingSamples[i] = smple;
 80018de:	f101 0108 	add.w	r1, r1, #8
 80018e2:	ed84 7a00 	vstr	s14, [r4]
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2) {
 80018e6:	d1eb      	bne.n	80018c0 <ASD_FFT_evalFFT+0x34>
	}
	mean /= FFT_SAMPLES_COUNT;
 80018e8:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80019d8 <ASD_FFT_evalFFT+0x14c>
 80018ec:	4a3b      	ldr	r2, [pc, #236]	; (80019dc <ASD_FFT_evalFFT+0x150>)
 80018ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f2:	edc2 7a00 	vstr	s15, [r2]

	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2)
 80018f6:	2200      	movs	r2, #0
		_processingSamples[i] -= mean;
 80018f8:	ed93 7a00 	vldr	s14, [r3]
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2)
 80018fc:	3202      	adds	r2, #2
		_processingSamples[i] -= mean;
 80018fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001902:	4619      	mov	r1, r3
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2)
 8001904:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
		_processingSamples[i] -= mean;
 8001908:	f103 0308 	add.w	r3, r3, #8
 800190c:	ed81 7a00 	vstr	s14, [r1]
	for(int i = 0; i < FFT_SAMPLES_COUNT * 2; i+=2)
 8001910:	d1f2      	bne.n	80018f8 <ASD_FFT_evalFFT+0x6c>

	/* Magnitudes */
	for(int i = 0; i < FFT_SAMPLES_COUNT; i++)
		_selectedMagnitudes[i] = 0.0;
 8001912:	4c33      	ldr	r4, [pc, #204]	; (80019e0 <ASD_FFT_evalFFT+0x154>)
 8001914:	4e33      	ldr	r6, [pc, #204]	; (80019e4 <ASD_FFT_evalFFT+0x158>)
 8001916:	6820      	ldr	r0, [r4, #0]
 8001918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191c:	2100      	movs	r1, #0
 800191e:	f004 f875 	bl	8005a0c <memset>

	// 1024, 1024*2, 0, 1
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, _processingSamples, 0, 1);
 8001922:	2301      	movs	r3, #1
 8001924:	4928      	ldr	r1, [pc, #160]	; (80019c8 <ASD_FFT_evalFFT+0x13c>)
 8001926:	4830      	ldr	r0, [pc, #192]	; (80019e8 <ASD_FFT_evalFFT+0x15c>)
 8001928:	2200      	movs	r2, #0
 800192a:	f003 fbe3 	bl	80050f4 <arm_cfft_f32>

	// 1024*2, 1024, 1024
	arm_cmplx_mag_f32(_processingSamples, _selectedMagnitudes, FFT_SAMPLES_COUNT);
 800192e:	6821      	ldr	r1, [r4, #0]
 8001930:	4825      	ldr	r0, [pc, #148]	; (80019c8 <ASD_FFT_evalFFT+0x13c>)
 8001932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001936:	f003 fc57 	bl	80051e8 <arm_cmplx_mag_f32>

	arm_max_f32(_selectedMagnitudes, FFT_SAMPLES_COUNT, &_boundsMaxHeight, &_boundsMaxHeightIndex);
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <ASD_FFT_evalFFT+0x160>)
 800193c:	4a2c      	ldr	r2, [pc, #176]	; (80019f0 <ASD_FFT_evalFFT+0x164>)
 800193e:	6820      	ldr	r0, [r4, #0]
 8001940:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001944:	f003 f840 	bl	80049c8 <arm_max_f32>
	//efective magnitudes: fft_magnitudes.length / 2. For 1024 samples it is 512. Use this number in bounds
	for(int i = 0; i < BINS_COUNT; i++)
 8001948:	6823      	ldr	r3, [r4, #0]
		_usableMagnitudes[i] = 2.0/FFT_SAMPLES_COUNT * _selectedMagnitudes[i];
 800194a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80019f4 <ASD_FFT_evalFFT+0x168>
 800194e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
 8001952:	4632      	mov	r2, r6
 8001954:	ecf3 7a01 	vldmia	r3!, {s15}
 8001958:	ee67 7a87 	vmul.f32	s15, s15, s14
	for(int i = 0; i < BINS_COUNT; i++)
 800195c:	4299      	cmp	r1, r3
		_usableMagnitudes[i] = 2.0/FFT_SAMPLES_COUNT * _selectedMagnitudes[i];
 800195e:	ece2 7a01 	vstmia	r2!, {s15}
	for(int i = 0; i < BINS_COUNT; i++)
 8001962:	d1f7      	bne.n	8001954 <ASD_FFT_evalFFT+0xc8>
	_currentAveragingIndex++;
	if(_currentAveragingIndex >= AVERAGING_COUNT)
		_currentAveragingIndex = 0;

	for(int i = 0; i < BANDS_COUNT; i++)
		_boundsHeightsAveraging[i + BANDS_COUNT * _currentAveragingIndex] = 0;
 8001964:	4f24      	ldr	r7, [pc, #144]	; (80019f8 <ASD_FFT_evalFFT+0x16c>)
		_currentAveragingIndex = 0;
 8001966:	4b25      	ldr	r3, [pc, #148]	; (80019fc <ASD_FFT_evalFFT+0x170>)
 8001968:	2400      	movs	r4, #0
		_boundsHeightsAveraging[i + BANDS_COUNT * _currentAveragingIndex] = 0;
 800196a:	224c      	movs	r2, #76	; 0x4c
 800196c:	4621      	mov	r1, r4
 800196e:	4638      	mov	r0, r7
		_currentAveragingIndex = 0;
 8001970:	801c      	strh	r4, [r3, #0]
		_boundsHeightsAveraging[i + BANDS_COUNT * _currentAveragingIndex] = 0;
 8001972:	f004 f84b 	bl	8005a0c <memset>

	for(int i = 0; i < BINS_COUNT; i++) {
		/* Nosie removal, 0.01 should be fine */
		float32_t threshold = 0.005;//0.075*(BINS_COUNT-i-1)/BINS_COUNT;
		if(_usableMagnitudes[i] > threshold)
 8001976:	eddf 6a22 	vldr	s13, [pc, #136]	; 8001a00 <ASD_FFT_evalFFT+0x174>
			_boundsHeightsAveraging[BINS_IDXS[i] + BANDS_COUNT * _currentAveragingIndex] += _usableMagnitudes[i];
 800197a:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <ASD_FFT_evalFFT+0x178>)
	for(int i = 0; i < BINS_COUNT; i++) {
 800197c:	4621      	mov	r1, r4
		if(_usableMagnitudes[i] > threshold)
 800197e:	ecb6 7a01 	vldmia	r6!, {s14}
 8001982:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8001986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800198a:	dd09      	ble.n	80019a0 <ASD_FFT_evalFFT+0x114>
			_boundsHeightsAveraging[BINS_IDXS[i] + BANDS_COUNT * _currentAveragingIndex] += _usableMagnitudes[i];
 800198c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8001990:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800199c:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < BINS_COUNT; i++) {
 80019a0:	3101      	adds	r1, #1
 80019a2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80019a6:	d1ea      	bne.n	800197e <ASD_FFT_evalFFT+0xf2>
 80019a8:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <ASD_FFT_evalFFT+0x16c>)
 80019aa:	462b      	mov	r3, r5
 80019ac:	f105 014c 	add.w	r1, r5, #76	; 0x4c

	float32_t average = 0.0;
	for(int i = 0; i < BANDS_COUNT; i++) {
		average = 0.0;
		for(int j = 0; j < AVERAGING_COUNT; j++)
			average += _boundsHeightsAveraging[i + BANDS_COUNT * j];
 80019b0:	ecf2 7a01 	vldmia	r2!, {s15}
 80019b4:	ee77 7a88 	vadd.f32	s15, s15, s16
		boundHeights[i] = average / AVERAGING_COUNT;
 80019b8:	ece3 7a01 	vstmia	r3!, {s15}
	for(int i = 0; i < BANDS_COUNT; i++) {
 80019bc:	428b      	cmp	r3, r1
 80019be:	d1f7      	bne.n	80019b0 <ASD_FFT_evalFFT+0x124>
	}

	return boundHeights;
}
 80019c0:	ecbd 8b02 	vpop	{d8}
 80019c4:	4628      	mov	r0, r5
 80019c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019c8:	20003e84 	.word	0x20003e84
 80019cc:	00000000 	.word	0x00000000
 80019d0:	20006e88 	.word	0x20006e88
 80019d4:	3a000000 	.word	0x3a000000
 80019d8:	3a800000 	.word	0x3a800000
 80019dc:	20007808 	.word	0x20007808
 80019e0:	20006e84 	.word	0x20006e84
 80019e4:	20006e8c 	.word	0x20006e8c
 80019e8:	0800a3c0 	.word	0x0800a3c0
 80019ec:	20001e68 	.word	0x20001e68
 80019f0:	20001e64 	.word	0x20001e64
 80019f4:	3b000000 	.word	0x3b000000
 80019f8:	20001e18 	.word	0x20001e18
 80019fc:	20001e6c 	.word	0x20001e6c
 8001a00:	3ba3d70a 	.word	0x3ba3d70a
 8001a04:	08009b90 	.word	0x08009b90

08001a08 <ASD_FFT_evalDynamics>:

void ASD_FFT_evalDynamics(float32_t* boundHeights, bounds_t* bounds, float32_t dts) {
 8001a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a0c:	ed2d 8b04 	vpush	{d8-d9}
 8001a10:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <ASD_FFT_evalDynamics+0x188>)
 8001a12:	4e60      	ldr	r6, [pc, #384]	; (8001b94 <ASD_FFT_evalDynamics+0x18c>)
 8001a14:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8001ba4 <ASD_FFT_evalDynamics+0x19c>
 8001a18:	b083      	sub	sp, #12
 8001a1a:	4683      	mov	fp, r0
 8001a1c:	460c      	mov	r4, r1
 8001a1e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	461f      	mov	r7, r3
 8001a26:	46c8      	mov	r8, r9
 8001a28:	46b2      	mov	sl, r6
		//current ACCELERATION evaluated on previous values
		for(int i = 0; i < BANDS_COUNT; i++)
 8001a2a:	2500      	movs	r5, #0
			bounds_acceleration[i] = PHYSICS_MUL * (bounds_velocity[i] - bounds_last_velocity[i]) / dts;
 8001a2c:	ecfa 8a01 	vldmia	sl!, {s17}
 8001a30:	ecb8 8a01 	vldmia	r8!, {s16}
 8001a34:	9801      	ldr	r0, [sp, #4]
 8001a36:	f7fe fe07 	bl	8000648 <__aeabi_f2d>
 8001a3a:	ee78 7ac8 	vsub.f32	s15, s17, s16
 8001a3e:	ec41 0b19 	vmov	d9, r0, r1
 8001a42:	ee17 0a90 	vmov	r0, s15
 8001a46:	f7fe fdff 	bl	8000648 <__aeabi_f2d>
 8001a4a:	a34b      	add	r3, pc, #300	; (adr r3, 8001b78 <ASD_FFT_evalDynamics+0x170>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	f7fe fe52 	bl	80006f8 <__aeabi_dmul>
 8001a54:	ec53 2b19 	vmov	r2, r3, d9
 8001a58:	f7fe ff78 	bl	800094c <__aeabi_ddiv>
 8001a5c:	f7ff f944 	bl	8000ce8 <__aeabi_d2f>
		for(int i = 0; i < BANDS_COUNT; i++)
 8001a60:	3501      	adds	r5, #1
 8001a62:	2d13      	cmp	r5, #19
			bounds_acceleration[i] = PHYSICS_MUL * (bounds_velocity[i] - bounds_last_velocity[i]) / dts;
 8001a64:	f847 0b04 	str.w	r0, [r7], #4
		for(int i = 0; i < BANDS_COUNT; i++)
 8001a68:	d1e0      	bne.n	8001a2c <ASD_FFT_evalDynamics+0x24>
 8001a6a:	465d      	mov	r5, fp
 8001a6c:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8001b94 <ASD_FFT_evalDynamics+0x18c>
 8001a70:	f8df b128 	ldr.w	fp, [pc, #296]	; 8001b9c <ASD_FFT_evalDynamics+0x194>
 8001a74:	f105 0a4c 	add.w	sl, r5, #76	; 0x4c
 8001a78:	462f      	mov	r7, r5

		//current VELOCITY evaluated on previous values and save discarded as last
		for(int i = 0; i < BANDS_COUNT; i++) {
			bounds_last_velocity[i] = bounds_velocity[i];
 8001a7a:	f8d8 3000 	ldr.w	r3, [r8]
 8001a7e:	f849 3b04 	str.w	r3, [r9], #4
			bounds_velocity[i] = PHYSICS_MUL * (boundHeights[i] - bounds_last_heights[i]) / dts;
 8001a82:	ecb7 7a01 	vldmia	r7!, {s14}
 8001a86:	ecfb 7a01 	vldmia	fp!, {s15}
 8001a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8e:	ee17 0a90 	vmov	r0, s15
 8001a92:	f7fe fdd9 	bl	8000648 <__aeabi_f2d>
 8001a96:	a338      	add	r3, pc, #224	; (adr r3, 8001b78 <ASD_FFT_evalDynamics+0x170>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fe2c 	bl	80006f8 <__aeabi_dmul>
 8001aa0:	ec53 2b19 	vmov	r2, r3, d9
 8001aa4:	f7fe ff52 	bl	800094c <__aeabi_ddiv>
 8001aa8:	f7ff f91e 	bl	8000ce8 <__aeabi_d2f>
		for(int i = 0; i < BANDS_COUNT; i++) {
 8001aac:	4557      	cmp	r7, sl
			bounds_velocity[i] = PHYSICS_MUL * (boundHeights[i] - bounds_last_heights[i]) / dts;
 8001aae:	f848 0b04 	str.w	r0, [r8], #4
		for(int i = 0; i < BANDS_COUNT; i++) {
 8001ab2:	d1e2      	bne.n	8001a7a <ASD_FFT_evalDynamics+0x72>
		}

		//current HEIGHT(POSITION) and save discarded as last
		for(int i = 0; i < BANDS_COUNT; i++) {
			bounds_last_heights[i] = bounds_heights[i];
 8001ab4:	4938      	ldr	r1, [pc, #224]	; (8001b98 <ASD_FFT_evalDynamics+0x190>)
 8001ab6:	4839      	ldr	r0, [pc, #228]	; (8001b9c <ASD_FFT_evalDynamics+0x194>)
 8001ab8:	224c      	movs	r2, #76	; 0x4c
 8001aba:	f003 ff99 	bl	80059f0 <memcpy>
			bounds_heights[i] = 0;
 8001abe:	4836      	ldr	r0, [pc, #216]	; (8001b98 <ASD_FFT_evalDynamics+0x190>)
 8001ac0:	224c      	movs	r2, #76	; 0x4c
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f003 ffa2 	bl	8005a0c <memset>
		}

		float boundsSum = 0;
 8001ac8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001ba0 <ASD_FFT_evalDynamics+0x198>
 8001acc:	4623      	mov	r3, r4
 8001ace:	eeb0 8a47 	vmov.f32	s16, s14
		for(int i = 0; i < BANDS_COUNT; i++) {
			bounds->heights[i] = boundHeights[i];
 8001ad2:	ecf5 6a01 	vldmia	r5!, {s13}
			boundsSum += bounds->heights[i];
			bounds->velocities[i] = bounds_velocity[i];
			bounds->accelerations[i] = bounds_acceleration[i];
 8001ad6:	9900      	ldr	r1, [sp, #0]
			bounds->heights[i] = boundHeights[i];
 8001ad8:	ece3 6a01 	vstmia	r3!, {s13}
			bounds->velocities[i] = bounds_velocity[i];
 8001adc:	f856 2b04 	ldr.w	r2, [r6], #4
 8001ae0:	649a      	str	r2, [r3, #72]	; 0x48
			bounds->accelerations[i] = bounds_acceleration[i];
 8001ae2:	f851 2b04 	ldr.w	r2, [r1], #4
 8001ae6:	9100      	str	r1, [sp, #0]
		for(int i = 0; i < BANDS_COUNT; i++) {
 8001ae8:	4555      	cmp	r5, sl
			boundsSum += bounds->heights[i];
 8001aea:	ee37 7a26 	vadd.f32	s14, s14, s13
			bounds->accelerations[i] = bounds_acceleration[i];
 8001aee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		for(int i = 0; i < BANDS_COUNT; i++) {
 8001af2:	d1ee      	bne.n	8001ad2 <ASD_FFT_evalDynamics+0xca>
		}
		bounds->heightsSum = boundsSum;
 8001af4:	ed84 7a3a 	vstr	s14, [r4, #232]	; 0xe8
		bounds->isIdle = boundsSum < IDLE_SUM_THRESHOLD;
 8001af8:	ee17 0a10 	vmov	r0, s14
 8001afc:	f7fe fda4 	bl	8000648 <__aeabi_f2d>
 8001b00:	a31f      	add	r3, pc, #124	; (adr r3, 8001b80 <ASD_FFT_evalDynamics+0x178>)
 8001b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b06:	f7ff f869 	bl	8000bdc <__aeabi_dcmplt>

		float bassEnergy = 0;
		for(int i = 0; i < ENERGY_COLLECT_COUNT; i++) {
			bassEnergy += bounds->velocities[i];
 8001b0a:	edd4 7a13 	vldr	s15, [r4, #76]	; 0x4c
 8001b0e:	ed94 7a14 	vldr	s14, [r4, #80]	; 0x50
 8001b12:	ee77 7a88 	vadd.f32	s15, s15, s16
		bounds->isIdle = boundsSum < IDLE_SUM_THRESHOLD;
 8001b16:	3800      	subs	r0, #0
			bassEnergy += bounds->velocities[i];
 8001b18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1c:	ed94 7a15 	vldr	s14, [r4, #84]	; 0x54
 8001b20:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b24:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 8001b28:	ee77 7a87 	vadd.f32	s15, s15, s14
		bounds->isIdle = boundsSum < IDLE_SUM_THRESHOLD;
 8001b2c:	bf18      	it	ne
 8001b2e:	2001      	movne	r0, #1
		}
		if(bassEnergy < 0)
 8001b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			bassEnergy = -bassEnergy;
 8001b38:	bf48      	it	mi
 8001b3a:	eef1 7a67 	vnegmi.f32	s15, s15
		bounds->bassEnergy = bassEnergy;
 8001b3e:	edc4 7a3c 	vstr	s15, [r4, #240]	; 0xf0
		bounds->isIdle = boundsSum < IDLE_SUM_THRESHOLD;
 8001b42:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec

		bounds->bassTrig = bassEnergy > BASS_ENERGY_THRESHOLD;
 8001b46:	ee17 0a90 	vmov	r0, s15
 8001b4a:	f7fe fd7d 	bl	8000648 <__aeabi_f2d>
 8001b4e:	a30e      	add	r3, pc, #56	; (adr r3, 8001b88 <ASD_FFT_evalDynamics+0x180>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7ff f860 	bl	8000c18 <__aeabi_dcmpgt>

		bounds->dt_sec = dts;
 8001b58:	eddd 7a01 	vldr	s15, [sp, #4]
		bounds->bassTrig = bassEnergy > BASS_ENERGY_THRESHOLD;
 8001b5c:	3800      	subs	r0, #0
 8001b5e:	bf18      	it	ne
 8001b60:	2001      	movne	r0, #1
 8001b62:	f8c4 00f4 	str.w	r0, [r4, #244]	; 0xf4
		bounds->dt_sec = dts;
 8001b66:	edc4 7a39 	vstr	s15, [r4, #228]	; 0xe4
}
 8001b6a:	b003      	add	sp, #12
 8001b6c:	ecbd 8b04 	vpop	{d8-d9}
 8001b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b74:	f3af 8000 	nop.w
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	412e8480 	.word	0x412e8480
 8001b80:	9999999a 	.word	0x9999999a
 8001b84:	3fc99999 	.word	0x3fc99999
 8001b88:	33333333 	.word	0x33333333
 8001b8c:	4048f333 	.word	0x4048f333
 8001b90:	2000768c 	.word	0x2000768c
 8001b94:	200077bc 	.word	0x200077bc
 8001b98:	200076d8 	.word	0x200076d8
 8001b9c:	20007724 	.word	0x20007724
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	20007770 	.word	0x20007770

08001ba8 <ASD_UTILS_getRandom>:
#include "ASD_Utils.h"

uint32_t ASD_UTILS_getRandom() {
	uint32_t rnd = __HAL_TIM_GET_COUNTER(&htim10);
 8001ba8:	4b02      	ldr	r3, [pc, #8]	; (8001bb4 <ASD_UTILS_getRandom+0xc>)
//	rnd ^= _rnd_mix_2;
	rnd ^= 0x8F567891;
//	rnd += _rnd_mix_1<<8;
//	rnd ^= HAL_GetTick();
	return rnd;
}
 8001baa:	4803      	ldr	r0, [pc, #12]	; (8001bb8 <ASD_UTILS_getRandom+0x10>)
	uint32_t rnd = __HAL_TIM_GET_COUNTER(&htim10);
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8001bb0:	4058      	eors	r0, r3
 8001bb2:	4770      	bx	lr
 8001bb4:	20007a90 	.word	0x20007a90
 8001bb8:	8f567891 	.word	0x8f567891

08001bbc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001bbc:	b530      	push	{r4, r5, lr}
 8001bbe:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc0:	2210      	movs	r2, #16
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	4668      	mov	r0, sp
 8001bc6:	f003 ff21 	bl	8005a0c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001bca:	4813      	ldr	r0, [pc, #76]	; (8001c18 <MX_ADC1_Init+0x5c>)
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001bcc:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <MX_ADC1_Init+0x60>)
 8001bce:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bd2:	2400      	movs	r4, #0
  hadc1.Init.ScanConvMode = DISABLE;
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001bd4:	2501      	movs	r5, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001bd6:	e9c0 2300 	strd	r2, r3, [r0]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_ADC1_Init+0x64>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001bdc:	6084      	str	r4, [r0, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001bde:	6104      	str	r4, [r0, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001be0:	7605      	strb	r5, [r0, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001be2:	f880 4020 	strb.w	r4, [r0, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001be6:	62c4      	str	r4, [r0, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001be8:	6283      	str	r3, [r0, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001bea:	60c4      	str	r4, [r0, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001bec:	61c5      	str	r5, [r0, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001bee:	f880 5030 	strb.w	r5, [r0, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bf2:	6145      	str	r5, [r0, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001bf4:	f000 fe1e 	bl	8002834 <HAL_ADC_Init>
 8001bf8:	b108      	cbz	r0, 8001bfe <MX_ADC1_Init+0x42>
  {
    Error_Handler();
 8001bfa:	f000 fa85 	bl	8002108 <Error_Handler>

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = 1;
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001bfe:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c00:	4805      	ldr	r0, [pc, #20]	; (8001c18 <MX_ADC1_Init+0x5c>)
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001c02:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c04:	4669      	mov	r1, sp
  sConfig.Rank = 1;
 8001c06:	e9cd 4500 	strd	r4, r5, [sp]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c0a:	f000 ffab 	bl	8002b64 <HAL_ADC_ConfigChannel>
 8001c0e:	b108      	cbz	r0, 8001c14 <MX_ADC1_Init+0x58>
  {
    Error_Handler();
 8001c10:	f000 fa7a 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c14:	b005      	add	sp, #20
 8001c16:	bd30      	pop	{r4, r5, pc}
 8001c18:	2000780c 	.word	0x2000780c
 8001c1c:	40012000 	.word	0x40012000
 8001c20:	0f000001 	.word	0x0f000001

08001c24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001c24:	b570      	push	{r4, r5, r6, lr}
 8001c26:	4606      	mov	r6, r0
 8001c28:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c2a:	2214      	movs	r2, #20
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	a803      	add	r0, sp, #12
 8001c30:	f003 feec 	bl	8005a0c <memset>
  if(adcHandle->Instance==ADC1)
 8001c34:	6832      	ldr	r2, [r6, #0]
 8001c36:	4b20      	ldr	r3, [pc, #128]	; (8001cb8 <HAL_ADC_MspInit+0x94>)
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d13a      	bne.n	8001cb2 <HAL_ADC_MspInit+0x8e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8001c40:	2500      	movs	r5, #0
 8001c42:	9501      	str	r5, [sp, #4]
 8001c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	481d      	ldr	r0, [pc, #116]	; (8001cbc <HAL_ADC_MspInit+0x98>)

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001c48:	4c1d      	ldr	r4, [pc, #116]	; (8001cc0 <HAL_ADC_MspInit+0x9c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c4e:	645a      	str	r2, [r3, #68]	; 0x44
 8001c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c52:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8001c56:	9201      	str	r2, [sp, #4]
 8001c58:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5a:	9502      	str	r5, [sp, #8]
 8001c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	631a      	str	r2, [r3, #48]	; 0x30
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	9302      	str	r3, [sp, #8]
 8001c6c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c74:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c78:	f001 fb38 	bl	80032ec <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_ADC_MspInit+0xa0>)
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001c82:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c86:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c8a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c8e:	e9c4 1304 	strd	r1, r3, [r4, #16]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001c92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c96:	e9c4 0306 	strd	r0, r3, [r4, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c9a:	4620      	mov	r0, r4
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c9c:	e9c4 5502 	strd	r5, r5, [r4, #8]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ca0:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ca4:	f001 f954 	bl	8002f50 <HAL_DMA_Init>
 8001ca8:	b108      	cbz	r0, 8001cae <HAL_ADC_MspInit+0x8a>
    {
      Error_Handler();
 8001caa:	f000 fa2d 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001cae:	63b4      	str	r4, [r6, #56]	; 0x38
 8001cb0:	63a6      	str	r6, [r4, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001cb2:	b008      	add	sp, #32
 8001cb4:	bd70      	pop	{r4, r5, r6, pc}
 8001cb6:	bf00      	nop
 8001cb8:	40012000 	.word	0x40012000
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	20007854 	.word	0x20007854
 8001cc4:	40026410 	.word	0x40026410

08001cc8 <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001cc8:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001cca:	480c      	ldr	r0, [pc, #48]	; (8001cfc <MX_DAC_Init+0x34>)
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <MX_DAC_Init+0x38>)
 8001cce:	6003      	str	r3, [r0, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 8001cd0:	2400      	movs	r4, #0
 8001cd2:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001cd6:	f001 f847 	bl	8002d68 <HAL_DAC_Init>
 8001cda:	b108      	cbz	r0, 8001ce0 <MX_DAC_Init+0x18>
  {
    Error_Handler();
 8001cdc:	f000 fa14 	bl	8002108 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001ce0:	2324      	movs	r3, #36	; 0x24
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001ce2:	4806      	ldr	r0, [pc, #24]	; (8001cfc <MX_DAC_Init+0x34>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	4669      	mov	r1, sp
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001ce8:	e9cd 3400 	strd	r3, r4, [sp]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001cec:	f001 f8da 	bl	8002ea4 <HAL_DAC_ConfigChannel>
 8001cf0:	b108      	cbz	r0, 8001cf6 <MX_DAC_Init+0x2e>
  {
    Error_Handler();
 8001cf2:	f000 fa09 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001cf6:	b002      	add	sp, #8
 8001cf8:	bd10      	pop	{r4, pc}
 8001cfa:	bf00      	nop
 8001cfc:	200078b4 	.word	0x200078b4
 8001d00:	40007400 	.word	0x40007400

08001d04 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001d04:	b570      	push	{r4, r5, r6, lr}
 8001d06:	4605      	mov	r5, r0
 8001d08:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d0a:	2214      	movs	r2, #20
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	a803      	add	r0, sp, #12
 8001d10:	f003 fe7c 	bl	8005a0c <memset>
  if(dacHandle->Instance==DAC)
 8001d14:	682a      	ldr	r2, [r5, #0]
 8001d16:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_DAC_MspInit+0x98>)
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d13d      	bne.n	8001d98 <HAL_DAC_MspInit+0x94>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d1c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8001d20:	2600      	movs	r6, #0
 8001d22:	9601      	str	r6, [sp, #4]
 8001d24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	481e      	ldr	r0, [pc, #120]	; (8001da0 <HAL_DAC_MspInit+0x9c>)

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001d28:	4c1e      	ldr	r4, [pc, #120]	; (8001da4 <HAL_DAC_MspInit+0xa0>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8001d2a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001d2e:	641a      	str	r2, [r3, #64]	; 0x40
 8001d30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d32:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001d36:	9201      	str	r2, [sp, #4]
 8001d38:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d3a:	9602      	str	r6, [sp, #8]
 8001d3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d3e:	f042 0201 	orr.w	r2, r2, #1
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d4e:	2210      	movs	r2, #16
 8001d50:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d52:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d54:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d58:	f001 fac8 	bl	80032ec <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001d5c:	4912      	ldr	r1, [pc, #72]	; (8001da8 <HAL_DAC_MspInit+0xa4>)
 8001d5e:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
 8001d62:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d66:	2340      	movs	r3, #64	; 0x40
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d68:	f44f 6080 	mov.w	r0, #1024	; 0x400
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d6c:	e9c4 3602 	strd	r3, r6, [r4, #8]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d74:	e9c4 0304 	strd	r0, r3, [r4, #16]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001d78:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 8001d7c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001d80:	4620      	mov	r0, r4
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001d82:	e9c4 c306 	strd	ip, r3, [r4, #24]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d86:	e9c4 6608 	strd	r6, r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001d8a:	f001 f8e1 	bl	8002f50 <HAL_DMA_Init>
 8001d8e:	b108      	cbz	r0, 8001d94 <HAL_DAC_MspInit+0x90>
    {
      Error_Handler();
 8001d90:	f000 f9ba 	bl	8002108 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001d94:	60ac      	str	r4, [r5, #8]
 8001d96:	63a5      	str	r5, [r4, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001d98:	b008      	add	sp, #32
 8001d9a:	bd70      	pop	{r4, r5, r6, pc}
 8001d9c:	40007400 	.word	0x40007400
 8001da0:	40020000 	.word	0x40020000
 8001da4:	200078c8 	.word	0x200078c8
 8001da8:	40026088 	.word	0x40026088

08001dac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001dac:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <MX_DMA_Init+0x64>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	9200      	str	r2, [sp, #0]
 8001db4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001db6:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8001dba:	6319      	str	r1, [r3, #48]	; 0x30
 8001dbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dbe:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001dc2:	9100      	str	r1, [sp, #0]
 8001dc4:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dc6:	9201      	str	r2, [sp, #4]
 8001dc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dca:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8001dce:	6319      	str	r1, [r3, #48]	; 0x30
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001dd6:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001dd8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001dda:	200f      	movs	r0, #15
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ddc:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001dde:	f000 ff6f 	bl	8002cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 ff9e 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2103      	movs	r1, #3
 8001dec:	2010      	movs	r0, #16
 8001dee:	f000 ff67 	bl	8002cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001df2:	2010      	movs	r0, #16
 8001df4:	f000 ff96 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	2038      	movs	r0, #56	; 0x38
 8001dfe:	f000 ff5f 	bl	8002cc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e02:	2038      	movs	r0, #56	; 0x38

}
 8001e04:	b003      	add	sp, #12
 8001e06:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e0a:	f000 bf8b 	b.w	8002d24 <HAL_NVIC_EnableIRQ>
 8001e0e:	bf00      	nop
 8001e10:	40023800 	.word	0x40023800

08001e14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e18:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	2214      	movs	r2, #20
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	a803      	add	r0, sp, #12
 8001e20:	f003 fdf4 	bl	8005a0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e24:	2400      	movs	r4, #0
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <MX_GPIO_Init+0xd4>)
 8001e28:	9400      	str	r4, [sp, #0]
 8001e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ADS983_SPI1_FS_Pin|BATCH_DONE_Pin|BAR_LED6_Pin|BAR_LED5_Pin
 8001e2c:	4e2f      	ldr	r6, [pc, #188]	; (8001eec <MX_GPIO_Init+0xd8>)
                          |BAR_LED4_Pin|BAR_LED3_Pin|GPIO_PIN_11|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SWIPE_NEXT_Pin|RELAY_SIG0_Pin|RELAY_SIG1_Pin|RELAY_SIG2_Pin
 8001e2e:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001ef4 <MX_GPIO_Init+0xe0>
                          |BAR_LED7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BAR_LED2_Pin|BAR_LED1_Pin|BAR_LED0_Pin, GPIO_PIN_RESET);
 8001e32:	4f2f      	ldr	r7, [pc, #188]	; (8001ef0 <MX_GPIO_Init+0xdc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e34:	f042 0204 	orr.w	r2, r2, #4
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
 8001e3a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e3c:	f002 0204 	and.w	r2, r2, #4
 8001e40:	9200      	str	r2, [sp, #0]
 8001e42:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e44:	9401      	str	r4, [sp, #4]
 8001e46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e48:	f042 0201 	orr.w	r2, r2, #1
 8001e4c:	631a      	str	r2, [r3, #48]	; 0x30
 8001e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e50:	f002 0201 	and.w	r2, r2, #1
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e58:	9402      	str	r4, [sp, #8]
 8001e5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e5c:	f042 0202 	orr.w	r2, r2, #2
 8001e60:	631a      	str	r2, [r3, #48]	; 0x30
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, ADS983_SPI1_FS_Pin|BATCH_DONE_Pin|BAR_LED6_Pin|BAR_LED5_Pin
 8001e6a:	4622      	mov	r2, r4
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	f649 31c1 	movw	r1, #39873	; 0x9bc1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e72:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOC, ADS983_SPI1_FS_Pin|BATCH_DONE_Pin|BAR_LED6_Pin|BAR_LED5_Pin
 8001e74:	f001 fb0e 	bl	8003494 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SWIPE_NEXT_Pin|RELAY_SIG0_Pin|RELAY_SIG1_Pin|RELAY_SIG2_Pin
 8001e78:	4622      	mov	r2, r4
 8001e7a:	4640      	mov	r0, r8
 8001e7c:	f24f 0101 	movw	r1, #61441	; 0xf001
 8001e80:	f001 fb08 	bl	8003494 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, BAR_LED2_Pin|BAR_LED1_Pin|BAR_LED0_Pin, GPIO_PIN_RESET);
 8001e84:	4622      	mov	r2, r4
 8001e86:	4638      	mov	r0, r7
 8001e88:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8001e8c:	f001 fb02 	bl	8003494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 8001e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e94:	a903      	add	r1, sp, #12
 8001e96:	4630      	mov	r0, r6

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PC11 PC12 */
  GPIO_InitStruct.Pin = ADS983_SPI1_FS_Pin|BATCH_DONE_Pin|BAR_LED6_Pin|BAR_LED5_Pin
                          |BAR_LED4_Pin|BAR_LED3_Pin|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2501      	movs	r5, #1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e9a:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ea0:	f001 fa24 	bl	80032ec <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ea4:	f649 33c1 	movw	r3, #39873	; 0x9bc1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea8:	a903      	add	r1, sp, #12
 8001eaa:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb4:	f001 fa1a 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SWIPE_NEXT_Pin|RELAY_SIG0_Pin|RELAY_SIG1_Pin|RELAY_SIG2_Pin
 8001eb8:	f24f 0301 	movw	r3, #61441	; 0xf001
                          |BAR_LED7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ebc:	a903      	add	r1, sp, #12
 8001ebe:	4640      	mov	r0, r8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ec0:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ec8:	f001 fa10 	bl	80032ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BAR_LED2_Pin|BAR_LED1_Pin|BAR_LED0_Pin;
 8001ecc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	a903      	add	r1, sp, #12
 8001ed2:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	e9cd 3503 	strd	r3, r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001edc:	f001 fa06 	bl	80032ec <HAL_GPIO_Init>

}
 8001ee0:	b008      	add	sp, #32
 8001ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020800 	.word	0x40020800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400

08001ef8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ef8:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001efa:	480b      	ldr	r0, [pc, #44]	; (8001f28 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <MX_I2C1_Init+0x34>)
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <MX_I2C1_Init+0x38>)
 8001f00:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f04:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001f0a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f0e:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f12:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f16:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f18:	f001 faca 	bl	80034b0 <HAL_I2C_Init>
 8001f1c:	b118      	cbz	r0, 8001f26 <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001f22:	f000 b8f1 	b.w	8002108 <Error_Handler>
}
 8001f26:	bd08      	pop	{r3, pc}
 8001f28:	20007928 	.word	0x20007928
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001f34:	b530      	push	{r4, r5, lr}
 8001f36:	4604      	mov	r4, r0
 8001f38:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3a:	2214      	movs	r2, #20
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	a803      	add	r0, sp, #12
 8001f40:	f003 fd64 	bl	8005a0c <memset>
  if(i2cHandle->Instance==I2C1)
 8001f44:	6822      	ldr	r2, [r4, #0]
 8001f46:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <HAL_I2C_MspInit+0x60>)
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d121      	bne.n	8001f90 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4c:	4c12      	ldr	r4, [pc, #72]	; (8001f98 <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f4e:	4813      	ldr	r0, [pc, #76]	; (8001f9c <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f50:	2500      	movs	r5, #0
 8001f52:	9501      	str	r5, [sp, #4]
 8001f54:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8001f5c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f66:	22c0      	movs	r2, #192	; 0xc0
 8001f68:	2312      	movs	r3, #18
 8001f6a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f6e:	2103      	movs	r1, #3
 8001f70:	2304      	movs	r3, #4
 8001f72:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f76:	a903      	add	r1, sp, #12
 8001f78:	f001 f9b8 	bl	80032ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f7c:	9502      	str	r5, [sp, #8]
 8001f7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f84:	6423      	str	r3, [r4, #64]	; 0x40
 8001f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	9302      	str	r3, [sp, #8]
 8001f8e:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001f90:	b009      	add	sp, #36	; 0x24
 8001f92:	bd30      	pop	{r4, r5, pc}
 8001f94:	40005400 	.word	0x40005400
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	40020400 	.word	0x40020400

08001fa0 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001fa0:	b507      	push	{r0, r1, r2, lr}
  if (ch == '\n') {
 8001fa2:	280a      	cmp	r0, #10
int __io_putchar(int ch) {
 8001fa4:	9001      	str	r0, [sp, #4]
  if (ch == '\n') {
 8001fa6:	d102      	bne.n	8001fae <__io_putchar+0xe>
    __io_putchar('\r');
 8001fa8:	200d      	movs	r0, #13
 8001faa:	f7ff fff9 	bl	8001fa0 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	a901      	add	r1, sp, #4
 8001fb6:	4803      	ldr	r0, [pc, #12]	; (8001fc4 <__io_putchar+0x24>)
 8001fb8:	f002 fafe 	bl	80045b8 <HAL_UART_Transmit>
  return 1;
}
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	b003      	add	sp, #12
 8001fc0:	f85d fb04 	ldr.w	pc, [sp], #4
 8001fc4:	20007bf4 	.word	0x20007bf4

08001fc8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
  if (htim == &htim7) {
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0xc>)
 8001fca:	4283      	cmp	r3, r0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_TIM_PeriodElapsedCallback+0xa>
	  //1ms timer
	  ASD_CORE_updateGeneral();
 8001fce:	f7ff ba53 	b.w	8001478 <ASD_CORE_updateGeneral>
  }
}
 8001fd2:	4770      	bx	lr
 8001fd4:	20007b68 	.word	0x20007b68

08001fd8 <HAL_ADC_ConvCpltCallback>:
		ASD_CORE_processSignal();
		ASD_CORE_render();
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle) {
 8001fd8:	b508      	push	{r3, lr}
	if(AdcHandle == &hadc1) {
 8001fda:	4b05      	ldr	r3, [pc, #20]	; (8001ff0 <HAL_ADC_ConvCpltCallback+0x18>)
 8001fdc:	4283      	cmp	r3, r0
 8001fde:	d105      	bne.n	8001fec <HAL_ADC_ConvCpltCallback+0x14>
		ASD_CORE_processSignal();
 8001fe0:	f7ff fa50 	bl	8001484 <ASD_CORE_processSignal>
		ASD_CORE_render();
	}
}
 8001fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		ASD_CORE_render();
 8001fe8:	f7ff badc 	b.w	80015a4 <ASD_CORE_render>
}
 8001fec:	bd08      	pop	{r3, pc}
 8001fee:	bf00      	nop
 8001ff0:	2000780c 	.word	0x2000780c

08001ff4 <HAL_ADC_ConvHalfCpltCallback>:
 8001ff4:	f7ff bff0 	b.w	8001fd8 <HAL_ADC_ConvCpltCallback>

08001ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ff8:	b510      	push	{r4, lr}
 8001ffa:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ffc:	2214      	movs	r2, #20
 8001ffe:	2100      	movs	r1, #0
 8002000:	a808      	add	r0, sp, #32
 8002002:	f003 fd03 	bl	8005a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002006:	2214      	movs	r2, #20
 8002008:	2100      	movs	r1, #0
 800200a:	a802      	add	r0, sp, #8
 800200c:	f003 fcfe 	bl	8005a0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <SystemClock_Config+0x9c>)
 8002012:	2200      	movs	r2, #0
 8002014:	9200      	str	r2, [sp, #0]
 8002016:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002018:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800201c:	6419      	str	r1, [r3, #64]	; 0x40
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002020:	491d      	ldr	r1, [pc, #116]	; (8002098 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800202a:	9201      	str	r2, [sp, #4]
 800202c:	680b      	ldr	r3, [r1, #0]
 800202e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002032:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002036:	600b      	str	r3, [r1, #0]
 8002038:	680b      	ldr	r3, [r1, #0]
 800203a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800203e:	9301      	str	r3, [sp, #4]
 8002040:	9b01      	ldr	r3, [sp, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002042:	2101      	movs	r1, #1
 8002044:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 104;
 8002046:	2008      	movs	r0, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002048:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 104;
 800204c:	2368      	movs	r3, #104	; 0x68
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800204e:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 104;
 8002050:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002054:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002056:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800205a:	e9cd 4411 	strd	r4, r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800205e:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002060:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002062:	f001 fbd1 	bl	8003808 <HAL_RCC_OscConfig>
 8002066:	b108      	cbz	r0, 800206c <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002068:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800206a:	e7fe      	b.n	800206a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800206c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800206e:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002072:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002074:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8002078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800207c:	2103      	movs	r1, #3
 800207e:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002080:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002084:	f001 fabc 	bl	8003600 <HAL_RCC_ClockConfig>
 8002088:	b108      	cbz	r0, 800208e <SystemClock_Config+0x96>
 800208a:	b672      	cpsid	i
  while (1)
 800208c:	e7fe      	b.n	800208c <SystemClock_Config+0x94>
}
 800208e:	b014      	add	sp, #80	; 0x50
 8002090:	bd10      	pop	{r4, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000

0800209c <main>:
{
 800209c:	b508      	push	{r3, lr}
  HAL_Init();
 800209e:	f000 fb89 	bl	80027b4 <HAL_Init>
  SystemClock_Config();
 80020a2:	f7ff ffa9 	bl	8001ff8 <SystemClock_Config>
  MX_GPIO_Init();
 80020a6:	f7ff feb5 	bl	8001e14 <MX_GPIO_Init>
  MX_DMA_Init();
 80020aa:	f7ff fe7f 	bl	8001dac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80020ae:	f000 faaf 	bl	8002610 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80020b2:	f7ff fd83 	bl	8001bbc <MX_ADC1_Init>
  MX_TIM6_Init();
 80020b6:	f000 f9dd 	bl	8002474 <MX_TIM6_Init>
  MX_TIM7_Init();
 80020ba:	f000 f9fd 	bl	80024b8 <MX_TIM7_Init>
  MX_DAC_Init();
 80020be:	f7ff fe03 	bl	8001cc8 <MX_DAC_Init>
  MX_TIM2_Init();
 80020c2:	f000 f9a3 	bl	800240c <MX_TIM2_Init>
  MX_SPI2_Init();
 80020c6:	f000 f843 	bl	8002150 <MX_SPI2_Init>
  MX_TIM10_Init();
 80020ca:	f000 fa17 	bl	80024fc <MX_TIM10_Init>
  MX_I2C1_Init();
 80020ce:	f7ff ff13 	bl	8001ef8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80020d2:	f000 f81b 	bl	800210c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80020d6:	f000 fa7f 	bl	80025d8 <MX_USART1_UART_Init>
  HAL_Delay(1000);
 80020da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020de:	f000 fb95 	bl	800280c <HAL_Delay>
  ASD_CORE_init();
 80020e2:	f7ff fa79 	bl	80015d8 <ASD_CORE_init>
  ASD_CORE_setSwipe(0);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7ff fa5e 	bl	80015a8 <ASD_CORE_setSwipe>
  ASD_CORE_selectSignalSource(SOURCE_AUX);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff fa61 	bl	80015b4 <ASD_CORE_selectSignalSource>
  ASD_CORE_attachAnimation(ASD_Animation_flame);
 80020f2:	4803      	ldr	r0, [pc, #12]	; (8002100 <main+0x64>)
 80020f4:	f7ff fa60 	bl	80015b8 <ASD_CORE_attachAnimation>
  printf("Loop started\n");
 80020f8:	4802      	ldr	r0, [pc, #8]	; (8002104 <main+0x68>)
 80020fa:	f004 f967 	bl	80063cc <puts>
  while (1)
 80020fe:	e7fe      	b.n	80020fe <main+0x62>
 8002100:	08001161 	.word	0x08001161
 8002104:	0800a390 	.word	0x0800a390

08002108 <Error_Handler>:
 8002108:	b672      	cpsid	i
  while (1)
 800210a:	e7fe      	b.n	800210a <Error_Handler+0x2>

0800210c <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800210c:	480e      	ldr	r0, [pc, #56]	; (8002148 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800210e:	4a0f      	ldr	r2, [pc, #60]	; (800214c <MX_SPI1_Init+0x40>)
{
 8002110:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002112:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002116:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800211a:	2300      	movs	r3, #0
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800211c:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002120:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002124:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002128:	e9c0 2306 	strd	r2, r3, [r0, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800212c:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002130:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002132:	230a      	movs	r3, #10
 8002134:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002136:	f001 fdaf 	bl	8003c98 <HAL_SPI_Init>
 800213a:	b118      	cbz	r0, 8002144 <MX_SPI1_Init+0x38>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800213c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002140:	f7ff bfe2 	b.w	8002108 <Error_Handler>
}
 8002144:	bd08      	pop	{r3, pc}
 8002146:	bf00      	nop
 8002148:	200079dc 	.word	0x200079dc
 800214c:	40013000 	.word	0x40013000

08002150 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002150:	480e      	ldr	r0, [pc, #56]	; (800218c <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002152:	4a0f      	ldr	r2, [pc, #60]	; (8002190 <MX_SPI2_Init+0x40>)
{
 8002154:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002156:	f44f 7382 	mov.w	r3, #260	; 0x104
 800215a:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800215e:	2300      	movs	r3, #0
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002160:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002164:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.NSS = SPI_NSS_SOFT;
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002168:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800216c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002170:	2210      	movs	r2, #16
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002172:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002174:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002176:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 800217a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800217c:	f001 fd8c 	bl	8003c98 <HAL_SPI_Init>
 8002180:	b118      	cbz	r0, 800218a <MX_SPI2_Init+0x3a>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002182:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002186:	f7ff bfbf 	b.w	8002108 <Error_Handler>
}
 800218a:	bd08      	pop	{r3, pc}
 800218c:	20007a34 	.word	0x20007a34
 8002190:	40003800 	.word	0x40003800

08002194 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	2214      	movs	r2, #20
{
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	4606      	mov	r6, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219e:	2100      	movs	r1, #0
 80021a0:	eb0d 0002 	add.w	r0, sp, r2
 80021a4:	f003 fc32 	bl	8005a0c <memset>
  if(spiHandle->Instance==SPI1)
 80021a8:	6833      	ldr	r3, [r6, #0]
 80021aa:	4a3d      	ldr	r2, [pc, #244]	; (80022a0 <HAL_SPI_MspInit+0x10c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d124      	bne.n	80021fa <HAL_SPI_MspInit+0x66>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b0:	4b3c      	ldr	r3, [pc, #240]	; (80022a4 <HAL_SPI_MspInit+0x110>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	483d      	ldr	r0, [pc, #244]	; (80022a8 <HAL_SPI_MspInit+0x114>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021b4:	2100      	movs	r1, #0
 80021b6:	9100      	str	r1, [sp, #0]
 80021b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021be:	645a      	str	r2, [r3, #68]	; 0x44
 80021c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021c2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021c6:	9200      	str	r2, [sp, #0]
 80021c8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	9101      	str	r1, [sp, #4]
 80021cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ce:	f042 0201 	orr.w	r2, r2, #1
 80021d2:	631a      	str	r2, [r3, #48]	; 0x30
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	22a0      	movs	r2, #160	; 0xa0
 80021e0:	2302      	movs	r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e2:	2103      	movs	r1, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021e8:	2305      	movs	r3, #5
 80021ea:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	a905      	add	r1, sp, #20
 80021f0:	f001 f87c 	bl	80032ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80021f4:	b00a      	add	sp, #40	; 0x28
 80021f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if(spiHandle->Instance==SPI2)
 80021fa:	4a2c      	ldr	r2, [pc, #176]	; (80022ac <HAL_SPI_MspInit+0x118>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d1f9      	bne.n	80021f4 <HAL_SPI_MspInit+0x60>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002200:	4b28      	ldr	r3, [pc, #160]	; (80022a4 <HAL_SPI_MspInit+0x110>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002202:	482b      	ldr	r0, [pc, #172]	; (80022b0 <HAL_SPI_MspInit+0x11c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002204:	2500      	movs	r5, #0
 8002206:	9502      	str	r5, [sp, #8]
 8002208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800220a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800220e:	641a      	str	r2, [r3, #64]	; 0x40
 8002210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002212:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002216:	9202      	str	r2, [sp, #8]
 8002218:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800221a:	9503      	str	r5, [sp, #12]
 800221c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800221e:	f042 0204 	orr.w	r2, r2, #4
 8002222:	631a      	str	r2, [r3, #48]	; 0x30
 8002224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002226:	f002 0204 	and.w	r2, r2, #4
 800222a:	9203      	str	r2, [sp, #12]
 800222c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800222e:	9504      	str	r5, [sp, #16]
 8002230:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002232:	f042 0202 	orr.w	r2, r2, #2
 8002236:	631a      	str	r2, [r3, #48]	; 0x30
 8002238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002240:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002244:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002246:	2307      	movs	r3, #7
 8002248:	f04f 0803 	mov.w	r8, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224c:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224e:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8002252:	e9cd 8308 	strd	r8, r3, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002256:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800225a:	f001 f847 	bl	80032ec <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800225e:	2305      	movs	r3, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002260:	4814      	ldr	r0, [pc, #80]	; (80022b4 <HAL_SPI_MspInit+0x120>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002262:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002264:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002266:	e9cd 7405 	strd	r7, r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	e9cd 5807 	strd	r5, r8, [sp, #28]
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800226e:	4c12      	ldr	r4, [pc, #72]	; (80022b8 <HAL_SPI_MspInit+0x124>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002270:	f001 f83c 	bl	80032ec <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <HAL_SPI_MspInit+0x128>)
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8002276:	4620      	mov	r0, r4
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8002278:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800227c:	2340      	movs	r3, #64	; 0x40
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800227e:	e9c4 3502 	strd	r3, r5, [r4, #8]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002282:	e9c4 7504 	strd	r7, r5, [r4, #16]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8002286:	e9c4 5506 	strd	r5, r5, [r4, #24]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800228a:	e9c4 5508 	strd	r5, r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800228e:	f000 fe5f 	bl	8002f50 <HAL_DMA_Init>
 8002292:	b108      	cbz	r0, 8002298 <HAL_SPI_MspInit+0x104>
      Error_Handler();
 8002294:	f7ff ff38 	bl	8002108 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8002298:	64b4      	str	r4, [r6, #72]	; 0x48
 800229a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800229c:	e7aa      	b.n	80021f4 <HAL_SPI_MspInit+0x60>
 800229e:	bf00      	nop
 80022a0:	40013000 	.word	0x40013000
 80022a4:	40023800 	.word	0x40023800
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40003800 	.word	0x40003800
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020400 	.word	0x40020400
 80022b8:	2000797c 	.word	0x2000797c
 80022bc:	40026070 	.word	0x40026070

080022c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022c0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022c2:	4b0c      	ldr	r3, [pc, #48]	; (80022f4 <HAL_MspInit+0x34>)
 80022c4:	2100      	movs	r1, #0
 80022c6:	9100      	str	r1, [sp, #0]
 80022c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80022ce:	645a      	str	r2, [r3, #68]	; 0x44
 80022d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022d2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80022d6:	9200      	str	r2, [sp, #0]
 80022d8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022da:	9101      	str	r1, [sp, #4]
 80022dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022de:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ea:	9301      	str	r3, [sp, #4]
 80022ec:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022ee:	b002      	add	sp, #8
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800

080022f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022f8:	e7fe      	b.n	80022f8 <NMI_Handler>

080022fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler>

080022fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022fc:	e7fe      	b.n	80022fc <MemManage_Handler>

080022fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022fe:	e7fe      	b.n	80022fe <BusFault_Handler>

08002300 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <UsageFault_Handler>

08002302 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002302:	4770      	bx	lr

08002304 <DebugMon_Handler>:
 8002304:	4770      	bx	lr

08002306 <PendSV_Handler>:
 8002306:	4770      	bx	lr

08002308 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002308:	f000 ba6e 	b.w	80027e8 <HAL_IncTick>

0800230c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800230c:	4801      	ldr	r0, [pc, #4]	; (8002314 <DMA1_Stream4_IRQHandler+0x8>)
 800230e:	f000 bf2f 	b.w	8003170 <HAL_DMA_IRQHandler>
 8002312:	bf00      	nop
 8002314:	2000797c 	.word	0x2000797c

08002318 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002318:	4801      	ldr	r0, [pc, #4]	; (8002320 <DMA1_Stream5_IRQHandler+0x8>)
 800231a:	f000 bf29 	b.w	8003170 <HAL_DMA_IRQHandler>
 800231e:	bf00      	nop
 8002320:	200078c8 	.word	0x200078c8

08002324 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002324:	4801      	ldr	r0, [pc, #4]	; (800232c <USART2_IRQHandler+0x8>)
 8002326:	f002 b9ff 	b.w	8004728 <HAL_UART_IRQHandler>
 800232a:	bf00      	nop
 800232c:	20007bf4 	.word	0x20007bf4

08002330 <TIM7_IRQHandler>:
void TIM7_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002330:	4801      	ldr	r0, [pc, #4]	; (8002338 <TIM7_IRQHandler+0x8>)
 8002332:	f001 be37 	b.w	8003fa4 <HAL_TIM_IRQHandler>
 8002336:	bf00      	nop
 8002338:	20007b68 	.word	0x20007b68

0800233c <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800233c:	4801      	ldr	r0, [pc, #4]	; (8002344 <DMA2_Stream0_IRQHandler+0x8>)
 800233e:	f000 bf17 	b.w	8003170 <HAL_DMA_IRQHandler>
 8002342:	bf00      	nop
 8002344:	20007854 	.word	0x20007854

08002348 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8002348:	2001      	movs	r0, #1
 800234a:	4770      	bx	lr

0800234c <_kill>:

int _kill(int pid, int sig)
{
 800234c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800234e:	f003 fb25 	bl	800599c <__errno>
 8002352:	2316      	movs	r3, #22
 8002354:	6003      	str	r3, [r0, #0]
	return -1;
}
 8002356:	f04f 30ff 	mov.w	r0, #4294967295
 800235a:	bd08      	pop	{r3, pc}

0800235c <_exit>:

void _exit (int status)
{
 800235c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800235e:	f003 fb1d 	bl	800599c <__errno>
 8002362:	2316      	movs	r3, #22
 8002364:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8002366:	e7fe      	b.n	8002366 <_exit+0xa>

08002368 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002368:	b570      	push	{r4, r5, r6, lr}
 800236a:	460d      	mov	r5, r1
 800236c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800236e:	460e      	mov	r6, r1
 8002370:	1b73      	subs	r3, r6, r5
 8002372:	429c      	cmp	r4, r3
 8002374:	dc01      	bgt.n	800237a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8002376:	4620      	mov	r0, r4
 8002378:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800237a:	f3af 8000 	nop.w
 800237e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002382:	e7f5      	b.n	8002370 <_read+0x8>

08002384 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	460d      	mov	r5, r1
 8002388:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238a:	460e      	mov	r6, r1
 800238c:	1b73      	subs	r3, r6, r5
 800238e:	429c      	cmp	r4, r3
 8002390:	dc01      	bgt.n	8002396 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8002392:	4620      	mov	r0, r4
 8002394:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8002396:	f816 0b01 	ldrb.w	r0, [r6], #1
 800239a:	f7ff fe01 	bl	8001fa0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239e:	e7f5      	b.n	800238c <_write+0x8>

080023a0 <_close>:

int _close(int file)
{
	return -1;
}
 80023a0:	f04f 30ff 	mov.w	r0, #4294967295
 80023a4:	4770      	bx	lr

080023a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80023a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023aa:	604b      	str	r3, [r1, #4]
	return 0;
}
 80023ac:	2000      	movs	r0, #0
 80023ae:	4770      	bx	lr

080023b0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80023b0:	2001      	movs	r0, #1
 80023b2:	4770      	bx	lr

080023b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80023b4:	2000      	movs	r0, #0
 80023b6:	4770      	bx	lr

080023b8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b8:	4a0b      	ldr	r2, [pc, #44]	; (80023e8 <_sbrk+0x30>)
 80023ba:	6811      	ldr	r1, [r2, #0]
{
 80023bc:	b510      	push	{r4, lr}
 80023be:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80023c0:	b909      	cbnz	r1, 80023c6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80023c2:	490a      	ldr	r1, [pc, #40]	; (80023ec <_sbrk+0x34>)
 80023c4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023c6:	6810      	ldr	r0, [r2, #0]
 80023c8:	4909      	ldr	r1, [pc, #36]	; (80023f0 <_sbrk+0x38>)
 80023ca:	4c0a      	ldr	r4, [pc, #40]	; (80023f4 <_sbrk+0x3c>)
 80023cc:	4403      	add	r3, r0
 80023ce:	1b09      	subs	r1, r1, r4
 80023d0:	428b      	cmp	r3, r1
 80023d2:	d906      	bls.n	80023e2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80023d4:	f003 fae2 	bl	800599c <__errno>
 80023d8:	230c      	movs	r3, #12
 80023da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80023e0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80023e2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80023e4:	e7fc      	b.n	80023e0 <_sbrk+0x28>
 80023e6:	bf00      	nop
 80023e8:	20007a8c 	.word	0x20007a8c
 80023ec:	20007c50 	.word	0x20007c50
 80023f0:	20020000 	.word	0x20020000
 80023f4:	00000400 	.word	0x00000400

080023f8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023f8:	4a03      	ldr	r2, [pc, #12]	; (8002408 <SystemInit+0x10>)
 80023fa:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023fe:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002402:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800240c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800240e:	2210      	movs	r2, #16
 8002410:	2100      	movs	r1, #0
 8002412:	a802      	add	r0, sp, #8
 8002414:	f003 fafa 	bl	8005a0c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002418:	4814      	ldr	r0, [pc, #80]	; (800246c <MX_TIM2_Init+0x60>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800241a:	2300      	movs	r3, #0
  htim2.Instance = TIM2;
 800241c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 0;
 8002420:	e9c0 2300 	strd	r2, r3, [r0]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 203125-1;
 8002424:	4a12      	ldr	r2, [pc, #72]	; (8002470 <MX_TIM2_Init+0x64>)
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	6083      	str	r3, [r0, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002428:	e9cd 3300 	strd	r3, r3, [sp]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800242c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002430:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002432:	f001 febf 	bl	80041b4 <HAL_TIM_Base_Init>
 8002436:	b108      	cbz	r0, 800243c <MX_TIM2_Init+0x30>
  {
    Error_Handler();
 8002438:	f7ff fe66 	bl	8002108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800243c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002440:	480a      	ldr	r0, [pc, #40]	; (800246c <MX_TIM2_Init+0x60>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002442:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002444:	a902      	add	r1, sp, #8
 8002446:	f001 feeb 	bl	8004220 <HAL_TIM_ConfigClockSource>
 800244a:	b108      	cbz	r0, 8002450 <MX_TIM2_Init+0x44>
  {
    Error_Handler();
 800244c:	f7ff fe5c 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002450:	2220      	movs	r2, #32
 8002452:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002454:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_TIM2_Init+0x60>)
 8002456:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002458:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800245c:	f001 ff7c 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 8002460:	b108      	cbz	r0, 8002466 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8002462:	f7ff fe51 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002466:	b007      	add	sp, #28
 8002468:	f85d fb04 	ldr.w	pc, [sp], #4
 800246c:	20007ad8 	.word	0x20007ad8
 8002470:	00031974 	.word	0x00031974

08002474 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002474:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 90-1;
 8002476:	4a0e      	ldr	r2, [pc, #56]	; (80024b0 <MX_TIM6_Init+0x3c>)
  htim6.Instance = TIM6;
 8002478:	480e      	ldr	r0, [pc, #56]	; (80024b4 <MX_TIM6_Init+0x40>)
  htim6.Init.Prescaler = 90-1;
 800247a:	2359      	movs	r3, #89	; 0x59
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	2400      	movs	r4, #0
  htim6.Init.Prescaler = 90-1;
 800247e:	e9c0 2300 	strd	r2, r3, [r0]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
 8002482:	f64f 73ff 	movw	r3, #65535	; 0xffff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002486:	e9cd 4400 	strd	r4, r4, [sp]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800248a:	6084      	str	r4, [r0, #8]
  htim6.Init.Period = 65535;
 800248c:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800248e:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002490:	f001 fe90 	bl	80041b4 <HAL_TIM_Base_Init>
 8002494:	b108      	cbz	r0, 800249a <MX_TIM6_Init+0x26>
  {
    Error_Handler();
 8002496:	f7ff fe37 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800249a:	4806      	ldr	r0, [pc, #24]	; (80024b4 <MX_TIM6_Init+0x40>)
 800249c:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800249e:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80024a2:	f001 ff59 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 80024a6:	b108      	cbz	r0, 80024ac <MX_TIM6_Init+0x38>
  {
    Error_Handler();
 80024a8:	f7ff fe2e 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024ac:	b002      	add	sp, #8
 80024ae:	bd10      	pop	{r4, pc}
 80024b0:	40001000 	.word	0x40001000
 80024b4:	20007b20 	.word	0x20007b20

080024b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80024b8:	b513      	push	{r0, r1, r4, lr}

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 520-1;
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <MX_TIM7_Init+0x3c>)
  htim7.Instance = TIM7;
 80024bc:	480e      	ldr	r0, [pc, #56]	; (80024f8 <MX_TIM7_Init+0x40>)
  htim7.Init.Prescaler = 520-1;
 80024be:	f240 2307 	movw	r3, #519	; 0x207
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c2:	2400      	movs	r4, #0
  htim7.Init.Prescaler = 520-1;
 80024c4:	e9c0 2300 	strd	r2, r3, [r0]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 100-1;
 80024c8:	2363      	movs	r3, #99	; 0x63
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ca:	e9cd 4400 	strd	r4, r4, [sp]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ce:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 100-1;
 80024d0:	60c3      	str	r3, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d2:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80024d4:	f001 fe6e 	bl	80041b4 <HAL_TIM_Base_Init>
 80024d8:	b108      	cbz	r0, 80024de <MX_TIM7_Init+0x26>
  {
    Error_Handler();
 80024da:	f7ff fe15 	bl	8002108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <MX_TIM7_Init+0x40>)
 80024e0:	4669      	mov	r1, sp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e2:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80024e6:	f001 ff37 	bl	8004358 <HAL_TIMEx_MasterConfigSynchronization>
 80024ea:	b108      	cbz	r0, 80024f0 <MX_TIM7_Init+0x38>
  {
    Error_Handler();
 80024ec:	f7ff fe0c 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80024f0:	b002      	add	sp, #8
 80024f2:	bd10      	pop	{r4, pc}
 80024f4:	40001400 	.word	0x40001400
 80024f8:	20007b68 	.word	0x20007b68

080024fc <MX_TIM10_Init>:
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80024fc:	4809      	ldr	r0, [pc, #36]	; (8002524 <MX_TIM10_Init+0x28>)
  htim10.Init.Prescaler = 0;
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <MX_TIM10_Init+0x2c>)
{
 8002500:	b508      	push	{r3, lr}
  htim10.Init.Prescaler = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	e9c0 2300 	strd	r2, r3, [r0]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim10.Init.Period = 65535;
 8002508:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250c:	e9c0 2303 	strd	r2, r3, [r0, #12]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	6083      	str	r3, [r0, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002512:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002514:	f001 fe4e 	bl	80041b4 <HAL_TIM_Base_Init>
 8002518:	b118      	cbz	r0, 8002522 <MX_TIM10_Init+0x26>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800251a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800251e:	f7ff bdf3 	b.w	8002108 <Error_Handler>
}
 8002522:	bd08      	pop	{r3, pc}
 8002524:	20007a90 	.word	0x20007a90
 8002528:	40014400 	.word	0x40014400

0800252c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800252c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(tim_baseHandle->Instance==TIM2)
 800252e:	6803      	ldr	r3, [r0, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d10e      	bne.n	8002554 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	4b23      	ldr	r3, [pc, #140]	; (80025c8 <HAL_TIM_Base_MspInit+0x9c>)
 800253c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	641a      	str	r2, [r3, #64]	; 0x40
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800254e:	b005      	add	sp, #20
 8002550:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(tim_baseHandle->Instance==TIM6)
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <HAL_TIM_Base_MspInit+0xa0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10c      	bne.n	8002574 <HAL_TIM_Base_MspInit+0x48>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	9301      	str	r3, [sp, #4]
 800255e:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_TIM_Base_MspInit+0x9c>)
 8002560:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002562:	f042 0210 	orr.w	r2, r2, #16
 8002566:	641a      	str	r2, [r3, #64]	; 0x40
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 0310 	and.w	r3, r3, #16
 800256e:	9301      	str	r3, [sp, #4]
 8002570:	9b01      	ldr	r3, [sp, #4]
 8002572:	e7ec      	b.n	800254e <HAL_TIM_Base_MspInit+0x22>
  else if(tim_baseHandle->Instance==TIM7)
 8002574:	4a16      	ldr	r2, [pc, #88]	; (80025d0 <HAL_TIM_Base_MspInit+0xa4>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d115      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_TIM_Base_MspInit+0x9c>)
 800257c:	2200      	movs	r2, #0
 800257e:	9202      	str	r2, [sp, #8]
 8002580:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002582:	f041 0120 	orr.w	r1, r1, #32
 8002586:	6419      	str	r1, [r3, #64]	; 0x40
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	9302      	str	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002590:	2101      	movs	r1, #1
 8002592:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002594:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8002596:	f000 fb93 	bl	8002cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800259a:	2037      	movs	r0, #55	; 0x37
}
 800259c:	b005      	add	sp, #20
 800259e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025a2:	f000 bbbf 	b.w	8002d24 <HAL_NVIC_EnableIRQ>
  else if(tim_baseHandle->Instance==TIM10)
 80025a6:	4a0b      	ldr	r2, [pc, #44]	; (80025d4 <HAL_TIM_Base_MspInit+0xa8>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d1d0      	bne.n	800254e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	9303      	str	r3, [sp, #12]
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_TIM_Base_MspInit+0x9c>)
 80025b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
 80025ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	9303      	str	r3, [sp, #12]
 80025c2:	9b03      	ldr	r3, [sp, #12]
}
 80025c4:	e7c3      	b.n	800254e <HAL_TIM_Base_MspInit+0x22>
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40001000 	.word	0x40001000
 80025d0:	40001400 	.word	0x40001400
 80025d4:	40014400 	.word	0x40014400

080025d8 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025d8:	480b      	ldr	r0, [pc, #44]	; (8002608 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80025da:	4a0c      	ldr	r2, [pc, #48]	; (800260c <MX_USART1_UART_Init+0x34>)
{
 80025dc:	b508      	push	{r3, lr}
  huart1.Init.BaudRate = 115200;
 80025de:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80025e2:	e9c0 2300 	strd	r2, r3, [r0]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	2300      	movs	r3, #0
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80025e8:	220c      	movs	r2, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
 80025ea:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ee:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart1.Init.Parity = UART_PARITY_NONE;
 80025f2:	6103      	str	r3, [r0, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f4:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80025f6:	f001 ffb1 	bl	800455c <HAL_UART_Init>
 80025fa:	b118      	cbz	r0, 8002604 <MX_USART1_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002600:	f7ff bd82 	b.w	8002108 <Error_Handler>
}
 8002604:	bd08      	pop	{r3, pc}
 8002606:	bf00      	nop
 8002608:	20007bb0 	.word	0x20007bb0
 800260c:	40011000 	.word	0x40011000

08002610 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002610:	480b      	ldr	r0, [pc, #44]	; (8002640 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8002612:	4a0c      	ldr	r2, [pc, #48]	; (8002644 <MX_USART2_UART_Init+0x34>)
{
 8002614:	b508      	push	{r3, lr}
  huart2.Init.BaudRate = 115200;
 8002616:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800261a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800261e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002620:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002622:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002626:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800262a:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800262c:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800262e:	f001 ff95 	bl	800455c <HAL_UART_Init>
 8002632:	b118      	cbz	r0, 800263c <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002634:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8002638:	f7ff bd66 	b.w	8002108 <Error_Handler>
}
 800263c:	bd08      	pop	{r3, pc}
 800263e:	bf00      	nop
 8002640:	20007bf4 	.word	0x20007bf4
 8002644:	40004400 	.word	0x40004400

08002648 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002648:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264a:	2214      	movs	r2, #20
{
 800264c:	b08a      	sub	sp, #40	; 0x28
 800264e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002650:	2100      	movs	r1, #0
 8002652:	eb0d 0002 	add.w	r0, sp, r2
 8002656:	f003 f9d9 	bl	8005a0c <memset>
  if(uartHandle->Instance==USART1)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	4a2a      	ldr	r2, [pc, #168]	; (8002708 <HAL_UART_MspInit+0xc0>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d124      	bne.n	80026ac <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002662:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_UART_MspInit+0xc4>)
 8002664:	2100      	movs	r1, #0
 8002666:	9101      	str	r1, [sp, #4]
 8002668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800266a:	f042 0210 	orr.w	r2, r2, #16
 800266e:	645a      	str	r2, [r3, #68]	; 0x44
 8002670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002672:	f002 0210 	and.w	r2, r2, #16
 8002676:	9201      	str	r2, [sp, #4]
 8002678:	9a01      	ldr	r2, [sp, #4]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	9102      	str	r1, [sp, #8]
 800267c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800267e:	f042 0201 	orr.w	r2, r2, #1
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	9302      	str	r3, [sp, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	f44f 60c0 	mov.w	r0, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	e9cd 0305 	strd	r0, r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002698:	2403      	movs	r4, #3
 800269a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269c:	481c      	ldr	r0, [pc, #112]	; (8002710 <HAL_UART_MspInit+0xc8>)
 800269e:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a0:	e9cd 4308 	strd	r4, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026a4:	f000 fe22 	bl	80032ec <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80026a8:	b00a      	add	sp, #40	; 0x28
 80026aa:	bd10      	pop	{r4, pc}
  else if(uartHandle->Instance==USART2)
 80026ac:	4a19      	ldr	r2, [pc, #100]	; (8002714 <HAL_UART_MspInit+0xcc>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d1fa      	bne.n	80026a8 <HAL_UART_MspInit+0x60>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b2:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_UART_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b4:	4816      	ldr	r0, [pc, #88]	; (8002710 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80026b6:	2400      	movs	r4, #0
 80026b8:	9403      	str	r4, [sp, #12]
 80026ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
 80026c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80026c8:	9203      	str	r2, [sp, #12]
 80026ca:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026cc:	9404      	str	r4, [sp, #16]
 80026ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026d0:	f042 0201 	orr.w	r2, r2, #1
 80026d4:	631a      	str	r2, [r3, #48]	; 0x30
 80026d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	9304      	str	r3, [sp, #16]
 80026de:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e0:	220c      	movs	r2, #12
 80026e2:	2302      	movs	r3, #2
 80026e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026e8:	2103      	movs	r1, #3
 80026ea:	2307      	movs	r3, #7
 80026ec:	e9cd 1308 	strd	r1, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	a905      	add	r1, sp, #20
 80026f2:	f000 fdfb 	bl	80032ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80026f6:	4622      	mov	r2, r4
 80026f8:	4621      	mov	r1, r4
 80026fa:	2026      	movs	r0, #38	; 0x26
 80026fc:	f000 fae0 	bl	8002cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002700:	2026      	movs	r0, #38	; 0x26
 8002702:	f000 fb0f 	bl	8002d24 <HAL_NVIC_EnableIRQ>
}
 8002706:	e7cf      	b.n	80026a8 <HAL_UART_MspInit+0x60>
 8002708:	40011000 	.word	0x40011000
 800270c:	40023800 	.word	0x40023800
 8002710:	40020000 	.word	0x40020000
 8002714:	40004400 	.word	0x40004400

08002718 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002718:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002750 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800271c:	480d      	ldr	r0, [pc, #52]	; (8002754 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800271e:	490e      	ldr	r1, [pc, #56]	; (8002758 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002720:	4a0e      	ldr	r2, [pc, #56]	; (800275c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002724:	e002      	b.n	800272c <LoopCopyDataInit>

08002726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800272a:	3304      	adds	r3, #4

0800272c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800272c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002730:	d3f9      	bcc.n	8002726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002732:	4a0b      	ldr	r2, [pc, #44]	; (8002760 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002734:	4c0b      	ldr	r4, [pc, #44]	; (8002764 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002738:	e001      	b.n	800273e <LoopFillZerobss>

0800273a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800273a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800273c:	3204      	adds	r2, #4

0800273e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002740:	d3fb      	bcc.n	800273a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002742:	f7ff fe59 	bl	80023f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002746:	f003 f92f 	bl	80059a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800274a:	f7ff fca7 	bl	800209c <main>
  bx  lr    
 800274e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002758:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 800275c:	0800d5cc 	.word	0x0800d5cc
  ldr r2, =_sbss
 8002760:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8002764:	20007c4c 	.word	0x20007c4c

08002768 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002768:	e7fe      	b.n	8002768 <ADC_IRQHandler>
	...

0800276c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800276e:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <HAL_InitTick+0x3c>)
 8002770:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_InitTick+0x40>)
{
 8002772:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002774:	7818      	ldrb	r0, [r3, #0]
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f0 	udiv	r3, r3, r0
 800277e:	6810      	ldr	r0, [r2, #0]
 8002780:	fbb0 f0f3 	udiv	r0, r0, r3
 8002784:	f000 fadc 	bl	8002d40 <HAL_SYSTICK_Config>
 8002788:	4604      	mov	r4, r0
 800278a:	b958      	cbnz	r0, 80027a4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800278c:	2d0f      	cmp	r5, #15
 800278e:	d809      	bhi.n	80027a4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002790:	4602      	mov	r2, r0
 8002792:	4629      	mov	r1, r5
 8002794:	f04f 30ff 	mov.w	r0, #4294967295
 8002798:	f000 fa92 	bl	8002cc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <HAL_InitTick+0x44>)
 800279e:	4620      	mov	r0, r4
 80027a0:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80027a2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80027a4:	2001      	movs	r0, #1
 80027a6:	e7fc      	b.n	80027a2 <HAL_InitTick+0x36>
 80027a8:	20000010 	.word	0x20000010
 80027ac:	20000014 	.word	0x20000014
 80027b0:	20000018 	.word	0x20000018

080027b4 <HAL_Init>:
{
 80027b4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b6:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_Init+0x30>)
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027be:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027c6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ce:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d0:	2003      	movs	r0, #3
 80027d2:	f000 fa63 	bl	8002c9c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80027d6:	200f      	movs	r0, #15
 80027d8:	f7ff ffc8 	bl	800276c <HAL_InitTick>
  HAL_MspInit();
 80027dc:	f7ff fd70 	bl	80022c0 <HAL_MspInit>
}
 80027e0:	2000      	movs	r0, #0
 80027e2:	bd08      	pop	{r3, pc}
 80027e4:	40023c00 	.word	0x40023c00

080027e8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80027e8:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <HAL_IncTick+0x10>)
 80027ea:	4b04      	ldr	r3, [pc, #16]	; (80027fc <HAL_IncTick+0x14>)
 80027ec:	6811      	ldr	r1, [r2, #0]
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	440b      	add	r3, r1
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20007c38 	.word	0x20007c38
 80027fc:	20000014 	.word	0x20000014

08002800 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8002800:	4b01      	ldr	r3, [pc, #4]	; (8002808 <HAL_GetTick+0x8>)
 8002802:	6818      	ldr	r0, [r3, #0]
}
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20007c38 	.word	0x20007c38

0800280c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800280c:	b538      	push	{r3, r4, r5, lr}
 800280e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002810:	f7ff fff6 	bl	8002800 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002814:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002816:	bf1c      	itt	ne
 8002818:	4b05      	ldrne	r3, [pc, #20]	; (8002830 <HAL_Delay+0x24>)
 800281a:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 800281c:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800281e:	bf18      	it	ne
 8002820:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002822:	f7ff ffed 	bl	8002800 <HAL_GetTick>
 8002826:	1b43      	subs	r3, r0, r5
 8002828:	42a3      	cmp	r3, r4
 800282a:	d3fa      	bcc.n	8002822 <HAL_Delay+0x16>
  {
  }
}
 800282c:	bd38      	pop	{r3, r4, r5, pc}
 800282e:	bf00      	nop
 8002830:	20000014 	.word	0x20000014

08002834 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002834:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002836:	4604      	mov	r4, r0
 8002838:	2800      	cmp	r0, #0
 800283a:	f000 809b 	beq.w	8002974 <HAL_ADC_Init+0x140>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800283e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002840:	b925      	cbnz	r5, 800284c <HAL_ADC_Init+0x18>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002842:	f7ff f9ef 	bl	8001c24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002846:	6465      	str	r5, [r4, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002848:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800284c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800284e:	06db      	lsls	r3, r3, #27
 8002850:	f100 808e 	bmi.w	8002970 <HAL_ADC_Init+0x13c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002854:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002856:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800285a:	f023 0302 	bic.w	r3, r3, #2
 800285e:	f043 0302 	orr.w	r3, r3, #2
 8002862:	6423      	str	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002864:	4b44      	ldr	r3, [pc, #272]	; (8002978 <HAL_ADC_Init+0x144>)
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800286c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	6861      	ldr	r1, [r4, #4]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002876:	6823      	ldr	r3, [r4, #0]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002878:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002880:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002888:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800288a:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800288c:	68a1      	ldr	r1, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800288e:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002892:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002894:	685a      	ldr	r2, [r3, #4]
 8002896:	430a      	orrs	r2, r1
 8002898:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800289a:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800289c:	68e1      	ldr	r1, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800289e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028aa:	4934      	ldr	r1, [pc, #208]	; (800297c <HAL_ADC_Init+0x148>)
 80028ac:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028ae:	428a      	cmp	r2, r1
 80028b0:	d052      	beq.n	8002958 <HAL_ADC_Init+0x124>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b2:	6899      	ldr	r1, [r3, #8]
 80028b4:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 80028b8:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028ba:	6899      	ldr	r1, [r3, #8]
 80028bc:	430a      	orrs	r2, r1
 80028be:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c0:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028ca:	689a      	ldr	r2, [r3, #8]
 80028cc:	430a      	orrs	r2, r1
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028ce:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028d0:	689a      	ldr	r2, [r3, #8]
 80028d2:	f022 0202 	bic.w	r2, r2, #2
 80028d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	7e21      	ldrb	r1, [r4, #24]
 80028dc:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80028e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028e2:	f894 2020 	ldrb.w	r2, [r4, #32]
 80028e6:	2a00      	cmp	r2, #0
 80028e8:	d03e      	beq.n	8002968 <HAL_ADC_Init+0x134>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028ea:	685a      	ldr	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	3901      	subs	r1, #1
 8002900:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002904:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002908:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800290a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	3901      	subs	r1, #1
 8002914:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002918:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002920:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002928:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 800292c:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800292e:	689a      	ldr	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002930:	6961      	ldr	r1, [r4, #20]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002938:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 800293a:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800293c:	ea42 2281 	orr.w	r2, r2, r1, lsl #10
 8002940:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8002942:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002944:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002946:	f023 0303 	bic.w	r3, r3, #3
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002950:	2300      	movs	r3, #0
 8002952:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002956:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800295e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002966:	e7b2      	b.n	80028ce <HAL_ADC_Init+0x9a>
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800296e:	e7c9      	b.n	8002904 <HAL_ADC_Init+0xd0>
    tmp_hal_status = HAL_ERROR;
 8002970:	2001      	movs	r0, #1
 8002972:	e7ed      	b.n	8002950 <HAL_ADC_Init+0x11c>
    return HAL_ERROR;
 8002974:	2001      	movs	r0, #1
 8002976:	e7ee      	b.n	8002956 <HAL_ADC_Init+0x122>
 8002978:	40012300 	.word	0x40012300
 800297c:	0f000001 	.word	0x0f000001

08002980 <HAL_ADC_Start_DMA>:
{
 8002980:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002982:	4613      	mov	r3, r2
  __IO uint32_t counter = 0U;
 8002984:	2200      	movs	r2, #0
 8002986:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002988:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800298c:	2a01      	cmp	r2, #1
{
 800298e:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8002990:	f000 808c 	beq.w	8002aac <HAL_ADC_Start_DMA+0x12c>
 8002994:	2201      	movs	r2, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002996:	6806      	ldr	r6, [r0, #0]
  __HAL_LOCK(hadc);
 8002998:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800299c:	68b2      	ldr	r2, [r6, #8]
 800299e:	07d4      	lsls	r4, r2, #31
 80029a0:	d554      	bpl.n	8002a4c <HAL_ADC_Start_DMA+0xcc>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80029a2:	68b2      	ldr	r2, [r6, #8]
 80029a4:	05d0      	lsls	r0, r2, #23
 80029a6:	d464      	bmi.n	8002a72 <HAL_ADC_Start_DMA+0xf2>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029a8:	68b4      	ldr	r4, [r6, #8]
 80029aa:	f014 0401 	ands.w	r4, r4, #1
 80029ae:	d074      	beq.n	8002a9a <HAL_ADC_Start_DMA+0x11a>
    ADC_STATE_CLR_SET(hadc->State,
 80029b0:	6c28      	ldr	r0, [r5, #64]	; 0x40
 80029b2:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80029b6:	f020 0001 	bic.w	r0, r0, #1
 80029ba:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 80029be:	6428      	str	r0, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029c0:	6872      	ldr	r2, [r6, #4]
 80029c2:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029c4:	bf41      	itttt	mi
 80029c6:	6c28      	ldrmi	r0, [r5, #64]	; 0x40
 80029c8:	f420 5040 	bicmi.w	r0, r0, #12288	; 0x3000
 80029cc:	f440 5080 	orrmi.w	r0, r0, #4096	; 0x1000
 80029d0:	6428      	strmi	r0, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029d4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029d6:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80029da:	bf1c      	itt	ne
 80029dc:	6c6a      	ldrne	r2, [r5, #68]	; 0x44
 80029de:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80029e2:	646a      	str	r2, [r5, #68]	; 0x44
    __HAL_UNLOCK(hadc);   
 80029e4:	2400      	movs	r4, #0
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029e6:	4a33      	ldr	r2, [pc, #204]	; (8002ab4 <HAL_ADC_Start_DMA+0x134>)
    __HAL_UNLOCK(hadc);   
 80029e8:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029ec:	63c2      	str	r2, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029ee:	4a32      	ldr	r2, [pc, #200]	; (8002ab8 <HAL_ADC_Start_DMA+0x138>)
 80029f0:	6402      	str	r2, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029f2:	4a32      	ldr	r2, [pc, #200]	; (8002abc <HAL_ADC_Start_DMA+0x13c>)
 80029f4:	64c2      	str	r2, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80029f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80029fa:	6032      	str	r2, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80029fc:	6872      	ldr	r2, [r6, #4]
 80029fe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002a02:	6072      	str	r2, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002a04:	68b2      	ldr	r2, [r6, #8]
 8002a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a0a:	60b2      	str	r2, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a0c:	460a      	mov	r2, r1
 8002a0e:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 8002a12:	f000 fb1d 	bl	8003050 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a16:	4a2a      	ldr	r2, [pc, #168]	; (8002ac0 <HAL_ADC_Start_DMA+0x140>)
 8002a18:	682b      	ldr	r3, [r5, #0]
 8002a1a:	6850      	ldr	r0, [r2, #4]
 8002a1c:	4929      	ldr	r1, [pc, #164]	; (8002ac4 <HAL_ADC_Start_DMA+0x144>)
 8002a1e:	f010 001f 	ands.w	r0, r0, #31
 8002a22:	d132      	bne.n	8002a8a <HAL_ADC_Start_DMA+0x10a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a24:	428b      	cmp	r3, r1
 8002a26:	d007      	beq.n	8002a38 <HAL_ADC_Start_DMA+0xb8>
 8002a28:	f501 7180 	add.w	r1, r1, #256	; 0x100
 8002a2c:	428b      	cmp	r3, r1
 8002a2e:	d125      	bne.n	8002a7c <HAL_ADC_Start_DMA+0xfc>
 8002a30:	6852      	ldr	r2, [r2, #4]
 8002a32:	f012 0f1f 	tst.w	r2, #31
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a36:	d107      	bne.n	8002a48 <HAL_ADC_Start_DMA+0xc8>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a38:	6898      	ldr	r0, [r3, #8]
 8002a3a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002a3e:	d137      	bne.n	8002ab0 <HAL_ADC_Start_DMA+0x130>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a46:	609a      	str	r2, [r3, #8]
}
 8002a48:	b002      	add	sp, #8
 8002a4a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 8002a4c:	68b2      	ldr	r2, [r6, #8]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	60b2      	str	r2, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a54:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <HAL_ADC_Start_DMA+0x148>)
 8002a56:	6810      	ldr	r0, [r2, #0]
 8002a58:	4a1c      	ldr	r2, [pc, #112]	; (8002acc <HAL_ADC_Start_DMA+0x14c>)
 8002a5a:	fbb0 f0f2 	udiv	r0, r0, r2
 8002a5e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002a62:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8002a64:	9a01      	ldr	r2, [sp, #4]
 8002a66:	2a00      	cmp	r2, #0
 8002a68:	d09b      	beq.n	80029a2 <HAL_ADC_Start_DMA+0x22>
      counter--;
 8002a6a:	9a01      	ldr	r2, [sp, #4]
 8002a6c:	3a01      	subs	r2, #1
 8002a6e:	9201      	str	r2, [sp, #4]
 8002a70:	e7f8      	b.n	8002a64 <HAL_ADC_Start_DMA+0xe4>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a72:	68b2      	ldr	r2, [r6, #8]
 8002a74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a78:	60b2      	str	r2, [r6, #8]
 8002a7a:	e795      	b.n	80029a8 <HAL_ADC_Start_DMA+0x28>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a7c:	4914      	ldr	r1, [pc, #80]	; (8002ad0 <HAL_ADC_Start_DMA+0x150>)
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	d1e2      	bne.n	8002a48 <HAL_ADC_Start_DMA+0xc8>
 8002a82:	6852      	ldr	r2, [r2, #4]
 8002a84:	f012 0f10 	tst.w	r2, #16
 8002a88:	e7d5      	b.n	8002a36 <HAL_ADC_Start_DMA+0xb6>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a8a:	428b      	cmp	r3, r1
 8002a8c:	d110      	bne.n	8002ab0 <HAL_ADC_Start_DMA+0x130>
 8002a8e:	6898      	ldr	r0, [r3, #8]
 8002a90:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8002a94:	d0d4      	beq.n	8002a40 <HAL_ADC_Start_DMA+0xc0>
  return HAL_OK;
 8002a96:	4620      	mov	r0, r4
 8002a98:	e7d6      	b.n	8002a48 <HAL_ADC_Start_DMA+0xc8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a9a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002a9c:	f043 0310 	orr.w	r3, r3, #16
 8002aa0:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aa2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	646b      	str	r3, [r5, #68]	; 0x44
 8002aaa:	e7f4      	b.n	8002a96 <HAL_ADC_Start_DMA+0x116>
  __HAL_LOCK(hadc);
 8002aac:	2002      	movs	r0, #2
 8002aae:	e7cb      	b.n	8002a48 <HAL_ADC_Start_DMA+0xc8>
  return HAL_OK;
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	e7c9      	b.n	8002a48 <HAL_ADC_Start_DMA+0xc8>
 8002ab4:	08002af7 	.word	0x08002af7
 8002ab8:	08002ad5 	.word	0x08002ad5
 8002abc:	08002ae1 	.word	0x08002ae1
 8002ac0:	40012300 	.word	0x40012300
 8002ac4:	40012000 	.word	0x40012000
 8002ac8:	20000010 	.word	0x20000010
 8002acc:	000f4240 	.word	0x000f4240
 8002ad0:	40012200 	.word	0x40012200

08002ad4 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ad4:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ad6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002ad8:	f7ff fa8c 	bl	8001ff4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002adc:	bd08      	pop	{r3, pc}

08002ade <HAL_ADC_ErrorCallback>:
 8002ade:	4770      	bx	lr

08002ae0 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ae0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002ae2:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ae4:	2340      	movs	r3, #64	; 0x40
 8002ae6:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ae8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002aea:	f043 0304 	orr.w	r3, r3, #4
 8002aee:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002af0:	f7ff fff5 	bl	8002ade <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002af4:	bd08      	pop	{r3, pc}

08002af6 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002af6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002afa:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 8002afe:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b02:	d123      	bne.n	8002b4c <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	6891      	ldr	r1, [r2, #8]
 8002b0e:	f011 5f40 	tst.w	r1, #805306368	; 0x30000000
 8002b12:	d117      	bne.n	8002b44 <ADC_DMAConvCplt+0x4e>
 8002b14:	7e19      	ldrb	r1, [r3, #24]
 8002b16:	b9a9      	cbnz	r1, 8002b44 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b18:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b1a:	f411 0f70 	tst.w	r1, #15728640	; 0xf00000
 8002b1e:	d002      	beq.n	8002b26 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b20:	6891      	ldr	r1, [r2, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b22:	0548      	lsls	r0, r1, #21
 8002b24:	d40e      	bmi.n	8002b44 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b26:	6851      	ldr	r1, [r2, #4]
 8002b28:	f021 0120 	bic.w	r1, r1, #32
 8002b2c:	6051      	str	r1, [r2, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b38:	04d1      	lsls	r1, r2, #19
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b3a:	bf5e      	ittt	pl
 8002b3c:	6c1a      	ldrpl	r2, [r3, #64]	; 0x40
 8002b3e:	f042 0201 	orrpl.w	r2, r2, #1
 8002b42:	641a      	strpl	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fa47 	bl	8001fd8 <HAL_ADC_ConvCpltCallback>
}
 8002b4a:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b4c:	06d2      	lsls	r2, r2, #27
 8002b4e:	d503      	bpl.n	8002b58 <ADC_DMAConvCplt+0x62>
      HAL_ADC_ErrorCallback(hadc);
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ffc4 	bl	8002ade <HAL_ADC_ErrorCallback>
 8002b56:	e7f8      	b.n	8002b4a <ADC_DMAConvCplt+0x54>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b60:	4718      	bx	r3
	...

08002b64 <HAL_ADC_ConfigChannel>:
{
 8002b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 8002b6a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d069      	beq.n	8002c46 <HAL_ADC_ConfigChannel+0xe2>
 8002b72:	2301      	movs	r3, #1
 8002b74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b78:	680d      	ldr	r5, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b7a:	6803      	ldr	r3, [r0, #0]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b7c:	688e      	ldr	r6, [r1, #8]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002b7e:	2d09      	cmp	r5, #9
 8002b80:	b2ac      	uxth	r4, r5
 8002b82:	d934      	bls.n	8002bee <HAL_ADC_ConfigChannel+0x8a>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002b84:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8002b88:	68df      	ldr	r7, [r3, #12]
 8002b8a:	3a1e      	subs	r2, #30
 8002b8c:	f04f 0c07 	mov.w	ip, #7
 8002b90:	fa0c fc02 	lsl.w	ip, ip, r2
 8002b94:	ea27 070c 	bic.w	r7, r7, ip
 8002b98:	60df      	str	r7, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002b9a:	68df      	ldr	r7, [r3, #12]
 8002b9c:	fa06 f202 	lsl.w	r2, r6, r2
 8002ba0:	433a      	orrs	r2, r7
 8002ba2:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8002ba4:	6849      	ldr	r1, [r1, #4]
 8002ba6:	2906      	cmp	r1, #6
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ba8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  if (sConfig->Rank < 7U)
 8002bac:	d82f      	bhi.n	8002c0e <HAL_ADC_ConfigChannel+0xaa>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002bae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bb0:	3a05      	subs	r2, #5
 8002bb2:	261f      	movs	r6, #31
 8002bb4:	4096      	lsls	r6, r2
 8002bb6:	ea21 0106 	bic.w	r1, r1, r6
 8002bba:	6359      	str	r1, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002bbc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002bbe:	fa04 f202 	lsl.w	r2, r4, r2
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bc6:	4a30      	ldr	r2, [pc, #192]	; (8002c88 <HAL_ADC_ConfigChannel+0x124>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10a      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x7e>
 8002bcc:	2d12      	cmp	r5, #18
 8002bce:	d13c      	bne.n	8002c4a <HAL_ADC_ConfigChannel+0xe6>
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002bd0:	4b2e      	ldr	r3, [pc, #184]	; (8002c8c <HAL_ADC_ConfigChannel+0x128>)
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8002bd8:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002be0:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8002be2:	2300      	movs	r3, #0
 8002be4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002be8:	4618      	mov	r0, r3
}
 8002bea:	b003      	add	sp, #12
 8002bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002bee:	691f      	ldr	r7, [r3, #16]
 8002bf0:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8002bf4:	f04f 0c07 	mov.w	ip, #7
 8002bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8002bfc:	ea27 070c 	bic.w	r7, r7, ip
 8002c00:	611f      	str	r7, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c02:	691f      	ldr	r7, [r3, #16]
 8002c04:	fa06 f202 	lsl.w	r2, r6, r2
 8002c08:	433a      	orrs	r2, r7
 8002c0a:	611a      	str	r2, [r3, #16]
 8002c0c:	e7ca      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x40>
  else if (sConfig->Rank < 13U)
 8002c0e:	290c      	cmp	r1, #12
 8002c10:	f04f 011f 	mov.w	r1, #31
 8002c14:	d80b      	bhi.n	8002c2e <HAL_ADC_ConfigChannel+0xca>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002c16:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8002c18:	3a23      	subs	r2, #35	; 0x23
 8002c1a:	4091      	lsls	r1, r2
 8002c1c:	ea26 0101 	bic.w	r1, r6, r1
 8002c20:	6319      	str	r1, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002c22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c24:	fa04 f202 	lsl.w	r2, r4, r2
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	631a      	str	r2, [r3, #48]	; 0x30
 8002c2c:	e7cb      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x62>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002c2e:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8002c30:	3a41      	subs	r2, #65	; 0x41
 8002c32:	4091      	lsls	r1, r2
 8002c34:	ea26 0101 	bic.w	r1, r6, r1
 8002c38:	62d9      	str	r1, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c3c:	fa04 f202 	lsl.w	r2, r4, r2
 8002c40:	430a      	orrs	r2, r1
 8002c42:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c44:	e7bf      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8002c46:	2002      	movs	r0, #2
 8002c48:	e7cf      	b.n	8002bea <HAL_ADC_ConfigChannel+0x86>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_ADC_ConfigChannel+0x12c>)
 8002c4c:	429d      	cmp	r5, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_ADC_ConfigChannel+0xf0>
 8002c50:	2d11      	cmp	r5, #17
 8002c52:	d1c6      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x7e>
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_ADC_ConfigChannel+0x128>)
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8002c5c:	605a      	str	r2, [r3, #4]
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c64:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_ADC_ConfigChannel+0x12c>)
 8002c68:	429d      	cmp	r5, r3
 8002c6a:	d1ba      	bne.n	8002be2 <HAL_ADC_ConfigChannel+0x7e>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c6c:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <HAL_ADC_ConfigChannel+0x130>)
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_ADC_ConfigChannel+0x134>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c76:	220a      	movs	r2, #10
 8002c78:	4353      	muls	r3, r2
        counter--;
 8002c7a:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8002c7c:	9b01      	ldr	r3, [sp, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0af      	beq.n	8002be2 <HAL_ADC_ConfigChannel+0x7e>
        counter--;
 8002c82:	9b01      	ldr	r3, [sp, #4]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	e7f8      	b.n	8002c7a <HAL_ADC_ConfigChannel+0x116>
 8002c88:	40012000 	.word	0x40012000
 8002c8c:	40012300 	.word	0x40012300
 8002c90:	10000012 	.word	0x10000012
 8002c94:	20000010 	.word	0x20000010
 8002c98:	000f4240 	.word	0x000f4240

08002c9c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c9c:	4907      	ldr	r1, [pc, #28]	; (8002cbc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002c9e:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ca6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cac:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8002cb8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc0:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cc2:	b530      	push	{r4, r5, lr}
 8002cc4:	68dc      	ldr	r4, [r3, #12]
 8002cc6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cca:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cce:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd0:	2d04      	cmp	r5, #4
 8002cd2:	bf28      	it	cs
 8002cd4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cdc:	bf8c      	ite	hi
 8002cde:	3c03      	subhi	r4, #3
 8002ce0:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce2:	fa03 f505 	lsl.w	r5, r3, r5
 8002ce6:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cea:	40a3      	lsls	r3, r4
 8002cec:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf8:	bfac      	ite	ge
 8002cfa:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	4a08      	ldrlt	r2, [pc, #32]	; (8002d20 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d04:	bfb8      	it	lt
 8002d06:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	bfaa      	itet	ge
 8002d0e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d12:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002d18:	bd30      	pop	{r4, r5, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000ed00 	.word	0xe000ed00
 8002d20:	e000ed14 	.word	0xe000ed14

08002d24 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002d24:	2800      	cmp	r0, #0
 8002d26:	db08      	blt.n	8002d3a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d28:	0942      	lsrs	r2, r0, #5
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f000 001f 	and.w	r0, r0, #31
 8002d30:	fa03 f000 	lsl.w	r0, r3, r0
 8002d34:	4b01      	ldr	r3, [pc, #4]	; (8002d3c <HAL_NVIC_EnableIRQ+0x18>)
 8002d36:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002d3a:	4770      	bx	lr
 8002d3c:	e000e100 	.word	0xe000e100

08002d40 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d40:	3801      	subs	r0, #1
 8002d42:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002d46:	d20b      	bcs.n	8002d60 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d48:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4c:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d4e:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	21f0      	movs	r1, #240	; 0xf0
 8002d52:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d56:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d58:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d5a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d5c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d5e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002d60:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d68:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if (hdac == NULL)
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	b168      	cbz	r0, 8002d8a <HAL_DAC_Init+0x22>
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d6e:	7903      	ldrb	r3, [r0, #4]
 8002d70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d74:	b913      	cbnz	r3, 8002d7c <HAL_DAC_Init+0x14>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d76:	7142      	strb	r2, [r0, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d78:	f7fe ffc4 	bl	8001d04 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d80:	2000      	movs	r0, #0

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002d82:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002d84:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8002d86:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8002d88:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	e7fc      	b.n	8002d88 <HAL_DAC_Init+0x20>
	...

08002d90 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	460d      	mov	r5, r1
 8002d94:	4611      	mov	r1, r2
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002d96:	7942      	ldrb	r2, [r0, #5]
{
 8002d98:	9e06      	ldr	r6, [sp, #24]
  __HAL_LOCK(hdac);
 8002d9a:	2a01      	cmp	r2, #1
{
 8002d9c:	4604      	mov	r4, r0
 8002d9e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hdac);
 8002da2:	d029      	beq.n	8002df8 <HAL_DAC_Start_DMA+0x68>
 8002da4:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002da6:	7120      	strb	r0, [r4, #4]
  __HAL_LOCK(hdac);
 8002da8:	7162      	strb	r2, [r4, #5]

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002daa:	6820      	ldr	r0, [r4, #0]
  if (Channel == DAC_CHANNEL_1)
 8002dac:	bb5d      	cbnz	r5, 8002e06 <HAL_DAC_Start_DMA+0x76>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002dae:	68a2      	ldr	r2, [r4, #8]
 8002db0:	4f28      	ldr	r7, [pc, #160]	; (8002e54 <HAL_DAC_Start_DMA+0xc4>)
 8002db2:	63d7      	str	r7, [r2, #60]	; 0x3c
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002db4:	4f28      	ldr	r7, [pc, #160]	; (8002e58 <HAL_DAC_Start_DMA+0xc8>)
 8002db6:	6417      	str	r7, [r2, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002db8:	4f28      	ldr	r7, [pc, #160]	; (8002e5c <HAL_DAC_Start_DMA+0xcc>)
 8002dba:	64d7      	str	r7, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002dbc:	6802      	ldr	r2, [r0, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002dbe:	2e04      	cmp	r6, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002dc0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dc4:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 8002dc6:	d018      	beq.n	8002dfa <HAL_DAC_Start_DMA+0x6a>
 8002dc8:	2e08      	cmp	r6, #8
 8002dca:	d019      	beq.n	8002e00 <HAL_DAC_Start_DMA+0x70>
 8002dcc:	2e00      	cmp	r6, #0
 8002dce:	d138      	bne.n	8002e42 <HAL_DAC_Start_DMA+0xb2>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002dd0:	f100 0208 	add.w	r2, r0, #8

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002dd4:	6806      	ldr	r6, [r0, #0]
 8002dd6:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8002dda:	6006      	str	r6, [r0, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002ddc:	68a0      	ldr	r0, [r4, #8]
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002dde:	f000 f937 	bl	8003050 <HAL_DMA_Start_IT>
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002de2:	2300      	movs	r3, #0
 8002de4:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 8002de6:	bb80      	cbnz	r0, 8002e4a <HAL_DAC_Start_DMA+0xba>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002de8:	6823      	ldr	r3, [r4, #0]
 8002dea:	f005 0110 	and.w	r1, r5, #16
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	2501      	movs	r5, #1
 8002df2:	408d      	lsls	r5, r1
 8002df4:	4315      	orrs	r5, r2
 8002df6:	601d      	str	r5, [r3, #0]
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
  }

  /* Return function status */
  return status;
}
 8002df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002dfa:	f100 020c 	add.w	r2, r0, #12
        break;
 8002dfe:	e7e9      	b.n	8002dd4 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002e00:	f100 0210 	add.w	r2, r0, #16
        break;
 8002e04:	e7e6      	b.n	8002dd4 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002e06:	68e2      	ldr	r2, [r4, #12]
 8002e08:	4f15      	ldr	r7, [pc, #84]	; (8002e60 <HAL_DAC_Start_DMA+0xd0>)
 8002e0a:	63d7      	str	r7, [r2, #60]	; 0x3c
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002e0c:	4f15      	ldr	r7, [pc, #84]	; (8002e64 <HAL_DAC_Start_DMA+0xd4>)
 8002e0e:	6417      	str	r7, [r2, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002e10:	4f15      	ldr	r7, [pc, #84]	; (8002e68 <HAL_DAC_Start_DMA+0xd8>)
 8002e12:	64d7      	str	r7, [r2, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e14:	6802      	ldr	r2, [r0, #0]
    switch (Alignment)
 8002e16:	2e04      	cmp	r6, #4
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002e18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002e1c:	6002      	str	r2, [r0, #0]
    switch (Alignment)
 8002e1e:	d00a      	beq.n	8002e36 <HAL_DAC_Start_DMA+0xa6>
 8002e20:	2e08      	cmp	r6, #8
 8002e22:	d00b      	beq.n	8002e3c <HAL_DAC_Start_DMA+0xac>
 8002e24:	b97e      	cbnz	r6, 8002e46 <HAL_DAC_Start_DMA+0xb6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002e26:	f100 0214 	add.w	r2, r0, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002e2a:	6806      	ldr	r6, [r0, #0]
 8002e2c:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 8002e30:	6006      	str	r6, [r0, #0]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002e32:	68e0      	ldr	r0, [r4, #12]
 8002e34:	e7d3      	b.n	8002dde <HAL_DAC_Start_DMA+0x4e>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002e36:	f100 0218 	add.w	r2, r0, #24
        break;
 8002e3a:	e7f6      	b.n	8002e2a <HAL_DAC_Start_DMA+0x9a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002e3c:	f100 021c 	add.w	r2, r0, #28
        break;
 8002e40:	e7f3      	b.n	8002e2a <HAL_DAC_Start_DMA+0x9a>
    switch (Alignment)
 8002e42:	462a      	mov	r2, r5
 8002e44:	e7c6      	b.n	8002dd4 <HAL_DAC_Start_DMA+0x44>
    switch (Alignment)
 8002e46:	2200      	movs	r2, #0
 8002e48:	e7ef      	b.n	8002e2a <HAL_DAC_Start_DMA+0x9a>
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e4a:	6923      	ldr	r3, [r4, #16]
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	6123      	str	r3, [r4, #16]
 8002e52:	e7d1      	b.n	8002df8 <HAL_DAC_Start_DMA+0x68>
 8002e54:	08002e6f 	.word	0x08002e6f
 8002e58:	08002e81 	.word	0x08002e81
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002ef1 	.word	0x08002ef1
 8002e64:	08002f01 	.word	0x08002f01
 8002e68:	08002f0b 	.word	0x08002f0b

08002e6c <HAL_DAC_ConvCpltCallbackCh1>:
 8002e6c:	4770      	bx	lr

08002e6e <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e6e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e70:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8002e72:	4620      	mov	r0, r4
 8002e74:	f7ff fffa 	bl	8002e6c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	7123      	strb	r3, [r4, #4]
}
 8002e7c:	bd10      	pop	{r4, pc}

08002e7e <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8002e7e:	4770      	bx	lr

08002e80 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8002e80:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8002e82:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002e84:	f7ff fffb 	bl	8002e7e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002e88:	bd08      	pop	{r3, pc}

08002e8a <HAL_DAC_ErrorCallbackCh1>:
 8002e8a:	4770      	bx	lr

08002e8c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002e8e:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002e90:	6923      	ldr	r3, [r4, #16]
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002e98:	4620      	mov	r0, r4
 8002e9a:	f7ff fff6 	bl	8002e8a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	7123      	strb	r3, [r4, #4]
}
 8002ea2:	bd10      	pop	{r4, pc}

08002ea4 <HAL_DAC_ConfigChannel>:
{
 8002ea4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdac);
 8002ea6:	7943      	ldrb	r3, [r0, #5]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	f04f 0302 	mov.w	r3, #2
 8002eae:	d01a      	beq.n	8002ee6 <HAL_DAC_ConfigChannel+0x42>
  tmpreg1 = hdac->Instance->CR;
 8002eb0:	6804      	ldr	r4, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eb2:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8002eb4:	6823      	ldr	r3, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002eb6:	f002 0210 	and.w	r2, r2, #16
 8002eba:	f640 75fe 	movw	r5, #4094	; 0xffe
 8002ebe:	4095      	lsls	r5, r2
 8002ec0:	ea23 0505 	bic.w	r5, r3, r5
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002ec4:	e9d1 3100 	ldrd	r3, r1, [r1]
 8002ec8:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eca:	4093      	lsls	r3, r2
 8002ecc:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8002ece:	6023      	str	r3, [r4, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	21c0      	movs	r1, #192	; 0xc0
 8002ed4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ed8:	ea23 0202 	bic.w	r2, r3, r2
  hdac->State = HAL_DAC_STATE_READY;
 8002edc:	2301      	movs	r3, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ede:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8002ee0:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8002ee6:	4618      	mov	r0, r3
}
 8002ee8:	bd30      	pop	{r4, r5, pc}

08002eea <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8002eea:	4770      	bx	lr

08002eec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8002eec:	4770      	bx	lr

08002eee <HAL_DACEx_ErrorCallbackCh2>:
 8002eee:	4770      	bx	lr

08002ef0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ef2:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002ef4:	4620      	mov	r0, r4
 8002ef6:	f7ff fff8 	bl	8002eea <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002efa:	2301      	movs	r3, #1
 8002efc:	7123      	strb	r3, [r4, #4]
}
 8002efe:	bd10      	pop	{r4, pc}

08002f00 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002f00:	b508      	push	{r3, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002f02:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002f04:	f7ff fff2 	bl	8002eec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002f08:	bd08      	pop	{r3, pc}

08002f0a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002f0a:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f0c:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002f0e:	6923      	ldr	r3, [r4, #16]
 8002f10:	f043 0304 	orr.w	r3, r3, #4
 8002f14:	6123      	str	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8002f16:	4620      	mov	r0, r4
 8002f18:	f7ff ffe9 	bl	8002eee <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	7123      	strb	r3, [r4, #4]
}
 8002f20:	bd10      	pop	{r4, pc}
	...

08002f24 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f24:	6803      	ldr	r3, [r0, #0]
{
 8002f26:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f28:	4c08      	ldr	r4, [pc, #32]	; (8002f4c <DMA_CalcBaseAndBitshift+0x28>)
{
 8002f2a:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f2c:	b2d9      	uxtb	r1, r3
 8002f2e:	3910      	subs	r1, #16
 8002f30:	2018      	movs	r0, #24
 8002f32:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f36:	5c20      	ldrb	r0, [r4, r0]
 8002f38:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f3a:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002f3e:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 8002f42:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f44:	bf88      	it	hi
 8002f46:	3004      	addhi	r0, #4
 8002f48:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002f4a:	bd10      	pop	{r4, pc}
 8002f4c:	0800a3b5 	.word	0x0800a3b5

08002f50 <HAL_DMA_Init>:
{
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002f54:	f7ff fc54 	bl	8002800 <HAL_GetTick>
 8002f58:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002f5a:	2c00      	cmp	r4, #0
 8002f5c:	d073      	beq.n	8003046 <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8002f64:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 8002f66:	2300      	movs	r3, #0
 8002f68:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002f6c:	6813      	ldr	r3, [r2, #0]
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f74:	6821      	ldr	r1, [r4, #0]
 8002f76:	680b      	ldr	r3, [r1, #0]
 8002f78:	07d8      	lsls	r0, r3, #31
 8002f7a:	d42f      	bmi.n	8002fdc <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002f7c:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f7e:	4d33      	ldr	r5, [pc, #204]	; (800304c <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f82:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f84:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	68e2      	ldr	r2, [r4, #12]
 8002f8c:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8e:	6922      	ldr	r2, [r4, #16]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	6962      	ldr	r2, [r4, #20]
 8002f94:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f96:	69e2      	ldr	r2, [r4, #28]
 8002f98:	4303      	orrs	r3, r0
 8002f9a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f9c:	6a22      	ldr	r2, [r4, #32]
 8002f9e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fa0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002fa2:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa4:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa8:	bf02      	ittt	eq
 8002faa:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 8002fae:	4335      	orreq	r5, r6
 8002fb0:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8002fb2:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8002fb4:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb6:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fb8:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8002fbc:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fc0:	d133      	bne.n	800302a <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 8002fc2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fc4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8002fc6:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fc8:	b37d      	cbz	r5, 800302a <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fca:	b990      	cbnz	r0, 8002ff2 <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 8002fcc:	2a01      	cmp	r2, #1
 8002fce:	d021      	beq.n	8003014 <HAL_DMA_Init+0xc4>
 8002fd0:	f032 0202 	bics.w	r2, r2, #2
 8002fd4:	d129      	bne.n	800302a <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fd6:	01ea      	lsls	r2, r5, #7
 8002fd8:	d527      	bpl.n	800302a <HAL_DMA_Init+0xda>
 8002fda:	e01e      	b.n	800301a <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002fdc:	f7ff fc10 	bl	8002800 <HAL_GetTick>
 8002fe0:	1b40      	subs	r0, r0, r5
 8002fe2:	2805      	cmp	r0, #5
 8002fe4:	d9c6      	bls.n	8002f74 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fea:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002fec:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002ff0:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ff2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8002ff6:	d114      	bne.n	8003022 <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002ff8:	2a03      	cmp	r2, #3
 8002ffa:	d816      	bhi.n	800302a <HAL_DMA_Init+0xda>
 8002ffc:	a001      	add	r0, pc, #4	; (adr r0, 8003004 <HAL_DMA_Init+0xb4>)
 8002ffe:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8003002:	bf00      	nop
 8003004:	0800301b 	.word	0x0800301b
 8003008:	08002fd7 	.word	0x08002fd7
 800300c:	0800301b 	.word	0x0800301b
 8003010:	08003015 	.word	0x08003015
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003014:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8003018:	d107      	bne.n	800302a <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800301a:	2340      	movs	r3, #64	; 0x40
 800301c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800301e:	2001      	movs	r0, #1
 8003020:	e7e4      	b.n	8002fec <HAL_DMA_Init+0x9c>
    switch (tmp)
 8003022:	2a02      	cmp	r2, #2
 8003024:	d9f9      	bls.n	800301a <HAL_DMA_Init+0xca>
 8003026:	2a03      	cmp	r2, #3
 8003028:	d0d5      	beq.n	8002fd6 <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 800302a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800302c:	4620      	mov	r0, r4
 800302e:	f7ff ff79 	bl	8002f24 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003032:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003034:	233f      	movs	r3, #63	; 0x3f
 8003036:	4093      	lsls	r3, r2
 8003038:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800303a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800303c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800303e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8003040:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8003044:	e7d4      	b.n	8002ff0 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 8003046:	2001      	movs	r0, #1
 8003048:	e7d2      	b.n	8002ff0 <HAL_DMA_Init+0xa0>
 800304a:	bf00      	nop
 800304c:	f010803f 	.word	0xf010803f

08003050 <HAL_DMA_Start_IT>:
{
 8003050:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8003052:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003058:	2c01      	cmp	r4, #1
 800305a:	d031      	beq.n	80030c0 <HAL_DMA_Start_IT+0x70>
 800305c:	2401      	movs	r4, #1
 800305e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003062:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8003066:	2c01      	cmp	r4, #1
 8003068:	f04f 0500 	mov.w	r5, #0
 800306c:	f04f 0402 	mov.w	r4, #2
 8003070:	d124      	bne.n	80030bc <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 8003072:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003076:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003078:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800307a:	6825      	ldr	r5, [r4, #0]
 800307c:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8003080:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003082:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003084:	6883      	ldr	r3, [r0, #8]
 8003086:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8003088:	bf0e      	itee	eq
 800308a:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 800308c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 800308e:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003090:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8003092:	bf08      	it	eq
 8003094:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003096:	233f      	movs	r3, #63	; 0x3f
 8003098:	4093      	lsls	r3, r2
 800309a:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	f043 0316 	orr.w	r3, r3, #22
 80030a2:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 80030a4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80030a6:	b11b      	cbz	r3, 80030b0 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	f043 0308 	orr.w	r3, r3, #8
 80030ae:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80030b0:	6823      	ldr	r3, [r4, #0]
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030b8:	2000      	movs	r0, #0
}
 80030ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 80030bc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 80030c0:	2002      	movs	r0, #2
 80030c2:	e7fa      	b.n	80030ba <HAL_DMA_Start_IT+0x6a>

080030c4 <HAL_DMA_Abort>:
{
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030c8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80030ca:	f7ff fb99 	bl	8002800 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030ce:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80030d2:	2b02      	cmp	r3, #2
  uint32_t tickstart = HAL_GetTick();
 80030d4:	4605      	mov	r5, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030d6:	d006      	beq.n	80030e6 <HAL_DMA_Abort+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030d8:	2380      	movs	r3, #128	; 0x80
 80030da:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80030dc:	2300      	movs	r3, #0
 80030de:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 80030e2:	2001      	movs	r0, #1
}
 80030e4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030e6:	6823      	ldr	r3, [r4, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	f022 0216 	bic.w	r2, r2, #22
 80030ee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030f6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030fa:	b90a      	cbnz	r2, 8003100 <HAL_DMA_Abort+0x3c>
 80030fc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80030fe:	b11a      	cbz	r2, 8003108 <HAL_DMA_Abort+0x44>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	f022 0208 	bic.w	r2, r2, #8
 8003106:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	f022 0201 	bic.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003110:	6823      	ldr	r3, [r4, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f013 0301 	ands.w	r3, r3, #1
 8003118:	d10a      	bne.n	8003130 <HAL_DMA_Abort+0x6c>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800311a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800311c:	223f      	movs	r2, #63	; 0x3f
 800311e:	408a      	lsls	r2, r1
 8003120:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8003122:	2201      	movs	r2, #1
 8003124:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8003128:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 800312c:	4618      	mov	r0, r3
 800312e:	e7d9      	b.n	80030e4 <HAL_DMA_Abort+0x20>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003130:	f7ff fb66 	bl	8002800 <HAL_GetTick>
 8003134:	1b40      	subs	r0, r0, r5
 8003136:	2805      	cmp	r0, #5
 8003138:	d9ea      	bls.n	8003110 <HAL_DMA_Abort+0x4c>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800313a:	2320      	movs	r3, #32
 800313c:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800313e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hdma);
 8003140:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003142:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8003146:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        return HAL_TIMEOUT;
 800314a:	e7cb      	b.n	80030e4 <HAL_DMA_Abort+0x20>

0800314c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800314c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003150:	2b02      	cmp	r3, #2
 8003152:	d003      	beq.n	800315c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003158:	2001      	movs	r0, #1
 800315a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800315c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800315e:	2305      	movs	r3, #5
 8003160:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f023 0301 	bic.w	r3, r3, #1
 800316a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800316c:	2000      	movs	r0, #0
}
 800316e:	4770      	bx	lr

08003170 <HAL_DMA_IRQHandler>:
{
 8003170:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003176:	4b5c      	ldr	r3, [pc, #368]	; (80032e8 <HAL_DMA_IRQHandler+0x178>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003178:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800317a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800317c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800317e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003180:	2208      	movs	r2, #8
 8003182:	409a      	lsls	r2, r3
 8003184:	4232      	tst	r2, r6
{
 8003186:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003188:	d00c      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800318a:	6801      	ldr	r1, [r0, #0]
 800318c:	6808      	ldr	r0, [r1, #0]
 800318e:	0740      	lsls	r0, r0, #29
 8003190:	d508      	bpl.n	80031a4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003192:	6808      	ldr	r0, [r1, #0]
 8003194:	f020 0004 	bic.w	r0, r0, #4
 8003198:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800319a:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800319c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031a4:	2201      	movs	r2, #1
 80031a6:	409a      	lsls	r2, r3
 80031a8:	4232      	tst	r2, r6
 80031aa:	d008      	beq.n	80031be <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031ac:	6821      	ldr	r1, [r4, #0]
 80031ae:	6949      	ldr	r1, [r1, #20]
 80031b0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031b2:	bf41      	itttt	mi
 80031b4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031b6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80031b8:	f042 0202 	orrmi.w	r2, r2, #2
 80031bc:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031be:	2204      	movs	r2, #4
 80031c0:	409a      	lsls	r2, r3
 80031c2:	4232      	tst	r2, r6
 80031c4:	d008      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80031c6:	6821      	ldr	r1, [r4, #0]
 80031c8:	6809      	ldr	r1, [r1, #0]
 80031ca:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80031cc:	bf41      	itttt	mi
 80031ce:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031d0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80031d2:	f042 0204 	orrmi.w	r2, r2, #4
 80031d6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031d8:	2210      	movs	r2, #16
 80031da:	409a      	lsls	r2, r3
 80031dc:	4232      	tst	r2, r6
 80031de:	d010      	beq.n	8003202 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031e0:	6823      	ldr	r3, [r4, #0]
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	0709      	lsls	r1, r1, #28
 80031e6:	d50c      	bpl.n	8003202 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031e8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	0350      	lsls	r0, r2, #13
 80031ee:	d537      	bpl.n	8003260 <HAL_DMA_IRQHandler+0xf0>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	0319      	lsls	r1, r3, #12
 80031f4:	d401      	bmi.n	80031fa <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80031f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f8:	e000      	b.n	80031fc <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80031fa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80031fc:	b10b      	cbz	r3, 8003202 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80031fe:	4620      	mov	r0, r4
 8003200:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003202:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8003204:	2220      	movs	r2, #32
 8003206:	408a      	lsls	r2, r1
 8003208:	4232      	tst	r2, r6
 800320a:	d03a      	beq.n	8003282 <HAL_DMA_IRQHandler+0x112>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800320c:	6823      	ldr	r3, [r4, #0]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	06c6      	lsls	r6, r0, #27
 8003212:	d536      	bpl.n	8003282 <HAL_DMA_IRQHandler+0x112>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003214:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003216:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800321a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800321c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800321e:	d127      	bne.n	8003270 <HAL_DMA_IRQHandler+0x100>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003220:	f022 0216 	bic.w	r2, r2, #22
 8003224:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003226:	695a      	ldr	r2, [r3, #20]
 8003228:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800322c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800322e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003230:	b90a      	cbnz	r2, 8003236 <HAL_DMA_IRQHandler+0xc6>
 8003232:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003234:	b11a      	cbz	r2, 800323e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	f022 0208 	bic.w	r2, r2, #8
 800323c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800323e:	233f      	movs	r3, #63	; 0x3f
 8003240:	408b      	lsls	r3, r1
 8003242:	60ab      	str	r3, [r5, #8]
        hdma->State = HAL_DMA_STATE_READY;
 8003244:	2301      	movs	r3, #1
 8003246:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800324a:	2300      	movs	r3, #0
 800324c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8003250:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8003252:	2b00      	cmp	r3, #0
 8003254:	d045      	beq.n	80032e2 <HAL_DMA_IRQHandler+0x172>
      hdma->XferErrorCallback(hdma);
 8003256:	4620      	mov	r0, r4
}
 8003258:	b003      	add	sp, #12
 800325a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800325e:	4718      	bx	r3
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003264:	bf5e      	ittt	pl
 8003266:	681a      	ldrpl	r2, [r3, #0]
 8003268:	f022 0208 	bicpl.w	r2, r2, #8
 800326c:	601a      	strpl	r2, [r3, #0]
 800326e:	e7c2      	b.n	80031f6 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003270:	0350      	lsls	r0, r2, #13
 8003272:	d527      	bpl.n	80032c4 <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	0319      	lsls	r1, r3, #12
 8003278:	d431      	bmi.n	80032de <HAL_DMA_IRQHandler+0x16e>
          if(hdma->XferM1CpltCallback != NULL)
 800327a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800327c:	b10b      	cbz	r3, 8003282 <HAL_DMA_IRQHandler+0x112>
          hdma->XferCpltCallback(hdma);
 800327e:	4620      	mov	r0, r4
 8003280:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003282:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003284:	b36b      	cbz	r3, 80032e2 <HAL_DMA_IRQHandler+0x172>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003286:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003288:	07da      	lsls	r2, r3, #31
 800328a:	d519      	bpl.n	80032c0 <HAL_DMA_IRQHandler+0x150>
      __HAL_DMA_DISABLE(hdma);
 800328c:	6822      	ldr	r2, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800328e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003292:	fbb7 f7f3 	udiv	r7, r7, r3
      hdma->State = HAL_DMA_STATE_ABORT;
 8003296:	2305      	movs	r3, #5
 8003298:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800329c:	6813      	ldr	r3, [r2, #0]
 800329e:	f023 0301 	bic.w	r3, r3, #1
 80032a2:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 80032a4:	9b01      	ldr	r3, [sp, #4]
 80032a6:	3301      	adds	r3, #1
 80032a8:	42bb      	cmp	r3, r7
 80032aa:	9301      	str	r3, [sp, #4]
 80032ac:	d802      	bhi.n	80032b4 <HAL_DMA_IRQHandler+0x144>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032ae:	6813      	ldr	r3, [r2, #0]
 80032b0:	07db      	lsls	r3, r3, #31
 80032b2:	d4f7      	bmi.n	80032a4 <HAL_DMA_IRQHandler+0x134>
      hdma->State = HAL_DMA_STATE_READY;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80032ba:	2300      	movs	r3, #0
 80032bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80032c0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80032c2:	e7c6      	b.n	8003252 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80032ca:	d108      	bne.n	80032de <HAL_DMA_IRQHandler+0x16e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	f021 0110 	bic.w	r1, r1, #16
 80032d2:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80032da:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 80032de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80032e0:	e7cc      	b.n	800327c <HAL_DMA_IRQHandler+0x10c>
}
 80032e2:	b003      	add	sp, #12
 80032e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20000010 	.word	0x20000010

080032ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032f0:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8003490 <HAL_GPIO_Init+0x1a4>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032f4:	4a64      	ldr	r2, [pc, #400]	; (8003488 <HAL_GPIO_Init+0x19c>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032f8:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80032fa:	2401      	movs	r4, #1
 80032fc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032fe:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 8003302:	43ac      	bics	r4, r5
 8003304:	f040 80ad 	bne.w	8003462 <HAL_GPIO_Init+0x176>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003308:	684d      	ldr	r5, [r1, #4]
 800330a:	f005 0403 	and.w	r4, r5, #3
 800330e:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003312:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003314:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003316:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800331a:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800331c:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003320:	d834      	bhi.n	800338c <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 8003322:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003324:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003328:	68cf      	ldr	r7, [r1, #12]
 800332a:	fa07 f708 	lsl.w	r7, r7, r8
 800332e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8003332:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003334:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003336:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800333a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800333e:	409f      	lsls	r7, r3
 8003340:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8003344:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8003346:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003348:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334c:	688f      	ldr	r7, [r1, #8]
 800334e:	fa07 f708 	lsl.w	r7, r7, r8
 8003352:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003356:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8003358:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800335a:	d119      	bne.n	8003390 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 800335c:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8003360:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003364:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8003368:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800336c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8003370:	f04f 0e0f 	mov.w	lr, #15
 8003374:	fa0e fe0b 	lsl.w	lr, lr, fp
 8003378:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800337c:	690f      	ldr	r7, [r1, #16]
 800337e:	fa07 f70b 	lsl.w	r7, r7, fp
 8003382:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8003386:	f8ca 7020 	str.w	r7, [sl, #32]
 800338a:	e001      	b.n	8003390 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800338c:	2c03      	cmp	r4, #3
 800338e:	d1da      	bne.n	8003346 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8003390:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003392:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003396:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003398:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800339a:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800339e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033a0:	d05f      	beq.n	8003462 <HAL_GPIO_Init+0x176>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033a2:	f04f 0a00 	mov.w	sl, #0
 80033a6:	f8cd a004 	str.w	sl, [sp, #4]
 80033aa:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ae:	4c37      	ldr	r4, [pc, #220]	; (800348c <HAL_GPIO_Init+0x1a0>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033b0:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80033b4:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80033b8:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80033bc:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80033c0:	9601      	str	r6, [sp, #4]
 80033c2:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80033c4:	f023 0603 	bic.w	r6, r3, #3
 80033c8:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80033cc:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d0:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80033d4:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80033dc:	270f      	movs	r7, #15
 80033de:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e2:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033e4:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033e8:	d042      	beq.n	8003470 <HAL_GPIO_Init+0x184>
 80033ea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033ee:	42a0      	cmp	r0, r4
 80033f0:	d040      	beq.n	8003474 <HAL_GPIO_Init+0x188>
 80033f2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033f6:	42a0      	cmp	r0, r4
 80033f8:	d03e      	beq.n	8003478 <HAL_GPIO_Init+0x18c>
 80033fa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80033fe:	42a0      	cmp	r0, r4
 8003400:	d03c      	beq.n	800347c <HAL_GPIO_Init+0x190>
 8003402:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003406:	42a0      	cmp	r0, r4
 8003408:	d03a      	beq.n	8003480 <HAL_GPIO_Init+0x194>
 800340a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800340e:	42a0      	cmp	r0, r4
 8003410:	d038      	beq.n	8003484 <HAL_GPIO_Init+0x198>
 8003412:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003416:	42a0      	cmp	r0, r4
 8003418:	bf0c      	ite	eq
 800341a:	2406      	moveq	r4, #6
 800341c:	2407      	movne	r4, #7
 800341e:	fa04 f40e 	lsl.w	r4, r4, lr
 8003422:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003424:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 8003426:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8003428:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800342c:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 800342e:	bf54      	ite	pl
 8003430:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003432:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 8003436:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 8003438:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800343a:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 800343c:	bf54      	ite	pl
 800343e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8003440:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8003444:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 8003446:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003448:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 800344a:	bf54      	ite	pl
 800344c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800344e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 8003452:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003454:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003456:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8003458:	bf54      	ite	pl
 800345a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800345c:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8003460:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003462:	3301      	adds	r3, #1
 8003464:	2b10      	cmp	r3, #16
 8003466:	f47f af47 	bne.w	80032f8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 800346a:	b003      	add	sp, #12
 800346c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003470:	4654      	mov	r4, sl
 8003472:	e7d4      	b.n	800341e <HAL_GPIO_Init+0x132>
 8003474:	2401      	movs	r4, #1
 8003476:	e7d2      	b.n	800341e <HAL_GPIO_Init+0x132>
 8003478:	2402      	movs	r4, #2
 800347a:	e7d0      	b.n	800341e <HAL_GPIO_Init+0x132>
 800347c:	2403      	movs	r4, #3
 800347e:	e7ce      	b.n	800341e <HAL_GPIO_Init+0x132>
 8003480:	2404      	movs	r4, #4
 8003482:	e7cc      	b.n	800341e <HAL_GPIO_Init+0x132>
 8003484:	2405      	movs	r4, #5
 8003486:	e7ca      	b.n	800341e <HAL_GPIO_Init+0x132>
 8003488:	40013c00 	.word	0x40013c00
 800348c:	40020000 	.word	0x40020000
 8003490:	40023800 	.word	0x40023800

08003494 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003494:	b10a      	cbz	r2, 800349a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003496:	6181      	str	r1, [r0, #24]
  }
}
 8003498:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800349a:	0409      	lsls	r1, r1, #16
 800349c:	e7fb      	b.n	8003496 <HAL_GPIO_WritePin+0x2>

0800349e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800349e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034a0:	ea01 0203 	and.w	r2, r1, r3
 80034a4:	ea21 0103 	bic.w	r1, r1, r3
 80034a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80034ac:	6181      	str	r1, [r0, #24]
}
 80034ae:	4770      	bx	lr

080034b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b2:	4604      	mov	r4, r0
 80034b4:	b908      	cbnz	r0, 80034ba <HAL_I2C_Init+0xa>
  {
    return HAL_ERROR;
 80034b6:	2001      	movs	r0, #1
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
}
 80034b8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80034be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80034c2:	b91b      	cbnz	r3, 80034cc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80034c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80034c8:	f7fe fd34 	bl	8001f34 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80034cc:	2324      	movs	r3, #36	; 0x24
 80034ce:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80034d2:	6823      	ldr	r3, [r4, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	f022 0201 	bic.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ea:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034ec:	f000 f924 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034f0:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_I2C_Init+0x140>)
 80034f2:	6865      	ldr	r5, [r4, #4]
 80034f4:	429d      	cmp	r5, r3
 80034f6:	bf94      	ite	ls
 80034f8:	4b3e      	ldrls	r3, [pc, #248]	; (80035f4 <HAL_I2C_Init+0x144>)
 80034fa:	4b3f      	ldrhi	r3, [pc, #252]	; (80035f8 <HAL_I2C_Init+0x148>)
 80034fc:	4298      	cmp	r0, r3
 80034fe:	bf8c      	ite	hi
 8003500:	2300      	movhi	r3, #0
 8003502:	2301      	movls	r3, #1
 8003504:	2b00      	cmp	r3, #0
 8003506:	d1d6      	bne.n	80034b6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003508:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800350a:	4e39      	ldr	r6, [pc, #228]	; (80035f0 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800350c:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800350e:	493b      	ldr	r1, [pc, #236]	; (80035fc <HAL_I2C_Init+0x14c>)
 8003510:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003518:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800351a:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800351c:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800351e:	bf88      	it	hi
 8003520:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 8003524:	6a13      	ldr	r3, [r2, #32]
 8003526:	bf88      	it	hi
 8003528:	4371      	mulhi	r1, r6
 800352a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800352e:	bf84      	itt	hi
 8003530:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8003534:	fbb1 f1f6 	udivhi	r1, r1, r6
 8003538:	3101      	adds	r1, #1
 800353a:	4319      	orrs	r1, r3
 800353c:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800353e:	69d1      	ldr	r1, [r2, #28]
 8003540:	1e43      	subs	r3, r0, #1
 8003542:	482b      	ldr	r0, [pc, #172]	; (80035f0 <HAL_I2C_Init+0x140>)
 8003544:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8003548:	4285      	cmp	r5, r0
 800354a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800354e:	d832      	bhi.n	80035b6 <HAL_I2C_Init+0x106>
 8003550:	006d      	lsls	r5, r5, #1
 8003552:	f640 70fc 	movw	r0, #4092	; 0xffc
 8003556:	fbb3 f3f5 	udiv	r3, r3, r5
 800355a:	3301      	adds	r3, #1
 800355c:	4203      	tst	r3, r0
 800355e:	d042      	beq.n	80035e6 <HAL_I2C_Init+0x136>
 8003560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003564:	430b      	orrs	r3, r1
 8003566:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003568:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800356c:	6811      	ldr	r1, [r2, #0]
 800356e:	4303      	orrs	r3, r0
 8003570:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8003574:	430b      	orrs	r3, r1
 8003576:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003578:	6891      	ldr	r1, [r2, #8]
 800357a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800357e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8003582:	4303      	orrs	r3, r0
 8003584:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003588:	430b      	orrs	r3, r1
 800358a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800358c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003590:	68d1      	ldr	r1, [r2, #12]
 8003592:	4303      	orrs	r3, r0
 8003594:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003598:	430b      	orrs	r3, r1
 800359a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a4:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a8:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ae:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b0:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80035b4:	e780      	b.n	80034b8 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035b6:	68a0      	ldr	r0, [r4, #8]
 80035b8:	b950      	cbnz	r0, 80035d0 <HAL_I2C_Init+0x120>
 80035ba:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035be:	fbb3 f3f5 	udiv	r3, r3, r5
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	b17b      	cbz	r3, 80035ea <HAL_I2C_Init+0x13a>
 80035ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035ce:	e7c9      	b.n	8003564 <HAL_I2C_Init+0xb4>
 80035d0:	2019      	movs	r0, #25
 80035d2:	4345      	muls	r5, r0
 80035d4:	fbb3 f3f5 	udiv	r3, r3, r5
 80035d8:	3301      	adds	r3, #1
 80035da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035de:	b123      	cbz	r3, 80035ea <HAL_I2C_Init+0x13a>
 80035e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035e4:	e7be      	b.n	8003564 <HAL_I2C_Init+0xb4>
 80035e6:	2304      	movs	r3, #4
 80035e8:	e7bc      	b.n	8003564 <HAL_I2C_Init+0xb4>
 80035ea:	2301      	movs	r3, #1
 80035ec:	e7ba      	b.n	8003564 <HAL_I2C_Init+0xb4>
 80035ee:	bf00      	nop
 80035f0:	000186a0 	.word	0x000186a0
 80035f4:	001e847f 	.word	0x001e847f
 80035f8:	003d08ff 	.word	0x003d08ff
 80035fc:	000f4240 	.word	0x000f4240

08003600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003604:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003606:	4604      	mov	r4, r0
 8003608:	b910      	cbnz	r0, 8003610 <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 800360a:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);

  return HAL_OK;
}
 800360c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b44      	ldr	r3, [pc, #272]	; (8003724 <HAL_RCC_ClockConfig+0x124>)
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	f002 020f 	and.w	r2, r2, #15
 8003618:	428a      	cmp	r2, r1
 800361a:	d328      	bcc.n	800366e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800361c:	6822      	ldr	r2, [r4, #0]
 800361e:	0797      	lsls	r7, r2, #30
 8003620:	d42d      	bmi.n	800367e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003622:	07d0      	lsls	r0, r2, #31
 8003624:	d441      	bmi.n	80036aa <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003626:	4b3f      	ldr	r3, [pc, #252]	; (8003724 <HAL_RCC_ClockConfig+0x124>)
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	f002 020f 	and.w	r2, r2, #15
 800362e:	42aa      	cmp	r2, r5
 8003630:	d866      	bhi.n	8003700 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003632:	6822      	ldr	r2, [r4, #0]
 8003634:	0751      	lsls	r1, r2, #29
 8003636:	d46c      	bmi.n	8003712 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003638:	0713      	lsls	r3, r2, #28
 800363a:	d507      	bpl.n	800364c <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800363c:	4a3a      	ldr	r2, [pc, #232]	; (8003728 <HAL_RCC_ClockConfig+0x128>)
 800363e:	6921      	ldr	r1, [r4, #16]
 8003640:	6893      	ldr	r3, [r2, #8]
 8003642:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003646:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800364a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800364c:	f000 f894 	bl	8003778 <HAL_RCC_GetSysClockFreq>
 8003650:	4b35      	ldr	r3, [pc, #212]	; (8003728 <HAL_RCC_ClockConfig+0x128>)
 8003652:	4a36      	ldr	r2, [pc, #216]	; (800372c <HAL_RCC_ClockConfig+0x12c>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800365a:	5cd3      	ldrb	r3, [r2, r3]
 800365c:	40d8      	lsrs	r0, r3
 800365e:	4b34      	ldr	r3, [pc, #208]	; (8003730 <HAL_RCC_ClockConfig+0x130>)
 8003660:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003662:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_RCC_ClockConfig+0x134>)
 8003664:	6818      	ldr	r0, [r3, #0]
 8003666:	f7ff f881 	bl	800276c <HAL_InitTick>
  return HAL_OK;
 800366a:	2000      	movs	r0, #0
 800366c:	e7ce      	b.n	800360c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	b2ca      	uxtb	r2, r1
 8003670:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	428b      	cmp	r3, r1
 800367a:	d1c6      	bne.n	800360a <HAL_RCC_ClockConfig+0xa>
 800367c:	e7ce      	b.n	800361c <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367e:	4b2a      	ldr	r3, [pc, #168]	; (8003728 <HAL_RCC_ClockConfig+0x128>)
 8003680:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	bf1e      	ittt	ne
 8003686:	6899      	ldrne	r1, [r3, #8]
 8003688:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 800368c:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368e:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003690:	bf42      	ittt	mi
 8003692:	6899      	ldrmi	r1, [r3, #8]
 8003694:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8003698:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800369a:	4923      	ldr	r1, [pc, #140]	; (8003728 <HAL_RCC_ClockConfig+0x128>)
 800369c:	68a0      	ldr	r0, [r4, #8]
 800369e:	688b      	ldr	r3, [r1, #8]
 80036a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036a4:	4303      	orrs	r3, r0
 80036a6:	608b      	str	r3, [r1, #8]
 80036a8:	e7bb      	b.n	8003622 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036aa:	6862      	ldr	r2, [r4, #4]
 80036ac:	4b1e      	ldr	r3, [pc, #120]	; (8003728 <HAL_RCC_ClockConfig+0x128>)
 80036ae:	2a01      	cmp	r2, #1
 80036b0:	d11c      	bne.n	80036ec <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036b8:	d0a7      	beq.n	800360a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ba:	4e1b      	ldr	r6, [pc, #108]	; (8003728 <HAL_RCC_ClockConfig+0x128>)
 80036bc:	68b3      	ldr	r3, [r6, #8]
 80036be:	f023 0303 	bic.w	r3, r3, #3
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80036c6:	f7ff f89b 	bl	8002800 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036ca:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80036ce:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d0:	68b3      	ldr	r3, [r6, #8]
 80036d2:	6862      	ldr	r2, [r4, #4]
 80036d4:	f003 030c 	and.w	r3, r3, #12
 80036d8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80036dc:	d0a3      	beq.n	8003626 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036de:	f7ff f88f 	bl	8002800 <HAL_GetTick>
 80036e2:	1bc0      	subs	r0, r0, r7
 80036e4:	4540      	cmp	r0, r8
 80036e6:	d9f3      	bls.n	80036d0 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 80036e8:	2003      	movs	r0, #3
 80036ea:	e78f      	b.n	800360c <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036ec:	1e91      	subs	r1, r2, #2
 80036ee:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	d802      	bhi.n	80036fa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80036f8:	e7de      	b.n	80036b8 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fa:	f013 0f02 	tst.w	r3, #2
 80036fe:	e7db      	b.n	80036b8 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003700:	b2ea      	uxtb	r2, r5
 8003702:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 030f 	and.w	r3, r3, #15
 800370a:	42ab      	cmp	r3, r5
 800370c:	f47f af7d 	bne.w	800360a <HAL_RCC_ClockConfig+0xa>
 8003710:	e78f      	b.n	8003632 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003712:	4905      	ldr	r1, [pc, #20]	; (8003728 <HAL_RCC_ClockConfig+0x128>)
 8003714:	68e0      	ldr	r0, [r4, #12]
 8003716:	688b      	ldr	r3, [r1, #8]
 8003718:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800371c:	4303      	orrs	r3, r0
 800371e:	608b      	str	r3, [r1, #8]
 8003720:	e78a      	b.n	8003638 <HAL_RCC_ClockConfig+0x38>
 8003722:	bf00      	nop
 8003724:	40023c00 	.word	0x40023c00
 8003728:	40023800 	.word	0x40023800
 800372c:	0800a39d 	.word	0x0800a39d
 8003730:	20000010 	.word	0x20000010
 8003734:	20000018 	.word	0x20000018

08003738 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003738:	4b04      	ldr	r3, [pc, #16]	; (800374c <HAL_RCC_GetPCLK1Freq+0x14>)
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <HAL_RCC_GetPCLK1Freq+0x18>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003746:	6810      	ldr	r0, [r2, #0]
}
 8003748:	40d8      	lsrs	r0, r3
 800374a:	4770      	bx	lr
 800374c:	40023800 	.word	0x40023800
 8003750:	0800a3ad 	.word	0x0800a3ad
 8003754:	20000010 	.word	0x20000010

08003758 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <HAL_RCC_GetPCLK2Freq+0x14>)
 800375a:	4a05      	ldr	r2, [pc, #20]	; (8003770 <HAL_RCC_GetPCLK2Freq+0x18>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	4a03      	ldr	r2, [pc, #12]	; (8003774 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003766:	6810      	ldr	r0, [r2, #0]
}
 8003768:	40d8      	lsrs	r0, r3
 800376a:	4770      	bx	lr
 800376c:	40023800 	.word	0x40023800
 8003770:	0800a3ad 	.word	0x0800a3ad
 8003774:	20000010 	.word	0x20000010

08003778 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003778:	4920      	ldr	r1, [pc, #128]	; (80037fc <HAL_RCC_GetSysClockFreq+0x84>)
{
 800377a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800377c:	688b      	ldr	r3, [r1, #8]
 800377e:	f003 030c 	and.w	r3, r3, #12
 8003782:	2b08      	cmp	r3, #8
 8003784:	d007      	beq.n	8003796 <HAL_RCC_GetSysClockFreq+0x1e>
 8003786:	2b0c      	cmp	r3, #12
 8003788:	d020      	beq.n	80037cc <HAL_RCC_GetSysClockFreq+0x54>
 800378a:	481d      	ldr	r0, [pc, #116]	; (8003800 <HAL_RCC_GetSysClockFreq+0x88>)
 800378c:	4a1d      	ldr	r2, [pc, #116]	; (8003804 <HAL_RCC_GetSysClockFreq+0x8c>)
 800378e:	2b04      	cmp	r3, #4
 8003790:	bf08      	it	eq
 8003792:	4610      	moveq	r0, r2
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003794:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003796:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003798:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800379a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a0:	bf14      	ite	ne
 80037a2:	4818      	ldrne	r0, [pc, #96]	; (8003804 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a4:	4816      	ldreq	r0, [pc, #88]	; (8003800 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037a6:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80037aa:	bf18      	it	ne
 80037ac:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b2:	fba1 0100 	umull	r0, r1, r1, r0
 80037b6:	f7fd fae7 	bl	8000d88 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037ba:	4b10      	ldr	r3, [pc, #64]	; (80037fc <HAL_RCC_GetSysClockFreq+0x84>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80037c2:	3301      	adds	r3, #1
 80037c4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllr;
 80037c6:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80037ca:	e7e3      	b.n	8003794 <HAL_RCC_GetSysClockFreq+0x1c>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037cc:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037ce:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d0:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037d2:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d6:	bf14      	ite	ne
 80037d8:	480a      	ldrne	r0, [pc, #40]	; (8003804 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037da:	4809      	ldreq	r0, [pc, #36]	; (8003800 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037dc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80037e0:	bf18      	it	ne
 80037e2:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037e8:	fba1 0100 	umull	r0, r1, r1, r0
 80037ec:	f7fd facc 	bl	8000d88 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80037f0:	4b02      	ldr	r3, [pc, #8]	; (80037fc <HAL_RCC_GetSysClockFreq+0x84>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f3c3 7302 	ubfx	r3, r3, #28, #3
 80037f8:	e7e5      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x4e>
 80037fa:	bf00      	nop
 80037fc:	40023800 	.word	0x40023800
 8003800:	00f42400 	.word	0x00f42400
 8003804:	017d7840 	.word	0x017d7840

08003808 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003808:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800380c:	4604      	mov	r4, r0
 800380e:	2800      	cmp	r0, #0
 8003810:	d030      	beq.n	8003874 <HAL_RCC_OscConfig+0x6c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	6803      	ldr	r3, [r0, #0]
 8003814:	07df      	lsls	r7, r3, #31
 8003816:	d410      	bmi.n	800383a <HAL_RCC_OscConfig+0x32>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003818:	6823      	ldr	r3, [r4, #0]
 800381a:	079e      	lsls	r6, r3, #30
 800381c:	d463      	bmi.n	80038e6 <HAL_RCC_OscConfig+0xde>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800381e:	6823      	ldr	r3, [r4, #0]
 8003820:	071a      	lsls	r2, r3, #28
 8003822:	f100 80ad 	bmi.w	8003980 <HAL_RCC_OscConfig+0x178>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003826:	6823      	ldr	r3, [r4, #0]
 8003828:	075b      	lsls	r3, r3, #29
 800382a:	f100 80cd 	bmi.w	80039c8 <HAL_RCC_OscConfig+0x1c0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800382e:	69a0      	ldr	r0, [r4, #24]
 8003830:	2800      	cmp	r0, #0
 8003832:	f040 8135 	bne.w	8003aa0 <HAL_RCC_OscConfig+0x298>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003836:	2000      	movs	r0, #0
 8003838:	e034      	b.n	80038a4 <HAL_RCC_OscConfig+0x9c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800383a:	4b96      	ldr	r3, [pc, #600]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	f002 020c 	and.w	r2, r2, #12
 8003842:	2a04      	cmp	r2, #4
 8003844:	d00f      	beq.n	8003866 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800384c:	2a08      	cmp	r2, #8
 800384e:	d102      	bne.n	8003856 <HAL_RCC_OscConfig+0x4e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	0255      	lsls	r5, r2, #9
 8003854:	d407      	bmi.n	8003866 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800385c:	2a0c      	cmp	r2, #12
 800385e:	d10b      	bne.n	8003878 <HAL_RCC_OscConfig+0x70>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	0258      	lsls	r0, r3, #9
 8003864:	d508      	bpl.n	8003878 <HAL_RCC_OscConfig+0x70>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003866:	4b8b      	ldr	r3, [pc, #556]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	0399      	lsls	r1, r3, #14
 800386c:	d5d4      	bpl.n	8003818 <HAL_RCC_OscConfig+0x10>
 800386e:	6863      	ldr	r3, [r4, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1d1      	bne.n	8003818 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 8003874:	2001      	movs	r0, #1
 8003876:	e015      	b.n	80038a4 <HAL_RCC_OscConfig+0x9c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003878:	6863      	ldr	r3, [r4, #4]
 800387a:	4d86      	ldr	r5, [pc, #536]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
 800387c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003880:	d113      	bne.n	80038aa <HAL_RCC_OscConfig+0xa2>
 8003882:	682b      	ldr	r3, [r5, #0]
 8003884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003888:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800388a:	f7fe ffb9 	bl	8002800 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388e:	4e81      	ldr	r6, [pc, #516]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8003890:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	6833      	ldr	r3, [r6, #0]
 8003894:	039a      	lsls	r2, r3, #14
 8003896:	d4bf      	bmi.n	8003818 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003898:	f7fe ffb2 	bl	8002800 <HAL_GetTick>
 800389c:	1b40      	subs	r0, r0, r5
 800389e:	2864      	cmp	r0, #100	; 0x64
 80038a0:	d9f7      	bls.n	8003892 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80038a2:	2003      	movs	r0, #3
}
 80038a4:	b002      	add	sp, #8
 80038a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ae:	d104      	bne.n	80038ba <HAL_RCC_OscConfig+0xb2>
 80038b0:	682b      	ldr	r3, [r5, #0]
 80038b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b6:	602b      	str	r3, [r5, #0]
 80038b8:	e7e3      	b.n	8003882 <HAL_RCC_OscConfig+0x7a>
 80038ba:	682a      	ldr	r2, [r5, #0]
 80038bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038c0:	602a      	str	r2, [r5, #0]
 80038c2:	682a      	ldr	r2, [r5, #0]
 80038c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038c8:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1dd      	bne.n	800388a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80038ce:	f7fe ff97 	bl	8002800 <HAL_GetTick>
 80038d2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	039b      	lsls	r3, r3, #14
 80038d8:	d59e      	bpl.n	8003818 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038da:	f7fe ff91 	bl	8002800 <HAL_GetTick>
 80038de:	1b80      	subs	r0, r0, r6
 80038e0:	2864      	cmp	r0, #100	; 0x64
 80038e2:	d9f7      	bls.n	80038d4 <HAL_RCC_OscConfig+0xcc>
 80038e4:	e7dd      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038e6:	4b6b      	ldr	r3, [pc, #428]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	f012 0f0c 	tst.w	r2, #12
 80038ee:	d00f      	beq.n	8003910 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80038f6:	2a08      	cmp	r2, #8
 80038f8:	d102      	bne.n	8003900 <HAL_RCC_OscConfig+0xf8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	0257      	lsls	r7, r2, #9
 80038fe:	d507      	bpl.n	8003910 <HAL_RCC_OscConfig+0x108>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003906:	2a0c      	cmp	r2, #12
 8003908:	d111      	bne.n	800392e <HAL_RCC_OscConfig+0x126>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	025e      	lsls	r6, r3, #9
 800390e:	d40e      	bmi.n	800392e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003910:	4a60      	ldr	r2, [pc, #384]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
 8003912:	6813      	ldr	r3, [r2, #0]
 8003914:	079d      	lsls	r5, r3, #30
 8003916:	d502      	bpl.n	800391e <HAL_RCC_OscConfig+0x116>
 8003918:	68e3      	ldr	r3, [r4, #12]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d1aa      	bne.n	8003874 <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391e:	6813      	ldr	r3, [r2, #0]
 8003920:	6921      	ldr	r1, [r4, #16]
 8003922:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003926:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800392a:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392c:	e777      	b.n	800381e <HAL_RCC_OscConfig+0x16>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800392e:	68e2      	ldr	r2, [r4, #12]
 8003930:	4b59      	ldr	r3, [pc, #356]	; (8003a98 <HAL_RCC_OscConfig+0x290>)
 8003932:	b1b2      	cbz	r2, 8003962 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_ENABLE();
 8003934:	2201      	movs	r2, #1
 8003936:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003938:	f7fe ff62 	bl	8002800 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393c:	4d55      	ldr	r5, [pc, #340]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800393e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	682b      	ldr	r3, [r5, #0]
 8003942:	0798      	lsls	r0, r3, #30
 8003944:	d507      	bpl.n	8003956 <HAL_RCC_OscConfig+0x14e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003946:	682b      	ldr	r3, [r5, #0]
 8003948:	6922      	ldr	r2, [r4, #16]
 800394a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800394e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003952:	602b      	str	r3, [r5, #0]
 8003954:	e763      	b.n	800381e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003956:	f7fe ff53 	bl	8002800 <HAL_GetTick>
 800395a:	1b80      	subs	r0, r0, r6
 800395c:	2802      	cmp	r0, #2
 800395e:	d9ef      	bls.n	8003940 <HAL_RCC_OscConfig+0x138>
 8003960:	e79f      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 8003962:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003964:	f7fe ff4c 	bl	8002800 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003968:	4e4a      	ldr	r6, [pc, #296]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800396a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396c:	6833      	ldr	r3, [r6, #0]
 800396e:	0799      	lsls	r1, r3, #30
 8003970:	f57f af55 	bpl.w	800381e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003974:	f7fe ff44 	bl	8002800 <HAL_GetTick>
 8003978:	1b40      	subs	r0, r0, r5
 800397a:	2802      	cmp	r0, #2
 800397c:	d9f6      	bls.n	800396c <HAL_RCC_OscConfig+0x164>
 800397e:	e790      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003980:	6962      	ldr	r2, [r4, #20]
 8003982:	4b45      	ldr	r3, [pc, #276]	; (8003a98 <HAL_RCC_OscConfig+0x290>)
 8003984:	b182      	cbz	r2, 80039a8 <HAL_RCC_OscConfig+0x1a0>
      __HAL_RCC_LSI_ENABLE();
 8003986:	2201      	movs	r2, #1
 8003988:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800398c:	f7fe ff38 	bl	8002800 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003990:	4e40      	ldr	r6, [pc, #256]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003992:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003994:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003996:	079f      	lsls	r7, r3, #30
 8003998:	f53f af45 	bmi.w	8003826 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800399c:	f7fe ff30 	bl	8002800 <HAL_GetTick>
 80039a0:	1b40      	subs	r0, r0, r5
 80039a2:	2802      	cmp	r0, #2
 80039a4:	d9f6      	bls.n	8003994 <HAL_RCC_OscConfig+0x18c>
 80039a6:	e77c      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80039a8:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80039ac:	f7fe ff28 	bl	8002800 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b0:	4e38      	ldr	r6, [pc, #224]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80039b2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039b4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80039b6:	0798      	lsls	r0, r3, #30
 80039b8:	f57f af35 	bpl.w	8003826 <HAL_RCC_OscConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039bc:	f7fe ff20 	bl	8002800 <HAL_GetTick>
 80039c0:	1b40      	subs	r0, r0, r5
 80039c2:	2802      	cmp	r0, #2
 80039c4:	d9f6      	bls.n	80039b4 <HAL_RCC_OscConfig+0x1ac>
 80039c6:	e76c      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039c8:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
 80039ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039cc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80039d0:	d128      	bne.n	8003a24 <HAL_RCC_OscConfig+0x21c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80039d2:	9201      	str	r2, [sp, #4]
 80039d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
 80039dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e2:	9301      	str	r3, [sp, #4]
 80039e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80039e6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039e8:	4d2c      	ldr	r5, [pc, #176]	; (8003a9c <HAL_RCC_OscConfig+0x294>)
 80039ea:	682b      	ldr	r3, [r5, #0]
 80039ec:	05d9      	lsls	r1, r3, #23
 80039ee:	d51b      	bpl.n	8003a28 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039f0:	68a3      	ldr	r3, [r4, #8]
 80039f2:	4d28      	ldr	r5, [pc, #160]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d127      	bne.n	8003a48 <HAL_RCC_OscConfig+0x240>
 80039f8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003a00:	f7fe fefe 	bl	8002800 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a04:	4e23      	ldr	r6, [pc, #140]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 8003a06:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a0c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003a0e:	079b      	lsls	r3, r3, #30
 8003a10:	d539      	bpl.n	8003a86 <HAL_RCC_OscConfig+0x27e>
    if(pwrclkchanged == SET)
 8003a12:	2f00      	cmp	r7, #0
 8003a14:	f43f af0b 	beq.w	800382e <HAL_RCC_OscConfig+0x26>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4a1e      	ldr	r2, [pc, #120]	; (8003a94 <HAL_RCC_OscConfig+0x28c>)
 8003a1a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	; 0x40
 8003a22:	e704      	b.n	800382e <HAL_RCC_OscConfig+0x26>
    FlagStatus       pwrclkchanged = RESET;
 8003a24:	2700      	movs	r7, #0
 8003a26:	e7df      	b.n	80039e8 <HAL_RCC_OscConfig+0x1e0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a28:	682b      	ldr	r3, [r5, #0]
 8003a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003a30:	f7fe fee6 	bl	8002800 <HAL_GetTick>
 8003a34:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	682b      	ldr	r3, [r5, #0]
 8003a38:	05da      	lsls	r2, r3, #23
 8003a3a:	d4d9      	bmi.n	80039f0 <HAL_RCC_OscConfig+0x1e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a3c:	f7fe fee0 	bl	8002800 <HAL_GetTick>
 8003a40:	1b80      	subs	r0, r0, r6
 8003a42:	2802      	cmp	r0, #2
 8003a44:	d9f7      	bls.n	8003a36 <HAL_RCC_OscConfig+0x22e>
 8003a46:	e72c      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a48:	2b05      	cmp	r3, #5
 8003a4a:	d104      	bne.n	8003a56 <HAL_RCC_OscConfig+0x24e>
 8003a4c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a4e:	f043 0304 	orr.w	r3, r3, #4
 8003a52:	672b      	str	r3, [r5, #112]	; 0x70
 8003a54:	e7d0      	b.n	80039f8 <HAL_RCC_OscConfig+0x1f0>
 8003a56:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003a58:	f022 0201 	bic.w	r2, r2, #1
 8003a5c:	672a      	str	r2, [r5, #112]	; 0x70
 8003a5e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003a60:	f022 0204 	bic.w	r2, r2, #4
 8003a64:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ca      	bne.n	8003a00 <HAL_RCC_OscConfig+0x1f8>
      tickstart = HAL_GetTick();
 8003a6a:	f7fe fec9 	bl	8002800 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a6e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003a72:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a74:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003a76:	0798      	lsls	r0, r3, #30
 8003a78:	d5cb      	bpl.n	8003a12 <HAL_RCC_OscConfig+0x20a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a7a:	f7fe fec1 	bl	8002800 <HAL_GetTick>
 8003a7e:	1b80      	subs	r0, r0, r6
 8003a80:	4540      	cmp	r0, r8
 8003a82:	d9f7      	bls.n	8003a74 <HAL_RCC_OscConfig+0x26c>
 8003a84:	e70d      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fe febb 	bl	8002800 <HAL_GetTick>
 8003a8a:	1b40      	subs	r0, r0, r5
 8003a8c:	4540      	cmp	r0, r8
 8003a8e:	d9bd      	bls.n	8003a0c <HAL_RCC_OscConfig+0x204>
 8003a90:	e707      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
 8003a92:	bf00      	nop
 8003a94:	40023800 	.word	0x40023800
 8003a98:	42470000 	.word	0x42470000
 8003a9c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa0:	4d3b      	ldr	r5, [pc, #236]	; (8003b90 <HAL_RCC_OscConfig+0x388>)
 8003aa2:	68ab      	ldr	r3, [r5, #8]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d040      	beq.n	8003b2e <HAL_RCC_OscConfig+0x326>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <HAL_RCC_OscConfig+0x38c>)
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab4:	d12e      	bne.n	8003b14 <HAL_RCC_OscConfig+0x30c>
        tickstart = HAL_GetTick();
 8003ab6:	f7fe fea3 	bl	8002800 <HAL_GetTick>
 8003aba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abc:	682b      	ldr	r3, [r5, #0]
 8003abe:	0199      	lsls	r1, r3, #6
 8003ac0:	d422      	bmi.n	8003b08 <HAL_RCC_OscConfig+0x300>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac2:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003aca:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003ace:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003ad0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003ad4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003ad6:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8003ada:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003adc:	0852      	lsrs	r2, r2, #1
 8003ade:	3a01      	subs	r2, #1
 8003ae0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ae4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003ae6:	4b2b      	ldr	r3, [pc, #172]	; (8003b94 <HAL_RCC_OscConfig+0x38c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae8:	4d29      	ldr	r5, [pc, #164]	; (8003b90 <HAL_RCC_OscConfig+0x388>)
        __HAL_RCC_PLL_ENABLE();
 8003aea:	2201      	movs	r2, #1
 8003aec:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003aee:	f7fe fe87 	bl	8002800 <HAL_GetTick>
 8003af2:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	019a      	lsls	r2, r3, #6
 8003af8:	f53f ae9d 	bmi.w	8003836 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe fe80 	bl	8002800 <HAL_GetTick>
 8003b00:	1b00      	subs	r0, r0, r4
 8003b02:	2802      	cmp	r0, #2
 8003b04:	d9f6      	bls.n	8003af4 <HAL_RCC_OscConfig+0x2ec>
 8003b06:	e6cc      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b08:	f7fe fe7a 	bl	8002800 <HAL_GetTick>
 8003b0c:	1b80      	subs	r0, r0, r6
 8003b0e:	2802      	cmp	r0, #2
 8003b10:	d9d4      	bls.n	8003abc <HAL_RCC_OscConfig+0x2b4>
 8003b12:	e6c6      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 8003b14:	f7fe fe74 	bl	8002800 <HAL_GetTick>
 8003b18:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1a:	682b      	ldr	r3, [r5, #0]
 8003b1c:	019b      	lsls	r3, r3, #6
 8003b1e:	f57f ae8a 	bpl.w	8003836 <HAL_RCC_OscConfig+0x2e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fe fe6d 	bl	8002800 <HAL_GetTick>
 8003b26:	1b00      	subs	r0, r0, r4
 8003b28:	2802      	cmp	r0, #2
 8003b2a:	d9f6      	bls.n	8003b1a <HAL_RCC_OscConfig+0x312>
 8003b2c:	e6b9      	b.n	80038a2 <HAL_RCC_OscConfig+0x9a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b2e:	2801      	cmp	r0, #1
 8003b30:	f43f aeb8 	beq.w	80038a4 <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8003b34:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b36:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b38:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3c:	4291      	cmp	r1, r2
 8003b3e:	f47f ae99 	bne.w	8003874 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b44:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b48:	428a      	cmp	r2, r1
 8003b4a:	f47f ae93 	bne.w	8003874 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b4e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b50:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003b54:	401a      	ands	r2, r3
 8003b56:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003b5a:	f47f ae8b 	bne.w	8003874 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b5e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b60:	0852      	lsrs	r2, r2, #1
 8003b62:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003b66:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b68:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003b6c:	f47f ae82 	bne.w	8003874 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003b72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b76:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8003b7a:	f47f ae7b 	bne.w	8003874 <HAL_RCC_OscConfig+0x6c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003b80:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b84:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8003b88:	f43f ae55 	beq.w	8003836 <HAL_RCC_OscConfig+0x2e>
 8003b8c:	e672      	b.n	8003874 <HAL_RCC_OscConfig+0x6c>
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800
 8003b94:	42470000 	.word	0x42470000

08003b98 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003b98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003b9c:	461d      	mov	r5, r3
 8003b9e:	4617      	mov	r7, r2
 8003ba0:	4688      	mov	r8, r1
 8003ba2:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ba4:	f7fe fe2c 	bl	8002800 <HAL_GetTick>
 8003ba8:	443d      	add	r5, r7
 8003baa:	1a2c      	subs	r4, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003bac:	f7fe fe28 	bl	8002800 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bb0:	4b22      	ldr	r3, [pc, #136]	; (8003c3c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8003bb8:	4605      	mov	r5, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bba:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bbc:	6832      	ldr	r2, [r6, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8003bbe:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bc0:	6893      	ldr	r3, [r2, #8]
 8003bc2:	ea38 0303 	bics.w	r3, r8, r3
 8003bc6:	d001      	beq.n	8003bcc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8003bc8:	2000      	movs	r0, #0
 8003bca:	e02d      	b.n	8003c28 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x90>
    if (Timeout != HAL_MAX_DELAY)
 8003bcc:	1c7b      	adds	r3, r7, #1
 8003bce:	d0f7      	beq.n	8003bc0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd0:	f7fe fe16 	bl	8002800 <HAL_GetTick>
 8003bd4:	1b40      	subs	r0, r0, r5
 8003bd6:	42a0      	cmp	r0, r4
 8003bd8:	d329      	bcc.n	8003c2e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bda:	6833      	ldr	r3, [r6, #0]
 8003bdc:	685a      	ldr	r2, [r3, #4]
 8003bde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003be2:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be4:	6872      	ldr	r2, [r6, #4]
 8003be6:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003bea:	d10a      	bne.n	8003c02 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 8003bec:	68b2      	ldr	r2, [r6, #8]
 8003bee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003bf2:	d002      	beq.n	8003bfa <SPI_WaitFlagStateUntilTimeout.constprop.0+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bf4:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003bf8:	d103      	bne.n	8003c02 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c00:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c02:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 8003c04:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003c08:	d107      	bne.n	8003c1a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
          SPI_RESET_CRC(hspi);
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c18:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8003c20:	2300      	movs	r3, #0
 8003c22:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
        return HAL_TIMEOUT;
 8003c26:	2003      	movs	r0, #3
}
 8003c28:	b002      	add	sp, #8
 8003c2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (count == 0U)
 8003c2e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003c30:	2b00      	cmp	r3, #0
      count--;
 8003c32:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8003c34:	bf08      	it	eq
 8003c36:	2400      	moveq	r4, #0
      count--;
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	e7bf      	b.n	8003bbc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8003c3c:	20000010 	.word	0x20000010

08003c40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c42:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c44:	4a12      	ldr	r2, [pc, #72]	; (8003c90 <SPI_EndRxTxTransaction+0x50>)
 8003c46:	6815      	ldr	r5, [r2, #0]
 8003c48:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <SPI_EndRxTxTransaction+0x54>)
 8003c4a:	fbb5 f5f2 	udiv	r5, r5, r2
 8003c4e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c52:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c54:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c56:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c58:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8003c5c:	4604      	mov	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c5e:	d10b      	bne.n	8003c78 <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c60:	460a      	mov	r2, r1
 8003c62:	2180      	movs	r1, #128	; 0x80
 8003c64:	f7ff ff98 	bl	8003b98 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003c68:	b178      	cbz	r0, 8003c8a <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003c6c:	f043 0320 	orr.w	r3, r3, #32
 8003c70:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c72:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8003c74:	b003      	add	sp, #12
 8003c76:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8003c78:	9b01      	ldr	r3, [sp, #4]
 8003c7a:	b133      	cbz	r3, 8003c8a <SPI_EndRxTxTransaction+0x4a>
      count--;
 8003c7c:	9b01      	ldr	r3, [sp, #4]
 8003c7e:	3b01      	subs	r3, #1
 8003c80:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	061b      	lsls	r3, r3, #24
 8003c88:	d4f6      	bmi.n	8003c78 <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8003c8a:	2000      	movs	r0, #0
 8003c8c:	e7f2      	b.n	8003c74 <SPI_EndRxTxTransaction+0x34>
 8003c8e:	bf00      	nop
 8003c90:	20000010 	.word	0x20000010
 8003c94:	016e3600 	.word	0x016e3600

08003c98 <HAL_SPI_Init>:
{
 8003c98:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	d055      	beq.n	8003d4c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ca0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d14e      	bne.n	8003d44 <HAL_SPI_Init+0xac>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ca6:	6842      	ldr	r2, [r0, #4]
 8003ca8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003cac:	d000      	beq.n	8003cb0 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cae:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cb4:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003cb8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003cbc:	b923      	cbnz	r3, 8003cc8 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8003cbe:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	f7fe fa66 	bl	8002194 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8003cc8:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cca:	68a0      	ldr	r0, [r4, #8]
 8003ccc:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8003cd4:	680b      	ldr	r3, [r1, #0]
 8003cd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cda:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003cdc:	6863      	ldr	r3, [r4, #4]
 8003cde:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8003ce2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003ce6:	4303      	orrs	r3, r0
 8003ce8:	68e0      	ldr	r0, [r4, #12]
 8003cea:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8003cee:	4303      	orrs	r3, r0
 8003cf0:	6920      	ldr	r0, [r4, #16]
 8003cf2:	f000 0002 	and.w	r0, r0, #2
 8003cf6:	4303      	orrs	r3, r0
 8003cf8:	6960      	ldr	r0, [r4, #20]
 8003cfa:	f000 0001 	and.w	r0, r0, #1
 8003cfe:	4303      	orrs	r3, r0
 8003d00:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8003d04:	4303      	orrs	r3, r0
 8003d06:	69e0      	ldr	r0, [r4, #28]
 8003d08:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003d0c:	4303      	orrs	r3, r0
 8003d0e:	6a20      	ldr	r0, [r4, #32]
 8003d10:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003d14:	4303      	orrs	r3, r0
 8003d16:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003d18:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003d1c:	4303      	orrs	r3, r0
 8003d1e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d20:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d22:	0c12      	lsrs	r2, r2, #16
 8003d24:	f003 0310 	and.w	r3, r3, #16
 8003d28:	f002 0204 	and.w	r2, r2, #4
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d30:	69cb      	ldr	r3, [r1, #28]
 8003d32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d36:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d38:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003d3a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d3c:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d3e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003d42:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d44:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d4a:	e7b1      	b.n	8003cb0 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003d4c:	2001      	movs	r0, #1
 8003d4e:	e7f8      	b.n	8003d42 <HAL_SPI_Init+0xaa>

08003d50 <HAL_SPI_Transmit_DMA>:
{
 8003d50:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hspi);
 8003d52:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8003d56:	2b01      	cmp	r3, #1
{
 8003d58:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003d5a:	d054      	beq.n	8003e06 <HAL_SPI_Transmit_DMA+0xb6>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  if (hspi->State != HAL_SPI_STATE_READY)
 8003d62:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	b2dd      	uxtb	r5, r3
 8003d6a:	d14a      	bne.n	8003e02 <HAL_SPI_Transmit_DMA+0xb2>
  if ((pData == NULL) || (Size == 0U))
 8003d6c:	2900      	cmp	r1, #0
 8003d6e:	d031      	beq.n	8003dd4 <HAL_SPI_Transmit_DMA+0x84>
 8003d70:	2a00      	cmp	r2, #0
 8003d72:	d02f      	beq.n	8003dd4 <HAL_SPI_Transmit_DMA+0x84>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d74:	2303      	movs	r3, #3
 8003d76:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003d7e:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
  hspi->TxXferCount = Size;
 8003d82:	86c2      	strh	r2, [r0, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d84:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d86:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d88:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8a:	6883      	ldr	r3, [r0, #8]
  hspi->TxXferSize  = Size;
 8003d8c:	8682      	strh	r2, [r0, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 8003d92:	6802      	ldr	r2, [r0, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d94:	6301      	str	r1, [r0, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d96:	d107      	bne.n	8003da8 <HAL_SPI_Transmit_DMA+0x58>
    __HAL_SPI_DISABLE(hspi);
 8003d98:	6813      	ldr	r3, [r2, #0]
 8003d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d9e:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003da0:	6813      	ldr	r3, [r2, #0]
 8003da2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003da6:	6013      	str	r3, [r2, #0]
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8003da8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003daa:	4b18      	ldr	r3, [pc, #96]	; (8003e0c <HAL_SPI_Transmit_DMA+0xbc>)
 8003dac:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8003dae:	4b18      	ldr	r3, [pc, #96]	; (8003e10 <HAL_SPI_Transmit_DMA+0xc0>)
 8003db0:	63c3      	str	r3, [r0, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8003db2:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_SPI_Transmit_DMA+0xc4>)
 8003db4:	64c3      	str	r3, [r0, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback = NULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	6503      	str	r3, [r0, #80]	; 0x50
                                 hspi->TxXferCount))
 8003dba:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003dbc:	320c      	adds	r2, #12
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	f7ff f946 	bl	8003050 <HAL_DMA_Start_IT>
 8003dc4:	b158      	cbz	r0, 8003dde <HAL_SPI_Transmit_DMA+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003dc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003dc8:	f043 0310 	orr.w	r3, r3, #16
 8003dcc:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8003dda:	4628      	mov	r0, r5
 8003ddc:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003de4:	bf5e      	ittt	pl
 8003de6:	681a      	ldrpl	r2, [r3, #0]
 8003de8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003dec:	601a      	strpl	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	f042 0220 	orr.w	r2, r2, #32
 8003df4:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	f042 0202 	orr.w	r2, r2, #2
 8003dfc:	605a      	str	r2, [r3, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dfe:	2500      	movs	r5, #0
 8003e00:	e7e8      	b.n	8003dd4 <HAL_SPI_Transmit_DMA+0x84>
    errorcode = HAL_BUSY;
 8003e02:	2502      	movs	r5, #2
 8003e04:	e7e6      	b.n	8003dd4 <HAL_SPI_Transmit_DMA+0x84>
  __HAL_LOCK(hspi);
 8003e06:	2502      	movs	r5, #2
 8003e08:	e7e7      	b.n	8003dda <HAL_SPI_Transmit_DMA+0x8a>
 8003e0a:	bf00      	nop
 8003e0c:	08003e1d 	.word	0x08003e1d
 8003e10:	08003e4b 	.word	0x08003e4b
 8003e14:	08003e29 	.word	0x08003e29

08003e18 <HAL_SPI_TxCpltCallback>:
 8003e18:	4770      	bx	lr

08003e1a <HAL_SPI_TxHalfCpltCallback>:
 8003e1a:	4770      	bx	lr

08003e1c <SPI_DMAHalfTransmitCplt>:
{
 8003e1c:	b508      	push	{r3, lr}
  HAL_SPI_TxHalfCpltCallback(hspi);
 8003e1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003e20:	f7ff fffb 	bl	8003e1a <HAL_SPI_TxHalfCpltCallback>
}
 8003e24:	bd08      	pop	{r3, pc}

08003e26 <HAL_SPI_ErrorCallback>:
 8003e26:	4770      	bx	lr

08003e28 <SPI_DMAError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e28:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e2a:	6802      	ldr	r2, [r0, #0]
{
 8003e2c:	b508      	push	{r3, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8003e2e:	6853      	ldr	r3, [r2, #4]
 8003e30:	f023 0303 	bic.w	r3, r3, #3
 8003e34:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003e36:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8003e38:	f043 0310 	orr.w	r3, r3, #16
 8003e3c:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  HAL_SPI_ErrorCallback(hspi);
 8003e44:	f7ff ffef 	bl	8003e26 <HAL_SPI_ErrorCallback>
}
 8003e48:	bd08      	pop	{r3, pc}

08003e4a <SPI_DMATransmitCplt>:
{
 8003e4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003e4c:	4605      	mov	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e4e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  tickstart = HAL_GetTick();
 8003e50:	f7fe fcd6 	bl	8002800 <HAL_GetTick>
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e54:	682b      	ldr	r3, [r5, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	05db      	lsls	r3, r3, #23
  tickstart = HAL_GetTick();
 8003e5a:	4602      	mov	r2, r0
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8003e5c:	d426      	bmi.n	8003eac <SPI_DMATransmitCplt+0x62>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	6859      	ldr	r1, [r3, #4]
 8003e62:	f021 0120 	bic.w	r1, r1, #32
 8003e66:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8003e68:	6859      	ldr	r1, [r3, #4]
 8003e6a:	f021 0102 	bic.w	r1, r1, #2
 8003e6e:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003e70:	4620      	mov	r0, r4
 8003e72:	2164      	movs	r1, #100	; 0x64
 8003e74:	f7ff fee4 	bl	8003c40 <SPI_EndRxTxTransaction>
 8003e78:	b118      	cbz	r0, 8003e82 <SPI_DMATransmitCplt+0x38>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003e7c:	f043 0320 	orr.w	r3, r3, #32
 8003e80:	6563      	str	r3, [r4, #84]	; 0x54
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e82:	68a3      	ldr	r3, [r4, #8]
 8003e84:	b933      	cbnz	r3, 8003e94 <SPI_DMATransmitCplt+0x4a>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	6823      	ldr	r3, [r4, #0]
 8003e8a:	68da      	ldr	r2, [r3, #12]
 8003e8c:	9201      	str	r2, [sp, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	9b01      	ldr	r3, [sp, #4]
    hspi->TxXferCount = 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003ea0:	b123      	cbz	r3, 8003eac <SPI_DMATransmitCplt+0x62>
      HAL_SPI_ErrorCallback(hspi);
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f7ff ffbf 	bl	8003e26 <HAL_SPI_ErrorCallback>
}
 8003ea8:	b003      	add	sp, #12
 8003eaa:	bd30      	pop	{r4, r5, pc}
  HAL_SPI_TxCpltCallback(hspi);
 8003eac:	4620      	mov	r0, r4
 8003eae:	f7ff ffb3 	bl	8003e18 <HAL_SPI_TxCpltCallback>
 8003eb2:	e7f9      	b.n	8003ea8 <SPI_DMATransmitCplt+0x5e>

08003eb4 <HAL_SPI_GetState>:
  return hspi->State;
 8003eb4:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8003eb8:	4770      	bx	lr
	...

08003ebc <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ebc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d12c      	bne.n	8003f1e <HAL_TIM_Base_Start+0x62>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ec6:	4a17      	ldr	r2, [pc, #92]	; (8003f24 <HAL_TIM_Base_Start+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	6803      	ldr	r3, [r0, #0]
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d01a      	beq.n	8003f08 <HAL_TIM_Base_Start+0x4c>
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d017      	beq.n	8003f08 <HAL_TIM_Base_Start+0x4c>
 8003ed8:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d013      	beq.n	8003f08 <HAL_TIM_Base_Start+0x4c>
 8003ee0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00f      	beq.n	8003f08 <HAL_TIM_Base_Start+0x4c>
 8003ee8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00b      	beq.n	8003f08 <HAL_TIM_Base_Start+0x4c>
 8003ef0:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d007      	beq.n	8003f08 <HAL_TIM_Base_Start+0x4c>
 8003ef8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d003      	beq.n	8003f08 <HAL_TIM_Base_Start+0x4c>
 8003f00:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d104      	bne.n	8003f12 <HAL_TIM_Base_Start+0x56>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0e:	2a06      	cmp	r2, #6
 8003f10:	d003      	beq.n	8003f1a <HAL_TIM_Base_Start+0x5e>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f12:	681a      	ldr	r2, [r3, #0]
 8003f14:	f042 0201 	orr.w	r2, r2, #1
 8003f18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f1a:	2000      	movs	r0, #0
}
 8003f1c:	4770      	bx	lr
    return HAL_ERROR;
 8003f1e:	2001      	movs	r0, #1
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop
 8003f24:	40010000 	.word	0x40010000

08003f28 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f28:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d130      	bne.n	8003f92 <HAL_TIM_Base_Start_IT+0x6a>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f30:	2302      	movs	r3, #2
 8003f32:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003f36:	6803      	ldr	r3, [r0, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f40:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <HAL_TIM_Base_Start_IT+0x70>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d01a      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x54>
 8003f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4a:	d017      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x54>
 8003f4c:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d013      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x54>
 8003f54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d00f      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x54>
 8003f5c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d00b      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x54>
 8003f64:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d007      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x54>
 8003f6c:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d003      	beq.n	8003f7c <HAL_TIM_Base_Start_IT+0x54>
 8003f74:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_Base_Start_IT+0x5e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f82:	2a06      	cmp	r2, #6
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_Base_Start_IT+0x66>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	f042 0201 	orr.w	r2, r2, #1
 8003f8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f8e:	2000      	movs	r0, #0
}
 8003f90:	4770      	bx	lr
    return HAL_ERROR;
 8003f92:	2001      	movs	r0, #1
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40010000 	.word	0x40010000

08003f9c <HAL_TIM_OC_DelayElapsedCallback>:
 8003f9c:	4770      	bx	lr

08003f9e <HAL_TIM_IC_CaptureCallback>:
 8003f9e:	4770      	bx	lr

08003fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_TIM_TriggerCallback>:
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fa4:	6803      	ldr	r3, [r0, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	0791      	lsls	r1, r2, #30
{
 8003faa:	b510      	push	{r4, lr}
 8003fac:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003fae:	d50e      	bpl.n	8003fce <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	0792      	lsls	r2, r2, #30
 8003fb4:	d50b      	bpl.n	8003fce <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003fb6:	f06f 0202 	mvn.w	r2, #2
 8003fba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	079b      	lsls	r3, r3, #30
 8003fc4:	d077      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	f7ff ffea 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fce:	6823      	ldr	r3, [r4, #0]
 8003fd0:	691a      	ldr	r2, [r3, #16]
 8003fd2:	0750      	lsls	r0, r2, #29
 8003fd4:	d510      	bpl.n	8003ff8 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	0751      	lsls	r1, r2, #29
 8003fda:	d50d      	bpl.n	8003ff8 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fdc:	f06f 0204 	mvn.w	r2, #4
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fec:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fee:	d068      	beq.n	80040c2 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff0:	f7ff ffd5 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff8:	6823      	ldr	r3, [r4, #0]
 8003ffa:	691a      	ldr	r2, [r3, #16]
 8003ffc:	0712      	lsls	r2, r2, #28
 8003ffe:	d50f      	bpl.n	8004020 <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004000:	68da      	ldr	r2, [r3, #12]
 8004002:	0710      	lsls	r0, r2, #28
 8004004:	d50c      	bpl.n	8004020 <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004006:	f06f 0208 	mvn.w	r2, #8
 800400a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800400c:	2204      	movs	r2, #4
 800400e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004010:	69db      	ldr	r3, [r3, #28]
 8004012:	0799      	lsls	r1, r3, #30
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004014:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004016:	d05a      	beq.n	80040ce <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8004018:	f7ff ffc1 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401c:	2300      	movs	r3, #0
 800401e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004020:	6823      	ldr	r3, [r4, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	06d2      	lsls	r2, r2, #27
 8004026:	d510      	bpl.n	800404a <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004028:	68da      	ldr	r2, [r3, #12]
 800402a:	06d0      	lsls	r0, r2, #27
 800402c:	d50d      	bpl.n	800404a <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800402e:	f06f 0210 	mvn.w	r2, #16
 8004032:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004034:	2208      	movs	r2, #8
 8004036:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f413 7f40 	tst.w	r3, #768	; 0x300
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800403e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004040:	d04b      	beq.n	80040da <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	f7ff ffac 	bl	8003f9e <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004046:	2300      	movs	r3, #0
 8004048:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800404a:	6823      	ldr	r3, [r4, #0]
 800404c:	691a      	ldr	r2, [r3, #16]
 800404e:	07d1      	lsls	r1, r2, #31
 8004050:	d508      	bpl.n	8004064 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004052:	68da      	ldr	r2, [r3, #12]
 8004054:	07d2      	lsls	r2, r2, #31
 8004056:	d505      	bpl.n	8004064 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004058:	f06f 0201 	mvn.w	r2, #1
 800405c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800405e:	4620      	mov	r0, r4
 8004060:	f7fd ffb2 	bl	8001fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004064:	6823      	ldr	r3, [r4, #0]
 8004066:	691a      	ldr	r2, [r3, #16]
 8004068:	0610      	lsls	r0, r2, #24
 800406a:	d508      	bpl.n	800407e <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800406c:	68da      	ldr	r2, [r3, #12]
 800406e:	0611      	lsls	r1, r2, #24
 8004070:	d505      	bpl.n	800407e <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004072:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004078:	4620      	mov	r0, r4
 800407a:	f000 f9ac 	bl	80043d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800407e:	6823      	ldr	r3, [r4, #0]
 8004080:	691a      	ldr	r2, [r3, #16]
 8004082:	0652      	lsls	r2, r2, #25
 8004084:	d508      	bpl.n	8004098 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	0650      	lsls	r0, r2, #25
 800408a:	d505      	bpl.n	8004098 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800408c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004092:	4620      	mov	r0, r4
 8004094:	f7ff ff85 	bl	8003fa2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	0691      	lsls	r1, r2, #26
 800409e:	d522      	bpl.n	80040e6 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	0692      	lsls	r2, r2, #26
 80040a4:	d51f      	bpl.n	80040e6 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040a6:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040ac:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 80040b2:	f000 b98f 	b.w	80043d4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	f7ff ff71 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ba:	4620      	mov	r0, r4
 80040bc:	f7ff ff70 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
 80040c0:	e783      	b.n	8003fca <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c2:	f7ff ff6b 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c6:	4620      	mov	r0, r4
 80040c8:	f7ff ff6a 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
 80040cc:	e792      	b.n	8003ff4 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ce:	f7ff ff65 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d2:	4620      	mov	r0, r4
 80040d4:	f7ff ff64 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
 80040d8:	e7a0      	b.n	800401c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040da:	f7ff ff5f 	bl	8003f9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040de:	4620      	mov	r0, r4
 80040e0:	f7ff ff5e 	bl	8003fa0 <HAL_TIM_PWM_PulseFinishedCallback>
 80040e4:	e7af      	b.n	8004046 <HAL_TIM_IRQHandler+0xa2>
}
 80040e6:	bd10      	pop	{r4, pc}

080040e8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e8:	4a30      	ldr	r2, [pc, #192]	; (80041ac <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80040ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040ec:	4290      	cmp	r0, r2
 80040ee:	d012      	beq.n	8004116 <TIM_Base_SetConfig+0x2e>
 80040f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80040f4:	d00f      	beq.n	8004116 <TIM_Base_SetConfig+0x2e>
 80040f6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80040fa:	4290      	cmp	r0, r2
 80040fc:	d00b      	beq.n	8004116 <TIM_Base_SetConfig+0x2e>
 80040fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004102:	4290      	cmp	r0, r2
 8004104:	d007      	beq.n	8004116 <TIM_Base_SetConfig+0x2e>
 8004106:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800410a:	4290      	cmp	r0, r2
 800410c:	d003      	beq.n	8004116 <TIM_Base_SetConfig+0x2e>
 800410e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004112:	4290      	cmp	r0, r2
 8004114:	d119      	bne.n	800414a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8004116:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800411c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800411e:	4a23      	ldr	r2, [pc, #140]	; (80041ac <TIM_Base_SetConfig+0xc4>)
 8004120:	4290      	cmp	r0, r2
 8004122:	d029      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 8004124:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004128:	d026      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 800412a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800412e:	4290      	cmp	r0, r2
 8004130:	d022      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 8004132:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004136:	4290      	cmp	r0, r2
 8004138:	d01e      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 800413a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800413e:	4290      	cmp	r0, r2
 8004140:	d01a      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 8004142:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8004146:	4290      	cmp	r0, r2
 8004148:	d016      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 800414a:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <TIM_Base_SetConfig+0xc8>)
 800414c:	4290      	cmp	r0, r2
 800414e:	d013      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 8004150:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004154:	4290      	cmp	r0, r2
 8004156:	d00f      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 8004158:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800415c:	4290      	cmp	r0, r2
 800415e:	d00b      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 8004160:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8004164:	4290      	cmp	r0, r2
 8004166:	d007      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 8004168:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800416c:	4290      	cmp	r0, r2
 800416e:	d003      	beq.n	8004178 <TIM_Base_SetConfig+0x90>
 8004170:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004174:	4290      	cmp	r0, r2
 8004176:	d103      	bne.n	8004180 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004178:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800417a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	694a      	ldr	r2, [r1, #20]
 8004182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004186:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8004188:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800418a:	688b      	ldr	r3, [r1, #8]
 800418c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800418e:	680b      	ldr	r3, [r1, #0]
 8004190:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004192:	4b06      	ldr	r3, [pc, #24]	; (80041ac <TIM_Base_SetConfig+0xc4>)
 8004194:	4298      	cmp	r0, r3
 8004196:	d003      	beq.n	80041a0 <TIM_Base_SetConfig+0xb8>
 8004198:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800419c:	4298      	cmp	r0, r3
 800419e:	d101      	bne.n	80041a4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a0:	690b      	ldr	r3, [r1, #16]
 80041a2:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a4:	2301      	movs	r3, #1
 80041a6:	6143      	str	r3, [r0, #20]
}
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40014000 	.word	0x40014000

080041b4 <HAL_TIM_Base_Init>:
{
 80041b4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80041b6:	4604      	mov	r4, r0
 80041b8:	b330      	cbz	r0, 8004208 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80041ba:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80041be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80041c2:	b91b      	cbnz	r3, 80041cc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80041c4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80041c8:	f7fe f9b0 	bl	800252c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80041cc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041ce:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80041d0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041d4:	1d21      	adds	r1, r4, #4
 80041d6:	f7ff ff87 	bl	80040e8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041da:	2301      	movs	r3, #1
 80041dc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80041e0:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80041e6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80041ea:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80041ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80041fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004202:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8004206:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004208:	2001      	movs	r0, #1
 800420a:	e7fc      	b.n	8004206 <HAL_TIM_Base_Init+0x52>

0800420c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800420c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004210:	4311      	orrs	r1, r2
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004212:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004216:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 800421a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421c:	6083      	str	r3, [r0, #8]
}
 800421e:	bd10      	pop	{r4, pc}

08004220 <HAL_TIM_ConfigClockSource>:
{
 8004220:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8004222:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004226:	2b01      	cmp	r3, #1
{
 8004228:	4604      	mov	r4, r0
 800422a:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 800422e:	f000 8091 	beq.w	8004354 <HAL_TIM_ConfigClockSource+0x134>
 8004232:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8004234:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004238:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800423c:	6800      	ldr	r0, [r0, #0]
 800423e:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004240:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004244:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8004248:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800424a:	680b      	ldr	r3, [r1, #0]
 800424c:	2b60      	cmp	r3, #96	; 0x60
 800424e:	d052      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0xd6>
 8004250:	d833      	bhi.n	80042ba <HAL_TIM_ConfigClockSource+0x9a>
 8004252:	2b40      	cmp	r3, #64	; 0x40
 8004254:	d067      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x106>
 8004256:	d816      	bhi.n	8004286 <HAL_TIM_ConfigClockSource+0x66>
 8004258:	2b20      	cmp	r3, #32
 800425a:	d00d      	beq.n	8004278 <HAL_TIM_ConfigClockSource+0x58>
 800425c:	d80a      	bhi.n	8004274 <HAL_TIM_ConfigClockSource+0x54>
 800425e:	f033 0110 	bics.w	r1, r3, #16
 8004262:	d009      	beq.n	8004278 <HAL_TIM_ConfigClockSource+0x58>
  htim->State = HAL_TIM_STATE_READY;
 8004264:	2301      	movs	r3, #1
 8004266:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800426a:	2300      	movs	r3, #0
 800426c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8004270:	4610      	mov	r0, r2
 8004272:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8004274:	2b30      	cmp	r3, #48	; 0x30
 8004276:	d1f5      	bne.n	8004264 <HAL_TIM_ConfigClockSource+0x44>
  tmpsmcr = TIMx->SMCR;
 8004278:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800427a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800427e:	4313      	orrs	r3, r2
 8004280:	f043 0307 	orr.w	r3, r3, #7
 8004284:	e017      	b.n	80042b6 <HAL_TIM_ConfigClockSource+0x96>
  switch (sClockSourceConfig->ClockSource)
 8004286:	2b50      	cmp	r3, #80	; 0x50
 8004288:	d1ec      	bne.n	8004264 <HAL_TIM_ConfigClockSource+0x44>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800428a:	684a      	ldr	r2, [r1, #4]
 800428c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800428e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004290:	6a05      	ldr	r5, [r0, #32]
 8004292:	f025 0501 	bic.w	r5, r5, #1
 8004296:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004298:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800429a:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800429e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042a2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80042a6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80042a8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80042aa:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80042ac:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80042ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042b2:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80042b6:	6083      	str	r3, [r0, #8]
 80042b8:	e011      	b.n	80042de <HAL_TIM_ConfigClockSource+0xbe>
  switch (sClockSourceConfig->ClockSource)
 80042ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042be:	d00e      	beq.n	80042de <HAL_TIM_ConfigClockSource+0xbe>
 80042c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c4:	d00d      	beq.n	80042e2 <HAL_TIM_ConfigClockSource+0xc2>
 80042c6:	2b70      	cmp	r3, #112	; 0x70
 80042c8:	d1cc      	bne.n	8004264 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80042ca:	68cb      	ldr	r3, [r1, #12]
 80042cc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80042d0:	f7ff ff9c 	bl	800420c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042dc:	6093      	str	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2200      	movs	r2, #0
 80042e0:	e7c0      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x44>
      TIM_ETR_SetConfig(htim->Instance,
 80042e2:	68cb      	ldr	r3, [r1, #12]
 80042e4:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80042e8:	f7ff ff90 	bl	800420c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042ec:	6822      	ldr	r2, [r4, #0]
 80042ee:	6893      	ldr	r3, [r2, #8]
 80042f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042f4:	e7f2      	b.n	80042dc <HAL_TIM_ConfigClockSource+0xbc>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042f6:	684d      	ldr	r5, [r1, #4]
 80042f8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042fa:	6a01      	ldr	r1, [r0, #32]
 80042fc:	f021 0110 	bic.w	r1, r1, #16
 8004300:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8004304:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004306:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800430a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800430e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004312:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8004316:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8004318:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800431a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800431c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004320:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8004324:	e7c7      	b.n	80042b6 <HAL_TIM_ConfigClockSource+0x96>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004326:	684a      	ldr	r2, [r1, #4]
 8004328:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800432a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432c:	6a05      	ldr	r5, [r0, #32]
 800432e:	f025 0501 	bic.w	r5, r5, #1
 8004332:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004334:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004336:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800433a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800433e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8004342:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8004344:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8004346:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8004348:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800434a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800434e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8004352:	e7b0      	b.n	80042b6 <HAL_TIM_ConfigClockSource+0x96>
  __HAL_LOCK(htim);
 8004354:	461a      	mov	r2, r3
 8004356:	e78b      	b.n	8004270 <HAL_TIM_ConfigClockSource+0x50>

08004358 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004358:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800435e:	2b01      	cmp	r3, #1
 8004360:	f04f 0302 	mov.w	r3, #2
 8004364:	d032      	beq.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0x74>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004366:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800436a:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800436c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 = htim->Instance->CR2;
 800436e:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8004370:	689a      	ldr	r2, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8004372:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004376:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004378:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437a:	4c15      	ldr	r4, [pc, #84]	; (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x78>)
 800437c:	42a3      	cmp	r3, r4
 800437e:	d01a      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004384:	d017      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004386:	f5a4 447c 	sub.w	r4, r4, #64512	; 0xfc00
 800438a:	42a3      	cmp	r3, r4
 800438c:	d013      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800438e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8004392:	42a3      	cmp	r3, r4
 8004394:	d00f      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8004396:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800439a:	42a3      	cmp	r3, r4
 800439c:	d00b      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 800439e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80043a2:	42a3      	cmp	r3, r4
 80043a4:	d007      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80043a6:	f504 5470 	add.w	r4, r4, #15360	; 0x3c00
 80043aa:	42a3      	cmp	r3, r4
 80043ac:	d003      	beq.n	80043b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 80043ae:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 80043b2:	42a3      	cmp	r3, r4
 80043b4:	d104      	bne.n	80043c0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b6:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043bc:	430a      	orrs	r2, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	2301      	movs	r3, #1
 80043c2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c6:	2300      	movs	r3, #0
 80043c8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80043cc:	4618      	mov	r0, r3

  return HAL_OK;
}
 80043ce:	bd30      	pop	{r4, r5, pc}
 80043d0:	40010000 	.word	0x40010000

080043d4 <HAL_TIMEx_CommutCallback>:
 80043d4:	4770      	bx	lr

080043d6 <HAL_TIMEx_BreakCallback>:
 80043d6:	4770      	bx	lr

080043d8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043da:	f102 030c 	add.w	r3, r2, #12
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	320c      	adds	r2, #12
 80043e8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 80043ec:	6802      	ldr	r2, [r0, #0]
 80043ee:	2900      	cmp	r1, #0
 80043f0:	d1f2      	bne.n	80043d8 <UART_EndRxTransfer>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f2:	f102 0314 	add.w	r3, r2, #20
 80043f6:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043fa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	f102 0c14 	add.w	ip, r2, #20
 8004402:	e84c 3100 	strex	r1, r3, [ip]
 8004406:	2900      	cmp	r1, #0
 8004408:	d1f3      	bne.n	80043f2 <UART_EndRxTransfer+0x1a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800440a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800440c:	2b01      	cmp	r3, #1
 800440e:	d10b      	bne.n	8004428 <UART_EndRxTransfer+0x50>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	f102 030c 	add.w	r3, r2, #12
 8004414:	e853 3f00 	ldrex	r3, [r3]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	f102 0c0c 	add.w	ip, r2, #12
 8004420:	e84c 3100 	strex	r1, r3, [ip]
 8004424:	2900      	cmp	r1, #0
 8004426:	d1f3      	bne.n	8004410 <UART_EndRxTransfer+0x38>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004428:	2320      	movs	r3, #32
 800442a:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442e:	2300      	movs	r3, #0
 8004430:	6303      	str	r3, [r0, #48]	; 0x30
}
 8004432:	4770      	bx	lr

08004434 <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004434:	6802      	ldr	r2, [r0, #0]
 8004436:	68c1      	ldr	r1, [r0, #12]
 8004438:	6913      	ldr	r3, [r2, #16]
 800443a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800443e:	430b      	orrs	r3, r1
{
 8004440:	b570      	push	{r4, r5, r6, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004442:	6113      	str	r3, [r2, #16]
{
 8004444:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004446:	6883      	ldr	r3, [r0, #8]
 8004448:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800444a:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800444c:	4303      	orrs	r3, r0
 800444e:	6968      	ldr	r0, [r5, #20]
 8004450:	4303      	orrs	r3, r0
 8004452:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004454:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8004458:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800445c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800445e:	430b      	orrs	r3, r1
 8004460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004462:	6953      	ldr	r3, [r2, #20]
 8004464:	69a9      	ldr	r1, [r5, #24]
 8004466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800446a:	430b      	orrs	r3, r1
 800446c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800446e:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <UART_SetConfig+0xb8>)
 8004470:	429a      	cmp	r2, r3
 8004472:	d003      	beq.n	800447c <UART_SetConfig+0x48>
 8004474:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004478:	429a      	cmp	r2, r3
 800447a:	d123      	bne.n	80044c4 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800447c:	f7ff f96c 	bl	8003758 <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004480:	69eb      	ldr	r3, [r5, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004482:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004488:	e9d5 4600 	ldrd	r4, r6, [r5]
 800448c:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004490:	d11b      	bne.n	80044ca <UART_SetConfig+0x96>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004492:	19b2      	adds	r2, r6, r6
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	415b      	adcs	r3, r3
 800449a:	f7fc fc75 	bl	8000d88 <__aeabi_uldivmod>
 800449e:	2164      	movs	r1, #100	; 0x64
 80044a0:	fbb0 f5f1 	udiv	r5, r0, r1
 80044a4:	fb01 0315 	mls	r3, r1, r5, r0
 80044a8:	00db      	lsls	r3, r3, #3
 80044aa:	3332      	adds	r3, #50	; 0x32
 80044ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80044b0:	f003 0207 	and.w	r2, r3, #7
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 80044ba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80044be:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044c0:	60a3      	str	r3, [r4, #8]
  }
}
 80044c2:	bd70      	pop	{r4, r5, r6, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 80044c4:	f7ff f938 	bl	8003738 <HAL_RCC_GetPCLK1Freq>
 80044c8:	e7da      	b.n	8004480 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044ca:	00b2      	lsls	r2, r6, #2
 80044cc:	0fb3      	lsrs	r3, r6, #30
 80044ce:	f7fc fc5b 	bl	8000d88 <__aeabi_uldivmod>
 80044d2:	2264      	movs	r2, #100	; 0x64
 80044d4:	fbb0 f1f2 	udiv	r1, r0, r2
 80044d8:	fb02 0311 	mls	r3, r2, r1, r0
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	3332      	adds	r3, #50	; 0x32
 80044e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044e4:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80044e8:	e7ea      	b.n	80044c0 <UART_SetConfig+0x8c>
 80044ea:	bf00      	nop
 80044ec:	40011000 	.word	0x40011000

080044f0 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	4604      	mov	r4, r0
 80044f4:	460e      	mov	r6, r1
 80044f6:	4617      	mov	r7, r2
 80044f8:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044fa:	6822      	ldr	r2, [r4, #0]
 80044fc:	6813      	ldr	r3, [r2, #0]
 80044fe:	ea36 0303 	bics.w	r3, r6, r3
 8004502:	d101      	bne.n	8004508 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8004504:	2000      	movs	r0, #0
 8004506:	e028      	b.n	800455a <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8004508:	1c6b      	adds	r3, r5, #1
 800450a:	d0f7      	beq.n	80044fc <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800450c:	b125      	cbz	r5, 8004518 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 800450e:	f7fe f977 	bl	8002800 <HAL_GetTick>
 8004512:	1bc0      	subs	r0, r0, r7
 8004514:	4285      	cmp	r5, r0
 8004516:	d2f0      	bcs.n	80044fa <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004518:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800451a:	f102 030c 	add.w	r3, r2, #12
 800451e:	e853 3f00 	ldrex	r3, [r3]
 8004522:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004526:	320c      	adds	r2, #12
 8004528:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 800452c:	6821      	ldr	r1, [r4, #0]
 800452e:	2800      	cmp	r0, #0
 8004530:	d1f2      	bne.n	8004518 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	f101 0314 	add.w	r3, r1, #20
 8004536:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800453a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	f101 0014 	add.w	r0, r1, #20
 8004542:	e840 3200 	strex	r2, r3, [r0]
 8004546:	2a00      	cmp	r2, #0
 8004548:	d1f3      	bne.n	8004532 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 800454a:	2320      	movs	r3, #32
 800454c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8004550:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8004554:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8004558:	2003      	movs	r0, #3
}
 800455a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800455c <HAL_UART_Init>:
{
 800455c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800455e:	4604      	mov	r4, r0
 8004560:	b340      	cbz	r0, 80045b4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004562:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004566:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800456a:	b91b      	cbnz	r3, 8004574 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 800456c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8004570:	f7fe f86a 	bl	8002648 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8004574:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8004576:	2324      	movs	r3, #36	; 0x24
 8004578:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800457c:	68d3      	ldr	r3, [r2, #12]
 800457e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004582:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8004584:	4620      	mov	r0, r4
 8004586:	f7ff ff55 	bl	8004434 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	691a      	ldr	r2, [r3, #16]
 800458e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004592:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800459a:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045a2:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a4:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80045a6:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a8:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80045aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80045ae:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80045b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80045b4:	2001      	movs	r0, #1
 80045b6:	e7fc      	b.n	80045b2 <HAL_UART_Init+0x56>

080045b8 <HAL_UART_Transmit>:
{
 80045b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ba:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80045bc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 80045c0:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 80045c2:	2a20      	cmp	r2, #32
{
 80045c4:	4604      	mov	r4, r0
 80045c6:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80045c8:	d149      	bne.n	800465e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d045      	beq.n	800465a <HAL_UART_Transmit+0xa2>
 80045ce:	2f00      	cmp	r7, #0
 80045d0:	d043      	beq.n	800465a <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 80045d2:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80045d6:	2a01      	cmp	r2, #1
 80045d8:	d041      	beq.n	800465e <HAL_UART_Transmit+0xa6>
 80045da:	2201      	movs	r2, #1
 80045dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e0:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e2:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e4:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 80045ea:	f7fe f909 	bl	8002800 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ee:	68a1      	ldr	r1, [r4, #8]
 80045f0:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 80045f2:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045f4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 80045f8:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 80045fa:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045fc:	d103      	bne.n	8004606 <HAL_UART_Transmit+0x4e>
 80045fe:	6921      	ldr	r1, [r4, #16]
 8004600:	b909      	cbnz	r1, 8004606 <HAL_UART_Transmit+0x4e>
 8004602:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8004604:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8004606:	2100      	movs	r1, #0
 8004608:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 800460c:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800460e:	b289      	uxth	r1, r1
 8004610:	b941      	cbnz	r1, 8004624 <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004612:	2140      	movs	r1, #64	; 0x40
 8004614:	4620      	mov	r0, r4
 8004616:	f7ff ff6b 	bl	80044f0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 800461a:	b960      	cbnz	r0, 8004636 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 800461c:	2320      	movs	r3, #32
 800461e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8004622:	e009      	b.n	8004638 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004624:	2180      	movs	r1, #128	; 0x80
 8004626:	4620      	mov	r0, r4
 8004628:	e9cd 2300 	strd	r2, r3, [sp]
 800462c:	f7ff ff60 	bl	80044f0 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8004630:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004634:	b110      	cbz	r0, 800463c <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8004636:	2003      	movs	r0, #3
}
 8004638:	b003      	add	sp, #12
 800463a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800463c:	6820      	ldr	r0, [r4, #0]
      if (pdata8bits == NULL)
 800463e:	b94e      	cbnz	r6, 8004654 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004640:	f835 1b02 	ldrh.w	r1, [r5], #2
 8004644:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004648:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 800464a:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 800464c:	3901      	subs	r1, #1
 800464e:	b289      	uxth	r1, r1
 8004650:	84e1      	strh	r1, [r4, #38]	; 0x26
 8004652:	e7db      	b.n	800460c <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004654:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004658:	e7f6      	b.n	8004648 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800465a:	2001      	movs	r0, #1
 800465c:	e7ec      	b.n	8004638 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 800465e:	2002      	movs	r0, #2
 8004660:	e7ea      	b.n	8004638 <HAL_UART_Transmit+0x80>

08004662 <HAL_UART_TxCpltCallback>:
 8004662:	4770      	bx	lr

08004664 <HAL_UART_RxCpltCallback>:
 8004664:	4770      	bx	lr

08004666 <HAL_UART_ErrorCallback>:
 8004666:	4770      	bx	lr

08004668 <UART_DMAAbortOnError>:
{
 8004668:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800466a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800466c:	2300      	movs	r3, #0
 800466e:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004670:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8004672:	f7ff fff8 	bl	8004666 <HAL_UART_ErrorCallback>
}
 8004676:	bd08      	pop	{r3, pc}

08004678 <HAL_UARTEx_RxEventCallback>:
}
 8004678:	4770      	bx	lr

0800467a <UART_Receive_IT.part.0.isra.0>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800467a:	b507      	push	{r0, r1, r2, lr}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467c:	6881      	ldr	r1, [r0, #8]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800467e:	6a83      	ldr	r3, [r0, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004680:	6802      	ldr	r2, [r0, #0]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004682:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004686:	d13e      	bne.n	8004706 <UART_Receive_IT.part.0.isra.0+0x8c>
 8004688:	6901      	ldr	r1, [r0, #16]
 800468a:	2900      	cmp	r1, #0
 800468c:	d13e      	bne.n	800470c <UART_Receive_IT.part.0.isra.0+0x92>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800468e:	6852      	ldr	r2, [r2, #4]
 8004690:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004694:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 1U;
 8004698:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 800469a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 800469c:	3b01      	subs	r3, #1
 800469e:	b29b      	uxth	r3, r3
 80046a0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d12c      	bne.n	8004700 <UART_Receive_IT.part.0.isra.0+0x86>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80046a6:	6802      	ldr	r2, [r0, #0]
 80046a8:	68d1      	ldr	r1, [r2, #12]
 80046aa:	f021 0120 	bic.w	r1, r1, #32
 80046ae:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80046b0:	68d1      	ldr	r1, [r2, #12]
 80046b2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80046b6:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80046b8:	6951      	ldr	r1, [r2, #20]
 80046ba:	f021 0101 	bic.w	r1, r1, #1
 80046be:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 80046c0:	2220      	movs	r2, #32
 80046c2:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046c6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80046c8:	2a01      	cmp	r2, #1
 80046ca:	6802      	ldr	r2, [r0, #0]
 80046cc:	d128      	bne.n	8004720 <UART_Receive_IT.part.0.isra.0+0xa6>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ce:	6303      	str	r3, [r0, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	f102 030c 	add.w	r3, r2, #12
 80046d4:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	f102 0c0c 	add.w	ip, r2, #12
 80046e0:	e84c 3100 	strex	r1, r3, [ip]
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d1f3      	bne.n	80046d0 <UART_Receive_IT.part.0.isra.0+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046e8:	6813      	ldr	r3, [r2, #0]
 80046ea:	06db      	lsls	r3, r3, #27
 80046ec:	d505      	bpl.n	80046fa <UART_Receive_IT.part.0.isra.0+0x80>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046ee:	9101      	str	r1, [sp, #4]
 80046f0:	6813      	ldr	r3, [r2, #0]
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6853      	ldr	r3, [r2, #4]
 80046f6:	9301      	str	r3, [sp, #4]
 80046f8:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046fa:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80046fc:	f7ff ffbc 	bl	8004678 <HAL_UARTEx_RxEventCallback>
}
 8004700:	b003      	add	sp, #12
 8004702:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004706:	b939      	cbnz	r1, 8004718 <UART_Receive_IT.part.0.isra.0+0x9e>
 8004708:	6901      	ldr	r1, [r0, #16]
 800470a:	b929      	cbnz	r1, 8004718 <UART_Receive_IT.part.0.isra.0+0x9e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800470c:	6852      	ldr	r2, [r2, #4]
 800470e:	b2d2      	uxtb	r2, r2
 8004710:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8004712:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004714:	3301      	adds	r3, #1
 8004716:	e7bf      	b.n	8004698 <UART_Receive_IT.part.0.isra.0+0x1e>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004718:	6852      	ldr	r2, [r2, #4]
 800471a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800471e:	e7f7      	b.n	8004710 <UART_Receive_IT.part.0.isra.0+0x96>
        HAL_UART_RxCpltCallback(huart);
 8004720:	f7ff ffa0 	bl	8004664 <HAL_UART_RxCpltCallback>
 8004724:	e7ec      	b.n	8004700 <UART_Receive_IT.part.0.isra.0+0x86>
	...

08004728 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004728:	6803      	ldr	r3, [r0, #0]
{
 800472a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800472c:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800472e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004730:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8004732:	f012 0f0f 	tst.w	r2, #15
{
 8004736:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8004738:	d10c      	bne.n	8004754 <HAL_UART_IRQHandler+0x2c>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800473a:	0695      	lsls	r5, r2, #26
 800473c:	d570      	bpl.n	8004820 <HAL_UART_IRQHandler+0xf8>
 800473e:	068d      	lsls	r5, r1, #26
 8004740:	d56e      	bpl.n	8004820 <HAL_UART_IRQHandler+0xf8>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004742:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8004746:	2b22      	cmp	r3, #34	; 0x22
 8004748:	d164      	bne.n	8004814 <HAL_UART_IRQHandler+0xec>
}
 800474a:	b003      	add	sp, #12
 800474c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004750:	f7ff bf93 	b.w	800467a <UART_Receive_IT.part.0.isra.0>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004754:	f005 0001 	and.w	r0, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004758:	f401 7590 	and.w	r5, r1, #288	; 0x120
 800475c:	4305      	orrs	r5, r0
 800475e:	d05f      	beq.n	8004820 <HAL_UART_IRQHandler+0xf8>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004760:	07d5      	lsls	r5, r2, #31
 8004762:	d505      	bpl.n	8004770 <HAL_UART_IRQHandler+0x48>
 8004764:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004766:	bf42      	ittt	mi
 8004768:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800476a:	f043 0301 	orrmi.w	r3, r3, #1
 800476e:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004770:	0755      	lsls	r5, r2, #29
 8004772:	d504      	bpl.n	800477e <HAL_UART_IRQHandler+0x56>
 8004774:	b118      	cbz	r0, 800477e <HAL_UART_IRQHandler+0x56>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004776:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004778:	f043 0302 	orr.w	r3, r3, #2
 800477c:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800477e:	0793      	lsls	r3, r2, #30
 8004780:	d504      	bpl.n	800478c <HAL_UART_IRQHandler+0x64>
 8004782:	b118      	cbz	r0, 800478c <HAL_UART_IRQHandler+0x64>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004784:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004786:	f043 0304 	orr.w	r3, r3, #4
 800478a:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800478c:	0715      	lsls	r5, r2, #28
 800478e:	d507      	bpl.n	80047a0 <HAL_UART_IRQHandler+0x78>
 8004790:	f001 0320 	and.w	r3, r1, #32
 8004794:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004796:	bf1e      	ittt	ne
 8004798:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 800479a:	f043 0308 	orrne.w	r3, r3, #8
 800479e:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d036      	beq.n	8004814 <HAL_UART_IRQHandler+0xec>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047a6:	0690      	lsls	r0, r2, #26
 80047a8:	d508      	bpl.n	80047bc <HAL_UART_IRQHandler+0x94>
 80047aa:	068a      	lsls	r2, r1, #26
 80047ac:	d506      	bpl.n	80047bc <HAL_UART_IRQHandler+0x94>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ae:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80047b2:	2b22      	cmp	r3, #34	; 0x22
 80047b4:	d102      	bne.n	80047bc <HAL_UART_IRQHandler+0x94>
 80047b6:	4620      	mov	r0, r4
 80047b8:	f7ff ff5f 	bl	800467a <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047c0:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047c6:	f005 0508 	and.w	r5, r5, #8
 80047ca:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80047cc:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047ce:	d023      	beq.n	8004818 <HAL_UART_IRQHandler+0xf0>
        UART_EndRxTransfer(huart);
 80047d0:	f7ff fe02 	bl	80043d8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d4:	6822      	ldr	r2, [r4, #0]
 80047d6:	6953      	ldr	r3, [r2, #20]
 80047d8:	065b      	lsls	r3, r3, #25
 80047da:	d518      	bpl.n	800480e <HAL_UART_IRQHandler+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	f102 0314 	add.w	r3, r2, #20
 80047e0:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047e8:	f102 0014 	add.w	r0, r2, #20
 80047ec:	e840 3100 	strex	r1, r3, [r0]
 80047f0:	2900      	cmp	r1, #0
 80047f2:	d1f3      	bne.n	80047dc <HAL_UART_IRQHandler+0xb4>
          if (huart->hdmarx != NULL)
 80047f4:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80047f6:	b150      	cbz	r0, 800480e <HAL_UART_IRQHandler+0xe6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047f8:	4b72      	ldr	r3, [pc, #456]	; (80049c4 <HAL_UART_IRQHandler+0x29c>)
 80047fa:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047fc:	f7fe fca6 	bl	800314c <HAL_DMA_Abort_IT>
 8004800:	b140      	cbz	r0, 8004814 <HAL_UART_IRQHandler+0xec>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004802:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004804:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8004806:	b003      	add	sp, #12
 8004808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800480c:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 800480e:	4620      	mov	r0, r4
 8004810:	f7ff ff29 	bl	8004666 <HAL_UART_ErrorCallback>
}
 8004814:	b003      	add	sp, #12
 8004816:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 8004818:	f7ff ff25 	bl	8004666 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481c:	6425      	str	r5, [r4, #64]	; 0x40
 800481e:	e7f9      	b.n	8004814 <HAL_UART_IRQHandler+0xec>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004820:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004822:	2801      	cmp	r0, #1
 8004824:	f040 8091 	bne.w	800494a <HAL_UART_IRQHandler+0x222>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004828:	06d5      	lsls	r5, r2, #27
 800482a:	f140 808e 	bpl.w	800494a <HAL_UART_IRQHandler+0x222>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800482e:	06c8      	lsls	r0, r1, #27
 8004830:	f140 808b 	bpl.w	800494a <HAL_UART_IRQHandler+0x222>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004834:	2200      	movs	r2, #0
 8004836:	9201      	str	r2, [sp, #4]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	9201      	str	r2, [sp, #4]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	9201      	str	r2, [sp, #4]
 8004840:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	0655      	lsls	r5, r2, #25
 8004846:	d54c      	bpl.n	80048e2 <HAL_UART_IRQHandler+0x1ba>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004848:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800484a:	680a      	ldr	r2, [r1, #0]
 800484c:	6852      	ldr	r2, [r2, #4]
 800484e:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8004850:	2a00      	cmp	r2, #0
 8004852:	d0df      	beq.n	8004814 <HAL_UART_IRQHandler+0xec>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004854:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
 8004856:	4290      	cmp	r0, r2
 8004858:	d9dc      	bls.n	8004814 <HAL_UART_IRQHandler+0xec>
        huart->RxXferCount = nb_remaining_rx_data;
 800485a:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800485c:	69ca      	ldr	r2, [r1, #28]
 800485e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004862:	d036      	beq.n	80048d2 <HAL_UART_IRQHandler+0x1aa>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	f103 020c 	add.w	r2, r3, #12
 8004868:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800486c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004870:	f103 000c 	add.w	r0, r3, #12
 8004874:	e840 2100 	strex	r1, r2, [r0]
 8004878:	2900      	cmp	r1, #0
 800487a:	d1f3      	bne.n	8004864 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800487c:	f103 0214 	add.w	r2, r3, #20
 8004880:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004884:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	f103 0014 	add.w	r0, r3, #20
 800488c:	e840 2100 	strex	r1, r2, [r0]
 8004890:	2900      	cmp	r1, #0
 8004892:	d1f3      	bne.n	800487c <HAL_UART_IRQHandler+0x154>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	f103 0214 	add.w	r2, r3, #20
 8004898:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800489c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	f103 0014 	add.w	r0, r3, #20
 80048a4:	e840 2100 	strex	r1, r2, [r0]
 80048a8:	2900      	cmp	r1, #0
 80048aa:	d1f3      	bne.n	8004894 <HAL_UART_IRQHandler+0x16c>
          huart->RxState = HAL_UART_STATE_READY;
 80048ac:	2220      	movs	r2, #32
 80048ae:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b2:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	f103 020c 	add.w	r2, r3, #12
 80048b8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048bc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	f103 000c 	add.w	r0, r3, #12
 80048c4:	e840 2100 	strex	r1, r2, [r0]
 80048c8:	2900      	cmp	r1, #0
 80048ca:	d1f3      	bne.n	80048b4 <HAL_UART_IRQHandler+0x18c>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048cc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80048ce:	f7fe fbf9 	bl	80030c4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048d2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80048d4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80048d6:	1ac9      	subs	r1, r1, r3
 80048d8:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048da:	4620      	mov	r0, r4
 80048dc:	f7ff fecc 	bl	8004678 <HAL_UARTEx_RxEventCallback>
 80048e0:	e798      	b.n	8004814 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048e2:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80048e4:	b28a      	uxth	r2, r1
      if ((huart->RxXferCount > 0U)
 80048e6:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80048e8:	b289      	uxth	r1, r1
 80048ea:	2900      	cmp	r1, #0
 80048ec:	d092      	beq.n	8004814 <HAL_UART_IRQHandler+0xec>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048ee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80048f0:	1a89      	subs	r1, r1, r2
 80048f2:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80048f4:	2900      	cmp	r1, #0
 80048f6:	d08d      	beq.n	8004814 <HAL_UART_IRQHandler+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	f103 020c 	add.w	r2, r3, #12
 80048fc:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004900:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	f103 050c 	add.w	r5, r3, #12
 8004908:	e845 2000 	strex	r0, r2, [r5]
 800490c:	2800      	cmp	r0, #0
 800490e:	d1f3      	bne.n	80048f8 <HAL_UART_IRQHandler+0x1d0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004910:	f103 0214 	add.w	r2, r3, #20
 8004914:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004918:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	f103 0514 	add.w	r5, r3, #20
 8004920:	e845 2000 	strex	r0, r2, [r5]
 8004924:	2800      	cmp	r0, #0
 8004926:	d1f3      	bne.n	8004910 <HAL_UART_IRQHandler+0x1e8>
        huart->RxState = HAL_UART_STATE_READY;
 8004928:	2220      	movs	r2, #32
 800492a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492e:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	f103 020c 	add.w	r2, r3, #12
 8004934:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004938:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	f103 050c 	add.w	r5, r3, #12
 8004940:	e845 2000 	strex	r0, r2, [r5]
 8004944:	2800      	cmp	r0, #0
 8004946:	d1f3      	bne.n	8004930 <HAL_UART_IRQHandler+0x208>
 8004948:	e7c7      	b.n	80048da <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800494a:	0610      	lsls	r0, r2, #24
 800494c:	d528      	bpl.n	80049a0 <HAL_UART_IRQHandler+0x278>
 800494e:	060d      	lsls	r5, r1, #24
 8004950:	d526      	bpl.n	80049a0 <HAL_UART_IRQHandler+0x278>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004952:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8004956:	2a21      	cmp	r2, #33	; 0x21
 8004958:	f47f af5c 	bne.w	8004814 <HAL_UART_IRQHandler+0xec>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800495c:	68a1      	ldr	r1, [r4, #8]
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800495e:	6a22      	ldr	r2, [r4, #32]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004960:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8004964:	d117      	bne.n	8004996 <HAL_UART_IRQHandler+0x26e>
 8004966:	6921      	ldr	r1, [r4, #16]
 8004968:	b9a9      	cbnz	r1, 8004996 <HAL_UART_IRQHandler+0x26e>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800496a:	f832 1b02 	ldrh.w	r1, [r2], #2
 800496e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8004972:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004974:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8004976:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8004978:	3a01      	subs	r2, #1
 800497a:	b292      	uxth	r2, r2
 800497c:	84e2      	strh	r2, [r4, #38]	; 0x26
 800497e:	2a00      	cmp	r2, #0
 8004980:	f47f af48 	bne.w	8004814 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004984:	68da      	ldr	r2, [r3, #12]
 8004986:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800498a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	e73e      	b.n	8004814 <HAL_UART_IRQHandler+0xec>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004996:	1c51      	adds	r1, r2, #1
 8004998:	6221      	str	r1, [r4, #32]
 800499a:	7812      	ldrb	r2, [r2, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	e7ea      	b.n	8004976 <HAL_UART_IRQHandler+0x24e>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049a0:	0650      	lsls	r0, r2, #25
 80049a2:	f57f af37 	bpl.w	8004814 <HAL_UART_IRQHandler+0xec>
 80049a6:	064a      	lsls	r2, r1, #25
 80049a8:	f57f af34 	bpl.w	8004814 <HAL_UART_IRQHandler+0xec>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b2:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80049b4:	2320      	movs	r3, #32
 80049b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7ff fe51 	bl	8004662 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80049c0:	e728      	b.n	8004814 <HAL_UART_IRQHandler+0xec>
 80049c2:	bf00      	nop
 80049c4:	08004669 	.word	0x08004669

080049c8 <arm_max_f32>:
 80049c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049cc:	1e4f      	subs	r7, r1, #1
 80049ce:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80049d2:	f100 0e04 	add.w	lr, r0, #4
 80049d6:	edd0 7a00 	vldr	s15, [r0]
 80049da:	d058      	beq.n	8004a8e <arm_max_f32+0xc6>
 80049dc:	3014      	adds	r0, #20
 80049de:	46c4      	mov	ip, r8
 80049e0:	2604      	movs	r6, #4
 80049e2:	2400      	movs	r4, #0
 80049e4:	ed10 6a04 	vldr	s12, [r0, #-16]
 80049e8:	ed50 6a03 	vldr	s13, [r0, #-12]
 80049ec:	ed10 7a02 	vldr	s14, [r0, #-8]
 80049f0:	ed50 5a01 	vldr	s11, [r0, #-4]
 80049f4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	bfc8      	it	gt
 80049fe:	eef0 7a46 	vmovgt.f32	s15, s12
 8004a02:	f1a6 0503 	sub.w	r5, r6, #3
 8004a06:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004a0a:	bfc8      	it	gt
 8004a0c:	462c      	movgt	r4, r5
 8004a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a12:	bf48      	it	mi
 8004a14:	eef0 7a66 	vmovmi.f32	s15, s13
 8004a18:	f1a6 0502 	sub.w	r5, r6, #2
 8004a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a20:	bf48      	it	mi
 8004a22:	462c      	movmi	r4, r5
 8004a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a28:	bf48      	it	mi
 8004a2a:	eef0 7a47 	vmovmi.f32	s15, s14
 8004a2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8004a32:	eef4 7ae5 	vcmpe.f32	s15, s11
 8004a36:	bf48      	it	mi
 8004a38:	462c      	movmi	r4, r5
 8004a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3e:	bf48      	it	mi
 8004a40:	4634      	movmi	r4, r6
 8004a42:	bf48      	it	mi
 8004a44:	eef0 7a65 	vmovmi.f32	s15, s11
 8004a48:	f1bc 0c01 	subs.w	ip, ip, #1
 8004a4c:	f100 0010 	add.w	r0, r0, #16
 8004a50:	f106 0604 	add.w	r6, r6, #4
 8004a54:	d1c6      	bne.n	80049e4 <arm_max_f32+0x1c>
 8004a56:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8004a5a:	f017 0003 	ands.w	r0, r7, #3
 8004a5e:	d018      	beq.n	8004a92 <arm_max_f32+0xca>
 8004a60:	1a08      	subs	r0, r1, r0
 8004a62:	ecbe 7a01 	vldmia	lr!, {s14}
 8004a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a6e:	bfc8      	it	gt
 8004a70:	4604      	movgt	r4, r0
 8004a72:	f100 0001 	add.w	r0, r0, #1
 8004a76:	bfd8      	it	le
 8004a78:	eeb0 7a67 	vmovle.f32	s14, s15
 8004a7c:	4281      	cmp	r1, r0
 8004a7e:	eef0 7a47 	vmov.f32	s15, s14
 8004a82:	d1ee      	bne.n	8004a62 <arm_max_f32+0x9a>
 8004a84:	ed82 7a00 	vstr	s14, [r2]
 8004a88:	601c      	str	r4, [r3, #0]
 8004a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a8e:	4644      	mov	r4, r8
 8004a90:	e7e3      	b.n	8004a5a <arm_max_f32+0x92>
 8004a92:	eeb0 7a67 	vmov.f32	s14, s15
 8004a96:	e7f5      	b.n	8004a84 <arm_max_f32+0xbc>

08004a98 <arm_cfft_radix8by2_f32>:
 8004a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a9c:	ed2d 8b08 	vpush	{d8-d11}
 8004aa0:	4607      	mov	r7, r0
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	f8b7 e000 	ldrh.w	lr, [r7]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8004aae:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8004ab2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004ab6:	f000 80b0 	beq.w	8004c1a <arm_cfft_radix8by2_f32+0x182>
 8004aba:	008b      	lsls	r3, r1, #2
 8004abc:	3310      	adds	r3, #16
 8004abe:	18c6      	adds	r6, r0, r3
 8004ac0:	3210      	adds	r2, #16
 8004ac2:	4443      	add	r3, r8
 8004ac4:	f100 0510 	add.w	r5, r0, #16
 8004ac8:	f108 0410 	add.w	r4, r8, #16
 8004acc:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004ad0:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004ad4:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004ad8:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004adc:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004ae0:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004ae4:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004ae8:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004aec:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004af0:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004af4:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004af8:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004afc:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004b00:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004b04:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004b08:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004b0c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004b10:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004b14:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004b18:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004b1c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004b20:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004b24:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004b28:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004b2c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004b30:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004b34:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004b38:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004b3c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004b40:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004b44:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004b48:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004b4c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004b50:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004b54:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004b58:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004b5c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004b60:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004b64:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004b68:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004b6c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004b70:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004b74:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004b78:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004b7c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004b80:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004b84:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004b88:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004b8c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004b90:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004b94:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004b98:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004b9c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004ba0:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004ba4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ba8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004bac:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004bb0:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004bb4:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004bb8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004bbc:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004bc0:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004bc4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004bc8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004bcc:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004bd0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004bd4:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004bd8:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004bdc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004be0:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004be4:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004be8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004bec:	f1be 0e01 	subs.w	lr, lr, #1
 8004bf0:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004bf4:	f105 0510 	add.w	r5, r5, #16
 8004bf8:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004bfc:	f106 0610 	add.w	r6, r6, #16
 8004c00:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004c04:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004c08:	f102 0210 	add.w	r2, r2, #16
 8004c0c:	f104 0410 	add.w	r4, r4, #16
 8004c10:	f103 0310 	add.w	r3, r3, #16
 8004c14:	f47f af5a 	bne.w	8004acc <arm_cfft_radix8by2_f32+0x34>
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	b28c      	uxth	r4, r1
 8004c1c:	4621      	mov	r1, r4
 8004c1e:	2302      	movs	r3, #2
 8004c20:	f000 fbca 	bl	80053b8 <arm_radix8_butterfly_f32>
 8004c24:	ecbd 8b08 	vpop	{d8-d11}
 8004c28:	4621      	mov	r1, r4
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	4640      	mov	r0, r8
 8004c2e:	2302      	movs	r3, #2
 8004c30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c34:	f000 bbc0 	b.w	80053b8 <arm_radix8_butterfly_f32>

08004c38 <arm_cfft_radix8by4_f32>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	ed2d 8b0a 	vpush	{d8-d12}
 8004c40:	8802      	ldrh	r2, [r0, #0]
 8004c42:	ed91 6a00 	vldr	s12, [r1]
 8004c46:	b08f      	sub	sp, #60	; 0x3c
 8004c48:	460f      	mov	r7, r1
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	6841      	ldr	r1, [r0, #4]
 8004c4e:	900c      	str	r0, [sp, #48]	; 0x30
 8004c50:	0093      	lsls	r3, r2, #2
 8004c52:	4638      	mov	r0, r7
 8004c54:	4418      	add	r0, r3
 8004c56:	4606      	mov	r6, r0
 8004c58:	9009      	str	r0, [sp, #36]	; 0x24
 8004c5a:	4418      	add	r0, r3
 8004c5c:	edd0 6a00 	vldr	s13, [r0]
 8004c60:	ed96 4a00 	vldr	s8, [r6]
 8004c64:	edd6 2a01 	vldr	s5, [r6, #4]
 8004c68:	edd0 7a01 	vldr	s15, [r0, #4]
 8004c6c:	900a      	str	r0, [sp, #40]	; 0x28
 8004c6e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004c72:	4604      	mov	r4, r0
 8004c74:	4625      	mov	r5, r4
 8004c76:	441c      	add	r4, r3
 8004c78:	edd4 4a00 	vldr	s9, [r4]
 8004c7c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c80:	ed94 3a01 	vldr	s6, [r4, #4]
 8004c84:	9401      	str	r4, [sp, #4]
 8004c86:	ee35 5a84 	vadd.f32	s10, s11, s8
 8004c8a:	4630      	mov	r0, r6
 8004c8c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004c90:	463e      	mov	r6, r7
 8004c92:	ee15 ea10 	vmov	lr, s10
 8004c96:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004c9a:	f846 eb08 	str.w	lr, [r6], #8
 8004c9e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004ca2:	ed90 5a01 	vldr	s10, [r0, #4]
 8004ca6:	9605      	str	r6, [sp, #20]
 8004ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cac:	9e01      	ldr	r6, [sp, #4]
 8004cae:	9707      	str	r7, [sp, #28]
 8004cb0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8004cb4:	ed96 2a01 	vldr	s4, [r6, #4]
 8004cb8:	ee36 7a05 	vadd.f32	s14, s12, s10
 8004cbc:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004cc0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8004cc4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8004cc8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8004ccc:	4604      	mov	r4, r0
 8004cce:	46a3      	mov	fp, r4
 8004cd0:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004cd4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8004cd8:	ee14 8a10 	vmov	r8, s8
 8004cdc:	46a4      	mov	ip, r4
 8004cde:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8004ce2:	ed87 7a01 	vstr	s14, [r7, #4]
 8004ce6:	f84b 8b08 	str.w	r8, [fp], #8
 8004cea:	f1ac 0704 	sub.w	r7, ip, #4
 8004cee:	ed8c 5a01 	vstr	s10, [ip, #4]
 8004cf2:	f101 0c08 	add.w	ip, r1, #8
 8004cf6:	462c      	mov	r4, r5
 8004cf8:	f8cd c010 	str.w	ip, [sp, #16]
 8004cfc:	ee15 ca90 	vmov	ip, s11
 8004d00:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004d04:	f844 cb08 	str.w	ip, [r4], #8
 8004d08:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004d0c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8004d10:	9406      	str	r4, [sp, #24]
 8004d12:	ee76 6a83 	vadd.f32	s13, s13, s6
 8004d16:	f101 0410 	add.w	r4, r1, #16
 8004d1a:	0852      	lsrs	r2, r2, #1
 8004d1c:	9402      	str	r4, [sp, #8]
 8004d1e:	ed85 6a01 	vstr	s12, [r5, #4]
 8004d22:	462c      	mov	r4, r5
 8004d24:	f101 0518 	add.w	r5, r1, #24
 8004d28:	920b      	str	r2, [sp, #44]	; 0x2c
 8004d2a:	46b2      	mov	sl, r6
 8004d2c:	9503      	str	r5, [sp, #12]
 8004d2e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004d32:	3a02      	subs	r2, #2
 8004d34:	ee16 5a90 	vmov	r5, s13
 8004d38:	46b6      	mov	lr, r6
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	0852      	lsrs	r2, r2, #1
 8004d3e:	f84a 5b08 	str.w	r5, [sl], #8
 8004d42:	f1a0 0604 	sub.w	r6, r0, #4
 8004d46:	edce 7a01 	vstr	s15, [lr, #4]
 8004d4a:	9208      	str	r2, [sp, #32]
 8004d4c:	f000 8130 	beq.w	8004fb0 <arm_cfft_radix8by4_f32+0x378>
 8004d50:	4691      	mov	r9, r2
 8004d52:	9a07      	ldr	r2, [sp, #28]
 8004d54:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004d58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004d5c:	3b08      	subs	r3, #8
 8004d5e:	f102 0510 	add.w	r5, r2, #16
 8004d62:	f101 0c20 	add.w	ip, r1, #32
 8004d66:	f1a4 020c 	sub.w	r2, r4, #12
 8004d6a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8004d6e:	4433      	add	r3, r6
 8004d70:	3410      	adds	r4, #16
 8004d72:	4650      	mov	r0, sl
 8004d74:	4659      	mov	r1, fp
 8004d76:	ed55 3a02 	vldr	s7, [r5, #-8]
 8004d7a:	ed14 5a02 	vldr	s10, [r4, #-8]
 8004d7e:	ed91 7a00 	vldr	s14, [r1]
 8004d82:	edd0 7a00 	vldr	s15, [r0]
 8004d86:	ed54 5a01 	vldr	s11, [r4, #-4]
 8004d8a:	ed15 4a01 	vldr	s8, [r5, #-4]
 8004d8e:	edd0 6a01 	vldr	s13, [r0, #4]
 8004d92:	ed91 6a01 	vldr	s12, [r1, #4]
 8004d96:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004d9a:	ee34 0a25 	vadd.f32	s0, s8, s11
 8004d9e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8004da2:	ee74 5a65 	vsub.f32	s11, s8, s11
 8004da6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004daa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004dae:	ed45 4a02 	vstr	s9, [r5, #-8]
 8004db2:	edd1 4a01 	vldr	s9, [r1, #4]
 8004db6:	ed90 4a01 	vldr	s8, [r0, #4]
 8004dba:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004dbe:	ee75 aa06 	vadd.f32	s21, s10, s12
 8004dc2:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004dc6:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004dca:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004dce:	edd6 1a00 	vldr	s3, [r6]
 8004dd2:	edd7 0a00 	vldr	s1, [r7]
 8004dd6:	ed92 4a02 	vldr	s8, [r2, #8]
 8004dda:	edd3 3a02 	vldr	s7, [r3, #8]
 8004dde:	ed93 2a01 	vldr	s4, [r3, #4]
 8004de2:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004de6:	edd2 2a01 	vldr	s5, [r2, #4]
 8004dea:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004dee:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8004df2:	ee39 3a81 	vadd.f32	s6, s19, s2
 8004df6:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004dfa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004dfe:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8004e02:	ee7a aae6 	vsub.f32	s21, s21, s13
 8004e06:	ee18 aa90 	vmov	sl, s17
 8004e0a:	f847 a908 	str.w	sl, [r7], #-8
 8004e0e:	edd2 8a01 	vldr	s17, [r2, #4]
 8004e12:	ed93 9a01 	vldr	s18, [r3, #4]
 8004e16:	ee73 8a28 	vadd.f32	s17, s6, s17
 8004e1a:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004e1e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004e22:	ee74 0a63 	vsub.f32	s1, s8, s7
 8004e26:	edc7 8a01 	vstr	s17, [r7, #4]
 8004e2a:	ed18 ba02 	vldr	s22, [r8, #-8]
 8004e2e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8004e32:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8004e36:	ee6a ba28 	vmul.f32	s23, s20, s17
 8004e3a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8004e3e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8004e42:	ee31 9a20 	vadd.f32	s18, s2, s1
 8004e46:	ee79 9a82 	vadd.f32	s19, s19, s4
 8004e4a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004e4e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8004e52:	ee69 baa8 	vmul.f32	s23, s19, s17
 8004e56:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8004e5a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8004e5e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8004e62:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8004e66:	ee1c aa10 	vmov	sl, s24
 8004e6a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8004e6e:	f841 ab08 	str.w	sl, [r1], #8
 8004e72:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8004e76:	ee3b bacb 	vsub.f32	s22, s23, s22
 8004e7a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8004e7e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8004e82:	ed01 aa01 	vstr	s20, [r1, #-4]
 8004e86:	edc2 8a01 	vstr	s17, [r2, #4]
 8004e8a:	ed82 ba02 	vstr	s22, [r2, #8]
 8004e8e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8004e92:	ee74 3a63 	vsub.f32	s7, s8, s7
 8004e96:	ee38 8a47 	vsub.f32	s16, s16, s14
 8004e9a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8004e9e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8004ea2:	ee33 3a42 	vsub.f32	s6, s6, s4
 8004ea6:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004eaa:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004eae:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8004eb2:	ee63 8a04 	vmul.f32	s17, s6, s8
 8004eb6:	ee28 aa24 	vmul.f32	s20, s16, s9
 8004eba:	ee60 9a04 	vmul.f32	s19, s0, s8
 8004ebe:	ee28 8a04 	vmul.f32	s16, s16, s8
 8004ec2:	ee20 0a24 	vmul.f32	s0, s0, s9
 8004ec6:	ee63 3a84 	vmul.f32	s7, s7, s8
 8004eca:	ee39 4a68 	vsub.f32	s8, s18, s17
 8004ece:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8004ed2:	ee14 aa10 	vmov	sl, s8
 8004ed6:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004eda:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004ede:	ed44 9a02 	vstr	s19, [r4, #-8]
 8004ee2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8004ee6:	ed04 0a01 	vstr	s0, [r4, #-4]
 8004eea:	f846 a908 	str.w	sl, [r6], #-8
 8004eee:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004ef2:	ee35 7a87 	vadd.f32	s14, s11, s14
 8004ef6:	edc6 3a01 	vstr	s7, [r6, #4]
 8004efa:	ee76 6a26 	vadd.f32	s13, s12, s13
 8004efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f02:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8004f06:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8004f0a:	ee67 5a86 	vmul.f32	s11, s15, s12
 8004f0e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004f12:	ee72 2a62 	vsub.f32	s5, s4, s5
 8004f16:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004f1a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8004f1e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8004f22:	ee62 0a86 	vmul.f32	s1, s5, s12
 8004f26:	ee66 6a86 	vmul.f32	s13, s13, s12
 8004f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f2e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8004f32:	ee62 2a87 	vmul.f32	s5, s5, s14
 8004f36:	ee21 1a07 	vmul.f32	s2, s2, s14
 8004f3a:	ee15 aa90 	vmov	sl, s11
 8004f3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004f42:	f840 ab08 	str.w	sl, [r0], #8
 8004f46:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8004f4a:	ee76 2a22 	vadd.f32	s5, s12, s5
 8004f4e:	f1b9 0901 	subs.w	r9, r9, #1
 8004f52:	ed40 7a01 	vstr	s15, [r0, #-4]
 8004f56:	f105 0508 	add.w	r5, r5, #8
 8004f5a:	ed83 1a02 	vstr	s2, [r3, #8]
 8004f5e:	edc3 2a01 	vstr	s5, [r3, #4]
 8004f62:	f108 0808 	add.w	r8, r8, #8
 8004f66:	f1a2 0208 	sub.w	r2, r2, #8
 8004f6a:	f10c 0c10 	add.w	ip, ip, #16
 8004f6e:	f104 0408 	add.w	r4, r4, #8
 8004f72:	f10e 0e18 	add.w	lr, lr, #24
 8004f76:	f1a3 0308 	sub.w	r3, r3, #8
 8004f7a:	f47f aefc 	bne.w	8004d76 <arm_cfft_radix8by4_f32+0x13e>
 8004f7e:	9908      	ldr	r1, [sp, #32]
 8004f80:	9802      	ldr	r0, [sp, #8]
 8004f82:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8004f86:	00cb      	lsls	r3, r1, #3
 8004f88:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8004f8c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8004f90:	9102      	str	r1, [sp, #8]
 8004f92:	9905      	ldr	r1, [sp, #20]
 8004f94:	4419      	add	r1, r3
 8004f96:	9105      	str	r1, [sp, #20]
 8004f98:	9904      	ldr	r1, [sp, #16]
 8004f9a:	4419      	add	r1, r3
 8004f9c:	9104      	str	r1, [sp, #16]
 8004f9e:	9906      	ldr	r1, [sp, #24]
 8004fa0:	449b      	add	fp, r3
 8004fa2:	4419      	add	r1, r3
 8004fa4:	449a      	add	sl, r3
 8004fa6:	9b03      	ldr	r3, [sp, #12]
 8004fa8:	9106      	str	r1, [sp, #24]
 8004faa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004fae:	9303      	str	r3, [sp, #12]
 8004fb0:	9a05      	ldr	r2, [sp, #20]
 8004fb2:	9806      	ldr	r0, [sp, #24]
 8004fb4:	ed92 4a00 	vldr	s8, [r2]
 8004fb8:	ed90 7a00 	vldr	s14, [r0]
 8004fbc:	ed9b 3a00 	vldr	s6, [fp]
 8004fc0:	edda 3a00 	vldr	s7, [sl]
 8004fc4:	edd2 4a01 	vldr	s9, [r2, #4]
 8004fc8:	edd0 6a01 	vldr	s13, [r0, #4]
 8004fcc:	ed9a 2a01 	vldr	s4, [sl, #4]
 8004fd0:	eddb 7a01 	vldr	s15, [fp, #4]
 8004fd4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8004fd8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004fda:	ee34 6a07 	vadd.f32	s12, s8, s14
 8004fde:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8004fe2:	ee36 5a03 	vadd.f32	s10, s12, s6
 8004fe6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8004fea:	ee35 5a23 	vadd.f32	s10, s10, s7
 8004fee:	ee34 7a47 	vsub.f32	s14, s8, s14
 8004ff2:	ed82 5a00 	vstr	s10, [r2]
 8004ff6:	ed9b 5a01 	vldr	s10, [fp, #4]
 8004ffa:	edda 4a01 	vldr	s9, [sl, #4]
 8004ffe:	ee35 5a85 	vadd.f32	s10, s11, s10
 8005002:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005006:	ee35 5a24 	vadd.f32	s10, s10, s9
 800500a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800500e:	ed82 5a01 	vstr	s10, [r2, #4]
 8005012:	9a04      	ldr	r2, [sp, #16]
 8005014:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8005018:	edd2 1a00 	vldr	s3, [r2]
 800501c:	edd2 2a01 	vldr	s5, [r2, #4]
 8005020:	9a02      	ldr	r2, [sp, #8]
 8005022:	ee34 4a42 	vsub.f32	s8, s8, s4
 8005026:	ee36 6a43 	vsub.f32	s12, s12, s6
 800502a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800502e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8005032:	ee65 2a22 	vmul.f32	s5, s10, s5
 8005036:	ee25 5a21 	vmul.f32	s10, s10, s3
 800503a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800503e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8005042:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8005046:	edcb 2a00 	vstr	s5, [fp]
 800504a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800504e:	ed92 4a01 	vldr	s8, [r2, #4]
 8005052:	ed92 5a00 	vldr	s10, [r2]
 8005056:	9a03      	ldr	r2, [sp, #12]
 8005058:	ee36 6a63 	vsub.f32	s12, s12, s7
 800505c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8005060:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005064:	ee25 5a85 	vmul.f32	s10, s11, s10
 8005068:	ee26 6a04 	vmul.f32	s12, s12, s8
 800506c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8005070:	ee35 6a46 	vsub.f32	s12, s10, s12
 8005074:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8005078:	ee76 6a83 	vadd.f32	s13, s13, s6
 800507c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005080:	ed80 6a01 	vstr	s12, [r0, #4]
 8005084:	edc0 5a00 	vstr	s11, [r0]
 8005088:	edd2 5a01 	vldr	s11, [r2, #4]
 800508c:	9807      	ldr	r0, [sp, #28]
 800508e:	ee77 7a02 	vadd.f32	s15, s14, s4
 8005092:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8005096:	edd2 6a00 	vldr	s13, [r2]
 800509a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800509e:	ee67 6a26 	vmul.f32	s13, s14, s13
 80050a2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80050a6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80050aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80050ae:	ee36 7a07 	vadd.f32	s14, s12, s14
 80050b2:	edca 7a01 	vstr	s15, [sl, #4]
 80050b6:	ed8a 7a00 	vstr	s14, [sl]
 80050ba:	6872      	ldr	r2, [r6, #4]
 80050bc:	4621      	mov	r1, r4
 80050be:	2304      	movs	r3, #4
 80050c0:	f000 f97a 	bl	80053b8 <arm_radix8_butterfly_f32>
 80050c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050c6:	6872      	ldr	r2, [r6, #4]
 80050c8:	4621      	mov	r1, r4
 80050ca:	2304      	movs	r3, #4
 80050cc:	f000 f974 	bl	80053b8 <arm_radix8_butterfly_f32>
 80050d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80050d2:	6872      	ldr	r2, [r6, #4]
 80050d4:	4621      	mov	r1, r4
 80050d6:	2304      	movs	r3, #4
 80050d8:	f000 f96e 	bl	80053b8 <arm_radix8_butterfly_f32>
 80050dc:	6872      	ldr	r2, [r6, #4]
 80050de:	9801      	ldr	r0, [sp, #4]
 80050e0:	4621      	mov	r1, r4
 80050e2:	2304      	movs	r3, #4
 80050e4:	b00f      	add	sp, #60	; 0x3c
 80050e6:	ecbd 8b0a 	vpop	{d8-d12}
 80050ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ee:	f000 b963 	b.w	80053b8 <arm_radix8_butterfly_f32>
 80050f2:	bf00      	nop

080050f4 <arm_cfft_f32>:
 80050f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050f8:	2a01      	cmp	r2, #1
 80050fa:	4606      	mov	r6, r0
 80050fc:	4617      	mov	r7, r2
 80050fe:	460c      	mov	r4, r1
 8005100:	4698      	mov	r8, r3
 8005102:	8805      	ldrh	r5, [r0, #0]
 8005104:	d054      	beq.n	80051b0 <arm_cfft_f32+0xbc>
 8005106:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800510a:	d04c      	beq.n	80051a6 <arm_cfft_f32+0xb2>
 800510c:	d916      	bls.n	800513c <arm_cfft_f32+0x48>
 800510e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8005112:	d01a      	beq.n	800514a <arm_cfft_f32+0x56>
 8005114:	d95c      	bls.n	80051d0 <arm_cfft_f32+0xdc>
 8005116:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800511a:	d044      	beq.n	80051a6 <arm_cfft_f32+0xb2>
 800511c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8005120:	d105      	bne.n	800512e <arm_cfft_f32+0x3a>
 8005122:	2301      	movs	r3, #1
 8005124:	6872      	ldr	r2, [r6, #4]
 8005126:	4629      	mov	r1, r5
 8005128:	4620      	mov	r0, r4
 800512a:	f000 f945 	bl	80053b8 <arm_radix8_butterfly_f32>
 800512e:	f1b8 0f00 	cmp.w	r8, #0
 8005132:	d111      	bne.n	8005158 <arm_cfft_f32+0x64>
 8005134:	2f01      	cmp	r7, #1
 8005136:	d016      	beq.n	8005166 <arm_cfft_f32+0x72>
 8005138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800513c:	2d20      	cmp	r5, #32
 800513e:	d032      	beq.n	80051a6 <arm_cfft_f32+0xb2>
 8005140:	d94a      	bls.n	80051d8 <arm_cfft_f32+0xe4>
 8005142:	2d40      	cmp	r5, #64	; 0x40
 8005144:	d0ed      	beq.n	8005122 <arm_cfft_f32+0x2e>
 8005146:	2d80      	cmp	r5, #128	; 0x80
 8005148:	d1f1      	bne.n	800512e <arm_cfft_f32+0x3a>
 800514a:	4621      	mov	r1, r4
 800514c:	4630      	mov	r0, r6
 800514e:	f7ff fca3 	bl	8004a98 <arm_cfft_radix8by2_f32>
 8005152:	f1b8 0f00 	cmp.w	r8, #0
 8005156:	d0ed      	beq.n	8005134 <arm_cfft_f32+0x40>
 8005158:	68b2      	ldr	r2, [r6, #8]
 800515a:	89b1      	ldrh	r1, [r6, #12]
 800515c:	4620      	mov	r0, r4
 800515e:	f7fb f857 	bl	8000210 <arm_bitreversal_32>
 8005162:	2f01      	cmp	r7, #1
 8005164:	d1e8      	bne.n	8005138 <arm_cfft_f32+0x44>
 8005166:	ee07 5a90 	vmov	s15, r5
 800516a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800516e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005172:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8005176:	2d00      	cmp	r5, #0
 8005178:	d0de      	beq.n	8005138 <arm_cfft_f32+0x44>
 800517a:	f104 0108 	add.w	r1, r4, #8
 800517e:	2300      	movs	r3, #0
 8005180:	3301      	adds	r3, #1
 8005182:	429d      	cmp	r5, r3
 8005184:	f101 0108 	add.w	r1, r1, #8
 8005188:	ed11 7a04 	vldr	s14, [r1, #-16]
 800518c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005190:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005194:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005198:	ed01 7a04 	vstr	s14, [r1, #-16]
 800519c:	ed41 7a03 	vstr	s15, [r1, #-12]
 80051a0:	d1ee      	bne.n	8005180 <arm_cfft_f32+0x8c>
 80051a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051a6:	4621      	mov	r1, r4
 80051a8:	4630      	mov	r0, r6
 80051aa:	f7ff fd45 	bl	8004c38 <arm_cfft_radix8by4_f32>
 80051ae:	e7be      	b.n	800512e <arm_cfft_f32+0x3a>
 80051b0:	b1ad      	cbz	r5, 80051de <arm_cfft_f32+0xea>
 80051b2:	f101 030c 	add.w	r3, r1, #12
 80051b6:	2200      	movs	r2, #0
 80051b8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80051bc:	3201      	adds	r2, #1
 80051be:	eef1 7a67 	vneg.f32	s15, s15
 80051c2:	4295      	cmp	r5, r2
 80051c4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80051c8:	f103 0308 	add.w	r3, r3, #8
 80051cc:	d1f4      	bne.n	80051b8 <arm_cfft_f32+0xc4>
 80051ce:	e79a      	b.n	8005106 <arm_cfft_f32+0x12>
 80051d0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80051d4:	d0a5      	beq.n	8005122 <arm_cfft_f32+0x2e>
 80051d6:	e7aa      	b.n	800512e <arm_cfft_f32+0x3a>
 80051d8:	2d10      	cmp	r5, #16
 80051da:	d0b6      	beq.n	800514a <arm_cfft_f32+0x56>
 80051dc:	e7a7      	b.n	800512e <arm_cfft_f32+0x3a>
 80051de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80051e2:	d894      	bhi.n	800510e <arm_cfft_f32+0x1a>
 80051e4:	e7aa      	b.n	800513c <arm_cfft_f32+0x48>
 80051e6:	bf00      	nop

080051e8 <arm_cmplx_mag_f32>:
 80051e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051ec:	ea5f 0892 	movs.w	r8, r2, lsr #2
 80051f0:	b084      	sub	sp, #16
 80051f2:	d07f      	beq.n	80052f4 <arm_cmplx_mag_f32+0x10c>
 80051f4:	2700      	movs	r7, #0
 80051f6:	f100 0420 	add.w	r4, r0, #32
 80051fa:	f101 0510 	add.w	r5, r1, #16
 80051fe:	4646      	mov	r6, r8
 8005200:	e05a      	b.n	80052b8 <arm_cmplx_mag_f32+0xd0>
 8005202:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005206:	eeb4 0a40 	vcmp.f32	s0, s0
 800520a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520e:	f040 80a4 	bne.w	800535a <arm_cmplx_mag_f32+0x172>
 8005212:	ed05 0a04 	vstr	s0, [r5, #-16]
 8005216:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800521a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800521e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005222:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005226:	ee77 7a80 	vadd.f32	s15, s15, s0
 800522a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005232:	f2c0 808f 	blt.w	8005354 <arm_cmplx_mag_f32+0x16c>
 8005236:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800523a:	eeb4 0a40 	vcmp.f32	s0, s0
 800523e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005242:	f040 80af 	bne.w	80053a4 <arm_cmplx_mag_f32+0x1bc>
 8005246:	ed05 0a03 	vstr	s0, [r5, #-12]
 800524a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800524e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8005252:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005256:	ee20 0a00 	vmul.f32	s0, s0, s0
 800525a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800525e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005266:	db72      	blt.n	800534e <arm_cmplx_mag_f32+0x166>
 8005268:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800526c:	eeb4 0a40 	vcmp.f32	s0, s0
 8005270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005274:	f040 808c 	bne.w	8005390 <arm_cmplx_mag_f32+0x1a8>
 8005278:	ed05 0a02 	vstr	s0, [r5, #-8]
 800527c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005280:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005284:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005288:	ee20 0a00 	vmul.f32	s0, s0, s0
 800528c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005290:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005298:	db20      	blt.n	80052dc <arm_cmplx_mag_f32+0xf4>
 800529a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800529e:	eeb4 0a40 	vcmp.f32	s0, s0
 80052a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a6:	d169      	bne.n	800537c <arm_cmplx_mag_f32+0x194>
 80052a8:	3e01      	subs	r6, #1
 80052aa:	ed05 0a01 	vstr	s0, [r5, #-4]
 80052ae:	f104 0420 	add.w	r4, r4, #32
 80052b2:	f105 0510 	add.w	r5, r5, #16
 80052b6:	d019      	beq.n	80052ec <arm_cmplx_mag_f32+0x104>
 80052b8:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80052bc:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80052c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80052c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80052c8:	ee77 7a80 	vadd.f32	s15, s15, s0
 80052cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80052d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052d4:	da95      	bge.n	8005202 <arm_cmplx_mag_f32+0x1a>
 80052d6:	f845 7c10 	str.w	r7, [r5, #-16]
 80052da:	e79c      	b.n	8005216 <arm_cmplx_mag_f32+0x2e>
 80052dc:	3e01      	subs	r6, #1
 80052de:	f845 7c04 	str.w	r7, [r5, #-4]
 80052e2:	f104 0420 	add.w	r4, r4, #32
 80052e6:	f105 0510 	add.w	r5, r5, #16
 80052ea:	d1e5      	bne.n	80052b8 <arm_cmplx_mag_f32+0xd0>
 80052ec:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 80052f0:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 80052f4:	f012 0503 	ands.w	r5, r2, #3
 80052f8:	d026      	beq.n	8005348 <arm_cmplx_mag_f32+0x160>
 80052fa:	2600      	movs	r6, #0
 80052fc:	f100 0408 	add.w	r4, r0, #8
 8005300:	e00c      	b.n	800531c <arm_cmplx_mag_f32+0x134>
 8005302:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005306:	eeb4 0a40 	vcmp.f32	s0, s0
 800530a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530e:	d12e      	bne.n	800536e <arm_cmplx_mag_f32+0x186>
 8005310:	3d01      	subs	r5, #1
 8005312:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005316:	f104 0408 	add.w	r4, r4, #8
 800531a:	d015      	beq.n	8005348 <arm_cmplx_mag_f32+0x160>
 800531c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005320:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005324:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005328:	ee20 0a00 	vmul.f32	s0, s0, s0
 800532c:	3104      	adds	r1, #4
 800532e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800533a:	dae2      	bge.n	8005302 <arm_cmplx_mag_f32+0x11a>
 800533c:	3d01      	subs	r5, #1
 800533e:	f841 6c04 	str.w	r6, [r1, #-4]
 8005342:	f104 0408 	add.w	r4, r4, #8
 8005346:	d1e9      	bne.n	800531c <arm_cmplx_mag_f32+0x134>
 8005348:	b004      	add	sp, #16
 800534a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800534e:	f845 7c08 	str.w	r7, [r5, #-8]
 8005352:	e793      	b.n	800527c <arm_cmplx_mag_f32+0x94>
 8005354:	f845 7c0c 	str.w	r7, [r5, #-12]
 8005358:	e777      	b.n	800524a <arm_cmplx_mag_f32+0x62>
 800535a:	eeb0 0a67 	vmov.f32	s0, s15
 800535e:	9203      	str	r2, [sp, #12]
 8005360:	9102      	str	r1, [sp, #8]
 8005362:	9001      	str	r0, [sp, #4]
 8005364:	f003 f8d8 	bl	8008518 <sqrtf>
 8005368:	a801      	add	r0, sp, #4
 800536a:	c807      	ldmia	r0, {r0, r1, r2}
 800536c:	e751      	b.n	8005212 <arm_cmplx_mag_f32+0x2a>
 800536e:	eeb0 0a67 	vmov.f32	s0, s15
 8005372:	9101      	str	r1, [sp, #4]
 8005374:	f003 f8d0 	bl	8008518 <sqrtf>
 8005378:	9901      	ldr	r1, [sp, #4]
 800537a:	e7c9      	b.n	8005310 <arm_cmplx_mag_f32+0x128>
 800537c:	eeb0 0a67 	vmov.f32	s0, s15
 8005380:	9203      	str	r2, [sp, #12]
 8005382:	9102      	str	r1, [sp, #8]
 8005384:	9001      	str	r0, [sp, #4]
 8005386:	f003 f8c7 	bl	8008518 <sqrtf>
 800538a:	a801      	add	r0, sp, #4
 800538c:	c807      	ldmia	r0, {r0, r1, r2}
 800538e:	e78b      	b.n	80052a8 <arm_cmplx_mag_f32+0xc0>
 8005390:	eeb0 0a67 	vmov.f32	s0, s15
 8005394:	9203      	str	r2, [sp, #12]
 8005396:	9102      	str	r1, [sp, #8]
 8005398:	9001      	str	r0, [sp, #4]
 800539a:	f003 f8bd 	bl	8008518 <sqrtf>
 800539e:	a801      	add	r0, sp, #4
 80053a0:	c807      	ldmia	r0, {r0, r1, r2}
 80053a2:	e769      	b.n	8005278 <arm_cmplx_mag_f32+0x90>
 80053a4:	eeb0 0a67 	vmov.f32	s0, s15
 80053a8:	9203      	str	r2, [sp, #12]
 80053aa:	9102      	str	r1, [sp, #8]
 80053ac:	9001      	str	r0, [sp, #4]
 80053ae:	f003 f8b3 	bl	8008518 <sqrtf>
 80053b2:	a801      	add	r0, sp, #4
 80053b4:	c807      	ldmia	r0, {r0, r1, r2}
 80053b6:	e746      	b.n	8005246 <arm_cmplx_mag_f32+0x5e>

080053b8 <arm_radix8_butterfly_f32>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	ed2d 8b10 	vpush	{d8-d15}
 80053c0:	461c      	mov	r4, r3
 80053c2:	b09d      	sub	sp, #116	; 0x74
 80053c4:	4603      	mov	r3, r0
 80053c6:	3304      	adds	r3, #4
 80053c8:	ed9f bac4 	vldr	s22, [pc, #784]	; 80056dc <arm_radix8_butterfly_f32+0x324>
 80053cc:	9019      	str	r0, [sp, #100]	; 0x64
 80053ce:	921a      	str	r2, [sp, #104]	; 0x68
 80053d0:	468b      	mov	fp, r1
 80053d2:	931b      	str	r3, [sp, #108]	; 0x6c
 80053d4:	468a      	mov	sl, r1
 80053d6:	46a1      	mov	r9, r4
 80053d8:	4607      	mov	r7, r0
 80053da:	ea4f 03db 	mov.w	r3, fp, lsr #3
 80053de:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80053e2:	eb03 0508 	add.w	r5, r3, r8
 80053e6:	195c      	adds	r4, r3, r5
 80053e8:	00de      	lsls	r6, r3, #3
 80053ea:	191a      	adds	r2, r3, r4
 80053ec:	9600      	str	r6, [sp, #0]
 80053ee:	1898      	adds	r0, r3, r2
 80053f0:	4619      	mov	r1, r3
 80053f2:	9e00      	ldr	r6, [sp, #0]
 80053f4:	9311      	str	r3, [sp, #68]	; 0x44
 80053f6:	4401      	add	r1, r0
 80053f8:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80053fc:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8005400:	19be      	adds	r6, r7, r6
 8005402:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8005406:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 800540a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 800540e:	9f00      	ldr	r7, [sp, #0]
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	eb06 0e07 	add.w	lr, r6, r7
 8005416:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8005418:	9302      	str	r3, [sp, #8]
 800541a:	3204      	adds	r2, #4
 800541c:	3104      	adds	r1, #4
 800541e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005422:	f04f 0c00 	mov.w	ip, #0
 8005426:	edde 7a00 	vldr	s15, [lr]
 800542a:	edd6 6a00 	vldr	s13, [r6]
 800542e:	ed95 2a00 	vldr	s4, [r5]
 8005432:	ed17 aa01 	vldr	s20, [r7, #-4]
 8005436:	edd4 4a00 	vldr	s9, [r4]
 800543a:	ed90 5a00 	vldr	s10, [r0]
 800543e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005442:	ed51 0a01 	vldr	s1, [r1, #-4]
 8005446:	ee77 8a85 	vadd.f32	s17, s15, s10
 800544a:	ee76 3a87 	vadd.f32	s7, s13, s14
 800544e:	ee32 4a20 	vadd.f32	s8, s4, s1
 8005452:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8005456:	ee33 6a84 	vadd.f32	s12, s7, s8
 800545a:	ee73 5a28 	vadd.f32	s11, s6, s17
 800545e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005462:	ee75 6a86 	vadd.f32	s13, s11, s12
 8005466:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800546a:	ed47 6a01 	vstr	s13, [r7, #-4]
 800546e:	edc4 5a00 	vstr	s11, [r4]
 8005472:	ed92 9a00 	vldr	s18, [r2]
 8005476:	ed95 1a01 	vldr	s2, [r5, #4]
 800547a:	edd6 5a01 	vldr	s11, [r6, #4]
 800547e:	ed91 6a00 	vldr	s12, [r1]
 8005482:	edd7 2a00 	vldr	s5, [r7]
 8005486:	edd4 1a01 	vldr	s3, [r4, #4]
 800548a:	edde 6a01 	vldr	s13, [lr, #4]
 800548e:	edd0 9a01 	vldr	s19, [r0, #4]
 8005492:	ee72 0a60 	vsub.f32	s1, s4, s1
 8005496:	ee71 aa46 	vsub.f32	s21, s2, s12
 800549a:	ee35 2ac9 	vsub.f32	s4, s11, s18
 800549e:	ee37 0a60 	vsub.f32	s0, s14, s1
 80054a2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 80054a6:	ee37 7a20 	vadd.f32	s14, s14, s1
 80054aa:	ee32 2a6a 	vsub.f32	s4, s4, s21
 80054ae:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80054b2:	ee75 5a89 	vadd.f32	s11, s11, s18
 80054b6:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80054ba:	ee7a 4a64 	vsub.f32	s9, s20, s9
 80054be:	ee31 6a06 	vadd.f32	s12, s2, s12
 80054c2:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80054c6:	ee32 1aa1 	vadd.f32	s2, s5, s3
 80054ca:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80054ce:	ee72 1ae1 	vsub.f32	s3, s5, s3
 80054d2:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80054d6:	ee62 2a0b 	vmul.f32	s5, s4, s22
 80054da:	ee67 7a0b 	vmul.f32	s15, s14, s22
 80054de:	ee33 3a68 	vsub.f32	s6, s6, s17
 80054e2:	ee36 0a88 	vadd.f32	s0, s13, s16
 80054e6:	ee75 8a86 	vadd.f32	s17, s11, s12
 80054ea:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80054ee:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80054f2:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80054f6:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80054fa:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80054fe:	ee75 4a27 	vadd.f32	s9, s10, s15
 8005502:	ee71 5a49 	vsub.f32	s11, s2, s18
 8005506:	ee31 2a09 	vadd.f32	s4, s2, s18
 800550a:	ee75 7a67 	vsub.f32	s15, s10, s15
 800550e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8005512:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8005516:	ee73 0a06 	vadd.f32	s1, s6, s12
 800551a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 800551e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8005522:	ee32 8a28 	vadd.f32	s16, s4, s17
 8005526:	ee33 6a46 	vsub.f32	s12, s6, s12
 800552a:	ee34 4a25 	vadd.f32	s8, s8, s11
 800552e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8005532:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005536:	ee71 5a64 	vsub.f32	s11, s2, s9
 800553a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 800553e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8005542:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8005546:	ee74 4a81 	vadd.f32	s9, s9, s2
 800554a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 800554e:	44dc      	add	ip, fp
 8005550:	45e2      	cmp	sl, ip
 8005552:	ed87 8a00 	vstr	s16, [r7]
 8005556:	ed84 2a01 	vstr	s4, [r4, #4]
 800555a:	441f      	add	r7, r3
 800555c:	edce 0a00 	vstr	s1, [lr]
 8005560:	441c      	add	r4, r3
 8005562:	ed80 6a00 	vstr	s12, [r0]
 8005566:	edce 1a01 	vstr	s3, [lr, #4]
 800556a:	ed80 4a01 	vstr	s8, [r0, #4]
 800556e:	449e      	add	lr, r3
 8005570:	ed86 3a00 	vstr	s6, [r6]
 8005574:	4418      	add	r0, r3
 8005576:	ed41 3a01 	vstr	s7, [r1, #-4]
 800557a:	ed02 5a01 	vstr	s10, [r2, #-4]
 800557e:	ed85 7a00 	vstr	s14, [r5]
 8005582:	edc6 5a01 	vstr	s11, [r6, #4]
 8005586:	edc1 4a00 	vstr	s9, [r1]
 800558a:	441e      	add	r6, r3
 800558c:	edc2 6a00 	vstr	s13, [r2]
 8005590:	4419      	add	r1, r3
 8005592:	edc5 7a01 	vstr	s15, [r5, #4]
 8005596:	441a      	add	r2, r3
 8005598:	441d      	add	r5, r3
 800559a:	f63f af44 	bhi.w	8005426 <arm_radix8_butterfly_f32+0x6e>
 800559e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80055a0:	2a07      	cmp	r2, #7
 80055a2:	f240 81f5 	bls.w	8005990 <arm_radix8_butterfly_f32+0x5d8>
 80055a6:	f108 0101 	add.w	r1, r8, #1
 80055aa:	188f      	adds	r7, r1, r2
 80055ac:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 80055b0:	19d6      	adds	r6, r2, r7
 80055b2:	eb08 0c09 	add.w	ip, r8, r9
 80055b6:	1994      	adds	r4, r2, r6
 80055b8:	eb0c 0e09 	add.w	lr, ip, r9
 80055bc:	4610      	mov	r0, r2
 80055be:	9701      	str	r7, [sp, #4]
 80055c0:	4420      	add	r0, r4
 80055c2:	eb0e 0709 	add.w	r7, lr, r9
 80055c6:	1815      	adds	r5, r2, r0
 80055c8:	eb07 0209 	add.w	r2, r7, r9
 80055cc:	9203      	str	r2, [sp, #12]
 80055ce:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80055d0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80055d6:	440a      	add	r2, r1
 80055d8:	9900      	ldr	r1, [sp, #0]
 80055da:	3108      	adds	r1, #8
 80055dc:	9100      	str	r1, [sp, #0]
 80055de:	9902      	ldr	r1, [sp, #8]
 80055e0:	3108      	adds	r1, #8
 80055e2:	9102      	str	r1, [sp, #8]
 80055e4:	9919      	ldr	r1, [sp, #100]	; 0x64
 80055e6:	00ff      	lsls	r7, r7, #3
 80055e8:	9715      	str	r7, [sp, #84]	; 0x54
 80055ea:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80055ee:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80055f2:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80055f6:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80055f8:	9903      	ldr	r1, [sp, #12]
 80055fa:	19d7      	adds	r7, r2, r7
 80055fc:	00c9      	lsls	r1, r1, #3
 80055fe:	9114      	str	r1, [sp, #80]	; 0x50
 8005600:	9710      	str	r7, [sp, #64]	; 0x40
 8005602:	9919      	ldr	r1, [sp, #100]	; 0x64
 8005604:	9f00      	ldr	r7, [sp, #0]
 8005606:	19cf      	adds	r7, r1, r7
 8005608:	970d      	str	r7, [sp, #52]	; 0x34
 800560a:	9f02      	ldr	r7, [sp, #8]
 800560c:	19cf      	adds	r7, r1, r7
 800560e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8005612:	970c      	str	r7, [sp, #48]	; 0x30
 8005614:	9f01      	ldr	r7, [sp, #4]
 8005616:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 800561a:	3504      	adds	r5, #4
 800561c:	3004      	adds	r0, #4
 800561e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8005622:	9508      	str	r5, [sp, #32]
 8005624:	9009      	str	r0, [sp, #36]	; 0x24
 8005626:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8005628:	981a      	ldr	r0, [sp, #104]	; 0x68
 800562a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 800562e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8005632:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8005636:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8005638:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 800563c:	1945      	adds	r5, r0, r5
 800563e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8005642:	460f      	mov	r7, r1
 8005644:	3404      	adds	r4, #4
 8005646:	4641      	mov	r1, r8
 8005648:	1841      	adds	r1, r0, r1
 800564a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 800564e:	940a      	str	r4, [sp, #40]	; 0x28
 8005650:	eb00 0c06 	add.w	ip, r0, r6
 8005654:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005658:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800565a:	9506      	str	r5, [sp, #24]
 800565c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 800565e:	9105      	str	r1, [sp, #20]
 8005660:	4639      	mov	r1, r7
 8005662:	1905      	adds	r5, r0, r4
 8005664:	3108      	adds	r1, #8
 8005666:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8005668:	9507      	str	r5, [sp, #28]
 800566a:	910f      	str	r1, [sp, #60]	; 0x3c
 800566c:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8005670:	2101      	movs	r1, #1
 8005672:	eb00 0e06 	add.w	lr, r0, r6
 8005676:	9518      	str	r5, [sp, #96]	; 0x60
 8005678:	9404      	str	r4, [sp, #16]
 800567a:	9103      	str	r1, [sp, #12]
 800567c:	4620      	mov	r0, r4
 800567e:	4689      	mov	r9, r1
 8005680:	9e06      	ldr	r6, [sp, #24]
 8005682:	ed90 fa00 	vldr	s30, [r0]
 8005686:	edd6 7a01 	vldr	s15, [r6, #4]
 800568a:	edd0 ba01 	vldr	s23, [r0, #4]
 800568e:	edcd 7a00 	vstr	s15, [sp]
 8005692:	a80d      	add	r0, sp, #52	; 0x34
 8005694:	edde 7a01 	vldr	s15, [lr, #4]
 8005698:	9c05      	ldr	r4, [sp, #20]
 800569a:	9d07      	ldr	r5, [sp, #28]
 800569c:	edd2 fa00 	vldr	s31, [r2]
 80056a0:	ed92 ca01 	vldr	s24, [r2, #4]
 80056a4:	edcd 7a01 	vstr	s15, [sp, #4]
 80056a8:	c807      	ldmia	r0, {r0, r1, r2}
 80056aa:	eddc 7a01 	vldr	s15, [ip, #4]
 80056ae:	edd4 ea00 	vldr	s29, [r4]
 80056b2:	ed95 ea00 	vldr	s28, [r5]
 80056b6:	edd6 da00 	vldr	s27, [r6]
 80056ba:	edd4 aa01 	vldr	s21, [r4, #4]
 80056be:	ed95 aa01 	vldr	s20, [r5, #4]
 80056c2:	ed9e da00 	vldr	s26, [lr]
 80056c6:	eddc ca00 	vldr	s25, [ip]
 80056ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80056ce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80056d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80056d2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80056d4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80056d6:	edcd 7a02 	vstr	s15, [sp, #8]
 80056da:	e001      	b.n	80056e0 <arm_radix8_butterfly_f32+0x328>
 80056dc:	3f3504f3 	.word	0x3f3504f3
 80056e0:	ed16 6a01 	vldr	s12, [r6, #-4]
 80056e4:	ed91 5a00 	vldr	s10, [r1]
 80056e8:	ed57 9a01 	vldr	s19, [r7, #-4]
 80056ec:	edd5 7a00 	vldr	s15, [r5]
 80056f0:	ed18 7a01 	vldr	s14, [r8, #-4]
 80056f4:	edd2 3a00 	vldr	s7, [r2]
 80056f8:	ed94 3a00 	vldr	s6, [r4]
 80056fc:	ed90 2a00 	vldr	s4, [r0]
 8005700:	ed92 0a01 	vldr	s0, [r2, #4]
 8005704:	ee33 8a85 	vadd.f32	s16, s7, s10
 8005708:	ee32 1a06 	vadd.f32	s2, s4, s12
 800570c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8005710:	ee77 4a87 	vadd.f32	s9, s15, s14
 8005714:	ee78 1a04 	vadd.f32	s3, s16, s8
 8005718:	ee71 6a24 	vadd.f32	s13, s2, s9
 800571c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8005720:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8005724:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005728:	ed82 6a00 	vstr	s12, [r2]
 800572c:	edd5 8a01 	vldr	s17, [r5, #4]
 8005730:	ed90 9a01 	vldr	s18, [r0, #4]
 8005734:	edd6 2a00 	vldr	s5, [r6]
 8005738:	ed98 7a00 	vldr	s14, [r8]
 800573c:	edd4 0a01 	vldr	s1, [r4, #4]
 8005740:	ed91 6a01 	vldr	s12, [r1, #4]
 8005744:	edd7 5a00 	vldr	s11, [r7]
 8005748:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800574c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8005750:	ee39 5a62 	vsub.f32	s10, s18, s5
 8005754:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8005758:	ee38 4a44 	vsub.f32	s8, s16, s8
 800575c:	ee38 7a87 	vadd.f32	s14, s17, s14
 8005760:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8005764:	ee79 2a22 	vadd.f32	s5, s18, s5
 8005768:	ee75 8a69 	vsub.f32	s17, s10, s19
 800576c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8005770:	ee35 5a29 	vadd.f32	s10, s10, s19
 8005774:	ee72 7a67 	vsub.f32	s15, s4, s15
 8005778:	ee30 2a06 	vadd.f32	s4, s0, s12
 800577c:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8005780:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8005784:	ee32 9a08 	vadd.f32	s18, s4, s16
 8005788:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800578c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8005790:	ee71 4a64 	vsub.f32	s9, s2, s9
 8005794:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8005798:	ee32 1a87 	vadd.f32	s2, s5, s14
 800579c:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80057a0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80057a4:	ee30 6a46 	vsub.f32	s12, s0, s12
 80057a8:	ee73 0a29 	vadd.f32	s1, s6, s19
 80057ac:	ee36 0a28 	vadd.f32	s0, s12, s17
 80057b0:	ee33 3a69 	vsub.f32	s6, s6, s19
 80057b4:	ee32 7a64 	vsub.f32	s14, s4, s9
 80057b8:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80057bc:	ee36 6a68 	vsub.f32	s12, s12, s17
 80057c0:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80057c4:	ee75 8a85 	vadd.f32	s17, s11, s10
 80057c8:	ee74 3a22 	vadd.f32	s7, s8, s5
 80057cc:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80057d0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80057d4:	ee79 1a41 	vsub.f32	s3, s18, s2
 80057d8:	ee39 8aa8 	vadd.f32	s16, s19, s17
 80057dc:	ee76 5a43 	vsub.f32	s11, s12, s6
 80057e0:	ee74 2a62 	vsub.f32	s5, s8, s5
 80057e4:	ee74 4a82 	vadd.f32	s9, s9, s4
 80057e8:	ee30 4a60 	vsub.f32	s8, s0, s1
 80057ec:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80057f0:	ee30 0a80 	vadd.f32	s0, s1, s0
 80057f4:	ee77 9a85 	vadd.f32	s19, s15, s10
 80057f8:	ee33 6a06 	vadd.f32	s12, s6, s12
 80057fc:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8005800:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8005804:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8005808:	ee6f 0a23 	vmul.f32	s1, s30, s7
 800580c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8005810:	ee39 1a01 	vadd.f32	s2, s18, s2
 8005814:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8005818:	ee2b 9a87 	vmul.f32	s18, s23, s14
 800581c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8005820:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8005824:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8005828:	ee35 3a03 	vadd.f32	s6, s10, s6
 800582c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8005830:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8005834:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8005838:	ed9d 4a02 	vldr	s8, [sp, #8]
 800583c:	ed82 1a01 	vstr	s2, [r2, #4]
 8005840:	ee77 3a63 	vsub.f32	s7, s14, s7
 8005844:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8005848:	ed9d 7a01 	vldr	s14, [sp, #4]
 800584c:	ed81 3a00 	vstr	s6, [r1]
 8005850:	ee30 9a89 	vadd.f32	s18, s1, s18
 8005854:	ee32 2a05 	vadd.f32	s4, s4, s10
 8005858:	ee6d 0a22 	vmul.f32	s1, s26, s5
 800585c:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8005860:	ee67 2a22 	vmul.f32	s5, s14, s5
 8005864:	ee64 1a00 	vmul.f32	s3, s8, s0
 8005868:	ee27 7a24 	vmul.f32	s14, s14, s9
 800586c:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8005870:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8005874:	ee64 8a28 	vmul.f32	s17, s8, s17
 8005878:	ed9d 4a00 	vldr	s8, [sp]
 800587c:	edc1 6a01 	vstr	s13, [r1, #4]
 8005880:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8005884:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8005888:	ee64 9a29 	vmul.f32	s19, s8, s19
 800588c:	ee24 4a25 	vmul.f32	s8, s8, s11
 8005890:	ee30 7a87 	vadd.f32	s14, s1, s14
 8005894:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005898:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 800589c:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80058a0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80058a4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80058a8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80058ac:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80058b0:	ee75 1a21 	vadd.f32	s3, s10, s3
 80058b4:	ee30 0a68 	vsub.f32	s0, s0, s17
 80058b8:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80058bc:	ee70 0a84 	vadd.f32	s1, s1, s8
 80058c0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80058c4:	44d9      	add	r9, fp
 80058c6:	45ca      	cmp	sl, r9
 80058c8:	ed84 9a00 	vstr	s18, [r4]
 80058cc:	edc4 3a01 	vstr	s7, [r4, #4]
 80058d0:	441a      	add	r2, r3
 80058d2:	ed07 7a01 	vstr	s14, [r7, #-4]
 80058d6:	edc7 2a00 	vstr	s5, [r7]
 80058da:	4419      	add	r1, r3
 80058dc:	ed80 2a00 	vstr	s4, [r0]
 80058e0:	ed80 8a01 	vstr	s16, [r0, #4]
 80058e4:	441c      	add	r4, r3
 80058e6:	ed48 1a01 	vstr	s3, [r8, #-4]
 80058ea:	ed88 0a00 	vstr	s0, [r8]
 80058ee:	441f      	add	r7, r3
 80058f0:	ed46 4a01 	vstr	s9, [r6, #-4]
 80058f4:	4418      	add	r0, r3
 80058f6:	edc6 9a00 	vstr	s19, [r6]
 80058fa:	4498      	add	r8, r3
 80058fc:	edc5 0a00 	vstr	s1, [r5]
 8005900:	ed85 6a01 	vstr	s12, [r5, #4]
 8005904:	441e      	add	r6, r3
 8005906:	441d      	add	r5, r3
 8005908:	f63f aeea 	bhi.w	80056e0 <arm_radix8_butterfly_f32+0x328>
 800590c:	9a03      	ldr	r2, [sp, #12]
 800590e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8005910:	3201      	adds	r2, #1
 8005912:	4611      	mov	r1, r2
 8005914:	9203      	str	r2, [sp, #12]
 8005916:	9a04      	ldr	r2, [sp, #16]
 8005918:	4402      	add	r2, r0
 800591a:	9204      	str	r2, [sp, #16]
 800591c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800591e:	9a05      	ldr	r2, [sp, #20]
 8005920:	4402      	add	r2, r0
 8005922:	9205      	str	r2, [sp, #20]
 8005924:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005926:	9a07      	ldr	r2, [sp, #28]
 8005928:	4402      	add	r2, r0
 800592a:	9207      	str	r2, [sp, #28]
 800592c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800592e:	9a06      	ldr	r2, [sp, #24]
 8005930:	4402      	add	r2, r0
 8005932:	9206      	str	r2, [sp, #24]
 8005934:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005936:	4496      	add	lr, r2
 8005938:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800593a:	4494      	add	ip, r2
 800593c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800593e:	3208      	adds	r2, #8
 8005940:	920f      	str	r2, [sp, #60]	; 0x3c
 8005942:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005944:	3208      	adds	r2, #8
 8005946:	920e      	str	r2, [sp, #56]	; 0x38
 8005948:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800594a:	3208      	adds	r2, #8
 800594c:	920d      	str	r2, [sp, #52]	; 0x34
 800594e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005950:	3208      	adds	r2, #8
 8005952:	920c      	str	r2, [sp, #48]	; 0x30
 8005954:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005956:	3208      	adds	r2, #8
 8005958:	920b      	str	r2, [sp, #44]	; 0x2c
 800595a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800595c:	3208      	adds	r2, #8
 800595e:	920a      	str	r2, [sp, #40]	; 0x28
 8005960:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005962:	3208      	adds	r2, #8
 8005964:	9209      	str	r2, [sp, #36]	; 0x24
 8005966:	9a08      	ldr	r2, [sp, #32]
 8005968:	3208      	adds	r2, #8
 800596a:	9208      	str	r2, [sp, #32]
 800596c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800596e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005970:	4288      	cmp	r0, r1
 8005972:	4622      	mov	r2, r4
 8005974:	d007      	beq.n	8005986 <arm_radix8_butterfly_f32+0x5ce>
 8005976:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005978:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800597c:	4621      	mov	r1, r4
 800597e:	4401      	add	r1, r0
 8005980:	9110      	str	r1, [sp, #64]	; 0x40
 8005982:	9804      	ldr	r0, [sp, #16]
 8005984:	e67c      	b.n	8005680 <arm_radix8_butterfly_f32+0x2c8>
 8005986:	4683      	mov	fp, r0
 8005988:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 800598c:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800598e:	e524      	b.n	80053da <arm_radix8_butterfly_f32+0x22>
 8005990:	b01d      	add	sp, #116	; 0x74
 8005992:	ecbd 8b10 	vpop	{d8-d15}
 8005996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800599a:	bf00      	nop

0800599c <__errno>:
 800599c:	4b01      	ldr	r3, [pc, #4]	; (80059a4 <__errno+0x8>)
 800599e:	6818      	ldr	r0, [r3, #0]
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	2000001c 	.word	0x2000001c

080059a8 <__libc_init_array>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	4d0d      	ldr	r5, [pc, #52]	; (80059e0 <__libc_init_array+0x38>)
 80059ac:	4c0d      	ldr	r4, [pc, #52]	; (80059e4 <__libc_init_array+0x3c>)
 80059ae:	1b64      	subs	r4, r4, r5
 80059b0:	10a4      	asrs	r4, r4, #2
 80059b2:	2600      	movs	r6, #0
 80059b4:	42a6      	cmp	r6, r4
 80059b6:	d109      	bne.n	80059cc <__libc_init_array+0x24>
 80059b8:	4d0b      	ldr	r5, [pc, #44]	; (80059e8 <__libc_init_array+0x40>)
 80059ba:	4c0c      	ldr	r4, [pc, #48]	; (80059ec <__libc_init_array+0x44>)
 80059bc:	f002 fdce 	bl	800855c <_init>
 80059c0:	1b64      	subs	r4, r4, r5
 80059c2:	10a4      	asrs	r4, r4, #2
 80059c4:	2600      	movs	r6, #0
 80059c6:	42a6      	cmp	r6, r4
 80059c8:	d105      	bne.n	80059d6 <__libc_init_array+0x2e>
 80059ca:	bd70      	pop	{r4, r5, r6, pc}
 80059cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80059d0:	4798      	blx	r3
 80059d2:	3601      	adds	r6, #1
 80059d4:	e7ee      	b.n	80059b4 <__libc_init_array+0xc>
 80059d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059da:	4798      	blx	r3
 80059dc:	3601      	adds	r6, #1
 80059de:	e7f2      	b.n	80059c6 <__libc_init_array+0x1e>
 80059e0:	0800d5c4 	.word	0x0800d5c4
 80059e4:	0800d5c4 	.word	0x0800d5c4
 80059e8:	0800d5c4 	.word	0x0800d5c4
 80059ec:	0800d5c8 	.word	0x0800d5c8

080059f0 <memcpy>:
 80059f0:	440a      	add	r2, r1
 80059f2:	4291      	cmp	r1, r2
 80059f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80059f8:	d100      	bne.n	80059fc <memcpy+0xc>
 80059fa:	4770      	bx	lr
 80059fc:	b510      	push	{r4, lr}
 80059fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a06:	4291      	cmp	r1, r2
 8005a08:	d1f9      	bne.n	80059fe <memcpy+0xe>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <memset>:
 8005a0c:	4402      	add	r2, r0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d100      	bne.n	8005a16 <memset+0xa>
 8005a14:	4770      	bx	lr
 8005a16:	f803 1b01 	strb.w	r1, [r3], #1
 8005a1a:	e7f9      	b.n	8005a10 <memset+0x4>

08005a1c <__cvt>:
 8005a1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a20:	ec55 4b10 	vmov	r4, r5, d0
 8005a24:	2d00      	cmp	r5, #0
 8005a26:	460e      	mov	r6, r1
 8005a28:	4619      	mov	r1, r3
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	bfbb      	ittet	lt
 8005a2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005a32:	461d      	movlt	r5, r3
 8005a34:	2300      	movge	r3, #0
 8005a36:	232d      	movlt	r3, #45	; 0x2d
 8005a38:	700b      	strb	r3, [r1, #0]
 8005a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005a40:	4691      	mov	r9, r2
 8005a42:	f023 0820 	bic.w	r8, r3, #32
 8005a46:	bfbc      	itt	lt
 8005a48:	4622      	movlt	r2, r4
 8005a4a:	4614      	movlt	r4, r2
 8005a4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a50:	d005      	beq.n	8005a5e <__cvt+0x42>
 8005a52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005a56:	d100      	bne.n	8005a5a <__cvt+0x3e>
 8005a58:	3601      	adds	r6, #1
 8005a5a:	2102      	movs	r1, #2
 8005a5c:	e000      	b.n	8005a60 <__cvt+0x44>
 8005a5e:	2103      	movs	r1, #3
 8005a60:	ab03      	add	r3, sp, #12
 8005a62:	9301      	str	r3, [sp, #4]
 8005a64:	ab02      	add	r3, sp, #8
 8005a66:	9300      	str	r3, [sp, #0]
 8005a68:	ec45 4b10 	vmov	d0, r4, r5
 8005a6c:	4653      	mov	r3, sl
 8005a6e:	4632      	mov	r2, r6
 8005a70:	f000 fe02 	bl	8006678 <_dtoa_r>
 8005a74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005a78:	4607      	mov	r7, r0
 8005a7a:	d102      	bne.n	8005a82 <__cvt+0x66>
 8005a7c:	f019 0f01 	tst.w	r9, #1
 8005a80:	d022      	beq.n	8005ac8 <__cvt+0xac>
 8005a82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005a86:	eb07 0906 	add.w	r9, r7, r6
 8005a8a:	d110      	bne.n	8005aae <__cvt+0x92>
 8005a8c:	783b      	ldrb	r3, [r7, #0]
 8005a8e:	2b30      	cmp	r3, #48	; 0x30
 8005a90:	d10a      	bne.n	8005aa8 <__cvt+0x8c>
 8005a92:	2200      	movs	r2, #0
 8005a94:	2300      	movs	r3, #0
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fb f895 	bl	8000bc8 <__aeabi_dcmpeq>
 8005a9e:	b918      	cbnz	r0, 8005aa8 <__cvt+0x8c>
 8005aa0:	f1c6 0601 	rsb	r6, r6, #1
 8005aa4:	f8ca 6000 	str.w	r6, [sl]
 8005aa8:	f8da 3000 	ldr.w	r3, [sl]
 8005aac:	4499      	add	r9, r3
 8005aae:	2200      	movs	r2, #0
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	f7fb f887 	bl	8000bc8 <__aeabi_dcmpeq>
 8005aba:	b108      	cbz	r0, 8005ac0 <__cvt+0xa4>
 8005abc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005ac0:	2230      	movs	r2, #48	; 0x30
 8005ac2:	9b03      	ldr	r3, [sp, #12]
 8005ac4:	454b      	cmp	r3, r9
 8005ac6:	d307      	bcc.n	8005ad8 <__cvt+0xbc>
 8005ac8:	9b03      	ldr	r3, [sp, #12]
 8005aca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005acc:	1bdb      	subs	r3, r3, r7
 8005ace:	4638      	mov	r0, r7
 8005ad0:	6013      	str	r3, [r2, #0]
 8005ad2:	b004      	add	sp, #16
 8005ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad8:	1c59      	adds	r1, r3, #1
 8005ada:	9103      	str	r1, [sp, #12]
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e7f0      	b.n	8005ac2 <__cvt+0xa6>

08005ae0 <__exponent>:
 8005ae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2900      	cmp	r1, #0
 8005ae6:	bfb8      	it	lt
 8005ae8:	4249      	neglt	r1, r1
 8005aea:	f803 2b02 	strb.w	r2, [r3], #2
 8005aee:	bfb4      	ite	lt
 8005af0:	222d      	movlt	r2, #45	; 0x2d
 8005af2:	222b      	movge	r2, #43	; 0x2b
 8005af4:	2909      	cmp	r1, #9
 8005af6:	7042      	strb	r2, [r0, #1]
 8005af8:	dd2a      	ble.n	8005b50 <__exponent+0x70>
 8005afa:	f10d 0407 	add.w	r4, sp, #7
 8005afe:	46a4      	mov	ip, r4
 8005b00:	270a      	movs	r7, #10
 8005b02:	46a6      	mov	lr, r4
 8005b04:	460a      	mov	r2, r1
 8005b06:	fb91 f6f7 	sdiv	r6, r1, r7
 8005b0a:	fb07 1516 	mls	r5, r7, r6, r1
 8005b0e:	3530      	adds	r5, #48	; 0x30
 8005b10:	2a63      	cmp	r2, #99	; 0x63
 8005b12:	f104 34ff 	add.w	r4, r4, #4294967295
 8005b16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005b1a:	4631      	mov	r1, r6
 8005b1c:	dcf1      	bgt.n	8005b02 <__exponent+0x22>
 8005b1e:	3130      	adds	r1, #48	; 0x30
 8005b20:	f1ae 0502 	sub.w	r5, lr, #2
 8005b24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005b28:	1c44      	adds	r4, r0, #1
 8005b2a:	4629      	mov	r1, r5
 8005b2c:	4561      	cmp	r1, ip
 8005b2e:	d30a      	bcc.n	8005b46 <__exponent+0x66>
 8005b30:	f10d 0209 	add.w	r2, sp, #9
 8005b34:	eba2 020e 	sub.w	r2, r2, lr
 8005b38:	4565      	cmp	r5, ip
 8005b3a:	bf88      	it	hi
 8005b3c:	2200      	movhi	r2, #0
 8005b3e:	4413      	add	r3, r2
 8005b40:	1a18      	subs	r0, r3, r0
 8005b42:	b003      	add	sp, #12
 8005b44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005b4e:	e7ed      	b.n	8005b2c <__exponent+0x4c>
 8005b50:	2330      	movs	r3, #48	; 0x30
 8005b52:	3130      	adds	r1, #48	; 0x30
 8005b54:	7083      	strb	r3, [r0, #2]
 8005b56:	70c1      	strb	r1, [r0, #3]
 8005b58:	1d03      	adds	r3, r0, #4
 8005b5a:	e7f1      	b.n	8005b40 <__exponent+0x60>

08005b5c <_printf_float>:
 8005b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b60:	ed2d 8b02 	vpush	{d8}
 8005b64:	b08d      	sub	sp, #52	; 0x34
 8005b66:	460c      	mov	r4, r1
 8005b68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005b6c:	4616      	mov	r6, r2
 8005b6e:	461f      	mov	r7, r3
 8005b70:	4605      	mov	r5, r0
 8005b72:	f001 fd27 	bl	80075c4 <_localeconv_r>
 8005b76:	f8d0 a000 	ldr.w	sl, [r0]
 8005b7a:	4650      	mov	r0, sl
 8005b7c:	f7fa fba8 	bl	80002d0 <strlen>
 8005b80:	2300      	movs	r3, #0
 8005b82:	930a      	str	r3, [sp, #40]	; 0x28
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	9305      	str	r3, [sp, #20]
 8005b88:	f8d8 3000 	ldr.w	r3, [r8]
 8005b8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005b90:	3307      	adds	r3, #7
 8005b92:	f023 0307 	bic.w	r3, r3, #7
 8005b96:	f103 0208 	add.w	r2, r3, #8
 8005b9a:	f8c8 2000 	str.w	r2, [r8]
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005ba6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005baa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005bae:	9307      	str	r3, [sp, #28]
 8005bb0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005bb4:	ee08 0a10 	vmov	s16, r0
 8005bb8:	4b9f      	ldr	r3, [pc, #636]	; (8005e38 <_printf_float+0x2dc>)
 8005bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005bc2:	f7fb f833 	bl	8000c2c <__aeabi_dcmpun>
 8005bc6:	bb88      	cbnz	r0, 8005c2c <_printf_float+0xd0>
 8005bc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bcc:	4b9a      	ldr	r3, [pc, #616]	; (8005e38 <_printf_float+0x2dc>)
 8005bce:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd2:	f7fb f80d 	bl	8000bf0 <__aeabi_dcmple>
 8005bd6:	bb48      	cbnz	r0, 8005c2c <_printf_float+0xd0>
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2300      	movs	r3, #0
 8005bdc:	4640      	mov	r0, r8
 8005bde:	4649      	mov	r1, r9
 8005be0:	f7fa fffc 	bl	8000bdc <__aeabi_dcmplt>
 8005be4:	b110      	cbz	r0, 8005bec <_printf_float+0x90>
 8005be6:	232d      	movs	r3, #45	; 0x2d
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005bec:	4b93      	ldr	r3, [pc, #588]	; (8005e3c <_printf_float+0x2e0>)
 8005bee:	4894      	ldr	r0, [pc, #592]	; (8005e40 <_printf_float+0x2e4>)
 8005bf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005bf4:	bf94      	ite	ls
 8005bf6:	4698      	movls	r8, r3
 8005bf8:	4680      	movhi	r8, r0
 8005bfa:	2303      	movs	r3, #3
 8005bfc:	6123      	str	r3, [r4, #16]
 8005bfe:	9b05      	ldr	r3, [sp, #20]
 8005c00:	f023 0204 	bic.w	r2, r3, #4
 8005c04:	6022      	str	r2, [r4, #0]
 8005c06:	f04f 0900 	mov.w	r9, #0
 8005c0a:	9700      	str	r7, [sp, #0]
 8005c0c:	4633      	mov	r3, r6
 8005c0e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c10:	4621      	mov	r1, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f9d8 	bl	8005fc8 <_printf_common>
 8005c18:	3001      	adds	r0, #1
 8005c1a:	f040 8090 	bne.w	8005d3e <_printf_float+0x1e2>
 8005c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c22:	b00d      	add	sp, #52	; 0x34
 8005c24:	ecbd 8b02 	vpop	{d8}
 8005c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c2c:	4642      	mov	r2, r8
 8005c2e:	464b      	mov	r3, r9
 8005c30:	4640      	mov	r0, r8
 8005c32:	4649      	mov	r1, r9
 8005c34:	f7fa fffa 	bl	8000c2c <__aeabi_dcmpun>
 8005c38:	b140      	cbz	r0, 8005c4c <_printf_float+0xf0>
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	bfbc      	itt	lt
 8005c40:	232d      	movlt	r3, #45	; 0x2d
 8005c42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005c46:	487f      	ldr	r0, [pc, #508]	; (8005e44 <_printf_float+0x2e8>)
 8005c48:	4b7f      	ldr	r3, [pc, #508]	; (8005e48 <_printf_float+0x2ec>)
 8005c4a:	e7d1      	b.n	8005bf0 <_printf_float+0x94>
 8005c4c:	6863      	ldr	r3, [r4, #4]
 8005c4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005c52:	9206      	str	r2, [sp, #24]
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	d13f      	bne.n	8005cd8 <_printf_float+0x17c>
 8005c58:	2306      	movs	r3, #6
 8005c5a:	6063      	str	r3, [r4, #4]
 8005c5c:	9b05      	ldr	r3, [sp, #20]
 8005c5e:	6861      	ldr	r1, [r4, #4]
 8005c60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005c64:	2300      	movs	r3, #0
 8005c66:	9303      	str	r3, [sp, #12]
 8005c68:	ab0a      	add	r3, sp, #40	; 0x28
 8005c6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005c6e:	ab09      	add	r3, sp, #36	; 0x24
 8005c70:	ec49 8b10 	vmov	d0, r8, r9
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	6022      	str	r2, [r4, #0]
 8005c78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c7c:	4628      	mov	r0, r5
 8005c7e:	f7ff fecd 	bl	8005a1c <__cvt>
 8005c82:	9b06      	ldr	r3, [sp, #24]
 8005c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005c86:	2b47      	cmp	r3, #71	; 0x47
 8005c88:	4680      	mov	r8, r0
 8005c8a:	d108      	bne.n	8005c9e <_printf_float+0x142>
 8005c8c:	1cc8      	adds	r0, r1, #3
 8005c8e:	db02      	blt.n	8005c96 <_printf_float+0x13a>
 8005c90:	6863      	ldr	r3, [r4, #4]
 8005c92:	4299      	cmp	r1, r3
 8005c94:	dd41      	ble.n	8005d1a <_printf_float+0x1be>
 8005c96:	f1ab 0b02 	sub.w	fp, fp, #2
 8005c9a:	fa5f fb8b 	uxtb.w	fp, fp
 8005c9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005ca2:	d820      	bhi.n	8005ce6 <_printf_float+0x18a>
 8005ca4:	3901      	subs	r1, #1
 8005ca6:	465a      	mov	r2, fp
 8005ca8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005cac:	9109      	str	r1, [sp, #36]	; 0x24
 8005cae:	f7ff ff17 	bl	8005ae0 <__exponent>
 8005cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cb4:	1813      	adds	r3, r2, r0
 8005cb6:	2a01      	cmp	r2, #1
 8005cb8:	4681      	mov	r9, r0
 8005cba:	6123      	str	r3, [r4, #16]
 8005cbc:	dc02      	bgt.n	8005cc4 <_printf_float+0x168>
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	07d2      	lsls	r2, r2, #31
 8005cc2:	d501      	bpl.n	8005cc8 <_printf_float+0x16c>
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	6123      	str	r3, [r4, #16]
 8005cc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d09c      	beq.n	8005c0a <_printf_float+0xae>
 8005cd0:	232d      	movs	r3, #45	; 0x2d
 8005cd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd6:	e798      	b.n	8005c0a <_printf_float+0xae>
 8005cd8:	9a06      	ldr	r2, [sp, #24]
 8005cda:	2a47      	cmp	r2, #71	; 0x47
 8005cdc:	d1be      	bne.n	8005c5c <_printf_float+0x100>
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d1bc      	bne.n	8005c5c <_printf_float+0x100>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e7b9      	b.n	8005c5a <_printf_float+0xfe>
 8005ce6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005cea:	d118      	bne.n	8005d1e <_printf_float+0x1c2>
 8005cec:	2900      	cmp	r1, #0
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	dd0b      	ble.n	8005d0a <_printf_float+0x1ae>
 8005cf2:	6121      	str	r1, [r4, #16]
 8005cf4:	b913      	cbnz	r3, 8005cfc <_printf_float+0x1a0>
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	07d0      	lsls	r0, r2, #31
 8005cfa:	d502      	bpl.n	8005d02 <_printf_float+0x1a6>
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	440b      	add	r3, r1
 8005d00:	6123      	str	r3, [r4, #16]
 8005d02:	65a1      	str	r1, [r4, #88]	; 0x58
 8005d04:	f04f 0900 	mov.w	r9, #0
 8005d08:	e7de      	b.n	8005cc8 <_printf_float+0x16c>
 8005d0a:	b913      	cbnz	r3, 8005d12 <_printf_float+0x1b6>
 8005d0c:	6822      	ldr	r2, [r4, #0]
 8005d0e:	07d2      	lsls	r2, r2, #31
 8005d10:	d501      	bpl.n	8005d16 <_printf_float+0x1ba>
 8005d12:	3302      	adds	r3, #2
 8005d14:	e7f4      	b.n	8005d00 <_printf_float+0x1a4>
 8005d16:	2301      	movs	r3, #1
 8005d18:	e7f2      	b.n	8005d00 <_printf_float+0x1a4>
 8005d1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005d1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d20:	4299      	cmp	r1, r3
 8005d22:	db05      	blt.n	8005d30 <_printf_float+0x1d4>
 8005d24:	6823      	ldr	r3, [r4, #0]
 8005d26:	6121      	str	r1, [r4, #16]
 8005d28:	07d8      	lsls	r0, r3, #31
 8005d2a:	d5ea      	bpl.n	8005d02 <_printf_float+0x1a6>
 8005d2c:	1c4b      	adds	r3, r1, #1
 8005d2e:	e7e7      	b.n	8005d00 <_printf_float+0x1a4>
 8005d30:	2900      	cmp	r1, #0
 8005d32:	bfd4      	ite	le
 8005d34:	f1c1 0202 	rsble	r2, r1, #2
 8005d38:	2201      	movgt	r2, #1
 8005d3a:	4413      	add	r3, r2
 8005d3c:	e7e0      	b.n	8005d00 <_printf_float+0x1a4>
 8005d3e:	6823      	ldr	r3, [r4, #0]
 8005d40:	055a      	lsls	r2, r3, #21
 8005d42:	d407      	bmi.n	8005d54 <_printf_float+0x1f8>
 8005d44:	6923      	ldr	r3, [r4, #16]
 8005d46:	4642      	mov	r2, r8
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4628      	mov	r0, r5
 8005d4c:	47b8      	blx	r7
 8005d4e:	3001      	adds	r0, #1
 8005d50:	d12c      	bne.n	8005dac <_printf_float+0x250>
 8005d52:	e764      	b.n	8005c1e <_printf_float+0xc2>
 8005d54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005d58:	f240 80e0 	bls.w	8005f1c <_printf_float+0x3c0>
 8005d5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005d60:	2200      	movs	r2, #0
 8005d62:	2300      	movs	r3, #0
 8005d64:	f7fa ff30 	bl	8000bc8 <__aeabi_dcmpeq>
 8005d68:	2800      	cmp	r0, #0
 8005d6a:	d034      	beq.n	8005dd6 <_printf_float+0x27a>
 8005d6c:	4a37      	ldr	r2, [pc, #220]	; (8005e4c <_printf_float+0x2f0>)
 8005d6e:	2301      	movs	r3, #1
 8005d70:	4631      	mov	r1, r6
 8005d72:	4628      	mov	r0, r5
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f af51 	beq.w	8005c1e <_printf_float+0xc2>
 8005d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d80:	429a      	cmp	r2, r3
 8005d82:	db02      	blt.n	8005d8a <_printf_float+0x22e>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	07d8      	lsls	r0, r3, #31
 8005d88:	d510      	bpl.n	8005dac <_printf_float+0x250>
 8005d8a:	ee18 3a10 	vmov	r3, s16
 8005d8e:	4652      	mov	r2, sl
 8005d90:	4631      	mov	r1, r6
 8005d92:	4628      	mov	r0, r5
 8005d94:	47b8      	blx	r7
 8005d96:	3001      	adds	r0, #1
 8005d98:	f43f af41 	beq.w	8005c1e <_printf_float+0xc2>
 8005d9c:	f04f 0800 	mov.w	r8, #0
 8005da0:	f104 091a 	add.w	r9, r4, #26
 8005da4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da6:	3b01      	subs	r3, #1
 8005da8:	4543      	cmp	r3, r8
 8005daa:	dc09      	bgt.n	8005dc0 <_printf_float+0x264>
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	079b      	lsls	r3, r3, #30
 8005db0:	f100 8105 	bmi.w	8005fbe <_printf_float+0x462>
 8005db4:	68e0      	ldr	r0, [r4, #12]
 8005db6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005db8:	4298      	cmp	r0, r3
 8005dba:	bfb8      	it	lt
 8005dbc:	4618      	movlt	r0, r3
 8005dbe:	e730      	b.n	8005c22 <_printf_float+0xc6>
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	464a      	mov	r2, r9
 8005dc4:	4631      	mov	r1, r6
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	47b8      	blx	r7
 8005dca:	3001      	adds	r0, #1
 8005dcc:	f43f af27 	beq.w	8005c1e <_printf_float+0xc2>
 8005dd0:	f108 0801 	add.w	r8, r8, #1
 8005dd4:	e7e6      	b.n	8005da4 <_printf_float+0x248>
 8005dd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	dc39      	bgt.n	8005e50 <_printf_float+0x2f4>
 8005ddc:	4a1b      	ldr	r2, [pc, #108]	; (8005e4c <_printf_float+0x2f0>)
 8005dde:	2301      	movs	r3, #1
 8005de0:	4631      	mov	r1, r6
 8005de2:	4628      	mov	r0, r5
 8005de4:	47b8      	blx	r7
 8005de6:	3001      	adds	r0, #1
 8005de8:	f43f af19 	beq.w	8005c1e <_printf_float+0xc2>
 8005dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005df0:	4313      	orrs	r3, r2
 8005df2:	d102      	bne.n	8005dfa <_printf_float+0x29e>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	07d9      	lsls	r1, r3, #31
 8005df8:	d5d8      	bpl.n	8005dac <_printf_float+0x250>
 8005dfa:	ee18 3a10 	vmov	r3, s16
 8005dfe:	4652      	mov	r2, sl
 8005e00:	4631      	mov	r1, r6
 8005e02:	4628      	mov	r0, r5
 8005e04:	47b8      	blx	r7
 8005e06:	3001      	adds	r0, #1
 8005e08:	f43f af09 	beq.w	8005c1e <_printf_float+0xc2>
 8005e0c:	f04f 0900 	mov.w	r9, #0
 8005e10:	f104 0a1a 	add.w	sl, r4, #26
 8005e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e16:	425b      	negs	r3, r3
 8005e18:	454b      	cmp	r3, r9
 8005e1a:	dc01      	bgt.n	8005e20 <_printf_float+0x2c4>
 8005e1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e1e:	e792      	b.n	8005d46 <_printf_float+0x1ea>
 8005e20:	2301      	movs	r3, #1
 8005e22:	4652      	mov	r2, sl
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f aef7 	beq.w	8005c1e <_printf_float+0xc2>
 8005e30:	f109 0901 	add.w	r9, r9, #1
 8005e34:	e7ee      	b.n	8005e14 <_printf_float+0x2b8>
 8005e36:	bf00      	nop
 8005e38:	7fefffff 	.word	0x7fefffff
 8005e3c:	0800d1e4 	.word	0x0800d1e4
 8005e40:	0800d1e8 	.word	0x0800d1e8
 8005e44:	0800d1f0 	.word	0x0800d1f0
 8005e48:	0800d1ec 	.word	0x0800d1ec
 8005e4c:	0800d1f4 	.word	0x0800d1f4
 8005e50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005e52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e54:	429a      	cmp	r2, r3
 8005e56:	bfa8      	it	ge
 8005e58:	461a      	movge	r2, r3
 8005e5a:	2a00      	cmp	r2, #0
 8005e5c:	4691      	mov	r9, r2
 8005e5e:	dc37      	bgt.n	8005ed0 <_printf_float+0x374>
 8005e60:	f04f 0b00 	mov.w	fp, #0
 8005e64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005e68:	f104 021a 	add.w	r2, r4, #26
 8005e6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005e6e:	9305      	str	r3, [sp, #20]
 8005e70:	eba3 0309 	sub.w	r3, r3, r9
 8005e74:	455b      	cmp	r3, fp
 8005e76:	dc33      	bgt.n	8005ee0 <_printf_float+0x384>
 8005e78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	db3b      	blt.n	8005ef8 <_printf_float+0x39c>
 8005e80:	6823      	ldr	r3, [r4, #0]
 8005e82:	07da      	lsls	r2, r3, #31
 8005e84:	d438      	bmi.n	8005ef8 <_printf_float+0x39c>
 8005e86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e88:	9a05      	ldr	r2, [sp, #20]
 8005e8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005e8c:	1a9a      	subs	r2, r3, r2
 8005e8e:	eba3 0901 	sub.w	r9, r3, r1
 8005e92:	4591      	cmp	r9, r2
 8005e94:	bfa8      	it	ge
 8005e96:	4691      	movge	r9, r2
 8005e98:	f1b9 0f00 	cmp.w	r9, #0
 8005e9c:	dc35      	bgt.n	8005f0a <_printf_float+0x3ae>
 8005e9e:	f04f 0800 	mov.w	r8, #0
 8005ea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ea6:	f104 0a1a 	add.w	sl, r4, #26
 8005eaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005eae:	1a9b      	subs	r3, r3, r2
 8005eb0:	eba3 0309 	sub.w	r3, r3, r9
 8005eb4:	4543      	cmp	r3, r8
 8005eb6:	f77f af79 	ble.w	8005dac <_printf_float+0x250>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	4652      	mov	r2, sl
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	4628      	mov	r0, r5
 8005ec2:	47b8      	blx	r7
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	f43f aeaa 	beq.w	8005c1e <_printf_float+0xc2>
 8005eca:	f108 0801 	add.w	r8, r8, #1
 8005ece:	e7ec      	b.n	8005eaa <_printf_float+0x34e>
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	4642      	mov	r2, r8
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	47b8      	blx	r7
 8005eda:	3001      	adds	r0, #1
 8005edc:	d1c0      	bne.n	8005e60 <_printf_float+0x304>
 8005ede:	e69e      	b.n	8005c1e <_printf_float+0xc2>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	9205      	str	r2, [sp, #20]
 8005ee8:	47b8      	blx	r7
 8005eea:	3001      	adds	r0, #1
 8005eec:	f43f ae97 	beq.w	8005c1e <_printf_float+0xc2>
 8005ef0:	9a05      	ldr	r2, [sp, #20]
 8005ef2:	f10b 0b01 	add.w	fp, fp, #1
 8005ef6:	e7b9      	b.n	8005e6c <_printf_float+0x310>
 8005ef8:	ee18 3a10 	vmov	r3, s16
 8005efc:	4652      	mov	r2, sl
 8005efe:	4631      	mov	r1, r6
 8005f00:	4628      	mov	r0, r5
 8005f02:	47b8      	blx	r7
 8005f04:	3001      	adds	r0, #1
 8005f06:	d1be      	bne.n	8005e86 <_printf_float+0x32a>
 8005f08:	e689      	b.n	8005c1e <_printf_float+0xc2>
 8005f0a:	9a05      	ldr	r2, [sp, #20]
 8005f0c:	464b      	mov	r3, r9
 8005f0e:	4442      	add	r2, r8
 8005f10:	4631      	mov	r1, r6
 8005f12:	4628      	mov	r0, r5
 8005f14:	47b8      	blx	r7
 8005f16:	3001      	adds	r0, #1
 8005f18:	d1c1      	bne.n	8005e9e <_printf_float+0x342>
 8005f1a:	e680      	b.n	8005c1e <_printf_float+0xc2>
 8005f1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f1e:	2a01      	cmp	r2, #1
 8005f20:	dc01      	bgt.n	8005f26 <_printf_float+0x3ca>
 8005f22:	07db      	lsls	r3, r3, #31
 8005f24:	d538      	bpl.n	8005f98 <_printf_float+0x43c>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4642      	mov	r2, r8
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4628      	mov	r0, r5
 8005f2e:	47b8      	blx	r7
 8005f30:	3001      	adds	r0, #1
 8005f32:	f43f ae74 	beq.w	8005c1e <_printf_float+0xc2>
 8005f36:	ee18 3a10 	vmov	r3, s16
 8005f3a:	4652      	mov	r2, sl
 8005f3c:	4631      	mov	r1, r6
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b8      	blx	r7
 8005f42:	3001      	adds	r0, #1
 8005f44:	f43f ae6b 	beq.w	8005c1e <_printf_float+0xc2>
 8005f48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f7fa fe3a 	bl	8000bc8 <__aeabi_dcmpeq>
 8005f54:	b9d8      	cbnz	r0, 8005f8e <_printf_float+0x432>
 8005f56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f58:	f108 0201 	add.w	r2, r8, #1
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	4631      	mov	r1, r6
 8005f60:	4628      	mov	r0, r5
 8005f62:	47b8      	blx	r7
 8005f64:	3001      	adds	r0, #1
 8005f66:	d10e      	bne.n	8005f86 <_printf_float+0x42a>
 8005f68:	e659      	b.n	8005c1e <_printf_float+0xc2>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4652      	mov	r2, sl
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f ae52 	beq.w	8005c1e <_printf_float+0xc2>
 8005f7a:	f108 0801 	add.w	r8, r8, #1
 8005f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f80:	3b01      	subs	r3, #1
 8005f82:	4543      	cmp	r3, r8
 8005f84:	dcf1      	bgt.n	8005f6a <_printf_float+0x40e>
 8005f86:	464b      	mov	r3, r9
 8005f88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005f8c:	e6dc      	b.n	8005d48 <_printf_float+0x1ec>
 8005f8e:	f04f 0800 	mov.w	r8, #0
 8005f92:	f104 0a1a 	add.w	sl, r4, #26
 8005f96:	e7f2      	b.n	8005f7e <_printf_float+0x422>
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4642      	mov	r2, r8
 8005f9c:	e7df      	b.n	8005f5e <_printf_float+0x402>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	464a      	mov	r2, r9
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f43f ae38 	beq.w	8005c1e <_printf_float+0xc2>
 8005fae:	f108 0801 	add.w	r8, r8, #1
 8005fb2:	68e3      	ldr	r3, [r4, #12]
 8005fb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fb6:	1a5b      	subs	r3, r3, r1
 8005fb8:	4543      	cmp	r3, r8
 8005fba:	dcf0      	bgt.n	8005f9e <_printf_float+0x442>
 8005fbc:	e6fa      	b.n	8005db4 <_printf_float+0x258>
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	f104 0919 	add.w	r9, r4, #25
 8005fc6:	e7f4      	b.n	8005fb2 <_printf_float+0x456>

08005fc8 <_printf_common>:
 8005fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fcc:	4616      	mov	r6, r2
 8005fce:	4699      	mov	r9, r3
 8005fd0:	688a      	ldr	r2, [r1, #8]
 8005fd2:	690b      	ldr	r3, [r1, #16]
 8005fd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	bfb8      	it	lt
 8005fdc:	4613      	movlt	r3, r2
 8005fde:	6033      	str	r3, [r6, #0]
 8005fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fe4:	4607      	mov	r7, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	b10a      	cbz	r2, 8005fee <_printf_common+0x26>
 8005fea:	3301      	adds	r3, #1
 8005fec:	6033      	str	r3, [r6, #0]
 8005fee:	6823      	ldr	r3, [r4, #0]
 8005ff0:	0699      	lsls	r1, r3, #26
 8005ff2:	bf42      	ittt	mi
 8005ff4:	6833      	ldrmi	r3, [r6, #0]
 8005ff6:	3302      	addmi	r3, #2
 8005ff8:	6033      	strmi	r3, [r6, #0]
 8005ffa:	6825      	ldr	r5, [r4, #0]
 8005ffc:	f015 0506 	ands.w	r5, r5, #6
 8006000:	d106      	bne.n	8006010 <_printf_common+0x48>
 8006002:	f104 0a19 	add.w	sl, r4, #25
 8006006:	68e3      	ldr	r3, [r4, #12]
 8006008:	6832      	ldr	r2, [r6, #0]
 800600a:	1a9b      	subs	r3, r3, r2
 800600c:	42ab      	cmp	r3, r5
 800600e:	dc26      	bgt.n	800605e <_printf_common+0x96>
 8006010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006014:	1e13      	subs	r3, r2, #0
 8006016:	6822      	ldr	r2, [r4, #0]
 8006018:	bf18      	it	ne
 800601a:	2301      	movne	r3, #1
 800601c:	0692      	lsls	r2, r2, #26
 800601e:	d42b      	bmi.n	8006078 <_printf_common+0xb0>
 8006020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006024:	4649      	mov	r1, r9
 8006026:	4638      	mov	r0, r7
 8006028:	47c0      	blx	r8
 800602a:	3001      	adds	r0, #1
 800602c:	d01e      	beq.n	800606c <_printf_common+0xa4>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	68e5      	ldr	r5, [r4, #12]
 8006032:	6832      	ldr	r2, [r6, #0]
 8006034:	f003 0306 	and.w	r3, r3, #6
 8006038:	2b04      	cmp	r3, #4
 800603a:	bf08      	it	eq
 800603c:	1aad      	subeq	r5, r5, r2
 800603e:	68a3      	ldr	r3, [r4, #8]
 8006040:	6922      	ldr	r2, [r4, #16]
 8006042:	bf0c      	ite	eq
 8006044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006048:	2500      	movne	r5, #0
 800604a:	4293      	cmp	r3, r2
 800604c:	bfc4      	itt	gt
 800604e:	1a9b      	subgt	r3, r3, r2
 8006050:	18ed      	addgt	r5, r5, r3
 8006052:	2600      	movs	r6, #0
 8006054:	341a      	adds	r4, #26
 8006056:	42b5      	cmp	r5, r6
 8006058:	d11a      	bne.n	8006090 <_printf_common+0xc8>
 800605a:	2000      	movs	r0, #0
 800605c:	e008      	b.n	8006070 <_printf_common+0xa8>
 800605e:	2301      	movs	r3, #1
 8006060:	4652      	mov	r2, sl
 8006062:	4649      	mov	r1, r9
 8006064:	4638      	mov	r0, r7
 8006066:	47c0      	blx	r8
 8006068:	3001      	adds	r0, #1
 800606a:	d103      	bne.n	8006074 <_printf_common+0xac>
 800606c:	f04f 30ff 	mov.w	r0, #4294967295
 8006070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006074:	3501      	adds	r5, #1
 8006076:	e7c6      	b.n	8006006 <_printf_common+0x3e>
 8006078:	18e1      	adds	r1, r4, r3
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	2030      	movs	r0, #48	; 0x30
 800607e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006082:	4422      	add	r2, r4
 8006084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800608c:	3302      	adds	r3, #2
 800608e:	e7c7      	b.n	8006020 <_printf_common+0x58>
 8006090:	2301      	movs	r3, #1
 8006092:	4622      	mov	r2, r4
 8006094:	4649      	mov	r1, r9
 8006096:	4638      	mov	r0, r7
 8006098:	47c0      	blx	r8
 800609a:	3001      	adds	r0, #1
 800609c:	d0e6      	beq.n	800606c <_printf_common+0xa4>
 800609e:	3601      	adds	r6, #1
 80060a0:	e7d9      	b.n	8006056 <_printf_common+0x8e>
	...

080060a4 <_printf_i>:
 80060a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060a8:	7e0f      	ldrb	r7, [r1, #24]
 80060aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80060ac:	2f78      	cmp	r7, #120	; 0x78
 80060ae:	4691      	mov	r9, r2
 80060b0:	4680      	mov	r8, r0
 80060b2:	460c      	mov	r4, r1
 80060b4:	469a      	mov	sl, r3
 80060b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060ba:	d807      	bhi.n	80060cc <_printf_i+0x28>
 80060bc:	2f62      	cmp	r7, #98	; 0x62
 80060be:	d80a      	bhi.n	80060d6 <_printf_i+0x32>
 80060c0:	2f00      	cmp	r7, #0
 80060c2:	f000 80d8 	beq.w	8006276 <_printf_i+0x1d2>
 80060c6:	2f58      	cmp	r7, #88	; 0x58
 80060c8:	f000 80a3 	beq.w	8006212 <_printf_i+0x16e>
 80060cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060d4:	e03a      	b.n	800614c <_printf_i+0xa8>
 80060d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060da:	2b15      	cmp	r3, #21
 80060dc:	d8f6      	bhi.n	80060cc <_printf_i+0x28>
 80060de:	a101      	add	r1, pc, #4	; (adr r1, 80060e4 <_printf_i+0x40>)
 80060e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060e4:	0800613d 	.word	0x0800613d
 80060e8:	08006151 	.word	0x08006151
 80060ec:	080060cd 	.word	0x080060cd
 80060f0:	080060cd 	.word	0x080060cd
 80060f4:	080060cd 	.word	0x080060cd
 80060f8:	080060cd 	.word	0x080060cd
 80060fc:	08006151 	.word	0x08006151
 8006100:	080060cd 	.word	0x080060cd
 8006104:	080060cd 	.word	0x080060cd
 8006108:	080060cd 	.word	0x080060cd
 800610c:	080060cd 	.word	0x080060cd
 8006110:	0800625d 	.word	0x0800625d
 8006114:	08006181 	.word	0x08006181
 8006118:	0800623f 	.word	0x0800623f
 800611c:	080060cd 	.word	0x080060cd
 8006120:	080060cd 	.word	0x080060cd
 8006124:	0800627f 	.word	0x0800627f
 8006128:	080060cd 	.word	0x080060cd
 800612c:	08006181 	.word	0x08006181
 8006130:	080060cd 	.word	0x080060cd
 8006134:	080060cd 	.word	0x080060cd
 8006138:	08006247 	.word	0x08006247
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	1d1a      	adds	r2, r3, #4
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	602a      	str	r2, [r5, #0]
 8006144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800614c:	2301      	movs	r3, #1
 800614e:	e0a3      	b.n	8006298 <_printf_i+0x1f4>
 8006150:	6820      	ldr	r0, [r4, #0]
 8006152:	6829      	ldr	r1, [r5, #0]
 8006154:	0606      	lsls	r6, r0, #24
 8006156:	f101 0304 	add.w	r3, r1, #4
 800615a:	d50a      	bpl.n	8006172 <_printf_i+0xce>
 800615c:	680e      	ldr	r6, [r1, #0]
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	2e00      	cmp	r6, #0
 8006162:	da03      	bge.n	800616c <_printf_i+0xc8>
 8006164:	232d      	movs	r3, #45	; 0x2d
 8006166:	4276      	negs	r6, r6
 8006168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800616c:	485e      	ldr	r0, [pc, #376]	; (80062e8 <_printf_i+0x244>)
 800616e:	230a      	movs	r3, #10
 8006170:	e019      	b.n	80061a6 <_printf_i+0x102>
 8006172:	680e      	ldr	r6, [r1, #0]
 8006174:	602b      	str	r3, [r5, #0]
 8006176:	f010 0f40 	tst.w	r0, #64	; 0x40
 800617a:	bf18      	it	ne
 800617c:	b236      	sxthne	r6, r6
 800617e:	e7ef      	b.n	8006160 <_printf_i+0xbc>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	6029      	str	r1, [r5, #0]
 8006188:	0601      	lsls	r1, r0, #24
 800618a:	d501      	bpl.n	8006190 <_printf_i+0xec>
 800618c:	681e      	ldr	r6, [r3, #0]
 800618e:	e002      	b.n	8006196 <_printf_i+0xf2>
 8006190:	0646      	lsls	r6, r0, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0xe8>
 8006194:	881e      	ldrh	r6, [r3, #0]
 8006196:	4854      	ldr	r0, [pc, #336]	; (80062e8 <_printf_i+0x244>)
 8006198:	2f6f      	cmp	r7, #111	; 0x6f
 800619a:	bf0c      	ite	eq
 800619c:	2308      	moveq	r3, #8
 800619e:	230a      	movne	r3, #10
 80061a0:	2100      	movs	r1, #0
 80061a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80061a6:	6865      	ldr	r5, [r4, #4]
 80061a8:	60a5      	str	r5, [r4, #8]
 80061aa:	2d00      	cmp	r5, #0
 80061ac:	bfa2      	ittt	ge
 80061ae:	6821      	ldrge	r1, [r4, #0]
 80061b0:	f021 0104 	bicge.w	r1, r1, #4
 80061b4:	6021      	strge	r1, [r4, #0]
 80061b6:	b90e      	cbnz	r6, 80061bc <_printf_i+0x118>
 80061b8:	2d00      	cmp	r5, #0
 80061ba:	d04d      	beq.n	8006258 <_printf_i+0x1b4>
 80061bc:	4615      	mov	r5, r2
 80061be:	fbb6 f1f3 	udiv	r1, r6, r3
 80061c2:	fb03 6711 	mls	r7, r3, r1, r6
 80061c6:	5dc7      	ldrb	r7, [r0, r7]
 80061c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061cc:	4637      	mov	r7, r6
 80061ce:	42bb      	cmp	r3, r7
 80061d0:	460e      	mov	r6, r1
 80061d2:	d9f4      	bls.n	80061be <_printf_i+0x11a>
 80061d4:	2b08      	cmp	r3, #8
 80061d6:	d10b      	bne.n	80061f0 <_printf_i+0x14c>
 80061d8:	6823      	ldr	r3, [r4, #0]
 80061da:	07de      	lsls	r6, r3, #31
 80061dc:	d508      	bpl.n	80061f0 <_printf_i+0x14c>
 80061de:	6923      	ldr	r3, [r4, #16]
 80061e0:	6861      	ldr	r1, [r4, #4]
 80061e2:	4299      	cmp	r1, r3
 80061e4:	bfde      	ittt	le
 80061e6:	2330      	movle	r3, #48	; 0x30
 80061e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061f0:	1b52      	subs	r2, r2, r5
 80061f2:	6122      	str	r2, [r4, #16]
 80061f4:	f8cd a000 	str.w	sl, [sp]
 80061f8:	464b      	mov	r3, r9
 80061fa:	aa03      	add	r2, sp, #12
 80061fc:	4621      	mov	r1, r4
 80061fe:	4640      	mov	r0, r8
 8006200:	f7ff fee2 	bl	8005fc8 <_printf_common>
 8006204:	3001      	adds	r0, #1
 8006206:	d14c      	bne.n	80062a2 <_printf_i+0x1fe>
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	b004      	add	sp, #16
 800620e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006212:	4835      	ldr	r0, [pc, #212]	; (80062e8 <_printf_i+0x244>)
 8006214:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006218:	6829      	ldr	r1, [r5, #0]
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006220:	6029      	str	r1, [r5, #0]
 8006222:	061d      	lsls	r5, r3, #24
 8006224:	d514      	bpl.n	8006250 <_printf_i+0x1ac>
 8006226:	07df      	lsls	r7, r3, #31
 8006228:	bf44      	itt	mi
 800622a:	f043 0320 	orrmi.w	r3, r3, #32
 800622e:	6023      	strmi	r3, [r4, #0]
 8006230:	b91e      	cbnz	r6, 800623a <_printf_i+0x196>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	f023 0320 	bic.w	r3, r3, #32
 8006238:	6023      	str	r3, [r4, #0]
 800623a:	2310      	movs	r3, #16
 800623c:	e7b0      	b.n	80061a0 <_printf_i+0xfc>
 800623e:	6823      	ldr	r3, [r4, #0]
 8006240:	f043 0320 	orr.w	r3, r3, #32
 8006244:	6023      	str	r3, [r4, #0]
 8006246:	2378      	movs	r3, #120	; 0x78
 8006248:	4828      	ldr	r0, [pc, #160]	; (80062ec <_printf_i+0x248>)
 800624a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800624e:	e7e3      	b.n	8006218 <_printf_i+0x174>
 8006250:	0659      	lsls	r1, r3, #25
 8006252:	bf48      	it	mi
 8006254:	b2b6      	uxthmi	r6, r6
 8006256:	e7e6      	b.n	8006226 <_printf_i+0x182>
 8006258:	4615      	mov	r5, r2
 800625a:	e7bb      	b.n	80061d4 <_printf_i+0x130>
 800625c:	682b      	ldr	r3, [r5, #0]
 800625e:	6826      	ldr	r6, [r4, #0]
 8006260:	6961      	ldr	r1, [r4, #20]
 8006262:	1d18      	adds	r0, r3, #4
 8006264:	6028      	str	r0, [r5, #0]
 8006266:	0635      	lsls	r5, r6, #24
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	d501      	bpl.n	8006270 <_printf_i+0x1cc>
 800626c:	6019      	str	r1, [r3, #0]
 800626e:	e002      	b.n	8006276 <_printf_i+0x1d2>
 8006270:	0670      	lsls	r0, r6, #25
 8006272:	d5fb      	bpl.n	800626c <_printf_i+0x1c8>
 8006274:	8019      	strh	r1, [r3, #0]
 8006276:	2300      	movs	r3, #0
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	4615      	mov	r5, r2
 800627c:	e7ba      	b.n	80061f4 <_printf_i+0x150>
 800627e:	682b      	ldr	r3, [r5, #0]
 8006280:	1d1a      	adds	r2, r3, #4
 8006282:	602a      	str	r2, [r5, #0]
 8006284:	681d      	ldr	r5, [r3, #0]
 8006286:	6862      	ldr	r2, [r4, #4]
 8006288:	2100      	movs	r1, #0
 800628a:	4628      	mov	r0, r5
 800628c:	f7fa f828 	bl	80002e0 <memchr>
 8006290:	b108      	cbz	r0, 8006296 <_printf_i+0x1f2>
 8006292:	1b40      	subs	r0, r0, r5
 8006294:	6060      	str	r0, [r4, #4]
 8006296:	6863      	ldr	r3, [r4, #4]
 8006298:	6123      	str	r3, [r4, #16]
 800629a:	2300      	movs	r3, #0
 800629c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062a0:	e7a8      	b.n	80061f4 <_printf_i+0x150>
 80062a2:	6923      	ldr	r3, [r4, #16]
 80062a4:	462a      	mov	r2, r5
 80062a6:	4649      	mov	r1, r9
 80062a8:	4640      	mov	r0, r8
 80062aa:	47d0      	blx	sl
 80062ac:	3001      	adds	r0, #1
 80062ae:	d0ab      	beq.n	8006208 <_printf_i+0x164>
 80062b0:	6823      	ldr	r3, [r4, #0]
 80062b2:	079b      	lsls	r3, r3, #30
 80062b4:	d413      	bmi.n	80062de <_printf_i+0x23a>
 80062b6:	68e0      	ldr	r0, [r4, #12]
 80062b8:	9b03      	ldr	r3, [sp, #12]
 80062ba:	4298      	cmp	r0, r3
 80062bc:	bfb8      	it	lt
 80062be:	4618      	movlt	r0, r3
 80062c0:	e7a4      	b.n	800620c <_printf_i+0x168>
 80062c2:	2301      	movs	r3, #1
 80062c4:	4632      	mov	r2, r6
 80062c6:	4649      	mov	r1, r9
 80062c8:	4640      	mov	r0, r8
 80062ca:	47d0      	blx	sl
 80062cc:	3001      	adds	r0, #1
 80062ce:	d09b      	beq.n	8006208 <_printf_i+0x164>
 80062d0:	3501      	adds	r5, #1
 80062d2:	68e3      	ldr	r3, [r4, #12]
 80062d4:	9903      	ldr	r1, [sp, #12]
 80062d6:	1a5b      	subs	r3, r3, r1
 80062d8:	42ab      	cmp	r3, r5
 80062da:	dcf2      	bgt.n	80062c2 <_printf_i+0x21e>
 80062dc:	e7eb      	b.n	80062b6 <_printf_i+0x212>
 80062de:	2500      	movs	r5, #0
 80062e0:	f104 0619 	add.w	r6, r4, #25
 80062e4:	e7f5      	b.n	80062d2 <_printf_i+0x22e>
 80062e6:	bf00      	nop
 80062e8:	0800d1f6 	.word	0x0800d1f6
 80062ec:	0800d207 	.word	0x0800d207

080062f0 <_puts_r>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	460e      	mov	r6, r1
 80062f4:	4605      	mov	r5, r0
 80062f6:	b118      	cbz	r0, 8006300 <_puts_r+0x10>
 80062f8:	6983      	ldr	r3, [r0, #24]
 80062fa:	b90b      	cbnz	r3, 8006300 <_puts_r+0x10>
 80062fc:	f001 f8c4 	bl	8007488 <__sinit>
 8006300:	69ab      	ldr	r3, [r5, #24]
 8006302:	68ac      	ldr	r4, [r5, #8]
 8006304:	b913      	cbnz	r3, 800630c <_puts_r+0x1c>
 8006306:	4628      	mov	r0, r5
 8006308:	f001 f8be 	bl	8007488 <__sinit>
 800630c:	4b2c      	ldr	r3, [pc, #176]	; (80063c0 <_puts_r+0xd0>)
 800630e:	429c      	cmp	r4, r3
 8006310:	d120      	bne.n	8006354 <_puts_r+0x64>
 8006312:	686c      	ldr	r4, [r5, #4]
 8006314:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006316:	07db      	lsls	r3, r3, #31
 8006318:	d405      	bmi.n	8006326 <_puts_r+0x36>
 800631a:	89a3      	ldrh	r3, [r4, #12]
 800631c:	0598      	lsls	r0, r3, #22
 800631e:	d402      	bmi.n	8006326 <_puts_r+0x36>
 8006320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006322:	f001 f954 	bl	80075ce <__retarget_lock_acquire_recursive>
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	0719      	lsls	r1, r3, #28
 800632a:	d51d      	bpl.n	8006368 <_puts_r+0x78>
 800632c:	6923      	ldr	r3, [r4, #16]
 800632e:	b1db      	cbz	r3, 8006368 <_puts_r+0x78>
 8006330:	3e01      	subs	r6, #1
 8006332:	68a3      	ldr	r3, [r4, #8]
 8006334:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006338:	3b01      	subs	r3, #1
 800633a:	60a3      	str	r3, [r4, #8]
 800633c:	bb39      	cbnz	r1, 800638e <_puts_r+0x9e>
 800633e:	2b00      	cmp	r3, #0
 8006340:	da38      	bge.n	80063b4 <_puts_r+0xc4>
 8006342:	4622      	mov	r2, r4
 8006344:	210a      	movs	r1, #10
 8006346:	4628      	mov	r0, r5
 8006348:	f000 f848 	bl	80063dc <__swbuf_r>
 800634c:	3001      	adds	r0, #1
 800634e:	d011      	beq.n	8006374 <_puts_r+0x84>
 8006350:	250a      	movs	r5, #10
 8006352:	e011      	b.n	8006378 <_puts_r+0x88>
 8006354:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <_puts_r+0xd4>)
 8006356:	429c      	cmp	r4, r3
 8006358:	d101      	bne.n	800635e <_puts_r+0x6e>
 800635a:	68ac      	ldr	r4, [r5, #8]
 800635c:	e7da      	b.n	8006314 <_puts_r+0x24>
 800635e:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <_puts_r+0xd8>)
 8006360:	429c      	cmp	r4, r3
 8006362:	bf08      	it	eq
 8006364:	68ec      	ldreq	r4, [r5, #12]
 8006366:	e7d5      	b.n	8006314 <_puts_r+0x24>
 8006368:	4621      	mov	r1, r4
 800636a:	4628      	mov	r0, r5
 800636c:	f000 f888 	bl	8006480 <__swsetup_r>
 8006370:	2800      	cmp	r0, #0
 8006372:	d0dd      	beq.n	8006330 <_puts_r+0x40>
 8006374:	f04f 35ff 	mov.w	r5, #4294967295
 8006378:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800637a:	07da      	lsls	r2, r3, #31
 800637c:	d405      	bmi.n	800638a <_puts_r+0x9a>
 800637e:	89a3      	ldrh	r3, [r4, #12]
 8006380:	059b      	lsls	r3, r3, #22
 8006382:	d402      	bmi.n	800638a <_puts_r+0x9a>
 8006384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006386:	f001 f923 	bl	80075d0 <__retarget_lock_release_recursive>
 800638a:	4628      	mov	r0, r5
 800638c:	bd70      	pop	{r4, r5, r6, pc}
 800638e:	2b00      	cmp	r3, #0
 8006390:	da04      	bge.n	800639c <_puts_r+0xac>
 8006392:	69a2      	ldr	r2, [r4, #24]
 8006394:	429a      	cmp	r2, r3
 8006396:	dc06      	bgt.n	80063a6 <_puts_r+0xb6>
 8006398:	290a      	cmp	r1, #10
 800639a:	d004      	beq.n	80063a6 <_puts_r+0xb6>
 800639c:	6823      	ldr	r3, [r4, #0]
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	6022      	str	r2, [r4, #0]
 80063a2:	7019      	strb	r1, [r3, #0]
 80063a4:	e7c5      	b.n	8006332 <_puts_r+0x42>
 80063a6:	4622      	mov	r2, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	f000 f817 	bl	80063dc <__swbuf_r>
 80063ae:	3001      	adds	r0, #1
 80063b0:	d1bf      	bne.n	8006332 <_puts_r+0x42>
 80063b2:	e7df      	b.n	8006374 <_puts_r+0x84>
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	250a      	movs	r5, #10
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	6022      	str	r2, [r4, #0]
 80063bc:	701d      	strb	r5, [r3, #0]
 80063be:	e7db      	b.n	8006378 <_puts_r+0x88>
 80063c0:	0800d2c8 	.word	0x0800d2c8
 80063c4:	0800d2e8 	.word	0x0800d2e8
 80063c8:	0800d2a8 	.word	0x0800d2a8

080063cc <puts>:
 80063cc:	4b02      	ldr	r3, [pc, #8]	; (80063d8 <puts+0xc>)
 80063ce:	4601      	mov	r1, r0
 80063d0:	6818      	ldr	r0, [r3, #0]
 80063d2:	f7ff bf8d 	b.w	80062f0 <_puts_r>
 80063d6:	bf00      	nop
 80063d8:	2000001c 	.word	0x2000001c

080063dc <__swbuf_r>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	460e      	mov	r6, r1
 80063e0:	4614      	mov	r4, r2
 80063e2:	4605      	mov	r5, r0
 80063e4:	b118      	cbz	r0, 80063ee <__swbuf_r+0x12>
 80063e6:	6983      	ldr	r3, [r0, #24]
 80063e8:	b90b      	cbnz	r3, 80063ee <__swbuf_r+0x12>
 80063ea:	f001 f84d 	bl	8007488 <__sinit>
 80063ee:	4b21      	ldr	r3, [pc, #132]	; (8006474 <__swbuf_r+0x98>)
 80063f0:	429c      	cmp	r4, r3
 80063f2:	d12b      	bne.n	800644c <__swbuf_r+0x70>
 80063f4:	686c      	ldr	r4, [r5, #4]
 80063f6:	69a3      	ldr	r3, [r4, #24]
 80063f8:	60a3      	str	r3, [r4, #8]
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	071a      	lsls	r2, r3, #28
 80063fe:	d52f      	bpl.n	8006460 <__swbuf_r+0x84>
 8006400:	6923      	ldr	r3, [r4, #16]
 8006402:	b36b      	cbz	r3, 8006460 <__swbuf_r+0x84>
 8006404:	6923      	ldr	r3, [r4, #16]
 8006406:	6820      	ldr	r0, [r4, #0]
 8006408:	1ac0      	subs	r0, r0, r3
 800640a:	6963      	ldr	r3, [r4, #20]
 800640c:	b2f6      	uxtb	r6, r6
 800640e:	4283      	cmp	r3, r0
 8006410:	4637      	mov	r7, r6
 8006412:	dc04      	bgt.n	800641e <__swbuf_r+0x42>
 8006414:	4621      	mov	r1, r4
 8006416:	4628      	mov	r0, r5
 8006418:	f000 ffa2 	bl	8007360 <_fflush_r>
 800641c:	bb30      	cbnz	r0, 800646c <__swbuf_r+0x90>
 800641e:	68a3      	ldr	r3, [r4, #8]
 8006420:	3b01      	subs	r3, #1
 8006422:	60a3      	str	r3, [r4, #8]
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	1c5a      	adds	r2, r3, #1
 8006428:	6022      	str	r2, [r4, #0]
 800642a:	701e      	strb	r6, [r3, #0]
 800642c:	6963      	ldr	r3, [r4, #20]
 800642e:	3001      	adds	r0, #1
 8006430:	4283      	cmp	r3, r0
 8006432:	d004      	beq.n	800643e <__swbuf_r+0x62>
 8006434:	89a3      	ldrh	r3, [r4, #12]
 8006436:	07db      	lsls	r3, r3, #31
 8006438:	d506      	bpl.n	8006448 <__swbuf_r+0x6c>
 800643a:	2e0a      	cmp	r6, #10
 800643c:	d104      	bne.n	8006448 <__swbuf_r+0x6c>
 800643e:	4621      	mov	r1, r4
 8006440:	4628      	mov	r0, r5
 8006442:	f000 ff8d 	bl	8007360 <_fflush_r>
 8006446:	b988      	cbnz	r0, 800646c <__swbuf_r+0x90>
 8006448:	4638      	mov	r0, r7
 800644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <__swbuf_r+0x9c>)
 800644e:	429c      	cmp	r4, r3
 8006450:	d101      	bne.n	8006456 <__swbuf_r+0x7a>
 8006452:	68ac      	ldr	r4, [r5, #8]
 8006454:	e7cf      	b.n	80063f6 <__swbuf_r+0x1a>
 8006456:	4b09      	ldr	r3, [pc, #36]	; (800647c <__swbuf_r+0xa0>)
 8006458:	429c      	cmp	r4, r3
 800645a:	bf08      	it	eq
 800645c:	68ec      	ldreq	r4, [r5, #12]
 800645e:	e7ca      	b.n	80063f6 <__swbuf_r+0x1a>
 8006460:	4621      	mov	r1, r4
 8006462:	4628      	mov	r0, r5
 8006464:	f000 f80c 	bl	8006480 <__swsetup_r>
 8006468:	2800      	cmp	r0, #0
 800646a:	d0cb      	beq.n	8006404 <__swbuf_r+0x28>
 800646c:	f04f 37ff 	mov.w	r7, #4294967295
 8006470:	e7ea      	b.n	8006448 <__swbuf_r+0x6c>
 8006472:	bf00      	nop
 8006474:	0800d2c8 	.word	0x0800d2c8
 8006478:	0800d2e8 	.word	0x0800d2e8
 800647c:	0800d2a8 	.word	0x0800d2a8

08006480 <__swsetup_r>:
 8006480:	4b32      	ldr	r3, [pc, #200]	; (800654c <__swsetup_r+0xcc>)
 8006482:	b570      	push	{r4, r5, r6, lr}
 8006484:	681d      	ldr	r5, [r3, #0]
 8006486:	4606      	mov	r6, r0
 8006488:	460c      	mov	r4, r1
 800648a:	b125      	cbz	r5, 8006496 <__swsetup_r+0x16>
 800648c:	69ab      	ldr	r3, [r5, #24]
 800648e:	b913      	cbnz	r3, 8006496 <__swsetup_r+0x16>
 8006490:	4628      	mov	r0, r5
 8006492:	f000 fff9 	bl	8007488 <__sinit>
 8006496:	4b2e      	ldr	r3, [pc, #184]	; (8006550 <__swsetup_r+0xd0>)
 8006498:	429c      	cmp	r4, r3
 800649a:	d10f      	bne.n	80064bc <__swsetup_r+0x3c>
 800649c:	686c      	ldr	r4, [r5, #4]
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80064a4:	0719      	lsls	r1, r3, #28
 80064a6:	d42c      	bmi.n	8006502 <__swsetup_r+0x82>
 80064a8:	06dd      	lsls	r5, r3, #27
 80064aa:	d411      	bmi.n	80064d0 <__swsetup_r+0x50>
 80064ac:	2309      	movs	r3, #9
 80064ae:	6033      	str	r3, [r6, #0]
 80064b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	f04f 30ff 	mov.w	r0, #4294967295
 80064ba:	e03e      	b.n	800653a <__swsetup_r+0xba>
 80064bc:	4b25      	ldr	r3, [pc, #148]	; (8006554 <__swsetup_r+0xd4>)
 80064be:	429c      	cmp	r4, r3
 80064c0:	d101      	bne.n	80064c6 <__swsetup_r+0x46>
 80064c2:	68ac      	ldr	r4, [r5, #8]
 80064c4:	e7eb      	b.n	800649e <__swsetup_r+0x1e>
 80064c6:	4b24      	ldr	r3, [pc, #144]	; (8006558 <__swsetup_r+0xd8>)
 80064c8:	429c      	cmp	r4, r3
 80064ca:	bf08      	it	eq
 80064cc:	68ec      	ldreq	r4, [r5, #12]
 80064ce:	e7e6      	b.n	800649e <__swsetup_r+0x1e>
 80064d0:	0758      	lsls	r0, r3, #29
 80064d2:	d512      	bpl.n	80064fa <__swsetup_r+0x7a>
 80064d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064d6:	b141      	cbz	r1, 80064ea <__swsetup_r+0x6a>
 80064d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064dc:	4299      	cmp	r1, r3
 80064de:	d002      	beq.n	80064e6 <__swsetup_r+0x66>
 80064e0:	4630      	mov	r0, r6
 80064e2:	f001 fc7d 	bl	8007de0 <_free_r>
 80064e6:	2300      	movs	r3, #0
 80064e8:	6363      	str	r3, [r4, #52]	; 0x34
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	2300      	movs	r3, #0
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	6923      	ldr	r3, [r4, #16]
 80064f8:	6023      	str	r3, [r4, #0]
 80064fa:	89a3      	ldrh	r3, [r4, #12]
 80064fc:	f043 0308 	orr.w	r3, r3, #8
 8006500:	81a3      	strh	r3, [r4, #12]
 8006502:	6923      	ldr	r3, [r4, #16]
 8006504:	b94b      	cbnz	r3, 800651a <__swsetup_r+0x9a>
 8006506:	89a3      	ldrh	r3, [r4, #12]
 8006508:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800650c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006510:	d003      	beq.n	800651a <__swsetup_r+0x9a>
 8006512:	4621      	mov	r1, r4
 8006514:	4630      	mov	r0, r6
 8006516:	f001 f881 	bl	800761c <__smakebuf_r>
 800651a:	89a0      	ldrh	r0, [r4, #12]
 800651c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006520:	f010 0301 	ands.w	r3, r0, #1
 8006524:	d00a      	beq.n	800653c <__swsetup_r+0xbc>
 8006526:	2300      	movs	r3, #0
 8006528:	60a3      	str	r3, [r4, #8]
 800652a:	6963      	ldr	r3, [r4, #20]
 800652c:	425b      	negs	r3, r3
 800652e:	61a3      	str	r3, [r4, #24]
 8006530:	6923      	ldr	r3, [r4, #16]
 8006532:	b943      	cbnz	r3, 8006546 <__swsetup_r+0xc6>
 8006534:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006538:	d1ba      	bne.n	80064b0 <__swsetup_r+0x30>
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	0781      	lsls	r1, r0, #30
 800653e:	bf58      	it	pl
 8006540:	6963      	ldrpl	r3, [r4, #20]
 8006542:	60a3      	str	r3, [r4, #8]
 8006544:	e7f4      	b.n	8006530 <__swsetup_r+0xb0>
 8006546:	2000      	movs	r0, #0
 8006548:	e7f7      	b.n	800653a <__swsetup_r+0xba>
 800654a:	bf00      	nop
 800654c:	2000001c 	.word	0x2000001c
 8006550:	0800d2c8 	.word	0x0800d2c8
 8006554:	0800d2e8 	.word	0x0800d2e8
 8006558:	0800d2a8 	.word	0x0800d2a8

0800655c <quorem>:
 800655c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006560:	6903      	ldr	r3, [r0, #16]
 8006562:	690c      	ldr	r4, [r1, #16]
 8006564:	42a3      	cmp	r3, r4
 8006566:	4607      	mov	r7, r0
 8006568:	f2c0 8081 	blt.w	800666e <quorem+0x112>
 800656c:	3c01      	subs	r4, #1
 800656e:	f101 0814 	add.w	r8, r1, #20
 8006572:	f100 0514 	add.w	r5, r0, #20
 8006576:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800657a:	9301      	str	r3, [sp, #4]
 800657c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006580:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006584:	3301      	adds	r3, #1
 8006586:	429a      	cmp	r2, r3
 8006588:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800658c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006590:	fbb2 f6f3 	udiv	r6, r2, r3
 8006594:	d331      	bcc.n	80065fa <quorem+0x9e>
 8006596:	f04f 0e00 	mov.w	lr, #0
 800659a:	4640      	mov	r0, r8
 800659c:	46ac      	mov	ip, r5
 800659e:	46f2      	mov	sl, lr
 80065a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80065a4:	b293      	uxth	r3, r2
 80065a6:	fb06 e303 	mla	r3, r6, r3, lr
 80065aa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	ebaa 0303 	sub.w	r3, sl, r3
 80065b4:	f8dc a000 	ldr.w	sl, [ip]
 80065b8:	0c12      	lsrs	r2, r2, #16
 80065ba:	fa13 f38a 	uxtah	r3, r3, sl
 80065be:	fb06 e202 	mla	r2, r6, r2, lr
 80065c2:	9300      	str	r3, [sp, #0]
 80065c4:	9b00      	ldr	r3, [sp, #0]
 80065c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80065ca:	b292      	uxth	r2, r2
 80065cc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80065d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065d4:	f8bd 3000 	ldrh.w	r3, [sp]
 80065d8:	4581      	cmp	r9, r0
 80065da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065de:	f84c 3b04 	str.w	r3, [ip], #4
 80065e2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80065e6:	d2db      	bcs.n	80065a0 <quorem+0x44>
 80065e8:	f855 300b 	ldr.w	r3, [r5, fp]
 80065ec:	b92b      	cbnz	r3, 80065fa <quorem+0x9e>
 80065ee:	9b01      	ldr	r3, [sp, #4]
 80065f0:	3b04      	subs	r3, #4
 80065f2:	429d      	cmp	r5, r3
 80065f4:	461a      	mov	r2, r3
 80065f6:	d32e      	bcc.n	8006656 <quorem+0xfa>
 80065f8:	613c      	str	r4, [r7, #16]
 80065fa:	4638      	mov	r0, r7
 80065fc:	f001 fad8 	bl	8007bb0 <__mcmp>
 8006600:	2800      	cmp	r0, #0
 8006602:	db24      	blt.n	800664e <quorem+0xf2>
 8006604:	3601      	adds	r6, #1
 8006606:	4628      	mov	r0, r5
 8006608:	f04f 0c00 	mov.w	ip, #0
 800660c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006610:	f8d0 e000 	ldr.w	lr, [r0]
 8006614:	b293      	uxth	r3, r2
 8006616:	ebac 0303 	sub.w	r3, ip, r3
 800661a:	0c12      	lsrs	r2, r2, #16
 800661c:	fa13 f38e 	uxtah	r3, r3, lr
 8006620:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006624:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006628:	b29b      	uxth	r3, r3
 800662a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800662e:	45c1      	cmp	r9, r8
 8006630:	f840 3b04 	str.w	r3, [r0], #4
 8006634:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006638:	d2e8      	bcs.n	800660c <quorem+0xb0>
 800663a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800663e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006642:	b922      	cbnz	r2, 800664e <quorem+0xf2>
 8006644:	3b04      	subs	r3, #4
 8006646:	429d      	cmp	r5, r3
 8006648:	461a      	mov	r2, r3
 800664a:	d30a      	bcc.n	8006662 <quorem+0x106>
 800664c:	613c      	str	r4, [r7, #16]
 800664e:	4630      	mov	r0, r6
 8006650:	b003      	add	sp, #12
 8006652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006656:	6812      	ldr	r2, [r2, #0]
 8006658:	3b04      	subs	r3, #4
 800665a:	2a00      	cmp	r2, #0
 800665c:	d1cc      	bne.n	80065f8 <quorem+0x9c>
 800665e:	3c01      	subs	r4, #1
 8006660:	e7c7      	b.n	80065f2 <quorem+0x96>
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	3b04      	subs	r3, #4
 8006666:	2a00      	cmp	r2, #0
 8006668:	d1f0      	bne.n	800664c <quorem+0xf0>
 800666a:	3c01      	subs	r4, #1
 800666c:	e7eb      	b.n	8006646 <quorem+0xea>
 800666e:	2000      	movs	r0, #0
 8006670:	e7ee      	b.n	8006650 <quorem+0xf4>
 8006672:	0000      	movs	r0, r0
 8006674:	0000      	movs	r0, r0
	...

08006678 <_dtoa_r>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	ed2d 8b04 	vpush	{d8-d9}
 8006680:	ec57 6b10 	vmov	r6, r7, d0
 8006684:	b093      	sub	sp, #76	; 0x4c
 8006686:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006688:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800668c:	9106      	str	r1, [sp, #24]
 800668e:	ee10 aa10 	vmov	sl, s0
 8006692:	4604      	mov	r4, r0
 8006694:	9209      	str	r2, [sp, #36]	; 0x24
 8006696:	930c      	str	r3, [sp, #48]	; 0x30
 8006698:	46bb      	mov	fp, r7
 800669a:	b975      	cbnz	r5, 80066ba <_dtoa_r+0x42>
 800669c:	2010      	movs	r0, #16
 800669e:	f000 fffd 	bl	800769c <malloc>
 80066a2:	4602      	mov	r2, r0
 80066a4:	6260      	str	r0, [r4, #36]	; 0x24
 80066a6:	b920      	cbnz	r0, 80066b2 <_dtoa_r+0x3a>
 80066a8:	4ba7      	ldr	r3, [pc, #668]	; (8006948 <_dtoa_r+0x2d0>)
 80066aa:	21ea      	movs	r1, #234	; 0xea
 80066ac:	48a7      	ldr	r0, [pc, #668]	; (800694c <_dtoa_r+0x2d4>)
 80066ae:	f001 fcdd 	bl	800806c <__assert_func>
 80066b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80066b6:	6005      	str	r5, [r0, #0]
 80066b8:	60c5      	str	r5, [r0, #12]
 80066ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066bc:	6819      	ldr	r1, [r3, #0]
 80066be:	b151      	cbz	r1, 80066d6 <_dtoa_r+0x5e>
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	604a      	str	r2, [r1, #4]
 80066c4:	2301      	movs	r3, #1
 80066c6:	4093      	lsls	r3, r2
 80066c8:	608b      	str	r3, [r1, #8]
 80066ca:	4620      	mov	r0, r4
 80066cc:	f001 f82e 	bl	800772c <_Bfree>
 80066d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80066d2:	2200      	movs	r2, #0
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	1e3b      	subs	r3, r7, #0
 80066d8:	bfaa      	itet	ge
 80066da:	2300      	movge	r3, #0
 80066dc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80066e0:	f8c8 3000 	strge.w	r3, [r8]
 80066e4:	4b9a      	ldr	r3, [pc, #616]	; (8006950 <_dtoa_r+0x2d8>)
 80066e6:	bfbc      	itt	lt
 80066e8:	2201      	movlt	r2, #1
 80066ea:	f8c8 2000 	strlt.w	r2, [r8]
 80066ee:	ea33 030b 	bics.w	r3, r3, fp
 80066f2:	d11b      	bne.n	800672c <_dtoa_r+0xb4>
 80066f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80066f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006700:	4333      	orrs	r3, r6
 8006702:	f000 8592 	beq.w	800722a <_dtoa_r+0xbb2>
 8006706:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006708:	b963      	cbnz	r3, 8006724 <_dtoa_r+0xac>
 800670a:	4b92      	ldr	r3, [pc, #584]	; (8006954 <_dtoa_r+0x2dc>)
 800670c:	e022      	b.n	8006754 <_dtoa_r+0xdc>
 800670e:	4b92      	ldr	r3, [pc, #584]	; (8006958 <_dtoa_r+0x2e0>)
 8006710:	9301      	str	r3, [sp, #4]
 8006712:	3308      	adds	r3, #8
 8006714:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	9801      	ldr	r0, [sp, #4]
 800671a:	b013      	add	sp, #76	; 0x4c
 800671c:	ecbd 8b04 	vpop	{d8-d9}
 8006720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006724:	4b8b      	ldr	r3, [pc, #556]	; (8006954 <_dtoa_r+0x2dc>)
 8006726:	9301      	str	r3, [sp, #4]
 8006728:	3303      	adds	r3, #3
 800672a:	e7f3      	b.n	8006714 <_dtoa_r+0x9c>
 800672c:	2200      	movs	r2, #0
 800672e:	2300      	movs	r3, #0
 8006730:	4650      	mov	r0, sl
 8006732:	4659      	mov	r1, fp
 8006734:	f7fa fa48 	bl	8000bc8 <__aeabi_dcmpeq>
 8006738:	ec4b ab19 	vmov	d9, sl, fp
 800673c:	4680      	mov	r8, r0
 800673e:	b158      	cbz	r0, 8006758 <_dtoa_r+0xe0>
 8006740:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006742:	2301      	movs	r3, #1
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006748:	2b00      	cmp	r3, #0
 800674a:	f000 856b 	beq.w	8007224 <_dtoa_r+0xbac>
 800674e:	4883      	ldr	r0, [pc, #524]	; (800695c <_dtoa_r+0x2e4>)
 8006750:	6018      	str	r0, [r3, #0]
 8006752:	1e43      	subs	r3, r0, #1
 8006754:	9301      	str	r3, [sp, #4]
 8006756:	e7df      	b.n	8006718 <_dtoa_r+0xa0>
 8006758:	ec4b ab10 	vmov	d0, sl, fp
 800675c:	aa10      	add	r2, sp, #64	; 0x40
 800675e:	a911      	add	r1, sp, #68	; 0x44
 8006760:	4620      	mov	r0, r4
 8006762:	f001 facb 	bl	8007cfc <__d2b>
 8006766:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800676a:	ee08 0a10 	vmov	s16, r0
 800676e:	2d00      	cmp	r5, #0
 8006770:	f000 8084 	beq.w	800687c <_dtoa_r+0x204>
 8006774:	ee19 3a90 	vmov	r3, s19
 8006778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800677c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006780:	4656      	mov	r6, sl
 8006782:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006786:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800678a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800678e:	4b74      	ldr	r3, [pc, #464]	; (8006960 <_dtoa_r+0x2e8>)
 8006790:	2200      	movs	r2, #0
 8006792:	4630      	mov	r0, r6
 8006794:	4639      	mov	r1, r7
 8006796:	f7f9 fdf7 	bl	8000388 <__aeabi_dsub>
 800679a:	a365      	add	r3, pc, #404	; (adr r3, 8006930 <_dtoa_r+0x2b8>)
 800679c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a0:	f7f9 ffaa 	bl	80006f8 <__aeabi_dmul>
 80067a4:	a364      	add	r3, pc, #400	; (adr r3, 8006938 <_dtoa_r+0x2c0>)
 80067a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067aa:	f7f9 fdef 	bl	800038c <__adddf3>
 80067ae:	4606      	mov	r6, r0
 80067b0:	4628      	mov	r0, r5
 80067b2:	460f      	mov	r7, r1
 80067b4:	f7f9 ff36 	bl	8000624 <__aeabi_i2d>
 80067b8:	a361      	add	r3, pc, #388	; (adr r3, 8006940 <_dtoa_r+0x2c8>)
 80067ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067be:	f7f9 ff9b 	bl	80006f8 <__aeabi_dmul>
 80067c2:	4602      	mov	r2, r0
 80067c4:	460b      	mov	r3, r1
 80067c6:	4630      	mov	r0, r6
 80067c8:	4639      	mov	r1, r7
 80067ca:	f7f9 fddf 	bl	800038c <__adddf3>
 80067ce:	4606      	mov	r6, r0
 80067d0:	460f      	mov	r7, r1
 80067d2:	f7fa fa41 	bl	8000c58 <__aeabi_d2iz>
 80067d6:	2200      	movs	r2, #0
 80067d8:	9000      	str	r0, [sp, #0]
 80067da:	2300      	movs	r3, #0
 80067dc:	4630      	mov	r0, r6
 80067de:	4639      	mov	r1, r7
 80067e0:	f7fa f9fc 	bl	8000bdc <__aeabi_dcmplt>
 80067e4:	b150      	cbz	r0, 80067fc <_dtoa_r+0x184>
 80067e6:	9800      	ldr	r0, [sp, #0]
 80067e8:	f7f9 ff1c 	bl	8000624 <__aeabi_i2d>
 80067ec:	4632      	mov	r2, r6
 80067ee:	463b      	mov	r3, r7
 80067f0:	f7fa f9ea 	bl	8000bc8 <__aeabi_dcmpeq>
 80067f4:	b910      	cbnz	r0, 80067fc <_dtoa_r+0x184>
 80067f6:	9b00      	ldr	r3, [sp, #0]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	9b00      	ldr	r3, [sp, #0]
 80067fe:	2b16      	cmp	r3, #22
 8006800:	d85a      	bhi.n	80068b8 <_dtoa_r+0x240>
 8006802:	9a00      	ldr	r2, [sp, #0]
 8006804:	4b57      	ldr	r3, [pc, #348]	; (8006964 <_dtoa_r+0x2ec>)
 8006806:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800680a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680e:	ec51 0b19 	vmov	r0, r1, d9
 8006812:	f7fa f9e3 	bl	8000bdc <__aeabi_dcmplt>
 8006816:	2800      	cmp	r0, #0
 8006818:	d050      	beq.n	80068bc <_dtoa_r+0x244>
 800681a:	9b00      	ldr	r3, [sp, #0]
 800681c:	3b01      	subs	r3, #1
 800681e:	9300      	str	r3, [sp, #0]
 8006820:	2300      	movs	r3, #0
 8006822:	930b      	str	r3, [sp, #44]	; 0x2c
 8006824:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006826:	1b5d      	subs	r5, r3, r5
 8006828:	1e6b      	subs	r3, r5, #1
 800682a:	9305      	str	r3, [sp, #20]
 800682c:	bf45      	ittet	mi
 800682e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006832:	9304      	strmi	r3, [sp, #16]
 8006834:	2300      	movpl	r3, #0
 8006836:	2300      	movmi	r3, #0
 8006838:	bf4c      	ite	mi
 800683a:	9305      	strmi	r3, [sp, #20]
 800683c:	9304      	strpl	r3, [sp, #16]
 800683e:	9b00      	ldr	r3, [sp, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	db3d      	blt.n	80068c0 <_dtoa_r+0x248>
 8006844:	9b05      	ldr	r3, [sp, #20]
 8006846:	9a00      	ldr	r2, [sp, #0]
 8006848:	920a      	str	r2, [sp, #40]	; 0x28
 800684a:	4413      	add	r3, r2
 800684c:	9305      	str	r3, [sp, #20]
 800684e:	2300      	movs	r3, #0
 8006850:	9307      	str	r3, [sp, #28]
 8006852:	9b06      	ldr	r3, [sp, #24]
 8006854:	2b09      	cmp	r3, #9
 8006856:	f200 8089 	bhi.w	800696c <_dtoa_r+0x2f4>
 800685a:	2b05      	cmp	r3, #5
 800685c:	bfc4      	itt	gt
 800685e:	3b04      	subgt	r3, #4
 8006860:	9306      	strgt	r3, [sp, #24]
 8006862:	9b06      	ldr	r3, [sp, #24]
 8006864:	f1a3 0302 	sub.w	r3, r3, #2
 8006868:	bfcc      	ite	gt
 800686a:	2500      	movgt	r5, #0
 800686c:	2501      	movle	r5, #1
 800686e:	2b03      	cmp	r3, #3
 8006870:	f200 8087 	bhi.w	8006982 <_dtoa_r+0x30a>
 8006874:	e8df f003 	tbb	[pc, r3]
 8006878:	59383a2d 	.word	0x59383a2d
 800687c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006880:	441d      	add	r5, r3
 8006882:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006886:	2b20      	cmp	r3, #32
 8006888:	bfc1      	itttt	gt
 800688a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800688e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006892:	fa0b f303 	lslgt.w	r3, fp, r3
 8006896:	fa26 f000 	lsrgt.w	r0, r6, r0
 800689a:	bfda      	itte	le
 800689c:	f1c3 0320 	rsble	r3, r3, #32
 80068a0:	fa06 f003 	lslle.w	r0, r6, r3
 80068a4:	4318      	orrgt	r0, r3
 80068a6:	f7f9 fead 	bl	8000604 <__aeabi_ui2d>
 80068aa:	2301      	movs	r3, #1
 80068ac:	4606      	mov	r6, r0
 80068ae:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80068b2:	3d01      	subs	r5, #1
 80068b4:	930e      	str	r3, [sp, #56]	; 0x38
 80068b6:	e76a      	b.n	800678e <_dtoa_r+0x116>
 80068b8:	2301      	movs	r3, #1
 80068ba:	e7b2      	b.n	8006822 <_dtoa_r+0x1aa>
 80068bc:	900b      	str	r0, [sp, #44]	; 0x2c
 80068be:	e7b1      	b.n	8006824 <_dtoa_r+0x1ac>
 80068c0:	9b04      	ldr	r3, [sp, #16]
 80068c2:	9a00      	ldr	r2, [sp, #0]
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	4253      	negs	r3, r2
 80068ca:	9307      	str	r3, [sp, #28]
 80068cc:	2300      	movs	r3, #0
 80068ce:	930a      	str	r3, [sp, #40]	; 0x28
 80068d0:	e7bf      	b.n	8006852 <_dtoa_r+0x1da>
 80068d2:	2300      	movs	r3, #0
 80068d4:	9308      	str	r3, [sp, #32]
 80068d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d8:	2b00      	cmp	r3, #0
 80068da:	dc55      	bgt.n	8006988 <_dtoa_r+0x310>
 80068dc:	2301      	movs	r3, #1
 80068de:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80068e2:	461a      	mov	r2, r3
 80068e4:	9209      	str	r2, [sp, #36]	; 0x24
 80068e6:	e00c      	b.n	8006902 <_dtoa_r+0x28a>
 80068e8:	2301      	movs	r3, #1
 80068ea:	e7f3      	b.n	80068d4 <_dtoa_r+0x25c>
 80068ec:	2300      	movs	r3, #0
 80068ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f0:	9308      	str	r3, [sp, #32]
 80068f2:	9b00      	ldr	r3, [sp, #0]
 80068f4:	4413      	add	r3, r2
 80068f6:	9302      	str	r3, [sp, #8]
 80068f8:	3301      	adds	r3, #1
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	9303      	str	r3, [sp, #12]
 80068fe:	bfb8      	it	lt
 8006900:	2301      	movlt	r3, #1
 8006902:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006904:	2200      	movs	r2, #0
 8006906:	6042      	str	r2, [r0, #4]
 8006908:	2204      	movs	r2, #4
 800690a:	f102 0614 	add.w	r6, r2, #20
 800690e:	429e      	cmp	r6, r3
 8006910:	6841      	ldr	r1, [r0, #4]
 8006912:	d93d      	bls.n	8006990 <_dtoa_r+0x318>
 8006914:	4620      	mov	r0, r4
 8006916:	f000 fec9 	bl	80076ac <_Balloc>
 800691a:	9001      	str	r0, [sp, #4]
 800691c:	2800      	cmp	r0, #0
 800691e:	d13b      	bne.n	8006998 <_dtoa_r+0x320>
 8006920:	4b11      	ldr	r3, [pc, #68]	; (8006968 <_dtoa_r+0x2f0>)
 8006922:	4602      	mov	r2, r0
 8006924:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006928:	e6c0      	b.n	80066ac <_dtoa_r+0x34>
 800692a:	2301      	movs	r3, #1
 800692c:	e7df      	b.n	80068ee <_dtoa_r+0x276>
 800692e:	bf00      	nop
 8006930:	636f4361 	.word	0x636f4361
 8006934:	3fd287a7 	.word	0x3fd287a7
 8006938:	8b60c8b3 	.word	0x8b60c8b3
 800693c:	3fc68a28 	.word	0x3fc68a28
 8006940:	509f79fb 	.word	0x509f79fb
 8006944:	3fd34413 	.word	0x3fd34413
 8006948:	0800d225 	.word	0x0800d225
 800694c:	0800d23c 	.word	0x0800d23c
 8006950:	7ff00000 	.word	0x7ff00000
 8006954:	0800d221 	.word	0x0800d221
 8006958:	0800d218 	.word	0x0800d218
 800695c:	0800d1f5 	.word	0x0800d1f5
 8006960:	3ff80000 	.word	0x3ff80000
 8006964:	0800d390 	.word	0x0800d390
 8006968:	0800d297 	.word	0x0800d297
 800696c:	2501      	movs	r5, #1
 800696e:	2300      	movs	r3, #0
 8006970:	9306      	str	r3, [sp, #24]
 8006972:	9508      	str	r5, [sp, #32]
 8006974:	f04f 33ff 	mov.w	r3, #4294967295
 8006978:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800697c:	2200      	movs	r2, #0
 800697e:	2312      	movs	r3, #18
 8006980:	e7b0      	b.n	80068e4 <_dtoa_r+0x26c>
 8006982:	2301      	movs	r3, #1
 8006984:	9308      	str	r3, [sp, #32]
 8006986:	e7f5      	b.n	8006974 <_dtoa_r+0x2fc>
 8006988:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800698a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800698e:	e7b8      	b.n	8006902 <_dtoa_r+0x28a>
 8006990:	3101      	adds	r1, #1
 8006992:	6041      	str	r1, [r0, #4]
 8006994:	0052      	lsls	r2, r2, #1
 8006996:	e7b8      	b.n	800690a <_dtoa_r+0x292>
 8006998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800699a:	9a01      	ldr	r2, [sp, #4]
 800699c:	601a      	str	r2, [r3, #0]
 800699e:	9b03      	ldr	r3, [sp, #12]
 80069a0:	2b0e      	cmp	r3, #14
 80069a2:	f200 809d 	bhi.w	8006ae0 <_dtoa_r+0x468>
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	f000 809a 	beq.w	8006ae0 <_dtoa_r+0x468>
 80069ac:	9b00      	ldr	r3, [sp, #0]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dd32      	ble.n	8006a18 <_dtoa_r+0x3a0>
 80069b2:	4ab7      	ldr	r2, [pc, #732]	; (8006c90 <_dtoa_r+0x618>)
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80069bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069c0:	9b00      	ldr	r3, [sp, #0]
 80069c2:	05d8      	lsls	r0, r3, #23
 80069c4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80069c8:	d516      	bpl.n	80069f8 <_dtoa_r+0x380>
 80069ca:	4bb2      	ldr	r3, [pc, #712]	; (8006c94 <_dtoa_r+0x61c>)
 80069cc:	ec51 0b19 	vmov	r0, r1, d9
 80069d0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80069d4:	f7f9 ffba 	bl	800094c <__aeabi_ddiv>
 80069d8:	f007 070f 	and.w	r7, r7, #15
 80069dc:	4682      	mov	sl, r0
 80069de:	468b      	mov	fp, r1
 80069e0:	2503      	movs	r5, #3
 80069e2:	4eac      	ldr	r6, [pc, #688]	; (8006c94 <_dtoa_r+0x61c>)
 80069e4:	b957      	cbnz	r7, 80069fc <_dtoa_r+0x384>
 80069e6:	4642      	mov	r2, r8
 80069e8:	464b      	mov	r3, r9
 80069ea:	4650      	mov	r0, sl
 80069ec:	4659      	mov	r1, fp
 80069ee:	f7f9 ffad 	bl	800094c <__aeabi_ddiv>
 80069f2:	4682      	mov	sl, r0
 80069f4:	468b      	mov	fp, r1
 80069f6:	e028      	b.n	8006a4a <_dtoa_r+0x3d2>
 80069f8:	2502      	movs	r5, #2
 80069fa:	e7f2      	b.n	80069e2 <_dtoa_r+0x36a>
 80069fc:	07f9      	lsls	r1, r7, #31
 80069fe:	d508      	bpl.n	8006a12 <_dtoa_r+0x39a>
 8006a00:	4640      	mov	r0, r8
 8006a02:	4649      	mov	r1, r9
 8006a04:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006a08:	f7f9 fe76 	bl	80006f8 <__aeabi_dmul>
 8006a0c:	3501      	adds	r5, #1
 8006a0e:	4680      	mov	r8, r0
 8006a10:	4689      	mov	r9, r1
 8006a12:	107f      	asrs	r7, r7, #1
 8006a14:	3608      	adds	r6, #8
 8006a16:	e7e5      	b.n	80069e4 <_dtoa_r+0x36c>
 8006a18:	f000 809b 	beq.w	8006b52 <_dtoa_r+0x4da>
 8006a1c:	9b00      	ldr	r3, [sp, #0]
 8006a1e:	4f9d      	ldr	r7, [pc, #628]	; (8006c94 <_dtoa_r+0x61c>)
 8006a20:	425e      	negs	r6, r3
 8006a22:	4b9b      	ldr	r3, [pc, #620]	; (8006c90 <_dtoa_r+0x618>)
 8006a24:	f006 020f 	and.w	r2, r6, #15
 8006a28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a30:	ec51 0b19 	vmov	r0, r1, d9
 8006a34:	f7f9 fe60 	bl	80006f8 <__aeabi_dmul>
 8006a38:	1136      	asrs	r6, r6, #4
 8006a3a:	4682      	mov	sl, r0
 8006a3c:	468b      	mov	fp, r1
 8006a3e:	2300      	movs	r3, #0
 8006a40:	2502      	movs	r5, #2
 8006a42:	2e00      	cmp	r6, #0
 8006a44:	d17a      	bne.n	8006b3c <_dtoa_r+0x4c4>
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1d3      	bne.n	80069f2 <_dtoa_r+0x37a>
 8006a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f000 8082 	beq.w	8006b56 <_dtoa_r+0x4de>
 8006a52:	4b91      	ldr	r3, [pc, #580]	; (8006c98 <_dtoa_r+0x620>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	4650      	mov	r0, sl
 8006a58:	4659      	mov	r1, fp
 8006a5a:	f7fa f8bf 	bl	8000bdc <__aeabi_dcmplt>
 8006a5e:	2800      	cmp	r0, #0
 8006a60:	d079      	beq.n	8006b56 <_dtoa_r+0x4de>
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d076      	beq.n	8006b56 <_dtoa_r+0x4de>
 8006a68:	9b02      	ldr	r3, [sp, #8]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	dd36      	ble.n	8006adc <_dtoa_r+0x464>
 8006a6e:	9b00      	ldr	r3, [sp, #0]
 8006a70:	4650      	mov	r0, sl
 8006a72:	4659      	mov	r1, fp
 8006a74:	1e5f      	subs	r7, r3, #1
 8006a76:	2200      	movs	r2, #0
 8006a78:	4b88      	ldr	r3, [pc, #544]	; (8006c9c <_dtoa_r+0x624>)
 8006a7a:	f7f9 fe3d 	bl	80006f8 <__aeabi_dmul>
 8006a7e:	9e02      	ldr	r6, [sp, #8]
 8006a80:	4682      	mov	sl, r0
 8006a82:	468b      	mov	fp, r1
 8006a84:	3501      	adds	r5, #1
 8006a86:	4628      	mov	r0, r5
 8006a88:	f7f9 fdcc 	bl	8000624 <__aeabi_i2d>
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	465b      	mov	r3, fp
 8006a90:	f7f9 fe32 	bl	80006f8 <__aeabi_dmul>
 8006a94:	4b82      	ldr	r3, [pc, #520]	; (8006ca0 <_dtoa_r+0x628>)
 8006a96:	2200      	movs	r2, #0
 8006a98:	f7f9 fc78 	bl	800038c <__adddf3>
 8006a9c:	46d0      	mov	r8, sl
 8006a9e:	46d9      	mov	r9, fp
 8006aa0:	4682      	mov	sl, r0
 8006aa2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006aa6:	2e00      	cmp	r6, #0
 8006aa8:	d158      	bne.n	8006b5c <_dtoa_r+0x4e4>
 8006aaa:	4b7e      	ldr	r3, [pc, #504]	; (8006ca4 <_dtoa_r+0x62c>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	4640      	mov	r0, r8
 8006ab0:	4649      	mov	r1, r9
 8006ab2:	f7f9 fc69 	bl	8000388 <__aeabi_dsub>
 8006ab6:	4652      	mov	r2, sl
 8006ab8:	465b      	mov	r3, fp
 8006aba:	4680      	mov	r8, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	f7fa f8ab 	bl	8000c18 <__aeabi_dcmpgt>
 8006ac2:	2800      	cmp	r0, #0
 8006ac4:	f040 8295 	bne.w	8006ff2 <_dtoa_r+0x97a>
 8006ac8:	4652      	mov	r2, sl
 8006aca:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006ace:	4640      	mov	r0, r8
 8006ad0:	4649      	mov	r1, r9
 8006ad2:	f7fa f883 	bl	8000bdc <__aeabi_dcmplt>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	f040 8289 	bne.w	8006fee <_dtoa_r+0x976>
 8006adc:	ec5b ab19 	vmov	sl, fp, d9
 8006ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	f2c0 8148 	blt.w	8006d78 <_dtoa_r+0x700>
 8006ae8:	9a00      	ldr	r2, [sp, #0]
 8006aea:	2a0e      	cmp	r2, #14
 8006aec:	f300 8144 	bgt.w	8006d78 <_dtoa_r+0x700>
 8006af0:	4b67      	ldr	r3, [pc, #412]	; (8006c90 <_dtoa_r+0x618>)
 8006af2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006af6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	f280 80d5 	bge.w	8006cac <_dtoa_r+0x634>
 8006b02:	9b03      	ldr	r3, [sp, #12]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	f300 80d1 	bgt.w	8006cac <_dtoa_r+0x634>
 8006b0a:	f040 826f 	bne.w	8006fec <_dtoa_r+0x974>
 8006b0e:	4b65      	ldr	r3, [pc, #404]	; (8006ca4 <_dtoa_r+0x62c>)
 8006b10:	2200      	movs	r2, #0
 8006b12:	4640      	mov	r0, r8
 8006b14:	4649      	mov	r1, r9
 8006b16:	f7f9 fdef 	bl	80006f8 <__aeabi_dmul>
 8006b1a:	4652      	mov	r2, sl
 8006b1c:	465b      	mov	r3, fp
 8006b1e:	f7fa f871 	bl	8000c04 <__aeabi_dcmpge>
 8006b22:	9e03      	ldr	r6, [sp, #12]
 8006b24:	4637      	mov	r7, r6
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f040 8245 	bne.w	8006fb6 <_dtoa_r+0x93e>
 8006b2c:	9d01      	ldr	r5, [sp, #4]
 8006b2e:	2331      	movs	r3, #49	; 0x31
 8006b30:	f805 3b01 	strb.w	r3, [r5], #1
 8006b34:	9b00      	ldr	r3, [sp, #0]
 8006b36:	3301      	adds	r3, #1
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	e240      	b.n	8006fbe <_dtoa_r+0x946>
 8006b3c:	07f2      	lsls	r2, r6, #31
 8006b3e:	d505      	bpl.n	8006b4c <_dtoa_r+0x4d4>
 8006b40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b44:	f7f9 fdd8 	bl	80006f8 <__aeabi_dmul>
 8006b48:	3501      	adds	r5, #1
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	1076      	asrs	r6, r6, #1
 8006b4e:	3708      	adds	r7, #8
 8006b50:	e777      	b.n	8006a42 <_dtoa_r+0x3ca>
 8006b52:	2502      	movs	r5, #2
 8006b54:	e779      	b.n	8006a4a <_dtoa_r+0x3d2>
 8006b56:	9f00      	ldr	r7, [sp, #0]
 8006b58:	9e03      	ldr	r6, [sp, #12]
 8006b5a:	e794      	b.n	8006a86 <_dtoa_r+0x40e>
 8006b5c:	9901      	ldr	r1, [sp, #4]
 8006b5e:	4b4c      	ldr	r3, [pc, #304]	; (8006c90 <_dtoa_r+0x618>)
 8006b60:	4431      	add	r1, r6
 8006b62:	910d      	str	r1, [sp, #52]	; 0x34
 8006b64:	9908      	ldr	r1, [sp, #32]
 8006b66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006b6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b6e:	2900      	cmp	r1, #0
 8006b70:	d043      	beq.n	8006bfa <_dtoa_r+0x582>
 8006b72:	494d      	ldr	r1, [pc, #308]	; (8006ca8 <_dtoa_r+0x630>)
 8006b74:	2000      	movs	r0, #0
 8006b76:	f7f9 fee9 	bl	800094c <__aeabi_ddiv>
 8006b7a:	4652      	mov	r2, sl
 8006b7c:	465b      	mov	r3, fp
 8006b7e:	f7f9 fc03 	bl	8000388 <__aeabi_dsub>
 8006b82:	9d01      	ldr	r5, [sp, #4]
 8006b84:	4682      	mov	sl, r0
 8006b86:	468b      	mov	fp, r1
 8006b88:	4649      	mov	r1, r9
 8006b8a:	4640      	mov	r0, r8
 8006b8c:	f7fa f864 	bl	8000c58 <__aeabi_d2iz>
 8006b90:	4606      	mov	r6, r0
 8006b92:	f7f9 fd47 	bl	8000624 <__aeabi_i2d>
 8006b96:	4602      	mov	r2, r0
 8006b98:	460b      	mov	r3, r1
 8006b9a:	4640      	mov	r0, r8
 8006b9c:	4649      	mov	r1, r9
 8006b9e:	f7f9 fbf3 	bl	8000388 <__aeabi_dsub>
 8006ba2:	3630      	adds	r6, #48	; 0x30
 8006ba4:	f805 6b01 	strb.w	r6, [r5], #1
 8006ba8:	4652      	mov	r2, sl
 8006baa:	465b      	mov	r3, fp
 8006bac:	4680      	mov	r8, r0
 8006bae:	4689      	mov	r9, r1
 8006bb0:	f7fa f814 	bl	8000bdc <__aeabi_dcmplt>
 8006bb4:	2800      	cmp	r0, #0
 8006bb6:	d163      	bne.n	8006c80 <_dtoa_r+0x608>
 8006bb8:	4642      	mov	r2, r8
 8006bba:	464b      	mov	r3, r9
 8006bbc:	4936      	ldr	r1, [pc, #216]	; (8006c98 <_dtoa_r+0x620>)
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f7f9 fbe2 	bl	8000388 <__aeabi_dsub>
 8006bc4:	4652      	mov	r2, sl
 8006bc6:	465b      	mov	r3, fp
 8006bc8:	f7fa f808 	bl	8000bdc <__aeabi_dcmplt>
 8006bcc:	2800      	cmp	r0, #0
 8006bce:	f040 80b5 	bne.w	8006d3c <_dtoa_r+0x6c4>
 8006bd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bd4:	429d      	cmp	r5, r3
 8006bd6:	d081      	beq.n	8006adc <_dtoa_r+0x464>
 8006bd8:	4b30      	ldr	r3, [pc, #192]	; (8006c9c <_dtoa_r+0x624>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	4650      	mov	r0, sl
 8006bde:	4659      	mov	r1, fp
 8006be0:	f7f9 fd8a 	bl	80006f8 <__aeabi_dmul>
 8006be4:	4b2d      	ldr	r3, [pc, #180]	; (8006c9c <_dtoa_r+0x624>)
 8006be6:	4682      	mov	sl, r0
 8006be8:	468b      	mov	fp, r1
 8006bea:	4640      	mov	r0, r8
 8006bec:	4649      	mov	r1, r9
 8006bee:	2200      	movs	r2, #0
 8006bf0:	f7f9 fd82 	bl	80006f8 <__aeabi_dmul>
 8006bf4:	4680      	mov	r8, r0
 8006bf6:	4689      	mov	r9, r1
 8006bf8:	e7c6      	b.n	8006b88 <_dtoa_r+0x510>
 8006bfa:	4650      	mov	r0, sl
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	f7f9 fd7b 	bl	80006f8 <__aeabi_dmul>
 8006c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c04:	9d01      	ldr	r5, [sp, #4]
 8006c06:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c08:	4682      	mov	sl, r0
 8006c0a:	468b      	mov	fp, r1
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	4640      	mov	r0, r8
 8006c10:	f7fa f822 	bl	8000c58 <__aeabi_d2iz>
 8006c14:	4606      	mov	r6, r0
 8006c16:	f7f9 fd05 	bl	8000624 <__aeabi_i2d>
 8006c1a:	3630      	adds	r6, #48	; 0x30
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4640      	mov	r0, r8
 8006c22:	4649      	mov	r1, r9
 8006c24:	f7f9 fbb0 	bl	8000388 <__aeabi_dsub>
 8006c28:	f805 6b01 	strb.w	r6, [r5], #1
 8006c2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006c2e:	429d      	cmp	r5, r3
 8006c30:	4680      	mov	r8, r0
 8006c32:	4689      	mov	r9, r1
 8006c34:	f04f 0200 	mov.w	r2, #0
 8006c38:	d124      	bne.n	8006c84 <_dtoa_r+0x60c>
 8006c3a:	4b1b      	ldr	r3, [pc, #108]	; (8006ca8 <_dtoa_r+0x630>)
 8006c3c:	4650      	mov	r0, sl
 8006c3e:	4659      	mov	r1, fp
 8006c40:	f7f9 fba4 	bl	800038c <__adddf3>
 8006c44:	4602      	mov	r2, r0
 8006c46:	460b      	mov	r3, r1
 8006c48:	4640      	mov	r0, r8
 8006c4a:	4649      	mov	r1, r9
 8006c4c:	f7f9 ffe4 	bl	8000c18 <__aeabi_dcmpgt>
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d173      	bne.n	8006d3c <_dtoa_r+0x6c4>
 8006c54:	4652      	mov	r2, sl
 8006c56:	465b      	mov	r3, fp
 8006c58:	4913      	ldr	r1, [pc, #76]	; (8006ca8 <_dtoa_r+0x630>)
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	f7f9 fb94 	bl	8000388 <__aeabi_dsub>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4640      	mov	r0, r8
 8006c66:	4649      	mov	r1, r9
 8006c68:	f7f9 ffb8 	bl	8000bdc <__aeabi_dcmplt>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	f43f af35 	beq.w	8006adc <_dtoa_r+0x464>
 8006c72:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006c74:	1e6b      	subs	r3, r5, #1
 8006c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006c7c:	2b30      	cmp	r3, #48	; 0x30
 8006c7e:	d0f8      	beq.n	8006c72 <_dtoa_r+0x5fa>
 8006c80:	9700      	str	r7, [sp, #0]
 8006c82:	e049      	b.n	8006d18 <_dtoa_r+0x6a0>
 8006c84:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <_dtoa_r+0x624>)
 8006c86:	f7f9 fd37 	bl	80006f8 <__aeabi_dmul>
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	4689      	mov	r9, r1
 8006c8e:	e7bd      	b.n	8006c0c <_dtoa_r+0x594>
 8006c90:	0800d390 	.word	0x0800d390
 8006c94:	0800d368 	.word	0x0800d368
 8006c98:	3ff00000 	.word	0x3ff00000
 8006c9c:	40240000 	.word	0x40240000
 8006ca0:	401c0000 	.word	0x401c0000
 8006ca4:	40140000 	.word	0x40140000
 8006ca8:	3fe00000 	.word	0x3fe00000
 8006cac:	9d01      	ldr	r5, [sp, #4]
 8006cae:	4656      	mov	r6, sl
 8006cb0:	465f      	mov	r7, fp
 8006cb2:	4642      	mov	r2, r8
 8006cb4:	464b      	mov	r3, r9
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	4639      	mov	r1, r7
 8006cba:	f7f9 fe47 	bl	800094c <__aeabi_ddiv>
 8006cbe:	f7f9 ffcb 	bl	8000c58 <__aeabi_d2iz>
 8006cc2:	4682      	mov	sl, r0
 8006cc4:	f7f9 fcae 	bl	8000624 <__aeabi_i2d>
 8006cc8:	4642      	mov	r2, r8
 8006cca:	464b      	mov	r3, r9
 8006ccc:	f7f9 fd14 	bl	80006f8 <__aeabi_dmul>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	4639      	mov	r1, r7
 8006cd8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006cdc:	f7f9 fb54 	bl	8000388 <__aeabi_dsub>
 8006ce0:	f805 6b01 	strb.w	r6, [r5], #1
 8006ce4:	9e01      	ldr	r6, [sp, #4]
 8006ce6:	9f03      	ldr	r7, [sp, #12]
 8006ce8:	1bae      	subs	r6, r5, r6
 8006cea:	42b7      	cmp	r7, r6
 8006cec:	4602      	mov	r2, r0
 8006cee:	460b      	mov	r3, r1
 8006cf0:	d135      	bne.n	8006d5e <_dtoa_r+0x6e6>
 8006cf2:	f7f9 fb4b 	bl	800038c <__adddf3>
 8006cf6:	4642      	mov	r2, r8
 8006cf8:	464b      	mov	r3, r9
 8006cfa:	4606      	mov	r6, r0
 8006cfc:	460f      	mov	r7, r1
 8006cfe:	f7f9 ff8b 	bl	8000c18 <__aeabi_dcmpgt>
 8006d02:	b9d0      	cbnz	r0, 8006d3a <_dtoa_r+0x6c2>
 8006d04:	4642      	mov	r2, r8
 8006d06:	464b      	mov	r3, r9
 8006d08:	4630      	mov	r0, r6
 8006d0a:	4639      	mov	r1, r7
 8006d0c:	f7f9 ff5c 	bl	8000bc8 <__aeabi_dcmpeq>
 8006d10:	b110      	cbz	r0, 8006d18 <_dtoa_r+0x6a0>
 8006d12:	f01a 0f01 	tst.w	sl, #1
 8006d16:	d110      	bne.n	8006d3a <_dtoa_r+0x6c2>
 8006d18:	4620      	mov	r0, r4
 8006d1a:	ee18 1a10 	vmov	r1, s16
 8006d1e:	f000 fd05 	bl	800772c <_Bfree>
 8006d22:	2300      	movs	r3, #0
 8006d24:	9800      	ldr	r0, [sp, #0]
 8006d26:	702b      	strb	r3, [r5, #0]
 8006d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	6018      	str	r0, [r3, #0]
 8006d2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	f43f acf1 	beq.w	8006718 <_dtoa_r+0xa0>
 8006d36:	601d      	str	r5, [r3, #0]
 8006d38:	e4ee      	b.n	8006718 <_dtoa_r+0xa0>
 8006d3a:	9f00      	ldr	r7, [sp, #0]
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	461d      	mov	r5, r3
 8006d40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d44:	2a39      	cmp	r2, #57	; 0x39
 8006d46:	d106      	bne.n	8006d56 <_dtoa_r+0x6de>
 8006d48:	9a01      	ldr	r2, [sp, #4]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	d1f7      	bne.n	8006d3e <_dtoa_r+0x6c6>
 8006d4e:	9901      	ldr	r1, [sp, #4]
 8006d50:	2230      	movs	r2, #48	; 0x30
 8006d52:	3701      	adds	r7, #1
 8006d54:	700a      	strb	r2, [r1, #0]
 8006d56:	781a      	ldrb	r2, [r3, #0]
 8006d58:	3201      	adds	r2, #1
 8006d5a:	701a      	strb	r2, [r3, #0]
 8006d5c:	e790      	b.n	8006c80 <_dtoa_r+0x608>
 8006d5e:	4ba6      	ldr	r3, [pc, #664]	; (8006ff8 <_dtoa_r+0x980>)
 8006d60:	2200      	movs	r2, #0
 8006d62:	f7f9 fcc9 	bl	80006f8 <__aeabi_dmul>
 8006d66:	2200      	movs	r2, #0
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4606      	mov	r6, r0
 8006d6c:	460f      	mov	r7, r1
 8006d6e:	f7f9 ff2b 	bl	8000bc8 <__aeabi_dcmpeq>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d09d      	beq.n	8006cb2 <_dtoa_r+0x63a>
 8006d76:	e7cf      	b.n	8006d18 <_dtoa_r+0x6a0>
 8006d78:	9a08      	ldr	r2, [sp, #32]
 8006d7a:	2a00      	cmp	r2, #0
 8006d7c:	f000 80d7 	beq.w	8006f2e <_dtoa_r+0x8b6>
 8006d80:	9a06      	ldr	r2, [sp, #24]
 8006d82:	2a01      	cmp	r2, #1
 8006d84:	f300 80ba 	bgt.w	8006efc <_dtoa_r+0x884>
 8006d88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d8a:	2a00      	cmp	r2, #0
 8006d8c:	f000 80b2 	beq.w	8006ef4 <_dtoa_r+0x87c>
 8006d90:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006d94:	9e07      	ldr	r6, [sp, #28]
 8006d96:	9d04      	ldr	r5, [sp, #16]
 8006d98:	9a04      	ldr	r2, [sp, #16]
 8006d9a:	441a      	add	r2, r3
 8006d9c:	9204      	str	r2, [sp, #16]
 8006d9e:	9a05      	ldr	r2, [sp, #20]
 8006da0:	2101      	movs	r1, #1
 8006da2:	441a      	add	r2, r3
 8006da4:	4620      	mov	r0, r4
 8006da6:	9205      	str	r2, [sp, #20]
 8006da8:	f000 fd78 	bl	800789c <__i2b>
 8006dac:	4607      	mov	r7, r0
 8006dae:	2d00      	cmp	r5, #0
 8006db0:	dd0c      	ble.n	8006dcc <_dtoa_r+0x754>
 8006db2:	9b05      	ldr	r3, [sp, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	dd09      	ble.n	8006dcc <_dtoa_r+0x754>
 8006db8:	42ab      	cmp	r3, r5
 8006dba:	9a04      	ldr	r2, [sp, #16]
 8006dbc:	bfa8      	it	ge
 8006dbe:	462b      	movge	r3, r5
 8006dc0:	1ad2      	subs	r2, r2, r3
 8006dc2:	9204      	str	r2, [sp, #16]
 8006dc4:	9a05      	ldr	r2, [sp, #20]
 8006dc6:	1aed      	subs	r5, r5, r3
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	9305      	str	r3, [sp, #20]
 8006dcc:	9b07      	ldr	r3, [sp, #28]
 8006dce:	b31b      	cbz	r3, 8006e18 <_dtoa_r+0x7a0>
 8006dd0:	9b08      	ldr	r3, [sp, #32]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	f000 80af 	beq.w	8006f36 <_dtoa_r+0x8be>
 8006dd8:	2e00      	cmp	r6, #0
 8006dda:	dd13      	ble.n	8006e04 <_dtoa_r+0x78c>
 8006ddc:	4639      	mov	r1, r7
 8006dde:	4632      	mov	r2, r6
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 fe1b 	bl	8007a1c <__pow5mult>
 8006de6:	ee18 2a10 	vmov	r2, s16
 8006dea:	4601      	mov	r1, r0
 8006dec:	4607      	mov	r7, r0
 8006dee:	4620      	mov	r0, r4
 8006df0:	f000 fd6a 	bl	80078c8 <__multiply>
 8006df4:	ee18 1a10 	vmov	r1, s16
 8006df8:	4680      	mov	r8, r0
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f000 fc96 	bl	800772c <_Bfree>
 8006e00:	ee08 8a10 	vmov	s16, r8
 8006e04:	9b07      	ldr	r3, [sp, #28]
 8006e06:	1b9a      	subs	r2, r3, r6
 8006e08:	d006      	beq.n	8006e18 <_dtoa_r+0x7a0>
 8006e0a:	ee18 1a10 	vmov	r1, s16
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f000 fe04 	bl	8007a1c <__pow5mult>
 8006e14:	ee08 0a10 	vmov	s16, r0
 8006e18:	2101      	movs	r1, #1
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	f000 fd3e 	bl	800789c <__i2b>
 8006e20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	4606      	mov	r6, r0
 8006e26:	f340 8088 	ble.w	8006f3a <_dtoa_r+0x8c2>
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	4601      	mov	r1, r0
 8006e2e:	4620      	mov	r0, r4
 8006e30:	f000 fdf4 	bl	8007a1c <__pow5mult>
 8006e34:	9b06      	ldr	r3, [sp, #24]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	4606      	mov	r6, r0
 8006e3a:	f340 8081 	ble.w	8006f40 <_dtoa_r+0x8c8>
 8006e3e:	f04f 0800 	mov.w	r8, #0
 8006e42:	6933      	ldr	r3, [r6, #16]
 8006e44:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e48:	6918      	ldr	r0, [r3, #16]
 8006e4a:	f000 fcd7 	bl	80077fc <__hi0bits>
 8006e4e:	f1c0 0020 	rsb	r0, r0, #32
 8006e52:	9b05      	ldr	r3, [sp, #20]
 8006e54:	4418      	add	r0, r3
 8006e56:	f010 001f 	ands.w	r0, r0, #31
 8006e5a:	f000 8092 	beq.w	8006f82 <_dtoa_r+0x90a>
 8006e5e:	f1c0 0320 	rsb	r3, r0, #32
 8006e62:	2b04      	cmp	r3, #4
 8006e64:	f340 808a 	ble.w	8006f7c <_dtoa_r+0x904>
 8006e68:	f1c0 001c 	rsb	r0, r0, #28
 8006e6c:	9b04      	ldr	r3, [sp, #16]
 8006e6e:	4403      	add	r3, r0
 8006e70:	9304      	str	r3, [sp, #16]
 8006e72:	9b05      	ldr	r3, [sp, #20]
 8006e74:	4403      	add	r3, r0
 8006e76:	4405      	add	r5, r0
 8006e78:	9305      	str	r3, [sp, #20]
 8006e7a:	9b04      	ldr	r3, [sp, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	dd07      	ble.n	8006e90 <_dtoa_r+0x818>
 8006e80:	ee18 1a10 	vmov	r1, s16
 8006e84:	461a      	mov	r2, r3
 8006e86:	4620      	mov	r0, r4
 8006e88:	f000 fe22 	bl	8007ad0 <__lshift>
 8006e8c:	ee08 0a10 	vmov	s16, r0
 8006e90:	9b05      	ldr	r3, [sp, #20]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	dd05      	ble.n	8006ea2 <_dtoa_r+0x82a>
 8006e96:	4631      	mov	r1, r6
 8006e98:	461a      	mov	r2, r3
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 fe18 	bl	8007ad0 <__lshift>
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d06e      	beq.n	8006f86 <_dtoa_r+0x90e>
 8006ea8:	ee18 0a10 	vmov	r0, s16
 8006eac:	4631      	mov	r1, r6
 8006eae:	f000 fe7f 	bl	8007bb0 <__mcmp>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	da67      	bge.n	8006f86 <_dtoa_r+0x90e>
 8006eb6:	9b00      	ldr	r3, [sp, #0]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	ee18 1a10 	vmov	r1, s16
 8006ebe:	9300      	str	r3, [sp, #0]
 8006ec0:	220a      	movs	r2, #10
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f000 fc53 	bl	8007770 <__multadd>
 8006eca:	9b08      	ldr	r3, [sp, #32]
 8006ecc:	ee08 0a10 	vmov	s16, r0
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 81b1 	beq.w	8007238 <_dtoa_r+0xbc0>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	4639      	mov	r1, r7
 8006eda:	220a      	movs	r2, #10
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 fc47 	bl	8007770 <__multadd>
 8006ee2:	9b02      	ldr	r3, [sp, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	4607      	mov	r7, r0
 8006ee8:	f300 808e 	bgt.w	8007008 <_dtoa_r+0x990>
 8006eec:	9b06      	ldr	r3, [sp, #24]
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	dc51      	bgt.n	8006f96 <_dtoa_r+0x91e>
 8006ef2:	e089      	b.n	8007008 <_dtoa_r+0x990>
 8006ef4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ef6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006efa:	e74b      	b.n	8006d94 <_dtoa_r+0x71c>
 8006efc:	9b03      	ldr	r3, [sp, #12]
 8006efe:	1e5e      	subs	r6, r3, #1
 8006f00:	9b07      	ldr	r3, [sp, #28]
 8006f02:	42b3      	cmp	r3, r6
 8006f04:	bfbf      	itttt	lt
 8006f06:	9b07      	ldrlt	r3, [sp, #28]
 8006f08:	9607      	strlt	r6, [sp, #28]
 8006f0a:	1af2      	sublt	r2, r6, r3
 8006f0c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006f0e:	bfb6      	itet	lt
 8006f10:	189b      	addlt	r3, r3, r2
 8006f12:	1b9e      	subge	r6, r3, r6
 8006f14:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006f16:	9b03      	ldr	r3, [sp, #12]
 8006f18:	bfb8      	it	lt
 8006f1a:	2600      	movlt	r6, #0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	bfb7      	itett	lt
 8006f20:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006f24:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006f28:	1a9d      	sublt	r5, r3, r2
 8006f2a:	2300      	movlt	r3, #0
 8006f2c:	e734      	b.n	8006d98 <_dtoa_r+0x720>
 8006f2e:	9e07      	ldr	r6, [sp, #28]
 8006f30:	9d04      	ldr	r5, [sp, #16]
 8006f32:	9f08      	ldr	r7, [sp, #32]
 8006f34:	e73b      	b.n	8006dae <_dtoa_r+0x736>
 8006f36:	9a07      	ldr	r2, [sp, #28]
 8006f38:	e767      	b.n	8006e0a <_dtoa_r+0x792>
 8006f3a:	9b06      	ldr	r3, [sp, #24]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	dc18      	bgt.n	8006f72 <_dtoa_r+0x8fa>
 8006f40:	f1ba 0f00 	cmp.w	sl, #0
 8006f44:	d115      	bne.n	8006f72 <_dtoa_r+0x8fa>
 8006f46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f4a:	b993      	cbnz	r3, 8006f72 <_dtoa_r+0x8fa>
 8006f4c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f50:	0d1b      	lsrs	r3, r3, #20
 8006f52:	051b      	lsls	r3, r3, #20
 8006f54:	b183      	cbz	r3, 8006f78 <_dtoa_r+0x900>
 8006f56:	9b04      	ldr	r3, [sp, #16]
 8006f58:	3301      	adds	r3, #1
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	9b05      	ldr	r3, [sp, #20]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	9305      	str	r3, [sp, #20]
 8006f62:	f04f 0801 	mov.w	r8, #1
 8006f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f47f af6a 	bne.w	8006e42 <_dtoa_r+0x7ca>
 8006f6e:	2001      	movs	r0, #1
 8006f70:	e76f      	b.n	8006e52 <_dtoa_r+0x7da>
 8006f72:	f04f 0800 	mov.w	r8, #0
 8006f76:	e7f6      	b.n	8006f66 <_dtoa_r+0x8ee>
 8006f78:	4698      	mov	r8, r3
 8006f7a:	e7f4      	b.n	8006f66 <_dtoa_r+0x8ee>
 8006f7c:	f43f af7d 	beq.w	8006e7a <_dtoa_r+0x802>
 8006f80:	4618      	mov	r0, r3
 8006f82:	301c      	adds	r0, #28
 8006f84:	e772      	b.n	8006e6c <_dtoa_r+0x7f4>
 8006f86:	9b03      	ldr	r3, [sp, #12]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	dc37      	bgt.n	8006ffc <_dtoa_r+0x984>
 8006f8c:	9b06      	ldr	r3, [sp, #24]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	dd34      	ble.n	8006ffc <_dtoa_r+0x984>
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	9302      	str	r3, [sp, #8]
 8006f96:	9b02      	ldr	r3, [sp, #8]
 8006f98:	b96b      	cbnz	r3, 8006fb6 <_dtoa_r+0x93e>
 8006f9a:	4631      	mov	r1, r6
 8006f9c:	2205      	movs	r2, #5
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 fbe6 	bl	8007770 <__multadd>
 8006fa4:	4601      	mov	r1, r0
 8006fa6:	4606      	mov	r6, r0
 8006fa8:	ee18 0a10 	vmov	r0, s16
 8006fac:	f000 fe00 	bl	8007bb0 <__mcmp>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	f73f adbb 	bgt.w	8006b2c <_dtoa_r+0x4b4>
 8006fb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fb8:	9d01      	ldr	r5, [sp, #4]
 8006fba:	43db      	mvns	r3, r3
 8006fbc:	9300      	str	r3, [sp, #0]
 8006fbe:	f04f 0800 	mov.w	r8, #0
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f000 fbb1 	bl	800772c <_Bfree>
 8006fca:	2f00      	cmp	r7, #0
 8006fcc:	f43f aea4 	beq.w	8006d18 <_dtoa_r+0x6a0>
 8006fd0:	f1b8 0f00 	cmp.w	r8, #0
 8006fd4:	d005      	beq.n	8006fe2 <_dtoa_r+0x96a>
 8006fd6:	45b8      	cmp	r8, r7
 8006fd8:	d003      	beq.n	8006fe2 <_dtoa_r+0x96a>
 8006fda:	4641      	mov	r1, r8
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fba5 	bl	800772c <_Bfree>
 8006fe2:	4639      	mov	r1, r7
 8006fe4:	4620      	mov	r0, r4
 8006fe6:	f000 fba1 	bl	800772c <_Bfree>
 8006fea:	e695      	b.n	8006d18 <_dtoa_r+0x6a0>
 8006fec:	2600      	movs	r6, #0
 8006fee:	4637      	mov	r7, r6
 8006ff0:	e7e1      	b.n	8006fb6 <_dtoa_r+0x93e>
 8006ff2:	9700      	str	r7, [sp, #0]
 8006ff4:	4637      	mov	r7, r6
 8006ff6:	e599      	b.n	8006b2c <_dtoa_r+0x4b4>
 8006ff8:	40240000 	.word	0x40240000
 8006ffc:	9b08      	ldr	r3, [sp, #32]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	f000 80ca 	beq.w	8007198 <_dtoa_r+0xb20>
 8007004:	9b03      	ldr	r3, [sp, #12]
 8007006:	9302      	str	r3, [sp, #8]
 8007008:	2d00      	cmp	r5, #0
 800700a:	dd05      	ble.n	8007018 <_dtoa_r+0x9a0>
 800700c:	4639      	mov	r1, r7
 800700e:	462a      	mov	r2, r5
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fd5d 	bl	8007ad0 <__lshift>
 8007016:	4607      	mov	r7, r0
 8007018:	f1b8 0f00 	cmp.w	r8, #0
 800701c:	d05b      	beq.n	80070d6 <_dtoa_r+0xa5e>
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	4620      	mov	r0, r4
 8007022:	f000 fb43 	bl	80076ac <_Balloc>
 8007026:	4605      	mov	r5, r0
 8007028:	b928      	cbnz	r0, 8007036 <_dtoa_r+0x9be>
 800702a:	4b87      	ldr	r3, [pc, #540]	; (8007248 <_dtoa_r+0xbd0>)
 800702c:	4602      	mov	r2, r0
 800702e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007032:	f7ff bb3b 	b.w	80066ac <_dtoa_r+0x34>
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	3202      	adds	r2, #2
 800703a:	0092      	lsls	r2, r2, #2
 800703c:	f107 010c 	add.w	r1, r7, #12
 8007040:	300c      	adds	r0, #12
 8007042:	f7fe fcd5 	bl	80059f0 <memcpy>
 8007046:	2201      	movs	r2, #1
 8007048:	4629      	mov	r1, r5
 800704a:	4620      	mov	r0, r4
 800704c:	f000 fd40 	bl	8007ad0 <__lshift>
 8007050:	9b01      	ldr	r3, [sp, #4]
 8007052:	f103 0901 	add.w	r9, r3, #1
 8007056:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800705a:	4413      	add	r3, r2
 800705c:	9305      	str	r3, [sp, #20]
 800705e:	f00a 0301 	and.w	r3, sl, #1
 8007062:	46b8      	mov	r8, r7
 8007064:	9304      	str	r3, [sp, #16]
 8007066:	4607      	mov	r7, r0
 8007068:	4631      	mov	r1, r6
 800706a:	ee18 0a10 	vmov	r0, s16
 800706e:	f7ff fa75 	bl	800655c <quorem>
 8007072:	4641      	mov	r1, r8
 8007074:	9002      	str	r0, [sp, #8]
 8007076:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800707a:	ee18 0a10 	vmov	r0, s16
 800707e:	f000 fd97 	bl	8007bb0 <__mcmp>
 8007082:	463a      	mov	r2, r7
 8007084:	9003      	str	r0, [sp, #12]
 8007086:	4631      	mov	r1, r6
 8007088:	4620      	mov	r0, r4
 800708a:	f000 fdad 	bl	8007be8 <__mdiff>
 800708e:	68c2      	ldr	r2, [r0, #12]
 8007090:	f109 3bff 	add.w	fp, r9, #4294967295
 8007094:	4605      	mov	r5, r0
 8007096:	bb02      	cbnz	r2, 80070da <_dtoa_r+0xa62>
 8007098:	4601      	mov	r1, r0
 800709a:	ee18 0a10 	vmov	r0, s16
 800709e:	f000 fd87 	bl	8007bb0 <__mcmp>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4629      	mov	r1, r5
 80070a6:	4620      	mov	r0, r4
 80070a8:	9207      	str	r2, [sp, #28]
 80070aa:	f000 fb3f 	bl	800772c <_Bfree>
 80070ae:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80070b2:	ea43 0102 	orr.w	r1, r3, r2
 80070b6:	9b04      	ldr	r3, [sp, #16]
 80070b8:	430b      	orrs	r3, r1
 80070ba:	464d      	mov	r5, r9
 80070bc:	d10f      	bne.n	80070de <_dtoa_r+0xa66>
 80070be:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80070c2:	d02a      	beq.n	800711a <_dtoa_r+0xaa2>
 80070c4:	9b03      	ldr	r3, [sp, #12]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	dd02      	ble.n	80070d0 <_dtoa_r+0xa58>
 80070ca:	9b02      	ldr	r3, [sp, #8]
 80070cc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80070d0:	f88b a000 	strb.w	sl, [fp]
 80070d4:	e775      	b.n	8006fc2 <_dtoa_r+0x94a>
 80070d6:	4638      	mov	r0, r7
 80070d8:	e7ba      	b.n	8007050 <_dtoa_r+0x9d8>
 80070da:	2201      	movs	r2, #1
 80070dc:	e7e2      	b.n	80070a4 <_dtoa_r+0xa2c>
 80070de:	9b03      	ldr	r3, [sp, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	db04      	blt.n	80070ee <_dtoa_r+0xa76>
 80070e4:	9906      	ldr	r1, [sp, #24]
 80070e6:	430b      	orrs	r3, r1
 80070e8:	9904      	ldr	r1, [sp, #16]
 80070ea:	430b      	orrs	r3, r1
 80070ec:	d122      	bne.n	8007134 <_dtoa_r+0xabc>
 80070ee:	2a00      	cmp	r2, #0
 80070f0:	ddee      	ble.n	80070d0 <_dtoa_r+0xa58>
 80070f2:	ee18 1a10 	vmov	r1, s16
 80070f6:	2201      	movs	r2, #1
 80070f8:	4620      	mov	r0, r4
 80070fa:	f000 fce9 	bl	8007ad0 <__lshift>
 80070fe:	4631      	mov	r1, r6
 8007100:	ee08 0a10 	vmov	s16, r0
 8007104:	f000 fd54 	bl	8007bb0 <__mcmp>
 8007108:	2800      	cmp	r0, #0
 800710a:	dc03      	bgt.n	8007114 <_dtoa_r+0xa9c>
 800710c:	d1e0      	bne.n	80070d0 <_dtoa_r+0xa58>
 800710e:	f01a 0f01 	tst.w	sl, #1
 8007112:	d0dd      	beq.n	80070d0 <_dtoa_r+0xa58>
 8007114:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007118:	d1d7      	bne.n	80070ca <_dtoa_r+0xa52>
 800711a:	2339      	movs	r3, #57	; 0x39
 800711c:	f88b 3000 	strb.w	r3, [fp]
 8007120:	462b      	mov	r3, r5
 8007122:	461d      	mov	r5, r3
 8007124:	3b01      	subs	r3, #1
 8007126:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800712a:	2a39      	cmp	r2, #57	; 0x39
 800712c:	d071      	beq.n	8007212 <_dtoa_r+0xb9a>
 800712e:	3201      	adds	r2, #1
 8007130:	701a      	strb	r2, [r3, #0]
 8007132:	e746      	b.n	8006fc2 <_dtoa_r+0x94a>
 8007134:	2a00      	cmp	r2, #0
 8007136:	dd07      	ble.n	8007148 <_dtoa_r+0xad0>
 8007138:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800713c:	d0ed      	beq.n	800711a <_dtoa_r+0xaa2>
 800713e:	f10a 0301 	add.w	r3, sl, #1
 8007142:	f88b 3000 	strb.w	r3, [fp]
 8007146:	e73c      	b.n	8006fc2 <_dtoa_r+0x94a>
 8007148:	9b05      	ldr	r3, [sp, #20]
 800714a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800714e:	4599      	cmp	r9, r3
 8007150:	d047      	beq.n	80071e2 <_dtoa_r+0xb6a>
 8007152:	ee18 1a10 	vmov	r1, s16
 8007156:	2300      	movs	r3, #0
 8007158:	220a      	movs	r2, #10
 800715a:	4620      	mov	r0, r4
 800715c:	f000 fb08 	bl	8007770 <__multadd>
 8007160:	45b8      	cmp	r8, r7
 8007162:	ee08 0a10 	vmov	s16, r0
 8007166:	f04f 0300 	mov.w	r3, #0
 800716a:	f04f 020a 	mov.w	r2, #10
 800716e:	4641      	mov	r1, r8
 8007170:	4620      	mov	r0, r4
 8007172:	d106      	bne.n	8007182 <_dtoa_r+0xb0a>
 8007174:	f000 fafc 	bl	8007770 <__multadd>
 8007178:	4680      	mov	r8, r0
 800717a:	4607      	mov	r7, r0
 800717c:	f109 0901 	add.w	r9, r9, #1
 8007180:	e772      	b.n	8007068 <_dtoa_r+0x9f0>
 8007182:	f000 faf5 	bl	8007770 <__multadd>
 8007186:	4639      	mov	r1, r7
 8007188:	4680      	mov	r8, r0
 800718a:	2300      	movs	r3, #0
 800718c:	220a      	movs	r2, #10
 800718e:	4620      	mov	r0, r4
 8007190:	f000 faee 	bl	8007770 <__multadd>
 8007194:	4607      	mov	r7, r0
 8007196:	e7f1      	b.n	800717c <_dtoa_r+0xb04>
 8007198:	9b03      	ldr	r3, [sp, #12]
 800719a:	9302      	str	r3, [sp, #8]
 800719c:	9d01      	ldr	r5, [sp, #4]
 800719e:	ee18 0a10 	vmov	r0, s16
 80071a2:	4631      	mov	r1, r6
 80071a4:	f7ff f9da 	bl	800655c <quorem>
 80071a8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80071ac:	9b01      	ldr	r3, [sp, #4]
 80071ae:	f805 ab01 	strb.w	sl, [r5], #1
 80071b2:	1aea      	subs	r2, r5, r3
 80071b4:	9b02      	ldr	r3, [sp, #8]
 80071b6:	4293      	cmp	r3, r2
 80071b8:	dd09      	ble.n	80071ce <_dtoa_r+0xb56>
 80071ba:	ee18 1a10 	vmov	r1, s16
 80071be:	2300      	movs	r3, #0
 80071c0:	220a      	movs	r2, #10
 80071c2:	4620      	mov	r0, r4
 80071c4:	f000 fad4 	bl	8007770 <__multadd>
 80071c8:	ee08 0a10 	vmov	s16, r0
 80071cc:	e7e7      	b.n	800719e <_dtoa_r+0xb26>
 80071ce:	9b02      	ldr	r3, [sp, #8]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	bfc8      	it	gt
 80071d4:	461d      	movgt	r5, r3
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	bfd8      	it	le
 80071da:	2501      	movle	r5, #1
 80071dc:	441d      	add	r5, r3
 80071de:	f04f 0800 	mov.w	r8, #0
 80071e2:	ee18 1a10 	vmov	r1, s16
 80071e6:	2201      	movs	r2, #1
 80071e8:	4620      	mov	r0, r4
 80071ea:	f000 fc71 	bl	8007ad0 <__lshift>
 80071ee:	4631      	mov	r1, r6
 80071f0:	ee08 0a10 	vmov	s16, r0
 80071f4:	f000 fcdc 	bl	8007bb0 <__mcmp>
 80071f8:	2800      	cmp	r0, #0
 80071fa:	dc91      	bgt.n	8007120 <_dtoa_r+0xaa8>
 80071fc:	d102      	bne.n	8007204 <_dtoa_r+0xb8c>
 80071fe:	f01a 0f01 	tst.w	sl, #1
 8007202:	d18d      	bne.n	8007120 <_dtoa_r+0xaa8>
 8007204:	462b      	mov	r3, r5
 8007206:	461d      	mov	r5, r3
 8007208:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800720c:	2a30      	cmp	r2, #48	; 0x30
 800720e:	d0fa      	beq.n	8007206 <_dtoa_r+0xb8e>
 8007210:	e6d7      	b.n	8006fc2 <_dtoa_r+0x94a>
 8007212:	9a01      	ldr	r2, [sp, #4]
 8007214:	429a      	cmp	r2, r3
 8007216:	d184      	bne.n	8007122 <_dtoa_r+0xaaa>
 8007218:	9b00      	ldr	r3, [sp, #0]
 800721a:	3301      	adds	r3, #1
 800721c:	9300      	str	r3, [sp, #0]
 800721e:	2331      	movs	r3, #49	; 0x31
 8007220:	7013      	strb	r3, [r2, #0]
 8007222:	e6ce      	b.n	8006fc2 <_dtoa_r+0x94a>
 8007224:	4b09      	ldr	r3, [pc, #36]	; (800724c <_dtoa_r+0xbd4>)
 8007226:	f7ff ba95 	b.w	8006754 <_dtoa_r+0xdc>
 800722a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800722c:	2b00      	cmp	r3, #0
 800722e:	f47f aa6e 	bne.w	800670e <_dtoa_r+0x96>
 8007232:	4b07      	ldr	r3, [pc, #28]	; (8007250 <_dtoa_r+0xbd8>)
 8007234:	f7ff ba8e 	b.w	8006754 <_dtoa_r+0xdc>
 8007238:	9b02      	ldr	r3, [sp, #8]
 800723a:	2b00      	cmp	r3, #0
 800723c:	dcae      	bgt.n	800719c <_dtoa_r+0xb24>
 800723e:	9b06      	ldr	r3, [sp, #24]
 8007240:	2b02      	cmp	r3, #2
 8007242:	f73f aea8 	bgt.w	8006f96 <_dtoa_r+0x91e>
 8007246:	e7a9      	b.n	800719c <_dtoa_r+0xb24>
 8007248:	0800d297 	.word	0x0800d297
 800724c:	0800d1f4 	.word	0x0800d1f4
 8007250:	0800d218 	.word	0x0800d218

08007254 <__sflush_r>:
 8007254:	898a      	ldrh	r2, [r1, #12]
 8007256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725a:	4605      	mov	r5, r0
 800725c:	0710      	lsls	r0, r2, #28
 800725e:	460c      	mov	r4, r1
 8007260:	d458      	bmi.n	8007314 <__sflush_r+0xc0>
 8007262:	684b      	ldr	r3, [r1, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	dc05      	bgt.n	8007274 <__sflush_r+0x20>
 8007268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800726a:	2b00      	cmp	r3, #0
 800726c:	dc02      	bgt.n	8007274 <__sflush_r+0x20>
 800726e:	2000      	movs	r0, #0
 8007270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007276:	2e00      	cmp	r6, #0
 8007278:	d0f9      	beq.n	800726e <__sflush_r+0x1a>
 800727a:	2300      	movs	r3, #0
 800727c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007280:	682f      	ldr	r7, [r5, #0]
 8007282:	602b      	str	r3, [r5, #0]
 8007284:	d032      	beq.n	80072ec <__sflush_r+0x98>
 8007286:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	075a      	lsls	r2, r3, #29
 800728c:	d505      	bpl.n	800729a <__sflush_r+0x46>
 800728e:	6863      	ldr	r3, [r4, #4]
 8007290:	1ac0      	subs	r0, r0, r3
 8007292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007294:	b10b      	cbz	r3, 800729a <__sflush_r+0x46>
 8007296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007298:	1ac0      	subs	r0, r0, r3
 800729a:	2300      	movs	r3, #0
 800729c:	4602      	mov	r2, r0
 800729e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072a0:	6a21      	ldr	r1, [r4, #32]
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b0      	blx	r6
 80072a6:	1c43      	adds	r3, r0, #1
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	d106      	bne.n	80072ba <__sflush_r+0x66>
 80072ac:	6829      	ldr	r1, [r5, #0]
 80072ae:	291d      	cmp	r1, #29
 80072b0:	d82c      	bhi.n	800730c <__sflush_r+0xb8>
 80072b2:	4a2a      	ldr	r2, [pc, #168]	; (800735c <__sflush_r+0x108>)
 80072b4:	40ca      	lsrs	r2, r1
 80072b6:	07d6      	lsls	r6, r2, #31
 80072b8:	d528      	bpl.n	800730c <__sflush_r+0xb8>
 80072ba:	2200      	movs	r2, #0
 80072bc:	6062      	str	r2, [r4, #4]
 80072be:	04d9      	lsls	r1, r3, #19
 80072c0:	6922      	ldr	r2, [r4, #16]
 80072c2:	6022      	str	r2, [r4, #0]
 80072c4:	d504      	bpl.n	80072d0 <__sflush_r+0x7c>
 80072c6:	1c42      	adds	r2, r0, #1
 80072c8:	d101      	bne.n	80072ce <__sflush_r+0x7a>
 80072ca:	682b      	ldr	r3, [r5, #0]
 80072cc:	b903      	cbnz	r3, 80072d0 <__sflush_r+0x7c>
 80072ce:	6560      	str	r0, [r4, #84]	; 0x54
 80072d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80072d2:	602f      	str	r7, [r5, #0]
 80072d4:	2900      	cmp	r1, #0
 80072d6:	d0ca      	beq.n	800726e <__sflush_r+0x1a>
 80072d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80072dc:	4299      	cmp	r1, r3
 80072de:	d002      	beq.n	80072e6 <__sflush_r+0x92>
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 fd7d 	bl	8007de0 <_free_r>
 80072e6:	2000      	movs	r0, #0
 80072e8:	6360      	str	r0, [r4, #52]	; 0x34
 80072ea:	e7c1      	b.n	8007270 <__sflush_r+0x1c>
 80072ec:	6a21      	ldr	r1, [r4, #32]
 80072ee:	2301      	movs	r3, #1
 80072f0:	4628      	mov	r0, r5
 80072f2:	47b0      	blx	r6
 80072f4:	1c41      	adds	r1, r0, #1
 80072f6:	d1c7      	bne.n	8007288 <__sflush_r+0x34>
 80072f8:	682b      	ldr	r3, [r5, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0c4      	beq.n	8007288 <__sflush_r+0x34>
 80072fe:	2b1d      	cmp	r3, #29
 8007300:	d001      	beq.n	8007306 <__sflush_r+0xb2>
 8007302:	2b16      	cmp	r3, #22
 8007304:	d101      	bne.n	800730a <__sflush_r+0xb6>
 8007306:	602f      	str	r7, [r5, #0]
 8007308:	e7b1      	b.n	800726e <__sflush_r+0x1a>
 800730a:	89a3      	ldrh	r3, [r4, #12]
 800730c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007310:	81a3      	strh	r3, [r4, #12]
 8007312:	e7ad      	b.n	8007270 <__sflush_r+0x1c>
 8007314:	690f      	ldr	r7, [r1, #16]
 8007316:	2f00      	cmp	r7, #0
 8007318:	d0a9      	beq.n	800726e <__sflush_r+0x1a>
 800731a:	0793      	lsls	r3, r2, #30
 800731c:	680e      	ldr	r6, [r1, #0]
 800731e:	bf08      	it	eq
 8007320:	694b      	ldreq	r3, [r1, #20]
 8007322:	600f      	str	r7, [r1, #0]
 8007324:	bf18      	it	ne
 8007326:	2300      	movne	r3, #0
 8007328:	eba6 0807 	sub.w	r8, r6, r7
 800732c:	608b      	str	r3, [r1, #8]
 800732e:	f1b8 0f00 	cmp.w	r8, #0
 8007332:	dd9c      	ble.n	800726e <__sflush_r+0x1a>
 8007334:	6a21      	ldr	r1, [r4, #32]
 8007336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007338:	4643      	mov	r3, r8
 800733a:	463a      	mov	r2, r7
 800733c:	4628      	mov	r0, r5
 800733e:	47b0      	blx	r6
 8007340:	2800      	cmp	r0, #0
 8007342:	dc06      	bgt.n	8007352 <__sflush_r+0xfe>
 8007344:	89a3      	ldrh	r3, [r4, #12]
 8007346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	f04f 30ff 	mov.w	r0, #4294967295
 8007350:	e78e      	b.n	8007270 <__sflush_r+0x1c>
 8007352:	4407      	add	r7, r0
 8007354:	eba8 0800 	sub.w	r8, r8, r0
 8007358:	e7e9      	b.n	800732e <__sflush_r+0xda>
 800735a:	bf00      	nop
 800735c:	20400001 	.word	0x20400001

08007360 <_fflush_r>:
 8007360:	b538      	push	{r3, r4, r5, lr}
 8007362:	690b      	ldr	r3, [r1, #16]
 8007364:	4605      	mov	r5, r0
 8007366:	460c      	mov	r4, r1
 8007368:	b913      	cbnz	r3, 8007370 <_fflush_r+0x10>
 800736a:	2500      	movs	r5, #0
 800736c:	4628      	mov	r0, r5
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	b118      	cbz	r0, 800737a <_fflush_r+0x1a>
 8007372:	6983      	ldr	r3, [r0, #24]
 8007374:	b90b      	cbnz	r3, 800737a <_fflush_r+0x1a>
 8007376:	f000 f887 	bl	8007488 <__sinit>
 800737a:	4b14      	ldr	r3, [pc, #80]	; (80073cc <_fflush_r+0x6c>)
 800737c:	429c      	cmp	r4, r3
 800737e:	d11b      	bne.n	80073b8 <_fflush_r+0x58>
 8007380:	686c      	ldr	r4, [r5, #4]
 8007382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d0ef      	beq.n	800736a <_fflush_r+0xa>
 800738a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800738c:	07d0      	lsls	r0, r2, #31
 800738e:	d404      	bmi.n	800739a <_fflush_r+0x3a>
 8007390:	0599      	lsls	r1, r3, #22
 8007392:	d402      	bmi.n	800739a <_fflush_r+0x3a>
 8007394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007396:	f000 f91a 	bl	80075ce <__retarget_lock_acquire_recursive>
 800739a:	4628      	mov	r0, r5
 800739c:	4621      	mov	r1, r4
 800739e:	f7ff ff59 	bl	8007254 <__sflush_r>
 80073a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073a4:	07da      	lsls	r2, r3, #31
 80073a6:	4605      	mov	r5, r0
 80073a8:	d4e0      	bmi.n	800736c <_fflush_r+0xc>
 80073aa:	89a3      	ldrh	r3, [r4, #12]
 80073ac:	059b      	lsls	r3, r3, #22
 80073ae:	d4dd      	bmi.n	800736c <_fflush_r+0xc>
 80073b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073b2:	f000 f90d 	bl	80075d0 <__retarget_lock_release_recursive>
 80073b6:	e7d9      	b.n	800736c <_fflush_r+0xc>
 80073b8:	4b05      	ldr	r3, [pc, #20]	; (80073d0 <_fflush_r+0x70>)
 80073ba:	429c      	cmp	r4, r3
 80073bc:	d101      	bne.n	80073c2 <_fflush_r+0x62>
 80073be:	68ac      	ldr	r4, [r5, #8]
 80073c0:	e7df      	b.n	8007382 <_fflush_r+0x22>
 80073c2:	4b04      	ldr	r3, [pc, #16]	; (80073d4 <_fflush_r+0x74>)
 80073c4:	429c      	cmp	r4, r3
 80073c6:	bf08      	it	eq
 80073c8:	68ec      	ldreq	r4, [r5, #12]
 80073ca:	e7da      	b.n	8007382 <_fflush_r+0x22>
 80073cc:	0800d2c8 	.word	0x0800d2c8
 80073d0:	0800d2e8 	.word	0x0800d2e8
 80073d4:	0800d2a8 	.word	0x0800d2a8

080073d8 <std>:
 80073d8:	2300      	movs	r3, #0
 80073da:	b510      	push	{r4, lr}
 80073dc:	4604      	mov	r4, r0
 80073de:	e9c0 3300 	strd	r3, r3, [r0]
 80073e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073e6:	6083      	str	r3, [r0, #8]
 80073e8:	8181      	strh	r1, [r0, #12]
 80073ea:	6643      	str	r3, [r0, #100]	; 0x64
 80073ec:	81c2      	strh	r2, [r0, #14]
 80073ee:	6183      	str	r3, [r0, #24]
 80073f0:	4619      	mov	r1, r3
 80073f2:	2208      	movs	r2, #8
 80073f4:	305c      	adds	r0, #92	; 0x5c
 80073f6:	f7fe fb09 	bl	8005a0c <memset>
 80073fa:	4b05      	ldr	r3, [pc, #20]	; (8007410 <std+0x38>)
 80073fc:	6263      	str	r3, [r4, #36]	; 0x24
 80073fe:	4b05      	ldr	r3, [pc, #20]	; (8007414 <std+0x3c>)
 8007400:	62a3      	str	r3, [r4, #40]	; 0x28
 8007402:	4b05      	ldr	r3, [pc, #20]	; (8007418 <std+0x40>)
 8007404:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <std+0x44>)
 8007408:	6224      	str	r4, [r4, #32]
 800740a:	6323      	str	r3, [r4, #48]	; 0x30
 800740c:	bd10      	pop	{r4, pc}
 800740e:	bf00      	nop
 8007410:	08007fc1 	.word	0x08007fc1
 8007414:	08007fe3 	.word	0x08007fe3
 8007418:	0800801b 	.word	0x0800801b
 800741c:	0800803f 	.word	0x0800803f

08007420 <_cleanup_r>:
 8007420:	4901      	ldr	r1, [pc, #4]	; (8007428 <_cleanup_r+0x8>)
 8007422:	f000 b8af 	b.w	8007584 <_fwalk_reent>
 8007426:	bf00      	nop
 8007428:	08007361 	.word	0x08007361

0800742c <__sfmoreglue>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	2268      	movs	r2, #104	; 0x68
 8007430:	1e4d      	subs	r5, r1, #1
 8007432:	4355      	muls	r5, r2
 8007434:	460e      	mov	r6, r1
 8007436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800743a:	f000 fd3d 	bl	8007eb8 <_malloc_r>
 800743e:	4604      	mov	r4, r0
 8007440:	b140      	cbz	r0, 8007454 <__sfmoreglue+0x28>
 8007442:	2100      	movs	r1, #0
 8007444:	e9c0 1600 	strd	r1, r6, [r0]
 8007448:	300c      	adds	r0, #12
 800744a:	60a0      	str	r0, [r4, #8]
 800744c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007450:	f7fe fadc 	bl	8005a0c <memset>
 8007454:	4620      	mov	r0, r4
 8007456:	bd70      	pop	{r4, r5, r6, pc}

08007458 <__sfp_lock_acquire>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__sfp_lock_acquire+0x8>)
 800745a:	f000 b8b8 	b.w	80075ce <__retarget_lock_acquire_recursive>
 800745e:	bf00      	nop
 8007460:	20007c3d 	.word	0x20007c3d

08007464 <__sfp_lock_release>:
 8007464:	4801      	ldr	r0, [pc, #4]	; (800746c <__sfp_lock_release+0x8>)
 8007466:	f000 b8b3 	b.w	80075d0 <__retarget_lock_release_recursive>
 800746a:	bf00      	nop
 800746c:	20007c3d 	.word	0x20007c3d

08007470 <__sinit_lock_acquire>:
 8007470:	4801      	ldr	r0, [pc, #4]	; (8007478 <__sinit_lock_acquire+0x8>)
 8007472:	f000 b8ac 	b.w	80075ce <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	20007c3e 	.word	0x20007c3e

0800747c <__sinit_lock_release>:
 800747c:	4801      	ldr	r0, [pc, #4]	; (8007484 <__sinit_lock_release+0x8>)
 800747e:	f000 b8a7 	b.w	80075d0 <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	20007c3e 	.word	0x20007c3e

08007488 <__sinit>:
 8007488:	b510      	push	{r4, lr}
 800748a:	4604      	mov	r4, r0
 800748c:	f7ff fff0 	bl	8007470 <__sinit_lock_acquire>
 8007490:	69a3      	ldr	r3, [r4, #24]
 8007492:	b11b      	cbz	r3, 800749c <__sinit+0x14>
 8007494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007498:	f7ff bff0 	b.w	800747c <__sinit_lock_release>
 800749c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074a0:	6523      	str	r3, [r4, #80]	; 0x50
 80074a2:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <__sinit+0x68>)
 80074a4:	4a13      	ldr	r2, [pc, #76]	; (80074f4 <__sinit+0x6c>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80074aa:	42a3      	cmp	r3, r4
 80074ac:	bf04      	itt	eq
 80074ae:	2301      	moveq	r3, #1
 80074b0:	61a3      	streq	r3, [r4, #24]
 80074b2:	4620      	mov	r0, r4
 80074b4:	f000 f820 	bl	80074f8 <__sfp>
 80074b8:	6060      	str	r0, [r4, #4]
 80074ba:	4620      	mov	r0, r4
 80074bc:	f000 f81c 	bl	80074f8 <__sfp>
 80074c0:	60a0      	str	r0, [r4, #8]
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 f818 	bl	80074f8 <__sfp>
 80074c8:	2200      	movs	r2, #0
 80074ca:	60e0      	str	r0, [r4, #12]
 80074cc:	2104      	movs	r1, #4
 80074ce:	6860      	ldr	r0, [r4, #4]
 80074d0:	f7ff ff82 	bl	80073d8 <std>
 80074d4:	68a0      	ldr	r0, [r4, #8]
 80074d6:	2201      	movs	r2, #1
 80074d8:	2109      	movs	r1, #9
 80074da:	f7ff ff7d 	bl	80073d8 <std>
 80074de:	68e0      	ldr	r0, [r4, #12]
 80074e0:	2202      	movs	r2, #2
 80074e2:	2112      	movs	r1, #18
 80074e4:	f7ff ff78 	bl	80073d8 <std>
 80074e8:	2301      	movs	r3, #1
 80074ea:	61a3      	str	r3, [r4, #24]
 80074ec:	e7d2      	b.n	8007494 <__sinit+0xc>
 80074ee:	bf00      	nop
 80074f0:	0800d1e0 	.word	0x0800d1e0
 80074f4:	08007421 	.word	0x08007421

080074f8 <__sfp>:
 80074f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074fa:	4607      	mov	r7, r0
 80074fc:	f7ff ffac 	bl	8007458 <__sfp_lock_acquire>
 8007500:	4b1e      	ldr	r3, [pc, #120]	; (800757c <__sfp+0x84>)
 8007502:	681e      	ldr	r6, [r3, #0]
 8007504:	69b3      	ldr	r3, [r6, #24]
 8007506:	b913      	cbnz	r3, 800750e <__sfp+0x16>
 8007508:	4630      	mov	r0, r6
 800750a:	f7ff ffbd 	bl	8007488 <__sinit>
 800750e:	3648      	adds	r6, #72	; 0x48
 8007510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007514:	3b01      	subs	r3, #1
 8007516:	d503      	bpl.n	8007520 <__sfp+0x28>
 8007518:	6833      	ldr	r3, [r6, #0]
 800751a:	b30b      	cbz	r3, 8007560 <__sfp+0x68>
 800751c:	6836      	ldr	r6, [r6, #0]
 800751e:	e7f7      	b.n	8007510 <__sfp+0x18>
 8007520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007524:	b9d5      	cbnz	r5, 800755c <__sfp+0x64>
 8007526:	4b16      	ldr	r3, [pc, #88]	; (8007580 <__sfp+0x88>)
 8007528:	60e3      	str	r3, [r4, #12]
 800752a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800752e:	6665      	str	r5, [r4, #100]	; 0x64
 8007530:	f000 f84c 	bl	80075cc <__retarget_lock_init_recursive>
 8007534:	f7ff ff96 	bl	8007464 <__sfp_lock_release>
 8007538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800753c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007540:	6025      	str	r5, [r4, #0]
 8007542:	61a5      	str	r5, [r4, #24]
 8007544:	2208      	movs	r2, #8
 8007546:	4629      	mov	r1, r5
 8007548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800754c:	f7fe fa5e 	bl	8005a0c <memset>
 8007550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007558:	4620      	mov	r0, r4
 800755a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800755c:	3468      	adds	r4, #104	; 0x68
 800755e:	e7d9      	b.n	8007514 <__sfp+0x1c>
 8007560:	2104      	movs	r1, #4
 8007562:	4638      	mov	r0, r7
 8007564:	f7ff ff62 	bl	800742c <__sfmoreglue>
 8007568:	4604      	mov	r4, r0
 800756a:	6030      	str	r0, [r6, #0]
 800756c:	2800      	cmp	r0, #0
 800756e:	d1d5      	bne.n	800751c <__sfp+0x24>
 8007570:	f7ff ff78 	bl	8007464 <__sfp_lock_release>
 8007574:	230c      	movs	r3, #12
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	e7ee      	b.n	8007558 <__sfp+0x60>
 800757a:	bf00      	nop
 800757c:	0800d1e0 	.word	0x0800d1e0
 8007580:	ffff0001 	.word	0xffff0001

08007584 <_fwalk_reent>:
 8007584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007588:	4606      	mov	r6, r0
 800758a:	4688      	mov	r8, r1
 800758c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007590:	2700      	movs	r7, #0
 8007592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007596:	f1b9 0901 	subs.w	r9, r9, #1
 800759a:	d505      	bpl.n	80075a8 <_fwalk_reent+0x24>
 800759c:	6824      	ldr	r4, [r4, #0]
 800759e:	2c00      	cmp	r4, #0
 80075a0:	d1f7      	bne.n	8007592 <_fwalk_reent+0xe>
 80075a2:	4638      	mov	r0, r7
 80075a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a8:	89ab      	ldrh	r3, [r5, #12]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d907      	bls.n	80075be <_fwalk_reent+0x3a>
 80075ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075b2:	3301      	adds	r3, #1
 80075b4:	d003      	beq.n	80075be <_fwalk_reent+0x3a>
 80075b6:	4629      	mov	r1, r5
 80075b8:	4630      	mov	r0, r6
 80075ba:	47c0      	blx	r8
 80075bc:	4307      	orrs	r7, r0
 80075be:	3568      	adds	r5, #104	; 0x68
 80075c0:	e7e9      	b.n	8007596 <_fwalk_reent+0x12>
	...

080075c4 <_localeconv_r>:
 80075c4:	4800      	ldr	r0, [pc, #0]	; (80075c8 <_localeconv_r+0x4>)
 80075c6:	4770      	bx	lr
 80075c8:	20000170 	.word	0x20000170

080075cc <__retarget_lock_init_recursive>:
 80075cc:	4770      	bx	lr

080075ce <__retarget_lock_acquire_recursive>:
 80075ce:	4770      	bx	lr

080075d0 <__retarget_lock_release_recursive>:
 80075d0:	4770      	bx	lr

080075d2 <__swhatbuf_r>:
 80075d2:	b570      	push	{r4, r5, r6, lr}
 80075d4:	460e      	mov	r6, r1
 80075d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075da:	2900      	cmp	r1, #0
 80075dc:	b096      	sub	sp, #88	; 0x58
 80075de:	4614      	mov	r4, r2
 80075e0:	461d      	mov	r5, r3
 80075e2:	da08      	bge.n	80075f6 <__swhatbuf_r+0x24>
 80075e4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80075e8:	2200      	movs	r2, #0
 80075ea:	602a      	str	r2, [r5, #0]
 80075ec:	061a      	lsls	r2, r3, #24
 80075ee:	d410      	bmi.n	8007612 <__swhatbuf_r+0x40>
 80075f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075f4:	e00e      	b.n	8007614 <__swhatbuf_r+0x42>
 80075f6:	466a      	mov	r2, sp
 80075f8:	f000 fd78 	bl	80080ec <_fstat_r>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	dbf1      	blt.n	80075e4 <__swhatbuf_r+0x12>
 8007600:	9a01      	ldr	r2, [sp, #4]
 8007602:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007606:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800760a:	425a      	negs	r2, r3
 800760c:	415a      	adcs	r2, r3
 800760e:	602a      	str	r2, [r5, #0]
 8007610:	e7ee      	b.n	80075f0 <__swhatbuf_r+0x1e>
 8007612:	2340      	movs	r3, #64	; 0x40
 8007614:	2000      	movs	r0, #0
 8007616:	6023      	str	r3, [r4, #0]
 8007618:	b016      	add	sp, #88	; 0x58
 800761a:	bd70      	pop	{r4, r5, r6, pc}

0800761c <__smakebuf_r>:
 800761c:	898b      	ldrh	r3, [r1, #12]
 800761e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007620:	079d      	lsls	r5, r3, #30
 8007622:	4606      	mov	r6, r0
 8007624:	460c      	mov	r4, r1
 8007626:	d507      	bpl.n	8007638 <__smakebuf_r+0x1c>
 8007628:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	6123      	str	r3, [r4, #16]
 8007630:	2301      	movs	r3, #1
 8007632:	6163      	str	r3, [r4, #20]
 8007634:	b002      	add	sp, #8
 8007636:	bd70      	pop	{r4, r5, r6, pc}
 8007638:	ab01      	add	r3, sp, #4
 800763a:	466a      	mov	r2, sp
 800763c:	f7ff ffc9 	bl	80075d2 <__swhatbuf_r>
 8007640:	9900      	ldr	r1, [sp, #0]
 8007642:	4605      	mov	r5, r0
 8007644:	4630      	mov	r0, r6
 8007646:	f000 fc37 	bl	8007eb8 <_malloc_r>
 800764a:	b948      	cbnz	r0, 8007660 <__smakebuf_r+0x44>
 800764c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007650:	059a      	lsls	r2, r3, #22
 8007652:	d4ef      	bmi.n	8007634 <__smakebuf_r+0x18>
 8007654:	f023 0303 	bic.w	r3, r3, #3
 8007658:	f043 0302 	orr.w	r3, r3, #2
 800765c:	81a3      	strh	r3, [r4, #12]
 800765e:	e7e3      	b.n	8007628 <__smakebuf_r+0xc>
 8007660:	4b0d      	ldr	r3, [pc, #52]	; (8007698 <__smakebuf_r+0x7c>)
 8007662:	62b3      	str	r3, [r6, #40]	; 0x28
 8007664:	89a3      	ldrh	r3, [r4, #12]
 8007666:	6020      	str	r0, [r4, #0]
 8007668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800766c:	81a3      	strh	r3, [r4, #12]
 800766e:	9b00      	ldr	r3, [sp, #0]
 8007670:	6163      	str	r3, [r4, #20]
 8007672:	9b01      	ldr	r3, [sp, #4]
 8007674:	6120      	str	r0, [r4, #16]
 8007676:	b15b      	cbz	r3, 8007690 <__smakebuf_r+0x74>
 8007678:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800767c:	4630      	mov	r0, r6
 800767e:	f000 fd47 	bl	8008110 <_isatty_r>
 8007682:	b128      	cbz	r0, 8007690 <__smakebuf_r+0x74>
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f023 0303 	bic.w	r3, r3, #3
 800768a:	f043 0301 	orr.w	r3, r3, #1
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	89a0      	ldrh	r0, [r4, #12]
 8007692:	4305      	orrs	r5, r0
 8007694:	81a5      	strh	r5, [r4, #12]
 8007696:	e7cd      	b.n	8007634 <__smakebuf_r+0x18>
 8007698:	08007421 	.word	0x08007421

0800769c <malloc>:
 800769c:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <malloc+0xc>)
 800769e:	4601      	mov	r1, r0
 80076a0:	6818      	ldr	r0, [r3, #0]
 80076a2:	f000 bc09 	b.w	8007eb8 <_malloc_r>
 80076a6:	bf00      	nop
 80076a8:	2000001c 	.word	0x2000001c

080076ac <_Balloc>:
 80076ac:	b570      	push	{r4, r5, r6, lr}
 80076ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80076b0:	4604      	mov	r4, r0
 80076b2:	460d      	mov	r5, r1
 80076b4:	b976      	cbnz	r6, 80076d4 <_Balloc+0x28>
 80076b6:	2010      	movs	r0, #16
 80076b8:	f7ff fff0 	bl	800769c <malloc>
 80076bc:	4602      	mov	r2, r0
 80076be:	6260      	str	r0, [r4, #36]	; 0x24
 80076c0:	b920      	cbnz	r0, 80076cc <_Balloc+0x20>
 80076c2:	4b18      	ldr	r3, [pc, #96]	; (8007724 <_Balloc+0x78>)
 80076c4:	4818      	ldr	r0, [pc, #96]	; (8007728 <_Balloc+0x7c>)
 80076c6:	2166      	movs	r1, #102	; 0x66
 80076c8:	f000 fcd0 	bl	800806c <__assert_func>
 80076cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80076d0:	6006      	str	r6, [r0, #0]
 80076d2:	60c6      	str	r6, [r0, #12]
 80076d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80076d6:	68f3      	ldr	r3, [r6, #12]
 80076d8:	b183      	cbz	r3, 80076fc <_Balloc+0x50>
 80076da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80076e2:	b9b8      	cbnz	r0, 8007714 <_Balloc+0x68>
 80076e4:	2101      	movs	r1, #1
 80076e6:	fa01 f605 	lsl.w	r6, r1, r5
 80076ea:	1d72      	adds	r2, r6, #5
 80076ec:	0092      	lsls	r2, r2, #2
 80076ee:	4620      	mov	r0, r4
 80076f0:	f000 fb60 	bl	8007db4 <_calloc_r>
 80076f4:	b160      	cbz	r0, 8007710 <_Balloc+0x64>
 80076f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80076fa:	e00e      	b.n	800771a <_Balloc+0x6e>
 80076fc:	2221      	movs	r2, #33	; 0x21
 80076fe:	2104      	movs	r1, #4
 8007700:	4620      	mov	r0, r4
 8007702:	f000 fb57 	bl	8007db4 <_calloc_r>
 8007706:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007708:	60f0      	str	r0, [r6, #12]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e4      	bne.n	80076da <_Balloc+0x2e>
 8007710:	2000      	movs	r0, #0
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	6802      	ldr	r2, [r0, #0]
 8007716:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800771a:	2300      	movs	r3, #0
 800771c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007720:	e7f7      	b.n	8007712 <_Balloc+0x66>
 8007722:	bf00      	nop
 8007724:	0800d225 	.word	0x0800d225
 8007728:	0800d308 	.word	0x0800d308

0800772c <_Bfree>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007730:	4605      	mov	r5, r0
 8007732:	460c      	mov	r4, r1
 8007734:	b976      	cbnz	r6, 8007754 <_Bfree+0x28>
 8007736:	2010      	movs	r0, #16
 8007738:	f7ff ffb0 	bl	800769c <malloc>
 800773c:	4602      	mov	r2, r0
 800773e:	6268      	str	r0, [r5, #36]	; 0x24
 8007740:	b920      	cbnz	r0, 800774c <_Bfree+0x20>
 8007742:	4b09      	ldr	r3, [pc, #36]	; (8007768 <_Bfree+0x3c>)
 8007744:	4809      	ldr	r0, [pc, #36]	; (800776c <_Bfree+0x40>)
 8007746:	218a      	movs	r1, #138	; 0x8a
 8007748:	f000 fc90 	bl	800806c <__assert_func>
 800774c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007750:	6006      	str	r6, [r0, #0]
 8007752:	60c6      	str	r6, [r0, #12]
 8007754:	b13c      	cbz	r4, 8007766 <_Bfree+0x3a>
 8007756:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007758:	6862      	ldr	r2, [r4, #4]
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007760:	6021      	str	r1, [r4, #0]
 8007762:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007766:	bd70      	pop	{r4, r5, r6, pc}
 8007768:	0800d225 	.word	0x0800d225
 800776c:	0800d308 	.word	0x0800d308

08007770 <__multadd>:
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	690d      	ldr	r5, [r1, #16]
 8007776:	4607      	mov	r7, r0
 8007778:	460c      	mov	r4, r1
 800777a:	461e      	mov	r6, r3
 800777c:	f101 0c14 	add.w	ip, r1, #20
 8007780:	2000      	movs	r0, #0
 8007782:	f8dc 3000 	ldr.w	r3, [ip]
 8007786:	b299      	uxth	r1, r3
 8007788:	fb02 6101 	mla	r1, r2, r1, r6
 800778c:	0c1e      	lsrs	r6, r3, #16
 800778e:	0c0b      	lsrs	r3, r1, #16
 8007790:	fb02 3306 	mla	r3, r2, r6, r3
 8007794:	b289      	uxth	r1, r1
 8007796:	3001      	adds	r0, #1
 8007798:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800779c:	4285      	cmp	r5, r0
 800779e:	f84c 1b04 	str.w	r1, [ip], #4
 80077a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80077a6:	dcec      	bgt.n	8007782 <__multadd+0x12>
 80077a8:	b30e      	cbz	r6, 80077ee <__multadd+0x7e>
 80077aa:	68a3      	ldr	r3, [r4, #8]
 80077ac:	42ab      	cmp	r3, r5
 80077ae:	dc19      	bgt.n	80077e4 <__multadd+0x74>
 80077b0:	6861      	ldr	r1, [r4, #4]
 80077b2:	4638      	mov	r0, r7
 80077b4:	3101      	adds	r1, #1
 80077b6:	f7ff ff79 	bl	80076ac <_Balloc>
 80077ba:	4680      	mov	r8, r0
 80077bc:	b928      	cbnz	r0, 80077ca <__multadd+0x5a>
 80077be:	4602      	mov	r2, r0
 80077c0:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <__multadd+0x84>)
 80077c2:	480d      	ldr	r0, [pc, #52]	; (80077f8 <__multadd+0x88>)
 80077c4:	21b5      	movs	r1, #181	; 0xb5
 80077c6:	f000 fc51 	bl	800806c <__assert_func>
 80077ca:	6922      	ldr	r2, [r4, #16]
 80077cc:	3202      	adds	r2, #2
 80077ce:	f104 010c 	add.w	r1, r4, #12
 80077d2:	0092      	lsls	r2, r2, #2
 80077d4:	300c      	adds	r0, #12
 80077d6:	f7fe f90b 	bl	80059f0 <memcpy>
 80077da:	4621      	mov	r1, r4
 80077dc:	4638      	mov	r0, r7
 80077de:	f7ff ffa5 	bl	800772c <_Bfree>
 80077e2:	4644      	mov	r4, r8
 80077e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80077e8:	3501      	adds	r5, #1
 80077ea:	615e      	str	r6, [r3, #20]
 80077ec:	6125      	str	r5, [r4, #16]
 80077ee:	4620      	mov	r0, r4
 80077f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077f4:	0800d297 	.word	0x0800d297
 80077f8:	0800d308 	.word	0x0800d308

080077fc <__hi0bits>:
 80077fc:	0c03      	lsrs	r3, r0, #16
 80077fe:	041b      	lsls	r3, r3, #16
 8007800:	b9d3      	cbnz	r3, 8007838 <__hi0bits+0x3c>
 8007802:	0400      	lsls	r0, r0, #16
 8007804:	2310      	movs	r3, #16
 8007806:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800780a:	bf04      	itt	eq
 800780c:	0200      	lsleq	r0, r0, #8
 800780e:	3308      	addeq	r3, #8
 8007810:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007814:	bf04      	itt	eq
 8007816:	0100      	lsleq	r0, r0, #4
 8007818:	3304      	addeq	r3, #4
 800781a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800781e:	bf04      	itt	eq
 8007820:	0080      	lsleq	r0, r0, #2
 8007822:	3302      	addeq	r3, #2
 8007824:	2800      	cmp	r0, #0
 8007826:	db05      	blt.n	8007834 <__hi0bits+0x38>
 8007828:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800782c:	f103 0301 	add.w	r3, r3, #1
 8007830:	bf08      	it	eq
 8007832:	2320      	moveq	r3, #32
 8007834:	4618      	mov	r0, r3
 8007836:	4770      	bx	lr
 8007838:	2300      	movs	r3, #0
 800783a:	e7e4      	b.n	8007806 <__hi0bits+0xa>

0800783c <__lo0bits>:
 800783c:	6803      	ldr	r3, [r0, #0]
 800783e:	f013 0207 	ands.w	r2, r3, #7
 8007842:	4601      	mov	r1, r0
 8007844:	d00b      	beq.n	800785e <__lo0bits+0x22>
 8007846:	07da      	lsls	r2, r3, #31
 8007848:	d423      	bmi.n	8007892 <__lo0bits+0x56>
 800784a:	0798      	lsls	r0, r3, #30
 800784c:	bf49      	itett	mi
 800784e:	085b      	lsrmi	r3, r3, #1
 8007850:	089b      	lsrpl	r3, r3, #2
 8007852:	2001      	movmi	r0, #1
 8007854:	600b      	strmi	r3, [r1, #0]
 8007856:	bf5c      	itt	pl
 8007858:	600b      	strpl	r3, [r1, #0]
 800785a:	2002      	movpl	r0, #2
 800785c:	4770      	bx	lr
 800785e:	b298      	uxth	r0, r3
 8007860:	b9a8      	cbnz	r0, 800788e <__lo0bits+0x52>
 8007862:	0c1b      	lsrs	r3, r3, #16
 8007864:	2010      	movs	r0, #16
 8007866:	b2da      	uxtb	r2, r3
 8007868:	b90a      	cbnz	r2, 800786e <__lo0bits+0x32>
 800786a:	3008      	adds	r0, #8
 800786c:	0a1b      	lsrs	r3, r3, #8
 800786e:	071a      	lsls	r2, r3, #28
 8007870:	bf04      	itt	eq
 8007872:	091b      	lsreq	r3, r3, #4
 8007874:	3004      	addeq	r0, #4
 8007876:	079a      	lsls	r2, r3, #30
 8007878:	bf04      	itt	eq
 800787a:	089b      	lsreq	r3, r3, #2
 800787c:	3002      	addeq	r0, #2
 800787e:	07da      	lsls	r2, r3, #31
 8007880:	d403      	bmi.n	800788a <__lo0bits+0x4e>
 8007882:	085b      	lsrs	r3, r3, #1
 8007884:	f100 0001 	add.w	r0, r0, #1
 8007888:	d005      	beq.n	8007896 <__lo0bits+0x5a>
 800788a:	600b      	str	r3, [r1, #0]
 800788c:	4770      	bx	lr
 800788e:	4610      	mov	r0, r2
 8007890:	e7e9      	b.n	8007866 <__lo0bits+0x2a>
 8007892:	2000      	movs	r0, #0
 8007894:	4770      	bx	lr
 8007896:	2020      	movs	r0, #32
 8007898:	4770      	bx	lr
	...

0800789c <__i2b>:
 800789c:	b510      	push	{r4, lr}
 800789e:	460c      	mov	r4, r1
 80078a0:	2101      	movs	r1, #1
 80078a2:	f7ff ff03 	bl	80076ac <_Balloc>
 80078a6:	4602      	mov	r2, r0
 80078a8:	b928      	cbnz	r0, 80078b6 <__i2b+0x1a>
 80078aa:	4b05      	ldr	r3, [pc, #20]	; (80078c0 <__i2b+0x24>)
 80078ac:	4805      	ldr	r0, [pc, #20]	; (80078c4 <__i2b+0x28>)
 80078ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80078b2:	f000 fbdb 	bl	800806c <__assert_func>
 80078b6:	2301      	movs	r3, #1
 80078b8:	6144      	str	r4, [r0, #20]
 80078ba:	6103      	str	r3, [r0, #16]
 80078bc:	bd10      	pop	{r4, pc}
 80078be:	bf00      	nop
 80078c0:	0800d297 	.word	0x0800d297
 80078c4:	0800d308 	.word	0x0800d308

080078c8 <__multiply>:
 80078c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078cc:	4691      	mov	r9, r2
 80078ce:	690a      	ldr	r2, [r1, #16]
 80078d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80078d4:	429a      	cmp	r2, r3
 80078d6:	bfb8      	it	lt
 80078d8:	460b      	movlt	r3, r1
 80078da:	460c      	mov	r4, r1
 80078dc:	bfbc      	itt	lt
 80078de:	464c      	movlt	r4, r9
 80078e0:	4699      	movlt	r9, r3
 80078e2:	6927      	ldr	r7, [r4, #16]
 80078e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80078e8:	68a3      	ldr	r3, [r4, #8]
 80078ea:	6861      	ldr	r1, [r4, #4]
 80078ec:	eb07 060a 	add.w	r6, r7, sl
 80078f0:	42b3      	cmp	r3, r6
 80078f2:	b085      	sub	sp, #20
 80078f4:	bfb8      	it	lt
 80078f6:	3101      	addlt	r1, #1
 80078f8:	f7ff fed8 	bl	80076ac <_Balloc>
 80078fc:	b930      	cbnz	r0, 800790c <__multiply+0x44>
 80078fe:	4602      	mov	r2, r0
 8007900:	4b44      	ldr	r3, [pc, #272]	; (8007a14 <__multiply+0x14c>)
 8007902:	4845      	ldr	r0, [pc, #276]	; (8007a18 <__multiply+0x150>)
 8007904:	f240 115d 	movw	r1, #349	; 0x15d
 8007908:	f000 fbb0 	bl	800806c <__assert_func>
 800790c:	f100 0514 	add.w	r5, r0, #20
 8007910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007914:	462b      	mov	r3, r5
 8007916:	2200      	movs	r2, #0
 8007918:	4543      	cmp	r3, r8
 800791a:	d321      	bcc.n	8007960 <__multiply+0x98>
 800791c:	f104 0314 	add.w	r3, r4, #20
 8007920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007924:	f109 0314 	add.w	r3, r9, #20
 8007928:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800792c:	9202      	str	r2, [sp, #8]
 800792e:	1b3a      	subs	r2, r7, r4
 8007930:	3a15      	subs	r2, #21
 8007932:	f022 0203 	bic.w	r2, r2, #3
 8007936:	3204      	adds	r2, #4
 8007938:	f104 0115 	add.w	r1, r4, #21
 800793c:	428f      	cmp	r7, r1
 800793e:	bf38      	it	cc
 8007940:	2204      	movcc	r2, #4
 8007942:	9201      	str	r2, [sp, #4]
 8007944:	9a02      	ldr	r2, [sp, #8]
 8007946:	9303      	str	r3, [sp, #12]
 8007948:	429a      	cmp	r2, r3
 800794a:	d80c      	bhi.n	8007966 <__multiply+0x9e>
 800794c:	2e00      	cmp	r6, #0
 800794e:	dd03      	ble.n	8007958 <__multiply+0x90>
 8007950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007954:	2b00      	cmp	r3, #0
 8007956:	d05a      	beq.n	8007a0e <__multiply+0x146>
 8007958:	6106      	str	r6, [r0, #16]
 800795a:	b005      	add	sp, #20
 800795c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007960:	f843 2b04 	str.w	r2, [r3], #4
 8007964:	e7d8      	b.n	8007918 <__multiply+0x50>
 8007966:	f8b3 a000 	ldrh.w	sl, [r3]
 800796a:	f1ba 0f00 	cmp.w	sl, #0
 800796e:	d024      	beq.n	80079ba <__multiply+0xf2>
 8007970:	f104 0e14 	add.w	lr, r4, #20
 8007974:	46a9      	mov	r9, r5
 8007976:	f04f 0c00 	mov.w	ip, #0
 800797a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800797e:	f8d9 1000 	ldr.w	r1, [r9]
 8007982:	fa1f fb82 	uxth.w	fp, r2
 8007986:	b289      	uxth	r1, r1
 8007988:	fb0a 110b 	mla	r1, sl, fp, r1
 800798c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007990:	f8d9 2000 	ldr.w	r2, [r9]
 8007994:	4461      	add	r1, ip
 8007996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800799a:	fb0a c20b 	mla	r2, sl, fp, ip
 800799e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80079a2:	b289      	uxth	r1, r1
 80079a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80079a8:	4577      	cmp	r7, lr
 80079aa:	f849 1b04 	str.w	r1, [r9], #4
 80079ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80079b2:	d8e2      	bhi.n	800797a <__multiply+0xb2>
 80079b4:	9a01      	ldr	r2, [sp, #4]
 80079b6:	f845 c002 	str.w	ip, [r5, r2]
 80079ba:	9a03      	ldr	r2, [sp, #12]
 80079bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80079c0:	3304      	adds	r3, #4
 80079c2:	f1b9 0f00 	cmp.w	r9, #0
 80079c6:	d020      	beq.n	8007a0a <__multiply+0x142>
 80079c8:	6829      	ldr	r1, [r5, #0]
 80079ca:	f104 0c14 	add.w	ip, r4, #20
 80079ce:	46ae      	mov	lr, r5
 80079d0:	f04f 0a00 	mov.w	sl, #0
 80079d4:	f8bc b000 	ldrh.w	fp, [ip]
 80079d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80079dc:	fb09 220b 	mla	r2, r9, fp, r2
 80079e0:	4492      	add	sl, r2
 80079e2:	b289      	uxth	r1, r1
 80079e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80079e8:	f84e 1b04 	str.w	r1, [lr], #4
 80079ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80079f0:	f8be 1000 	ldrh.w	r1, [lr]
 80079f4:	0c12      	lsrs	r2, r2, #16
 80079f6:	fb09 1102 	mla	r1, r9, r2, r1
 80079fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80079fe:	4567      	cmp	r7, ip
 8007a00:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007a04:	d8e6      	bhi.n	80079d4 <__multiply+0x10c>
 8007a06:	9a01      	ldr	r2, [sp, #4]
 8007a08:	50a9      	str	r1, [r5, r2]
 8007a0a:	3504      	adds	r5, #4
 8007a0c:	e79a      	b.n	8007944 <__multiply+0x7c>
 8007a0e:	3e01      	subs	r6, #1
 8007a10:	e79c      	b.n	800794c <__multiply+0x84>
 8007a12:	bf00      	nop
 8007a14:	0800d297 	.word	0x0800d297
 8007a18:	0800d308 	.word	0x0800d308

08007a1c <__pow5mult>:
 8007a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a20:	4615      	mov	r5, r2
 8007a22:	f012 0203 	ands.w	r2, r2, #3
 8007a26:	4606      	mov	r6, r0
 8007a28:	460f      	mov	r7, r1
 8007a2a:	d007      	beq.n	8007a3c <__pow5mult+0x20>
 8007a2c:	4c25      	ldr	r4, [pc, #148]	; (8007ac4 <__pow5mult+0xa8>)
 8007a2e:	3a01      	subs	r2, #1
 8007a30:	2300      	movs	r3, #0
 8007a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007a36:	f7ff fe9b 	bl	8007770 <__multadd>
 8007a3a:	4607      	mov	r7, r0
 8007a3c:	10ad      	asrs	r5, r5, #2
 8007a3e:	d03d      	beq.n	8007abc <__pow5mult+0xa0>
 8007a40:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007a42:	b97c      	cbnz	r4, 8007a64 <__pow5mult+0x48>
 8007a44:	2010      	movs	r0, #16
 8007a46:	f7ff fe29 	bl	800769c <malloc>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	6270      	str	r0, [r6, #36]	; 0x24
 8007a4e:	b928      	cbnz	r0, 8007a5c <__pow5mult+0x40>
 8007a50:	4b1d      	ldr	r3, [pc, #116]	; (8007ac8 <__pow5mult+0xac>)
 8007a52:	481e      	ldr	r0, [pc, #120]	; (8007acc <__pow5mult+0xb0>)
 8007a54:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007a58:	f000 fb08 	bl	800806c <__assert_func>
 8007a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007a60:	6004      	str	r4, [r0, #0]
 8007a62:	60c4      	str	r4, [r0, #12]
 8007a64:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007a6c:	b94c      	cbnz	r4, 8007a82 <__pow5mult+0x66>
 8007a6e:	f240 2171 	movw	r1, #625	; 0x271
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7ff ff12 	bl	800789c <__i2b>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8007a7e:	4604      	mov	r4, r0
 8007a80:	6003      	str	r3, [r0, #0]
 8007a82:	f04f 0900 	mov.w	r9, #0
 8007a86:	07eb      	lsls	r3, r5, #31
 8007a88:	d50a      	bpl.n	8007aa0 <__pow5mult+0x84>
 8007a8a:	4639      	mov	r1, r7
 8007a8c:	4622      	mov	r2, r4
 8007a8e:	4630      	mov	r0, r6
 8007a90:	f7ff ff1a 	bl	80078c8 <__multiply>
 8007a94:	4639      	mov	r1, r7
 8007a96:	4680      	mov	r8, r0
 8007a98:	4630      	mov	r0, r6
 8007a9a:	f7ff fe47 	bl	800772c <_Bfree>
 8007a9e:	4647      	mov	r7, r8
 8007aa0:	106d      	asrs	r5, r5, #1
 8007aa2:	d00b      	beq.n	8007abc <__pow5mult+0xa0>
 8007aa4:	6820      	ldr	r0, [r4, #0]
 8007aa6:	b938      	cbnz	r0, 8007ab8 <__pow5mult+0x9c>
 8007aa8:	4622      	mov	r2, r4
 8007aaa:	4621      	mov	r1, r4
 8007aac:	4630      	mov	r0, r6
 8007aae:	f7ff ff0b 	bl	80078c8 <__multiply>
 8007ab2:	6020      	str	r0, [r4, #0]
 8007ab4:	f8c0 9000 	str.w	r9, [r0]
 8007ab8:	4604      	mov	r4, r0
 8007aba:	e7e4      	b.n	8007a86 <__pow5mult+0x6a>
 8007abc:	4638      	mov	r0, r7
 8007abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac2:	bf00      	nop
 8007ac4:	0800d458 	.word	0x0800d458
 8007ac8:	0800d225 	.word	0x0800d225
 8007acc:	0800d308 	.word	0x0800d308

08007ad0 <__lshift>:
 8007ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad4:	460c      	mov	r4, r1
 8007ad6:	6849      	ldr	r1, [r1, #4]
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007ade:	68a3      	ldr	r3, [r4, #8]
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	4691      	mov	r9, r2
 8007ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ae8:	f108 0601 	add.w	r6, r8, #1
 8007aec:	42b3      	cmp	r3, r6
 8007aee:	db0b      	blt.n	8007b08 <__lshift+0x38>
 8007af0:	4638      	mov	r0, r7
 8007af2:	f7ff fddb 	bl	80076ac <_Balloc>
 8007af6:	4605      	mov	r5, r0
 8007af8:	b948      	cbnz	r0, 8007b0e <__lshift+0x3e>
 8007afa:	4602      	mov	r2, r0
 8007afc:	4b2a      	ldr	r3, [pc, #168]	; (8007ba8 <__lshift+0xd8>)
 8007afe:	482b      	ldr	r0, [pc, #172]	; (8007bac <__lshift+0xdc>)
 8007b00:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007b04:	f000 fab2 	bl	800806c <__assert_func>
 8007b08:	3101      	adds	r1, #1
 8007b0a:	005b      	lsls	r3, r3, #1
 8007b0c:	e7ee      	b.n	8007aec <__lshift+0x1c>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	f100 0114 	add.w	r1, r0, #20
 8007b14:	f100 0210 	add.w	r2, r0, #16
 8007b18:	4618      	mov	r0, r3
 8007b1a:	4553      	cmp	r3, sl
 8007b1c:	db37      	blt.n	8007b8e <__lshift+0xbe>
 8007b1e:	6920      	ldr	r0, [r4, #16]
 8007b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007b24:	f104 0314 	add.w	r3, r4, #20
 8007b28:	f019 091f 	ands.w	r9, r9, #31
 8007b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007b30:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007b34:	d02f      	beq.n	8007b96 <__lshift+0xc6>
 8007b36:	f1c9 0e20 	rsb	lr, r9, #32
 8007b3a:	468a      	mov	sl, r1
 8007b3c:	f04f 0c00 	mov.w	ip, #0
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	fa02 f209 	lsl.w	r2, r2, r9
 8007b46:	ea42 020c 	orr.w	r2, r2, ip
 8007b4a:	f84a 2b04 	str.w	r2, [sl], #4
 8007b4e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b52:	4298      	cmp	r0, r3
 8007b54:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007b58:	d8f2      	bhi.n	8007b40 <__lshift+0x70>
 8007b5a:	1b03      	subs	r3, r0, r4
 8007b5c:	3b15      	subs	r3, #21
 8007b5e:	f023 0303 	bic.w	r3, r3, #3
 8007b62:	3304      	adds	r3, #4
 8007b64:	f104 0215 	add.w	r2, r4, #21
 8007b68:	4290      	cmp	r0, r2
 8007b6a:	bf38      	it	cc
 8007b6c:	2304      	movcc	r3, #4
 8007b6e:	f841 c003 	str.w	ip, [r1, r3]
 8007b72:	f1bc 0f00 	cmp.w	ip, #0
 8007b76:	d001      	beq.n	8007b7c <__lshift+0xac>
 8007b78:	f108 0602 	add.w	r6, r8, #2
 8007b7c:	3e01      	subs	r6, #1
 8007b7e:	4638      	mov	r0, r7
 8007b80:	612e      	str	r6, [r5, #16]
 8007b82:	4621      	mov	r1, r4
 8007b84:	f7ff fdd2 	bl	800772c <_Bfree>
 8007b88:	4628      	mov	r0, r5
 8007b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b92:	3301      	adds	r3, #1
 8007b94:	e7c1      	b.n	8007b1a <__lshift+0x4a>
 8007b96:	3904      	subs	r1, #4
 8007b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ba0:	4298      	cmp	r0, r3
 8007ba2:	d8f9      	bhi.n	8007b98 <__lshift+0xc8>
 8007ba4:	e7ea      	b.n	8007b7c <__lshift+0xac>
 8007ba6:	bf00      	nop
 8007ba8:	0800d297 	.word	0x0800d297
 8007bac:	0800d308 	.word	0x0800d308

08007bb0 <__mcmp>:
 8007bb0:	b530      	push	{r4, r5, lr}
 8007bb2:	6902      	ldr	r2, [r0, #16]
 8007bb4:	690c      	ldr	r4, [r1, #16]
 8007bb6:	1b12      	subs	r2, r2, r4
 8007bb8:	d10e      	bne.n	8007bd8 <__mcmp+0x28>
 8007bba:	f100 0314 	add.w	r3, r0, #20
 8007bbe:	3114      	adds	r1, #20
 8007bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007bd0:	42a5      	cmp	r5, r4
 8007bd2:	d003      	beq.n	8007bdc <__mcmp+0x2c>
 8007bd4:	d305      	bcc.n	8007be2 <__mcmp+0x32>
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	4610      	mov	r0, r2
 8007bda:	bd30      	pop	{r4, r5, pc}
 8007bdc:	4283      	cmp	r3, r0
 8007bde:	d3f3      	bcc.n	8007bc8 <__mcmp+0x18>
 8007be0:	e7fa      	b.n	8007bd8 <__mcmp+0x28>
 8007be2:	f04f 32ff 	mov.w	r2, #4294967295
 8007be6:	e7f7      	b.n	8007bd8 <__mcmp+0x28>

08007be8 <__mdiff>:
 8007be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bec:	460c      	mov	r4, r1
 8007bee:	4606      	mov	r6, r0
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4620      	mov	r0, r4
 8007bf4:	4690      	mov	r8, r2
 8007bf6:	f7ff ffdb 	bl	8007bb0 <__mcmp>
 8007bfa:	1e05      	subs	r5, r0, #0
 8007bfc:	d110      	bne.n	8007c20 <__mdiff+0x38>
 8007bfe:	4629      	mov	r1, r5
 8007c00:	4630      	mov	r0, r6
 8007c02:	f7ff fd53 	bl	80076ac <_Balloc>
 8007c06:	b930      	cbnz	r0, 8007c16 <__mdiff+0x2e>
 8007c08:	4b3a      	ldr	r3, [pc, #232]	; (8007cf4 <__mdiff+0x10c>)
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	f240 2132 	movw	r1, #562	; 0x232
 8007c10:	4839      	ldr	r0, [pc, #228]	; (8007cf8 <__mdiff+0x110>)
 8007c12:	f000 fa2b 	bl	800806c <__assert_func>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c20:	bfa4      	itt	ge
 8007c22:	4643      	movge	r3, r8
 8007c24:	46a0      	movge	r8, r4
 8007c26:	4630      	mov	r0, r6
 8007c28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007c2c:	bfa6      	itte	ge
 8007c2e:	461c      	movge	r4, r3
 8007c30:	2500      	movge	r5, #0
 8007c32:	2501      	movlt	r5, #1
 8007c34:	f7ff fd3a 	bl	80076ac <_Balloc>
 8007c38:	b920      	cbnz	r0, 8007c44 <__mdiff+0x5c>
 8007c3a:	4b2e      	ldr	r3, [pc, #184]	; (8007cf4 <__mdiff+0x10c>)
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007c42:	e7e5      	b.n	8007c10 <__mdiff+0x28>
 8007c44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007c48:	6926      	ldr	r6, [r4, #16]
 8007c4a:	60c5      	str	r5, [r0, #12]
 8007c4c:	f104 0914 	add.w	r9, r4, #20
 8007c50:	f108 0514 	add.w	r5, r8, #20
 8007c54:	f100 0e14 	add.w	lr, r0, #20
 8007c58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007c5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007c60:	f108 0210 	add.w	r2, r8, #16
 8007c64:	46f2      	mov	sl, lr
 8007c66:	2100      	movs	r1, #0
 8007c68:	f859 3b04 	ldr.w	r3, [r9], #4
 8007c6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007c70:	fa1f f883 	uxth.w	r8, r3
 8007c74:	fa11 f18b 	uxtah	r1, r1, fp
 8007c78:	0c1b      	lsrs	r3, r3, #16
 8007c7a:	eba1 0808 	sub.w	r8, r1, r8
 8007c7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007c82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007c86:	fa1f f888 	uxth.w	r8, r8
 8007c8a:	1419      	asrs	r1, r3, #16
 8007c8c:	454e      	cmp	r6, r9
 8007c8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007c92:	f84a 3b04 	str.w	r3, [sl], #4
 8007c96:	d8e7      	bhi.n	8007c68 <__mdiff+0x80>
 8007c98:	1b33      	subs	r3, r6, r4
 8007c9a:	3b15      	subs	r3, #21
 8007c9c:	f023 0303 	bic.w	r3, r3, #3
 8007ca0:	3304      	adds	r3, #4
 8007ca2:	3415      	adds	r4, #21
 8007ca4:	42a6      	cmp	r6, r4
 8007ca6:	bf38      	it	cc
 8007ca8:	2304      	movcc	r3, #4
 8007caa:	441d      	add	r5, r3
 8007cac:	4473      	add	r3, lr
 8007cae:	469e      	mov	lr, r3
 8007cb0:	462e      	mov	r6, r5
 8007cb2:	4566      	cmp	r6, ip
 8007cb4:	d30e      	bcc.n	8007cd4 <__mdiff+0xec>
 8007cb6:	f10c 0203 	add.w	r2, ip, #3
 8007cba:	1b52      	subs	r2, r2, r5
 8007cbc:	f022 0203 	bic.w	r2, r2, #3
 8007cc0:	3d03      	subs	r5, #3
 8007cc2:	45ac      	cmp	ip, r5
 8007cc4:	bf38      	it	cc
 8007cc6:	2200      	movcc	r2, #0
 8007cc8:	441a      	add	r2, r3
 8007cca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007cce:	b17b      	cbz	r3, 8007cf0 <__mdiff+0x108>
 8007cd0:	6107      	str	r7, [r0, #16]
 8007cd2:	e7a3      	b.n	8007c1c <__mdiff+0x34>
 8007cd4:	f856 8b04 	ldr.w	r8, [r6], #4
 8007cd8:	fa11 f288 	uxtah	r2, r1, r8
 8007cdc:	1414      	asrs	r4, r2, #16
 8007cde:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ce2:	b292      	uxth	r2, r2
 8007ce4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ce8:	f84e 2b04 	str.w	r2, [lr], #4
 8007cec:	1421      	asrs	r1, r4, #16
 8007cee:	e7e0      	b.n	8007cb2 <__mdiff+0xca>
 8007cf0:	3f01      	subs	r7, #1
 8007cf2:	e7ea      	b.n	8007cca <__mdiff+0xe2>
 8007cf4:	0800d297 	.word	0x0800d297
 8007cf8:	0800d308 	.word	0x0800d308

08007cfc <__d2b>:
 8007cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d00:	4689      	mov	r9, r1
 8007d02:	2101      	movs	r1, #1
 8007d04:	ec57 6b10 	vmov	r6, r7, d0
 8007d08:	4690      	mov	r8, r2
 8007d0a:	f7ff fccf 	bl	80076ac <_Balloc>
 8007d0e:	4604      	mov	r4, r0
 8007d10:	b930      	cbnz	r0, 8007d20 <__d2b+0x24>
 8007d12:	4602      	mov	r2, r0
 8007d14:	4b25      	ldr	r3, [pc, #148]	; (8007dac <__d2b+0xb0>)
 8007d16:	4826      	ldr	r0, [pc, #152]	; (8007db0 <__d2b+0xb4>)
 8007d18:	f240 310a 	movw	r1, #778	; 0x30a
 8007d1c:	f000 f9a6 	bl	800806c <__assert_func>
 8007d20:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007d24:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d28:	bb35      	cbnz	r5, 8007d78 <__d2b+0x7c>
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	9301      	str	r3, [sp, #4]
 8007d2e:	d028      	beq.n	8007d82 <__d2b+0x86>
 8007d30:	4668      	mov	r0, sp
 8007d32:	9600      	str	r6, [sp, #0]
 8007d34:	f7ff fd82 	bl	800783c <__lo0bits>
 8007d38:	9900      	ldr	r1, [sp, #0]
 8007d3a:	b300      	cbz	r0, 8007d7e <__d2b+0x82>
 8007d3c:	9a01      	ldr	r2, [sp, #4]
 8007d3e:	f1c0 0320 	rsb	r3, r0, #32
 8007d42:	fa02 f303 	lsl.w	r3, r2, r3
 8007d46:	430b      	orrs	r3, r1
 8007d48:	40c2      	lsrs	r2, r0
 8007d4a:	6163      	str	r3, [r4, #20]
 8007d4c:	9201      	str	r2, [sp, #4]
 8007d4e:	9b01      	ldr	r3, [sp, #4]
 8007d50:	61a3      	str	r3, [r4, #24]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	bf14      	ite	ne
 8007d56:	2202      	movne	r2, #2
 8007d58:	2201      	moveq	r2, #1
 8007d5a:	6122      	str	r2, [r4, #16]
 8007d5c:	b1d5      	cbz	r5, 8007d94 <__d2b+0x98>
 8007d5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007d62:	4405      	add	r5, r0
 8007d64:	f8c9 5000 	str.w	r5, [r9]
 8007d68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007d6c:	f8c8 0000 	str.w	r0, [r8]
 8007d70:	4620      	mov	r0, r4
 8007d72:	b003      	add	sp, #12
 8007d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d7c:	e7d5      	b.n	8007d2a <__d2b+0x2e>
 8007d7e:	6161      	str	r1, [r4, #20]
 8007d80:	e7e5      	b.n	8007d4e <__d2b+0x52>
 8007d82:	a801      	add	r0, sp, #4
 8007d84:	f7ff fd5a 	bl	800783c <__lo0bits>
 8007d88:	9b01      	ldr	r3, [sp, #4]
 8007d8a:	6163      	str	r3, [r4, #20]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	6122      	str	r2, [r4, #16]
 8007d90:	3020      	adds	r0, #32
 8007d92:	e7e3      	b.n	8007d5c <__d2b+0x60>
 8007d94:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007d98:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007d9c:	f8c9 0000 	str.w	r0, [r9]
 8007da0:	6918      	ldr	r0, [r3, #16]
 8007da2:	f7ff fd2b 	bl	80077fc <__hi0bits>
 8007da6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007daa:	e7df      	b.n	8007d6c <__d2b+0x70>
 8007dac:	0800d297 	.word	0x0800d297
 8007db0:	0800d308 	.word	0x0800d308

08007db4 <_calloc_r>:
 8007db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007db6:	fba1 2402 	umull	r2, r4, r1, r2
 8007dba:	b94c      	cbnz	r4, 8007dd0 <_calloc_r+0x1c>
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	9201      	str	r2, [sp, #4]
 8007dc0:	f000 f87a 	bl	8007eb8 <_malloc_r>
 8007dc4:	9a01      	ldr	r2, [sp, #4]
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	b930      	cbnz	r0, 8007dd8 <_calloc_r+0x24>
 8007dca:	4628      	mov	r0, r5
 8007dcc:	b003      	add	sp, #12
 8007dce:	bd30      	pop	{r4, r5, pc}
 8007dd0:	220c      	movs	r2, #12
 8007dd2:	6002      	str	r2, [r0, #0]
 8007dd4:	2500      	movs	r5, #0
 8007dd6:	e7f8      	b.n	8007dca <_calloc_r+0x16>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	f7fd fe17 	bl	8005a0c <memset>
 8007dde:	e7f4      	b.n	8007dca <_calloc_r+0x16>

08007de0 <_free_r>:
 8007de0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007de2:	2900      	cmp	r1, #0
 8007de4:	d044      	beq.n	8007e70 <_free_r+0x90>
 8007de6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dea:	9001      	str	r0, [sp, #4]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f1a1 0404 	sub.w	r4, r1, #4
 8007df2:	bfb8      	it	lt
 8007df4:	18e4      	addlt	r4, r4, r3
 8007df6:	f000 f9bf 	bl	8008178 <__malloc_lock>
 8007dfa:	4a1e      	ldr	r2, [pc, #120]	; (8007e74 <_free_r+0x94>)
 8007dfc:	9801      	ldr	r0, [sp, #4]
 8007dfe:	6813      	ldr	r3, [r2, #0]
 8007e00:	b933      	cbnz	r3, 8007e10 <_free_r+0x30>
 8007e02:	6063      	str	r3, [r4, #4]
 8007e04:	6014      	str	r4, [r2, #0]
 8007e06:	b003      	add	sp, #12
 8007e08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e0c:	f000 b9ba 	b.w	8008184 <__malloc_unlock>
 8007e10:	42a3      	cmp	r3, r4
 8007e12:	d908      	bls.n	8007e26 <_free_r+0x46>
 8007e14:	6825      	ldr	r5, [r4, #0]
 8007e16:	1961      	adds	r1, r4, r5
 8007e18:	428b      	cmp	r3, r1
 8007e1a:	bf01      	itttt	eq
 8007e1c:	6819      	ldreq	r1, [r3, #0]
 8007e1e:	685b      	ldreq	r3, [r3, #4]
 8007e20:	1949      	addeq	r1, r1, r5
 8007e22:	6021      	streq	r1, [r4, #0]
 8007e24:	e7ed      	b.n	8007e02 <_free_r+0x22>
 8007e26:	461a      	mov	r2, r3
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	b10b      	cbz	r3, 8007e30 <_free_r+0x50>
 8007e2c:	42a3      	cmp	r3, r4
 8007e2e:	d9fa      	bls.n	8007e26 <_free_r+0x46>
 8007e30:	6811      	ldr	r1, [r2, #0]
 8007e32:	1855      	adds	r5, r2, r1
 8007e34:	42a5      	cmp	r5, r4
 8007e36:	d10b      	bne.n	8007e50 <_free_r+0x70>
 8007e38:	6824      	ldr	r4, [r4, #0]
 8007e3a:	4421      	add	r1, r4
 8007e3c:	1854      	adds	r4, r2, r1
 8007e3e:	42a3      	cmp	r3, r4
 8007e40:	6011      	str	r1, [r2, #0]
 8007e42:	d1e0      	bne.n	8007e06 <_free_r+0x26>
 8007e44:	681c      	ldr	r4, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	6053      	str	r3, [r2, #4]
 8007e4a:	4421      	add	r1, r4
 8007e4c:	6011      	str	r1, [r2, #0]
 8007e4e:	e7da      	b.n	8007e06 <_free_r+0x26>
 8007e50:	d902      	bls.n	8007e58 <_free_r+0x78>
 8007e52:	230c      	movs	r3, #12
 8007e54:	6003      	str	r3, [r0, #0]
 8007e56:	e7d6      	b.n	8007e06 <_free_r+0x26>
 8007e58:	6825      	ldr	r5, [r4, #0]
 8007e5a:	1961      	adds	r1, r4, r5
 8007e5c:	428b      	cmp	r3, r1
 8007e5e:	bf04      	itt	eq
 8007e60:	6819      	ldreq	r1, [r3, #0]
 8007e62:	685b      	ldreq	r3, [r3, #4]
 8007e64:	6063      	str	r3, [r4, #4]
 8007e66:	bf04      	itt	eq
 8007e68:	1949      	addeq	r1, r1, r5
 8007e6a:	6021      	streq	r1, [r4, #0]
 8007e6c:	6054      	str	r4, [r2, #4]
 8007e6e:	e7ca      	b.n	8007e06 <_free_r+0x26>
 8007e70:	b003      	add	sp, #12
 8007e72:	bd30      	pop	{r4, r5, pc}
 8007e74:	20007c40 	.word	0x20007c40

08007e78 <sbrk_aligned>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	4e0e      	ldr	r6, [pc, #56]	; (8007eb4 <sbrk_aligned+0x3c>)
 8007e7c:	460c      	mov	r4, r1
 8007e7e:	6831      	ldr	r1, [r6, #0]
 8007e80:	4605      	mov	r5, r0
 8007e82:	b911      	cbnz	r1, 8007e8a <sbrk_aligned+0x12>
 8007e84:	f000 f88c 	bl	8007fa0 <_sbrk_r>
 8007e88:	6030      	str	r0, [r6, #0]
 8007e8a:	4621      	mov	r1, r4
 8007e8c:	4628      	mov	r0, r5
 8007e8e:	f000 f887 	bl	8007fa0 <_sbrk_r>
 8007e92:	1c43      	adds	r3, r0, #1
 8007e94:	d00a      	beq.n	8007eac <sbrk_aligned+0x34>
 8007e96:	1cc4      	adds	r4, r0, #3
 8007e98:	f024 0403 	bic.w	r4, r4, #3
 8007e9c:	42a0      	cmp	r0, r4
 8007e9e:	d007      	beq.n	8007eb0 <sbrk_aligned+0x38>
 8007ea0:	1a21      	subs	r1, r4, r0
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f000 f87c 	bl	8007fa0 <_sbrk_r>
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d101      	bne.n	8007eb0 <sbrk_aligned+0x38>
 8007eac:	f04f 34ff 	mov.w	r4, #4294967295
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	bd70      	pop	{r4, r5, r6, pc}
 8007eb4:	20007c44 	.word	0x20007c44

08007eb8 <_malloc_r>:
 8007eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebc:	1ccd      	adds	r5, r1, #3
 8007ebe:	f025 0503 	bic.w	r5, r5, #3
 8007ec2:	3508      	adds	r5, #8
 8007ec4:	2d0c      	cmp	r5, #12
 8007ec6:	bf38      	it	cc
 8007ec8:	250c      	movcc	r5, #12
 8007eca:	2d00      	cmp	r5, #0
 8007ecc:	4607      	mov	r7, r0
 8007ece:	db01      	blt.n	8007ed4 <_malloc_r+0x1c>
 8007ed0:	42a9      	cmp	r1, r5
 8007ed2:	d905      	bls.n	8007ee0 <_malloc_r+0x28>
 8007ed4:	230c      	movs	r3, #12
 8007ed6:	603b      	str	r3, [r7, #0]
 8007ed8:	2600      	movs	r6, #0
 8007eda:	4630      	mov	r0, r6
 8007edc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ee0:	4e2e      	ldr	r6, [pc, #184]	; (8007f9c <_malloc_r+0xe4>)
 8007ee2:	f000 f949 	bl	8008178 <__malloc_lock>
 8007ee6:	6833      	ldr	r3, [r6, #0]
 8007ee8:	461c      	mov	r4, r3
 8007eea:	bb34      	cbnz	r4, 8007f3a <_malloc_r+0x82>
 8007eec:	4629      	mov	r1, r5
 8007eee:	4638      	mov	r0, r7
 8007ef0:	f7ff ffc2 	bl	8007e78 <sbrk_aligned>
 8007ef4:	1c43      	adds	r3, r0, #1
 8007ef6:	4604      	mov	r4, r0
 8007ef8:	d14d      	bne.n	8007f96 <_malloc_r+0xde>
 8007efa:	6834      	ldr	r4, [r6, #0]
 8007efc:	4626      	mov	r6, r4
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	d140      	bne.n	8007f84 <_malloc_r+0xcc>
 8007f02:	6823      	ldr	r3, [r4, #0]
 8007f04:	4631      	mov	r1, r6
 8007f06:	4638      	mov	r0, r7
 8007f08:	eb04 0803 	add.w	r8, r4, r3
 8007f0c:	f000 f848 	bl	8007fa0 <_sbrk_r>
 8007f10:	4580      	cmp	r8, r0
 8007f12:	d13a      	bne.n	8007f8a <_malloc_r+0xd2>
 8007f14:	6821      	ldr	r1, [r4, #0]
 8007f16:	3503      	adds	r5, #3
 8007f18:	1a6d      	subs	r5, r5, r1
 8007f1a:	f025 0503 	bic.w	r5, r5, #3
 8007f1e:	3508      	adds	r5, #8
 8007f20:	2d0c      	cmp	r5, #12
 8007f22:	bf38      	it	cc
 8007f24:	250c      	movcc	r5, #12
 8007f26:	4629      	mov	r1, r5
 8007f28:	4638      	mov	r0, r7
 8007f2a:	f7ff ffa5 	bl	8007e78 <sbrk_aligned>
 8007f2e:	3001      	adds	r0, #1
 8007f30:	d02b      	beq.n	8007f8a <_malloc_r+0xd2>
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	442b      	add	r3, r5
 8007f36:	6023      	str	r3, [r4, #0]
 8007f38:	e00e      	b.n	8007f58 <_malloc_r+0xa0>
 8007f3a:	6822      	ldr	r2, [r4, #0]
 8007f3c:	1b52      	subs	r2, r2, r5
 8007f3e:	d41e      	bmi.n	8007f7e <_malloc_r+0xc6>
 8007f40:	2a0b      	cmp	r2, #11
 8007f42:	d916      	bls.n	8007f72 <_malloc_r+0xba>
 8007f44:	1961      	adds	r1, r4, r5
 8007f46:	42a3      	cmp	r3, r4
 8007f48:	6025      	str	r5, [r4, #0]
 8007f4a:	bf18      	it	ne
 8007f4c:	6059      	strne	r1, [r3, #4]
 8007f4e:	6863      	ldr	r3, [r4, #4]
 8007f50:	bf08      	it	eq
 8007f52:	6031      	streq	r1, [r6, #0]
 8007f54:	5162      	str	r2, [r4, r5]
 8007f56:	604b      	str	r3, [r1, #4]
 8007f58:	4638      	mov	r0, r7
 8007f5a:	f104 060b 	add.w	r6, r4, #11
 8007f5e:	f000 f911 	bl	8008184 <__malloc_unlock>
 8007f62:	f026 0607 	bic.w	r6, r6, #7
 8007f66:	1d23      	adds	r3, r4, #4
 8007f68:	1af2      	subs	r2, r6, r3
 8007f6a:	d0b6      	beq.n	8007eda <_malloc_r+0x22>
 8007f6c:	1b9b      	subs	r3, r3, r6
 8007f6e:	50a3      	str	r3, [r4, r2]
 8007f70:	e7b3      	b.n	8007eda <_malloc_r+0x22>
 8007f72:	6862      	ldr	r2, [r4, #4]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	bf0c      	ite	eq
 8007f78:	6032      	streq	r2, [r6, #0]
 8007f7a:	605a      	strne	r2, [r3, #4]
 8007f7c:	e7ec      	b.n	8007f58 <_malloc_r+0xa0>
 8007f7e:	4623      	mov	r3, r4
 8007f80:	6864      	ldr	r4, [r4, #4]
 8007f82:	e7b2      	b.n	8007eea <_malloc_r+0x32>
 8007f84:	4634      	mov	r4, r6
 8007f86:	6876      	ldr	r6, [r6, #4]
 8007f88:	e7b9      	b.n	8007efe <_malloc_r+0x46>
 8007f8a:	230c      	movs	r3, #12
 8007f8c:	603b      	str	r3, [r7, #0]
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f000 f8f8 	bl	8008184 <__malloc_unlock>
 8007f94:	e7a1      	b.n	8007eda <_malloc_r+0x22>
 8007f96:	6025      	str	r5, [r4, #0]
 8007f98:	e7de      	b.n	8007f58 <_malloc_r+0xa0>
 8007f9a:	bf00      	nop
 8007f9c:	20007c40 	.word	0x20007c40

08007fa0 <_sbrk_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d06      	ldr	r5, [pc, #24]	; (8007fbc <_sbrk_r+0x1c>)
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	4604      	mov	r4, r0
 8007fa8:	4608      	mov	r0, r1
 8007faa:	602b      	str	r3, [r5, #0]
 8007fac:	f7fa fa04 	bl	80023b8 <_sbrk>
 8007fb0:	1c43      	adds	r3, r0, #1
 8007fb2:	d102      	bne.n	8007fba <_sbrk_r+0x1a>
 8007fb4:	682b      	ldr	r3, [r5, #0]
 8007fb6:	b103      	cbz	r3, 8007fba <_sbrk_r+0x1a>
 8007fb8:	6023      	str	r3, [r4, #0]
 8007fba:	bd38      	pop	{r3, r4, r5, pc}
 8007fbc:	20007c48 	.word	0x20007c48

08007fc0 <__sread>:
 8007fc0:	b510      	push	{r4, lr}
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fc8:	f000 fa3c 	bl	8008444 <_read_r>
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	bfab      	itete	ge
 8007fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8007fd4:	181b      	addge	r3, r3, r0
 8007fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007fda:	bfac      	ite	ge
 8007fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007fde:	81a3      	strhlt	r3, [r4, #12]
 8007fe0:	bd10      	pop	{r4, pc}

08007fe2 <__swrite>:
 8007fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fe6:	461f      	mov	r7, r3
 8007fe8:	898b      	ldrh	r3, [r1, #12]
 8007fea:	05db      	lsls	r3, r3, #23
 8007fec:	4605      	mov	r5, r0
 8007fee:	460c      	mov	r4, r1
 8007ff0:	4616      	mov	r6, r2
 8007ff2:	d505      	bpl.n	8008000 <__swrite+0x1e>
 8007ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f000 f898 	bl	8008130 <_lseek_r>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	4632      	mov	r2, r6
 800800e:	463b      	mov	r3, r7
 8008010:	4628      	mov	r0, r5
 8008012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008016:	f000 b817 	b.w	8008048 <_write_r>

0800801a <__sseek>:
 800801a:	b510      	push	{r4, lr}
 800801c:	460c      	mov	r4, r1
 800801e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008022:	f000 f885 	bl	8008130 <_lseek_r>
 8008026:	1c43      	adds	r3, r0, #1
 8008028:	89a3      	ldrh	r3, [r4, #12]
 800802a:	bf15      	itete	ne
 800802c:	6560      	strne	r0, [r4, #84]	; 0x54
 800802e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008036:	81a3      	strheq	r3, [r4, #12]
 8008038:	bf18      	it	ne
 800803a:	81a3      	strhne	r3, [r4, #12]
 800803c:	bd10      	pop	{r4, pc}

0800803e <__sclose>:
 800803e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008042:	f000 b831 	b.w	80080a8 <_close_r>
	...

08008048 <_write_r>:
 8008048:	b538      	push	{r3, r4, r5, lr}
 800804a:	4d07      	ldr	r5, [pc, #28]	; (8008068 <_write_r+0x20>)
 800804c:	4604      	mov	r4, r0
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	2200      	movs	r2, #0
 8008054:	602a      	str	r2, [r5, #0]
 8008056:	461a      	mov	r2, r3
 8008058:	f7fa f994 	bl	8002384 <_write>
 800805c:	1c43      	adds	r3, r0, #1
 800805e:	d102      	bne.n	8008066 <_write_r+0x1e>
 8008060:	682b      	ldr	r3, [r5, #0]
 8008062:	b103      	cbz	r3, 8008066 <_write_r+0x1e>
 8008064:	6023      	str	r3, [r4, #0]
 8008066:	bd38      	pop	{r3, r4, r5, pc}
 8008068:	20007c48 	.word	0x20007c48

0800806c <__assert_func>:
 800806c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800806e:	4614      	mov	r4, r2
 8008070:	461a      	mov	r2, r3
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <__assert_func+0x2c>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4605      	mov	r5, r0
 8008078:	68d8      	ldr	r0, [r3, #12]
 800807a:	b14c      	cbz	r4, 8008090 <__assert_func+0x24>
 800807c:	4b07      	ldr	r3, [pc, #28]	; (800809c <__assert_func+0x30>)
 800807e:	9100      	str	r1, [sp, #0]
 8008080:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008084:	4906      	ldr	r1, [pc, #24]	; (80080a0 <__assert_func+0x34>)
 8008086:	462b      	mov	r3, r5
 8008088:	f000 f81e 	bl	80080c8 <fiprintf>
 800808c:	f000 f9f9 	bl	8008482 <abort>
 8008090:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <__assert_func+0x38>)
 8008092:	461c      	mov	r4, r3
 8008094:	e7f3      	b.n	800807e <__assert_func+0x12>
 8008096:	bf00      	nop
 8008098:	2000001c 	.word	0x2000001c
 800809c:	0800d464 	.word	0x0800d464
 80080a0:	0800d471 	.word	0x0800d471
 80080a4:	0800d49f 	.word	0x0800d49f

080080a8 <_close_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	4d06      	ldr	r5, [pc, #24]	; (80080c4 <_close_r+0x1c>)
 80080ac:	2300      	movs	r3, #0
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7fa f974 	bl	80023a0 <_close>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_close_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_close_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20007c48 	.word	0x20007c48

080080c8 <fiprintf>:
 80080c8:	b40e      	push	{r1, r2, r3}
 80080ca:	b503      	push	{r0, r1, lr}
 80080cc:	4601      	mov	r1, r0
 80080ce:	ab03      	add	r3, sp, #12
 80080d0:	4805      	ldr	r0, [pc, #20]	; (80080e8 <fiprintf+0x20>)
 80080d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d6:	6800      	ldr	r0, [r0, #0]
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	f000 f883 	bl	80081e4 <_vfiprintf_r>
 80080de:	b002      	add	sp, #8
 80080e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e4:	b003      	add	sp, #12
 80080e6:	4770      	bx	lr
 80080e8:	2000001c 	.word	0x2000001c

080080ec <_fstat_r>:
 80080ec:	b538      	push	{r3, r4, r5, lr}
 80080ee:	4d07      	ldr	r5, [pc, #28]	; (800810c <_fstat_r+0x20>)
 80080f0:	2300      	movs	r3, #0
 80080f2:	4604      	mov	r4, r0
 80080f4:	4608      	mov	r0, r1
 80080f6:	4611      	mov	r1, r2
 80080f8:	602b      	str	r3, [r5, #0]
 80080fa:	f7fa f954 	bl	80023a6 <_fstat>
 80080fe:	1c43      	adds	r3, r0, #1
 8008100:	d102      	bne.n	8008108 <_fstat_r+0x1c>
 8008102:	682b      	ldr	r3, [r5, #0]
 8008104:	b103      	cbz	r3, 8008108 <_fstat_r+0x1c>
 8008106:	6023      	str	r3, [r4, #0]
 8008108:	bd38      	pop	{r3, r4, r5, pc}
 800810a:	bf00      	nop
 800810c:	20007c48 	.word	0x20007c48

08008110 <_isatty_r>:
 8008110:	b538      	push	{r3, r4, r5, lr}
 8008112:	4d06      	ldr	r5, [pc, #24]	; (800812c <_isatty_r+0x1c>)
 8008114:	2300      	movs	r3, #0
 8008116:	4604      	mov	r4, r0
 8008118:	4608      	mov	r0, r1
 800811a:	602b      	str	r3, [r5, #0]
 800811c:	f7fa f948 	bl	80023b0 <_isatty>
 8008120:	1c43      	adds	r3, r0, #1
 8008122:	d102      	bne.n	800812a <_isatty_r+0x1a>
 8008124:	682b      	ldr	r3, [r5, #0]
 8008126:	b103      	cbz	r3, 800812a <_isatty_r+0x1a>
 8008128:	6023      	str	r3, [r4, #0]
 800812a:	bd38      	pop	{r3, r4, r5, pc}
 800812c:	20007c48 	.word	0x20007c48

08008130 <_lseek_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4d07      	ldr	r5, [pc, #28]	; (8008150 <_lseek_r+0x20>)
 8008134:	4604      	mov	r4, r0
 8008136:	4608      	mov	r0, r1
 8008138:	4611      	mov	r1, r2
 800813a:	2200      	movs	r2, #0
 800813c:	602a      	str	r2, [r5, #0]
 800813e:	461a      	mov	r2, r3
 8008140:	f7fa f938 	bl	80023b4 <_lseek>
 8008144:	1c43      	adds	r3, r0, #1
 8008146:	d102      	bne.n	800814e <_lseek_r+0x1e>
 8008148:	682b      	ldr	r3, [r5, #0]
 800814a:	b103      	cbz	r3, 800814e <_lseek_r+0x1e>
 800814c:	6023      	str	r3, [r4, #0]
 800814e:	bd38      	pop	{r3, r4, r5, pc}
 8008150:	20007c48 	.word	0x20007c48

08008154 <__ascii_mbtowc>:
 8008154:	b082      	sub	sp, #8
 8008156:	b901      	cbnz	r1, 800815a <__ascii_mbtowc+0x6>
 8008158:	a901      	add	r1, sp, #4
 800815a:	b142      	cbz	r2, 800816e <__ascii_mbtowc+0x1a>
 800815c:	b14b      	cbz	r3, 8008172 <__ascii_mbtowc+0x1e>
 800815e:	7813      	ldrb	r3, [r2, #0]
 8008160:	600b      	str	r3, [r1, #0]
 8008162:	7812      	ldrb	r2, [r2, #0]
 8008164:	1e10      	subs	r0, r2, #0
 8008166:	bf18      	it	ne
 8008168:	2001      	movne	r0, #1
 800816a:	b002      	add	sp, #8
 800816c:	4770      	bx	lr
 800816e:	4610      	mov	r0, r2
 8008170:	e7fb      	b.n	800816a <__ascii_mbtowc+0x16>
 8008172:	f06f 0001 	mvn.w	r0, #1
 8008176:	e7f8      	b.n	800816a <__ascii_mbtowc+0x16>

08008178 <__malloc_lock>:
 8008178:	4801      	ldr	r0, [pc, #4]	; (8008180 <__malloc_lock+0x8>)
 800817a:	f7ff ba28 	b.w	80075ce <__retarget_lock_acquire_recursive>
 800817e:	bf00      	nop
 8008180:	20007c3c 	.word	0x20007c3c

08008184 <__malloc_unlock>:
 8008184:	4801      	ldr	r0, [pc, #4]	; (800818c <__malloc_unlock+0x8>)
 8008186:	f7ff ba23 	b.w	80075d0 <__retarget_lock_release_recursive>
 800818a:	bf00      	nop
 800818c:	20007c3c 	.word	0x20007c3c

08008190 <__sfputc_r>:
 8008190:	6893      	ldr	r3, [r2, #8]
 8008192:	3b01      	subs	r3, #1
 8008194:	2b00      	cmp	r3, #0
 8008196:	b410      	push	{r4}
 8008198:	6093      	str	r3, [r2, #8]
 800819a:	da08      	bge.n	80081ae <__sfputc_r+0x1e>
 800819c:	6994      	ldr	r4, [r2, #24]
 800819e:	42a3      	cmp	r3, r4
 80081a0:	db01      	blt.n	80081a6 <__sfputc_r+0x16>
 80081a2:	290a      	cmp	r1, #10
 80081a4:	d103      	bne.n	80081ae <__sfputc_r+0x1e>
 80081a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081aa:	f7fe b917 	b.w	80063dc <__swbuf_r>
 80081ae:	6813      	ldr	r3, [r2, #0]
 80081b0:	1c58      	adds	r0, r3, #1
 80081b2:	6010      	str	r0, [r2, #0]
 80081b4:	7019      	strb	r1, [r3, #0]
 80081b6:	4608      	mov	r0, r1
 80081b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081bc:	4770      	bx	lr

080081be <__sfputs_r>:
 80081be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081c0:	4606      	mov	r6, r0
 80081c2:	460f      	mov	r7, r1
 80081c4:	4614      	mov	r4, r2
 80081c6:	18d5      	adds	r5, r2, r3
 80081c8:	42ac      	cmp	r4, r5
 80081ca:	d101      	bne.n	80081d0 <__sfputs_r+0x12>
 80081cc:	2000      	movs	r0, #0
 80081ce:	e007      	b.n	80081e0 <__sfputs_r+0x22>
 80081d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081d4:	463a      	mov	r2, r7
 80081d6:	4630      	mov	r0, r6
 80081d8:	f7ff ffda 	bl	8008190 <__sfputc_r>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	d1f3      	bne.n	80081c8 <__sfputs_r+0xa>
 80081e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080081e4 <_vfiprintf_r>:
 80081e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e8:	460d      	mov	r5, r1
 80081ea:	b09d      	sub	sp, #116	; 0x74
 80081ec:	4614      	mov	r4, r2
 80081ee:	4698      	mov	r8, r3
 80081f0:	4606      	mov	r6, r0
 80081f2:	b118      	cbz	r0, 80081fc <_vfiprintf_r+0x18>
 80081f4:	6983      	ldr	r3, [r0, #24]
 80081f6:	b90b      	cbnz	r3, 80081fc <_vfiprintf_r+0x18>
 80081f8:	f7ff f946 	bl	8007488 <__sinit>
 80081fc:	4b89      	ldr	r3, [pc, #548]	; (8008424 <_vfiprintf_r+0x240>)
 80081fe:	429d      	cmp	r5, r3
 8008200:	d11b      	bne.n	800823a <_vfiprintf_r+0x56>
 8008202:	6875      	ldr	r5, [r6, #4]
 8008204:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008206:	07d9      	lsls	r1, r3, #31
 8008208:	d405      	bmi.n	8008216 <_vfiprintf_r+0x32>
 800820a:	89ab      	ldrh	r3, [r5, #12]
 800820c:	059a      	lsls	r2, r3, #22
 800820e:	d402      	bmi.n	8008216 <_vfiprintf_r+0x32>
 8008210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008212:	f7ff f9dc 	bl	80075ce <__retarget_lock_acquire_recursive>
 8008216:	89ab      	ldrh	r3, [r5, #12]
 8008218:	071b      	lsls	r3, r3, #28
 800821a:	d501      	bpl.n	8008220 <_vfiprintf_r+0x3c>
 800821c:	692b      	ldr	r3, [r5, #16]
 800821e:	b9eb      	cbnz	r3, 800825c <_vfiprintf_r+0x78>
 8008220:	4629      	mov	r1, r5
 8008222:	4630      	mov	r0, r6
 8008224:	f7fe f92c 	bl	8006480 <__swsetup_r>
 8008228:	b1c0      	cbz	r0, 800825c <_vfiprintf_r+0x78>
 800822a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800822c:	07dc      	lsls	r4, r3, #31
 800822e:	d50e      	bpl.n	800824e <_vfiprintf_r+0x6a>
 8008230:	f04f 30ff 	mov.w	r0, #4294967295
 8008234:	b01d      	add	sp, #116	; 0x74
 8008236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800823a:	4b7b      	ldr	r3, [pc, #492]	; (8008428 <_vfiprintf_r+0x244>)
 800823c:	429d      	cmp	r5, r3
 800823e:	d101      	bne.n	8008244 <_vfiprintf_r+0x60>
 8008240:	68b5      	ldr	r5, [r6, #8]
 8008242:	e7df      	b.n	8008204 <_vfiprintf_r+0x20>
 8008244:	4b79      	ldr	r3, [pc, #484]	; (800842c <_vfiprintf_r+0x248>)
 8008246:	429d      	cmp	r5, r3
 8008248:	bf08      	it	eq
 800824a:	68f5      	ldreq	r5, [r6, #12]
 800824c:	e7da      	b.n	8008204 <_vfiprintf_r+0x20>
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	0598      	lsls	r0, r3, #22
 8008252:	d4ed      	bmi.n	8008230 <_vfiprintf_r+0x4c>
 8008254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008256:	f7ff f9bb 	bl	80075d0 <__retarget_lock_release_recursive>
 800825a:	e7e9      	b.n	8008230 <_vfiprintf_r+0x4c>
 800825c:	2300      	movs	r3, #0
 800825e:	9309      	str	r3, [sp, #36]	; 0x24
 8008260:	2320      	movs	r3, #32
 8008262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008266:	f8cd 800c 	str.w	r8, [sp, #12]
 800826a:	2330      	movs	r3, #48	; 0x30
 800826c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008430 <_vfiprintf_r+0x24c>
 8008270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008274:	f04f 0901 	mov.w	r9, #1
 8008278:	4623      	mov	r3, r4
 800827a:	469a      	mov	sl, r3
 800827c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008280:	b10a      	cbz	r2, 8008286 <_vfiprintf_r+0xa2>
 8008282:	2a25      	cmp	r2, #37	; 0x25
 8008284:	d1f9      	bne.n	800827a <_vfiprintf_r+0x96>
 8008286:	ebba 0b04 	subs.w	fp, sl, r4
 800828a:	d00b      	beq.n	80082a4 <_vfiprintf_r+0xc0>
 800828c:	465b      	mov	r3, fp
 800828e:	4622      	mov	r2, r4
 8008290:	4629      	mov	r1, r5
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff ff93 	bl	80081be <__sfputs_r>
 8008298:	3001      	adds	r0, #1
 800829a:	f000 80aa 	beq.w	80083f2 <_vfiprintf_r+0x20e>
 800829e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a0:	445a      	add	r2, fp
 80082a2:	9209      	str	r2, [sp, #36]	; 0x24
 80082a4:	f89a 3000 	ldrb.w	r3, [sl]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80a2 	beq.w	80083f2 <_vfiprintf_r+0x20e>
 80082ae:	2300      	movs	r3, #0
 80082b0:	f04f 32ff 	mov.w	r2, #4294967295
 80082b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b8:	f10a 0a01 	add.w	sl, sl, #1
 80082bc:	9304      	str	r3, [sp, #16]
 80082be:	9307      	str	r3, [sp, #28]
 80082c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082c4:	931a      	str	r3, [sp, #104]	; 0x68
 80082c6:	4654      	mov	r4, sl
 80082c8:	2205      	movs	r2, #5
 80082ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ce:	4858      	ldr	r0, [pc, #352]	; (8008430 <_vfiprintf_r+0x24c>)
 80082d0:	f7f8 f806 	bl	80002e0 <memchr>
 80082d4:	9a04      	ldr	r2, [sp, #16]
 80082d6:	b9d8      	cbnz	r0, 8008310 <_vfiprintf_r+0x12c>
 80082d8:	06d1      	lsls	r1, r2, #27
 80082da:	bf44      	itt	mi
 80082dc:	2320      	movmi	r3, #32
 80082de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e2:	0713      	lsls	r3, r2, #28
 80082e4:	bf44      	itt	mi
 80082e6:	232b      	movmi	r3, #43	; 0x2b
 80082e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ec:	f89a 3000 	ldrb.w	r3, [sl]
 80082f0:	2b2a      	cmp	r3, #42	; 0x2a
 80082f2:	d015      	beq.n	8008320 <_vfiprintf_r+0x13c>
 80082f4:	9a07      	ldr	r2, [sp, #28]
 80082f6:	4654      	mov	r4, sl
 80082f8:	2000      	movs	r0, #0
 80082fa:	f04f 0c0a 	mov.w	ip, #10
 80082fe:	4621      	mov	r1, r4
 8008300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008304:	3b30      	subs	r3, #48	; 0x30
 8008306:	2b09      	cmp	r3, #9
 8008308:	d94e      	bls.n	80083a8 <_vfiprintf_r+0x1c4>
 800830a:	b1b0      	cbz	r0, 800833a <_vfiprintf_r+0x156>
 800830c:	9207      	str	r2, [sp, #28]
 800830e:	e014      	b.n	800833a <_vfiprintf_r+0x156>
 8008310:	eba0 0308 	sub.w	r3, r0, r8
 8008314:	fa09 f303 	lsl.w	r3, r9, r3
 8008318:	4313      	orrs	r3, r2
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	46a2      	mov	sl, r4
 800831e:	e7d2      	b.n	80082c6 <_vfiprintf_r+0xe2>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	1d19      	adds	r1, r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	9103      	str	r1, [sp, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	bfbb      	ittet	lt
 800832c:	425b      	neglt	r3, r3
 800832e:	f042 0202 	orrlt.w	r2, r2, #2
 8008332:	9307      	strge	r3, [sp, #28]
 8008334:	9307      	strlt	r3, [sp, #28]
 8008336:	bfb8      	it	lt
 8008338:	9204      	strlt	r2, [sp, #16]
 800833a:	7823      	ldrb	r3, [r4, #0]
 800833c:	2b2e      	cmp	r3, #46	; 0x2e
 800833e:	d10c      	bne.n	800835a <_vfiprintf_r+0x176>
 8008340:	7863      	ldrb	r3, [r4, #1]
 8008342:	2b2a      	cmp	r3, #42	; 0x2a
 8008344:	d135      	bne.n	80083b2 <_vfiprintf_r+0x1ce>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	9203      	str	r2, [sp, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bfb8      	it	lt
 8008352:	f04f 33ff 	movlt.w	r3, #4294967295
 8008356:	3402      	adds	r4, #2
 8008358:	9305      	str	r3, [sp, #20]
 800835a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008440 <_vfiprintf_r+0x25c>
 800835e:	7821      	ldrb	r1, [r4, #0]
 8008360:	2203      	movs	r2, #3
 8008362:	4650      	mov	r0, sl
 8008364:	f7f7 ffbc 	bl	80002e0 <memchr>
 8008368:	b140      	cbz	r0, 800837c <_vfiprintf_r+0x198>
 800836a:	2340      	movs	r3, #64	; 0x40
 800836c:	eba0 000a 	sub.w	r0, r0, sl
 8008370:	fa03 f000 	lsl.w	r0, r3, r0
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	4303      	orrs	r3, r0
 8008378:	3401      	adds	r4, #1
 800837a:	9304      	str	r3, [sp, #16]
 800837c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008380:	482c      	ldr	r0, [pc, #176]	; (8008434 <_vfiprintf_r+0x250>)
 8008382:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008386:	2206      	movs	r2, #6
 8008388:	f7f7 ffaa 	bl	80002e0 <memchr>
 800838c:	2800      	cmp	r0, #0
 800838e:	d03f      	beq.n	8008410 <_vfiprintf_r+0x22c>
 8008390:	4b29      	ldr	r3, [pc, #164]	; (8008438 <_vfiprintf_r+0x254>)
 8008392:	bb1b      	cbnz	r3, 80083dc <_vfiprintf_r+0x1f8>
 8008394:	9b03      	ldr	r3, [sp, #12]
 8008396:	3307      	adds	r3, #7
 8008398:	f023 0307 	bic.w	r3, r3, #7
 800839c:	3308      	adds	r3, #8
 800839e:	9303      	str	r3, [sp, #12]
 80083a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a2:	443b      	add	r3, r7
 80083a4:	9309      	str	r3, [sp, #36]	; 0x24
 80083a6:	e767      	b.n	8008278 <_vfiprintf_r+0x94>
 80083a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80083ac:	460c      	mov	r4, r1
 80083ae:	2001      	movs	r0, #1
 80083b0:	e7a5      	b.n	80082fe <_vfiprintf_r+0x11a>
 80083b2:	2300      	movs	r3, #0
 80083b4:	3401      	adds	r4, #1
 80083b6:	9305      	str	r3, [sp, #20]
 80083b8:	4619      	mov	r1, r3
 80083ba:	f04f 0c0a 	mov.w	ip, #10
 80083be:	4620      	mov	r0, r4
 80083c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c4:	3a30      	subs	r2, #48	; 0x30
 80083c6:	2a09      	cmp	r2, #9
 80083c8:	d903      	bls.n	80083d2 <_vfiprintf_r+0x1ee>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d0c5      	beq.n	800835a <_vfiprintf_r+0x176>
 80083ce:	9105      	str	r1, [sp, #20]
 80083d0:	e7c3      	b.n	800835a <_vfiprintf_r+0x176>
 80083d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80083d6:	4604      	mov	r4, r0
 80083d8:	2301      	movs	r3, #1
 80083da:	e7f0      	b.n	80083be <_vfiprintf_r+0x1da>
 80083dc:	ab03      	add	r3, sp, #12
 80083de:	9300      	str	r3, [sp, #0]
 80083e0:	462a      	mov	r2, r5
 80083e2:	4b16      	ldr	r3, [pc, #88]	; (800843c <_vfiprintf_r+0x258>)
 80083e4:	a904      	add	r1, sp, #16
 80083e6:	4630      	mov	r0, r6
 80083e8:	f7fd fbb8 	bl	8005b5c <_printf_float>
 80083ec:	4607      	mov	r7, r0
 80083ee:	1c78      	adds	r0, r7, #1
 80083f0:	d1d6      	bne.n	80083a0 <_vfiprintf_r+0x1bc>
 80083f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083f4:	07d9      	lsls	r1, r3, #31
 80083f6:	d405      	bmi.n	8008404 <_vfiprintf_r+0x220>
 80083f8:	89ab      	ldrh	r3, [r5, #12]
 80083fa:	059a      	lsls	r2, r3, #22
 80083fc:	d402      	bmi.n	8008404 <_vfiprintf_r+0x220>
 80083fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008400:	f7ff f8e6 	bl	80075d0 <__retarget_lock_release_recursive>
 8008404:	89ab      	ldrh	r3, [r5, #12]
 8008406:	065b      	lsls	r3, r3, #25
 8008408:	f53f af12 	bmi.w	8008230 <_vfiprintf_r+0x4c>
 800840c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800840e:	e711      	b.n	8008234 <_vfiprintf_r+0x50>
 8008410:	ab03      	add	r3, sp, #12
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	462a      	mov	r2, r5
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <_vfiprintf_r+0x258>)
 8008418:	a904      	add	r1, sp, #16
 800841a:	4630      	mov	r0, r6
 800841c:	f7fd fe42 	bl	80060a4 <_printf_i>
 8008420:	e7e4      	b.n	80083ec <_vfiprintf_r+0x208>
 8008422:	bf00      	nop
 8008424:	0800d2c8 	.word	0x0800d2c8
 8008428:	0800d2e8 	.word	0x0800d2e8
 800842c:	0800d2a8 	.word	0x0800d2a8
 8008430:	0800d4aa 	.word	0x0800d4aa
 8008434:	0800d4b4 	.word	0x0800d4b4
 8008438:	08005b5d 	.word	0x08005b5d
 800843c:	080081bf 	.word	0x080081bf
 8008440:	0800d4b0 	.word	0x0800d4b0

08008444 <_read_r>:
 8008444:	b538      	push	{r3, r4, r5, lr}
 8008446:	4d07      	ldr	r5, [pc, #28]	; (8008464 <_read_r+0x20>)
 8008448:	4604      	mov	r4, r0
 800844a:	4608      	mov	r0, r1
 800844c:	4611      	mov	r1, r2
 800844e:	2200      	movs	r2, #0
 8008450:	602a      	str	r2, [r5, #0]
 8008452:	461a      	mov	r2, r3
 8008454:	f7f9 ff88 	bl	8002368 <_read>
 8008458:	1c43      	adds	r3, r0, #1
 800845a:	d102      	bne.n	8008462 <_read_r+0x1e>
 800845c:	682b      	ldr	r3, [r5, #0]
 800845e:	b103      	cbz	r3, 8008462 <_read_r+0x1e>
 8008460:	6023      	str	r3, [r4, #0]
 8008462:	bd38      	pop	{r3, r4, r5, pc}
 8008464:	20007c48 	.word	0x20007c48

08008468 <__ascii_wctomb>:
 8008468:	b149      	cbz	r1, 800847e <__ascii_wctomb+0x16>
 800846a:	2aff      	cmp	r2, #255	; 0xff
 800846c:	bf85      	ittet	hi
 800846e:	238a      	movhi	r3, #138	; 0x8a
 8008470:	6003      	strhi	r3, [r0, #0]
 8008472:	700a      	strbls	r2, [r1, #0]
 8008474:	f04f 30ff 	movhi.w	r0, #4294967295
 8008478:	bf98      	it	ls
 800847a:	2001      	movls	r0, #1
 800847c:	4770      	bx	lr
 800847e:	4608      	mov	r0, r1
 8008480:	4770      	bx	lr

08008482 <abort>:
 8008482:	b508      	push	{r3, lr}
 8008484:	2006      	movs	r0, #6
 8008486:	f000 f82b 	bl	80084e0 <raise>
 800848a:	2001      	movs	r0, #1
 800848c:	f7f9 ff66 	bl	800235c <_exit>

08008490 <_raise_r>:
 8008490:	291f      	cmp	r1, #31
 8008492:	b538      	push	{r3, r4, r5, lr}
 8008494:	4604      	mov	r4, r0
 8008496:	460d      	mov	r5, r1
 8008498:	d904      	bls.n	80084a4 <_raise_r+0x14>
 800849a:	2316      	movs	r3, #22
 800849c:	6003      	str	r3, [r0, #0]
 800849e:	f04f 30ff 	mov.w	r0, #4294967295
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80084a6:	b112      	cbz	r2, 80084ae <_raise_r+0x1e>
 80084a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80084ac:	b94b      	cbnz	r3, 80084c2 <_raise_r+0x32>
 80084ae:	4620      	mov	r0, r4
 80084b0:	f000 f830 	bl	8008514 <_getpid_r>
 80084b4:	462a      	mov	r2, r5
 80084b6:	4601      	mov	r1, r0
 80084b8:	4620      	mov	r0, r4
 80084ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084be:	f000 b817 	b.w	80084f0 <_kill_r>
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d00a      	beq.n	80084dc <_raise_r+0x4c>
 80084c6:	1c59      	adds	r1, r3, #1
 80084c8:	d103      	bne.n	80084d2 <_raise_r+0x42>
 80084ca:	2316      	movs	r3, #22
 80084cc:	6003      	str	r3, [r0, #0]
 80084ce:	2001      	movs	r0, #1
 80084d0:	e7e7      	b.n	80084a2 <_raise_r+0x12>
 80084d2:	2400      	movs	r4, #0
 80084d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084d8:	4628      	mov	r0, r5
 80084da:	4798      	blx	r3
 80084dc:	2000      	movs	r0, #0
 80084de:	e7e0      	b.n	80084a2 <_raise_r+0x12>

080084e0 <raise>:
 80084e0:	4b02      	ldr	r3, [pc, #8]	; (80084ec <raise+0xc>)
 80084e2:	4601      	mov	r1, r0
 80084e4:	6818      	ldr	r0, [r3, #0]
 80084e6:	f7ff bfd3 	b.w	8008490 <_raise_r>
 80084ea:	bf00      	nop
 80084ec:	2000001c 	.word	0x2000001c

080084f0 <_kill_r>:
 80084f0:	b538      	push	{r3, r4, r5, lr}
 80084f2:	4d07      	ldr	r5, [pc, #28]	; (8008510 <_kill_r+0x20>)
 80084f4:	2300      	movs	r3, #0
 80084f6:	4604      	mov	r4, r0
 80084f8:	4608      	mov	r0, r1
 80084fa:	4611      	mov	r1, r2
 80084fc:	602b      	str	r3, [r5, #0]
 80084fe:	f7f9 ff25 	bl	800234c <_kill>
 8008502:	1c43      	adds	r3, r0, #1
 8008504:	d102      	bne.n	800850c <_kill_r+0x1c>
 8008506:	682b      	ldr	r3, [r5, #0]
 8008508:	b103      	cbz	r3, 800850c <_kill_r+0x1c>
 800850a:	6023      	str	r3, [r4, #0]
 800850c:	bd38      	pop	{r3, r4, r5, pc}
 800850e:	bf00      	nop
 8008510:	20007c48 	.word	0x20007c48

08008514 <_getpid_r>:
 8008514:	f7f9 bf18 	b.w	8002348 <_getpid>

08008518 <sqrtf>:
 8008518:	b508      	push	{r3, lr}
 800851a:	ed2d 8b02 	vpush	{d8}
 800851e:	eeb0 8a40 	vmov.f32	s16, s0
 8008522:	f000 f817 	bl	8008554 <__ieee754_sqrtf>
 8008526:	eeb4 8a48 	vcmp.f32	s16, s16
 800852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852e:	d60c      	bvs.n	800854a <sqrtf+0x32>
 8008530:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008550 <sqrtf+0x38>
 8008534:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8008538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853c:	d505      	bpl.n	800854a <sqrtf+0x32>
 800853e:	f7fd fa2d 	bl	800599c <__errno>
 8008542:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8008546:	2321      	movs	r3, #33	; 0x21
 8008548:	6003      	str	r3, [r0, #0]
 800854a:	ecbd 8b02 	vpop	{d8}
 800854e:	bd08      	pop	{r3, pc}
 8008550:	00000000 	.word	0x00000000

08008554 <__ieee754_sqrtf>:
 8008554:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008558:	4770      	bx	lr
	...

0800855c <_init>:
 800855c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800855e:	bf00      	nop
 8008560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008562:	bc08      	pop	{r3}
 8008564:	469e      	mov	lr, r3
 8008566:	4770      	bx	lr

08008568 <_fini>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr
