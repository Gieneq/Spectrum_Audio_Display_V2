
ASDV2_STM32F303VCT6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000951c  08008988  08008988  00018988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ea4  08011ea4  000301dc  2**0
                  CONTENTS
  4 .ARM          00000000  08011ea4  08011ea4  000301dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011ea4  08011ea4  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ea4  08011ea4  00021ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011ea8  08011ea8  00021ea8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08011eac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301dc  2**0
                  CONTENTS
 10 .bss          0000294c  200001dc  200001dc  000301dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002b28  20002b28  000301dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec9a  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002424  00000000  00000000  0003eea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ae8  00000000  00000000  000412d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a78  00000000  00000000  00041db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ed82  00000000  00000000  00042830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f18c  00000000  00000000  000615b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8d70  00000000  00000000  0007073e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000be  00000000  00000000  001294ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c78  00000000  00000000  0012956c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000338f  00000000  00000000  0012d1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008970 	.word	0x08008970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08008970 	.word	0x08008970

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__io_putchar>:

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int __io_putchar(int ch)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b0a      	cmp	r3, #10
 8000bb4:	d102      	bne.n	8000bbc <__io_putchar+0x14>
    __io_putchar('\r');
 8000bb6:	200d      	movs	r0, #13
 8000bb8:	f7ff fff6 	bl	8000ba8 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bbc:	1d39      	adds	r1, r7, #4
 8000bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <__io_putchar+0x2c>)
 8000bc6:	f003 fe7d 	bl	80048c4 <HAL_UART_Transmit>

  return 1;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	2000028c 	.word	0x2000028c

08000bd8 <benchmark>:
float32_t Input[SAMPLES];
float32_t Output[FFT_SIZE];
int led = 0;


void benchmark(){
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bda:	b08f      	sub	sp, #60	; 0x3c
 8000bdc:	af02      	add	r7, sp, #8
//	https://www.keil.com/pack/doc/CMSIS/DSP/html/group__ComplexFFT.html
	arm_cfft_radix4_instance_f32 S;	/* ARM CFFT module */
	float32_t maxValue;				/* Max FFT value is stored here */
	uint32_t maxIndex;				/* Index in Output array where max value is */
	int i = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c

	for (i = 0; i < SAMPLES; i+=2) {
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000be6:	e00f      	b.n	8000c08 <benchmark+0x30>
		/* Real part, make offset by ADC / 2 */
		Input[i] = (float32_t)(test_signal[i/2]);
 8000be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bea:	0fda      	lsrs	r2, r3, #31
 8000bec:	4413      	add	r3, r2
 8000bee:	105b      	asrs	r3, r3, #1
 8000bf0:	4aa0      	ldr	r2, [pc, #640]	; (8000e74 <benchmark+0x29c>)
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	499f      	ldr	r1, [pc, #636]	; (8000e78 <benchmark+0x2a0>)
 8000bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	440b      	add	r3, r1
 8000c00:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SAMPLES; i+=2) {
 8000c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c04:	3302      	adds	r3, #2
 8000c06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0e:	dbeb      	blt.n	8000be8 <benchmark+0x10>
	}

	for (i = 1; i < SAMPLES; i+=2) {
 8000c10:	2301      	movs	r3, #1
 8000c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c14:	e009      	b.n	8000c2a <benchmark+0x52>
		/* Imaginary part */
		Input[i] = 0;
 8000c16:	4a98      	ldr	r2, [pc, #608]	; (8000e78 <benchmark+0x2a0>)
 8000c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1a:	009b      	lsls	r3, r3, #2
 8000c1c:	4413      	add	r3, r2
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
	for (i = 1; i < SAMPLES; i+=2) {
 8000c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c26:	3302      	adds	r3, #2
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c30:	dbf1      	blt.n	8000c16 <benchmark+0x3e>
	}

	/* Initialize the CFFT/CIFFT module, intFlag = 0, doBitReverse = 1 */
	arm_cfft_radix4_init_f32(&S, FFT_SIZE, 0, 1);
 8000c32:	f107 000c 	add.w	r0, r7, #12
 8000c36:	2301      	movs	r3, #1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c3e:	f004 fac3 	bl	80051c8 <arm_cfft_radix4_init_f32>

	/* Process the data through the CFFT/CIFFT module */
	arm_cfft_radix4_f32(&S, Input);
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	498c      	ldr	r1, [pc, #560]	; (8000e78 <benchmark+0x2a0>)
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f004 fec1 	bl	80059d0 <arm_cfft_radix4_f32>

	/* Process the data through the Complex Magniture Module for calculating the magnitude at each bin */
	arm_cmplx_mag_f32(Input, Output, FFT_SIZE);
 8000c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c52:	498a      	ldr	r1, [pc, #552]	; (8000e7c <benchmark+0x2a4>)
 8000c54:	4888      	ldr	r0, [pc, #544]	; (8000e78 <benchmark+0x2a0>)
 8000c56:	f004 fedf 	bl	8005a18 <arm_cmplx_mag_f32>

	/* Calculates maxValue and returns corresponding value */
	arm_max_f32(Output, FFT_SIZE, &maxValue, &maxIndex);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	f107 0208 	add.w	r2, r7, #8
 8000c60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c64:	4885      	ldr	r0, [pc, #532]	; (8000e7c <benchmark+0x2a4>)
 8000c66:	f004 fa47 	bl	80050f8 <arm_max_f32>

	printf("START INPUT SIGNAL %d:\n", TEST_SAMPLES_COUNT);
 8000c6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c6e:	4884      	ldr	r0, [pc, #528]	; (8000e80 <benchmark+0x2a8>)
 8000c70:	f005 fcc6 	bl	8006600 <iprintf>
	for (i = 0; i < TEST_SAMPLES_COUNT; i++) {
 8000c74:	2300      	movs	r3, #0
 8000c76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c78:	e00f      	b.n	8000c9a <benchmark+0xc2>
		printf("%f, ",  test_signal[i]);
 8000c7a:	4a7e      	ldr	r2, [pc, #504]	; (8000e74 <benchmark+0x29c>)
 8000c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff fc5f 	bl	8000548 <__aeabi_f2d>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	487d      	ldr	r0, [pc, #500]	; (8000e84 <benchmark+0x2ac>)
 8000c90:	f005 fcb6 	bl	8006600 <iprintf>
	for (i = 0; i < TEST_SAMPLES_COUNT; i++) {
 8000c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c96:	3301      	adds	r3, #1
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000ca0:	dbeb      	blt.n	8000c7a <benchmark+0xa2>
	}
	printf("\n");
 8000ca2:	200a      	movs	r0, #10
 8000ca4:	f005 fcc4 	bl	8006630 <putchar>
	printf("STOP INPUT SIGNAL\n\n");
 8000ca8:	4877      	ldr	r0, [pc, #476]	; (8000e88 <benchmark+0x2b0>)
 8000caa:	f005 fd45 	bl	8006738 <puts>


	printf("START MAGNITUDES %d:\n", FFT_SIZE / 2);
 8000cae:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cb2:	4876      	ldr	r0, [pc, #472]	; (8000e8c <benchmark+0x2b4>)
 8000cb4:	f005 fca4 	bl	8006600 <iprintf>
	for (i = 0; i < FFT_SIZE / 2; i++) {
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cbc:	e00f      	b.n	8000cde <benchmark+0x106>
		printf("%f, ",  Output[i]);
 8000cbe:	4a6f      	ldr	r2, [pc, #444]	; (8000e7c <benchmark+0x2a4>)
 8000cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fc3d 	bl	8000548 <__aeabi_f2d>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	486c      	ldr	r0, [pc, #432]	; (8000e84 <benchmark+0x2ac>)
 8000cd4:	f005 fc94 	bl	8006600 <iprintf>
	for (i = 0; i < FFT_SIZE / 2; i++) {
 8000cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cda:	3301      	adds	r3, #1
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ce0:	2bff      	cmp	r3, #255	; 0xff
 8000ce2:	ddec      	ble.n	8000cbe <benchmark+0xe6>
	}
	printf("\n");
 8000ce4:	200a      	movs	r0, #10
 8000ce6:	f005 fca3 	bl	8006630 <putchar>
	printf("STOP MAGNITUDES\n\n");
 8000cea:	4869      	ldr	r0, [pc, #420]	; (8000e90 <benchmark+0x2b8>)
 8000cec:	f005 fd24 	bl	8006738 <puts>


	printf("START REAL %d:\n", SAMPLES / 2);
 8000cf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf4:	4867      	ldr	r0, [pc, #412]	; (8000e94 <benchmark+0x2bc>)
 8000cf6:	f005 fc83 	bl	8006600 <iprintf>
	for (i = 0; i < SAMPLES; i+=2) {
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cfe:	e00f      	b.n	8000d20 <benchmark+0x148>
		printf("%f, ",  Input[i]);
 8000d00:	4a5d      	ldr	r2, [pc, #372]	; (8000e78 <benchmark+0x2a0>)
 8000d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fc1c 	bl	8000548 <__aeabi_f2d>
 8000d10:	4602      	mov	r2, r0
 8000d12:	460b      	mov	r3, r1
 8000d14:	485b      	ldr	r0, [pc, #364]	; (8000e84 <benchmark+0x2ac>)
 8000d16:	f005 fc73 	bl	8006600 <iprintf>
	for (i = 0; i < SAMPLES; i+=2) {
 8000d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d1c:	3302      	adds	r3, #2
 8000d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d26:	dbeb      	blt.n	8000d00 <benchmark+0x128>
	}
	printf("\n");
 8000d28:	200a      	movs	r0, #10
 8000d2a:	f005 fc81 	bl	8006630 <putchar>
	printf("STOP REAL\n\n");
 8000d2e:	485a      	ldr	r0, [pc, #360]	; (8000e98 <benchmark+0x2c0>)
 8000d30:	f005 fd02 	bl	8006738 <puts>


	printf("START IMAG %d:\n", SAMPLES / 2);
 8000d34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d38:	4858      	ldr	r0, [pc, #352]	; (8000e9c <benchmark+0x2c4>)
 8000d3a:	f005 fc61 	bl	8006600 <iprintf>
	for (i = 1; i < SAMPLES; i+=2) {
 8000d3e:	2301      	movs	r3, #1
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d42:	e00f      	b.n	8000d64 <benchmark+0x18c>
		printf("%f, ",  Input[i]);
 8000d44:	4a4c      	ldr	r2, [pc, #304]	; (8000e78 <benchmark+0x2a0>)
 8000d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d48:	009b      	lsls	r3, r3, #2
 8000d4a:	4413      	add	r3, r2
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fbfa 	bl	8000548 <__aeabi_f2d>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	484a      	ldr	r0, [pc, #296]	; (8000e84 <benchmark+0x2ac>)
 8000d5a:	f005 fc51 	bl	8006600 <iprintf>
	for (i = 1; i < SAMPLES; i+=2) {
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	3302      	adds	r3, #2
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d6a:	dbeb      	blt.n	8000d44 <benchmark+0x16c>
	}
	printf("\n");
 8000d6c:	200a      	movs	r0, #10
 8000d6e:	f005 fc5f 	bl	8006630 <putchar>
	printf("STOP IMAG\n\n");
 8000d72:	484b      	ldr	r0, [pc, #300]	; (8000ea0 <benchmark+0x2c8>)
 8000d74:	f005 fce0 	bl	8006738 <puts>


	printf("START TEST, IT WILL TAKE %d MS...\n", INTERVAL);
 8000d78:	f242 7110 	movw	r1, #10000	; 0x2710
 8000d7c:	4849      	ldr	r0, [pc, #292]	; (8000ea4 <benchmark+0x2cc>)
 8000d7e:	f005 fc3f 	bl	8006600 <iprintf>
	uint32_t start_millis = HAL_GetTick();
 8000d82:	f000 fc49 	bl	8001618 <HAL_GetTick>
 8000d86:	6278      	str	r0, [r7, #36]	; 0x24
	float delta_millis = 0;
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
	int counter = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28

	while(HAL_GetTick() - start_millis < INTERVAL) {
 8000d92:	e016      	b.n	8000dc2 <benchmark+0x1ea>
		/* Process the data through the CFFT/CIFFT module */
		arm_cfft_radix4_f32(&S, Input);
 8000d94:	f107 030c 	add.w	r3, r7, #12
 8000d98:	4937      	ldr	r1, [pc, #220]	; (8000e78 <benchmark+0x2a0>)
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f004 fe18 	bl	80059d0 <arm_cfft_radix4_f32>

		/* Process the data through the Complex Magniture Module for calculating the magnitude at each bin */
		arm_cmplx_mag_f32(Input, Output, FFT_SIZE);
 8000da0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000da4:	4935      	ldr	r1, [pc, #212]	; (8000e7c <benchmark+0x2a4>)
 8000da6:	4834      	ldr	r0, [pc, #208]	; (8000e78 <benchmark+0x2a0>)
 8000da8:	f004 fe36 	bl	8005a18 <arm_cmplx_mag_f32>

		/* Calculates maxValue and returns corresponding value */
		arm_max_f32(Output, FFT_SIZE, &maxValue, &maxIndex);
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	f107 0208 	add.w	r2, r7, #8
 8000db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db6:	4831      	ldr	r0, [pc, #196]	; (8000e7c <benchmark+0x2a4>)
 8000db8:	f004 f99e 	bl	80050f8 <arm_max_f32>
		++counter;
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
	while(HAL_GetTick() - start_millis < INTERVAL) {
 8000dc2:	f000 fc29 	bl	8001618 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d9df      	bls.n	8000d94 <benchmark+0x1bc>
	}

	delta_millis = HAL_GetTick() - start_millis;
 8000dd4:	f000 fc20 	bl	8001618 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	ee07 3a90 	vmov	s15, r3
 8000de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000de6:	edc7 7a08 	vstr	s15, [r7, #32]
	printf("STOP TEST! DONE %d ITERATIONS AND WITH %d FFT POINTS GOT %d Hz, T = %d US.\n", counter, FFT_SIZE, (int)(counter*1000.0/delta_millis), (int)(delta_millis*1000.0/counter));
 8000dea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dec:	f7ff fb9a 	bl	8000524 <__aeabi_i2d>
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	4b2c      	ldr	r3, [pc, #176]	; (8000ea8 <benchmark+0x2d0>)
 8000df6:	f7ff fbff 	bl	80005f8 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4614      	mov	r4, r2
 8000e00:	461d      	mov	r5, r3
 8000e02:	6a38      	ldr	r0, [r7, #32]
 8000e04:	f7ff fba0 	bl	8000548 <__aeabi_f2d>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	4629      	mov	r1, r5
 8000e10:	f7ff fd1c 	bl	800084c <__aeabi_ddiv>
 8000e14:	4602      	mov	r2, r0
 8000e16:	460b      	mov	r3, r1
 8000e18:	4610      	mov	r0, r2
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f7ff fe9c 	bl	8000b58 <__aeabi_d2iz>
 8000e20:	4606      	mov	r6, r0
 8000e22:	6a38      	ldr	r0, [r7, #32]
 8000e24:	f7ff fb90 	bl	8000548 <__aeabi_f2d>
 8000e28:	f04f 0200 	mov.w	r2, #0
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <benchmark+0x2d0>)
 8000e2e:	f7ff fbe3 	bl	80005f8 <__aeabi_dmul>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4614      	mov	r4, r2
 8000e38:	461d      	mov	r5, r3
 8000e3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e3c:	f7ff fb72 	bl	8000524 <__aeabi_i2d>
 8000e40:	4602      	mov	r2, r0
 8000e42:	460b      	mov	r3, r1
 8000e44:	4620      	mov	r0, r4
 8000e46:	4629      	mov	r1, r5
 8000e48:	f7ff fd00 	bl	800084c <__aeabi_ddiv>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	460b      	mov	r3, r1
 8000e50:	4610      	mov	r0, r2
 8000e52:	4619      	mov	r1, r3
 8000e54:	f7ff fe80 	bl	8000b58 <__aeabi_d2iz>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	9300      	str	r3, [sp, #0]
 8000e5c:	4633      	mov	r3, r6
 8000e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e64:	4811      	ldr	r0, [pc, #68]	; (8000eac <benchmark+0x2d4>)
 8000e66:	f005 fbcb 	bl	8006600 <iprintf>

}
 8000e6a:	bf00      	nop
 8000e6c:	3734      	adds	r7, #52	; 0x34
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e72:	bf00      	nop
 8000e74:	08008a90 	.word	0x08008a90
 8000e78:	20000310 	.word	0x20000310
 8000e7c:	20001310 	.word	0x20001310
 8000e80:	08008988 	.word	0x08008988
 8000e84:	080089a0 	.word	0x080089a0
 8000e88:	080089a8 	.word	0x080089a8
 8000e8c:	080089bc 	.word	0x080089bc
 8000e90:	080089d4 	.word	0x080089d4
 8000e94:	080089e8 	.word	0x080089e8
 8000e98:	080089f8 	.word	0x080089f8
 8000e9c:	08008a04 	.word	0x08008a04
 8000ea0:	08008a14 	.word	0x08008a14
 8000ea4:	08008a20 	.word	0x08008a20
 8000ea8:	408f4000 	.word	0x408f4000
 8000eac:	08008a44 	.word	0x08008a44

08000eb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb4:	f000 fb56 	bl	8001564 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb8:	f000 f81a 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ebc:	f000 f930 	bl	8001120 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ec0:	f000 f910 	bl	80010e4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ec4:	f000 f86e 	bl	8000fa4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000ec8:	f000 f8dc 	bl	8001084 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  volatile static uint16_t value[2048];

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <main+0x38>)
 8000ed0:	f000 fec8 	bl	8001c64 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2048);
 8000ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ed8:	4904      	ldr	r1, [pc, #16]	; (8000eec <main+0x3c>)
 8000eda:	4803      	ldr	r0, [pc, #12]	; (8000ee8 <main+0x38>)
 8000edc:	f000 fda6 	bl	8001a2c <HAL_ADC_Start_DMA>

  benchmark();
 8000ee0:	f7ff fe7a 	bl	8000bd8 <benchmark>


  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <main+0x34>
 8000ee6:	bf00      	nop
 8000ee8:	200001f8 	.word	0x200001f8
 8000eec:	20001b10 	.word	0x20001b10

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09e      	sub	sp, #120	; 0x78
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000efa:	2228      	movs	r2, #40	; 0x28
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f004 ff0c 	bl	8005d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	463b      	mov	r3, r7
 8000f16:	223c      	movs	r2, #60	; 0x3c
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f004 fefe 	bl	8005d1c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f20:	2302      	movs	r3, #2
 8000f22:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f24:	2301      	movs	r3, #1
 8000f26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f28:	2310      	movs	r3, #16
 8000f2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f30:	2300      	movs	r3, #0
 8000f32:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f34:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 f84e 	bl	8002fe0 <HAL_RCC_OscConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f4a:	f000 f901 	bl	8001150 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4e:	230f      	movs	r3, #15
 8000f50:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f52:	2302      	movs	r3, #2
 8000f54:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f56:	2300      	movs	r3, #0
 8000f58:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000f68:	2102      	movs	r1, #2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 f876 	bl	800405c <HAL_RCC_ClockConfig>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f76:	f000 f8eb 	bl	8001150 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000f7a:	2382      	movs	r3, #130	; 0x82
 8000f7c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000f82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f003 fa9c 	bl	80044c8 <HAL_RCCEx_PeriphCLKConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f96:	f000 f8db 	bl	8001150 <Error_Handler>
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	3778      	adds	r7, #120	; 0x78
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	; 0x28
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000faa:	f107 031c 	add.w	r3, r7, #28
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000fc8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fcc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000fce:	4b2c      	ldr	r3, [pc, #176]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd4:	4b2a      	ldr	r3, [pc, #168]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe0:	4b27      	ldr	r3, [pc, #156]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fee:	4b24      	ldr	r3, [pc, #144]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_ADC1_Init+0xdc>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_ADC1_Init+0xdc>)
 8001002:	2201      	movs	r2, #1
 8001004:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_ADC1_Init+0xdc>)
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_ADC1_Init+0xdc>)
 8001010:	2204      	movs	r2, #4
 8001012:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_ADC1_Init+0xdc>)
 8001016:	2200      	movs	r2, #0
 8001018:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_ADC1_Init+0xdc>)
 800101c:	2200      	movs	r2, #0
 800101e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001020:	4817      	ldr	r0, [pc, #92]	; (8001080 <MX_ADC1_Init+0xdc>)
 8001022:	f000 fb23 	bl	800166c <HAL_ADC_Init>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 f890 	bl	8001150 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	4811      	ldr	r0, [pc, #68]	; (8001080 <MX_ADC1_Init+0xdc>)
 800103c:	f001 f970 	bl	8002320 <HAL_ADCEx_MultiModeConfigChannel>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001046:	f000 f883 	bl	8001150 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800104a:	2301      	movs	r3, #1
 800104c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800104e:	2301      	movs	r3, #1
 8001050:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_ADC1_Init+0xdc>)
 8001068:	f000 fe6e 	bl	8001d48 <HAL_ADC_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8001072:	f000 f86d 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	; 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200001f8 	.word	0x200001f8

08001084 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_USART2_UART_Init+0x58>)
 800108a:	4a15      	ldr	r2, [pc, #84]	; (80010e0 <MX_USART2_UART_Init+0x5c>)
 800108c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_USART2_UART_Init+0x58>)
 8001090:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_USART2_UART_Init+0x58>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_USART2_UART_Init+0x58>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_USART2_UART_Init+0x58>)
 80010c8:	f003 fbae 	bl	8004828 <HAL_UART_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010d2:	f000 f83d 	bl	8001150 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000028c 	.word	0x2000028c
 80010e0:	40004400 	.word	0x40004400

080010e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_DMA_Init+0x38>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <MX_DMA_Init+0x38>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6153      	str	r3, [r2, #20]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_DMA_Init+0x38>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	607b      	str	r3, [r7, #4]
 8001100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	200b      	movs	r0, #11
 8001108:	f001 fc07 	bl	800291a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800110c:	200b      	movs	r0, #11
 800110e:	f001 fc20 	bl	8002952 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	; (800114c <MX_GPIO_Init+0x2c>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a08      	ldr	r2, [pc, #32]	; (800114c <MX_GPIO_Init+0x2c>)
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b06      	ldr	r3, [pc, #24]	; (800114c <MX_GPIO_Init+0x2c>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	4b0f      	ldr	r3, [pc, #60]	; (80011a0 <HAL_MspInit+0x44>)
 8001164:	699b      	ldr	r3, [r3, #24]
 8001166:	4a0e      	ldr	r2, [pc, #56]	; (80011a0 <HAL_MspInit+0x44>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6193      	str	r3, [r2, #24]
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <HAL_MspInit+0x44>)
 8001170:	699b      	ldr	r3, [r3, #24]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <HAL_MspInit+0x44>)
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	4a08      	ldr	r2, [pc, #32]	; (80011a0 <HAL_MspInit+0x44>)
 8001180:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001184:	61d3      	str	r3, [r2, #28]
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_MspInit+0x44>)
 8001188:	69db      	ldr	r3, [r3, #28]
 800118a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000

080011a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b08a      	sub	sp, #40	; 0x28
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c4:	d14c      	bne.n	8001260 <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80011c6:	4b28      	ldr	r3, [pc, #160]	; (8001268 <HAL_ADC_MspInit+0xc4>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4a27      	ldr	r2, [pc, #156]	; (8001268 <HAL_ADC_MspInit+0xc4>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6153      	str	r3, [r2, #20]
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_ADC_MspInit+0xc4>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011de:	4b22      	ldr	r3, [pc, #136]	; (8001268 <HAL_ADC_MspInit+0xc4>)
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	4a21      	ldr	r2, [pc, #132]	; (8001268 <HAL_ADC_MspInit+0xc4>)
 80011e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011e8:	6153      	str	r3, [r2, #20]
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <HAL_ADC_MspInit+0xc4>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	60fb      	str	r3, [r7, #12]
 80011f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011f6:	2301      	movs	r3, #1
 80011f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fa:	2303      	movs	r3, #3
 80011fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120c:	f001 fd6e 	bl	8002cec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_ADC_MspInit+0xc8>)
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <HAL_ADC_MspInit+0xcc>)
 8001214:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <HAL_ADC_MspInit+0xc8>)
 8001218:	2200      	movs	r2, #0
 800121a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_ADC_MspInit+0xc8>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <HAL_ADC_MspInit+0xc8>)
 8001224:	2280      	movs	r2, #128	; 0x80
 8001226:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <HAL_ADC_MspInit+0xc8>)
 800122a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_ADC_MspInit+0xc8>)
 8001232:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001236:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_ADC_MspInit+0xc8>)
 800123a:	2220      	movs	r2, #32
 800123c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_ADC_MspInit+0xc8>)
 8001240:	2200      	movs	r2, #0
 8001242:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001244:	4809      	ldr	r0, [pc, #36]	; (800126c <HAL_ADC_MspInit+0xc8>)
 8001246:	f001 fb9e 	bl	8002986 <HAL_DMA_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8001250:	f7ff ff7e 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <HAL_ADC_MspInit+0xc8>)
 8001258:	639a      	str	r2, [r3, #56]	; 0x38
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <HAL_ADC_MspInit+0xc8>)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001260:	bf00      	nop
 8001262:	3728      	adds	r7, #40	; 0x28
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40021000 	.word	0x40021000
 800126c:	20000248 	.word	0x20000248
 8001270:	40020008 	.word	0x40020008

08001274 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <HAL_UART_MspInit+0x7c>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d128      	bne.n	80012e8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001296:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_UART_MspInit+0x80>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a16      	ldr	r2, [pc, #88]	; (80012f4 <HAL_UART_MspInit+0x80>)
 800129c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b14      	ldr	r3, [pc, #80]	; (80012f4 <HAL_UART_MspInit+0x80>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_UART_MspInit+0x80>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a10      	ldr	r2, [pc, #64]	; (80012f4 <HAL_UART_MspInit+0x80>)
 80012b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <HAL_UART_MspInit+0x80>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012c6:	230c      	movs	r3, #12
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d2:	2303      	movs	r3, #3
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012d6:	2307      	movs	r3, #7
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0314 	add.w	r3, r7, #20
 80012de:	4619      	mov	r1, r3
 80012e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e4:	f001 fd02 	bl	8002cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	; 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40004400 	.word	0x40004400
 80012f4:	40021000 	.word	0x40021000

080012f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <NMI_Handler+0x4>

080012fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <HardFault_Handler+0x4>

08001304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <MemManage_Handler+0x4>

0800130a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800130e:	e7fe      	b.n	800130e <BusFault_Handler+0x4>

08001310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001314:	e7fe      	b.n	8001314 <UsageFault_Handler+0x4>

08001316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001316:	b480      	push	{r7}
 8001318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001332:	b480      	push	{r7}
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001344:	f000 f954 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}

0800134c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001350:	4802      	ldr	r0, [pc, #8]	; (800135c <DMA1_Channel1_IRQHandler+0x10>)
 8001352:	f001 fbbe 	bl	8002ad2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000248 	.word	0x20000248

08001360 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
	return 1;
 8001364:	2301      	movs	r3, #1
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <_kill>:

int _kill(int pid, int sig)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800137a:	f004 fca5 	bl	8005cc8 <__errno>
 800137e:	4603      	mov	r3, r0
 8001380:	2216      	movs	r2, #22
 8001382:	601a      	str	r2, [r3, #0]
	return -1;
 8001384:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001388:	4618      	mov	r0, r3
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <_exit>:

void _exit (int status)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f7ff ffe7 	bl	8001370 <_kill>
	while (1) {}		/* Make sure we hang here */
 80013a2:	e7fe      	b.n	80013a2 <_exit+0x12>

080013a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	e00a      	b.n	80013cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013b6:	f3af 8000 	nop.w
 80013ba:	4601      	mov	r1, r0
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1c5a      	adds	r2, r3, #1
 80013c0:	60ba      	str	r2, [r7, #8]
 80013c2:	b2ca      	uxtb	r2, r1
 80013c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	3301      	adds	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dbf0      	blt.n	80013b6 <_read+0x12>
	}

return len;
 80013d4:	687b      	ldr	r3, [r7, #4]
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b086      	sub	sp, #24
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	60f8      	str	r0, [r7, #12]
 80013e6:	60b9      	str	r1, [r7, #8]
 80013e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	e009      	b.n	8001404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	60ba      	str	r2, [r7, #8]
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fbd5 	bl	8000ba8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	3301      	adds	r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf1      	blt.n	80013f0 <_write+0x12>
	}
	return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <_close>:

int _close(int file)
{
 8001416:	b480      	push	{r7}
 8001418:	b083      	sub	sp, #12
 800141a:	af00      	add	r7, sp, #0
 800141c:	6078      	str	r0, [r7, #4]
	return -1;
 800141e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800143e:	605a      	str	r2, [r3, #4]
	return 0;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_isatty>:

int _isatty(int file)
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return 1;
 8001456:	2301      	movs	r3, #1
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	60f8      	str	r0, [r7, #12]
 800146c:	60b9      	str	r1, [r7, #8]
 800146e:	607a      	str	r2, [r7, #4]
	return 0;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f004 fc0a 	bl	8005cc8 <__errno>
 80014b4:	4603      	mov	r3, r0
 80014b6:	220c      	movs	r2, #12
 80014b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000a000 	.word	0x2000a000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	20002b10 	.word	0x20002b10
 80014e8:	20002b28 	.word	0x20002b28

080014ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <SystemInit+0x20>)
 80014f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <SystemInit+0x20>)
 80014f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001510:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001548 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x6>)
  ldr r1, =_edata
 8001516:	490e      	ldr	r1, [pc, #56]	; (8001550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001518:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <LoopForever+0xe>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800151c:	e002      	b.n	8001524 <LoopCopyDataInit>

0800151e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800151e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001522:	3304      	adds	r3, #4

08001524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001528:	d3f9      	bcc.n	800151e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152a:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800152c:	4c0b      	ldr	r4, [pc, #44]	; (800155c <LoopForever+0x16>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001530:	e001      	b.n	8001536 <LoopFillZerobss>

08001532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001534:	3204      	adds	r2, #4

08001536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001538:	d3fb      	bcc.n	8001532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800153a:	f7ff ffd7 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800153e:	f004 fbc9 	bl	8005cd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001542:	f7ff fcb5 	bl	8000eb0 <main>

08001546 <LoopForever>:

LoopForever:
    b LoopForever
 8001546:	e7fe      	b.n	8001546 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001548:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800154c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001550:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001554:	08011eac 	.word	0x08011eac
  ldr r2, =_sbss
 8001558:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800155c:	20002b28 	.word	0x20002b28

08001560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001560:	e7fe      	b.n	8001560 <ADC1_2_IRQHandler>
	...

08001564 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_Init+0x28>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a07      	ldr	r2, [pc, #28]	; (800158c <HAL_Init+0x28>)
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001574:	2003      	movs	r0, #3
 8001576:	f001 f9c5 	bl	8002904 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800157a:	200f      	movs	r0, #15
 800157c:	f000 f808 	bl	8001590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001580:	f7ff fdec 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40022000 	.word	0x40022000

08001590 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x54>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <HAL_InitTick+0x58>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f001 f9dd 	bl	800296e <HAL_SYSTICK_Config>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e00e      	b.n	80015dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2b0f      	cmp	r3, #15
 80015c2:	d80a      	bhi.n	80015da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c4:	2200      	movs	r2, #0
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	f04f 30ff 	mov.w	r0, #4294967295
 80015cc:	f001 f9a5 	bl	800291a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015d0:	4a06      	ldr	r2, [pc, #24]	; (80015ec <HAL_InitTick+0x5c>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	e000      	b.n	80015dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20000000 	.word	0x20000000
 80015e8:	20000008 	.word	0x20000008
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	20002b14 	.word	0x20002b14

08001618 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;  
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20002b14 	.word	0x20002b14

08001630 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b09a      	sub	sp, #104	; 0x68
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800167a:	2300      	movs	r3, #0
 800167c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e1c9      	b.n	8001a20 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	691b      	ldr	r3, [r3, #16]
 8001690:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b00      	cmp	r3, #0
 800169c:	d176      	bne.n	800178c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d152      	bne.n	800174c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff fd6f 	bl	80011a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d13b      	bne.n	800174c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f000 ffdf 	bl	8002698 <ADC_Disable>
 80016da:	4603      	mov	r3, r0
 80016dc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f003 0310 	and.w	r3, r3, #16
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d12f      	bne.n	800174c <HAL_ADC_Init+0xe0>
 80016ec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d12b      	bne.n	800174c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016fc:	f023 0302 	bic.w	r3, r3, #2
 8001700:	f043 0202 	orr.w	r2, r3, #2
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001716:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001726:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001728:	4b86      	ldr	r3, [pc, #536]	; (8001944 <HAL_ADC_Init+0x2d8>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a86      	ldr	r2, [pc, #536]	; (8001948 <HAL_ADC_Init+0x2dc>)
 800172e:	fba2 2303 	umull	r2, r3, r2, r3
 8001732:	0c9a      	lsrs	r2, r3, #18
 8001734:	4613      	mov	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800173e:	e002      	b.n	8001746 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	3b01      	subs	r3, #1
 8001744:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f9      	bne.n	8001740 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001768:	d110      	bne.n	800178c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f023 0312 	bic.w	r3, r3, #18
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f043 0201 	orr.w	r2, r3, #1
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001790:	f003 0310 	and.w	r3, r3, #16
 8001794:	2b00      	cmp	r3, #0
 8001796:	f040 8136 	bne.w	8001a06 <HAL_ADC_Init+0x39a>
 800179a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 8131 	bne.w	8001a06 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f040 8129 	bne.w	8001a06 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80017bc:	f043 0202 	orr.w	r2, r3, #2
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017cc:	d004      	beq.n	80017d8 <HAL_ADC_Init+0x16c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a5e      	ldr	r2, [pc, #376]	; (800194c <HAL_ADC_Init+0x2e0>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_Init+0x170>
 80017d8:	4b5d      	ldr	r3, [pc, #372]	; (8001950 <HAL_ADC_Init+0x2e4>)
 80017da:	e000      	b.n	80017de <HAL_ADC_Init+0x172>
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <HAL_ADC_Init+0x2e8>)
 80017de:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017e8:	d102      	bne.n	80017f0 <HAL_ADC_Init+0x184>
 80017ea:	4b58      	ldr	r3, [pc, #352]	; (800194c <HAL_ADC_Init+0x2e0>)
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	e01a      	b.n	8001826 <HAL_ADC_Init+0x1ba>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a55      	ldr	r2, [pc, #340]	; (800194c <HAL_ADC_Init+0x2e0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d103      	bne.n	8001802 <HAL_ADC_Init+0x196>
 80017fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	e011      	b.n	8001826 <HAL_ADC_Init+0x1ba>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a54      	ldr	r2, [pc, #336]	; (8001958 <HAL_ADC_Init+0x2ec>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d102      	bne.n	8001812 <HAL_ADC_Init+0x1a6>
 800180c:	4b53      	ldr	r3, [pc, #332]	; (800195c <HAL_ADC_Init+0x2f0>)
 800180e:	60fb      	str	r3, [r7, #12]
 8001810:	e009      	b.n	8001826 <HAL_ADC_Init+0x1ba>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_ADC_Init+0x2f0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d102      	bne.n	8001822 <HAL_ADC_Init+0x1b6>
 800181c:	4b4e      	ldr	r3, [pc, #312]	; (8001958 <HAL_ADC_Init+0x2ec>)
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e001      	b.n	8001826 <HAL_ADC_Init+0x1ba>
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d108      	bne.n	8001846 <HAL_ADC_Init+0x1da>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_ADC_Init+0x1da>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_ADC_Init+0x1dc>
 8001846:	2300      	movs	r3, #0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d11c      	bne.n	8001886 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800184c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800184e:	2b00      	cmp	r3, #0
 8001850:	d010      	beq.n	8001874 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 0303 	and.w	r3, r3, #3
 800185a:	2b01      	cmp	r3, #1
 800185c:	d107      	bne.n	800186e <HAL_ADC_Init+0x202>
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b01      	cmp	r3, #1
 8001868:	d101      	bne.n	800186e <HAL_ADC_Init+0x202>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_ADC_Init+0x204>
 800186e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001870:	2b00      	cmp	r3, #0
 8001872:	d108      	bne.n	8001886 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	431a      	orrs	r2, r3
 8001882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001884:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	7e5b      	ldrb	r3, [r3, #25]
 800188a:	035b      	lsls	r3, r3, #13
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001890:	2a01      	cmp	r2, #1
 8001892:	d002      	beq.n	800189a <HAL_ADC_Init+0x22e>
 8001894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001898:	e000      	b.n	800189c <HAL_ADC_Init+0x230>
 800189a:	2200      	movs	r2, #0
 800189c:	431a      	orrs	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018ac:	4313      	orrs	r3, r2
 80018ae:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d11b      	bne.n	80018f2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	7e5b      	ldrb	r3, [r3, #25]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	3b01      	subs	r3, #1
 80018c8:	045a      	lsls	r2, r3, #17
 80018ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80018cc:	4313      	orrs	r3, r2
 80018ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d2:	663b      	str	r3, [r7, #96]	; 0x60
 80018d4:	e00d      	b.n	80018f2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80018de:	f043 0220 	orr.w	r2, r3, #32
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ea:	f043 0201 	orr.w	r2, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d03a      	beq.n	8001970 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <HAL_ADC_Init+0x2ec>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d004      	beq.n	800190e <HAL_ADC_Init+0x2a2>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a14      	ldr	r2, [pc, #80]	; (800195c <HAL_ADC_Init+0x2f0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d128      	bne.n	8001960 <HAL_ADC_Init+0x2f4>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001916:	d012      	beq.n	800193e <HAL_ADC_Init+0x2d2>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001920:	d00a      	beq.n	8001938 <HAL_ADC_Init+0x2cc>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001926:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 800192a:	d002      	beq.n	8001932 <HAL_ADC_Init+0x2c6>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001930:	e018      	b.n	8001964 <HAL_ADC_Init+0x2f8>
 8001932:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001936:	e015      	b.n	8001964 <HAL_ADC_Init+0x2f8>
 8001938:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800193c:	e012      	b.n	8001964 <HAL_ADC_Init+0x2f8>
 800193e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001942:	e00f      	b.n	8001964 <HAL_ADC_Init+0x2f8>
 8001944:	20000000 	.word	0x20000000
 8001948:	431bde83 	.word	0x431bde83
 800194c:	50000100 	.word	0x50000100
 8001950:	50000300 	.word	0x50000300
 8001954:	50000700 	.word	0x50000700
 8001958:	50000400 	.word	0x50000400
 800195c:	50000500 	.word	0x50000500
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001968:	4313      	orrs	r3, r2
 800196a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800196c:	4313      	orrs	r3, r2
 800196e:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f003 030c 	and.w	r3, r3, #12
 800197a:	2b00      	cmp	r3, #0
 800197c:	d114      	bne.n	80019a8 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800198c:	f023 0302 	bic.w	r3, r3, #2
 8001990:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7e1b      	ldrb	r3, [r3, #24]
 8001996:	039a      	lsls	r2, r3, #14
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4313      	orrs	r3, r2
 80019a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80019a4:	4313      	orrs	r3, r2
 80019a6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <HAL_ADC_Init+0x3bc>)
 80019b0:	4013      	ands	r3, r2
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	6812      	ldr	r2, [r2, #0]
 80019b6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80019b8:	430b      	orrs	r3, r1
 80019ba:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	d10c      	bne.n	80019de <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f023 010f 	bic.w	r1, r3, #15
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	69db      	ldr	r3, [r3, #28]
 80019d2:	1e5a      	subs	r2, r3, #1
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
 80019dc:	e007      	b.n	80019ee <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 020f 	bic.w	r2, r2, #15
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f023 0303 	bic.w	r3, r3, #3
 80019fc:	f043 0201 	orr.w	r2, r3, #1
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40
 8001a04:	e00a      	b.n	8001a1c <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f023 0312 	bic.w	r3, r3, #18
 8001a0e:	f043 0210 	orr.w	r2, r3, #16
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a16:	2301      	movs	r3, #1
 8001a18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3768      	adds	r7, #104	; 0x68
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	fff0c007 	.word	0xfff0c007

08001a2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 80f7 	bne.w	8001c3a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Start_DMA+0x2e>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e0f2      	b.n	8001c40 <HAL_ADC_Start_DMA+0x214>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a6a:	d004      	beq.n	8001a76 <HAL_ADC_Start_DMA+0x4a>
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a75      	ldr	r2, [pc, #468]	; (8001c48 <HAL_ADC_Start_DMA+0x21c>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d109      	bne.n	8001a8a <HAL_ADC_Start_DMA+0x5e>
 8001a76:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <HAL_ADC_Start_DMA+0x220>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f003 031f 	and.w	r3, r3, #31
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	bf0c      	ite	eq
 8001a82:	2301      	moveq	r3, #1
 8001a84:	2300      	movne	r3, #0
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	e008      	b.n	8001a9c <HAL_ADC_Start_DMA+0x70>
 8001a8a:	4b71      	ldr	r3, [pc, #452]	; (8001c50 <HAL_ADC_Start_DMA+0x224>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80c5 	beq.w	8001c2c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f000 fd94 	bl	80025d0 <ADC_Enable>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f040 80b7 	bne.w	8001c22 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad0:	d004      	beq.n	8001adc <HAL_ADC_Start_DMA+0xb0>
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <HAL_ADC_Start_DMA+0x21c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d106      	bne.n	8001aea <HAL_ADC_Start_DMA+0xbe>
 8001adc:	4b5b      	ldr	r3, [pc, #364]	; (8001c4c <HAL_ADC_Start_DMA+0x220>)
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d010      	beq.n	8001b0a <HAL_ADC_Start_DMA+0xde>
 8001ae8:	e005      	b.n	8001af6 <HAL_ADC_Start_DMA+0xca>
 8001aea:	4b59      	ldr	r3, [pc, #356]	; (8001c50 <HAL_ADC_Start_DMA+0x224>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 031f 	and.w	r3, r3, #31
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d009      	beq.n	8001b0a <HAL_ADC_Start_DMA+0xde>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001afe:	d004      	beq.n	8001b0a <HAL_ADC_Start_DMA+0xde>
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a53      	ldr	r2, [pc, #332]	; (8001c54 <HAL_ADC_Start_DMA+0x228>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d115      	bne.n	8001b36 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d036      	beq.n	8001b92 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b28:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b2c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001b34:	e02d      	b.n	8001b92 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b4a:	d004      	beq.n	8001b56 <HAL_ADC_Start_DMA+0x12a>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a3d      	ldr	r2, [pc, #244]	; (8001c48 <HAL_ADC_Start_DMA+0x21c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d10a      	bne.n	8001b6c <HAL_ADC_Start_DMA+0x140>
 8001b56:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	e008      	b.n	8001b7e <HAL_ADC_Start_DMA+0x152>
 8001b6c:	4b39      	ldr	r3, [pc, #228]	; (8001c54 <HAL_ADC_Start_DMA+0x228>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	bf14      	ite	ne
 8001b78:	2301      	movne	r3, #1
 8001b7a:	2300      	moveq	r3, #0
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9e:	d106      	bne.n	8001bae <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba4:	f023 0206 	bic.w	r2, r3, #6
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	645a      	str	r2, [r3, #68]	; 0x44
 8001bac:	e002      	b.n	8001bb4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc0:	4a25      	ldr	r2, [pc, #148]	; (8001c58 <HAL_ADC_Start_DMA+0x22c>)
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	4a24      	ldr	r2, [pc, #144]	; (8001c5c <HAL_ADC_Start_DMA+0x230>)
 8001bca:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd0:	4a23      	ldr	r2, [pc, #140]	; (8001c60 <HAL_ADC_Start_DMA+0x234>)
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	221c      	movs	r2, #28
 8001bda:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	685a      	ldr	r2, [r3, #4]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f042 0210 	orr.w	r2, r2, #16
 8001bea:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f042 0201 	orr.w	r2, r2, #1
 8001bfa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	3340      	adds	r3, #64	; 0x40
 8001c06:	4619      	mov	r1, r3
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f000 ff02 	bl	8002a14 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0204 	orr.w	r2, r2, #4
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	e00d      	b.n	8001c3e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c2a:	e008      	b.n	8001c3e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001c38:	e001      	b.n	8001c3e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	50000100 	.word	0x50000100
 8001c4c:	50000300 	.word	0x50000300
 8001c50:	50000700 	.word	0x50000700
 8001c54:	50000400 	.word	0x50000400
 8001c58:	08002505 	.word	0x08002505
 8001c5c:	0800257f 	.word	0x0800257f
 8001c60:	0800259b 	.word	0x0800259b

08001c64 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d101      	bne.n	8001c80 <HAL_ADCEx_Calibration_Start+0x1c>
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e05f      	b.n	8001d40 <HAL_ADCEx_Calibration_Start+0xdc>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fd05 	bl	8002698 <ADC_Disable>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d14e      	bne.n	8001d36 <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8001cac:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d107      	bne.n	8001cc4 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cc2:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689a      	ldr	r2, [r3, #8]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001cd2:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001cd4:	f7ff fca0 	bl	8001618 <HAL_GetTick>
 8001cd8:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cda:	e01c      	b.n	8001d16 <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001cdc:	f7ff fc9c 	bl	8001618 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b0a      	cmp	r3, #10
 8001ce8:	d915      	bls.n	8001d16 <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001cf8:	d10d      	bne.n	8001d16 <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f023 0312 	bic.w	r3, r3, #18
 8001d02:	f043 0210 	orr.w	r2, r3, #16
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e014      	b.n	8001d40 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001d20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d24:	d0da      	beq.n	8001cdc <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	f043 0201 	orr.w	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3710      	adds	r7, #16
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}

08001d48 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b09b      	sub	sp, #108	; 0x6c
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d101      	bne.n	8001d6a <HAL_ADC_ConfigChannel+0x22>
 8001d66:	2302      	movs	r3, #2
 8001d68:	e2ca      	b.n	8002300 <HAL_ADC_ConfigChannel+0x5b8>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 0304 	and.w	r3, r3, #4
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f040 82ae 	bne.w	80022de <HAL_ADC_ConfigChannel+0x596>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d81c      	bhi.n	8001dc4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	4613      	mov	r3, r2
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	4413      	add	r3, r2
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	231f      	movs	r3, #31
 8001da0:	4093      	lsls	r3, r2
 8001da2:	43db      	mvns	r3, r3
 8001da4:	4019      	ands	r1, r3
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	6818      	ldr	r0, [r3, #0]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc2:	e063      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b09      	cmp	r3, #9
 8001dca:	d81e      	bhi.n	8001e0a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	3b1e      	subs	r3, #30
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	4019      	ands	r1, r3
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	4413      	add	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	3b1e      	subs	r3, #30
 8001dfc:	fa00 f203 	lsl.w	r2, r0, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	430a      	orrs	r2, r1
 8001e06:	635a      	str	r2, [r3, #52]	; 0x34
 8001e08:	e040      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	2b0e      	cmp	r3, #14
 8001e10:	d81e      	bhi.n	8001e50 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	3b3c      	subs	r3, #60	; 0x3c
 8001e26:	221f      	movs	r2, #31
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	4019      	ands	r1, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685a      	ldr	r2, [r3, #4]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	3b3c      	subs	r3, #60	; 0x3c
 8001e42:	fa00 f203 	lsl.w	r2, r0, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e4e:	e01d      	b.n	8001e8c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	4413      	add	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	3b5a      	subs	r3, #90	; 0x5a
 8001e64:	221f      	movs	r2, #31
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4019      	ands	r1, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	3b5a      	subs	r3, #90	; 0x5a
 8001e80:	fa00 f203 	lsl.w	r2, r0, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	f040 80e5 	bne.w	8002066 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b09      	cmp	r3, #9
 8001ea2:	d91c      	bls.n	8001ede <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6999      	ldr	r1, [r3, #24]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	3b1e      	subs	r3, #30
 8001eb6:	2207      	movs	r2, #7
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	4019      	ands	r1, r3
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6898      	ldr	r0, [r3, #8]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b1e      	subs	r3, #30
 8001ed0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	619a      	str	r2, [r3, #24]
 8001edc:	e019      	b.n	8001f12 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	6959      	ldr	r1, [r3, #20]
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	2207      	movs	r2, #7
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	4019      	ands	r1, r3
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	6898      	ldr	r0, [r3, #8]
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4613      	mov	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	fa00 f203 	lsl.w	r2, r0, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	08db      	lsrs	r3, r3, #3
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	2b03      	cmp	r3, #3
 8001f32:	d84f      	bhi.n	8001fd4 <HAL_ADC_ConfigChannel+0x28c>
 8001f34:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <HAL_ADC_ConfigChannel+0x1f4>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08001f4d 	.word	0x08001f4d
 8001f40:	08001f6f 	.word	0x08001f6f
 8001f44:	08001f91 	.word	0x08001f91
 8001f48:	08001fb3 	.word	0x08001fb3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f52:	4b9a      	ldr	r3, [pc, #616]	; (80021bc <HAL_ADC_ConfigChannel+0x474>)
 8001f54:	4013      	ands	r3, r2
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	0691      	lsls	r1, r2, #26
 8001f5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f6a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f6c:	e07e      	b.n	800206c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f74:	4b91      	ldr	r3, [pc, #580]	; (80021bc <HAL_ADC_ConfigChannel+0x474>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	0691      	lsls	r1, r2, #26
 8001f7e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f80:	430a      	orrs	r2, r1
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f8c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f8e:	e06d      	b.n	800206c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f96:	4b89      	ldr	r3, [pc, #548]	; (80021bc <HAL_ADC_ConfigChannel+0x474>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	0691      	lsls	r1, r2, #26
 8001fa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fae:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fb0:	e05c      	b.n	800206c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fb8:	4b80      	ldr	r3, [pc, #512]	; (80021bc <HAL_ADC_ConfigChannel+0x474>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	0691      	lsls	r1, r2, #26
 8001fc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001fd0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001fd2:	e04b      	b.n	800206c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	069b      	lsls	r3, r3, #26
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d107      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001ff6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ffe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	069b      	lsls	r3, r3, #26
 8002008:	429a      	cmp	r2, r3
 800200a:	d107      	bne.n	800201c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800201a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002022:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	429a      	cmp	r2, r3
 800202e:	d107      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800203e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002046:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	069b      	lsls	r3, r3, #26
 8002050:	429a      	cmp	r2, r3
 8002052:	d10a      	bne.n	800206a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002062:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002064:	e001      	b.n	800206a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002066:	bf00      	nop
 8002068:	e000      	b.n	800206c <HAL_ADC_ConfigChannel+0x324>
      break;
 800206a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 0303 	and.w	r3, r3, #3
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <HAL_ADC_ConfigChannel+0x344>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	2b01      	cmp	r3, #1
 8002086:	d101      	bne.n	800208c <HAL_ADC_ConfigChannel+0x344>
 8002088:	2301      	movs	r3, #1
 800208a:	e000      	b.n	800208e <HAL_ADC_ConfigChannel+0x346>
 800208c:	2300      	movs	r3, #0
 800208e:	2b00      	cmp	r3, #0
 8002090:	f040 8130 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x5ac>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d00f      	beq.n	80020bc <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2201      	movs	r2, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	400a      	ands	r2, r1
 80020b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80020ba:	e049      	b.n	8002150 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	409a      	lsls	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b09      	cmp	r3, #9
 80020dc:	d91c      	bls.n	8002118 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6999      	ldr	r1, [r3, #24]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	4613      	mov	r3, r2
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	4413      	add	r3, r2
 80020ee:	3b1b      	subs	r3, #27
 80020f0:	2207      	movs	r2, #7
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	4019      	ands	r1, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	6898      	ldr	r0, [r3, #8]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	4613      	mov	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4413      	add	r3, r2
 8002108:	3b1b      	subs	r3, #27
 800210a:	fa00 f203 	lsl.w	r2, r0, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	619a      	str	r2, [r3, #24]
 8002116:	e01b      	b.n	8002150 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6959      	ldr	r1, [r3, #20]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	2207      	movs	r2, #7
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	4019      	ands	r1, r3
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6898      	ldr	r0, [r3, #8]
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	1c5a      	adds	r2, r3, #1
 800213e:	4613      	mov	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	4413      	add	r3, r2
 8002144:	fa00 f203 	lsl.w	r2, r0, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002158:	d004      	beq.n	8002164 <HAL_ADC_ConfigChannel+0x41c>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <HAL_ADC_ConfigChannel+0x478>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x420>
 8002164:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_ADC_ConfigChannel+0x47c>)
 8002166:	e000      	b.n	800216a <HAL_ADC_ConfigChannel+0x422>
 8002168:	4b17      	ldr	r3, [pc, #92]	; (80021c8 <HAL_ADC_ConfigChannel+0x480>)
 800216a:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	2b10      	cmp	r3, #16
 8002172:	d105      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002174:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d015      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002184:	2b11      	cmp	r3, #17
 8002186:	d105      	bne.n	8002194 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00b      	beq.n	80021ac <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002198:	2b12      	cmp	r3, #18
 800219a:	f040 80ab 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x5ac>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800219e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f040 80a4 	bne.w	80022f4 <HAL_ADC_ConfigChannel+0x5ac>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b4:	d10a      	bne.n	80021cc <HAL_ADC_ConfigChannel+0x484>
 80021b6:	4b02      	ldr	r3, [pc, #8]	; (80021c0 <HAL_ADC_ConfigChannel+0x478>)
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	e022      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4ba>
 80021bc:	83fff000 	.word	0x83fff000
 80021c0:	50000100 	.word	0x50000100
 80021c4:	50000300 	.word	0x50000300
 80021c8:	50000700 	.word	0x50000700
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a4e      	ldr	r2, [pc, #312]	; (800230c <HAL_ADC_ConfigChannel+0x5c4>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d103      	bne.n	80021de <HAL_ADC_ConfigChannel+0x496>
 80021d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021da:	60fb      	str	r3, [r7, #12]
 80021dc:	e011      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4ba>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_ADC_ConfigChannel+0x5c8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d102      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x4a6>
 80021e8:	4b4a      	ldr	r3, [pc, #296]	; (8002314 <HAL_ADC_ConfigChannel+0x5cc>)
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	e009      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4ba>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a48      	ldr	r2, [pc, #288]	; (8002314 <HAL_ADC_ConfigChannel+0x5cc>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d102      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x4b6>
 80021f8:	4b45      	ldr	r3, [pc, #276]	; (8002310 <HAL_ADC_ConfigChannel+0x5c8>)
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	e001      	b.n	8002202 <HAL_ADC_ConfigChannel+0x4ba>
 80021fe:	2300      	movs	r3, #0
 8002200:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d108      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x4da>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_ADC_ConfigChannel+0x4da>
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <HAL_ADC_ConfigChannel+0x4dc>
 8002222:	2300      	movs	r3, #0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d150      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x582>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002228:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800222a:	2b00      	cmp	r3, #0
 800222c:	d010      	beq.n	8002250 <HAL_ADC_ConfigChannel+0x508>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	2b01      	cmp	r3, #1
 8002238:	d107      	bne.n	800224a <HAL_ADC_ConfigChannel+0x502>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	2b01      	cmp	r3, #1
 8002244:	d101      	bne.n	800224a <HAL_ADC_ConfigChannel+0x502>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_ADC_ConfigChannel+0x504>
 800224a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800224c:	2b00      	cmp	r3, #0
 800224e:	d13c      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x582>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b10      	cmp	r3, #16
 8002256:	d11d      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x54c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002260:	d118      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x54c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800226a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800226c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800226e:	4b2a      	ldr	r3, [pc, #168]	; (8002318 <HAL_ADC_ConfigChannel+0x5d0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2a      	ldr	r2, [pc, #168]	; (800231c <HAL_ADC_ConfigChannel+0x5d4>)
 8002274:	fba2 2303 	umull	r2, r3, r2, r3
 8002278:	0c9a      	lsrs	r2, r3, #18
 800227a:	4613      	mov	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	4413      	add	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002284:	e002      	b.n	800228c <HAL_ADC_ConfigChannel+0x544>
          {
            wait_loop_index--;
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3b01      	subs	r3, #1
 800228a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f9      	bne.n	8002286 <HAL_ADC_ConfigChannel+0x53e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002292:	e02e      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5aa>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2b11      	cmp	r3, #17
 800229a:	d10b      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x56c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022a4:	d106      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x56c>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80022a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80022ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b0:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022b2:	e01e      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5aa>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b12      	cmp	r3, #18
 80022ba:	d11a      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x5aa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80022bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022c6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022c8:	e013      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x5aa>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ce:	f043 0220 	orr.w	r2, r3, #32
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022dc:	e00a      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x5ac>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	f043 0220 	orr.w	r2, r3, #32
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80022f0:	e000      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x5ac>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80022f2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80022fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002300:	4618      	mov	r0, r3
 8002302:	376c      	adds	r7, #108	; 0x6c
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	50000100 	.word	0x50000100
 8002310:	50000400 	.word	0x50000400
 8002314:	50000500 	.word	0x50000500
 8002318:	20000000 	.word	0x20000000
 800231c:	431bde83 	.word	0x431bde83

08002320 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002320:	b480      	push	{r7}
 8002322:	b099      	sub	sp, #100	; 0x64
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002338:	d102      	bne.n	8002340 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800233a:	4b6d      	ldr	r3, [pc, #436]	; (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800233c:	60bb      	str	r3, [r7, #8]
 800233e:	e01a      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a6a      	ldr	r2, [pc, #424]	; (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d103      	bne.n	8002352 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800234a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	e011      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a67      	ldr	r2, [pc, #412]	; (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d102      	bne.n	8002362 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800235c:	4b66      	ldr	r3, [pc, #408]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	e009      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a64      	ldr	r2, [pc, #400]	; (80024f8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d102      	bne.n	8002372 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800236c:	4b61      	ldr	r3, [pc, #388]	; (80024f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	e001      	b.n	8002376 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d101      	bne.n	8002380 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e0b0      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002386:	2b01      	cmp	r3, #1
 8002388:	d101      	bne.n	800238e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800238a:	2302      	movs	r3, #2
 800238c:	e0a9      	b.n	80024e2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	f040 808d 	bne.w	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 8086 	bne.w	80024c0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023bc:	d004      	beq.n	80023c8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a4b      	ldr	r2, [pc, #300]	; (80024f0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d101      	bne.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80023c8:	4b4c      	ldr	r3, [pc, #304]	; (80024fc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80023ca:	e000      	b.n	80023ce <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80023cc:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80023ce:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d040      	beq.n	800245a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80023d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ea:	035b      	lsls	r3, r3, #13
 80023ec:	430b      	orrs	r3, r1
 80023ee:	431a      	orrs	r2, r3
 80023f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d15c      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	2b01      	cmp	r3, #1
 8002424:	d107      	bne.n	8002436 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002432:	2301      	movs	r3, #1
 8002434:	e000      	b.n	8002438 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002436:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002438:	2b00      	cmp	r3, #0
 800243a:	d14b      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800243c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002444:	f023 030f 	bic.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	6811      	ldr	r1, [r2, #0]
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	6892      	ldr	r2, [r2, #8]
 8002450:	430a      	orrs	r2, r1
 8002452:	431a      	orrs	r2, r3
 8002454:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002456:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002458:	e03c      	b.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800245a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002464:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b01      	cmp	r3, #1
 8002472:	d108      	bne.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d123      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d101      	bne.n	80024a8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80024a8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d112      	bne.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80024ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80024b6:	f023 030f 	bic.w	r3, r3, #15
 80024ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024bc:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024be:	e009      	b.n	80024d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0220 	orr.w	r2, r3, #32
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80024d2:	e000      	b.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80024d4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80024de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80024e2:	4618      	mov	r0, r3
 80024e4:	3764      	adds	r7, #100	; 0x64
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	50000100 	.word	0x50000100
 80024f4:	50000400 	.word	0x50000400
 80024f8:	50000500 	.word	0x50000500
 80024fc:	50000300 	.word	0x50000300
 8002500:	50000700 	.word	0x50000700

08002504 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002510:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800251a:	2b00      	cmp	r3, #0
 800251c:	d126      	bne.n	800256c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002534:	2b00      	cmp	r3, #0
 8002536:	d115      	bne.n	8002564 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800253c:	2b00      	cmp	r3, #0
 800253e:	d111      	bne.n	8002564 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002544:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002550:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d105      	bne.n	8002564 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255c:	f043 0201 	orr.w	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f7ff f863 	bl	8001630 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800256a:	e004      	b.n	8002576 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
}
 8002576:	bf00      	nop
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}

0800257e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800257e:	b580      	push	{r7, lr}
 8002580:	b084      	sub	sp, #16
 8002582:	af00      	add	r7, sp, #0
 8002584:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800258c:	68f8      	ldr	r0, [r7, #12]
 800258e:	f7ff f859 	bl	8001644 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b8:	f043 0204 	orr.w	r2, r3, #4
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f7ff f849 	bl	8001658 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80025c6:	bf00      	nop
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f003 0303 	and.w	r3, r3, #3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d108      	bne.n	80025fc <ADC_Enable+0x2c>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d101      	bne.n	80025fc <ADC_Enable+0x2c>
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <ADC_Enable+0x2e>
 80025fc:	2300      	movs	r3, #0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d143      	bne.n	800268a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <ADC_Enable+0xc4>)
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	f043 0210 	orr.w	r2, r3, #16
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e02f      	b.n	800268c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689a      	ldr	r2, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0201 	orr.w	r2, r2, #1
 800263a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800263c:	f7fe ffec 	bl	8001618 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002642:	e01b      	b.n	800267c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002644:	f7fe ffe8 	bl	8001618 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d914      	bls.n	800267c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d00d      	beq.n	800267c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	f043 0210 	orr.w	r2, r3, #16
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e007      	b.n	800268c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d1dc      	bne.n	8002644 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	8000003f 	.word	0x8000003f

08002698 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d108      	bne.n	80026c4 <ADC_Disable+0x2c>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <ADC_Disable+0x2c>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <ADC_Disable+0x2e>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d047      	beq.n	800275a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030d 	and.w	r3, r3, #13
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d10f      	bne.n	80026f8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0202 	orr.w	r2, r2, #2
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2203      	movs	r2, #3
 80026ee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80026f0:	f7fe ff92 	bl	8001618 <HAL_GetTick>
 80026f4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80026f6:	e029      	b.n	800274c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	f043 0210 	orr.w	r2, r3, #16
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e023      	b.n	800275c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002714:	f7fe ff80 	bl	8001618 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d914      	bls.n	800274c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d10d      	bne.n	800274c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002734:	f043 0210 	orr.w	r2, r3, #16
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002740:	f043 0201 	orr.w	r2, r3, #1
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e007      	b.n	800275c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d0dc      	beq.n	8002714 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002774:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002780:	4013      	ands	r3, r2
 8002782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800278c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002796:	4a04      	ldr	r2, [pc, #16]	; (80027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	60d3      	str	r3, [r2, #12]
}
 800279c:	bf00      	nop
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000ed00 	.word	0xe000ed00

080027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b0:	4b04      	ldr	r3, [pc, #16]	; (80027c4 <__NVIC_GetPriorityGrouping+0x18>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	0a1b      	lsrs	r3, r3, #8
 80027b6:	f003 0307 	and.w	r3, r3, #7
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	e000ed00 	.word	0xe000ed00

080027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	db0b      	blt.n	80027f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027da:	79fb      	ldrb	r3, [r7, #7]
 80027dc:	f003 021f 	and.w	r2, r3, #31
 80027e0:	4907      	ldr	r1, [pc, #28]	; (8002800 <__NVIC_EnableIRQ+0x38>)
 80027e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e6:	095b      	lsrs	r3, r3, #5
 80027e8:	2001      	movs	r0, #1
 80027ea:	fa00 f202 	lsl.w	r2, r0, r2
 80027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	e000e100 	.word	0xe000e100

08002804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	6039      	str	r1, [r7, #0]
 800280e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	db0a      	blt.n	800282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	490c      	ldr	r1, [pc, #48]	; (8002850 <__NVIC_SetPriority+0x4c>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	0112      	lsls	r2, r2, #4
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	440b      	add	r3, r1
 8002828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800282c:	e00a      	b.n	8002844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	4908      	ldr	r1, [pc, #32]	; (8002854 <__NVIC_SetPriority+0x50>)
 8002834:	79fb      	ldrb	r3, [r7, #7]
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	3b04      	subs	r3, #4
 800283c:	0112      	lsls	r2, r2, #4
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	440b      	add	r3, r1
 8002842:	761a      	strb	r2, [r3, #24]
}
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr
 8002850:	e000e100 	.word	0xe000e100
 8002854:	e000ed00 	.word	0xe000ed00

08002858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002858:	b480      	push	{r7}
 800285a:	b089      	sub	sp, #36	; 0x24
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f003 0307 	and.w	r3, r3, #7
 800286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	f1c3 0307 	rsb	r3, r3, #7
 8002872:	2b04      	cmp	r3, #4
 8002874:	bf28      	it	cs
 8002876:	2304      	movcs	r3, #4
 8002878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	3304      	adds	r3, #4
 800287e:	2b06      	cmp	r3, #6
 8002880:	d902      	bls.n	8002888 <NVIC_EncodePriority+0x30>
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3b03      	subs	r3, #3
 8002886:	e000      	b.n	800288a <NVIC_EncodePriority+0x32>
 8002888:	2300      	movs	r3, #0
 800288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800288c:	f04f 32ff 	mov.w	r2, #4294967295
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43da      	mvns	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	401a      	ands	r2, r3
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a0:	f04f 31ff 	mov.w	r1, #4294967295
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	fa01 f303 	lsl.w	r3, r1, r3
 80028aa:	43d9      	mvns	r1, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b0:	4313      	orrs	r3, r2
         );
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
	...

080028c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d0:	d301      	bcc.n	80028d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d2:	2301      	movs	r3, #1
 80028d4:	e00f      	b.n	80028f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <SysTick_Config+0x40>)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028de:	210f      	movs	r1, #15
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f7ff ff8e 	bl	8002804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <SysTick_Config+0x40>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ee:	4b04      	ldr	r3, [pc, #16]	; (8002900 <SysTick_Config+0x40>)
 80028f0:	2207      	movs	r2, #7
 80028f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	e000e010 	.word	0xe000e010

08002904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f7ff ff29 	bl	8002764 <__NVIC_SetPriorityGrouping>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b086      	sub	sp, #24
 800291e:	af00      	add	r7, sp, #0
 8002920:	4603      	mov	r3, r0
 8002922:	60b9      	str	r1, [r7, #8]
 8002924:	607a      	str	r2, [r7, #4]
 8002926:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800292c:	f7ff ff3e 	bl	80027ac <__NVIC_GetPriorityGrouping>
 8002930:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	6978      	ldr	r0, [r7, #20]
 8002938:	f7ff ff8e 	bl	8002858 <NVIC_EncodePriority>
 800293c:	4602      	mov	r2, r0
 800293e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002942:	4611      	mov	r1, r2
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff5d 	bl	8002804 <__NVIC_SetPriority>
}
 800294a:	bf00      	nop
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800295c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ff31 	bl	80027c8 <__NVIC_EnableIRQ>
}
 8002966:	bf00      	nop
 8002968:	3708      	adds	r7, #8
 800296a:	46bd      	mov	sp, r7
 800296c:	bd80      	pop	{r7, pc}

0800296e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f7ff ffa2 	bl	80028c0 <SysTick_Config>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002986:	b580      	push	{r7, lr}
 8002988:	b084      	sub	sp, #16
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800298e:	2300      	movs	r3, #0
 8002990:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e037      	b.n	8002a0c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80029b2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80029c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f940 	bl	8002c74 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2201      	movs	r2, #1
 80029fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
}  
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_DMA_Start_IT+0x20>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e04a      	b.n	8002aca <HAL_DMA_Start_IT+0xb6>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d13a      	bne.n	8002abc <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 0201 	bic.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	68b9      	ldr	r1, [r7, #8]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f000 f8d4 	bl	8002c18 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 020e 	orr.w	r2, r2, #14
 8002a86:	601a      	str	r2, [r3, #0]
 8002a88:	e00f      	b.n	8002aaa <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f042 020a 	orr.w	r2, r2, #10
 8002a98:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0204 	bic.w	r2, r2, #4
 8002aa8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f042 0201 	orr.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	e005      	b.n	8002ac8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8002ac8:	7dfb      	ldrb	r3, [r7, #23]
} 
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	2204      	movs	r2, #4
 8002af0:	409a      	lsls	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d024      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x72>
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01f      	beq.n	8002b44 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0320 	and.w	r3, r3, #32
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d107      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0204 	bic.w	r2, r2, #4
 8002b20:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	2104      	movs	r1, #4
 8002b2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b30:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06a      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002b42:	e065      	b.n	8002c10 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	2202      	movs	r2, #2
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d02c      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdc>
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d027      	beq.n	8002bae <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0320 	and.w	r3, r3, #32
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 020a 	bic.w	r2, r2, #10
 8002b7a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8c:	2102      	movs	r1, #2
 8002b8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b92:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d035      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8002bac:	e030      	b.n	8002c10 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d028      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x13e>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d023      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 020e 	bic.w	r2, r2, #14
 8002bd6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be0:	2101      	movs	r1, #1
 8002be2:	fa01 f202 	lsl.w	r2, r1, r2
 8002be6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	4798      	blx	r3
    }
  }
}  
 8002c0e:	e7ff      	b.n	8002c10 <HAL_DMA_IRQHandler+0x13e>
 8002c10:	bf00      	nop
 8002c12:	3710      	adds	r7, #16
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2e:	2101      	movs	r1, #1
 8002c30:	fa01 f202 	lsl.w	r2, r1, r2
 8002c34:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	683a      	ldr	r2, [r7, #0]
 8002c3c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	2b10      	cmp	r3, #16
 8002c44:	d108      	bne.n	8002c58 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002c56:	e007      	b.n	8002c68 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	60da      	str	r2, [r3, #12]
}
 8002c68:	bf00      	nop
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	461a      	mov	r2, r3
 8002c82:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <DMA_CalcBaseAndBitshift+0x60>)
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d80f      	bhi.n	8002ca8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <DMA_CalcBaseAndBitshift+0x64>)
 8002c90:	4413      	add	r3, r2
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <DMA_CalcBaseAndBitshift+0x68>)
 8002c94:	fba2 2303 	umull	r2, r3, r2, r3
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	009a      	lsls	r2, r3, #2
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a0f      	ldr	r2, [pc, #60]	; (8002ce0 <DMA_CalcBaseAndBitshift+0x6c>)
 8002ca4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002ca6:	e00e      	b.n	8002cc6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b0d      	ldr	r3, [pc, #52]	; (8002ce4 <DMA_CalcBaseAndBitshift+0x70>)
 8002cb0:	4413      	add	r3, r2
 8002cb2:	4a0a      	ldr	r2, [pc, #40]	; (8002cdc <DMA_CalcBaseAndBitshift+0x68>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	091b      	lsrs	r3, r3, #4
 8002cba:	009a      	lsls	r2, r3, #2
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a09      	ldr	r2, [pc, #36]	; (8002ce8 <DMA_CalcBaseAndBitshift+0x74>)
 8002cc4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40020407 	.word	0x40020407
 8002cd8:	bffdfff8 	.word	0xbffdfff8
 8002cdc:	cccccccd 	.word	0xcccccccd
 8002ce0:	40020000 	.word	0x40020000
 8002ce4:	bffdfbf8 	.word	0xbffdfbf8
 8002ce8:	40020400 	.word	0x40020400

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b087      	sub	sp, #28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cfa:	e154      	b.n	8002fa6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2101      	movs	r1, #1
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	fa01 f303 	lsl.w	r3, r1, r3
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8146 	beq.w	8002fa0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	f003 0303 	and.w	r3, r3, #3
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d005      	beq.n	8002d2c <HAL_GPIO_Init+0x40>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d130      	bne.n	8002d8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	2203      	movs	r2, #3
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	68da      	ldr	r2, [r3, #12]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d50:	693a      	ldr	r2, [r7, #16]
 8002d52:	4313      	orrs	r3, r2
 8002d54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d62:	2201      	movs	r2, #1
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43db      	mvns	r3, r3
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4013      	ands	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	f003 0201 	and.w	r2, r3, #1
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	d017      	beq.n	8002dca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4013      	ands	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d123      	bne.n	8002e1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	08da      	lsrs	r2, r3, #3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	3208      	adds	r2, #8
 8002dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002de2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	220f      	movs	r2, #15
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4013      	ands	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f003 0307 	and.w	r3, r3, #7
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	6939      	ldr	r1, [r7, #16]
 8002e1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	2203      	movs	r2, #3
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	4013      	ands	r3, r2
 8002e34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f003 0203 	and.w	r2, r3, #3
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	693a      	ldr	r2, [r7, #16]
 8002e50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 80a0 	beq.w	8002fa0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e60:	4b58      	ldr	r3, [pc, #352]	; (8002fc4 <HAL_GPIO_Init+0x2d8>)
 8002e62:	699b      	ldr	r3, [r3, #24]
 8002e64:	4a57      	ldr	r2, [pc, #348]	; (8002fc4 <HAL_GPIO_Init+0x2d8>)
 8002e66:	f043 0301 	orr.w	r3, r3, #1
 8002e6a:	6193      	str	r3, [r2, #24]
 8002e6c:	4b55      	ldr	r3, [pc, #340]	; (8002fc4 <HAL_GPIO_Init+0x2d8>)
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e78:	4a53      	ldr	r2, [pc, #332]	; (8002fc8 <HAL_GPIO_Init+0x2dc>)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	220f      	movs	r2, #15
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	43db      	mvns	r3, r3
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002ea2:	d019      	beq.n	8002ed8 <HAL_GPIO_Init+0x1ec>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a49      	ldr	r2, [pc, #292]	; (8002fcc <HAL_GPIO_Init+0x2e0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d013      	beq.n	8002ed4 <HAL_GPIO_Init+0x1e8>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a48      	ldr	r2, [pc, #288]	; (8002fd0 <HAL_GPIO_Init+0x2e4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_GPIO_Init+0x1e4>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a47      	ldr	r2, [pc, #284]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d007      	beq.n	8002ecc <HAL_GPIO_Init+0x1e0>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a46      	ldr	r2, [pc, #280]	; (8002fd8 <HAL_GPIO_Init+0x2ec>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d101      	bne.n	8002ec8 <HAL_GPIO_Init+0x1dc>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	e008      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ec8:	2305      	movs	r3, #5
 8002eca:	e006      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e004      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	e002      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e000      	b.n	8002eda <HAL_GPIO_Init+0x1ee>
 8002ed8:	2300      	movs	r3, #0
 8002eda:	697a      	ldr	r2, [r7, #20]
 8002edc:	f002 0203 	and.w	r2, r2, #3
 8002ee0:	0092      	lsls	r2, r2, #2
 8002ee2:	4093      	lsls	r3, r2
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eea:	4937      	ldr	r1, [pc, #220]	; (8002fc8 <HAL_GPIO_Init+0x2dc>)
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	693a      	ldr	r2, [r7, #16]
 8002ef4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ef8:	4b38      	ldr	r3, [pc, #224]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	43db      	mvns	r3, r3
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	4013      	ands	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f1c:	4a2f      	ldr	r2, [pc, #188]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f22:	4b2e      	ldr	r3, [pc, #184]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	693a      	ldr	r2, [r7, #16]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002f3e:	693a      	ldr	r2, [r7, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f46:	4a25      	ldr	r2, [pc, #148]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f4c:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f70:	4a1a      	ldr	r2, [pc, #104]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f76:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	4013      	ands	r3, r2
 8002f84:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f9a:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f aea3 	bne.w	8002cfc <HAL_GPIO_Init+0x10>
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	371c      	adds	r7, #28
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	40010000 	.word	0x40010000
 8002fcc:	48000400 	.word	0x48000400
 8002fd0:	48000800 	.word	0x48000800
 8002fd4:	48000c00 	.word	0x48000c00
 8002fd8:	48001000 	.word	0x48001000
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ff0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d102      	bne.n	8003006 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	f001 b823 	b.w	800404c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 817d 	beq.w	8003316 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800301c:	4bbc      	ldr	r3, [pc, #752]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f003 030c 	and.w	r3, r3, #12
 8003024:	2b04      	cmp	r3, #4
 8003026:	d00c      	beq.n	8003042 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003028:	4bb9      	ldr	r3, [pc, #740]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d15c      	bne.n	80030ee <HAL_RCC_OscConfig+0x10e>
 8003034:	4bb6      	ldr	r3, [pc, #728]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003040:	d155      	bne.n	80030ee <HAL_RCC_OscConfig+0x10e>
 8003042:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003046:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800304e:	fa93 f3a3 	rbit	r3, r3
 8003052:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003056:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b01      	cmp	r3, #1
 800306c:	d102      	bne.n	8003074 <HAL_RCC_OscConfig+0x94>
 800306e:	4ba8      	ldr	r3, [pc, #672]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	e015      	b.n	80030a0 <HAL_RCC_OscConfig+0xc0>
 8003074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003078:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003090:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800309c:	4b9c      	ldr	r3, [pc, #624]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030a4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80030a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80030ac:	fa92 f2a2 	rbit	r2, r2
 80030b0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80030b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80030b8:	fab2 f282 	clz	r2, r2
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f042 0220 	orr.w	r2, r2, #32
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	f002 021f 	and.w	r2, r2, #31
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f202 	lsl.w	r2, r1, r2
 80030ce:	4013      	ands	r3, r2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 811f 	beq.w	8003314 <HAL_RCC_OscConfig+0x334>
 80030d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 8116 	bne.w	8003314 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f000 bfaf 	b.w	800404c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x12e>
 8003100:	4b83      	ldr	r3, [pc, #524]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a82      	ldr	r2, [pc, #520]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	e036      	b.n	800317c <HAL_RCC_OscConfig+0x19c>
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10c      	bne.n	8003138 <HAL_RCC_OscConfig+0x158>
 800311e:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a7b      	ldr	r2, [pc, #492]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003124:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b79      	ldr	r3, [pc, #484]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a78      	ldr	r2, [pc, #480]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003130:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e021      	b.n	800317c <HAL_RCC_OscConfig+0x19c>
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x184>
 800314a:	4b71      	ldr	r3, [pc, #452]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a70      	ldr	r2, [pc, #448]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	4b6e      	ldr	r3, [pc, #440]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a6d      	ldr	r2, [pc, #436]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	6013      	str	r3, [r2, #0]
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x19c>
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 800316a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b67      	ldr	r3, [pc, #412]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a66      	ldr	r2, [pc, #408]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800317a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800317c:	4b64      	ldr	r3, [pc, #400]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	f023 020f 	bic.w	r2, r3, #15
 8003184:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003188:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	495f      	ldr	r1, [pc, #380]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003192:	4313      	orrs	r3, r2
 8003194:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d059      	beq.n	800325a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a6:	f7fe fa37 	bl	8001618 <HAL_GetTick>
 80031aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fe fa32 	bl	8001618 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d902      	bls.n	80031c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	f000 bf43 	b.w	800404c <HAL_RCC_OscConfig+0x106c>
 80031c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80031da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	fab3 f383 	clz	r3, r3
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	095b      	lsrs	r3, r3, #5
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d102      	bne.n	80031f8 <HAL_RCC_OscConfig+0x218>
 80031f2:	4b47      	ldr	r3, [pc, #284]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	e015      	b.n	8003224 <HAL_RCC_OscConfig+0x244>
 80031f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031fc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003204:	fa93 f3a3 	rbit	r3, r3
 8003208:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800320c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003210:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003214:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003220:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003228:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800322c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003230:	fa92 f2a2 	rbit	r2, r2
 8003234:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003238:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800323c:	fab2 f282 	clz	r2, r2
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f042 0220 	orr.w	r2, r2, #32
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	f002 021f 	and.w	r2, r2, #31
 800324c:	2101      	movs	r1, #1
 800324e:	fa01 f202 	lsl.w	r2, r1, r2
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0ab      	beq.n	80031b0 <HAL_RCC_OscConfig+0x1d0>
 8003258:	e05d      	b.n	8003316 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325a:	f7fe f9dd 	bl	8001618 <HAL_GetTick>
 800325e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003262:	e00a      	b.n	800327a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003264:	f7fe f9d8 	bl	8001618 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b64      	cmp	r3, #100	; 0x64
 8003272:	d902      	bls.n	800327a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	f000 bee9 	b.w	800404c <HAL_RCC_OscConfig+0x106c>
 800327a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800327e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003282:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003286:	fa93 f3a3 	rbit	r3, r3
 800328a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800328e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	fab3 f383 	clz	r3, r3
 8003296:	b2db      	uxtb	r3, r3
 8003298:	095b      	lsrs	r3, r3, #5
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f043 0301 	orr.w	r3, r3, #1
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d102      	bne.n	80032ac <HAL_RCC_OscConfig+0x2cc>
 80032a6:	4b1a      	ldr	r3, [pc, #104]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	e015      	b.n	80032d8 <HAL_RCC_OscConfig+0x2f8>
 80032ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032b0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80032c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80032c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80032d4:	4b0e      	ldr	r3, [pc, #56]	; (8003310 <HAL_RCC_OscConfig+0x330>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032dc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80032e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80032e4:	fa92 f2a2 	rbit	r2, r2
 80032e8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80032ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80032f0:	fab2 f282 	clz	r2, r2
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	f042 0220 	orr.w	r2, r2, #32
 80032fa:	b2d2      	uxtb	r2, r2
 80032fc:	f002 021f 	and.w	r2, r2, #31
 8003300:	2101      	movs	r1, #1
 8003302:	fa01 f202 	lsl.w	r2, r1, r2
 8003306:	4013      	ands	r3, r2
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1ab      	bne.n	8003264 <HAL_RCC_OscConfig+0x284>
 800330c:	e003      	b.n	8003316 <HAL_RCC_OscConfig+0x336>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003316:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800331a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 817d 	beq.w	8003626 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800332c:	4ba6      	ldr	r3, [pc, #664]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f003 030c 	and.w	r3, r3, #12
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00b      	beq.n	8003350 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003338:	4ba3      	ldr	r3, [pc, #652]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b08      	cmp	r3, #8
 8003342:	d172      	bne.n	800342a <HAL_RCC_OscConfig+0x44a>
 8003344:	4ba0      	ldr	r3, [pc, #640]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d16c      	bne.n	800342a <HAL_RCC_OscConfig+0x44a>
 8003350:	2302      	movs	r3, #2
 8003352:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800335a:	fa93 f3a3 	rbit	r3, r3
 800335e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003362:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003366:	fab3 f383 	clz	r3, r3
 800336a:	b2db      	uxtb	r3, r3
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	b2db      	uxtb	r3, r3
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_RCC_OscConfig+0x3a0>
 800337a:	4b93      	ldr	r3, [pc, #588]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	e013      	b.n	80033a8 <HAL_RCC_OscConfig+0x3c8>
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003386:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003392:	2302      	movs	r3, #2
 8003394:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003398:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80033a4:	4b88      	ldr	r3, [pc, #544]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 80033a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a8:	2202      	movs	r2, #2
 80033aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80033ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80033b2:	fa92 f2a2 	rbit	r2, r2
 80033b6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80033ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80033be:	fab2 f282 	clz	r2, r2
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f042 0220 	orr.w	r2, r2, #32
 80033c8:	b2d2      	uxtb	r2, r2
 80033ca:	f002 021f 	and.w	r2, r2, #31
 80033ce:	2101      	movs	r1, #1
 80033d0:	fa01 f202 	lsl.w	r2, r1, r2
 80033d4:	4013      	ands	r3, r2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_RCC_OscConfig+0x410>
 80033da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d002      	beq.n	80033f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f000 be2e 	b.w	800404c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f0:	4b75      	ldr	r3, [pc, #468]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033fc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	21f8      	movs	r1, #248	; 0xf8
 8003406:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800340e:	fa91 f1a1 	rbit	r1, r1
 8003412:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003416:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800341a:	fab1 f181 	clz	r1, r1
 800341e:	b2c9      	uxtb	r1, r1
 8003420:	408b      	lsls	r3, r1
 8003422:	4969      	ldr	r1, [pc, #420]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 8003424:	4313      	orrs	r3, r2
 8003426:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003428:	e0fd      	b.n	8003626 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800342a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800342e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8088 	beq.w	800354c <HAL_RCC_OscConfig+0x56c>
 800343c:	2301      	movs	r3, #1
 800343e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800344e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003452:	fab3 f383 	clz	r3, r3
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800345c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	461a      	mov	r2, r3
 8003464:	2301      	movs	r3, #1
 8003466:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fe f8d6 	bl	8001618 <HAL_GetTick>
 800346c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e00a      	b.n	8003488 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe f8d1 	bl	8001618 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d902      	bls.n	8003488 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	f000 bde2 	b.w	800404c <HAL_RCC_OscConfig+0x106c>
 8003488:	2302      	movs	r3, #2
 800348a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003492:	fa93 f3a3 	rbit	r3, r3
 8003496:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800349a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800349e:	fab3 f383 	clz	r3, r3
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d102      	bne.n	80034b8 <HAL_RCC_OscConfig+0x4d8>
 80034b2:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	e013      	b.n	80034e0 <HAL_RCC_OscConfig+0x500>
 80034b8:	2302      	movs	r3, #2
 80034ba:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034be:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80034c2:	fa93 f3a3 	rbit	r3, r3
 80034c6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80034ca:	2302      	movs	r3, #2
 80034cc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80034d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80034dc:	4b3a      	ldr	r3, [pc, #232]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	2202      	movs	r2, #2
 80034e2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80034e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80034ea:	fa92 f2a2 	rbit	r2, r2
 80034ee:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80034f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80034f6:	fab2 f282 	clz	r2, r2
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	f042 0220 	orr.w	r2, r2, #32
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f002 021f 	and.w	r2, r2, #31
 8003506:	2101      	movs	r1, #1
 8003508:	fa01 f202 	lsl.w	r2, r1, r2
 800350c:	4013      	ands	r3, r2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0af      	beq.n	8003472 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003512:	4b2d      	ldr	r3, [pc, #180]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	21f8      	movs	r1, #248	; 0xf8
 8003528:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003530:	fa91 f1a1 	rbit	r1, r1
 8003534:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003538:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800353c:	fab1 f181 	clz	r1, r1
 8003540:	b2c9      	uxtb	r1, r1
 8003542:	408b      	lsls	r3, r1
 8003544:	4920      	ldr	r1, [pc, #128]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 8003546:	4313      	orrs	r3, r2
 8003548:	600b      	str	r3, [r1, #0]
 800354a:	e06c      	b.n	8003626 <HAL_RCC_OscConfig+0x646>
 800354c:	2301      	movs	r3, #1
 800354e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003552:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003556:	fa93 f3a3 	rbit	r3, r3
 800355a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800355e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800356c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	461a      	mov	r2, r3
 8003574:	2300      	movs	r3, #0
 8003576:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe f84e 	bl	8001618 <HAL_GetTick>
 800357c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003582:	f7fe f849 	bl	8001618 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d902      	bls.n	8003598 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	f000 bd5a 	b.w	800404c <HAL_RCC_OscConfig+0x106c>
 8003598:	2302      	movs	r3, #2
 800359a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80035a2:	fa93 f3a3 	rbit	r3, r3
 80035a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80035aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	095b      	lsrs	r3, r3, #5
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d104      	bne.n	80035cc <HAL_RCC_OscConfig+0x5ec>
 80035c2:	4b01      	ldr	r3, [pc, #4]	; (80035c8 <HAL_RCC_OscConfig+0x5e8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	e015      	b.n	80035f4 <HAL_RCC_OscConfig+0x614>
 80035c8:	40021000 	.word	0x40021000
 80035cc:	2302      	movs	r3, #2
 80035ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80035d6:	fa93 f3a3 	rbit	r3, r3
 80035da:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80035de:	2302      	movs	r3, #2
 80035e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80035e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80035e8:	fa93 f3a3 	rbit	r3, r3
 80035ec:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80035f0:	4bc8      	ldr	r3, [pc, #800]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 80035f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f4:	2202      	movs	r2, #2
 80035f6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80035fa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035fe:	fa92 f2a2 	rbit	r2, r2
 8003602:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003606:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800360a:	fab2 f282 	clz	r2, r2
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	f042 0220 	orr.w	r2, r2, #32
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	f002 021f 	and.w	r2, r2, #31
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f202 	lsl.w	r2, r1, r2
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1ad      	bne.n	8003582 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003626:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800362a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0308 	and.w	r3, r3, #8
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 8110 	beq.w	800385c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800363c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003640:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d079      	beq.n	8003740 <HAL_RCC_OscConfig+0x760>
 800364c:	2301      	movs	r3, #1
 800364e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003652:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003656:	fa93 f3a3 	rbit	r3, r3
 800365a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800365e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003662:	fab3 f383 	clz	r3, r3
 8003666:	b2db      	uxtb	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	4bab      	ldr	r3, [pc, #684]	; (8003918 <HAL_RCC_OscConfig+0x938>)
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	461a      	mov	r2, r3
 8003672:	2301      	movs	r3, #1
 8003674:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003676:	f7fd ffcf 	bl	8001618 <HAL_GetTick>
 800367a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800367e:	e00a      	b.n	8003696 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003680:	f7fd ffca 	bl	8001618 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d902      	bls.n	8003696 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	f000 bcdb 	b.w	800404c <HAL_RCC_OscConfig+0x106c>
 8003696:	2302      	movs	r3, #2
 8003698:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80036a0:	fa93 f3a3 	rbit	r3, r3
 80036a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80036a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ac:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036b0:	2202      	movs	r2, #2
 80036b2:	601a      	str	r2, [r3, #0]
 80036b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036b8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f2a3 	rbit	r2, r3
 80036c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036d4:	2202      	movs	r2, #2
 80036d6:	601a      	str	r2, [r3, #0]
 80036d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	fa93 f2a3 	rbit	r2, r3
 80036e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036ea:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80036ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f0:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 80036f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80036fc:	2102      	movs	r1, #2
 80036fe:	6019      	str	r1, [r3, #0]
 8003700:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003704:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	fa93 f1a3 	rbit	r1, r3
 800370e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003716:	6019      	str	r1, [r3, #0]
  return result;
 8003718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	fab3 f383 	clz	r3, r3
 8003726:	b2db      	uxtb	r3, r3
 8003728:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800372c:	b2db      	uxtb	r3, r3
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	2101      	movs	r1, #1
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0a0      	beq.n	8003680 <HAL_RCC_OscConfig+0x6a0>
 800373e:	e08d      	b.n	800385c <HAL_RCC_OscConfig+0x87c>
 8003740:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003744:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003750:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	fa93 f2a3 	rbit	r2, r3
 800375a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800375e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003762:	601a      	str	r2, [r3, #0]
  return result;
 8003764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003768:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800376c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800376e:	fab3 f383 	clz	r3, r3
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	4b68      	ldr	r3, [pc, #416]	; (8003918 <HAL_RCC_OscConfig+0x938>)
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	461a      	mov	r2, r3
 800377e:	2300      	movs	r3, #0
 8003780:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003782:	f7fd ff49 	bl	8001618 <HAL_GetTick>
 8003786:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800378a:	e00a      	b.n	80037a2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800378c:	f7fd ff44 	bl	8001618 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d902      	bls.n	80037a2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	f000 bc55 	b.w	800404c <HAL_RCC_OscConfig+0x106c>
 80037a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037aa:	2202      	movs	r2, #2
 80037ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	fa93 f2a3 	rbit	r2, r3
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ca:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037ce:	2202      	movs	r2, #2
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	fa93 f2a3 	rbit	r2, r3
 80037e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037f2:	2202      	movs	r2, #2
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	fa93 f2a3 	rbit	r2, r3
 8003804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003808:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800380c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 8003810:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003816:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800381a:	2102      	movs	r1, #2
 800381c:	6019      	str	r1, [r3, #0]
 800381e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003822:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	fa93 f1a3 	rbit	r1, r3
 800382c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003830:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003834:	6019      	str	r1, [r3, #0]
  return result;
 8003836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800383a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800384a:	b2db      	uxtb	r3, r3
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	2101      	movs	r1, #1
 8003852:	fa01 f303 	lsl.w	r3, r1, r3
 8003856:	4013      	ands	r3, r2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d197      	bne.n	800378c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800385c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003860:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 81a1 	beq.w	8003bb4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003872:	2300      	movs	r3, #0
 8003874:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003878:	4b26      	ldr	r3, [pc, #152]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 800387a:	69db      	ldr	r3, [r3, #28]
 800387c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d116      	bne.n	80038b2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003884:	4b23      	ldr	r3, [pc, #140]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 800388a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800388e:	61d3      	str	r3, [r2, #28]
 8003890:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038a0:	601a      	str	r2, [r3, #0]
 80038a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80038aa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80038ac:	2301      	movs	r3, #1
 80038ae:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <HAL_RCC_OscConfig+0x93c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d11a      	bne.n	80038f4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038be:	4b17      	ldr	r3, [pc, #92]	; (800391c <HAL_RCC_OscConfig+0x93c>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a16      	ldr	r2, [pc, #88]	; (800391c <HAL_RCC_OscConfig+0x93c>)
 80038c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ca:	f7fd fea5 	bl	8001618 <HAL_GetTick>
 80038ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d2:	e009      	b.n	80038e8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d4:	f7fd fea0 	bl	8001618 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b64      	cmp	r3, #100	; 0x64
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e3b1      	b.n	800404c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e8:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_RCC_OscConfig+0x93c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0ef      	beq.n	80038d4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d10d      	bne.n	8003920 <HAL_RCC_OscConfig+0x940>
 8003904:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4a02      	ldr	r2, [pc, #8]	; (8003914 <HAL_RCC_OscConfig+0x934>)
 800390a:	f043 0301 	orr.w	r3, r3, #1
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	e03c      	b.n	800398c <HAL_RCC_OscConfig+0x9ac>
 8003912:	bf00      	nop
 8003914:	40021000 	.word	0x40021000
 8003918:	10908120 	.word	0x10908120
 800391c:	40007000 	.word	0x40007000
 8003920:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003924:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10c      	bne.n	800394a <HAL_RCC_OscConfig+0x96a>
 8003930:	4bc1      	ldr	r3, [pc, #772]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	4ac0      	ldr	r2, [pc, #768]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	6213      	str	r3, [r2, #32]
 800393c:	4bbe      	ldr	r3, [pc, #760]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4abd      	ldr	r2, [pc, #756]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003942:	f023 0304 	bic.w	r3, r3, #4
 8003946:	6213      	str	r3, [r2, #32]
 8003948:	e020      	b.n	800398c <HAL_RCC_OscConfig+0x9ac>
 800394a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	2b05      	cmp	r3, #5
 8003958:	d10c      	bne.n	8003974 <HAL_RCC_OscConfig+0x994>
 800395a:	4bb7      	ldr	r3, [pc, #732]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	4ab6      	ldr	r2, [pc, #728]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003960:	f043 0304 	orr.w	r3, r3, #4
 8003964:	6213      	str	r3, [r2, #32]
 8003966:	4bb4      	ldr	r3, [pc, #720]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	4ab3      	ldr	r2, [pc, #716]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	6213      	str	r3, [r2, #32]
 8003972:	e00b      	b.n	800398c <HAL_RCC_OscConfig+0x9ac>
 8003974:	4bb0      	ldr	r3, [pc, #704]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4aaf      	ldr	r2, [pc, #700]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 800397a:	f023 0301 	bic.w	r3, r3, #1
 800397e:	6213      	str	r3, [r2, #32]
 8003980:	4bad      	ldr	r3, [pc, #692]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	4aac      	ldr	r2, [pc, #688]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003986:	f023 0304 	bic.w	r3, r3, #4
 800398a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800398c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003990:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	f000 8081 	beq.w	8003aa0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399e:	f7fd fe3b 	bl	8001618 <HAL_GetTick>
 80039a2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a8:	f7fd fe36 	bl	8001618 <HAL_GetTick>
 80039ac:	4602      	mov	r2, r0
 80039ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e345      	b.n	800404c <HAL_RCC_OscConfig+0x106c>
 80039c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039c8:	2202      	movs	r2, #2
 80039ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	fa93 f2a3 	rbit	r2, r3
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039ec:	2202      	movs	r2, #2
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	fa93 f2a3 	rbit	r2, r3
 80039fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a02:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a06:	601a      	str	r2, [r3, #0]
  return result;
 8003a08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a0c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003a10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a12:	fab3 f383 	clz	r3, r3
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	f043 0302 	orr.w	r3, r3, #2
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d102      	bne.n	8003a2c <HAL_RCC_OscConfig+0xa4c>
 8003a26:	4b84      	ldr	r3, [pc, #528]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003a28:	6a1b      	ldr	r3, [r3, #32]
 8003a2a:	e013      	b.n	8003a54 <HAL_RCC_OscConfig+0xa74>
 8003a2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a30:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a34:	2202      	movs	r2, #2
 8003a36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	fa93 f2a3 	rbit	r2, r3
 8003a46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	4b79      	ldr	r3, [pc, #484]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a58:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a5c:	2102      	movs	r1, #2
 8003a5e:	6011      	str	r1, [r2, #0]
 8003a60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a64:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003a68:	6812      	ldr	r2, [r2, #0]
 8003a6a:	fa92 f1a2 	rbit	r1, r2
 8003a6e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a72:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a76:	6011      	str	r1, [r2, #0]
  return result;
 8003a78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003a7c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	fab2 f282 	clz	r2, r2
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	f002 021f 	and.w	r2, r2, #31
 8003a92:	2101      	movs	r1, #1
 8003a94:	fa01 f202 	lsl.w	r2, r1, r2
 8003a98:	4013      	ands	r3, r2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d084      	beq.n	80039a8 <HAL_RCC_OscConfig+0x9c8>
 8003a9e:	e07f      	b.n	8003ba0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aa0:	f7fd fdba 	bl	8001618 <HAL_GetTick>
 8003aa4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003aa8:	e00b      	b.n	8003ac2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aaa:	f7fd fdb5 	bl	8001618 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e2c4      	b.n	800404c <HAL_RCC_OscConfig+0x106c>
 8003ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003aca:	2202      	movs	r2, #2
 8003acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	fa93 f2a3 	rbit	r2, r3
 8003adc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aea:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003aee:	2202      	movs	r2, #2
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	fa93 f2a3 	rbit	r2, r3
 8003b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b04:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b08:	601a      	str	r2, [r3, #0]
  return result;
 8003b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003b12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b14:	fab3 f383 	clz	r3, r3
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	f043 0302 	orr.w	r3, r3, #2
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d102      	bne.n	8003b2e <HAL_RCC_OscConfig+0xb4e>
 8003b28:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	e013      	b.n	8003b56 <HAL_RCC_OscConfig+0xb76>
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b36:	2202      	movs	r2, #2
 8003b38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	fa93 f2a3 	rbit	r2, r3
 8003b48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b4c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b56:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b5a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b5e:	2102      	movs	r1, #2
 8003b60:	6011      	str	r1, [r2, #0]
 8003b62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b66:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	fa92 f1a2 	rbit	r1, r2
 8003b70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b74:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b78:	6011      	str	r1, [r2, #0]
  return result;
 8003b7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b7e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003b82:	6812      	ldr	r2, [r2, #0]
 8003b84:	fab2 f282 	clz	r2, r2
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b8e:	b2d2      	uxtb	r2, r2
 8003b90:	f002 021f 	and.w	r2, r2, #31
 8003b94:	2101      	movs	r1, #1
 8003b96:	fa01 f202 	lsl.w	r2, r1, r2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d184      	bne.n	8003aaa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ba0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b23      	ldr	r3, [pc, #140]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8242 	beq.w	800404a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <HAL_RCC_OscConfig+0xc58>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	f000 8213 	beq.w	8003ffa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	69db      	ldr	r3, [r3, #28]
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	f040 8162 	bne.w	8003eaa <HAL_RCC_OscConfig+0xeca>
 8003be6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bea:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003bee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003bf2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bf4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	fa93 f2a3 	rbit	r2, r3
 8003c02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c06:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c0a:	601a      	str	r2, [r3, #0]
  return result;
 8003c0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c10:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003c14:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c16:	fab3 f383 	clz	r3, r3
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	461a      	mov	r2, r3
 8003c28:	2300      	movs	r3, #0
 8003c2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c2c:	f7fd fcf4 	bl	8001618 <HAL_GetTick>
 8003c30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c34:	e00c      	b.n	8003c50 <HAL_RCC_OscConfig+0xc70>
 8003c36:	bf00      	nop
 8003c38:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c3c:	f7fd fcec 	bl	8001618 <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d901      	bls.n	8003c50 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e1fd      	b.n	800404c <HAL_RCC_OscConfig+0x106c>
 8003c50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c54:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c62:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	fa93 f2a3 	rbit	r2, r3
 8003c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c70:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c74:	601a      	str	r2, [r3, #0]
  return result;
 8003c76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c7a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003c7e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c80:	fab3 f383 	clz	r3, r3
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	095b      	lsrs	r3, r3, #5
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f043 0301 	orr.w	r3, r3, #1
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_OscConfig+0xcba>
 8003c94:	4bb0      	ldr	r3, [pc, #704]	; (8003f58 <HAL_RCC_OscConfig+0xf78>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	e027      	b.n	8003cea <HAL_RCC_OscConfig+0xd0a>
 8003c9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c9e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ca6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	fa93 f2a3 	rbit	r2, r3
 8003cb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cba:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003cc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cd2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	fa93 f2a3 	rbit	r2, r3
 8003cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ce4:	601a      	str	r2, [r3, #0]
 8003ce6:	4b9c      	ldr	r3, [pc, #624]	; (8003f58 <HAL_RCC_OscConfig+0xf78>)
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cee:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003cf2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cf6:	6011      	str	r1, [r2, #0]
 8003cf8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003cfc:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003d00:	6812      	ldr	r2, [r2, #0]
 8003d02:	fa92 f1a2 	rbit	r1, r2
 8003d06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d0a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d0e:	6011      	str	r1, [r2, #0]
  return result;
 8003d10:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d14:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	fab2 f282 	clz	r2, r2
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	f042 0220 	orr.w	r2, r2, #32
 8003d24:	b2d2      	uxtb	r2, r2
 8003d26:	f002 021f 	and.w	r2, r2, #31
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d30:	4013      	ands	r3, r2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d182      	bne.n	8003c3c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d36:	4b88      	ldr	r3, [pc, #544]	; (8003f58 <HAL_RCC_OscConfig+0xf78>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	430b      	orrs	r3, r1
 8003d58:	497f      	ldr	r1, [pc, #508]	; (8003f58 <HAL_RCC_OscConfig+0xf78>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
 8003d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d62:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d66:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d70:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	fa93 f2a3 	rbit	r2, r3
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d82:	601a      	str	r2, [r3, #0]
  return result;
 8003d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d88:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003d8c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d8e:	fab3 f383 	clz	r3, r3
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2301      	movs	r3, #1
 8003da2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fd fc38 	bl	8001618 <HAL_GetTick>
 8003da8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dac:	e009      	b.n	8003dc2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dae:	f7fd fc33 	bl	8001618 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e144      	b.n	800404c <HAL_RCC_OscConfig+0x106c>
 8003dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003dca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	fa93 f2a3 	rbit	r2, r3
 8003dde:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003de2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003de6:	601a      	str	r2, [r3, #0]
  return result;
 8003de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dec:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003df0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df2:	fab3 f383 	clz	r3, r3
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	095b      	lsrs	r3, r3, #5
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f043 0301 	orr.w	r3, r3, #1
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d102      	bne.n	8003e0c <HAL_RCC_OscConfig+0xe2c>
 8003e06:	4b54      	ldr	r3, [pc, #336]	; (8003f58 <HAL_RCC_OscConfig+0xf78>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	e027      	b.n	8003e5c <HAL_RCC_OscConfig+0xe7c>
 8003e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e10:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	fa93 f2a3 	rbit	r2, r3
 8003e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e2c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003e30:	601a      	str	r2, [r3, #0]
 8003e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e36:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e44:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	4b3f      	ldr	r3, [pc, #252]	; (8003f58 <HAL_RCC_OscConfig+0xf78>)
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e60:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003e68:	6011      	str	r1, [r2, #0]
 8003e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e6e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003e72:	6812      	ldr	r2, [r2, #0]
 8003e74:	fa92 f1a2 	rbit	r1, r2
 8003e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e7c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e80:	6011      	str	r1, [r2, #0]
  return result;
 8003e82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e86:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003e8a:	6812      	ldr	r2, [r2, #0]
 8003e8c:	fab2 f282 	clz	r2, r2
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	f042 0220 	orr.w	r2, r2, #32
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	f002 021f 	and.w	r2, r2, #31
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d082      	beq.n	8003dae <HAL_RCC_OscConfig+0xdce>
 8003ea8:	e0cf      	b.n	800404a <HAL_RCC_OscConfig+0x106a>
 8003eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eae:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003eb2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eb6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ebc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	fa93 f2a3 	rbit	r2, r3
 8003ec6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eca:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ece:	601a      	str	r2, [r3, #0]
  return result;
 8003ed0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ed8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	fab3 f383 	clz	r3, r3
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ee4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	461a      	mov	r2, r3
 8003eec:	2300      	movs	r3, #0
 8003eee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fb92 	bl	8001618 <HAL_GetTick>
 8003ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef8:	e009      	b.n	8003f0e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fd fb8d 	bl	8001618 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e09e      	b.n	800404c <HAL_RCC_OscConfig+0x106c>
 8003f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f12:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f20:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	fa93 f2a3 	rbit	r2, r3
 8003f2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f2e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f32:	601a      	str	r2, [r3, #0]
  return result;
 8003f34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f38:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003f3c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f3e:	fab3 f383 	clz	r3, r3
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d104      	bne.n	8003f5c <HAL_RCC_OscConfig+0xf7c>
 8003f52:	4b01      	ldr	r3, [pc, #4]	; (8003f58 <HAL_RCC_OscConfig+0xf78>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	e029      	b.n	8003fac <HAL_RCC_OscConfig+0xfcc>
 8003f58:	40021000 	.word	0x40021000
 8003f5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f60:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	fa93 f2a3 	rbit	r2, r3
 8003f78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f7c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f86:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f94:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fa93 f2a3 	rbit	r2, r3
 8003f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fa2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	4b2b      	ldr	r3, [pc, #172]	; (8004058 <HAL_RCC_OscConfig+0x1078>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fb0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003fb4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003fb8:	6011      	str	r1, [r2, #0]
 8003fba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fbe:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	fa92 f1a2 	rbit	r1, r2
 8003fc8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fcc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003fd0:	6011      	str	r1, [r2, #0]
  return result;
 8003fd2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003fd6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003fda:	6812      	ldr	r2, [r2, #0]
 8003fdc:	fab2 f282 	clz	r2, r2
 8003fe0:	b2d2      	uxtb	r2, r2
 8003fe2:	f042 0220 	orr.w	r2, r2, #32
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	f002 021f 	and.w	r2, r2, #31
 8003fec:	2101      	movs	r1, #1
 8003fee:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d180      	bne.n	8003efa <HAL_RCC_OscConfig+0xf1a>
 8003ff8:	e027      	b.n	800404a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ffa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ffe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d101      	bne.n	800400e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e01e      	b.n	800404c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800400e:	4b12      	ldr	r3, [pc, #72]	; (8004058 <HAL_RCC_OscConfig+0x1078>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004016:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800401a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800401e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004022:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	429a      	cmp	r2, r3
 800402c:	d10b      	bne.n	8004046 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800402e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004032:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004036:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800403a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004042:	429a      	cmp	r2, r3
 8004044:	d001      	beq.n	800404a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000

0800405c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b09e      	sub	sp, #120	; 0x78
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d101      	bne.n	8004074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e162      	b.n	800433a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004074:	4b90      	ldr	r3, [pc, #576]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d910      	bls.n	80040a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b8d      	ldr	r3, [pc, #564]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 0207 	bic.w	r2, r3, #7
 800408a:	498b      	ldr	r1, [pc, #556]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	4313      	orrs	r3, r2
 8004090:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004092:	4b89      	ldr	r3, [pc, #548]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0307 	and.w	r3, r3, #7
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d001      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e14a      	b.n	800433a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d008      	beq.n	80040c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040b0:	4b82      	ldr	r3, [pc, #520]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	497f      	ldr	r1, [pc, #508]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 80dc 	beq.w	8004288 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d13c      	bne.n	8004152 <HAL_RCC_ClockConfig+0xf6>
 80040d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80040dc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040e0:	fa93 f3a3 	rbit	r3, r3
 80040e4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80040e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e8:	fab3 f383 	clz	r3, r3
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	f043 0301 	orr.w	r3, r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d102      	bne.n	8004102 <HAL_RCC_ClockConfig+0xa6>
 80040fc:	4b6f      	ldr	r3, [pc, #444]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	e00f      	b.n	8004122 <HAL_RCC_ClockConfig+0xc6>
 8004102:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004106:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800410a:	fa93 f3a3 	rbit	r3, r3
 800410e:	667b      	str	r3, [r7, #100]	; 0x64
 8004110:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004114:	663b      	str	r3, [r7, #96]	; 0x60
 8004116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004118:	fa93 f3a3 	rbit	r3, r3
 800411c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800411e:	4b67      	ldr	r3, [pc, #412]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004126:	65ba      	str	r2, [r7, #88]	; 0x58
 8004128:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800412a:	fa92 f2a2 	rbit	r2, r2
 800412e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004130:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004132:	fab2 f282 	clz	r2, r2
 8004136:	b2d2      	uxtb	r2, r2
 8004138:	f042 0220 	orr.w	r2, r2, #32
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	f002 021f 	and.w	r2, r2, #31
 8004142:	2101      	movs	r1, #1
 8004144:	fa01 f202 	lsl.w	r2, r1, r2
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d17b      	bne.n	8004246 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e0f3      	b.n	800433a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d13c      	bne.n	80041d4 <HAL_RCC_ClockConfig+0x178>
 800415a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800415e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800416a:	fab3 f383 	clz	r3, r3
 800416e:	b2db      	uxtb	r3, r3
 8004170:	095b      	lsrs	r3, r3, #5
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f043 0301 	orr.w	r3, r3, #1
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b01      	cmp	r3, #1
 800417c:	d102      	bne.n	8004184 <HAL_RCC_ClockConfig+0x128>
 800417e:	4b4f      	ldr	r3, [pc, #316]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	e00f      	b.n	80041a4 <HAL_RCC_ClockConfig+0x148>
 8004184:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004188:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418c:	fa93 f3a3 	rbit	r3, r3
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
 8004192:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004196:	643b      	str	r3, [r7, #64]	; 0x40
 8004198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800419a:	fa93 f3a3 	rbit	r3, r3
 800419e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041a0:	4b46      	ldr	r3, [pc, #280]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80041a8:	63ba      	str	r2, [r7, #56]	; 0x38
 80041aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ac:	fa92 f2a2 	rbit	r2, r2
 80041b0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80041b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041b4:	fab2 f282 	clz	r2, r2
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	f042 0220 	orr.w	r2, r2, #32
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	f002 021f 	and.w	r2, r2, #31
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d13a      	bne.n	8004246 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e0b2      	b.n	800433a <HAL_RCC_ClockConfig+0x2de>
 80041d4:	2302      	movs	r3, #2
 80041d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	fa93 f3a3 	rbit	r3, r3
 80041de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041e2:	fab3 f383 	clz	r3, r3
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	095b      	lsrs	r3, r3, #5
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d102      	bne.n	80041fc <HAL_RCC_ClockConfig+0x1a0>
 80041f6:	4b31      	ldr	r3, [pc, #196]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	e00d      	b.n	8004218 <HAL_RCC_ClockConfig+0x1bc>
 80041fc:	2302      	movs	r3, #2
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	2302      	movs	r3, #2
 800420a:	623b      	str	r3, [r7, #32]
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	4b29      	ldr	r3, [pc, #164]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2202      	movs	r2, #2
 800421a:	61ba      	str	r2, [r7, #24]
 800421c:	69ba      	ldr	r2, [r7, #24]
 800421e:	fa92 f2a2 	rbit	r2, r2
 8004222:	617a      	str	r2, [r7, #20]
  return result;
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	fab2 f282 	clz	r2, r2
 800422a:	b2d2      	uxtb	r2, r2
 800422c:	f042 0220 	orr.w	r2, r2, #32
 8004230:	b2d2      	uxtb	r2, r2
 8004232:	f002 021f 	and.w	r2, r2, #31
 8004236:	2101      	movs	r1, #1
 8004238:	fa01 f202 	lsl.w	r2, r1, r2
 800423c:	4013      	ands	r3, r2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d101      	bne.n	8004246 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e079      	b.n	800433a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004246:	4b1d      	ldr	r3, [pc, #116]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f023 0203 	bic.w	r2, r3, #3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	491a      	ldr	r1, [pc, #104]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004258:	f7fd f9de 	bl	8001618 <HAL_GetTick>
 800425c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	e00a      	b.n	8004276 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004260:	f7fd f9da 	bl	8001618 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	f241 3288 	movw	r2, #5000	; 0x1388
 800426e:	4293      	cmp	r3, r2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e061      	b.n	800433a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004276:	4b11      	ldr	r3, [pc, #68]	; (80042bc <HAL_RCC_ClockConfig+0x260>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 020c 	and.w	r2, r3, #12
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	429a      	cmp	r2, r3
 8004286:	d1eb      	bne.n	8004260 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d214      	bcs.n	80042c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004296:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f023 0207 	bic.w	r2, r3, #7
 800429e:	4906      	ldr	r1, [pc, #24]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a6:	4b04      	ldr	r3, [pc, #16]	; (80042b8 <HAL_RCC_ClockConfig+0x25c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e040      	b.n	800433a <HAL_RCC_ClockConfig+0x2de>
 80042b8:	40022000 	.word	0x40022000
 80042bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042cc:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <HAL_RCC_ClockConfig+0x2e8>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	68db      	ldr	r3, [r3, #12]
 80042d8:	491a      	ldr	r1, [pc, #104]	; (8004344 <HAL_RCC_ClockConfig+0x2e8>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d009      	beq.n	80042fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042ea:	4b16      	ldr	r3, [pc, #88]	; (8004344 <HAL_RCC_ClockConfig+0x2e8>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4912      	ldr	r1, [pc, #72]	; (8004344 <HAL_RCC_ClockConfig+0x2e8>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042fe:	f000 f829 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 8004302:	4601      	mov	r1, r0
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <HAL_RCC_ClockConfig+0x2e8>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430c:	22f0      	movs	r2, #240	; 0xf0
 800430e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	fa92 f2a2 	rbit	r2, r2
 8004316:	60fa      	str	r2, [r7, #12]
  return result;
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	fab2 f282 	clz	r2, r2
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	40d3      	lsrs	r3, r2
 8004322:	4a09      	ldr	r2, [pc, #36]	; (8004348 <HAL_RCC_ClockConfig+0x2ec>)
 8004324:	5cd3      	ldrb	r3, [r2, r3]
 8004326:	fa21 f303 	lsr.w	r3, r1, r3
 800432a:	4a08      	ldr	r2, [pc, #32]	; (800434c <HAL_RCC_ClockConfig+0x2f0>)
 800432c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800432e:	4b08      	ldr	r3, [pc, #32]	; (8004350 <HAL_RCC_ClockConfig+0x2f4>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4618      	mov	r0, r3
 8004334:	f7fd f92c 	bl	8001590 <HAL_InitTick>
  
  return HAL_OK;
 8004338:	2300      	movs	r3, #0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3778      	adds	r7, #120	; 0x78
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	40021000 	.word	0x40021000
 8004348:	08009290 	.word	0x08009290
 800434c:	20000000 	.word	0x20000000
 8004350:	20000004 	.word	0x20000004

08004354 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004354:	b480      	push	{r7}
 8004356:	b08b      	sub	sp, #44	; 0x2c
 8004358:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800435a:	2300      	movs	r3, #0
 800435c:	61fb      	str	r3, [r7, #28]
 800435e:	2300      	movs	r3, #0
 8004360:	61bb      	str	r3, [r7, #24]
 8004362:	2300      	movs	r3, #0
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
 8004366:	2300      	movs	r3, #0
 8004368:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800436e:	4b29      	ldr	r3, [pc, #164]	; (8004414 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b04      	cmp	r3, #4
 800437c:	d002      	beq.n	8004384 <HAL_RCC_GetSysClockFreq+0x30>
 800437e:	2b08      	cmp	r3, #8
 8004380:	d003      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x36>
 8004382:	e03c      	b.n	80043fe <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004386:	623b      	str	r3, [r7, #32]
      break;
 8004388:	e03c      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004390:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004394:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	fa92 f2a2 	rbit	r2, r2
 800439c:	607a      	str	r2, [r7, #4]
  return result;
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	fab2 f282 	clz	r2, r2
 80043a4:	b2d2      	uxtb	r2, r2
 80043a6:	40d3      	lsrs	r3, r2
 80043a8:	4a1c      	ldr	r2, [pc, #112]	; (800441c <HAL_RCC_GetSysClockFreq+0xc8>)
 80043aa:	5cd3      	ldrb	r3, [r2, r3]
 80043ac:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80043ae:	4b19      	ldr	r3, [pc, #100]	; (8004414 <HAL_RCC_GetSysClockFreq+0xc0>)
 80043b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	220f      	movs	r2, #15
 80043b8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	fa92 f2a2 	rbit	r2, r2
 80043c0:	60fa      	str	r2, [r7, #12]
  return result;
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	fab2 f282 	clz	r2, r2
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	40d3      	lsrs	r3, r2
 80043cc:	4a14      	ldr	r2, [pc, #80]	; (8004420 <HAL_RCC_GetSysClockFreq+0xcc>)
 80043ce:	5cd3      	ldrb	r3, [r2, r3]
 80043d0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d008      	beq.n	80043ee <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043dc:	4a0e      	ldr	r2, [pc, #56]	; (8004418 <HAL_RCC_GetSysClockFreq+0xc4>)
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	fb02 f303 	mul.w	r3, r2, r3
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	e004      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	4a0c      	ldr	r2, [pc, #48]	; (8004424 <HAL_RCC_GetSysClockFreq+0xd0>)
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fa:	623b      	str	r3, [r7, #32]
      break;
 80043fc:	e002      	b.n	8004404 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043fe:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004400:	623b      	str	r3, [r7, #32]
      break;
 8004402:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004404:	6a3b      	ldr	r3, [r7, #32]
}
 8004406:	4618      	mov	r0, r3
 8004408:	372c      	adds	r7, #44	; 0x2c
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	007a1200 	.word	0x007a1200
 800441c:	080092a8 	.word	0x080092a8
 8004420:	080092b8 	.word	0x080092b8
 8004424:	003d0900 	.word	0x003d0900

08004428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_RCC_GetHCLKFreq+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	20000000 	.word	0x20000000

08004440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004446:	f7ff ffef 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 800444a:	4601      	mov	r1, r0
 800444c:	4b0b      	ldr	r3, [pc, #44]	; (800447c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004454:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004458:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800445a:	687a      	ldr	r2, [r7, #4]
 800445c:	fa92 f2a2 	rbit	r2, r2
 8004460:	603a      	str	r2, [r7, #0]
  return result;
 8004462:	683a      	ldr	r2, [r7, #0]
 8004464:	fab2 f282 	clz	r2, r2
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	40d3      	lsrs	r3, r2
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x40>)
 800446e:	5cd3      	ldrb	r3, [r2, r3]
 8004470:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	40021000 	.word	0x40021000
 8004480:	080092a0 	.word	0x080092a0

08004484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b082      	sub	sp, #8
 8004488:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800448a:	f7ff ffcd 	bl	8004428 <HAL_RCC_GetHCLKFreq>
 800448e:	4601      	mov	r1, r0
 8004490:	4b0b      	ldr	r3, [pc, #44]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004498:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800449c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	fa92 f2a2 	rbit	r2, r2
 80044a4:	603a      	str	r2, [r7, #0]
  return result;
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	fab2 f282 	clz	r2, r2
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	40d3      	lsrs	r3, r2
 80044b0:	4a04      	ldr	r2, [pc, #16]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80044b2:	5cd3      	ldrb	r3, [r2, r3]
 80044b4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	080092a0 	.word	0x080092a0

080044c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b092      	sub	sp, #72	; 0x48
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80d4 	beq.w	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ec:	4b4e      	ldr	r3, [pc, #312]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ee:	69db      	ldr	r3, [r3, #28]
 80044f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d10e      	bne.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f8:	4b4b      	ldr	r3, [pc, #300]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4a4a      	ldr	r2, [pc, #296]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	61d3      	str	r3, [r2, #28]
 8004504:	4b48      	ldr	r3, [pc, #288]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004510:	2301      	movs	r3, #1
 8004512:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004516:	4b45      	ldr	r3, [pc, #276]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800451e:	2b00      	cmp	r3, #0
 8004520:	d118      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004522:	4b42      	ldr	r3, [pc, #264]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a41      	ldr	r2, [pc, #260]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800452c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452e:	f7fd f873 	bl	8001618 <HAL_GetTick>
 8004532:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004536:	f7fd f86f 	bl	8001618 <HAL_GetTick>
 800453a:	4602      	mov	r2, r0
 800453c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800453e:	1ad3      	subs	r3, r2, r3
 8004540:	2b64      	cmp	r3, #100	; 0x64
 8004542:	d901      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e169      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004548:	4b38      	ldr	r3, [pc, #224]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004550:	2b00      	cmp	r3, #0
 8004552:	d0f0      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004554:	4b34      	ldr	r3, [pc, #208]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800455e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004560:	2b00      	cmp	r3, #0
 8004562:	f000 8084 	beq.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800456e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004570:	429a      	cmp	r2, r3
 8004572:	d07c      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004574:	4b2c      	ldr	r3, [pc, #176]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800457e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	fa93 f3a3 	rbit	r3, r3
 800458a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800458e:	fab3 f383 	clz	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	4b26      	ldr	r3, [pc, #152]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004598:	4413      	add	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	461a      	mov	r2, r3
 800459e:	2301      	movs	r3, #1
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80045a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045aa:	fa93 f3a3 	rbit	r3, r3
 80045ae:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80045b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	461a      	mov	r2, r3
 80045ba:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	461a      	mov	r2, r3
 80045c2:	2300      	movs	r3, #0
 80045c4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ca:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d04b      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d6:	f7fd f81f 	bl	8001618 <HAL_GetTick>
 80045da:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045dc:	e00a      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045de:	f7fd f81b 	bl	8001618 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e113      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x354>
 80045f4:	2302      	movs	r3, #2
 80045f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	627b      	str	r3, [r7, #36]	; 0x24
 8004600:	2302      	movs	r3, #2
 8004602:	623b      	str	r3, [r7, #32]
 8004604:	6a3b      	ldr	r3, [r7, #32]
 8004606:	fa93 f3a3 	rbit	r3, r3
 800460a:	61fb      	str	r3, [r7, #28]
  return result;
 800460c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800460e:	fab3 f383 	clz	r3, r3
 8004612:	b2db      	uxtb	r3, r3
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f043 0302 	orr.w	r3, r3, #2
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b02      	cmp	r3, #2
 8004620:	d108      	bne.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004622:	4b01      	ldr	r3, [pc, #4]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	e00d      	b.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004628:	40021000 	.word	0x40021000
 800462c:	40007000 	.word	0x40007000
 8004630:	10908100 	.word	0x10908100
 8004634:	2302      	movs	r3, #2
 8004636:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fa93 f3a3 	rbit	r3, r3
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	4b78      	ldr	r3, [pc, #480]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	2202      	movs	r2, #2
 8004646:	613a      	str	r2, [r7, #16]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	fa92 f2a2 	rbit	r2, r2
 800464e:	60fa      	str	r2, [r7, #12]
  return result;
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	fab2 f282 	clz	r2, r2
 8004656:	b2d2      	uxtb	r2, r2
 8004658:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	f002 021f 	and.w	r2, r2, #31
 8004662:	2101      	movs	r1, #1
 8004664:	fa01 f202 	lsl.w	r2, r1, r2
 8004668:	4013      	ands	r3, r2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0b7      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800466e:	4b6d      	ldr	r3, [pc, #436]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	496a      	ldr	r1, [pc, #424]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800467c:	4313      	orrs	r3, r2
 800467e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004680:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004684:	2b01      	cmp	r3, #1
 8004686:	d105      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800468a:	69db      	ldr	r3, [r3, #28]
 800468c:	4a65      	ldr	r2, [pc, #404]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800468e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004692:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0301 	and.w	r3, r3, #1
 800469c:	2b00      	cmp	r3, #0
 800469e:	d008      	beq.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046a0:	4b60      	ldr	r3, [pc, #384]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	f023 0203 	bic.w	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	495d      	ldr	r1, [pc, #372]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d008      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80046be:	4b59      	ldr	r3, [pc, #356]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4956      	ldr	r1, [pc, #344]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0304 	and.w	r3, r3, #4
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d008      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046dc:	4b51      	ldr	r3, [pc, #324]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	494e      	ldr	r1, [pc, #312]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046ea:	4313      	orrs	r3, r2
 80046ec:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0320 	and.w	r3, r3, #32
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046fa:	4b4a      	ldr	r3, [pc, #296]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80046fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046fe:	f023 0210 	bic.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	4947      	ldr	r1, [pc, #284]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004708:	4313      	orrs	r3, r2
 800470a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d008      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004718:	4b42      	ldr	r3, [pc, #264]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004724:	493f      	ldr	r1, [pc, #252]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004726:	4313      	orrs	r3, r2
 8004728:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d008      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004736:	4b3b      	ldr	r3, [pc, #236]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473a:	f023 0220 	bic.w	r2, r3, #32
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	4938      	ldr	r1, [pc, #224]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004744:	4313      	orrs	r3, r2
 8004746:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	2b00      	cmp	r3, #0
 8004752:	d008      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004754:	4b33      	ldr	r3, [pc, #204]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	4930      	ldr	r1, [pc, #192]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0310 	and.w	r3, r3, #16
 800476e:	2b00      	cmp	r3, #0
 8004770:	d008      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004772:	4b2c      	ldr	r3, [pc, #176]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	4929      	ldr	r1, [pc, #164]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004780:	4313      	orrs	r3, r2
 8004782:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478c:	2b00      	cmp	r3, #0
 800478e:	d008      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004790:	4b24      	ldr	r3, [pc, #144]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	4921      	ldr	r1, [pc, #132]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d008      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047ae:	4b1d      	ldr	r3, [pc, #116]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b2:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	491a      	ldr	r1, [pc, #104]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047bc:	4313      	orrs	r3, r2
 80047be:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047cc:	4b15      	ldr	r3, [pc, #84]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	4912      	ldr	r1, [pc, #72]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047ea:	4b0e      	ldr	r3, [pc, #56]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	490b      	ldr	r1, [pc, #44]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d008      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800480a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004816:	4313      	orrs	r3, r2
 8004818:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800481a:	2300      	movs	r3, #0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3748      	adds	r7, #72	; 0x48
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	40021000 	.word	0x40021000

08004828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e040      	b.n	80048bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800483e:	2b00      	cmp	r3, #0
 8004840:	d106      	bne.n	8004850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc fd12 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2224      	movs	r2, #36	; 0x24
 8004854:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0201 	bic.w	r2, r2, #1
 8004864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f8c0 	bl	80049ec <UART_SetConfig>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e022      	b.n	80048bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa8a 	bl	8004d98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685a      	ldr	r2, [r3, #4]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	689a      	ldr	r2, [r3, #8]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f042 0201 	orr.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb11 	bl	8004edc <UART_CheckIdleState>
 80048ba:	4603      	mov	r3, r0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3708      	adds	r7, #8
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b08a      	sub	sp, #40	; 0x28
 80048c8:	af02      	add	r7, sp, #8
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	603b      	str	r3, [r7, #0]
 80048d0:	4613      	mov	r3, r2
 80048d2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d8:	2b20      	cmp	r3, #32
 80048da:	f040 8082 	bne.w	80049e2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_UART_Transmit+0x26>
 80048e4:	88fb      	ldrh	r3, [r7, #6]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d101      	bne.n	80048ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	e07a      	b.n	80049e4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d101      	bne.n	80048fc <HAL_UART_Transmit+0x38>
 80048f8:	2302      	movs	r3, #2
 80048fa:	e073      	b.n	80049e4 <HAL_UART_Transmit+0x120>
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2221      	movs	r2, #33	; 0x21
 8004910:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004912:	f7fc fe81 	bl	8001618 <HAL_GetTick>
 8004916:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	88fa      	ldrh	r2, [r7, #6]
 800491c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	88fa      	ldrh	r2, [r7, #6]
 8004924:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004930:	d108      	bne.n	8004944 <HAL_UART_Transmit+0x80>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d104      	bne.n	8004944 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	61bb      	str	r3, [r7, #24]
 8004942:	e003      	b.n	800494c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004954:	e02d      	b.n	80049b2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2200      	movs	r2, #0
 800495e:	2180      	movs	r1, #128	; 0x80
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fb04 	bl	8004f6e <UART_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e039      	b.n	80049e4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10b      	bne.n	800498e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	881a      	ldrh	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004982:	b292      	uxth	r2, r2
 8004984:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	3302      	adds	r3, #2
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e008      	b.n	80049a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	b292      	uxth	r2, r2
 8004998:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	3b01      	subs	r3, #1
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1cb      	bne.n	8004956 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	697b      	ldr	r3, [r7, #20]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2140      	movs	r1, #64	; 0x40
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 fad0 	bl	8004f6e <UART_WaitOnFlagUntilTimeout>
 80049ce:	4603      	mov	r3, r0
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d001      	beq.n	80049d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e005      	b.n	80049e4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2220      	movs	r2, #32
 80049dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	e000      	b.n	80049e4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80049e2:	2302      	movs	r3, #2
  }
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004a1a:	f023 030c 	bic.w	r3, r3, #12
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	6979      	ldr	r1, [r7, #20]
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4aa8      	ldr	r2, [pc, #672]	; (8004d08 <UART_SetConfig+0x31c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d120      	bne.n	8004aae <UART_SetConfig+0xc2>
 8004a6c:	4ba7      	ldr	r3, [pc, #668]	; (8004d0c <UART_SetConfig+0x320>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d817      	bhi.n	8004aa8 <UART_SetConfig+0xbc>
 8004a78:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <UART_SetConfig+0x94>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004a9d 	.word	0x08004a9d
 8004a88:	08004aa3 	.word	0x08004aa3
 8004a8c:	08004a97 	.word	0x08004a97
 8004a90:	2301      	movs	r3, #1
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e0b5      	b.n	8004c02 <UART_SetConfig+0x216>
 8004a96:	2302      	movs	r3, #2
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e0b2      	b.n	8004c02 <UART_SetConfig+0x216>
 8004a9c:	2304      	movs	r3, #4
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e0af      	b.n	8004c02 <UART_SetConfig+0x216>
 8004aa2:	2308      	movs	r3, #8
 8004aa4:	77fb      	strb	r3, [r7, #31]
 8004aa6:	e0ac      	b.n	8004c02 <UART_SetConfig+0x216>
 8004aa8:	2310      	movs	r3, #16
 8004aaa:	77fb      	strb	r3, [r7, #31]
 8004aac:	e0a9      	b.n	8004c02 <UART_SetConfig+0x216>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a97      	ldr	r2, [pc, #604]	; (8004d10 <UART_SetConfig+0x324>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d124      	bne.n	8004b02 <UART_SetConfig+0x116>
 8004ab8:	4b94      	ldr	r3, [pc, #592]	; (8004d0c <UART_SetConfig+0x320>)
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ac0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ac4:	d011      	beq.n	8004aea <UART_SetConfig+0xfe>
 8004ac6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004aca:	d817      	bhi.n	8004afc <UART_SetConfig+0x110>
 8004acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad0:	d011      	beq.n	8004af6 <UART_SetConfig+0x10a>
 8004ad2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ad6:	d811      	bhi.n	8004afc <UART_SetConfig+0x110>
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <UART_SetConfig+0xf8>
 8004adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae0:	d006      	beq.n	8004af0 <UART_SetConfig+0x104>
 8004ae2:	e00b      	b.n	8004afc <UART_SetConfig+0x110>
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	77fb      	strb	r3, [r7, #31]
 8004ae8:	e08b      	b.n	8004c02 <UART_SetConfig+0x216>
 8004aea:	2302      	movs	r3, #2
 8004aec:	77fb      	strb	r3, [r7, #31]
 8004aee:	e088      	b.n	8004c02 <UART_SetConfig+0x216>
 8004af0:	2304      	movs	r3, #4
 8004af2:	77fb      	strb	r3, [r7, #31]
 8004af4:	e085      	b.n	8004c02 <UART_SetConfig+0x216>
 8004af6:	2308      	movs	r3, #8
 8004af8:	77fb      	strb	r3, [r7, #31]
 8004afa:	e082      	b.n	8004c02 <UART_SetConfig+0x216>
 8004afc:	2310      	movs	r3, #16
 8004afe:	77fb      	strb	r3, [r7, #31]
 8004b00:	e07f      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a83      	ldr	r2, [pc, #524]	; (8004d14 <UART_SetConfig+0x328>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d124      	bne.n	8004b56 <UART_SetConfig+0x16a>
 8004b0c:	4b7f      	ldr	r3, [pc, #508]	; (8004d0c <UART_SetConfig+0x320>)
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004b14:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b18:	d011      	beq.n	8004b3e <UART_SetConfig+0x152>
 8004b1a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004b1e:	d817      	bhi.n	8004b50 <UART_SetConfig+0x164>
 8004b20:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b24:	d011      	beq.n	8004b4a <UART_SetConfig+0x15e>
 8004b26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004b2a:	d811      	bhi.n	8004b50 <UART_SetConfig+0x164>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <UART_SetConfig+0x14c>
 8004b30:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b34:	d006      	beq.n	8004b44 <UART_SetConfig+0x158>
 8004b36:	e00b      	b.n	8004b50 <UART_SetConfig+0x164>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	77fb      	strb	r3, [r7, #31]
 8004b3c:	e061      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	77fb      	strb	r3, [r7, #31]
 8004b42:	e05e      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b44:	2304      	movs	r3, #4
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e05b      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b4a:	2308      	movs	r3, #8
 8004b4c:	77fb      	strb	r3, [r7, #31]
 8004b4e:	e058      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b50:	2310      	movs	r3, #16
 8004b52:	77fb      	strb	r3, [r7, #31]
 8004b54:	e055      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6f      	ldr	r2, [pc, #444]	; (8004d18 <UART_SetConfig+0x32c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d124      	bne.n	8004baa <UART_SetConfig+0x1be>
 8004b60:	4b6a      	ldr	r3, [pc, #424]	; (8004d0c <UART_SetConfig+0x320>)
 8004b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b64:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b68:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b6c:	d011      	beq.n	8004b92 <UART_SetConfig+0x1a6>
 8004b6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b72:	d817      	bhi.n	8004ba4 <UART_SetConfig+0x1b8>
 8004b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b78:	d011      	beq.n	8004b9e <UART_SetConfig+0x1b2>
 8004b7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b7e:	d811      	bhi.n	8004ba4 <UART_SetConfig+0x1b8>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <UART_SetConfig+0x1a0>
 8004b84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b88:	d006      	beq.n	8004b98 <UART_SetConfig+0x1ac>
 8004b8a:	e00b      	b.n	8004ba4 <UART_SetConfig+0x1b8>
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e037      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b92:	2302      	movs	r3, #2
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e034      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e031      	b.n	8004c02 <UART_SetConfig+0x216>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	77fb      	strb	r3, [r7, #31]
 8004ba2:	e02e      	b.n	8004c02 <UART_SetConfig+0x216>
 8004ba4:	2310      	movs	r3, #16
 8004ba6:	77fb      	strb	r3, [r7, #31]
 8004ba8:	e02b      	b.n	8004c02 <UART_SetConfig+0x216>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a5b      	ldr	r2, [pc, #364]	; (8004d1c <UART_SetConfig+0x330>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d124      	bne.n	8004bfe <UART_SetConfig+0x212>
 8004bb4:	4b55      	ldr	r3, [pc, #340]	; (8004d0c <UART_SetConfig+0x320>)
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004bbc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bc0:	d011      	beq.n	8004be6 <UART_SetConfig+0x1fa>
 8004bc2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bc6:	d817      	bhi.n	8004bf8 <UART_SetConfig+0x20c>
 8004bc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bcc:	d011      	beq.n	8004bf2 <UART_SetConfig+0x206>
 8004bce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004bd2:	d811      	bhi.n	8004bf8 <UART_SetConfig+0x20c>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <UART_SetConfig+0x1f4>
 8004bd8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bdc:	d006      	beq.n	8004bec <UART_SetConfig+0x200>
 8004bde:	e00b      	b.n	8004bf8 <UART_SetConfig+0x20c>
 8004be0:	2300      	movs	r3, #0
 8004be2:	77fb      	strb	r3, [r7, #31]
 8004be4:	e00d      	b.n	8004c02 <UART_SetConfig+0x216>
 8004be6:	2302      	movs	r3, #2
 8004be8:	77fb      	strb	r3, [r7, #31]
 8004bea:	e00a      	b.n	8004c02 <UART_SetConfig+0x216>
 8004bec:	2304      	movs	r3, #4
 8004bee:	77fb      	strb	r3, [r7, #31]
 8004bf0:	e007      	b.n	8004c02 <UART_SetConfig+0x216>
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	77fb      	strb	r3, [r7, #31]
 8004bf6:	e004      	b.n	8004c02 <UART_SetConfig+0x216>
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	77fb      	strb	r3, [r7, #31]
 8004bfc:	e001      	b.n	8004c02 <UART_SetConfig+0x216>
 8004bfe:	2310      	movs	r3, #16
 8004c00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c0a:	d15c      	bne.n	8004cc6 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8004c0c:	7ffb      	ldrb	r3, [r7, #31]
 8004c0e:	2b08      	cmp	r3, #8
 8004c10:	d827      	bhi.n	8004c62 <UART_SetConfig+0x276>
 8004c12:	a201      	add	r2, pc, #4	; (adr r2, 8004c18 <UART_SetConfig+0x22c>)
 8004c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c18:	08004c3d 	.word	0x08004c3d
 8004c1c:	08004c45 	.word	0x08004c45
 8004c20:	08004c4d 	.word	0x08004c4d
 8004c24:	08004c63 	.word	0x08004c63
 8004c28:	08004c53 	.word	0x08004c53
 8004c2c:	08004c63 	.word	0x08004c63
 8004c30:	08004c63 	.word	0x08004c63
 8004c34:	08004c63 	.word	0x08004c63
 8004c38:	08004c5b 	.word	0x08004c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c3c:	f7ff fc00 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8004c40:	61b8      	str	r0, [r7, #24]
        break;
 8004c42:	e013      	b.n	8004c6c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c44:	f7ff fc1e 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8004c48:	61b8      	str	r0, [r7, #24]
        break;
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c4c:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <UART_SetConfig+0x334>)
 8004c4e:	61bb      	str	r3, [r7, #24]
        break;
 8004c50:	e00c      	b.n	8004c6c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c52:	f7ff fb7f 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 8004c56:	61b8      	str	r0, [r7, #24]
        break;
 8004c58:	e008      	b.n	8004c6c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c5e:	61bb      	str	r3, [r7, #24]
        break;
 8004c60:	e004      	b.n	8004c6c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	77bb      	strb	r3, [r7, #30]
        break;
 8004c6a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8084 	beq.w	8004d7c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	005a      	lsls	r2, r3, #1
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	085b      	lsrs	r3, r3, #1
 8004c7e:	441a      	add	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b0f      	cmp	r3, #15
 8004c90:	d916      	bls.n	8004cc0 <UART_SetConfig+0x2d4>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c98:	d212      	bcs.n	8004cc0 <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	f023 030f 	bic.w	r3, r3, #15
 8004ca2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	89fb      	ldrh	r3, [r7, #14]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	89fa      	ldrh	r2, [r7, #14]
 8004cbc:	60da      	str	r2, [r3, #12]
 8004cbe:	e05d      	b.n	8004d7c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	77bb      	strb	r3, [r7, #30]
 8004cc4:	e05a      	b.n	8004d7c <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cc6:	7ffb      	ldrb	r3, [r7, #31]
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d836      	bhi.n	8004d3a <UART_SetConfig+0x34e>
 8004ccc:	a201      	add	r2, pc, #4	; (adr r2, 8004cd4 <UART_SetConfig+0x2e8>)
 8004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd2:	bf00      	nop
 8004cd4:	08004cf9 	.word	0x08004cf9
 8004cd8:	08004d01 	.word	0x08004d01
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004d3b 	.word	0x08004d3b
 8004ce4:	08004d2b 	.word	0x08004d2b
 8004ce8:	08004d3b 	.word	0x08004d3b
 8004cec:	08004d3b 	.word	0x08004d3b
 8004cf0:	08004d3b 	.word	0x08004d3b
 8004cf4:	08004d33 	.word	0x08004d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cf8:	f7ff fba2 	bl	8004440 <HAL_RCC_GetPCLK1Freq>
 8004cfc:	61b8      	str	r0, [r7, #24]
        break;
 8004cfe:	e021      	b.n	8004d44 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d00:	f7ff fbc0 	bl	8004484 <HAL_RCC_GetPCLK2Freq>
 8004d04:	61b8      	str	r0, [r7, #24]
        break;
 8004d06:	e01d      	b.n	8004d44 <UART_SetConfig+0x358>
 8004d08:	40013800 	.word	0x40013800
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40004400 	.word	0x40004400
 8004d14:	40004800 	.word	0x40004800
 8004d18:	40004c00 	.word	0x40004c00
 8004d1c:	40005000 	.word	0x40005000
 8004d20:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d24:	4b1b      	ldr	r3, [pc, #108]	; (8004d94 <UART_SetConfig+0x3a8>)
 8004d26:	61bb      	str	r3, [r7, #24]
        break;
 8004d28:	e00c      	b.n	8004d44 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2a:	f7ff fb13 	bl	8004354 <HAL_RCC_GetSysClockFreq>
 8004d2e:	61b8      	str	r0, [r7, #24]
        break;
 8004d30:	e008      	b.n	8004d44 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	61bb      	str	r3, [r7, #24]
        break;
 8004d38:	e004      	b.n	8004d44 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	77bb      	strb	r3, [r7, #30]
        break;
 8004d42:	bf00      	nop
    }

    if (pclk != 0U)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d018      	beq.n	8004d7c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	085a      	lsrs	r2, r3, #1
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	441a      	add	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	2b0f      	cmp	r3, #15
 8004d64:	d908      	bls.n	8004d78 <UART_SetConfig+0x38c>
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d6c:	d204      	bcs.n	8004d78 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	e001      	b.n	8004d7c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004d88:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3720      	adds	r7, #32
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	007a1200 	.word	0x007a1200

08004d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00a      	beq.n	8004dc2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	430a      	orrs	r2, r1
 8004dc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00a      	beq.n	8004de4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	430a      	orrs	r2, r1
 8004de2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de8:	f003 0304 	and.w	r3, r3, #4
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00a      	beq.n	8004e06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	f003 0308 	and.w	r3, r3, #8
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	430a      	orrs	r2, r1
 8004e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	f003 0310 	and.w	r3, r3, #16
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00a      	beq.n	8004e4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4e:	f003 0320 	and.w	r3, r3, #32
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d01a      	beq.n	8004eae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e96:	d10a      	bne.n	8004eae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	605a      	str	r2, [r3, #4]
  }
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004eec:	f7fc fb94 	bl	8001618 <HAL_GetTick>
 8004ef0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0308 	and.w	r3, r3, #8
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d10e      	bne.n	8004f1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f82d 	bl	8004f6e <UART_WaitOnFlagUntilTimeout>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e023      	b.n	8004f66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0304 	and.w	r3, r3, #4
 8004f28:	2b04      	cmp	r3, #4
 8004f2a:	d10e      	bne.n	8004f4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f817 	bl	8004f6e <UART_WaitOnFlagUntilTimeout>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d001      	beq.n	8004f4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e00d      	b.n	8004f66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2220      	movs	r2, #32
 8004f54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b09c      	sub	sp, #112	; 0x70
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	60f8      	str	r0, [r7, #12]
 8004f76:	60b9      	str	r1, [r7, #8]
 8004f78:	603b      	str	r3, [r7, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7e:	e0a5      	b.n	80050cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	f000 80a1 	beq.w	80050cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f8a:	f7fc fb45 	bl	8001618 <HAL_GetTick>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	1ad3      	subs	r3, r2, r3
 8004f94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d302      	bcc.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d13e      	bne.n	800501e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004fae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fb4:	667b      	str	r3, [r7, #100]	; 0x64
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fc0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004fc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e6      	bne.n	8004fa0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	3308      	adds	r3, #8
 8004fd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	663b      	str	r3, [r7, #96]	; 0x60
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	3308      	adds	r3, #8
 8004ff0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ff2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ff4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ff8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005000:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e5      	bne.n	8004fd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2220      	movs	r2, #32
 800500a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e067      	b.n	80050ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 0304 	and.w	r3, r3, #4
 8005028:	2b00      	cmp	r3, #0
 800502a:	d04f      	beq.n	80050cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503a:	d147      	bne.n	80050cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005044:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	e853 3f00 	ldrex	r3, [r3]
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005056:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800505a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	461a      	mov	r2, r3
 8005062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005064:	637b      	str	r3, [r7, #52]	; 0x34
 8005066:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005068:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800506a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800506c:	e841 2300 	strex	r3, r2, [r1]
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005074:	2b00      	cmp	r3, #0
 8005076:	d1e6      	bne.n	8005046 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3308      	adds	r3, #8
 800507e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	613b      	str	r3, [r7, #16]
   return(result);
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3308      	adds	r3, #8
 8005096:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005098:	623a      	str	r2, [r7, #32]
 800509a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800509c:	69f9      	ldr	r1, [r7, #28]
 800509e:	6a3a      	ldr	r2, [r7, #32]
 80050a0:	e841 2300 	strex	r3, r2, [r1]
 80050a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d1e5      	bne.n	8005078 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e010      	b.n	80050ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69da      	ldr	r2, [r3, #28]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	429a      	cmp	r2, r3
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	f43f af4a 	beq.w	8004f80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3770      	adds	r7, #112	; 0x70
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <arm_max_f32>:
 80050f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050fc:	1e4f      	subs	r7, r1, #1
 80050fe:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8005102:	f100 0e04 	add.w	lr, r0, #4
 8005106:	edd0 7a00 	vldr	s15, [r0]
 800510a:	d058      	beq.n	80051be <arm_max_f32+0xc6>
 800510c:	3014      	adds	r0, #20
 800510e:	46c4      	mov	ip, r8
 8005110:	2604      	movs	r6, #4
 8005112:	2400      	movs	r4, #0
 8005114:	ed10 6a04 	vldr	s12, [r0, #-16]
 8005118:	ed50 6a03 	vldr	s13, [r0, #-12]
 800511c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8005120:	ed50 5a01 	vldr	s11, [r0, #-4]
 8005124:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8005128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800512c:	bfc8      	it	gt
 800512e:	eef0 7a46 	vmovgt.f32	s15, s12
 8005132:	f1a6 0503 	sub.w	r5, r6, #3
 8005136:	eef4 7ae6 	vcmpe.f32	s15, s13
 800513a:	bfc8      	it	gt
 800513c:	462c      	movgt	r4, r5
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	bf48      	it	mi
 8005144:	eef0 7a66 	vmovmi.f32	s15, s13
 8005148:	f1a6 0502 	sub.w	r5, r6, #2
 800514c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005150:	bf48      	it	mi
 8005152:	462c      	movmi	r4, r5
 8005154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005158:	bf48      	it	mi
 800515a:	eef0 7a47 	vmovmi.f32	s15, s14
 800515e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005162:	eef4 7ae5 	vcmpe.f32	s15, s11
 8005166:	bf48      	it	mi
 8005168:	462c      	movmi	r4, r5
 800516a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800516e:	bf48      	it	mi
 8005170:	4634      	movmi	r4, r6
 8005172:	bf48      	it	mi
 8005174:	eef0 7a65 	vmovmi.f32	s15, s11
 8005178:	f1bc 0c01 	subs.w	ip, ip, #1
 800517c:	f100 0010 	add.w	r0, r0, #16
 8005180:	f106 0604 	add.w	r6, r6, #4
 8005184:	d1c6      	bne.n	8005114 <arm_max_f32+0x1c>
 8005186:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 800518a:	f017 0003 	ands.w	r0, r7, #3
 800518e:	d018      	beq.n	80051c2 <arm_max_f32+0xca>
 8005190:	1a08      	subs	r0, r1, r0
 8005192:	ecbe 7a01 	vldmia	lr!, {s14}
 8005196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800519a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800519e:	bfc8      	it	gt
 80051a0:	4604      	movgt	r4, r0
 80051a2:	f100 0001 	add.w	r0, r0, #1
 80051a6:	bfd8      	it	le
 80051a8:	eeb0 7a67 	vmovle.f32	s14, s15
 80051ac:	4281      	cmp	r1, r0
 80051ae:	eef0 7a47 	vmov.f32	s15, s14
 80051b2:	d1ee      	bne.n	8005192 <arm_max_f32+0x9a>
 80051b4:	ed82 7a00 	vstr	s14, [r2]
 80051b8:	601c      	str	r4, [r3, #0]
 80051ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051be:	4644      	mov	r4, r8
 80051c0:	e7e3      	b.n	800518a <arm_max_f32+0x92>
 80051c2:	eeb0 7a67 	vmov.f32	s14, s15
 80051c6:	e7f5      	b.n	80051b4 <arm_max_f32+0xbc>

080051c8 <arm_cfft_radix4_init_f32>:
 80051c8:	b410      	push	{r4}
 80051ca:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80051ce:	4c29      	ldr	r4, [pc, #164]	; (8005274 <arm_cfft_radix4_init_f32+0xac>)
 80051d0:	7082      	strb	r2, [r0, #2]
 80051d2:	70c3      	strb	r3, [r0, #3]
 80051d4:	8001      	strh	r1, [r0, #0]
 80051d6:	6044      	str	r4, [r0, #4]
 80051d8:	d03f      	beq.n	800525a <arm_cfft_radix4_init_f32+0x92>
 80051da:	d80e      	bhi.n	80051fa <arm_cfft_radix4_init_f32+0x32>
 80051dc:	2910      	cmp	r1, #16
 80051de:	d02f      	beq.n	8005240 <arm_cfft_radix4_init_f32+0x78>
 80051e0:	2940      	cmp	r1, #64	; 0x40
 80051e2:	d11c      	bne.n	800521e <arm_cfft_radix4_init_f32+0x56>
 80051e4:	f04f 5272 	mov.w	r2, #1015021568	; 0x3c800000
 80051e8:	4b23      	ldr	r3, [pc, #140]	; (8005278 <arm_cfft_radix4_init_f32+0xb0>)
 80051ea:	8181      	strh	r1, [r0, #12]
 80051ec:	81c1      	strh	r1, [r0, #14]
 80051ee:	6102      	str	r2, [r0, #16]
 80051f0:	6083      	str	r3, [r0, #8]
 80051f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051f6:	2000      	movs	r0, #0
 80051f8:	4770      	bx	lr
 80051fa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80051fe:	d013      	beq.n	8005228 <arm_cfft_radix4_init_f32+0x60>
 8005200:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005204:	d10b      	bne.n	800521e <arm_cfft_radix4_init_f32+0x56>
 8005206:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 800520a:	6103      	str	r3, [r0, #16]
 800520c:	4a1b      	ldr	r2, [pc, #108]	; (800527c <arm_cfft_radix4_init_f32+0xb4>)
 800520e:	6082      	str	r2, [r0, #8]
 8005210:	2301      	movs	r3, #1
 8005212:	8183      	strh	r3, [r0, #12]
 8005214:	81c3      	strh	r3, [r0, #14]
 8005216:	f85d 4b04 	ldr.w	r4, [sp], #4
 800521a:	2000      	movs	r0, #0
 800521c:	4770      	bx	lr
 800521e:	f04f 30ff 	mov.w	r0, #4294967295
 8005222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	f04f 536a 	mov.w	r3, #981467136	; 0x3a800000
 800522c:	6103      	str	r3, [r0, #16]
 800522e:	4a14      	ldr	r2, [pc, #80]	; (8005280 <arm_cfft_radix4_init_f32+0xb8>)
 8005230:	6082      	str	r2, [r0, #8]
 8005232:	2304      	movs	r3, #4
 8005234:	8183      	strh	r3, [r0, #12]
 8005236:	81c3      	strh	r3, [r0, #14]
 8005238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800523c:	2000      	movs	r0, #0
 800523e:	4770      	bx	lr
 8005240:	f04f 5376 	mov.w	r3, #1031798784	; 0x3d800000
 8005244:	6103      	str	r3, [r0, #16]
 8005246:	4a0f      	ldr	r2, [pc, #60]	; (8005284 <arm_cfft_radix4_init_f32+0xbc>)
 8005248:	6082      	str	r2, [r0, #8]
 800524a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800524e:	8183      	strh	r3, [r0, #12]
 8005250:	81c3      	strh	r3, [r0, #14]
 8005252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005256:	2000      	movs	r0, #0
 8005258:	4770      	bx	lr
 800525a:	f04f 536e 	mov.w	r3, #998244352	; 0x3b800000
 800525e:	6103      	str	r3, [r0, #16]
 8005260:	4a09      	ldr	r2, [pc, #36]	; (8005288 <arm_cfft_radix4_init_f32+0xc0>)
 8005262:	6082      	str	r2, [r0, #8]
 8005264:	2310      	movs	r3, #16
 8005266:	8183      	strh	r3, [r0, #12]
 8005268:	81c3      	strh	r3, [r0, #14]
 800526a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800526e:	2000      	movs	r0, #0
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	08009ac8 	.word	0x08009ac8
 8005278:	08009346 	.word	0x08009346
 800527c:	080092c8 	.word	0x080092c8
 8005280:	080092ce 	.word	0x080092ce
 8005284:	080094c6 	.word	0x080094c6
 8005288:	080092e6 	.word	0x080092e6

0800528c <arm_radix4_butterfly_f32>:
 800528c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005290:	ed2d 8b06 	vpush	{d8-d10}
 8005294:	468a      	mov	sl, r1
 8005296:	0889      	lsrs	r1, r1, #2
 8005298:	b08d      	sub	sp, #52	; 0x34
 800529a:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
 800529e:	eb00 040c 	add.w	r4, r0, ip
 80052a2:	460d      	mov	r5, r1
 80052a4:	461f      	mov	r7, r3
 80052a6:	4691      	mov	r9, r2
 80052a8:	920a      	str	r2, [sp, #40]	; 0x28
 80052aa:	eb04 020c 	add.w	r2, r4, ip
 80052ae:	4606      	mov	r6, r0
 80052b0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80052b4:	9700      	str	r7, [sp, #0]
 80052b6:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 80052ba:	9009      	str	r0, [sp, #36]	; 0x24
 80052bc:	eba2 07c5 	sub.w	r7, r2, r5, lsl #3
 80052c0:	f10c 0004 	add.w	r0, ip, #4
 80052c4:	9701      	str	r7, [sp, #4]
 80052c6:	9103      	str	r1, [sp, #12]
 80052c8:	4430      	add	r0, r6
 80052ca:	4631      	mov	r1, r6
 80052cc:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80052d0:	1d37      	adds	r7, r6, #4
 80052d2:	9e00      	ldr	r6, [sp, #0]
 80052d4:	46ab      	mov	fp, r5
 80052d6:	00f5      	lsls	r5, r6, #3
 80052d8:	9502      	str	r5, [sp, #8]
 80052da:	f8cd b010 	str.w	fp, [sp, #16]
 80052de:	f8dd b008 	ldr.w	fp, [sp, #8]
 80052e2:	f8cd a008 	str.w	sl, [sp, #8]
 80052e6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80052ea:	ea4f 1806 	mov.w	r8, r6, lsl #4
 80052ee:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80052f2:	464e      	mov	r6, r9
 80052f4:	464d      	mov	r5, r9
 80052f6:	edd1 4a01 	vldr	s9, [r1, #4]
 80052fa:	ed10 4a01 	vldr	s8, [r0, #-4]
 80052fe:	ed17 6a01 	vldr	s12, [r7, #-4]
 8005302:	edd2 6a00 	vldr	s13, [r2]
 8005306:	ed94 7a01 	vldr	s14, [r4, #4]
 800530a:	edd3 7a01 	vldr	s15, [r3, #4]
 800530e:	ed93 5a00 	vldr	s10, [r3]
 8005312:	edd2 5a01 	vldr	s11, [r2, #4]
 8005316:	ed99 3a00 	vldr	s6, [r9]
 800531a:	edd9 3a01 	vldr	s7, [r9, #4]
 800531e:	ee36 2a26 	vadd.f32	s4, s12, s13
 8005322:	ee74 2a05 	vadd.f32	s5, s8, s10
 8005326:	ee34 1aa5 	vadd.f32	s2, s9, s11
 800532a:	ee77 1a27 	vadd.f32	s3, s14, s15
 800532e:	ee32 0a22 	vadd.f32	s0, s4, s5
 8005332:	ee71 0a21 	vadd.f32	s1, s2, s3
 8005336:	ee36 6a66 	vsub.f32	s12, s12, s13
 800533a:	ee34 5a45 	vsub.f32	s10, s8, s10
 800533e:	ee74 5ae5 	vsub.f32	s11, s9, s11
 8005342:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005346:	ed07 0a01 	vstr	s0, [r7, #-4]
 800534a:	edc1 0a01 	vstr	s1, [r1, #4]
 800534e:	ed95 4a00 	vldr	s8, [r5]
 8005352:	edd6 6a00 	vldr	s13, [r6]
 8005356:	edd6 7a01 	vldr	s15, [r6, #4]
 800535a:	ee72 4a62 	vsub.f32	s9, s4, s5
 800535e:	ee71 1a61 	vsub.f32	s3, s2, s3
 8005362:	ee75 2ac5 	vsub.f32	s5, s11, s10
 8005366:	ed95 1a01 	vldr	s2, [r5, #4]
 800536a:	ee36 2a07 	vadd.f32	s4, s12, s14
 800536e:	ee36 7a47 	vsub.f32	s14, s12, s14
 8005372:	ee35 6a25 	vadd.f32	s12, s10, s11
 8005376:	ee62 0a04 	vmul.f32	s1, s4, s8
 800537a:	ee23 5a21 	vmul.f32	s10, s6, s3
 800537e:	ee22 2a01 	vmul.f32	s4, s4, s2
 8005382:	ee22 4a84 	vmul.f32	s8, s5, s8
 8005386:	ee22 1a81 	vmul.f32	s2, s5, s2
 800538a:	ee67 5a26 	vmul.f32	s11, s14, s13
 800538e:	ee63 2a24 	vmul.f32	s5, s6, s9
 8005392:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005396:	ee63 4aa4 	vmul.f32	s9, s7, s9
 800539a:	ee26 6a27 	vmul.f32	s12, s12, s15
 800539e:	ee63 1aa1 	vmul.f32	s3, s7, s3
 80053a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a6:	ee31 3a20 	vadd.f32	s6, s2, s1
 80053aa:	ee34 4a42 	vsub.f32	s8, s8, s4
 80053ae:	ee71 3aa2 	vadd.f32	s7, s3, s5
 80053b2:	ee35 5a64 	vsub.f32	s10, s10, s9
 80053b6:	ee36 7a25 	vadd.f32	s14, s12, s11
 80053ba:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80053be:	3108      	adds	r1, #8
 80053c0:	4551      	cmp	r1, sl
 80053c2:	ed40 3a01 	vstr	s7, [r0, #-4]
 80053c6:	f107 0708 	add.w	r7, r7, #8
 80053ca:	ed84 5a01 	vstr	s10, [r4, #4]
 80053ce:	44c1      	add	r9, r8
 80053d0:	ed82 3a00 	vstr	s6, [r2]
 80053d4:	ed82 4a01 	vstr	s8, [r2, #4]
 80053d8:	445d      	add	r5, fp
 80053da:	ed83 7a00 	vstr	s14, [r3]
 80053de:	edc3 7a01 	vstr	s15, [r3, #4]
 80053e2:	4476      	add	r6, lr
 80053e4:	f100 0008 	add.w	r0, r0, #8
 80053e8:	f104 0408 	add.w	r4, r4, #8
 80053ec:	f102 0208 	add.w	r2, r2, #8
 80053f0:	f103 0308 	add.w	r3, r3, #8
 80053f4:	f47f af7f 	bne.w	80052f6 <arm_radix4_butterfly_f32+0x6a>
 80053f8:	9b00      	ldr	r3, [sp, #0]
 80053fa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80053fe:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005402:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005406:	920b      	str	r2, [sp, #44]	; 0x2c
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	b29b      	uxth	r3, r3
 800540c:	2a04      	cmp	r2, #4
 800540e:	9306      	str	r3, [sp, #24]
 8005410:	f240 80ba 	bls.w	8005588 <arm_radix4_butterfly_f32+0x2fc>
 8005414:	9806      	ldr	r0, [sp, #24]
 8005416:	9207      	str	r2, [sp, #28]
 8005418:	ea4f 039b 	mov.w	r3, fp, lsr #2
 800541c:	4619      	mov	r1, r3
 800541e:	9308      	str	r3, [sp, #32]
 8005420:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8005424:	1e4a      	subs	r2, r1, #1
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800542a:	9205      	str	r2, [sp, #20]
 800542c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800542e:	9303      	str	r3, [sp, #12]
 8005430:	010a      	lsls	r2, r1, #4
 8005432:	0103      	lsls	r3, r0, #4
 8005434:	9204      	str	r2, [sp, #16]
 8005436:	9302      	str	r3, [sp, #8]
 8005438:	00c2      	lsls	r2, r0, #3
 800543a:	2300      	movs	r3, #0
 800543c:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 8005440:	9201      	str	r2, [sp, #4]
 8005442:	46b8      	mov	r8, r7
 8005444:	46be      	mov	lr, r7
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	9b04      	ldr	r3, [sp, #16]
 800544a:	ed97 1a00 	vldr	s2, [r7]
 800544e:	edd7 1a01 	vldr	s3, [r7, #4]
 8005452:	ed9e 2a00 	vldr	s4, [lr]
 8005456:	edde 2a01 	vldr	s5, [lr, #4]
 800545a:	ed98 3a00 	vldr	s6, [r8]
 800545e:	edd8 3a01 	vldr	s7, [r8, #4]
 8005462:	9d00      	ldr	r5, [sp, #0]
 8005464:	18f1      	adds	r1, r6, r3
 8005466:	eb09 0203 	add.w	r2, r9, r3
 800546a:	1d34      	adds	r4, r6, #4
 800546c:	464b      	mov	r3, r9
 800546e:	4630      	mov	r0, r6
 8005470:	ed90 4a01 	vldr	s8, [r0, #4]
 8005474:	ed54 5a01 	vldr	s11, [r4, #-4]
 8005478:	ed91 7a00 	vldr	s14, [r1]
 800547c:	edd2 7a00 	vldr	s15, [r2]
 8005480:	edd3 4a01 	vldr	s9, [r3, #4]
 8005484:	ed92 5a01 	vldr	s10, [r2, #4]
 8005488:	ed93 6a00 	vldr	s12, [r3]
 800548c:	edd1 6a01 	vldr	s13, [r1, #4]
 8005490:	ee35 0a87 	vadd.f32	s0, s11, s14
 8005494:	ee34 8a26 	vadd.f32	s16, s8, s13
 8005498:	ee76 8a27 	vadd.f32	s17, s12, s15
 800549c:	ee74 6a66 	vsub.f32	s13, s8, s13
 80054a0:	ee36 6a67 	vsub.f32	s12, s12, s15
 80054a4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 80054a8:	ee74 7ac5 	vsub.f32	s15, s9, s10
 80054ac:	ee74 0a85 	vadd.f32	s1, s9, s10
 80054b0:	ee35 7ae7 	vsub.f32	s14, s11, s15
 80054b4:	ee78 4a60 	vsub.f32	s9, s16, s1
 80054b8:	ee35 5aa7 	vadd.f32	s10, s11, s15
 80054bc:	ee30 4a68 	vsub.f32	s8, s0, s17
 80054c0:	ee76 5ac6 	vsub.f32	s11, s13, s12
 80054c4:	ee76 7a26 	vadd.f32	s15, s12, s13
 80054c8:	ee22 aa04 	vmul.f32	s20, s4, s8
 80054cc:	ee62 aaa4 	vmul.f32	s21, s5, s9
 80054d0:	ee22 4a84 	vmul.f32	s8, s5, s8
 80054d4:	ee21 9a05 	vmul.f32	s18, s2, s10
 80054d8:	ee61 9aa5 	vmul.f32	s19, s3, s11
 80054dc:	ee63 6a07 	vmul.f32	s13, s6, s14
 80054e0:	ee23 6aa7 	vmul.f32	s12, s7, s15
 80054e4:	ee62 4a24 	vmul.f32	s9, s4, s9
 80054e8:	ee21 5a85 	vmul.f32	s10, s3, s10
 80054ec:	ee61 5a25 	vmul.f32	s11, s2, s11
 80054f0:	ee23 7a87 	vmul.f32	s14, s7, s14
 80054f4:	ee63 7a27 	vmul.f32	s15, s6, s15
 80054f8:	ee78 0a20 	vadd.f32	s1, s16, s1
 80054fc:	ee74 4ac4 	vsub.f32	s9, s9, s8
 8005500:	ee30 0a28 	vadd.f32	s0, s0, s17
 8005504:	ee3a 8a8a 	vadd.f32	s16, s21, s20
 8005508:	ee39 4a89 	vadd.f32	s8, s19, s18
 800550c:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8005510:	ee76 6a26 	vadd.f32	s13, s12, s13
 8005514:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005518:	445d      	add	r5, fp
 800551a:	45aa      	cmp	sl, r5
 800551c:	ed04 0a01 	vstr	s0, [r4, #-4]
 8005520:	edc0 0a01 	vstr	s1, [r0, #4]
 8005524:	4464      	add	r4, ip
 8005526:	ed83 8a00 	vstr	s16, [r3]
 800552a:	edc3 4a01 	vstr	s9, [r3, #4]
 800552e:	4460      	add	r0, ip
 8005530:	ed81 4a00 	vstr	s8, [r1]
 8005534:	edc1 5a01 	vstr	s11, [r1, #4]
 8005538:	4463      	add	r3, ip
 800553a:	edc2 6a00 	vstr	s13, [r2]
 800553e:	edc2 7a01 	vstr	s15, [r2, #4]
 8005542:	4461      	add	r1, ip
 8005544:	4462      	add	r2, ip
 8005546:	d893      	bhi.n	8005470 <arm_radix4_butterfly_f32+0x1e4>
 8005548:	9a01      	ldr	r2, [sp, #4]
 800554a:	9b00      	ldr	r3, [sp, #0]
 800554c:	4417      	add	r7, r2
 800554e:	9a02      	ldr	r2, [sp, #8]
 8005550:	4496      	add	lr, r2
 8005552:	9a03      	ldr	r2, [sp, #12]
 8005554:	4490      	add	r8, r2
 8005556:	9a05      	ldr	r2, [sp, #20]
 8005558:	3301      	adds	r3, #1
 800555a:	4293      	cmp	r3, r2
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	f106 0608 	add.w	r6, r6, #8
 8005562:	f109 0908 	add.w	r9, r9, #8
 8005566:	f67f af6f 	bls.w	8005448 <arm_radix4_butterfly_f32+0x1bc>
 800556a:	9b06      	ldr	r3, [sp, #24]
 800556c:	9a07      	ldr	r2, [sp, #28]
 800556e:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005572:	0892      	lsrs	r2, r2, #2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	b29b      	uxth	r3, r3
 8005578:	2a04      	cmp	r2, #4
 800557a:	9207      	str	r2, [sp, #28]
 800557c:	9306      	str	r3, [sp, #24]
 800557e:	d903      	bls.n	8005588 <arm_radix4_butterfly_f32+0x2fc>
 8005580:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8005584:	4618      	mov	r0, r3
 8005586:	e747      	b.n	8005418 <arm_radix4_butterfly_f32+0x18c>
 8005588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800558c:	3320      	adds	r3, #32
 800558e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8005592:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 8005596:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800559a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800559e:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 80055a2:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 80055a6:	ed53 7a02 	vldr	s15, [r3, #-8]
 80055aa:	ed13 7a03 	vldr	s14, [r3, #-12]
 80055ae:	ee34 3a24 	vadd.f32	s6, s8, s9
 80055b2:	ee76 3a27 	vadd.f32	s7, s12, s15
 80055b6:	ee34 4a64 	vsub.f32	s8, s8, s9
 80055ba:	ee76 7a67 	vsub.f32	s15, s12, s15
 80055be:	ee75 4a65 	vsub.f32	s9, s10, s11
 80055c2:	ee35 6a25 	vadd.f32	s12, s10, s11
 80055c6:	ee76 5a87 	vadd.f32	s11, s13, s14
 80055ca:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80055ce:	ee73 2a23 	vadd.f32	s5, s6, s7
 80055d2:	ee35 5a86 	vadd.f32	s10, s11, s12
 80055d6:	ee73 3a63 	vsub.f32	s7, s6, s7
 80055da:	ee77 6a67 	vsub.f32	s13, s14, s15
 80055de:	ee34 3a24 	vadd.f32	s6, s8, s9
 80055e2:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80055e6:	ee74 4a64 	vsub.f32	s9, s8, s9
 80055ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80055ee:	3a01      	subs	r2, #1
 80055f0:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 80055f4:	ed43 3a06 	vstr	s7, [r3, #-24]	; 0xffffffe8
 80055f8:	ed03 3a04 	vstr	s6, [r3, #-16]
 80055fc:	ed43 4a02 	vstr	s9, [r3, #-8]
 8005600:	ed03 5a07 	vstr	s10, [r3, #-28]	; 0xffffffe4
 8005604:	ed03 6a05 	vstr	s12, [r3, #-20]	; 0xffffffec
 8005608:	ed43 6a03 	vstr	s13, [r3, #-12]
 800560c:	ed43 7a01 	vstr	s15, [r3, #-4]
 8005610:	f103 0320 	add.w	r3, r3, #32
 8005614:	d1bb      	bne.n	800558e <arm_radix4_butterfly_f32+0x302>
 8005616:	b00d      	add	sp, #52	; 0x34
 8005618:	ecbd 8b06 	vpop	{d8-d10}
 800561c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005620 <arm_radix4_butterfly_inverse_f32>:
 8005620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	ed2d 8b08 	vpush	{d8-d11}
 8005628:	b08d      	sub	sp, #52	; 0x34
 800562a:	461f      	mov	r7, r3
 800562c:	9700      	str	r7, [sp, #0]
 800562e:	468a      	mov	sl, r1
 8005630:	9c00      	ldr	r4, [sp, #0]
 8005632:	9009      	str	r0, [sp, #36]	; 0x24
 8005634:	0889      	lsrs	r1, r1, #2
 8005636:	460d      	mov	r5, r1
 8005638:	9103      	str	r1, [sp, #12]
 800563a:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 800563e:	46ab      	mov	fp, r5
 8005640:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
 8005644:	eba1 08c5 	sub.w	r8, r1, r5, lsl #3
 8005648:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800564c:	0125      	lsls	r5, r4, #4
 800564e:	00e4      	lsls	r4, r4, #3
 8005650:	9402      	str	r4, [sp, #8]
 8005652:	9501      	str	r5, [sp, #4]
 8005654:	4606      	mov	r6, r0
 8005656:	4691      	mov	r9, r2
 8005658:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
 800565c:	f10c 0004 	add.w	r0, ip, #4
 8005660:	f8cd b010 	str.w	fp, [sp, #16]
 8005664:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005668:	f8cd a008 	str.w	sl, [sp, #8]
 800566c:	f8dd a004 	ldr.w	sl, [sp, #4]
 8005670:	920a      	str	r2, [sp, #40]	; 0x28
 8005672:	4430      	add	r0, r6
 8005674:	4632      	mov	r2, r6
 8005676:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800567a:	4647      	mov	r7, r8
 800567c:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8005680:	3604      	adds	r6, #4
 8005682:	464d      	mov	r5, r9
 8005684:	464c      	mov	r4, r9
 8005686:	edd2 4a01 	vldr	s9, [r2, #4]
 800568a:	ed10 4a01 	vldr	s8, [r0, #-4]
 800568e:	ed16 6a01 	vldr	s12, [r6, #-4]
 8005692:	edd1 6a00 	vldr	s13, [r1]
 8005696:	ed97 7a01 	vldr	s14, [r7, #4]
 800569a:	edd3 7a01 	vldr	s15, [r3, #4]
 800569e:	edd3 5a00 	vldr	s11, [r3]
 80056a2:	ed91 5a01 	vldr	s10, [r1, #4]
 80056a6:	edd9 3a01 	vldr	s7, [r9, #4]
 80056aa:	ed99 3a00 	vldr	s6, [r9]
 80056ae:	ee36 2a26 	vadd.f32	s4, s12, s13
 80056b2:	ee74 2a25 	vadd.f32	s5, s8, s11
 80056b6:	ee34 1a85 	vadd.f32	s2, s9, s10
 80056ba:	ee77 1a27 	vadd.f32	s3, s14, s15
 80056be:	ee32 8a22 	vadd.f32	s16, s4, s5
 80056c2:	ee71 0a21 	vadd.f32	s1, s2, s3
 80056c6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80056ca:	ee74 5a65 	vsub.f32	s11, s8, s11
 80056ce:	ee34 5ac5 	vsub.f32	s10, s9, s10
 80056d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80056d6:	ed06 8a01 	vstr	s16, [r6, #-4]
 80056da:	edc2 0a01 	vstr	s1, [r2, #4]
 80056de:	ed94 4a00 	vldr	s8, [r4]
 80056e2:	edd5 6a00 	vldr	s13, [r5]
 80056e6:	edd5 7a01 	vldr	s15, [r5, #4]
 80056ea:	ee72 4a62 	vsub.f32	s9, s4, s5
 80056ee:	ee71 1a61 	vsub.f32	s3, s2, s3
 80056f2:	ee75 2a85 	vadd.f32	s5, s11, s10
 80056f6:	ed94 1a01 	vldr	s2, [r4, #4]
 80056fa:	ee36 2a47 	vsub.f32	s4, s12, s14
 80056fe:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005702:	ee35 6a65 	vsub.f32	s12, s10, s11
 8005706:	ee62 0a04 	vmul.f32	s1, s4, s8
 800570a:	ee23 5aa4 	vmul.f32	s10, s7, s9
 800570e:	ee22 4a84 	vmul.f32	s8, s5, s8
 8005712:	ee22 2a01 	vmul.f32	s4, s4, s2
 8005716:	ee67 5a26 	vmul.f32	s11, s14, s13
 800571a:	ee22 1a81 	vmul.f32	s2, s5, s2
 800571e:	ee66 6a26 	vmul.f32	s13, s12, s13
 8005722:	ee63 2a24 	vmul.f32	s5, s6, s9
 8005726:	ee26 6a27 	vmul.f32	s12, s12, s15
 800572a:	ee23 3a21 	vmul.f32	s6, s6, s3
 800572e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005732:	ee63 1aa1 	vmul.f32	s3, s7, s3
 8005736:	ee72 4a04 	vadd.f32	s9, s4, s8
 800573a:	ee70 3ac1 	vsub.f32	s7, s1, s2
 800573e:	ee32 4ae1 	vsub.f32	s8, s5, s3
 8005742:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005746:	ee35 7ac6 	vsub.f32	s14, s11, s12
 800574a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800574e:	3208      	adds	r2, #8
 8005750:	4542      	cmp	r2, r8
 8005752:	ed00 4a01 	vstr	s8, [r0, #-4]
 8005756:	f106 0608 	add.w	r6, r6, #8
 800575a:	ed87 5a01 	vstr	s10, [r7, #4]
 800575e:	44d1      	add	r9, sl
 8005760:	edc1 3a00 	vstr	s7, [r1]
 8005764:	edc1 4a01 	vstr	s9, [r1, #4]
 8005768:	445c      	add	r4, fp
 800576a:	ed83 7a00 	vstr	s14, [r3]
 800576e:	edc3 7a01 	vstr	s15, [r3, #4]
 8005772:	4475      	add	r5, lr
 8005774:	f100 0008 	add.w	r0, r0, #8
 8005778:	f107 0708 	add.w	r7, r7, #8
 800577c:	f101 0108 	add.w	r1, r1, #8
 8005780:	f103 0308 	add.w	r3, r3, #8
 8005784:	f47f af7f 	bne.w	8005686 <arm_radix4_butterfly_inverse_f32+0x66>
 8005788:	9b00      	ldr	r3, [sp, #0]
 800578a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800578e:	f8dd b010 	ldr.w	fp, [sp, #16]
 8005792:	f8dd a008 	ldr.w	sl, [sp, #8]
 8005796:	920b      	str	r2, [sp, #44]	; 0x2c
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	b29b      	uxth	r3, r3
 800579c:	2a04      	cmp	r2, #4
 800579e:	9306      	str	r3, [sp, #24]
 80057a0:	f240 80ba 	bls.w	8005918 <arm_radix4_butterfly_inverse_f32+0x2f8>
 80057a4:	9806      	ldr	r0, [sp, #24]
 80057a6:	9207      	str	r2, [sp, #28]
 80057a8:	ea4f 039b 	mov.w	r3, fp, lsr #2
 80057ac:	4619      	mov	r1, r3
 80057ae:	9308      	str	r3, [sp, #32]
 80057b0:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 80057b4:	1e4a      	subs	r2, r1, #1
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80057ba:	9205      	str	r2, [sp, #20]
 80057bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80057be:	9303      	str	r3, [sp, #12]
 80057c0:	010a      	lsls	r2, r1, #4
 80057c2:	0103      	lsls	r3, r0, #4
 80057c4:	9204      	str	r2, [sp, #16]
 80057c6:	9302      	str	r3, [sp, #8]
 80057c8:	00c2      	lsls	r2, r0, #3
 80057ca:	2300      	movs	r3, #0
 80057cc:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
 80057d0:	9201      	str	r2, [sp, #4]
 80057d2:	46b8      	mov	r8, r7
 80057d4:	46be      	mov	lr, r7
 80057d6:	9300      	str	r3, [sp, #0]
 80057d8:	9b04      	ldr	r3, [sp, #16]
 80057da:	ed97 1a00 	vldr	s2, [r7]
 80057de:	edd7 1a01 	vldr	s3, [r7, #4]
 80057e2:	ed9e 2a00 	vldr	s4, [lr]
 80057e6:	edde 2a01 	vldr	s5, [lr, #4]
 80057ea:	ed98 3a00 	vldr	s6, [r8]
 80057ee:	edd8 3a01 	vldr	s7, [r8, #4]
 80057f2:	9d00      	ldr	r5, [sp, #0]
 80057f4:	18f1      	adds	r1, r6, r3
 80057f6:	eb09 0203 	add.w	r2, r9, r3
 80057fa:	1d34      	adds	r4, r6, #4
 80057fc:	464b      	mov	r3, r9
 80057fe:	4630      	mov	r0, r6
 8005800:	ed90 4a01 	vldr	s8, [r0, #4]
 8005804:	ed14 6a01 	vldr	s12, [r4, #-4]
 8005808:	ed91 7a00 	vldr	s14, [r1]
 800580c:	edd2 7a00 	vldr	s15, [r2]
 8005810:	ed93 5a01 	vldr	s10, [r3, #4]
 8005814:	edd1 4a01 	vldr	s9, [r1, #4]
 8005818:	edd2 5a01 	vldr	s11, [r2, #4]
 800581c:	edd3 6a00 	vldr	s13, [r3]
 8005820:	ee76 0a07 	vadd.f32	s1, s12, s14
 8005824:	ee36 8aa7 	vadd.f32	s16, s13, s15
 8005828:	ee36 6a47 	vsub.f32	s12, s12, s14
 800582c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005830:	ee74 8a24 	vadd.f32	s17, s8, s9
 8005834:	ee74 7a64 	vsub.f32	s15, s8, s9
 8005838:	ee35 7a65 	vsub.f32	s14, s10, s11
 800583c:	ee35 4a25 	vadd.f32	s8, s10, s11
 8005840:	ee70 4ac8 	vsub.f32	s9, s1, s16
 8005844:	ee76 5a47 	vsub.f32	s11, s12, s14
 8005848:	ee38 5ac4 	vsub.f32	s10, s17, s8
 800584c:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005850:	ee36 6aa7 	vadd.f32	s12, s13, s15
 8005854:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005858:	ee22 ba24 	vmul.f32	s22, s4, s9
 800585c:	ee62 aa85 	vmul.f32	s21, s5, s10
 8005860:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8005864:	ee21 aa25 	vmul.f32	s20, s2, s11
 8005868:	ee61 9a86 	vmul.f32	s19, s3, s12
 800586c:	ee23 9a07 	vmul.f32	s18, s6, s14
 8005870:	ee63 6aa7 	vmul.f32	s13, s7, s15
 8005874:	ee22 5a05 	vmul.f32	s10, s4, s10
 8005878:	ee61 5aa5 	vmul.f32	s11, s3, s11
 800587c:	ee21 6a06 	vmul.f32	s12, s2, s12
 8005880:	ee23 7a87 	vmul.f32	s14, s7, s14
 8005884:	ee63 7a27 	vmul.f32	s15, s6, s15
 8005888:	ee70 0a88 	vadd.f32	s1, s1, s16
 800588c:	ee34 5a85 	vadd.f32	s10, s9, s10
 8005890:	ee38 4a84 	vadd.f32	s8, s17, s8
 8005894:	ee3b 8a6a 	vsub.f32	s16, s22, s21
 8005898:	ee7a 4a69 	vsub.f32	s9, s20, s19
 800589c:	ee35 6a86 	vadd.f32	s12, s11, s12
 80058a0:	ee79 6a66 	vsub.f32	s13, s18, s13
 80058a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058a8:	445d      	add	r5, fp
 80058aa:	45aa      	cmp	sl, r5
 80058ac:	ed44 0a01 	vstr	s1, [r4, #-4]
 80058b0:	ed80 4a01 	vstr	s8, [r0, #4]
 80058b4:	4464      	add	r4, ip
 80058b6:	ed83 8a00 	vstr	s16, [r3]
 80058ba:	ed83 5a01 	vstr	s10, [r3, #4]
 80058be:	4460      	add	r0, ip
 80058c0:	edc1 4a00 	vstr	s9, [r1]
 80058c4:	ed81 6a01 	vstr	s12, [r1, #4]
 80058c8:	4463      	add	r3, ip
 80058ca:	edc2 6a00 	vstr	s13, [r2]
 80058ce:	edc2 7a01 	vstr	s15, [r2, #4]
 80058d2:	4461      	add	r1, ip
 80058d4:	4462      	add	r2, ip
 80058d6:	d893      	bhi.n	8005800 <arm_radix4_butterfly_inverse_f32+0x1e0>
 80058d8:	9a01      	ldr	r2, [sp, #4]
 80058da:	9b00      	ldr	r3, [sp, #0]
 80058dc:	4417      	add	r7, r2
 80058de:	9a02      	ldr	r2, [sp, #8]
 80058e0:	4496      	add	lr, r2
 80058e2:	9a03      	ldr	r2, [sp, #12]
 80058e4:	4490      	add	r8, r2
 80058e6:	9a05      	ldr	r2, [sp, #20]
 80058e8:	3301      	adds	r3, #1
 80058ea:	4293      	cmp	r3, r2
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	f106 0608 	add.w	r6, r6, #8
 80058f2:	f109 0908 	add.w	r9, r9, #8
 80058f6:	f67f af6f 	bls.w	80057d8 <arm_radix4_butterfly_inverse_f32+0x1b8>
 80058fa:	9b06      	ldr	r3, [sp, #24]
 80058fc:	9a07      	ldr	r2, [sp, #28]
 80058fe:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005902:	0892      	lsrs	r2, r2, #2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	b29b      	uxth	r3, r3
 8005908:	2a04      	cmp	r2, #4
 800590a:	9207      	str	r2, [sp, #28]
 800590c:	9306      	str	r3, [sp, #24]
 800590e:	d903      	bls.n	8005918 <arm_radix4_butterfly_inverse_f32+0x2f8>
 8005910:	ea4f 0ccb 	mov.w	ip, fp, lsl #3
 8005914:	4618      	mov	r0, r3
 8005916:	e747      	b.n	80057a8 <arm_radix4_butterfly_inverse_f32+0x188>
 8005918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800591a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800591c:	3320      	adds	r3, #32
 800591e:	ed53 4a04 	vldr	s9, [r3, #-16]
 8005922:	ed13 6a06 	vldr	s12, [r3, #-24]	; 0xffffffe8
 8005926:	ed13 5a05 	vldr	s10, [r3, #-20]	; 0xffffffec
 800592a:	ed53 5a01 	vldr	s11, [r3, #-4]
 800592e:	ed53 6a07 	vldr	s13, [r3, #-28]	; 0xffffffe4
 8005932:	ed13 4a08 	vldr	s8, [r3, #-32]	; 0xffffffe0
 8005936:	ed53 7a02 	vldr	s15, [r3, #-8]
 800593a:	ed13 7a03 	vldr	s14, [r3, #-12]
 800593e:	ee34 3a24 	vadd.f32	s6, s8, s9
 8005942:	ee76 3a27 	vadd.f32	s7, s12, s15
 8005946:	ee34 4a64 	vsub.f32	s8, s8, s9
 800594a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800594e:	ee75 4a65 	vsub.f32	s9, s10, s11
 8005952:	ee35 6a25 	vadd.f32	s12, s10, s11
 8005956:	ee76 5a87 	vadd.f32	s11, s13, s14
 800595a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800595e:	ee73 2a23 	vadd.f32	s5, s6, s7
 8005962:	ee74 6a24 	vadd.f32	s13, s8, s9
 8005966:	ee37 5a27 	vadd.f32	s10, s14, s15
 800596a:	ee73 3a63 	vsub.f32	s7, s6, s7
 800596e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005972:	ee34 3a64 	vsub.f32	s6, s8, s9
 8005976:	ee75 4a86 	vadd.f32	s9, s11, s12
 800597a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800597e:	ee62 2a80 	vmul.f32	s5, s5, s0
 8005982:	ee26 7a00 	vmul.f32	s14, s12, s0
 8005986:	ee63 5a80 	vmul.f32	s11, s7, s0
 800598a:	ee23 4a00 	vmul.f32	s8, s6, s0
 800598e:	ee66 6a80 	vmul.f32	s13, s13, s0
 8005992:	ee64 4a80 	vmul.f32	s9, s9, s0
 8005996:	ee25 6a00 	vmul.f32	s12, s10, s0
 800599a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800599e:	3a01      	subs	r2, #1
 80059a0:	ed43 2a08 	vstr	s5, [r3, #-32]	; 0xffffffe0
 80059a4:	ed43 5a06 	vstr	s11, [r3, #-24]	; 0xffffffe8
 80059a8:	ed03 4a04 	vstr	s8, [r3, #-16]
 80059ac:	ed43 6a02 	vstr	s13, [r3, #-8]
 80059b0:	ed43 4a07 	vstr	s9, [r3, #-28]	; 0xffffffe4
 80059b4:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80059b8:	ed03 6a03 	vstr	s12, [r3, #-12]
 80059bc:	ed43 7a01 	vstr	s15, [r3, #-4]
 80059c0:	f103 0320 	add.w	r3, r3, #32
 80059c4:	d1ab      	bne.n	800591e <arm_radix4_butterfly_inverse_f32+0x2fe>
 80059c6:	b00d      	add	sp, #52	; 0x34
 80059c8:	ecbd 8b08 	vpop	{d8-d11}
 80059cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059d0 <arm_cfft_radix4_f32>:
 80059d0:	b570      	push	{r4, r5, r6, lr}
 80059d2:	7883      	ldrb	r3, [r0, #2]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	4604      	mov	r4, r0
 80059d8:	460d      	mov	r5, r1
 80059da:	d009      	beq.n	80059f0 <arm_cfft_radix4_f32+0x20>
 80059dc:	8983      	ldrh	r3, [r0, #12]
 80059de:	6842      	ldr	r2, [r0, #4]
 80059e0:	8801      	ldrh	r1, [r0, #0]
 80059e2:	4628      	mov	r0, r5
 80059e4:	f7ff fc52 	bl	800528c <arm_radix4_butterfly_f32>
 80059e8:	78e3      	ldrb	r3, [r4, #3]
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d00b      	beq.n	8005a06 <arm_cfft_radix4_f32+0x36>
 80059ee:	bd70      	pop	{r4, r5, r6, pc}
 80059f0:	8983      	ldrh	r3, [r0, #12]
 80059f2:	ed90 0a04 	vldr	s0, [r0, #16]
 80059f6:	6842      	ldr	r2, [r0, #4]
 80059f8:	8801      	ldrh	r1, [r0, #0]
 80059fa:	4628      	mov	r0, r5
 80059fc:	f7ff fe10 	bl	8005620 <arm_radix4_butterfly_inverse_f32>
 8005a00:	78e3      	ldrb	r3, [r4, #3]
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d1f3      	bne.n	80059ee <arm_cfft_radix4_f32+0x1e>
 8005a06:	4628      	mov	r0, r5
 8005a08:	68a3      	ldr	r3, [r4, #8]
 8005a0a:	89e2      	ldrh	r2, [r4, #14]
 8005a0c:	8821      	ldrh	r1, [r4, #0]
 8005a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a12:	f000 b8e9 	b.w	8005be8 <arm_bitreversal_f32>
 8005a16:	bf00      	nop

08005a18 <arm_cmplx_mag_f32>:
 8005a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a1c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8005a20:	b084      	sub	sp, #16
 8005a22:	d07f      	beq.n	8005b24 <arm_cmplx_mag_f32+0x10c>
 8005a24:	2700      	movs	r7, #0
 8005a26:	f100 0420 	add.w	r4, r0, #32
 8005a2a:	f101 0510 	add.w	r5, r1, #16
 8005a2e:	4646      	mov	r6, r8
 8005a30:	e05a      	b.n	8005ae8 <arm_cmplx_mag_f32+0xd0>
 8005a32:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005a36:	eeb4 0a40 	vcmp.f32	s0, s0
 8005a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3e:	f040 80a4 	bne.w	8005b8a <arm_cmplx_mag_f32+0x172>
 8005a42:	ed05 0a04 	vstr	s0, [r5, #-16]
 8005a46:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8005a4a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8005a4e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a52:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a56:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a5a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a62:	f2c0 808f 	blt.w	8005b84 <arm_cmplx_mag_f32+0x16c>
 8005a66:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005a6a:	eeb4 0a40 	vcmp.f32	s0, s0
 8005a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a72:	f040 80af 	bne.w	8005bd4 <arm_cmplx_mag_f32+0x1bc>
 8005a76:	ed05 0a03 	vstr	s0, [r5, #-12]
 8005a7a:	ed54 7a04 	vldr	s15, [r4, #-16]
 8005a7e:	ed14 0a03 	vldr	s0, [r4, #-12]
 8005a82:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005a86:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005a8a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a96:	db72      	blt.n	8005b7e <arm_cmplx_mag_f32+0x166>
 8005a98:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005a9c:	eeb4 0a40 	vcmp.f32	s0, s0
 8005aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005aa4:	f040 808c 	bne.w	8005bc0 <arm_cmplx_mag_f32+0x1a8>
 8005aa8:	ed05 0a02 	vstr	s0, [r5, #-8]
 8005aac:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005ab0:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005ab4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005ab8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005abc:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005ac0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ac8:	db20      	blt.n	8005b0c <arm_cmplx_mag_f32+0xf4>
 8005aca:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005ace:	eeb4 0a40 	vcmp.f32	s0, s0
 8005ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ad6:	d169      	bne.n	8005bac <arm_cmplx_mag_f32+0x194>
 8005ad8:	3e01      	subs	r6, #1
 8005ada:	ed05 0a01 	vstr	s0, [r5, #-4]
 8005ade:	f104 0420 	add.w	r4, r4, #32
 8005ae2:	f105 0510 	add.w	r5, r5, #16
 8005ae6:	d019      	beq.n	8005b1c <arm_cmplx_mag_f32+0x104>
 8005ae8:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8005aec:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8005af0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005af4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005af8:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005afc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b04:	da95      	bge.n	8005a32 <arm_cmplx_mag_f32+0x1a>
 8005b06:	f845 7c10 	str.w	r7, [r5, #-16]
 8005b0a:	e79c      	b.n	8005a46 <arm_cmplx_mag_f32+0x2e>
 8005b0c:	3e01      	subs	r6, #1
 8005b0e:	f845 7c04 	str.w	r7, [r5, #-4]
 8005b12:	f104 0420 	add.w	r4, r4, #32
 8005b16:	f105 0510 	add.w	r5, r5, #16
 8005b1a:	d1e5      	bne.n	8005ae8 <arm_cmplx_mag_f32+0xd0>
 8005b1c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8005b20:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8005b24:	f012 0503 	ands.w	r5, r2, #3
 8005b28:	d026      	beq.n	8005b78 <arm_cmplx_mag_f32+0x160>
 8005b2a:	2600      	movs	r6, #0
 8005b2c:	f100 0408 	add.w	r4, r0, #8
 8005b30:	e00c      	b.n	8005b4c <arm_cmplx_mag_f32+0x134>
 8005b32:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8005b36:	eeb4 0a40 	vcmp.f32	s0, s0
 8005b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b3e:	d12e      	bne.n	8005b9e <arm_cmplx_mag_f32+0x186>
 8005b40:	3d01      	subs	r5, #1
 8005b42:	ed01 0a01 	vstr	s0, [r1, #-4]
 8005b46:	f104 0408 	add.w	r4, r4, #8
 8005b4a:	d015      	beq.n	8005b78 <arm_cmplx_mag_f32+0x160>
 8005b4c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8005b50:	ed14 0a01 	vldr	s0, [r4, #-4]
 8005b54:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005b58:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005b5c:	3104      	adds	r1, #4
 8005b5e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005b62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b6a:	dae2      	bge.n	8005b32 <arm_cmplx_mag_f32+0x11a>
 8005b6c:	3d01      	subs	r5, #1
 8005b6e:	f841 6c04 	str.w	r6, [r1, #-4]
 8005b72:	f104 0408 	add.w	r4, r4, #8
 8005b76:	d1e9      	bne.n	8005b4c <arm_cmplx_mag_f32+0x134>
 8005b78:	b004      	add	sp, #16
 8005b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b7e:	f845 7c08 	str.w	r7, [r5, #-8]
 8005b82:	e793      	b.n	8005aac <arm_cmplx_mag_f32+0x94>
 8005b84:	f845 7c0c 	str.w	r7, [r5, #-12]
 8005b88:	e777      	b.n	8005a7a <arm_cmplx_mag_f32+0x62>
 8005b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8005b8e:	9203      	str	r2, [sp, #12]
 8005b90:	9102      	str	r1, [sp, #8]
 8005b92:	9001      	str	r0, [sp, #4]
 8005b94:	f002 feca 	bl	800892c <sqrtf>
 8005b98:	a801      	add	r0, sp, #4
 8005b9a:	c807      	ldmia	r0, {r0, r1, r2}
 8005b9c:	e751      	b.n	8005a42 <arm_cmplx_mag_f32+0x2a>
 8005b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8005ba2:	9101      	str	r1, [sp, #4]
 8005ba4:	f002 fec2 	bl	800892c <sqrtf>
 8005ba8:	9901      	ldr	r1, [sp, #4]
 8005baa:	e7c9      	b.n	8005b40 <arm_cmplx_mag_f32+0x128>
 8005bac:	eeb0 0a67 	vmov.f32	s0, s15
 8005bb0:	9203      	str	r2, [sp, #12]
 8005bb2:	9102      	str	r1, [sp, #8]
 8005bb4:	9001      	str	r0, [sp, #4]
 8005bb6:	f002 feb9 	bl	800892c <sqrtf>
 8005bba:	a801      	add	r0, sp, #4
 8005bbc:	c807      	ldmia	r0, {r0, r1, r2}
 8005bbe:	e78b      	b.n	8005ad8 <arm_cmplx_mag_f32+0xc0>
 8005bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8005bc4:	9203      	str	r2, [sp, #12]
 8005bc6:	9102      	str	r1, [sp, #8]
 8005bc8:	9001      	str	r0, [sp, #4]
 8005bca:	f002 feaf 	bl	800892c <sqrtf>
 8005bce:	a801      	add	r0, sp, #4
 8005bd0:	c807      	ldmia	r0, {r0, r1, r2}
 8005bd2:	e769      	b.n	8005aa8 <arm_cmplx_mag_f32+0x90>
 8005bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd8:	9203      	str	r2, [sp, #12]
 8005bda:	9102      	str	r1, [sp, #8]
 8005bdc:	9001      	str	r0, [sp, #4]
 8005bde:	f002 fea5 	bl	800892c <sqrtf>
 8005be2:	a801      	add	r0, sp, #4
 8005be4:	c807      	ldmia	r0, {r0, r1, r2}
 8005be6:	e746      	b.n	8005a76 <arm_cmplx_mag_f32+0x5e>

08005be8 <arm_bitreversal_f32>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	b085      	sub	sp, #20
 8005bee:	0849      	lsrs	r1, r1, #1
 8005bf0:	0052      	lsls	r2, r2, #1
 8005bf2:	2400      	movs	r4, #0
 8005bf4:	9203      	str	r2, [sp, #12]
 8005bf6:	1e8a      	subs	r2, r1, #2
 8005bf8:	9101      	str	r1, [sp, #4]
 8005bfa:	f101 0c01 	add.w	ip, r1, #1
 8005bfe:	9202      	str	r2, [sp, #8]
 8005c00:	4621      	mov	r1, r4
 8005c02:	4622      	mov	r2, r4
 8005c04:	9d01      	ldr	r5, [sp, #4]
 8005c06:	3101      	adds	r1, #1
 8005c08:	442a      	add	r2, r5
 8005c0a:	00c9      	lsls	r1, r1, #3
 8005c0c:	00d2      	lsls	r2, r2, #3
 8005c0e:	1846      	adds	r6, r0, r1
 8005c10:	1885      	adds	r5, r0, r2
 8005c12:	3104      	adds	r1, #4
 8005c14:	3204      	adds	r2, #4
 8005c16:	6837      	ldr	r7, [r6, #0]
 8005c18:	f8d5 e000 	ldr.w	lr, [r5]
 8005c1c:	f8c6 e000 	str.w	lr, [r6]
 8005c20:	4401      	add	r1, r0
 8005c22:	4402      	add	r2, r0
 8005c24:	602f      	str	r7, [r5, #0]
 8005c26:	3402      	adds	r4, #2
 8005c28:	680e      	ldr	r6, [r1, #0]
 8005c2a:	f8d2 9000 	ldr.w	r9, [r2]
 8005c2e:	f8c1 9000 	str.w	r9, [r1]
 8005c32:	b2a4      	uxth	r4, r4
 8005c34:	6016      	str	r6, [r2, #0]
 8005c36:	eb04 050c 	add.w	r5, r4, ip
 8005c3a:	881a      	ldrh	r2, [r3, #0]
 8005c3c:	00ed      	lsls	r5, r5, #3
 8005c3e:	eb00 0e05 	add.w	lr, r0, r5
 8005c42:	3504      	adds	r5, #4
 8005c44:	9500      	str	r5, [sp, #0]
 8005c46:	eb02 010c 	add.w	r1, r2, ip
 8005c4a:	9d02      	ldr	r5, [sp, #8]
 8005c4c:	00c9      	lsls	r1, r1, #3
 8005c4e:	00e7      	lsls	r7, r4, #3
 8005c50:	00d6      	lsls	r6, r2, #3
 8005c52:	f101 0b04 	add.w	fp, r1, #4
 8005c56:	eb00 0901 	add.w	r9, r0, r1
 8005c5a:	42ac      	cmp	r4, r5
 8005c5c:	9903      	ldr	r1, [sp, #12]
 8005c5e:	9d00      	ldr	r5, [sp, #0]
 8005c60:	eb00 0807 	add.w	r8, r0, r7
 8005c64:	eb00 0a06 	add.w	sl, r0, r6
 8005c68:	f107 0704 	add.w	r7, r7, #4
 8005c6c:	f106 0604 	add.w	r6, r6, #4
 8005c70:	440b      	add	r3, r1
 8005c72:	4407      	add	r7, r0
 8005c74:	4406      	add	r6, r0
 8005c76:	4621      	mov	r1, r4
 8005c78:	4405      	add	r5, r0
 8005c7a:	4483      	add	fp, r0
 8005c7c:	d820      	bhi.n	8005cc0 <arm_bitreversal_f32+0xd8>
 8005c7e:	42a2      	cmp	r2, r4
 8005c80:	d9c0      	bls.n	8005c04 <arm_bitreversal_f32+0x1c>
 8005c82:	edd8 7a00 	vldr	s15, [r8]
 8005c86:	ed9a 7a00 	vldr	s14, [sl]
 8005c8a:	ed88 7a00 	vstr	s14, [r8]
 8005c8e:	edca 7a00 	vstr	s15, [sl]
 8005c92:	f8d7 8000 	ldr.w	r8, [r7]
 8005c96:	f8d6 a000 	ldr.w	sl, [r6]
 8005c9a:	f8c7 a000 	str.w	sl, [r7]
 8005c9e:	f8c6 8000 	str.w	r8, [r6]
 8005ca2:	f8de 6000 	ldr.w	r6, [lr]
 8005ca6:	f8d9 7000 	ldr.w	r7, [r9]
 8005caa:	f8ce 7000 	str.w	r7, [lr]
 8005cae:	f8c9 6000 	str.w	r6, [r9]
 8005cb2:	682e      	ldr	r6, [r5, #0]
 8005cb4:	f8db 7000 	ldr.w	r7, [fp]
 8005cb8:	602f      	str	r7, [r5, #0]
 8005cba:	f8cb 6000 	str.w	r6, [fp]
 8005cbe:	e7a1      	b.n	8005c04 <arm_bitreversal_f32+0x1c>
 8005cc0:	b005      	add	sp, #20
 8005cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc6:	bf00      	nop

08005cc8 <__errno>:
 8005cc8:	4b01      	ldr	r3, [pc, #4]	; (8005cd0 <__errno+0x8>)
 8005cca:	6818      	ldr	r0, [r3, #0]
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop
 8005cd0:	2000000c 	.word	0x2000000c

08005cd4 <__libc_init_array>:
 8005cd4:	b570      	push	{r4, r5, r6, lr}
 8005cd6:	4d0d      	ldr	r5, [pc, #52]	; (8005d0c <__libc_init_array+0x38>)
 8005cd8:	4c0d      	ldr	r4, [pc, #52]	; (8005d10 <__libc_init_array+0x3c>)
 8005cda:	1b64      	subs	r4, r4, r5
 8005cdc:	10a4      	asrs	r4, r4, #2
 8005cde:	2600      	movs	r6, #0
 8005ce0:	42a6      	cmp	r6, r4
 8005ce2:	d109      	bne.n	8005cf8 <__libc_init_array+0x24>
 8005ce4:	4d0b      	ldr	r5, [pc, #44]	; (8005d14 <__libc_init_array+0x40>)
 8005ce6:	4c0c      	ldr	r4, [pc, #48]	; (8005d18 <__libc_init_array+0x44>)
 8005ce8:	f002 fe42 	bl	8008970 <_init>
 8005cec:	1b64      	subs	r4, r4, r5
 8005cee:	10a4      	asrs	r4, r4, #2
 8005cf0:	2600      	movs	r6, #0
 8005cf2:	42a6      	cmp	r6, r4
 8005cf4:	d105      	bne.n	8005d02 <__libc_init_array+0x2e>
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
 8005cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfc:	4798      	blx	r3
 8005cfe:	3601      	adds	r6, #1
 8005d00:	e7ee      	b.n	8005ce0 <__libc_init_array+0xc>
 8005d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d06:	4798      	blx	r3
 8005d08:	3601      	adds	r6, #1
 8005d0a:	e7f2      	b.n	8005cf2 <__libc_init_array+0x1e>
 8005d0c:	08011ea4 	.word	0x08011ea4
 8005d10:	08011ea4 	.word	0x08011ea4
 8005d14:	08011ea4 	.word	0x08011ea4
 8005d18:	08011ea8 	.word	0x08011ea8

08005d1c <memset>:
 8005d1c:	4402      	add	r2, r0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d100      	bne.n	8005d26 <memset+0xa>
 8005d24:	4770      	bx	lr
 8005d26:	f803 1b01 	strb.w	r1, [r3], #1
 8005d2a:	e7f9      	b.n	8005d20 <memset+0x4>

08005d2c <__cvt>:
 8005d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d30:	ec55 4b10 	vmov	r4, r5, d0
 8005d34:	2d00      	cmp	r5, #0
 8005d36:	460e      	mov	r6, r1
 8005d38:	4619      	mov	r1, r3
 8005d3a:	462b      	mov	r3, r5
 8005d3c:	bfbb      	ittet	lt
 8005d3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005d42:	461d      	movlt	r5, r3
 8005d44:	2300      	movge	r3, #0
 8005d46:	232d      	movlt	r3, #45	; 0x2d
 8005d48:	700b      	strb	r3, [r1, #0]
 8005d4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d50:	4691      	mov	r9, r2
 8005d52:	f023 0820 	bic.w	r8, r3, #32
 8005d56:	bfbc      	itt	lt
 8005d58:	4622      	movlt	r2, r4
 8005d5a:	4614      	movlt	r4, r2
 8005d5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d60:	d005      	beq.n	8005d6e <__cvt+0x42>
 8005d62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d66:	d100      	bne.n	8005d6a <__cvt+0x3e>
 8005d68:	3601      	adds	r6, #1
 8005d6a:	2102      	movs	r1, #2
 8005d6c:	e000      	b.n	8005d70 <__cvt+0x44>
 8005d6e:	2103      	movs	r1, #3
 8005d70:	ab03      	add	r3, sp, #12
 8005d72:	9301      	str	r3, [sp, #4]
 8005d74:	ab02      	add	r3, sp, #8
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	ec45 4b10 	vmov	d0, r4, r5
 8005d7c:	4653      	mov	r3, sl
 8005d7e:	4632      	mov	r2, r6
 8005d80:	f000 fe2e 	bl	80069e0 <_dtoa_r>
 8005d84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d88:	4607      	mov	r7, r0
 8005d8a:	d102      	bne.n	8005d92 <__cvt+0x66>
 8005d8c:	f019 0f01 	tst.w	r9, #1
 8005d90:	d022      	beq.n	8005dd8 <__cvt+0xac>
 8005d92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d96:	eb07 0906 	add.w	r9, r7, r6
 8005d9a:	d110      	bne.n	8005dbe <__cvt+0x92>
 8005d9c:	783b      	ldrb	r3, [r7, #0]
 8005d9e:	2b30      	cmp	r3, #48	; 0x30
 8005da0:	d10a      	bne.n	8005db8 <__cvt+0x8c>
 8005da2:	2200      	movs	r2, #0
 8005da4:	2300      	movs	r3, #0
 8005da6:	4620      	mov	r0, r4
 8005da8:	4629      	mov	r1, r5
 8005daa:	f7fa fe8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dae:	b918      	cbnz	r0, 8005db8 <__cvt+0x8c>
 8005db0:	f1c6 0601 	rsb	r6, r6, #1
 8005db4:	f8ca 6000 	str.w	r6, [sl]
 8005db8:	f8da 3000 	ldr.w	r3, [sl]
 8005dbc:	4499      	add	r9, r3
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	4620      	mov	r0, r4
 8005dc4:	4629      	mov	r1, r5
 8005dc6:	f7fa fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dca:	b108      	cbz	r0, 8005dd0 <__cvt+0xa4>
 8005dcc:	f8cd 900c 	str.w	r9, [sp, #12]
 8005dd0:	2230      	movs	r2, #48	; 0x30
 8005dd2:	9b03      	ldr	r3, [sp, #12]
 8005dd4:	454b      	cmp	r3, r9
 8005dd6:	d307      	bcc.n	8005de8 <__cvt+0xbc>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005ddc:	1bdb      	subs	r3, r3, r7
 8005dde:	4638      	mov	r0, r7
 8005de0:	6013      	str	r3, [r2, #0]
 8005de2:	b004      	add	sp, #16
 8005de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005de8:	1c59      	adds	r1, r3, #1
 8005dea:	9103      	str	r1, [sp, #12]
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	e7f0      	b.n	8005dd2 <__cvt+0xa6>

08005df0 <__exponent>:
 8005df0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005df2:	4603      	mov	r3, r0
 8005df4:	2900      	cmp	r1, #0
 8005df6:	bfb8      	it	lt
 8005df8:	4249      	neglt	r1, r1
 8005dfa:	f803 2b02 	strb.w	r2, [r3], #2
 8005dfe:	bfb4      	ite	lt
 8005e00:	222d      	movlt	r2, #45	; 0x2d
 8005e02:	222b      	movge	r2, #43	; 0x2b
 8005e04:	2909      	cmp	r1, #9
 8005e06:	7042      	strb	r2, [r0, #1]
 8005e08:	dd2a      	ble.n	8005e60 <__exponent+0x70>
 8005e0a:	f10d 0407 	add.w	r4, sp, #7
 8005e0e:	46a4      	mov	ip, r4
 8005e10:	270a      	movs	r7, #10
 8005e12:	46a6      	mov	lr, r4
 8005e14:	460a      	mov	r2, r1
 8005e16:	fb91 f6f7 	sdiv	r6, r1, r7
 8005e1a:	fb07 1516 	mls	r5, r7, r6, r1
 8005e1e:	3530      	adds	r5, #48	; 0x30
 8005e20:	2a63      	cmp	r2, #99	; 0x63
 8005e22:	f104 34ff 	add.w	r4, r4, #4294967295
 8005e26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005e2a:	4631      	mov	r1, r6
 8005e2c:	dcf1      	bgt.n	8005e12 <__exponent+0x22>
 8005e2e:	3130      	adds	r1, #48	; 0x30
 8005e30:	f1ae 0502 	sub.w	r5, lr, #2
 8005e34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005e38:	1c44      	adds	r4, r0, #1
 8005e3a:	4629      	mov	r1, r5
 8005e3c:	4561      	cmp	r1, ip
 8005e3e:	d30a      	bcc.n	8005e56 <__exponent+0x66>
 8005e40:	f10d 0209 	add.w	r2, sp, #9
 8005e44:	eba2 020e 	sub.w	r2, r2, lr
 8005e48:	4565      	cmp	r5, ip
 8005e4a:	bf88      	it	hi
 8005e4c:	2200      	movhi	r2, #0
 8005e4e:	4413      	add	r3, r2
 8005e50:	1a18      	subs	r0, r3, r0
 8005e52:	b003      	add	sp, #12
 8005e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005e5e:	e7ed      	b.n	8005e3c <__exponent+0x4c>
 8005e60:	2330      	movs	r3, #48	; 0x30
 8005e62:	3130      	adds	r1, #48	; 0x30
 8005e64:	7083      	strb	r3, [r0, #2]
 8005e66:	70c1      	strb	r1, [r0, #3]
 8005e68:	1d03      	adds	r3, r0, #4
 8005e6a:	e7f1      	b.n	8005e50 <__exponent+0x60>

08005e6c <_printf_float>:
 8005e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e70:	ed2d 8b02 	vpush	{d8}
 8005e74:	b08d      	sub	sp, #52	; 0x34
 8005e76:	460c      	mov	r4, r1
 8005e78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	461f      	mov	r7, r3
 8005e80:	4605      	mov	r5, r0
 8005e82:	f001 fd53 	bl	800792c <_localeconv_r>
 8005e86:	f8d0 a000 	ldr.w	sl, [r0]
 8005e8a:	4650      	mov	r0, sl
 8005e8c:	f7fa f9a0 	bl	80001d0 <strlen>
 8005e90:	2300      	movs	r3, #0
 8005e92:	930a      	str	r3, [sp, #40]	; 0x28
 8005e94:	6823      	ldr	r3, [r4, #0]
 8005e96:	9305      	str	r3, [sp, #20]
 8005e98:	f8d8 3000 	ldr.w	r3, [r8]
 8005e9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005ea0:	3307      	adds	r3, #7
 8005ea2:	f023 0307 	bic.w	r3, r3, #7
 8005ea6:	f103 0208 	add.w	r2, r3, #8
 8005eaa:	f8c8 2000 	str.w	r2, [r8]
 8005eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005eb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005eba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005ebe:	9307      	str	r3, [sp, #28]
 8005ec0:	f8cd 8018 	str.w	r8, [sp, #24]
 8005ec4:	ee08 0a10 	vmov	s16, r0
 8005ec8:	4b9f      	ldr	r3, [pc, #636]	; (8006148 <_printf_float+0x2dc>)
 8005eca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ece:	f04f 32ff 	mov.w	r2, #4294967295
 8005ed2:	f7fa fe2b 	bl	8000b2c <__aeabi_dcmpun>
 8005ed6:	bb88      	cbnz	r0, 8005f3c <_printf_float+0xd0>
 8005ed8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005edc:	4b9a      	ldr	r3, [pc, #616]	; (8006148 <_printf_float+0x2dc>)
 8005ede:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee2:	f7fa fe05 	bl	8000af0 <__aeabi_dcmple>
 8005ee6:	bb48      	cbnz	r0, 8005f3c <_printf_float+0xd0>
 8005ee8:	2200      	movs	r2, #0
 8005eea:	2300      	movs	r3, #0
 8005eec:	4640      	mov	r0, r8
 8005eee:	4649      	mov	r1, r9
 8005ef0:	f7fa fdf4 	bl	8000adc <__aeabi_dcmplt>
 8005ef4:	b110      	cbz	r0, 8005efc <_printf_float+0x90>
 8005ef6:	232d      	movs	r3, #45	; 0x2d
 8005ef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005efc:	4b93      	ldr	r3, [pc, #588]	; (800614c <_printf_float+0x2e0>)
 8005efe:	4894      	ldr	r0, [pc, #592]	; (8006150 <_printf_float+0x2e4>)
 8005f00:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005f04:	bf94      	ite	ls
 8005f06:	4698      	movls	r8, r3
 8005f08:	4680      	movhi	r8, r0
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	6123      	str	r3, [r4, #16]
 8005f0e:	9b05      	ldr	r3, [sp, #20]
 8005f10:	f023 0204 	bic.w	r2, r3, #4
 8005f14:	6022      	str	r2, [r4, #0]
 8005f16:	f04f 0900 	mov.w	r9, #0
 8005f1a:	9700      	str	r7, [sp, #0]
 8005f1c:	4633      	mov	r3, r6
 8005f1e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005f20:	4621      	mov	r1, r4
 8005f22:	4628      	mov	r0, r5
 8005f24:	f000 f9d8 	bl	80062d8 <_printf_common>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	f040 8090 	bne.w	800604e <_printf_float+0x1e2>
 8005f2e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f32:	b00d      	add	sp, #52	; 0x34
 8005f34:	ecbd 8b02 	vpop	{d8}
 8005f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	464b      	mov	r3, r9
 8005f40:	4640      	mov	r0, r8
 8005f42:	4649      	mov	r1, r9
 8005f44:	f7fa fdf2 	bl	8000b2c <__aeabi_dcmpun>
 8005f48:	b140      	cbz	r0, 8005f5c <_printf_float+0xf0>
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	bfbc      	itt	lt
 8005f50:	232d      	movlt	r3, #45	; 0x2d
 8005f52:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f56:	487f      	ldr	r0, [pc, #508]	; (8006154 <_printf_float+0x2e8>)
 8005f58:	4b7f      	ldr	r3, [pc, #508]	; (8006158 <_printf_float+0x2ec>)
 8005f5a:	e7d1      	b.n	8005f00 <_printf_float+0x94>
 8005f5c:	6863      	ldr	r3, [r4, #4]
 8005f5e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f62:	9206      	str	r2, [sp, #24]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	d13f      	bne.n	8005fe8 <_printf_float+0x17c>
 8005f68:	2306      	movs	r3, #6
 8005f6a:	6063      	str	r3, [r4, #4]
 8005f6c:	9b05      	ldr	r3, [sp, #20]
 8005f6e:	6861      	ldr	r1, [r4, #4]
 8005f70:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f74:	2300      	movs	r3, #0
 8005f76:	9303      	str	r3, [sp, #12]
 8005f78:	ab0a      	add	r3, sp, #40	; 0x28
 8005f7a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f7e:	ab09      	add	r3, sp, #36	; 0x24
 8005f80:	ec49 8b10 	vmov	d0, r8, r9
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	6022      	str	r2, [r4, #0]
 8005f88:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f8c:	4628      	mov	r0, r5
 8005f8e:	f7ff fecd 	bl	8005d2c <__cvt>
 8005f92:	9b06      	ldr	r3, [sp, #24]
 8005f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f96:	2b47      	cmp	r3, #71	; 0x47
 8005f98:	4680      	mov	r8, r0
 8005f9a:	d108      	bne.n	8005fae <_printf_float+0x142>
 8005f9c:	1cc8      	adds	r0, r1, #3
 8005f9e:	db02      	blt.n	8005fa6 <_printf_float+0x13a>
 8005fa0:	6863      	ldr	r3, [r4, #4]
 8005fa2:	4299      	cmp	r1, r3
 8005fa4:	dd41      	ble.n	800602a <_printf_float+0x1be>
 8005fa6:	f1ab 0b02 	sub.w	fp, fp, #2
 8005faa:	fa5f fb8b 	uxtb.w	fp, fp
 8005fae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005fb2:	d820      	bhi.n	8005ff6 <_printf_float+0x18a>
 8005fb4:	3901      	subs	r1, #1
 8005fb6:	465a      	mov	r2, fp
 8005fb8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005fbc:	9109      	str	r1, [sp, #36]	; 0x24
 8005fbe:	f7ff ff17 	bl	8005df0 <__exponent>
 8005fc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005fc4:	1813      	adds	r3, r2, r0
 8005fc6:	2a01      	cmp	r2, #1
 8005fc8:	4681      	mov	r9, r0
 8005fca:	6123      	str	r3, [r4, #16]
 8005fcc:	dc02      	bgt.n	8005fd4 <_printf_float+0x168>
 8005fce:	6822      	ldr	r2, [r4, #0]
 8005fd0:	07d2      	lsls	r2, r2, #31
 8005fd2:	d501      	bpl.n	8005fd8 <_printf_float+0x16c>
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d09c      	beq.n	8005f1a <_printf_float+0xae>
 8005fe0:	232d      	movs	r3, #45	; 0x2d
 8005fe2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fe6:	e798      	b.n	8005f1a <_printf_float+0xae>
 8005fe8:	9a06      	ldr	r2, [sp, #24]
 8005fea:	2a47      	cmp	r2, #71	; 0x47
 8005fec:	d1be      	bne.n	8005f6c <_printf_float+0x100>
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1bc      	bne.n	8005f6c <_printf_float+0x100>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e7b9      	b.n	8005f6a <_printf_float+0xfe>
 8005ff6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005ffa:	d118      	bne.n	800602e <_printf_float+0x1c2>
 8005ffc:	2900      	cmp	r1, #0
 8005ffe:	6863      	ldr	r3, [r4, #4]
 8006000:	dd0b      	ble.n	800601a <_printf_float+0x1ae>
 8006002:	6121      	str	r1, [r4, #16]
 8006004:	b913      	cbnz	r3, 800600c <_printf_float+0x1a0>
 8006006:	6822      	ldr	r2, [r4, #0]
 8006008:	07d0      	lsls	r0, r2, #31
 800600a:	d502      	bpl.n	8006012 <_printf_float+0x1a6>
 800600c:	3301      	adds	r3, #1
 800600e:	440b      	add	r3, r1
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	65a1      	str	r1, [r4, #88]	; 0x58
 8006014:	f04f 0900 	mov.w	r9, #0
 8006018:	e7de      	b.n	8005fd8 <_printf_float+0x16c>
 800601a:	b913      	cbnz	r3, 8006022 <_printf_float+0x1b6>
 800601c:	6822      	ldr	r2, [r4, #0]
 800601e:	07d2      	lsls	r2, r2, #31
 8006020:	d501      	bpl.n	8006026 <_printf_float+0x1ba>
 8006022:	3302      	adds	r3, #2
 8006024:	e7f4      	b.n	8006010 <_printf_float+0x1a4>
 8006026:	2301      	movs	r3, #1
 8006028:	e7f2      	b.n	8006010 <_printf_float+0x1a4>
 800602a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800602e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006030:	4299      	cmp	r1, r3
 8006032:	db05      	blt.n	8006040 <_printf_float+0x1d4>
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	6121      	str	r1, [r4, #16]
 8006038:	07d8      	lsls	r0, r3, #31
 800603a:	d5ea      	bpl.n	8006012 <_printf_float+0x1a6>
 800603c:	1c4b      	adds	r3, r1, #1
 800603e:	e7e7      	b.n	8006010 <_printf_float+0x1a4>
 8006040:	2900      	cmp	r1, #0
 8006042:	bfd4      	ite	le
 8006044:	f1c1 0202 	rsble	r2, r1, #2
 8006048:	2201      	movgt	r2, #1
 800604a:	4413      	add	r3, r2
 800604c:	e7e0      	b.n	8006010 <_printf_float+0x1a4>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	055a      	lsls	r2, r3, #21
 8006052:	d407      	bmi.n	8006064 <_printf_float+0x1f8>
 8006054:	6923      	ldr	r3, [r4, #16]
 8006056:	4642      	mov	r2, r8
 8006058:	4631      	mov	r1, r6
 800605a:	4628      	mov	r0, r5
 800605c:	47b8      	blx	r7
 800605e:	3001      	adds	r0, #1
 8006060:	d12c      	bne.n	80060bc <_printf_float+0x250>
 8006062:	e764      	b.n	8005f2e <_printf_float+0xc2>
 8006064:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006068:	f240 80e0 	bls.w	800622c <_printf_float+0x3c0>
 800606c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006070:	2200      	movs	r2, #0
 8006072:	2300      	movs	r3, #0
 8006074:	f7fa fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 8006078:	2800      	cmp	r0, #0
 800607a:	d034      	beq.n	80060e6 <_printf_float+0x27a>
 800607c:	4a37      	ldr	r2, [pc, #220]	; (800615c <_printf_float+0x2f0>)
 800607e:	2301      	movs	r3, #1
 8006080:	4631      	mov	r1, r6
 8006082:	4628      	mov	r0, r5
 8006084:	47b8      	blx	r7
 8006086:	3001      	adds	r0, #1
 8006088:	f43f af51 	beq.w	8005f2e <_printf_float+0xc2>
 800608c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006090:	429a      	cmp	r2, r3
 8006092:	db02      	blt.n	800609a <_printf_float+0x22e>
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	07d8      	lsls	r0, r3, #31
 8006098:	d510      	bpl.n	80060bc <_printf_float+0x250>
 800609a:	ee18 3a10 	vmov	r3, s16
 800609e:	4652      	mov	r2, sl
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f af41 	beq.w	8005f2e <_printf_float+0xc2>
 80060ac:	f04f 0800 	mov.w	r8, #0
 80060b0:	f104 091a 	add.w	r9, r4, #26
 80060b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060b6:	3b01      	subs	r3, #1
 80060b8:	4543      	cmp	r3, r8
 80060ba:	dc09      	bgt.n	80060d0 <_printf_float+0x264>
 80060bc:	6823      	ldr	r3, [r4, #0]
 80060be:	079b      	lsls	r3, r3, #30
 80060c0:	f100 8105 	bmi.w	80062ce <_printf_float+0x462>
 80060c4:	68e0      	ldr	r0, [r4, #12]
 80060c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060c8:	4298      	cmp	r0, r3
 80060ca:	bfb8      	it	lt
 80060cc:	4618      	movlt	r0, r3
 80060ce:	e730      	b.n	8005f32 <_printf_float+0xc6>
 80060d0:	2301      	movs	r3, #1
 80060d2:	464a      	mov	r2, r9
 80060d4:	4631      	mov	r1, r6
 80060d6:	4628      	mov	r0, r5
 80060d8:	47b8      	blx	r7
 80060da:	3001      	adds	r0, #1
 80060dc:	f43f af27 	beq.w	8005f2e <_printf_float+0xc2>
 80060e0:	f108 0801 	add.w	r8, r8, #1
 80060e4:	e7e6      	b.n	80060b4 <_printf_float+0x248>
 80060e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	dc39      	bgt.n	8006160 <_printf_float+0x2f4>
 80060ec:	4a1b      	ldr	r2, [pc, #108]	; (800615c <_printf_float+0x2f0>)
 80060ee:	2301      	movs	r3, #1
 80060f0:	4631      	mov	r1, r6
 80060f2:	4628      	mov	r0, r5
 80060f4:	47b8      	blx	r7
 80060f6:	3001      	adds	r0, #1
 80060f8:	f43f af19 	beq.w	8005f2e <_printf_float+0xc2>
 80060fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006100:	4313      	orrs	r3, r2
 8006102:	d102      	bne.n	800610a <_printf_float+0x29e>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	07d9      	lsls	r1, r3, #31
 8006108:	d5d8      	bpl.n	80060bc <_printf_float+0x250>
 800610a:	ee18 3a10 	vmov	r3, s16
 800610e:	4652      	mov	r2, sl
 8006110:	4631      	mov	r1, r6
 8006112:	4628      	mov	r0, r5
 8006114:	47b8      	blx	r7
 8006116:	3001      	adds	r0, #1
 8006118:	f43f af09 	beq.w	8005f2e <_printf_float+0xc2>
 800611c:	f04f 0900 	mov.w	r9, #0
 8006120:	f104 0a1a 	add.w	sl, r4, #26
 8006124:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006126:	425b      	negs	r3, r3
 8006128:	454b      	cmp	r3, r9
 800612a:	dc01      	bgt.n	8006130 <_printf_float+0x2c4>
 800612c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800612e:	e792      	b.n	8006056 <_printf_float+0x1ea>
 8006130:	2301      	movs	r3, #1
 8006132:	4652      	mov	r2, sl
 8006134:	4631      	mov	r1, r6
 8006136:	4628      	mov	r0, r5
 8006138:	47b8      	blx	r7
 800613a:	3001      	adds	r0, #1
 800613c:	f43f aef7 	beq.w	8005f2e <_printf_float+0xc2>
 8006140:	f109 0901 	add.w	r9, r9, #1
 8006144:	e7ee      	b.n	8006124 <_printf_float+0x2b8>
 8006146:	bf00      	nop
 8006148:	7fefffff 	.word	0x7fefffff
 800614c:	08011acc 	.word	0x08011acc
 8006150:	08011ad0 	.word	0x08011ad0
 8006154:	08011ad8 	.word	0x08011ad8
 8006158:	08011ad4 	.word	0x08011ad4
 800615c:	08011adc 	.word	0x08011adc
 8006160:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006162:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006164:	429a      	cmp	r2, r3
 8006166:	bfa8      	it	ge
 8006168:	461a      	movge	r2, r3
 800616a:	2a00      	cmp	r2, #0
 800616c:	4691      	mov	r9, r2
 800616e:	dc37      	bgt.n	80061e0 <_printf_float+0x374>
 8006170:	f04f 0b00 	mov.w	fp, #0
 8006174:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006178:	f104 021a 	add.w	r2, r4, #26
 800617c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800617e:	9305      	str	r3, [sp, #20]
 8006180:	eba3 0309 	sub.w	r3, r3, r9
 8006184:	455b      	cmp	r3, fp
 8006186:	dc33      	bgt.n	80061f0 <_printf_float+0x384>
 8006188:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800618c:	429a      	cmp	r2, r3
 800618e:	db3b      	blt.n	8006208 <_printf_float+0x39c>
 8006190:	6823      	ldr	r3, [r4, #0]
 8006192:	07da      	lsls	r2, r3, #31
 8006194:	d438      	bmi.n	8006208 <_printf_float+0x39c>
 8006196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006198:	9a05      	ldr	r2, [sp, #20]
 800619a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800619c:	1a9a      	subs	r2, r3, r2
 800619e:	eba3 0901 	sub.w	r9, r3, r1
 80061a2:	4591      	cmp	r9, r2
 80061a4:	bfa8      	it	ge
 80061a6:	4691      	movge	r9, r2
 80061a8:	f1b9 0f00 	cmp.w	r9, #0
 80061ac:	dc35      	bgt.n	800621a <_printf_float+0x3ae>
 80061ae:	f04f 0800 	mov.w	r8, #0
 80061b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061b6:	f104 0a1a 	add.w	sl, r4, #26
 80061ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061be:	1a9b      	subs	r3, r3, r2
 80061c0:	eba3 0309 	sub.w	r3, r3, r9
 80061c4:	4543      	cmp	r3, r8
 80061c6:	f77f af79 	ble.w	80060bc <_printf_float+0x250>
 80061ca:	2301      	movs	r3, #1
 80061cc:	4652      	mov	r2, sl
 80061ce:	4631      	mov	r1, r6
 80061d0:	4628      	mov	r0, r5
 80061d2:	47b8      	blx	r7
 80061d4:	3001      	adds	r0, #1
 80061d6:	f43f aeaa 	beq.w	8005f2e <_printf_float+0xc2>
 80061da:	f108 0801 	add.w	r8, r8, #1
 80061de:	e7ec      	b.n	80061ba <_printf_float+0x34e>
 80061e0:	4613      	mov	r3, r2
 80061e2:	4631      	mov	r1, r6
 80061e4:	4642      	mov	r2, r8
 80061e6:	4628      	mov	r0, r5
 80061e8:	47b8      	blx	r7
 80061ea:	3001      	adds	r0, #1
 80061ec:	d1c0      	bne.n	8006170 <_printf_float+0x304>
 80061ee:	e69e      	b.n	8005f2e <_printf_float+0xc2>
 80061f0:	2301      	movs	r3, #1
 80061f2:	4631      	mov	r1, r6
 80061f4:	4628      	mov	r0, r5
 80061f6:	9205      	str	r2, [sp, #20]
 80061f8:	47b8      	blx	r7
 80061fa:	3001      	adds	r0, #1
 80061fc:	f43f ae97 	beq.w	8005f2e <_printf_float+0xc2>
 8006200:	9a05      	ldr	r2, [sp, #20]
 8006202:	f10b 0b01 	add.w	fp, fp, #1
 8006206:	e7b9      	b.n	800617c <_printf_float+0x310>
 8006208:	ee18 3a10 	vmov	r3, s16
 800620c:	4652      	mov	r2, sl
 800620e:	4631      	mov	r1, r6
 8006210:	4628      	mov	r0, r5
 8006212:	47b8      	blx	r7
 8006214:	3001      	adds	r0, #1
 8006216:	d1be      	bne.n	8006196 <_printf_float+0x32a>
 8006218:	e689      	b.n	8005f2e <_printf_float+0xc2>
 800621a:	9a05      	ldr	r2, [sp, #20]
 800621c:	464b      	mov	r3, r9
 800621e:	4442      	add	r2, r8
 8006220:	4631      	mov	r1, r6
 8006222:	4628      	mov	r0, r5
 8006224:	47b8      	blx	r7
 8006226:	3001      	adds	r0, #1
 8006228:	d1c1      	bne.n	80061ae <_printf_float+0x342>
 800622a:	e680      	b.n	8005f2e <_printf_float+0xc2>
 800622c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800622e:	2a01      	cmp	r2, #1
 8006230:	dc01      	bgt.n	8006236 <_printf_float+0x3ca>
 8006232:	07db      	lsls	r3, r3, #31
 8006234:	d538      	bpl.n	80062a8 <_printf_float+0x43c>
 8006236:	2301      	movs	r3, #1
 8006238:	4642      	mov	r2, r8
 800623a:	4631      	mov	r1, r6
 800623c:	4628      	mov	r0, r5
 800623e:	47b8      	blx	r7
 8006240:	3001      	adds	r0, #1
 8006242:	f43f ae74 	beq.w	8005f2e <_printf_float+0xc2>
 8006246:	ee18 3a10 	vmov	r3, s16
 800624a:	4652      	mov	r2, sl
 800624c:	4631      	mov	r1, r6
 800624e:	4628      	mov	r0, r5
 8006250:	47b8      	blx	r7
 8006252:	3001      	adds	r0, #1
 8006254:	f43f ae6b 	beq.w	8005f2e <_printf_float+0xc2>
 8006258:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800625c:	2200      	movs	r2, #0
 800625e:	2300      	movs	r3, #0
 8006260:	f7fa fc32 	bl	8000ac8 <__aeabi_dcmpeq>
 8006264:	b9d8      	cbnz	r0, 800629e <_printf_float+0x432>
 8006266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006268:	f108 0201 	add.w	r2, r8, #1
 800626c:	3b01      	subs	r3, #1
 800626e:	4631      	mov	r1, r6
 8006270:	4628      	mov	r0, r5
 8006272:	47b8      	blx	r7
 8006274:	3001      	adds	r0, #1
 8006276:	d10e      	bne.n	8006296 <_printf_float+0x42a>
 8006278:	e659      	b.n	8005f2e <_printf_float+0xc2>
 800627a:	2301      	movs	r3, #1
 800627c:	4652      	mov	r2, sl
 800627e:	4631      	mov	r1, r6
 8006280:	4628      	mov	r0, r5
 8006282:	47b8      	blx	r7
 8006284:	3001      	adds	r0, #1
 8006286:	f43f ae52 	beq.w	8005f2e <_printf_float+0xc2>
 800628a:	f108 0801 	add.w	r8, r8, #1
 800628e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006290:	3b01      	subs	r3, #1
 8006292:	4543      	cmp	r3, r8
 8006294:	dcf1      	bgt.n	800627a <_printf_float+0x40e>
 8006296:	464b      	mov	r3, r9
 8006298:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800629c:	e6dc      	b.n	8006058 <_printf_float+0x1ec>
 800629e:	f04f 0800 	mov.w	r8, #0
 80062a2:	f104 0a1a 	add.w	sl, r4, #26
 80062a6:	e7f2      	b.n	800628e <_printf_float+0x422>
 80062a8:	2301      	movs	r3, #1
 80062aa:	4642      	mov	r2, r8
 80062ac:	e7df      	b.n	800626e <_printf_float+0x402>
 80062ae:	2301      	movs	r3, #1
 80062b0:	464a      	mov	r2, r9
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	f43f ae38 	beq.w	8005f2e <_printf_float+0xc2>
 80062be:	f108 0801 	add.w	r8, r8, #1
 80062c2:	68e3      	ldr	r3, [r4, #12]
 80062c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80062c6:	1a5b      	subs	r3, r3, r1
 80062c8:	4543      	cmp	r3, r8
 80062ca:	dcf0      	bgt.n	80062ae <_printf_float+0x442>
 80062cc:	e6fa      	b.n	80060c4 <_printf_float+0x258>
 80062ce:	f04f 0800 	mov.w	r8, #0
 80062d2:	f104 0919 	add.w	r9, r4, #25
 80062d6:	e7f4      	b.n	80062c2 <_printf_float+0x456>

080062d8 <_printf_common>:
 80062d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062dc:	4616      	mov	r6, r2
 80062de:	4699      	mov	r9, r3
 80062e0:	688a      	ldr	r2, [r1, #8]
 80062e2:	690b      	ldr	r3, [r1, #16]
 80062e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e8:	4293      	cmp	r3, r2
 80062ea:	bfb8      	it	lt
 80062ec:	4613      	movlt	r3, r2
 80062ee:	6033      	str	r3, [r6, #0]
 80062f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062f4:	4607      	mov	r7, r0
 80062f6:	460c      	mov	r4, r1
 80062f8:	b10a      	cbz	r2, 80062fe <_printf_common+0x26>
 80062fa:	3301      	adds	r3, #1
 80062fc:	6033      	str	r3, [r6, #0]
 80062fe:	6823      	ldr	r3, [r4, #0]
 8006300:	0699      	lsls	r1, r3, #26
 8006302:	bf42      	ittt	mi
 8006304:	6833      	ldrmi	r3, [r6, #0]
 8006306:	3302      	addmi	r3, #2
 8006308:	6033      	strmi	r3, [r6, #0]
 800630a:	6825      	ldr	r5, [r4, #0]
 800630c:	f015 0506 	ands.w	r5, r5, #6
 8006310:	d106      	bne.n	8006320 <_printf_common+0x48>
 8006312:	f104 0a19 	add.w	sl, r4, #25
 8006316:	68e3      	ldr	r3, [r4, #12]
 8006318:	6832      	ldr	r2, [r6, #0]
 800631a:	1a9b      	subs	r3, r3, r2
 800631c:	42ab      	cmp	r3, r5
 800631e:	dc26      	bgt.n	800636e <_printf_common+0x96>
 8006320:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006324:	1e13      	subs	r3, r2, #0
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	bf18      	it	ne
 800632a:	2301      	movne	r3, #1
 800632c:	0692      	lsls	r2, r2, #26
 800632e:	d42b      	bmi.n	8006388 <_printf_common+0xb0>
 8006330:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006334:	4649      	mov	r1, r9
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	3001      	adds	r0, #1
 800633c:	d01e      	beq.n	800637c <_printf_common+0xa4>
 800633e:	6823      	ldr	r3, [r4, #0]
 8006340:	68e5      	ldr	r5, [r4, #12]
 8006342:	6832      	ldr	r2, [r6, #0]
 8006344:	f003 0306 	and.w	r3, r3, #6
 8006348:	2b04      	cmp	r3, #4
 800634a:	bf08      	it	eq
 800634c:	1aad      	subeq	r5, r5, r2
 800634e:	68a3      	ldr	r3, [r4, #8]
 8006350:	6922      	ldr	r2, [r4, #16]
 8006352:	bf0c      	ite	eq
 8006354:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006358:	2500      	movne	r5, #0
 800635a:	4293      	cmp	r3, r2
 800635c:	bfc4      	itt	gt
 800635e:	1a9b      	subgt	r3, r3, r2
 8006360:	18ed      	addgt	r5, r5, r3
 8006362:	2600      	movs	r6, #0
 8006364:	341a      	adds	r4, #26
 8006366:	42b5      	cmp	r5, r6
 8006368:	d11a      	bne.n	80063a0 <_printf_common+0xc8>
 800636a:	2000      	movs	r0, #0
 800636c:	e008      	b.n	8006380 <_printf_common+0xa8>
 800636e:	2301      	movs	r3, #1
 8006370:	4652      	mov	r2, sl
 8006372:	4649      	mov	r1, r9
 8006374:	4638      	mov	r0, r7
 8006376:	47c0      	blx	r8
 8006378:	3001      	adds	r0, #1
 800637a:	d103      	bne.n	8006384 <_printf_common+0xac>
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006384:	3501      	adds	r5, #1
 8006386:	e7c6      	b.n	8006316 <_printf_common+0x3e>
 8006388:	18e1      	adds	r1, r4, r3
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	2030      	movs	r0, #48	; 0x30
 800638e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006392:	4422      	add	r2, r4
 8006394:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006398:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800639c:	3302      	adds	r3, #2
 800639e:	e7c7      	b.n	8006330 <_printf_common+0x58>
 80063a0:	2301      	movs	r3, #1
 80063a2:	4622      	mov	r2, r4
 80063a4:	4649      	mov	r1, r9
 80063a6:	4638      	mov	r0, r7
 80063a8:	47c0      	blx	r8
 80063aa:	3001      	adds	r0, #1
 80063ac:	d0e6      	beq.n	800637c <_printf_common+0xa4>
 80063ae:	3601      	adds	r6, #1
 80063b0:	e7d9      	b.n	8006366 <_printf_common+0x8e>
	...

080063b4 <_printf_i>:
 80063b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b8:	7e0f      	ldrb	r7, [r1, #24]
 80063ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80063bc:	2f78      	cmp	r7, #120	; 0x78
 80063be:	4691      	mov	r9, r2
 80063c0:	4680      	mov	r8, r0
 80063c2:	460c      	mov	r4, r1
 80063c4:	469a      	mov	sl, r3
 80063c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80063ca:	d807      	bhi.n	80063dc <_printf_i+0x28>
 80063cc:	2f62      	cmp	r7, #98	; 0x62
 80063ce:	d80a      	bhi.n	80063e6 <_printf_i+0x32>
 80063d0:	2f00      	cmp	r7, #0
 80063d2:	f000 80d8 	beq.w	8006586 <_printf_i+0x1d2>
 80063d6:	2f58      	cmp	r7, #88	; 0x58
 80063d8:	f000 80a3 	beq.w	8006522 <_printf_i+0x16e>
 80063dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063e4:	e03a      	b.n	800645c <_printf_i+0xa8>
 80063e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063ea:	2b15      	cmp	r3, #21
 80063ec:	d8f6      	bhi.n	80063dc <_printf_i+0x28>
 80063ee:	a101      	add	r1, pc, #4	; (adr r1, 80063f4 <_printf_i+0x40>)
 80063f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063f4:	0800644d 	.word	0x0800644d
 80063f8:	08006461 	.word	0x08006461
 80063fc:	080063dd 	.word	0x080063dd
 8006400:	080063dd 	.word	0x080063dd
 8006404:	080063dd 	.word	0x080063dd
 8006408:	080063dd 	.word	0x080063dd
 800640c:	08006461 	.word	0x08006461
 8006410:	080063dd 	.word	0x080063dd
 8006414:	080063dd 	.word	0x080063dd
 8006418:	080063dd 	.word	0x080063dd
 800641c:	080063dd 	.word	0x080063dd
 8006420:	0800656d 	.word	0x0800656d
 8006424:	08006491 	.word	0x08006491
 8006428:	0800654f 	.word	0x0800654f
 800642c:	080063dd 	.word	0x080063dd
 8006430:	080063dd 	.word	0x080063dd
 8006434:	0800658f 	.word	0x0800658f
 8006438:	080063dd 	.word	0x080063dd
 800643c:	08006491 	.word	0x08006491
 8006440:	080063dd 	.word	0x080063dd
 8006444:	080063dd 	.word	0x080063dd
 8006448:	08006557 	.word	0x08006557
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	1d1a      	adds	r2, r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	602a      	str	r2, [r5, #0]
 8006454:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800645c:	2301      	movs	r3, #1
 800645e:	e0a3      	b.n	80065a8 <_printf_i+0x1f4>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	6829      	ldr	r1, [r5, #0]
 8006464:	0606      	lsls	r6, r0, #24
 8006466:	f101 0304 	add.w	r3, r1, #4
 800646a:	d50a      	bpl.n	8006482 <_printf_i+0xce>
 800646c:	680e      	ldr	r6, [r1, #0]
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	2e00      	cmp	r6, #0
 8006472:	da03      	bge.n	800647c <_printf_i+0xc8>
 8006474:	232d      	movs	r3, #45	; 0x2d
 8006476:	4276      	negs	r6, r6
 8006478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800647c:	485e      	ldr	r0, [pc, #376]	; (80065f8 <_printf_i+0x244>)
 800647e:	230a      	movs	r3, #10
 8006480:	e019      	b.n	80064b6 <_printf_i+0x102>
 8006482:	680e      	ldr	r6, [r1, #0]
 8006484:	602b      	str	r3, [r5, #0]
 8006486:	f010 0f40 	tst.w	r0, #64	; 0x40
 800648a:	bf18      	it	ne
 800648c:	b236      	sxthne	r6, r6
 800648e:	e7ef      	b.n	8006470 <_printf_i+0xbc>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	6820      	ldr	r0, [r4, #0]
 8006494:	1d19      	adds	r1, r3, #4
 8006496:	6029      	str	r1, [r5, #0]
 8006498:	0601      	lsls	r1, r0, #24
 800649a:	d501      	bpl.n	80064a0 <_printf_i+0xec>
 800649c:	681e      	ldr	r6, [r3, #0]
 800649e:	e002      	b.n	80064a6 <_printf_i+0xf2>
 80064a0:	0646      	lsls	r6, r0, #25
 80064a2:	d5fb      	bpl.n	800649c <_printf_i+0xe8>
 80064a4:	881e      	ldrh	r6, [r3, #0]
 80064a6:	4854      	ldr	r0, [pc, #336]	; (80065f8 <_printf_i+0x244>)
 80064a8:	2f6f      	cmp	r7, #111	; 0x6f
 80064aa:	bf0c      	ite	eq
 80064ac:	2308      	moveq	r3, #8
 80064ae:	230a      	movne	r3, #10
 80064b0:	2100      	movs	r1, #0
 80064b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064b6:	6865      	ldr	r5, [r4, #4]
 80064b8:	60a5      	str	r5, [r4, #8]
 80064ba:	2d00      	cmp	r5, #0
 80064bc:	bfa2      	ittt	ge
 80064be:	6821      	ldrge	r1, [r4, #0]
 80064c0:	f021 0104 	bicge.w	r1, r1, #4
 80064c4:	6021      	strge	r1, [r4, #0]
 80064c6:	b90e      	cbnz	r6, 80064cc <_printf_i+0x118>
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	d04d      	beq.n	8006568 <_printf_i+0x1b4>
 80064cc:	4615      	mov	r5, r2
 80064ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80064d2:	fb03 6711 	mls	r7, r3, r1, r6
 80064d6:	5dc7      	ldrb	r7, [r0, r7]
 80064d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80064dc:	4637      	mov	r7, r6
 80064de:	42bb      	cmp	r3, r7
 80064e0:	460e      	mov	r6, r1
 80064e2:	d9f4      	bls.n	80064ce <_printf_i+0x11a>
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d10b      	bne.n	8006500 <_printf_i+0x14c>
 80064e8:	6823      	ldr	r3, [r4, #0]
 80064ea:	07de      	lsls	r6, r3, #31
 80064ec:	d508      	bpl.n	8006500 <_printf_i+0x14c>
 80064ee:	6923      	ldr	r3, [r4, #16]
 80064f0:	6861      	ldr	r1, [r4, #4]
 80064f2:	4299      	cmp	r1, r3
 80064f4:	bfde      	ittt	le
 80064f6:	2330      	movle	r3, #48	; 0x30
 80064f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006500:	1b52      	subs	r2, r2, r5
 8006502:	6122      	str	r2, [r4, #16]
 8006504:	f8cd a000 	str.w	sl, [sp]
 8006508:	464b      	mov	r3, r9
 800650a:	aa03      	add	r2, sp, #12
 800650c:	4621      	mov	r1, r4
 800650e:	4640      	mov	r0, r8
 8006510:	f7ff fee2 	bl	80062d8 <_printf_common>
 8006514:	3001      	adds	r0, #1
 8006516:	d14c      	bne.n	80065b2 <_printf_i+0x1fe>
 8006518:	f04f 30ff 	mov.w	r0, #4294967295
 800651c:	b004      	add	sp, #16
 800651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006522:	4835      	ldr	r0, [pc, #212]	; (80065f8 <_printf_i+0x244>)
 8006524:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006528:	6829      	ldr	r1, [r5, #0]
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006530:	6029      	str	r1, [r5, #0]
 8006532:	061d      	lsls	r5, r3, #24
 8006534:	d514      	bpl.n	8006560 <_printf_i+0x1ac>
 8006536:	07df      	lsls	r7, r3, #31
 8006538:	bf44      	itt	mi
 800653a:	f043 0320 	orrmi.w	r3, r3, #32
 800653e:	6023      	strmi	r3, [r4, #0]
 8006540:	b91e      	cbnz	r6, 800654a <_printf_i+0x196>
 8006542:	6823      	ldr	r3, [r4, #0]
 8006544:	f023 0320 	bic.w	r3, r3, #32
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	2310      	movs	r3, #16
 800654c:	e7b0      	b.n	80064b0 <_printf_i+0xfc>
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	f043 0320 	orr.w	r3, r3, #32
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	2378      	movs	r3, #120	; 0x78
 8006558:	4828      	ldr	r0, [pc, #160]	; (80065fc <_printf_i+0x248>)
 800655a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800655e:	e7e3      	b.n	8006528 <_printf_i+0x174>
 8006560:	0659      	lsls	r1, r3, #25
 8006562:	bf48      	it	mi
 8006564:	b2b6      	uxthmi	r6, r6
 8006566:	e7e6      	b.n	8006536 <_printf_i+0x182>
 8006568:	4615      	mov	r5, r2
 800656a:	e7bb      	b.n	80064e4 <_printf_i+0x130>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	6826      	ldr	r6, [r4, #0]
 8006570:	6961      	ldr	r1, [r4, #20]
 8006572:	1d18      	adds	r0, r3, #4
 8006574:	6028      	str	r0, [r5, #0]
 8006576:	0635      	lsls	r5, r6, #24
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	d501      	bpl.n	8006580 <_printf_i+0x1cc>
 800657c:	6019      	str	r1, [r3, #0]
 800657e:	e002      	b.n	8006586 <_printf_i+0x1d2>
 8006580:	0670      	lsls	r0, r6, #25
 8006582:	d5fb      	bpl.n	800657c <_printf_i+0x1c8>
 8006584:	8019      	strh	r1, [r3, #0]
 8006586:	2300      	movs	r3, #0
 8006588:	6123      	str	r3, [r4, #16]
 800658a:	4615      	mov	r5, r2
 800658c:	e7ba      	b.n	8006504 <_printf_i+0x150>
 800658e:	682b      	ldr	r3, [r5, #0]
 8006590:	1d1a      	adds	r2, r3, #4
 8006592:	602a      	str	r2, [r5, #0]
 8006594:	681d      	ldr	r5, [r3, #0]
 8006596:	6862      	ldr	r2, [r4, #4]
 8006598:	2100      	movs	r1, #0
 800659a:	4628      	mov	r0, r5
 800659c:	f7f9 fe20 	bl	80001e0 <memchr>
 80065a0:	b108      	cbz	r0, 80065a6 <_printf_i+0x1f2>
 80065a2:	1b40      	subs	r0, r0, r5
 80065a4:	6060      	str	r0, [r4, #4]
 80065a6:	6863      	ldr	r3, [r4, #4]
 80065a8:	6123      	str	r3, [r4, #16]
 80065aa:	2300      	movs	r3, #0
 80065ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065b0:	e7a8      	b.n	8006504 <_printf_i+0x150>
 80065b2:	6923      	ldr	r3, [r4, #16]
 80065b4:	462a      	mov	r2, r5
 80065b6:	4649      	mov	r1, r9
 80065b8:	4640      	mov	r0, r8
 80065ba:	47d0      	blx	sl
 80065bc:	3001      	adds	r0, #1
 80065be:	d0ab      	beq.n	8006518 <_printf_i+0x164>
 80065c0:	6823      	ldr	r3, [r4, #0]
 80065c2:	079b      	lsls	r3, r3, #30
 80065c4:	d413      	bmi.n	80065ee <_printf_i+0x23a>
 80065c6:	68e0      	ldr	r0, [r4, #12]
 80065c8:	9b03      	ldr	r3, [sp, #12]
 80065ca:	4298      	cmp	r0, r3
 80065cc:	bfb8      	it	lt
 80065ce:	4618      	movlt	r0, r3
 80065d0:	e7a4      	b.n	800651c <_printf_i+0x168>
 80065d2:	2301      	movs	r3, #1
 80065d4:	4632      	mov	r2, r6
 80065d6:	4649      	mov	r1, r9
 80065d8:	4640      	mov	r0, r8
 80065da:	47d0      	blx	sl
 80065dc:	3001      	adds	r0, #1
 80065de:	d09b      	beq.n	8006518 <_printf_i+0x164>
 80065e0:	3501      	adds	r5, #1
 80065e2:	68e3      	ldr	r3, [r4, #12]
 80065e4:	9903      	ldr	r1, [sp, #12]
 80065e6:	1a5b      	subs	r3, r3, r1
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	dcf2      	bgt.n	80065d2 <_printf_i+0x21e>
 80065ec:	e7eb      	b.n	80065c6 <_printf_i+0x212>
 80065ee:	2500      	movs	r5, #0
 80065f0:	f104 0619 	add.w	r6, r4, #25
 80065f4:	e7f5      	b.n	80065e2 <_printf_i+0x22e>
 80065f6:	bf00      	nop
 80065f8:	08011ade 	.word	0x08011ade
 80065fc:	08011aef 	.word	0x08011aef

08006600 <iprintf>:
 8006600:	b40f      	push	{r0, r1, r2, r3}
 8006602:	4b0a      	ldr	r3, [pc, #40]	; (800662c <iprintf+0x2c>)
 8006604:	b513      	push	{r0, r1, r4, lr}
 8006606:	681c      	ldr	r4, [r3, #0]
 8006608:	b124      	cbz	r4, 8006614 <iprintf+0x14>
 800660a:	69a3      	ldr	r3, [r4, #24]
 800660c:	b913      	cbnz	r3, 8006614 <iprintf+0x14>
 800660e:	4620      	mov	r0, r4
 8006610:	f001 f8ee 	bl	80077f0 <__sinit>
 8006614:	ab05      	add	r3, sp, #20
 8006616:	9a04      	ldr	r2, [sp, #16]
 8006618:	68a1      	ldr	r1, [r4, #8]
 800661a:	9301      	str	r3, [sp, #4]
 800661c:	4620      	mov	r0, r4
 800661e:	f001 feab 	bl	8008378 <_vfiprintf_r>
 8006622:	b002      	add	sp, #8
 8006624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006628:	b004      	add	sp, #16
 800662a:	4770      	bx	lr
 800662c:	2000000c 	.word	0x2000000c

08006630 <putchar>:
 8006630:	4b09      	ldr	r3, [pc, #36]	; (8006658 <putchar+0x28>)
 8006632:	b513      	push	{r0, r1, r4, lr}
 8006634:	681c      	ldr	r4, [r3, #0]
 8006636:	4601      	mov	r1, r0
 8006638:	b134      	cbz	r4, 8006648 <putchar+0x18>
 800663a:	69a3      	ldr	r3, [r4, #24]
 800663c:	b923      	cbnz	r3, 8006648 <putchar+0x18>
 800663e:	9001      	str	r0, [sp, #4]
 8006640:	4620      	mov	r0, r4
 8006642:	f001 f8d5 	bl	80077f0 <__sinit>
 8006646:	9901      	ldr	r1, [sp, #4]
 8006648:	68a2      	ldr	r2, [r4, #8]
 800664a:	4620      	mov	r0, r4
 800664c:	b002      	add	sp, #8
 800664e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006652:	f001 bfc1 	b.w	80085d8 <_putc_r>
 8006656:	bf00      	nop
 8006658:	2000000c 	.word	0x2000000c

0800665c <_puts_r>:
 800665c:	b570      	push	{r4, r5, r6, lr}
 800665e:	460e      	mov	r6, r1
 8006660:	4605      	mov	r5, r0
 8006662:	b118      	cbz	r0, 800666c <_puts_r+0x10>
 8006664:	6983      	ldr	r3, [r0, #24]
 8006666:	b90b      	cbnz	r3, 800666c <_puts_r+0x10>
 8006668:	f001 f8c2 	bl	80077f0 <__sinit>
 800666c:	69ab      	ldr	r3, [r5, #24]
 800666e:	68ac      	ldr	r4, [r5, #8]
 8006670:	b913      	cbnz	r3, 8006678 <_puts_r+0x1c>
 8006672:	4628      	mov	r0, r5
 8006674:	f001 f8bc 	bl	80077f0 <__sinit>
 8006678:	4b2c      	ldr	r3, [pc, #176]	; (800672c <_puts_r+0xd0>)
 800667a:	429c      	cmp	r4, r3
 800667c:	d120      	bne.n	80066c0 <_puts_r+0x64>
 800667e:	686c      	ldr	r4, [r5, #4]
 8006680:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006682:	07db      	lsls	r3, r3, #31
 8006684:	d405      	bmi.n	8006692 <_puts_r+0x36>
 8006686:	89a3      	ldrh	r3, [r4, #12]
 8006688:	0598      	lsls	r0, r3, #22
 800668a:	d402      	bmi.n	8006692 <_puts_r+0x36>
 800668c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800668e:	f001 f952 	bl	8007936 <__retarget_lock_acquire_recursive>
 8006692:	89a3      	ldrh	r3, [r4, #12]
 8006694:	0719      	lsls	r1, r3, #28
 8006696:	d51d      	bpl.n	80066d4 <_puts_r+0x78>
 8006698:	6923      	ldr	r3, [r4, #16]
 800669a:	b1db      	cbz	r3, 80066d4 <_puts_r+0x78>
 800669c:	3e01      	subs	r6, #1
 800669e:	68a3      	ldr	r3, [r4, #8]
 80066a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066a4:	3b01      	subs	r3, #1
 80066a6:	60a3      	str	r3, [r4, #8]
 80066a8:	bb39      	cbnz	r1, 80066fa <_puts_r+0x9e>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	da38      	bge.n	8006720 <_puts_r+0xc4>
 80066ae:	4622      	mov	r2, r4
 80066b0:	210a      	movs	r1, #10
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 f848 	bl	8006748 <__swbuf_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d011      	beq.n	80066e0 <_puts_r+0x84>
 80066bc:	250a      	movs	r5, #10
 80066be:	e011      	b.n	80066e4 <_puts_r+0x88>
 80066c0:	4b1b      	ldr	r3, [pc, #108]	; (8006730 <_puts_r+0xd4>)
 80066c2:	429c      	cmp	r4, r3
 80066c4:	d101      	bne.n	80066ca <_puts_r+0x6e>
 80066c6:	68ac      	ldr	r4, [r5, #8]
 80066c8:	e7da      	b.n	8006680 <_puts_r+0x24>
 80066ca:	4b1a      	ldr	r3, [pc, #104]	; (8006734 <_puts_r+0xd8>)
 80066cc:	429c      	cmp	r4, r3
 80066ce:	bf08      	it	eq
 80066d0:	68ec      	ldreq	r4, [r5, #12]
 80066d2:	e7d5      	b.n	8006680 <_puts_r+0x24>
 80066d4:	4621      	mov	r1, r4
 80066d6:	4628      	mov	r0, r5
 80066d8:	f000 f888 	bl	80067ec <__swsetup_r>
 80066dc:	2800      	cmp	r0, #0
 80066de:	d0dd      	beq.n	800669c <_puts_r+0x40>
 80066e0:	f04f 35ff 	mov.w	r5, #4294967295
 80066e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066e6:	07da      	lsls	r2, r3, #31
 80066e8:	d405      	bmi.n	80066f6 <_puts_r+0x9a>
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	059b      	lsls	r3, r3, #22
 80066ee:	d402      	bmi.n	80066f6 <_puts_r+0x9a>
 80066f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066f2:	f001 f921 	bl	8007938 <__retarget_lock_release_recursive>
 80066f6:	4628      	mov	r0, r5
 80066f8:	bd70      	pop	{r4, r5, r6, pc}
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	da04      	bge.n	8006708 <_puts_r+0xac>
 80066fe:	69a2      	ldr	r2, [r4, #24]
 8006700:	429a      	cmp	r2, r3
 8006702:	dc06      	bgt.n	8006712 <_puts_r+0xb6>
 8006704:	290a      	cmp	r1, #10
 8006706:	d004      	beq.n	8006712 <_puts_r+0xb6>
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	6022      	str	r2, [r4, #0]
 800670e:	7019      	strb	r1, [r3, #0]
 8006710:	e7c5      	b.n	800669e <_puts_r+0x42>
 8006712:	4622      	mov	r2, r4
 8006714:	4628      	mov	r0, r5
 8006716:	f000 f817 	bl	8006748 <__swbuf_r>
 800671a:	3001      	adds	r0, #1
 800671c:	d1bf      	bne.n	800669e <_puts_r+0x42>
 800671e:	e7df      	b.n	80066e0 <_puts_r+0x84>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	250a      	movs	r5, #10
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	6022      	str	r2, [r4, #0]
 8006728:	701d      	strb	r5, [r3, #0]
 800672a:	e7db      	b.n	80066e4 <_puts_r+0x88>
 800672c:	08011bb0 	.word	0x08011bb0
 8006730:	08011bd0 	.word	0x08011bd0
 8006734:	08011b90 	.word	0x08011b90

08006738 <puts>:
 8006738:	4b02      	ldr	r3, [pc, #8]	; (8006744 <puts+0xc>)
 800673a:	4601      	mov	r1, r0
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f7ff bf8d 	b.w	800665c <_puts_r>
 8006742:	bf00      	nop
 8006744:	2000000c 	.word	0x2000000c

08006748 <__swbuf_r>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	460e      	mov	r6, r1
 800674c:	4614      	mov	r4, r2
 800674e:	4605      	mov	r5, r0
 8006750:	b118      	cbz	r0, 800675a <__swbuf_r+0x12>
 8006752:	6983      	ldr	r3, [r0, #24]
 8006754:	b90b      	cbnz	r3, 800675a <__swbuf_r+0x12>
 8006756:	f001 f84b 	bl	80077f0 <__sinit>
 800675a:	4b21      	ldr	r3, [pc, #132]	; (80067e0 <__swbuf_r+0x98>)
 800675c:	429c      	cmp	r4, r3
 800675e:	d12b      	bne.n	80067b8 <__swbuf_r+0x70>
 8006760:	686c      	ldr	r4, [r5, #4]
 8006762:	69a3      	ldr	r3, [r4, #24]
 8006764:	60a3      	str	r3, [r4, #8]
 8006766:	89a3      	ldrh	r3, [r4, #12]
 8006768:	071a      	lsls	r2, r3, #28
 800676a:	d52f      	bpl.n	80067cc <__swbuf_r+0x84>
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	b36b      	cbz	r3, 80067cc <__swbuf_r+0x84>
 8006770:	6923      	ldr	r3, [r4, #16]
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	1ac0      	subs	r0, r0, r3
 8006776:	6963      	ldr	r3, [r4, #20]
 8006778:	b2f6      	uxtb	r6, r6
 800677a:	4283      	cmp	r3, r0
 800677c:	4637      	mov	r7, r6
 800677e:	dc04      	bgt.n	800678a <__swbuf_r+0x42>
 8006780:	4621      	mov	r1, r4
 8006782:	4628      	mov	r0, r5
 8006784:	f000 ffa0 	bl	80076c8 <_fflush_r>
 8006788:	bb30      	cbnz	r0, 80067d8 <__swbuf_r+0x90>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	3b01      	subs	r3, #1
 800678e:	60a3      	str	r3, [r4, #8]
 8006790:	6823      	ldr	r3, [r4, #0]
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	6022      	str	r2, [r4, #0]
 8006796:	701e      	strb	r6, [r3, #0]
 8006798:	6963      	ldr	r3, [r4, #20]
 800679a:	3001      	adds	r0, #1
 800679c:	4283      	cmp	r3, r0
 800679e:	d004      	beq.n	80067aa <__swbuf_r+0x62>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	07db      	lsls	r3, r3, #31
 80067a4:	d506      	bpl.n	80067b4 <__swbuf_r+0x6c>
 80067a6:	2e0a      	cmp	r6, #10
 80067a8:	d104      	bne.n	80067b4 <__swbuf_r+0x6c>
 80067aa:	4621      	mov	r1, r4
 80067ac:	4628      	mov	r0, r5
 80067ae:	f000 ff8b 	bl	80076c8 <_fflush_r>
 80067b2:	b988      	cbnz	r0, 80067d8 <__swbuf_r+0x90>
 80067b4:	4638      	mov	r0, r7
 80067b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067b8:	4b0a      	ldr	r3, [pc, #40]	; (80067e4 <__swbuf_r+0x9c>)
 80067ba:	429c      	cmp	r4, r3
 80067bc:	d101      	bne.n	80067c2 <__swbuf_r+0x7a>
 80067be:	68ac      	ldr	r4, [r5, #8]
 80067c0:	e7cf      	b.n	8006762 <__swbuf_r+0x1a>
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <__swbuf_r+0xa0>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	bf08      	it	eq
 80067c8:	68ec      	ldreq	r4, [r5, #12]
 80067ca:	e7ca      	b.n	8006762 <__swbuf_r+0x1a>
 80067cc:	4621      	mov	r1, r4
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f80c 	bl	80067ec <__swsetup_r>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d0cb      	beq.n	8006770 <__swbuf_r+0x28>
 80067d8:	f04f 37ff 	mov.w	r7, #4294967295
 80067dc:	e7ea      	b.n	80067b4 <__swbuf_r+0x6c>
 80067de:	bf00      	nop
 80067e0:	08011bb0 	.word	0x08011bb0
 80067e4:	08011bd0 	.word	0x08011bd0
 80067e8:	08011b90 	.word	0x08011b90

080067ec <__swsetup_r>:
 80067ec:	4b32      	ldr	r3, [pc, #200]	; (80068b8 <__swsetup_r+0xcc>)
 80067ee:	b570      	push	{r4, r5, r6, lr}
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	4606      	mov	r6, r0
 80067f4:	460c      	mov	r4, r1
 80067f6:	b125      	cbz	r5, 8006802 <__swsetup_r+0x16>
 80067f8:	69ab      	ldr	r3, [r5, #24]
 80067fa:	b913      	cbnz	r3, 8006802 <__swsetup_r+0x16>
 80067fc:	4628      	mov	r0, r5
 80067fe:	f000 fff7 	bl	80077f0 <__sinit>
 8006802:	4b2e      	ldr	r3, [pc, #184]	; (80068bc <__swsetup_r+0xd0>)
 8006804:	429c      	cmp	r4, r3
 8006806:	d10f      	bne.n	8006828 <__swsetup_r+0x3c>
 8006808:	686c      	ldr	r4, [r5, #4]
 800680a:	89a3      	ldrh	r3, [r4, #12]
 800680c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006810:	0719      	lsls	r1, r3, #28
 8006812:	d42c      	bmi.n	800686e <__swsetup_r+0x82>
 8006814:	06dd      	lsls	r5, r3, #27
 8006816:	d411      	bmi.n	800683c <__swsetup_r+0x50>
 8006818:	2309      	movs	r3, #9
 800681a:	6033      	str	r3, [r6, #0]
 800681c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006820:	81a3      	strh	r3, [r4, #12]
 8006822:	f04f 30ff 	mov.w	r0, #4294967295
 8006826:	e03e      	b.n	80068a6 <__swsetup_r+0xba>
 8006828:	4b25      	ldr	r3, [pc, #148]	; (80068c0 <__swsetup_r+0xd4>)
 800682a:	429c      	cmp	r4, r3
 800682c:	d101      	bne.n	8006832 <__swsetup_r+0x46>
 800682e:	68ac      	ldr	r4, [r5, #8]
 8006830:	e7eb      	b.n	800680a <__swsetup_r+0x1e>
 8006832:	4b24      	ldr	r3, [pc, #144]	; (80068c4 <__swsetup_r+0xd8>)
 8006834:	429c      	cmp	r4, r3
 8006836:	bf08      	it	eq
 8006838:	68ec      	ldreq	r4, [r5, #12]
 800683a:	e7e6      	b.n	800680a <__swsetup_r+0x1e>
 800683c:	0758      	lsls	r0, r3, #29
 800683e:	d512      	bpl.n	8006866 <__swsetup_r+0x7a>
 8006840:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006842:	b141      	cbz	r1, 8006856 <__swsetup_r+0x6a>
 8006844:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006848:	4299      	cmp	r1, r3
 800684a:	d002      	beq.n	8006852 <__swsetup_r+0x66>
 800684c:	4630      	mov	r0, r6
 800684e:	f001 fc89 	bl	8008164 <_free_r>
 8006852:	2300      	movs	r3, #0
 8006854:	6363      	str	r3, [r4, #52]	; 0x34
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800685c:	81a3      	strh	r3, [r4, #12]
 800685e:	2300      	movs	r3, #0
 8006860:	6063      	str	r3, [r4, #4]
 8006862:	6923      	ldr	r3, [r4, #16]
 8006864:	6023      	str	r3, [r4, #0]
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0308 	orr.w	r3, r3, #8
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	6923      	ldr	r3, [r4, #16]
 8006870:	b94b      	cbnz	r3, 8006886 <__swsetup_r+0x9a>
 8006872:	89a3      	ldrh	r3, [r4, #12]
 8006874:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006878:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800687c:	d003      	beq.n	8006886 <__swsetup_r+0x9a>
 800687e:	4621      	mov	r1, r4
 8006880:	4630      	mov	r0, r6
 8006882:	f001 f87f 	bl	8007984 <__smakebuf_r>
 8006886:	89a0      	ldrh	r0, [r4, #12]
 8006888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800688c:	f010 0301 	ands.w	r3, r0, #1
 8006890:	d00a      	beq.n	80068a8 <__swsetup_r+0xbc>
 8006892:	2300      	movs	r3, #0
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6963      	ldr	r3, [r4, #20]
 8006898:	425b      	negs	r3, r3
 800689a:	61a3      	str	r3, [r4, #24]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	b943      	cbnz	r3, 80068b2 <__swsetup_r+0xc6>
 80068a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068a4:	d1ba      	bne.n	800681c <__swsetup_r+0x30>
 80068a6:	bd70      	pop	{r4, r5, r6, pc}
 80068a8:	0781      	lsls	r1, r0, #30
 80068aa:	bf58      	it	pl
 80068ac:	6963      	ldrpl	r3, [r4, #20]
 80068ae:	60a3      	str	r3, [r4, #8]
 80068b0:	e7f4      	b.n	800689c <__swsetup_r+0xb0>
 80068b2:	2000      	movs	r0, #0
 80068b4:	e7f7      	b.n	80068a6 <__swsetup_r+0xba>
 80068b6:	bf00      	nop
 80068b8:	2000000c 	.word	0x2000000c
 80068bc:	08011bb0 	.word	0x08011bb0
 80068c0:	08011bd0 	.word	0x08011bd0
 80068c4:	08011b90 	.word	0x08011b90

080068c8 <quorem>:
 80068c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	6903      	ldr	r3, [r0, #16]
 80068ce:	690c      	ldr	r4, [r1, #16]
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	4607      	mov	r7, r0
 80068d4:	f2c0 8081 	blt.w	80069da <quorem+0x112>
 80068d8:	3c01      	subs	r4, #1
 80068da:	f101 0814 	add.w	r8, r1, #20
 80068de:	f100 0514 	add.w	r5, r0, #20
 80068e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80068e6:	9301      	str	r3, [sp, #4]
 80068e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80068ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80068f0:	3301      	adds	r3, #1
 80068f2:	429a      	cmp	r2, r3
 80068f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80068f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80068fc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006900:	d331      	bcc.n	8006966 <quorem+0x9e>
 8006902:	f04f 0e00 	mov.w	lr, #0
 8006906:	4640      	mov	r0, r8
 8006908:	46ac      	mov	ip, r5
 800690a:	46f2      	mov	sl, lr
 800690c:	f850 2b04 	ldr.w	r2, [r0], #4
 8006910:	b293      	uxth	r3, r2
 8006912:	fb06 e303 	mla	r3, r6, r3, lr
 8006916:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800691a:	b29b      	uxth	r3, r3
 800691c:	ebaa 0303 	sub.w	r3, sl, r3
 8006920:	f8dc a000 	ldr.w	sl, [ip]
 8006924:	0c12      	lsrs	r2, r2, #16
 8006926:	fa13 f38a 	uxtah	r3, r3, sl
 800692a:	fb06 e202 	mla	r2, r6, r2, lr
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	9b00      	ldr	r3, [sp, #0]
 8006932:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006936:	b292      	uxth	r2, r2
 8006938:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800693c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006940:	f8bd 3000 	ldrh.w	r3, [sp]
 8006944:	4581      	cmp	r9, r0
 8006946:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800694a:	f84c 3b04 	str.w	r3, [ip], #4
 800694e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006952:	d2db      	bcs.n	800690c <quorem+0x44>
 8006954:	f855 300b 	ldr.w	r3, [r5, fp]
 8006958:	b92b      	cbnz	r3, 8006966 <quorem+0x9e>
 800695a:	9b01      	ldr	r3, [sp, #4]
 800695c:	3b04      	subs	r3, #4
 800695e:	429d      	cmp	r5, r3
 8006960:	461a      	mov	r2, r3
 8006962:	d32e      	bcc.n	80069c2 <quorem+0xfa>
 8006964:	613c      	str	r4, [r7, #16]
 8006966:	4638      	mov	r0, r7
 8006968:	f001 fae4 	bl	8007f34 <__mcmp>
 800696c:	2800      	cmp	r0, #0
 800696e:	db24      	blt.n	80069ba <quorem+0xf2>
 8006970:	3601      	adds	r6, #1
 8006972:	4628      	mov	r0, r5
 8006974:	f04f 0c00 	mov.w	ip, #0
 8006978:	f858 2b04 	ldr.w	r2, [r8], #4
 800697c:	f8d0 e000 	ldr.w	lr, [r0]
 8006980:	b293      	uxth	r3, r2
 8006982:	ebac 0303 	sub.w	r3, ip, r3
 8006986:	0c12      	lsrs	r2, r2, #16
 8006988:	fa13 f38e 	uxtah	r3, r3, lr
 800698c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006990:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006994:	b29b      	uxth	r3, r3
 8006996:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800699a:	45c1      	cmp	r9, r8
 800699c:	f840 3b04 	str.w	r3, [r0], #4
 80069a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80069a4:	d2e8      	bcs.n	8006978 <quorem+0xb0>
 80069a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80069aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069ae:	b922      	cbnz	r2, 80069ba <quorem+0xf2>
 80069b0:	3b04      	subs	r3, #4
 80069b2:	429d      	cmp	r5, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	d30a      	bcc.n	80069ce <quorem+0x106>
 80069b8:	613c      	str	r4, [r7, #16]
 80069ba:	4630      	mov	r0, r6
 80069bc:	b003      	add	sp, #12
 80069be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	3b04      	subs	r3, #4
 80069c6:	2a00      	cmp	r2, #0
 80069c8:	d1cc      	bne.n	8006964 <quorem+0x9c>
 80069ca:	3c01      	subs	r4, #1
 80069cc:	e7c7      	b.n	800695e <quorem+0x96>
 80069ce:	6812      	ldr	r2, [r2, #0]
 80069d0:	3b04      	subs	r3, #4
 80069d2:	2a00      	cmp	r2, #0
 80069d4:	d1f0      	bne.n	80069b8 <quorem+0xf0>
 80069d6:	3c01      	subs	r4, #1
 80069d8:	e7eb      	b.n	80069b2 <quorem+0xea>
 80069da:	2000      	movs	r0, #0
 80069dc:	e7ee      	b.n	80069bc <quorem+0xf4>
	...

080069e0 <_dtoa_r>:
 80069e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e4:	ed2d 8b04 	vpush	{d8-d9}
 80069e8:	ec57 6b10 	vmov	r6, r7, d0
 80069ec:	b093      	sub	sp, #76	; 0x4c
 80069ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80069f4:	9106      	str	r1, [sp, #24]
 80069f6:	ee10 aa10 	vmov	sl, s0
 80069fa:	4604      	mov	r4, r0
 80069fc:	9209      	str	r2, [sp, #36]	; 0x24
 80069fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006a00:	46bb      	mov	fp, r7
 8006a02:	b975      	cbnz	r5, 8006a22 <_dtoa_r+0x42>
 8006a04:	2010      	movs	r0, #16
 8006a06:	f000 fffd 	bl	8007a04 <malloc>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a0e:	b920      	cbnz	r0, 8006a1a <_dtoa_r+0x3a>
 8006a10:	4ba7      	ldr	r3, [pc, #668]	; (8006cb0 <_dtoa_r+0x2d0>)
 8006a12:	21ea      	movs	r1, #234	; 0xea
 8006a14:	48a7      	ldr	r0, [pc, #668]	; (8006cb4 <_dtoa_r+0x2d4>)
 8006a16:	f001 fe8d 	bl	8008734 <__assert_func>
 8006a1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a1e:	6005      	str	r5, [r0, #0]
 8006a20:	60c5      	str	r5, [r0, #12]
 8006a22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a24:	6819      	ldr	r1, [r3, #0]
 8006a26:	b151      	cbz	r1, 8006a3e <_dtoa_r+0x5e>
 8006a28:	685a      	ldr	r2, [r3, #4]
 8006a2a:	604a      	str	r2, [r1, #4]
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	4093      	lsls	r3, r2
 8006a30:	608b      	str	r3, [r1, #8]
 8006a32:	4620      	mov	r0, r4
 8006a34:	f001 f83c 	bl	8007ab0 <_Bfree>
 8006a38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
 8006a3e:	1e3b      	subs	r3, r7, #0
 8006a40:	bfaa      	itet	ge
 8006a42:	2300      	movge	r3, #0
 8006a44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006a48:	f8c8 3000 	strge.w	r3, [r8]
 8006a4c:	4b9a      	ldr	r3, [pc, #616]	; (8006cb8 <_dtoa_r+0x2d8>)
 8006a4e:	bfbc      	itt	lt
 8006a50:	2201      	movlt	r2, #1
 8006a52:	f8c8 2000 	strlt.w	r2, [r8]
 8006a56:	ea33 030b 	bics.w	r3, r3, fp
 8006a5a:	d11b      	bne.n	8006a94 <_dtoa_r+0xb4>
 8006a5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a62:	6013      	str	r3, [r2, #0]
 8006a64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a68:	4333      	orrs	r3, r6
 8006a6a:	f000 8592 	beq.w	8007592 <_dtoa_r+0xbb2>
 8006a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a70:	b963      	cbnz	r3, 8006a8c <_dtoa_r+0xac>
 8006a72:	4b92      	ldr	r3, [pc, #584]	; (8006cbc <_dtoa_r+0x2dc>)
 8006a74:	e022      	b.n	8006abc <_dtoa_r+0xdc>
 8006a76:	4b92      	ldr	r3, [pc, #584]	; (8006cc0 <_dtoa_r+0x2e0>)
 8006a78:	9301      	str	r3, [sp, #4]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	9801      	ldr	r0, [sp, #4]
 8006a82:	b013      	add	sp, #76	; 0x4c
 8006a84:	ecbd 8b04 	vpop	{d8-d9}
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	4b8b      	ldr	r3, [pc, #556]	; (8006cbc <_dtoa_r+0x2dc>)
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	3303      	adds	r3, #3
 8006a92:	e7f3      	b.n	8006a7c <_dtoa_r+0x9c>
 8006a94:	2200      	movs	r2, #0
 8006a96:	2300      	movs	r3, #0
 8006a98:	4650      	mov	r0, sl
 8006a9a:	4659      	mov	r1, fp
 8006a9c:	f7fa f814 	bl	8000ac8 <__aeabi_dcmpeq>
 8006aa0:	ec4b ab19 	vmov	d9, sl, fp
 8006aa4:	4680      	mov	r8, r0
 8006aa6:	b158      	cbz	r0, 8006ac0 <_dtoa_r+0xe0>
 8006aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006aaa:	2301      	movs	r3, #1
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	f000 856b 	beq.w	800758c <_dtoa_r+0xbac>
 8006ab6:	4883      	ldr	r0, [pc, #524]	; (8006cc4 <_dtoa_r+0x2e4>)
 8006ab8:	6018      	str	r0, [r3, #0]
 8006aba:	1e43      	subs	r3, r0, #1
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	e7df      	b.n	8006a80 <_dtoa_r+0xa0>
 8006ac0:	ec4b ab10 	vmov	d0, sl, fp
 8006ac4:	aa10      	add	r2, sp, #64	; 0x40
 8006ac6:	a911      	add	r1, sp, #68	; 0x44
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f001 fad9 	bl	8008080 <__d2b>
 8006ace:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006ad2:	ee08 0a10 	vmov	s16, r0
 8006ad6:	2d00      	cmp	r5, #0
 8006ad8:	f000 8084 	beq.w	8006be4 <_dtoa_r+0x204>
 8006adc:	ee19 3a90 	vmov	r3, s19
 8006ae0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ae4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006ae8:	4656      	mov	r6, sl
 8006aea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006aee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006af2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006af6:	4b74      	ldr	r3, [pc, #464]	; (8006cc8 <_dtoa_r+0x2e8>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	4630      	mov	r0, r6
 8006afc:	4639      	mov	r1, r7
 8006afe:	f7f9 fbc3 	bl	8000288 <__aeabi_dsub>
 8006b02:	a365      	add	r3, pc, #404	; (adr r3, 8006c98 <_dtoa_r+0x2b8>)
 8006b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b08:	f7f9 fd76 	bl	80005f8 <__aeabi_dmul>
 8006b0c:	a364      	add	r3, pc, #400	; (adr r3, 8006ca0 <_dtoa_r+0x2c0>)
 8006b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b12:	f7f9 fbbb 	bl	800028c <__adddf3>
 8006b16:	4606      	mov	r6, r0
 8006b18:	4628      	mov	r0, r5
 8006b1a:	460f      	mov	r7, r1
 8006b1c:	f7f9 fd02 	bl	8000524 <__aeabi_i2d>
 8006b20:	a361      	add	r3, pc, #388	; (adr r3, 8006ca8 <_dtoa_r+0x2c8>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	f7f9 fd67 	bl	80005f8 <__aeabi_dmul>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4630      	mov	r0, r6
 8006b30:	4639      	mov	r1, r7
 8006b32:	f7f9 fbab 	bl	800028c <__adddf3>
 8006b36:	4606      	mov	r6, r0
 8006b38:	460f      	mov	r7, r1
 8006b3a:	f7fa f80d 	bl	8000b58 <__aeabi_d2iz>
 8006b3e:	2200      	movs	r2, #0
 8006b40:	9000      	str	r0, [sp, #0]
 8006b42:	2300      	movs	r3, #0
 8006b44:	4630      	mov	r0, r6
 8006b46:	4639      	mov	r1, r7
 8006b48:	f7f9 ffc8 	bl	8000adc <__aeabi_dcmplt>
 8006b4c:	b150      	cbz	r0, 8006b64 <_dtoa_r+0x184>
 8006b4e:	9800      	ldr	r0, [sp, #0]
 8006b50:	f7f9 fce8 	bl	8000524 <__aeabi_i2d>
 8006b54:	4632      	mov	r2, r6
 8006b56:	463b      	mov	r3, r7
 8006b58:	f7f9 ffb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b5c:	b910      	cbnz	r0, 8006b64 <_dtoa_r+0x184>
 8006b5e:	9b00      	ldr	r3, [sp, #0]
 8006b60:	3b01      	subs	r3, #1
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	9b00      	ldr	r3, [sp, #0]
 8006b66:	2b16      	cmp	r3, #22
 8006b68:	d85a      	bhi.n	8006c20 <_dtoa_r+0x240>
 8006b6a:	9a00      	ldr	r2, [sp, #0]
 8006b6c:	4b57      	ldr	r3, [pc, #348]	; (8006ccc <_dtoa_r+0x2ec>)
 8006b6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	ec51 0b19 	vmov	r0, r1, d9
 8006b7a:	f7f9 ffaf 	bl	8000adc <__aeabi_dcmplt>
 8006b7e:	2800      	cmp	r0, #0
 8006b80:	d050      	beq.n	8006c24 <_dtoa_r+0x244>
 8006b82:	9b00      	ldr	r3, [sp, #0]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b8e:	1b5d      	subs	r5, r3, r5
 8006b90:	1e6b      	subs	r3, r5, #1
 8006b92:	9305      	str	r3, [sp, #20]
 8006b94:	bf45      	ittet	mi
 8006b96:	f1c5 0301 	rsbmi	r3, r5, #1
 8006b9a:	9304      	strmi	r3, [sp, #16]
 8006b9c:	2300      	movpl	r3, #0
 8006b9e:	2300      	movmi	r3, #0
 8006ba0:	bf4c      	ite	mi
 8006ba2:	9305      	strmi	r3, [sp, #20]
 8006ba4:	9304      	strpl	r3, [sp, #16]
 8006ba6:	9b00      	ldr	r3, [sp, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	db3d      	blt.n	8006c28 <_dtoa_r+0x248>
 8006bac:	9b05      	ldr	r3, [sp, #20]
 8006bae:	9a00      	ldr	r2, [sp, #0]
 8006bb0:	920a      	str	r2, [sp, #40]	; 0x28
 8006bb2:	4413      	add	r3, r2
 8006bb4:	9305      	str	r3, [sp, #20]
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	9307      	str	r3, [sp, #28]
 8006bba:	9b06      	ldr	r3, [sp, #24]
 8006bbc:	2b09      	cmp	r3, #9
 8006bbe:	f200 8089 	bhi.w	8006cd4 <_dtoa_r+0x2f4>
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	bfc4      	itt	gt
 8006bc6:	3b04      	subgt	r3, #4
 8006bc8:	9306      	strgt	r3, [sp, #24]
 8006bca:	9b06      	ldr	r3, [sp, #24]
 8006bcc:	f1a3 0302 	sub.w	r3, r3, #2
 8006bd0:	bfcc      	ite	gt
 8006bd2:	2500      	movgt	r5, #0
 8006bd4:	2501      	movle	r5, #1
 8006bd6:	2b03      	cmp	r3, #3
 8006bd8:	f200 8087 	bhi.w	8006cea <_dtoa_r+0x30a>
 8006bdc:	e8df f003 	tbb	[pc, r3]
 8006be0:	59383a2d 	.word	0x59383a2d
 8006be4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006be8:	441d      	add	r5, r3
 8006bea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006bee:	2b20      	cmp	r3, #32
 8006bf0:	bfc1      	itttt	gt
 8006bf2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006bf6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006bfa:	fa0b f303 	lslgt.w	r3, fp, r3
 8006bfe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006c02:	bfda      	itte	le
 8006c04:	f1c3 0320 	rsble	r3, r3, #32
 8006c08:	fa06 f003 	lslle.w	r0, r6, r3
 8006c0c:	4318      	orrgt	r0, r3
 8006c0e:	f7f9 fc79 	bl	8000504 <__aeabi_ui2d>
 8006c12:	2301      	movs	r3, #1
 8006c14:	4606      	mov	r6, r0
 8006c16:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006c1a:	3d01      	subs	r5, #1
 8006c1c:	930e      	str	r3, [sp, #56]	; 0x38
 8006c1e:	e76a      	b.n	8006af6 <_dtoa_r+0x116>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e7b2      	b.n	8006b8a <_dtoa_r+0x1aa>
 8006c24:	900b      	str	r0, [sp, #44]	; 0x2c
 8006c26:	e7b1      	b.n	8006b8c <_dtoa_r+0x1ac>
 8006c28:	9b04      	ldr	r3, [sp, #16]
 8006c2a:	9a00      	ldr	r2, [sp, #0]
 8006c2c:	1a9b      	subs	r3, r3, r2
 8006c2e:	9304      	str	r3, [sp, #16]
 8006c30:	4253      	negs	r3, r2
 8006c32:	9307      	str	r3, [sp, #28]
 8006c34:	2300      	movs	r3, #0
 8006c36:	930a      	str	r3, [sp, #40]	; 0x28
 8006c38:	e7bf      	b.n	8006bba <_dtoa_r+0x1da>
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	9308      	str	r3, [sp, #32]
 8006c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	dc55      	bgt.n	8006cf0 <_dtoa_r+0x310>
 8006c44:	2301      	movs	r3, #1
 8006c46:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c4e:	e00c      	b.n	8006c6a <_dtoa_r+0x28a>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e7f3      	b.n	8006c3c <_dtoa_r+0x25c>
 8006c54:	2300      	movs	r3, #0
 8006c56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c58:	9308      	str	r3, [sp, #32]
 8006c5a:	9b00      	ldr	r3, [sp, #0]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	9302      	str	r3, [sp, #8]
 8006c60:	3301      	adds	r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	9303      	str	r3, [sp, #12]
 8006c66:	bfb8      	it	lt
 8006c68:	2301      	movlt	r3, #1
 8006c6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	6042      	str	r2, [r0, #4]
 8006c70:	2204      	movs	r2, #4
 8006c72:	f102 0614 	add.w	r6, r2, #20
 8006c76:	429e      	cmp	r6, r3
 8006c78:	6841      	ldr	r1, [r0, #4]
 8006c7a:	d93d      	bls.n	8006cf8 <_dtoa_r+0x318>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 fed7 	bl	8007a30 <_Balloc>
 8006c82:	9001      	str	r0, [sp, #4]
 8006c84:	2800      	cmp	r0, #0
 8006c86:	d13b      	bne.n	8006d00 <_dtoa_r+0x320>
 8006c88:	4b11      	ldr	r3, [pc, #68]	; (8006cd0 <_dtoa_r+0x2f0>)
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006c90:	e6c0      	b.n	8006a14 <_dtoa_r+0x34>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e7df      	b.n	8006c56 <_dtoa_r+0x276>
 8006c96:	bf00      	nop
 8006c98:	636f4361 	.word	0x636f4361
 8006c9c:	3fd287a7 	.word	0x3fd287a7
 8006ca0:	8b60c8b3 	.word	0x8b60c8b3
 8006ca4:	3fc68a28 	.word	0x3fc68a28
 8006ca8:	509f79fb 	.word	0x509f79fb
 8006cac:	3fd34413 	.word	0x3fd34413
 8006cb0:	08011b0d 	.word	0x08011b0d
 8006cb4:	08011b24 	.word	0x08011b24
 8006cb8:	7ff00000 	.word	0x7ff00000
 8006cbc:	08011b09 	.word	0x08011b09
 8006cc0:	08011b00 	.word	0x08011b00
 8006cc4:	08011add 	.word	0x08011add
 8006cc8:	3ff80000 	.word	0x3ff80000
 8006ccc:	08011c78 	.word	0x08011c78
 8006cd0:	08011b7f 	.word	0x08011b7f
 8006cd4:	2501      	movs	r5, #1
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	9306      	str	r3, [sp, #24]
 8006cda:	9508      	str	r5, [sp, #32]
 8006cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8006ce0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	2312      	movs	r3, #18
 8006ce8:	e7b0      	b.n	8006c4c <_dtoa_r+0x26c>
 8006cea:	2301      	movs	r3, #1
 8006cec:	9308      	str	r3, [sp, #32]
 8006cee:	e7f5      	b.n	8006cdc <_dtoa_r+0x2fc>
 8006cf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006cf6:	e7b8      	b.n	8006c6a <_dtoa_r+0x28a>
 8006cf8:	3101      	adds	r1, #1
 8006cfa:	6041      	str	r1, [r0, #4]
 8006cfc:	0052      	lsls	r2, r2, #1
 8006cfe:	e7b8      	b.n	8006c72 <_dtoa_r+0x292>
 8006d00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d02:	9a01      	ldr	r2, [sp, #4]
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	2b0e      	cmp	r3, #14
 8006d0a:	f200 809d 	bhi.w	8006e48 <_dtoa_r+0x468>
 8006d0e:	2d00      	cmp	r5, #0
 8006d10:	f000 809a 	beq.w	8006e48 <_dtoa_r+0x468>
 8006d14:	9b00      	ldr	r3, [sp, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	dd32      	ble.n	8006d80 <_dtoa_r+0x3a0>
 8006d1a:	4ab7      	ldr	r2, [pc, #732]	; (8006ff8 <_dtoa_r+0x618>)
 8006d1c:	f003 030f 	and.w	r3, r3, #15
 8006d20:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006d24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d28:	9b00      	ldr	r3, [sp, #0]
 8006d2a:	05d8      	lsls	r0, r3, #23
 8006d2c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006d30:	d516      	bpl.n	8006d60 <_dtoa_r+0x380>
 8006d32:	4bb2      	ldr	r3, [pc, #712]	; (8006ffc <_dtoa_r+0x61c>)
 8006d34:	ec51 0b19 	vmov	r0, r1, d9
 8006d38:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006d3c:	f7f9 fd86 	bl	800084c <__aeabi_ddiv>
 8006d40:	f007 070f 	and.w	r7, r7, #15
 8006d44:	4682      	mov	sl, r0
 8006d46:	468b      	mov	fp, r1
 8006d48:	2503      	movs	r5, #3
 8006d4a:	4eac      	ldr	r6, [pc, #688]	; (8006ffc <_dtoa_r+0x61c>)
 8006d4c:	b957      	cbnz	r7, 8006d64 <_dtoa_r+0x384>
 8006d4e:	4642      	mov	r2, r8
 8006d50:	464b      	mov	r3, r9
 8006d52:	4650      	mov	r0, sl
 8006d54:	4659      	mov	r1, fp
 8006d56:	f7f9 fd79 	bl	800084c <__aeabi_ddiv>
 8006d5a:	4682      	mov	sl, r0
 8006d5c:	468b      	mov	fp, r1
 8006d5e:	e028      	b.n	8006db2 <_dtoa_r+0x3d2>
 8006d60:	2502      	movs	r5, #2
 8006d62:	e7f2      	b.n	8006d4a <_dtoa_r+0x36a>
 8006d64:	07f9      	lsls	r1, r7, #31
 8006d66:	d508      	bpl.n	8006d7a <_dtoa_r+0x39a>
 8006d68:	4640      	mov	r0, r8
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d70:	f7f9 fc42 	bl	80005f8 <__aeabi_dmul>
 8006d74:	3501      	adds	r5, #1
 8006d76:	4680      	mov	r8, r0
 8006d78:	4689      	mov	r9, r1
 8006d7a:	107f      	asrs	r7, r7, #1
 8006d7c:	3608      	adds	r6, #8
 8006d7e:	e7e5      	b.n	8006d4c <_dtoa_r+0x36c>
 8006d80:	f000 809b 	beq.w	8006eba <_dtoa_r+0x4da>
 8006d84:	9b00      	ldr	r3, [sp, #0]
 8006d86:	4f9d      	ldr	r7, [pc, #628]	; (8006ffc <_dtoa_r+0x61c>)
 8006d88:	425e      	negs	r6, r3
 8006d8a:	4b9b      	ldr	r3, [pc, #620]	; (8006ff8 <_dtoa_r+0x618>)
 8006d8c:	f006 020f 	and.w	r2, r6, #15
 8006d90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	ec51 0b19 	vmov	r0, r1, d9
 8006d9c:	f7f9 fc2c 	bl	80005f8 <__aeabi_dmul>
 8006da0:	1136      	asrs	r6, r6, #4
 8006da2:	4682      	mov	sl, r0
 8006da4:	468b      	mov	fp, r1
 8006da6:	2300      	movs	r3, #0
 8006da8:	2502      	movs	r5, #2
 8006daa:	2e00      	cmp	r6, #0
 8006dac:	d17a      	bne.n	8006ea4 <_dtoa_r+0x4c4>
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1d3      	bne.n	8006d5a <_dtoa_r+0x37a>
 8006db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 8082 	beq.w	8006ebe <_dtoa_r+0x4de>
 8006dba:	4b91      	ldr	r3, [pc, #580]	; (8007000 <_dtoa_r+0x620>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	4650      	mov	r0, sl
 8006dc0:	4659      	mov	r1, fp
 8006dc2:	f7f9 fe8b 	bl	8000adc <__aeabi_dcmplt>
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	d079      	beq.n	8006ebe <_dtoa_r+0x4de>
 8006dca:	9b03      	ldr	r3, [sp, #12]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d076      	beq.n	8006ebe <_dtoa_r+0x4de>
 8006dd0:	9b02      	ldr	r3, [sp, #8]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	dd36      	ble.n	8006e44 <_dtoa_r+0x464>
 8006dd6:	9b00      	ldr	r3, [sp, #0]
 8006dd8:	4650      	mov	r0, sl
 8006dda:	4659      	mov	r1, fp
 8006ddc:	1e5f      	subs	r7, r3, #1
 8006dde:	2200      	movs	r2, #0
 8006de0:	4b88      	ldr	r3, [pc, #544]	; (8007004 <_dtoa_r+0x624>)
 8006de2:	f7f9 fc09 	bl	80005f8 <__aeabi_dmul>
 8006de6:	9e02      	ldr	r6, [sp, #8]
 8006de8:	4682      	mov	sl, r0
 8006dea:	468b      	mov	fp, r1
 8006dec:	3501      	adds	r5, #1
 8006dee:	4628      	mov	r0, r5
 8006df0:	f7f9 fb98 	bl	8000524 <__aeabi_i2d>
 8006df4:	4652      	mov	r2, sl
 8006df6:	465b      	mov	r3, fp
 8006df8:	f7f9 fbfe 	bl	80005f8 <__aeabi_dmul>
 8006dfc:	4b82      	ldr	r3, [pc, #520]	; (8007008 <_dtoa_r+0x628>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f7f9 fa44 	bl	800028c <__adddf3>
 8006e04:	46d0      	mov	r8, sl
 8006e06:	46d9      	mov	r9, fp
 8006e08:	4682      	mov	sl, r0
 8006e0a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006e0e:	2e00      	cmp	r6, #0
 8006e10:	d158      	bne.n	8006ec4 <_dtoa_r+0x4e4>
 8006e12:	4b7e      	ldr	r3, [pc, #504]	; (800700c <_dtoa_r+0x62c>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	4640      	mov	r0, r8
 8006e18:	4649      	mov	r1, r9
 8006e1a:	f7f9 fa35 	bl	8000288 <__aeabi_dsub>
 8006e1e:	4652      	mov	r2, sl
 8006e20:	465b      	mov	r3, fp
 8006e22:	4680      	mov	r8, r0
 8006e24:	4689      	mov	r9, r1
 8006e26:	f7f9 fe77 	bl	8000b18 <__aeabi_dcmpgt>
 8006e2a:	2800      	cmp	r0, #0
 8006e2c:	f040 8295 	bne.w	800735a <_dtoa_r+0x97a>
 8006e30:	4652      	mov	r2, sl
 8006e32:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006e36:	4640      	mov	r0, r8
 8006e38:	4649      	mov	r1, r9
 8006e3a:	f7f9 fe4f 	bl	8000adc <__aeabi_dcmplt>
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f040 8289 	bne.w	8007356 <_dtoa_r+0x976>
 8006e44:	ec5b ab19 	vmov	sl, fp, d9
 8006e48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	f2c0 8148 	blt.w	80070e0 <_dtoa_r+0x700>
 8006e50:	9a00      	ldr	r2, [sp, #0]
 8006e52:	2a0e      	cmp	r2, #14
 8006e54:	f300 8144 	bgt.w	80070e0 <_dtoa_r+0x700>
 8006e58:	4b67      	ldr	r3, [pc, #412]	; (8006ff8 <_dtoa_r+0x618>)
 8006e5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e5e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f280 80d5 	bge.w	8007014 <_dtoa_r+0x634>
 8006e6a:	9b03      	ldr	r3, [sp, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f300 80d1 	bgt.w	8007014 <_dtoa_r+0x634>
 8006e72:	f040 826f 	bne.w	8007354 <_dtoa_r+0x974>
 8006e76:	4b65      	ldr	r3, [pc, #404]	; (800700c <_dtoa_r+0x62c>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4640      	mov	r0, r8
 8006e7c:	4649      	mov	r1, r9
 8006e7e:	f7f9 fbbb 	bl	80005f8 <__aeabi_dmul>
 8006e82:	4652      	mov	r2, sl
 8006e84:	465b      	mov	r3, fp
 8006e86:	f7f9 fe3d 	bl	8000b04 <__aeabi_dcmpge>
 8006e8a:	9e03      	ldr	r6, [sp, #12]
 8006e8c:	4637      	mov	r7, r6
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	f040 8245 	bne.w	800731e <_dtoa_r+0x93e>
 8006e94:	9d01      	ldr	r5, [sp, #4]
 8006e96:	2331      	movs	r3, #49	; 0x31
 8006e98:	f805 3b01 	strb.w	r3, [r5], #1
 8006e9c:	9b00      	ldr	r3, [sp, #0]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	e240      	b.n	8007326 <_dtoa_r+0x946>
 8006ea4:	07f2      	lsls	r2, r6, #31
 8006ea6:	d505      	bpl.n	8006eb4 <_dtoa_r+0x4d4>
 8006ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006eac:	f7f9 fba4 	bl	80005f8 <__aeabi_dmul>
 8006eb0:	3501      	adds	r5, #1
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	1076      	asrs	r6, r6, #1
 8006eb6:	3708      	adds	r7, #8
 8006eb8:	e777      	b.n	8006daa <_dtoa_r+0x3ca>
 8006eba:	2502      	movs	r5, #2
 8006ebc:	e779      	b.n	8006db2 <_dtoa_r+0x3d2>
 8006ebe:	9f00      	ldr	r7, [sp, #0]
 8006ec0:	9e03      	ldr	r6, [sp, #12]
 8006ec2:	e794      	b.n	8006dee <_dtoa_r+0x40e>
 8006ec4:	9901      	ldr	r1, [sp, #4]
 8006ec6:	4b4c      	ldr	r3, [pc, #304]	; (8006ff8 <_dtoa_r+0x618>)
 8006ec8:	4431      	add	r1, r6
 8006eca:	910d      	str	r1, [sp, #52]	; 0x34
 8006ecc:	9908      	ldr	r1, [sp, #32]
 8006ece:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ed2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006ed6:	2900      	cmp	r1, #0
 8006ed8:	d043      	beq.n	8006f62 <_dtoa_r+0x582>
 8006eda:	494d      	ldr	r1, [pc, #308]	; (8007010 <_dtoa_r+0x630>)
 8006edc:	2000      	movs	r0, #0
 8006ede:	f7f9 fcb5 	bl	800084c <__aeabi_ddiv>
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	465b      	mov	r3, fp
 8006ee6:	f7f9 f9cf 	bl	8000288 <__aeabi_dsub>
 8006eea:	9d01      	ldr	r5, [sp, #4]
 8006eec:	4682      	mov	sl, r0
 8006eee:	468b      	mov	fp, r1
 8006ef0:	4649      	mov	r1, r9
 8006ef2:	4640      	mov	r0, r8
 8006ef4:	f7f9 fe30 	bl	8000b58 <__aeabi_d2iz>
 8006ef8:	4606      	mov	r6, r0
 8006efa:	f7f9 fb13 	bl	8000524 <__aeabi_i2d>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4640      	mov	r0, r8
 8006f04:	4649      	mov	r1, r9
 8006f06:	f7f9 f9bf 	bl	8000288 <__aeabi_dsub>
 8006f0a:	3630      	adds	r6, #48	; 0x30
 8006f0c:	f805 6b01 	strb.w	r6, [r5], #1
 8006f10:	4652      	mov	r2, sl
 8006f12:	465b      	mov	r3, fp
 8006f14:	4680      	mov	r8, r0
 8006f16:	4689      	mov	r9, r1
 8006f18:	f7f9 fde0 	bl	8000adc <__aeabi_dcmplt>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d163      	bne.n	8006fe8 <_dtoa_r+0x608>
 8006f20:	4642      	mov	r2, r8
 8006f22:	464b      	mov	r3, r9
 8006f24:	4936      	ldr	r1, [pc, #216]	; (8007000 <_dtoa_r+0x620>)
 8006f26:	2000      	movs	r0, #0
 8006f28:	f7f9 f9ae 	bl	8000288 <__aeabi_dsub>
 8006f2c:	4652      	mov	r2, sl
 8006f2e:	465b      	mov	r3, fp
 8006f30:	f7f9 fdd4 	bl	8000adc <__aeabi_dcmplt>
 8006f34:	2800      	cmp	r0, #0
 8006f36:	f040 80b5 	bne.w	80070a4 <_dtoa_r+0x6c4>
 8006f3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f3c:	429d      	cmp	r5, r3
 8006f3e:	d081      	beq.n	8006e44 <_dtoa_r+0x464>
 8006f40:	4b30      	ldr	r3, [pc, #192]	; (8007004 <_dtoa_r+0x624>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	4650      	mov	r0, sl
 8006f46:	4659      	mov	r1, fp
 8006f48:	f7f9 fb56 	bl	80005f8 <__aeabi_dmul>
 8006f4c:	4b2d      	ldr	r3, [pc, #180]	; (8007004 <_dtoa_r+0x624>)
 8006f4e:	4682      	mov	sl, r0
 8006f50:	468b      	mov	fp, r1
 8006f52:	4640      	mov	r0, r8
 8006f54:	4649      	mov	r1, r9
 8006f56:	2200      	movs	r2, #0
 8006f58:	f7f9 fb4e 	bl	80005f8 <__aeabi_dmul>
 8006f5c:	4680      	mov	r8, r0
 8006f5e:	4689      	mov	r9, r1
 8006f60:	e7c6      	b.n	8006ef0 <_dtoa_r+0x510>
 8006f62:	4650      	mov	r0, sl
 8006f64:	4659      	mov	r1, fp
 8006f66:	f7f9 fb47 	bl	80005f8 <__aeabi_dmul>
 8006f6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f6c:	9d01      	ldr	r5, [sp, #4]
 8006f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f70:	4682      	mov	sl, r0
 8006f72:	468b      	mov	fp, r1
 8006f74:	4649      	mov	r1, r9
 8006f76:	4640      	mov	r0, r8
 8006f78:	f7f9 fdee 	bl	8000b58 <__aeabi_d2iz>
 8006f7c:	4606      	mov	r6, r0
 8006f7e:	f7f9 fad1 	bl	8000524 <__aeabi_i2d>
 8006f82:	3630      	adds	r6, #48	; 0x30
 8006f84:	4602      	mov	r2, r0
 8006f86:	460b      	mov	r3, r1
 8006f88:	4640      	mov	r0, r8
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	f7f9 f97c 	bl	8000288 <__aeabi_dsub>
 8006f90:	f805 6b01 	strb.w	r6, [r5], #1
 8006f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f96:	429d      	cmp	r5, r3
 8006f98:	4680      	mov	r8, r0
 8006f9a:	4689      	mov	r9, r1
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	d124      	bne.n	8006fec <_dtoa_r+0x60c>
 8006fa2:	4b1b      	ldr	r3, [pc, #108]	; (8007010 <_dtoa_r+0x630>)
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	4659      	mov	r1, fp
 8006fa8:	f7f9 f970 	bl	800028c <__adddf3>
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	f7f9 fdb0 	bl	8000b18 <__aeabi_dcmpgt>
 8006fb8:	2800      	cmp	r0, #0
 8006fba:	d173      	bne.n	80070a4 <_dtoa_r+0x6c4>
 8006fbc:	4652      	mov	r2, sl
 8006fbe:	465b      	mov	r3, fp
 8006fc0:	4913      	ldr	r1, [pc, #76]	; (8007010 <_dtoa_r+0x630>)
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	f7f9 f960 	bl	8000288 <__aeabi_dsub>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4649      	mov	r1, r9
 8006fd0:	f7f9 fd84 	bl	8000adc <__aeabi_dcmplt>
 8006fd4:	2800      	cmp	r0, #0
 8006fd6:	f43f af35 	beq.w	8006e44 <_dtoa_r+0x464>
 8006fda:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006fdc:	1e6b      	subs	r3, r5, #1
 8006fde:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006fe4:	2b30      	cmp	r3, #48	; 0x30
 8006fe6:	d0f8      	beq.n	8006fda <_dtoa_r+0x5fa>
 8006fe8:	9700      	str	r7, [sp, #0]
 8006fea:	e049      	b.n	8007080 <_dtoa_r+0x6a0>
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <_dtoa_r+0x624>)
 8006fee:	f7f9 fb03 	bl	80005f8 <__aeabi_dmul>
 8006ff2:	4680      	mov	r8, r0
 8006ff4:	4689      	mov	r9, r1
 8006ff6:	e7bd      	b.n	8006f74 <_dtoa_r+0x594>
 8006ff8:	08011c78 	.word	0x08011c78
 8006ffc:	08011c50 	.word	0x08011c50
 8007000:	3ff00000 	.word	0x3ff00000
 8007004:	40240000 	.word	0x40240000
 8007008:	401c0000 	.word	0x401c0000
 800700c:	40140000 	.word	0x40140000
 8007010:	3fe00000 	.word	0x3fe00000
 8007014:	9d01      	ldr	r5, [sp, #4]
 8007016:	4656      	mov	r6, sl
 8007018:	465f      	mov	r7, fp
 800701a:	4642      	mov	r2, r8
 800701c:	464b      	mov	r3, r9
 800701e:	4630      	mov	r0, r6
 8007020:	4639      	mov	r1, r7
 8007022:	f7f9 fc13 	bl	800084c <__aeabi_ddiv>
 8007026:	f7f9 fd97 	bl	8000b58 <__aeabi_d2iz>
 800702a:	4682      	mov	sl, r0
 800702c:	f7f9 fa7a 	bl	8000524 <__aeabi_i2d>
 8007030:	4642      	mov	r2, r8
 8007032:	464b      	mov	r3, r9
 8007034:	f7f9 fae0 	bl	80005f8 <__aeabi_dmul>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007044:	f7f9 f920 	bl	8000288 <__aeabi_dsub>
 8007048:	f805 6b01 	strb.w	r6, [r5], #1
 800704c:	9e01      	ldr	r6, [sp, #4]
 800704e:	9f03      	ldr	r7, [sp, #12]
 8007050:	1bae      	subs	r6, r5, r6
 8007052:	42b7      	cmp	r7, r6
 8007054:	4602      	mov	r2, r0
 8007056:	460b      	mov	r3, r1
 8007058:	d135      	bne.n	80070c6 <_dtoa_r+0x6e6>
 800705a:	f7f9 f917 	bl	800028c <__adddf3>
 800705e:	4642      	mov	r2, r8
 8007060:	464b      	mov	r3, r9
 8007062:	4606      	mov	r6, r0
 8007064:	460f      	mov	r7, r1
 8007066:	f7f9 fd57 	bl	8000b18 <__aeabi_dcmpgt>
 800706a:	b9d0      	cbnz	r0, 80070a2 <_dtoa_r+0x6c2>
 800706c:	4642      	mov	r2, r8
 800706e:	464b      	mov	r3, r9
 8007070:	4630      	mov	r0, r6
 8007072:	4639      	mov	r1, r7
 8007074:	f7f9 fd28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007078:	b110      	cbz	r0, 8007080 <_dtoa_r+0x6a0>
 800707a:	f01a 0f01 	tst.w	sl, #1
 800707e:	d110      	bne.n	80070a2 <_dtoa_r+0x6c2>
 8007080:	4620      	mov	r0, r4
 8007082:	ee18 1a10 	vmov	r1, s16
 8007086:	f000 fd13 	bl	8007ab0 <_Bfree>
 800708a:	2300      	movs	r3, #0
 800708c:	9800      	ldr	r0, [sp, #0]
 800708e:	702b      	strb	r3, [r5, #0]
 8007090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007092:	3001      	adds	r0, #1
 8007094:	6018      	str	r0, [r3, #0]
 8007096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007098:	2b00      	cmp	r3, #0
 800709a:	f43f acf1 	beq.w	8006a80 <_dtoa_r+0xa0>
 800709e:	601d      	str	r5, [r3, #0]
 80070a0:	e4ee      	b.n	8006a80 <_dtoa_r+0xa0>
 80070a2:	9f00      	ldr	r7, [sp, #0]
 80070a4:	462b      	mov	r3, r5
 80070a6:	461d      	mov	r5, r3
 80070a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80070ac:	2a39      	cmp	r2, #57	; 0x39
 80070ae:	d106      	bne.n	80070be <_dtoa_r+0x6de>
 80070b0:	9a01      	ldr	r2, [sp, #4]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d1f7      	bne.n	80070a6 <_dtoa_r+0x6c6>
 80070b6:	9901      	ldr	r1, [sp, #4]
 80070b8:	2230      	movs	r2, #48	; 0x30
 80070ba:	3701      	adds	r7, #1
 80070bc:	700a      	strb	r2, [r1, #0]
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	3201      	adds	r2, #1
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	e790      	b.n	8006fe8 <_dtoa_r+0x608>
 80070c6:	4ba6      	ldr	r3, [pc, #664]	; (8007360 <_dtoa_r+0x980>)
 80070c8:	2200      	movs	r2, #0
 80070ca:	f7f9 fa95 	bl	80005f8 <__aeabi_dmul>
 80070ce:	2200      	movs	r2, #0
 80070d0:	2300      	movs	r3, #0
 80070d2:	4606      	mov	r6, r0
 80070d4:	460f      	mov	r7, r1
 80070d6:	f7f9 fcf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80070da:	2800      	cmp	r0, #0
 80070dc:	d09d      	beq.n	800701a <_dtoa_r+0x63a>
 80070de:	e7cf      	b.n	8007080 <_dtoa_r+0x6a0>
 80070e0:	9a08      	ldr	r2, [sp, #32]
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	f000 80d7 	beq.w	8007296 <_dtoa_r+0x8b6>
 80070e8:	9a06      	ldr	r2, [sp, #24]
 80070ea:	2a01      	cmp	r2, #1
 80070ec:	f300 80ba 	bgt.w	8007264 <_dtoa_r+0x884>
 80070f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070f2:	2a00      	cmp	r2, #0
 80070f4:	f000 80b2 	beq.w	800725c <_dtoa_r+0x87c>
 80070f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80070fc:	9e07      	ldr	r6, [sp, #28]
 80070fe:	9d04      	ldr	r5, [sp, #16]
 8007100:	9a04      	ldr	r2, [sp, #16]
 8007102:	441a      	add	r2, r3
 8007104:	9204      	str	r2, [sp, #16]
 8007106:	9a05      	ldr	r2, [sp, #20]
 8007108:	2101      	movs	r1, #1
 800710a:	441a      	add	r2, r3
 800710c:	4620      	mov	r0, r4
 800710e:	9205      	str	r2, [sp, #20]
 8007110:	f000 fd86 	bl	8007c20 <__i2b>
 8007114:	4607      	mov	r7, r0
 8007116:	2d00      	cmp	r5, #0
 8007118:	dd0c      	ble.n	8007134 <_dtoa_r+0x754>
 800711a:	9b05      	ldr	r3, [sp, #20]
 800711c:	2b00      	cmp	r3, #0
 800711e:	dd09      	ble.n	8007134 <_dtoa_r+0x754>
 8007120:	42ab      	cmp	r3, r5
 8007122:	9a04      	ldr	r2, [sp, #16]
 8007124:	bfa8      	it	ge
 8007126:	462b      	movge	r3, r5
 8007128:	1ad2      	subs	r2, r2, r3
 800712a:	9204      	str	r2, [sp, #16]
 800712c:	9a05      	ldr	r2, [sp, #20]
 800712e:	1aed      	subs	r5, r5, r3
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	9305      	str	r3, [sp, #20]
 8007134:	9b07      	ldr	r3, [sp, #28]
 8007136:	b31b      	cbz	r3, 8007180 <_dtoa_r+0x7a0>
 8007138:	9b08      	ldr	r3, [sp, #32]
 800713a:	2b00      	cmp	r3, #0
 800713c:	f000 80af 	beq.w	800729e <_dtoa_r+0x8be>
 8007140:	2e00      	cmp	r6, #0
 8007142:	dd13      	ble.n	800716c <_dtoa_r+0x78c>
 8007144:	4639      	mov	r1, r7
 8007146:	4632      	mov	r2, r6
 8007148:	4620      	mov	r0, r4
 800714a:	f000 fe29 	bl	8007da0 <__pow5mult>
 800714e:	ee18 2a10 	vmov	r2, s16
 8007152:	4601      	mov	r1, r0
 8007154:	4607      	mov	r7, r0
 8007156:	4620      	mov	r0, r4
 8007158:	f000 fd78 	bl	8007c4c <__multiply>
 800715c:	ee18 1a10 	vmov	r1, s16
 8007160:	4680      	mov	r8, r0
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fca4 	bl	8007ab0 <_Bfree>
 8007168:	ee08 8a10 	vmov	s16, r8
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	1b9a      	subs	r2, r3, r6
 8007170:	d006      	beq.n	8007180 <_dtoa_r+0x7a0>
 8007172:	ee18 1a10 	vmov	r1, s16
 8007176:	4620      	mov	r0, r4
 8007178:	f000 fe12 	bl	8007da0 <__pow5mult>
 800717c:	ee08 0a10 	vmov	s16, r0
 8007180:	2101      	movs	r1, #1
 8007182:	4620      	mov	r0, r4
 8007184:	f000 fd4c 	bl	8007c20 <__i2b>
 8007188:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	4606      	mov	r6, r0
 800718e:	f340 8088 	ble.w	80072a2 <_dtoa_r+0x8c2>
 8007192:	461a      	mov	r2, r3
 8007194:	4601      	mov	r1, r0
 8007196:	4620      	mov	r0, r4
 8007198:	f000 fe02 	bl	8007da0 <__pow5mult>
 800719c:	9b06      	ldr	r3, [sp, #24]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	4606      	mov	r6, r0
 80071a2:	f340 8081 	ble.w	80072a8 <_dtoa_r+0x8c8>
 80071a6:	f04f 0800 	mov.w	r8, #0
 80071aa:	6933      	ldr	r3, [r6, #16]
 80071ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80071b0:	6918      	ldr	r0, [r3, #16]
 80071b2:	f000 fce5 	bl	8007b80 <__hi0bits>
 80071b6:	f1c0 0020 	rsb	r0, r0, #32
 80071ba:	9b05      	ldr	r3, [sp, #20]
 80071bc:	4418      	add	r0, r3
 80071be:	f010 001f 	ands.w	r0, r0, #31
 80071c2:	f000 8092 	beq.w	80072ea <_dtoa_r+0x90a>
 80071c6:	f1c0 0320 	rsb	r3, r0, #32
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	f340 808a 	ble.w	80072e4 <_dtoa_r+0x904>
 80071d0:	f1c0 001c 	rsb	r0, r0, #28
 80071d4:	9b04      	ldr	r3, [sp, #16]
 80071d6:	4403      	add	r3, r0
 80071d8:	9304      	str	r3, [sp, #16]
 80071da:	9b05      	ldr	r3, [sp, #20]
 80071dc:	4403      	add	r3, r0
 80071de:	4405      	add	r5, r0
 80071e0:	9305      	str	r3, [sp, #20]
 80071e2:	9b04      	ldr	r3, [sp, #16]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dd07      	ble.n	80071f8 <_dtoa_r+0x818>
 80071e8:	ee18 1a10 	vmov	r1, s16
 80071ec:	461a      	mov	r2, r3
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 fe30 	bl	8007e54 <__lshift>
 80071f4:	ee08 0a10 	vmov	s16, r0
 80071f8:	9b05      	ldr	r3, [sp, #20]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	dd05      	ble.n	800720a <_dtoa_r+0x82a>
 80071fe:	4631      	mov	r1, r6
 8007200:	461a      	mov	r2, r3
 8007202:	4620      	mov	r0, r4
 8007204:	f000 fe26 	bl	8007e54 <__lshift>
 8007208:	4606      	mov	r6, r0
 800720a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800720c:	2b00      	cmp	r3, #0
 800720e:	d06e      	beq.n	80072ee <_dtoa_r+0x90e>
 8007210:	ee18 0a10 	vmov	r0, s16
 8007214:	4631      	mov	r1, r6
 8007216:	f000 fe8d 	bl	8007f34 <__mcmp>
 800721a:	2800      	cmp	r0, #0
 800721c:	da67      	bge.n	80072ee <_dtoa_r+0x90e>
 800721e:	9b00      	ldr	r3, [sp, #0]
 8007220:	3b01      	subs	r3, #1
 8007222:	ee18 1a10 	vmov	r1, s16
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	220a      	movs	r2, #10
 800722a:	2300      	movs	r3, #0
 800722c:	4620      	mov	r0, r4
 800722e:	f000 fc61 	bl	8007af4 <__multadd>
 8007232:	9b08      	ldr	r3, [sp, #32]
 8007234:	ee08 0a10 	vmov	s16, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 81b1 	beq.w	80075a0 <_dtoa_r+0xbc0>
 800723e:	2300      	movs	r3, #0
 8007240:	4639      	mov	r1, r7
 8007242:	220a      	movs	r2, #10
 8007244:	4620      	mov	r0, r4
 8007246:	f000 fc55 	bl	8007af4 <__multadd>
 800724a:	9b02      	ldr	r3, [sp, #8]
 800724c:	2b00      	cmp	r3, #0
 800724e:	4607      	mov	r7, r0
 8007250:	f300 808e 	bgt.w	8007370 <_dtoa_r+0x990>
 8007254:	9b06      	ldr	r3, [sp, #24]
 8007256:	2b02      	cmp	r3, #2
 8007258:	dc51      	bgt.n	80072fe <_dtoa_r+0x91e>
 800725a:	e089      	b.n	8007370 <_dtoa_r+0x990>
 800725c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800725e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007262:	e74b      	b.n	80070fc <_dtoa_r+0x71c>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	1e5e      	subs	r6, r3, #1
 8007268:	9b07      	ldr	r3, [sp, #28]
 800726a:	42b3      	cmp	r3, r6
 800726c:	bfbf      	itttt	lt
 800726e:	9b07      	ldrlt	r3, [sp, #28]
 8007270:	9607      	strlt	r6, [sp, #28]
 8007272:	1af2      	sublt	r2, r6, r3
 8007274:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007276:	bfb6      	itet	lt
 8007278:	189b      	addlt	r3, r3, r2
 800727a:	1b9e      	subge	r6, r3, r6
 800727c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800727e:	9b03      	ldr	r3, [sp, #12]
 8007280:	bfb8      	it	lt
 8007282:	2600      	movlt	r6, #0
 8007284:	2b00      	cmp	r3, #0
 8007286:	bfb7      	itett	lt
 8007288:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800728c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007290:	1a9d      	sublt	r5, r3, r2
 8007292:	2300      	movlt	r3, #0
 8007294:	e734      	b.n	8007100 <_dtoa_r+0x720>
 8007296:	9e07      	ldr	r6, [sp, #28]
 8007298:	9d04      	ldr	r5, [sp, #16]
 800729a:	9f08      	ldr	r7, [sp, #32]
 800729c:	e73b      	b.n	8007116 <_dtoa_r+0x736>
 800729e:	9a07      	ldr	r2, [sp, #28]
 80072a0:	e767      	b.n	8007172 <_dtoa_r+0x792>
 80072a2:	9b06      	ldr	r3, [sp, #24]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	dc18      	bgt.n	80072da <_dtoa_r+0x8fa>
 80072a8:	f1ba 0f00 	cmp.w	sl, #0
 80072ac:	d115      	bne.n	80072da <_dtoa_r+0x8fa>
 80072ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072b2:	b993      	cbnz	r3, 80072da <_dtoa_r+0x8fa>
 80072b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80072b8:	0d1b      	lsrs	r3, r3, #20
 80072ba:	051b      	lsls	r3, r3, #20
 80072bc:	b183      	cbz	r3, 80072e0 <_dtoa_r+0x900>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	3301      	adds	r3, #1
 80072c2:	9304      	str	r3, [sp, #16]
 80072c4:	9b05      	ldr	r3, [sp, #20]
 80072c6:	3301      	adds	r3, #1
 80072c8:	9305      	str	r3, [sp, #20]
 80072ca:	f04f 0801 	mov.w	r8, #1
 80072ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	f47f af6a 	bne.w	80071aa <_dtoa_r+0x7ca>
 80072d6:	2001      	movs	r0, #1
 80072d8:	e76f      	b.n	80071ba <_dtoa_r+0x7da>
 80072da:	f04f 0800 	mov.w	r8, #0
 80072de:	e7f6      	b.n	80072ce <_dtoa_r+0x8ee>
 80072e0:	4698      	mov	r8, r3
 80072e2:	e7f4      	b.n	80072ce <_dtoa_r+0x8ee>
 80072e4:	f43f af7d 	beq.w	80071e2 <_dtoa_r+0x802>
 80072e8:	4618      	mov	r0, r3
 80072ea:	301c      	adds	r0, #28
 80072ec:	e772      	b.n	80071d4 <_dtoa_r+0x7f4>
 80072ee:	9b03      	ldr	r3, [sp, #12]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dc37      	bgt.n	8007364 <_dtoa_r+0x984>
 80072f4:	9b06      	ldr	r3, [sp, #24]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	dd34      	ble.n	8007364 <_dtoa_r+0x984>
 80072fa:	9b03      	ldr	r3, [sp, #12]
 80072fc:	9302      	str	r3, [sp, #8]
 80072fe:	9b02      	ldr	r3, [sp, #8]
 8007300:	b96b      	cbnz	r3, 800731e <_dtoa_r+0x93e>
 8007302:	4631      	mov	r1, r6
 8007304:	2205      	movs	r2, #5
 8007306:	4620      	mov	r0, r4
 8007308:	f000 fbf4 	bl	8007af4 <__multadd>
 800730c:	4601      	mov	r1, r0
 800730e:	4606      	mov	r6, r0
 8007310:	ee18 0a10 	vmov	r0, s16
 8007314:	f000 fe0e 	bl	8007f34 <__mcmp>
 8007318:	2800      	cmp	r0, #0
 800731a:	f73f adbb 	bgt.w	8006e94 <_dtoa_r+0x4b4>
 800731e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007320:	9d01      	ldr	r5, [sp, #4]
 8007322:	43db      	mvns	r3, r3
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	f04f 0800 	mov.w	r8, #0
 800732a:	4631      	mov	r1, r6
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fbbf 	bl	8007ab0 <_Bfree>
 8007332:	2f00      	cmp	r7, #0
 8007334:	f43f aea4 	beq.w	8007080 <_dtoa_r+0x6a0>
 8007338:	f1b8 0f00 	cmp.w	r8, #0
 800733c:	d005      	beq.n	800734a <_dtoa_r+0x96a>
 800733e:	45b8      	cmp	r8, r7
 8007340:	d003      	beq.n	800734a <_dtoa_r+0x96a>
 8007342:	4641      	mov	r1, r8
 8007344:	4620      	mov	r0, r4
 8007346:	f000 fbb3 	bl	8007ab0 <_Bfree>
 800734a:	4639      	mov	r1, r7
 800734c:	4620      	mov	r0, r4
 800734e:	f000 fbaf 	bl	8007ab0 <_Bfree>
 8007352:	e695      	b.n	8007080 <_dtoa_r+0x6a0>
 8007354:	2600      	movs	r6, #0
 8007356:	4637      	mov	r7, r6
 8007358:	e7e1      	b.n	800731e <_dtoa_r+0x93e>
 800735a:	9700      	str	r7, [sp, #0]
 800735c:	4637      	mov	r7, r6
 800735e:	e599      	b.n	8006e94 <_dtoa_r+0x4b4>
 8007360:	40240000 	.word	0x40240000
 8007364:	9b08      	ldr	r3, [sp, #32]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80ca 	beq.w	8007500 <_dtoa_r+0xb20>
 800736c:	9b03      	ldr	r3, [sp, #12]
 800736e:	9302      	str	r3, [sp, #8]
 8007370:	2d00      	cmp	r5, #0
 8007372:	dd05      	ble.n	8007380 <_dtoa_r+0x9a0>
 8007374:	4639      	mov	r1, r7
 8007376:	462a      	mov	r2, r5
 8007378:	4620      	mov	r0, r4
 800737a:	f000 fd6b 	bl	8007e54 <__lshift>
 800737e:	4607      	mov	r7, r0
 8007380:	f1b8 0f00 	cmp.w	r8, #0
 8007384:	d05b      	beq.n	800743e <_dtoa_r+0xa5e>
 8007386:	6879      	ldr	r1, [r7, #4]
 8007388:	4620      	mov	r0, r4
 800738a:	f000 fb51 	bl	8007a30 <_Balloc>
 800738e:	4605      	mov	r5, r0
 8007390:	b928      	cbnz	r0, 800739e <_dtoa_r+0x9be>
 8007392:	4b87      	ldr	r3, [pc, #540]	; (80075b0 <_dtoa_r+0xbd0>)
 8007394:	4602      	mov	r2, r0
 8007396:	f240 21ea 	movw	r1, #746	; 0x2ea
 800739a:	f7ff bb3b 	b.w	8006a14 <_dtoa_r+0x34>
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	3202      	adds	r2, #2
 80073a2:	0092      	lsls	r2, r2, #2
 80073a4:	f107 010c 	add.w	r1, r7, #12
 80073a8:	300c      	adds	r0, #12
 80073aa:	f000 fb33 	bl	8007a14 <memcpy>
 80073ae:	2201      	movs	r2, #1
 80073b0:	4629      	mov	r1, r5
 80073b2:	4620      	mov	r0, r4
 80073b4:	f000 fd4e 	bl	8007e54 <__lshift>
 80073b8:	9b01      	ldr	r3, [sp, #4]
 80073ba:	f103 0901 	add.w	r9, r3, #1
 80073be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	9305      	str	r3, [sp, #20]
 80073c6:	f00a 0301 	and.w	r3, sl, #1
 80073ca:	46b8      	mov	r8, r7
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	4607      	mov	r7, r0
 80073d0:	4631      	mov	r1, r6
 80073d2:	ee18 0a10 	vmov	r0, s16
 80073d6:	f7ff fa77 	bl	80068c8 <quorem>
 80073da:	4641      	mov	r1, r8
 80073dc:	9002      	str	r0, [sp, #8]
 80073de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80073e2:	ee18 0a10 	vmov	r0, s16
 80073e6:	f000 fda5 	bl	8007f34 <__mcmp>
 80073ea:	463a      	mov	r2, r7
 80073ec:	9003      	str	r0, [sp, #12]
 80073ee:	4631      	mov	r1, r6
 80073f0:	4620      	mov	r0, r4
 80073f2:	f000 fdbb 	bl	8007f6c <__mdiff>
 80073f6:	68c2      	ldr	r2, [r0, #12]
 80073f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80073fc:	4605      	mov	r5, r0
 80073fe:	bb02      	cbnz	r2, 8007442 <_dtoa_r+0xa62>
 8007400:	4601      	mov	r1, r0
 8007402:	ee18 0a10 	vmov	r0, s16
 8007406:	f000 fd95 	bl	8007f34 <__mcmp>
 800740a:	4602      	mov	r2, r0
 800740c:	4629      	mov	r1, r5
 800740e:	4620      	mov	r0, r4
 8007410:	9207      	str	r2, [sp, #28]
 8007412:	f000 fb4d 	bl	8007ab0 <_Bfree>
 8007416:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800741a:	ea43 0102 	orr.w	r1, r3, r2
 800741e:	9b04      	ldr	r3, [sp, #16]
 8007420:	430b      	orrs	r3, r1
 8007422:	464d      	mov	r5, r9
 8007424:	d10f      	bne.n	8007446 <_dtoa_r+0xa66>
 8007426:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800742a:	d02a      	beq.n	8007482 <_dtoa_r+0xaa2>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	dd02      	ble.n	8007438 <_dtoa_r+0xa58>
 8007432:	9b02      	ldr	r3, [sp, #8]
 8007434:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007438:	f88b a000 	strb.w	sl, [fp]
 800743c:	e775      	b.n	800732a <_dtoa_r+0x94a>
 800743e:	4638      	mov	r0, r7
 8007440:	e7ba      	b.n	80073b8 <_dtoa_r+0x9d8>
 8007442:	2201      	movs	r2, #1
 8007444:	e7e2      	b.n	800740c <_dtoa_r+0xa2c>
 8007446:	9b03      	ldr	r3, [sp, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	db04      	blt.n	8007456 <_dtoa_r+0xa76>
 800744c:	9906      	ldr	r1, [sp, #24]
 800744e:	430b      	orrs	r3, r1
 8007450:	9904      	ldr	r1, [sp, #16]
 8007452:	430b      	orrs	r3, r1
 8007454:	d122      	bne.n	800749c <_dtoa_r+0xabc>
 8007456:	2a00      	cmp	r2, #0
 8007458:	ddee      	ble.n	8007438 <_dtoa_r+0xa58>
 800745a:	ee18 1a10 	vmov	r1, s16
 800745e:	2201      	movs	r2, #1
 8007460:	4620      	mov	r0, r4
 8007462:	f000 fcf7 	bl	8007e54 <__lshift>
 8007466:	4631      	mov	r1, r6
 8007468:	ee08 0a10 	vmov	s16, r0
 800746c:	f000 fd62 	bl	8007f34 <__mcmp>
 8007470:	2800      	cmp	r0, #0
 8007472:	dc03      	bgt.n	800747c <_dtoa_r+0xa9c>
 8007474:	d1e0      	bne.n	8007438 <_dtoa_r+0xa58>
 8007476:	f01a 0f01 	tst.w	sl, #1
 800747a:	d0dd      	beq.n	8007438 <_dtoa_r+0xa58>
 800747c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007480:	d1d7      	bne.n	8007432 <_dtoa_r+0xa52>
 8007482:	2339      	movs	r3, #57	; 0x39
 8007484:	f88b 3000 	strb.w	r3, [fp]
 8007488:	462b      	mov	r3, r5
 800748a:	461d      	mov	r5, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007492:	2a39      	cmp	r2, #57	; 0x39
 8007494:	d071      	beq.n	800757a <_dtoa_r+0xb9a>
 8007496:	3201      	adds	r2, #1
 8007498:	701a      	strb	r2, [r3, #0]
 800749a:	e746      	b.n	800732a <_dtoa_r+0x94a>
 800749c:	2a00      	cmp	r2, #0
 800749e:	dd07      	ble.n	80074b0 <_dtoa_r+0xad0>
 80074a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80074a4:	d0ed      	beq.n	8007482 <_dtoa_r+0xaa2>
 80074a6:	f10a 0301 	add.w	r3, sl, #1
 80074aa:	f88b 3000 	strb.w	r3, [fp]
 80074ae:	e73c      	b.n	800732a <_dtoa_r+0x94a>
 80074b0:	9b05      	ldr	r3, [sp, #20]
 80074b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80074b6:	4599      	cmp	r9, r3
 80074b8:	d047      	beq.n	800754a <_dtoa_r+0xb6a>
 80074ba:	ee18 1a10 	vmov	r1, s16
 80074be:	2300      	movs	r3, #0
 80074c0:	220a      	movs	r2, #10
 80074c2:	4620      	mov	r0, r4
 80074c4:	f000 fb16 	bl	8007af4 <__multadd>
 80074c8:	45b8      	cmp	r8, r7
 80074ca:	ee08 0a10 	vmov	s16, r0
 80074ce:	f04f 0300 	mov.w	r3, #0
 80074d2:	f04f 020a 	mov.w	r2, #10
 80074d6:	4641      	mov	r1, r8
 80074d8:	4620      	mov	r0, r4
 80074da:	d106      	bne.n	80074ea <_dtoa_r+0xb0a>
 80074dc:	f000 fb0a 	bl	8007af4 <__multadd>
 80074e0:	4680      	mov	r8, r0
 80074e2:	4607      	mov	r7, r0
 80074e4:	f109 0901 	add.w	r9, r9, #1
 80074e8:	e772      	b.n	80073d0 <_dtoa_r+0x9f0>
 80074ea:	f000 fb03 	bl	8007af4 <__multadd>
 80074ee:	4639      	mov	r1, r7
 80074f0:	4680      	mov	r8, r0
 80074f2:	2300      	movs	r3, #0
 80074f4:	220a      	movs	r2, #10
 80074f6:	4620      	mov	r0, r4
 80074f8:	f000 fafc 	bl	8007af4 <__multadd>
 80074fc:	4607      	mov	r7, r0
 80074fe:	e7f1      	b.n	80074e4 <_dtoa_r+0xb04>
 8007500:	9b03      	ldr	r3, [sp, #12]
 8007502:	9302      	str	r3, [sp, #8]
 8007504:	9d01      	ldr	r5, [sp, #4]
 8007506:	ee18 0a10 	vmov	r0, s16
 800750a:	4631      	mov	r1, r6
 800750c:	f7ff f9dc 	bl	80068c8 <quorem>
 8007510:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007514:	9b01      	ldr	r3, [sp, #4]
 8007516:	f805 ab01 	strb.w	sl, [r5], #1
 800751a:	1aea      	subs	r2, r5, r3
 800751c:	9b02      	ldr	r3, [sp, #8]
 800751e:	4293      	cmp	r3, r2
 8007520:	dd09      	ble.n	8007536 <_dtoa_r+0xb56>
 8007522:	ee18 1a10 	vmov	r1, s16
 8007526:	2300      	movs	r3, #0
 8007528:	220a      	movs	r2, #10
 800752a:	4620      	mov	r0, r4
 800752c:	f000 fae2 	bl	8007af4 <__multadd>
 8007530:	ee08 0a10 	vmov	s16, r0
 8007534:	e7e7      	b.n	8007506 <_dtoa_r+0xb26>
 8007536:	9b02      	ldr	r3, [sp, #8]
 8007538:	2b00      	cmp	r3, #0
 800753a:	bfc8      	it	gt
 800753c:	461d      	movgt	r5, r3
 800753e:	9b01      	ldr	r3, [sp, #4]
 8007540:	bfd8      	it	le
 8007542:	2501      	movle	r5, #1
 8007544:	441d      	add	r5, r3
 8007546:	f04f 0800 	mov.w	r8, #0
 800754a:	ee18 1a10 	vmov	r1, s16
 800754e:	2201      	movs	r2, #1
 8007550:	4620      	mov	r0, r4
 8007552:	f000 fc7f 	bl	8007e54 <__lshift>
 8007556:	4631      	mov	r1, r6
 8007558:	ee08 0a10 	vmov	s16, r0
 800755c:	f000 fcea 	bl	8007f34 <__mcmp>
 8007560:	2800      	cmp	r0, #0
 8007562:	dc91      	bgt.n	8007488 <_dtoa_r+0xaa8>
 8007564:	d102      	bne.n	800756c <_dtoa_r+0xb8c>
 8007566:	f01a 0f01 	tst.w	sl, #1
 800756a:	d18d      	bne.n	8007488 <_dtoa_r+0xaa8>
 800756c:	462b      	mov	r3, r5
 800756e:	461d      	mov	r5, r3
 8007570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007574:	2a30      	cmp	r2, #48	; 0x30
 8007576:	d0fa      	beq.n	800756e <_dtoa_r+0xb8e>
 8007578:	e6d7      	b.n	800732a <_dtoa_r+0x94a>
 800757a:	9a01      	ldr	r2, [sp, #4]
 800757c:	429a      	cmp	r2, r3
 800757e:	d184      	bne.n	800748a <_dtoa_r+0xaaa>
 8007580:	9b00      	ldr	r3, [sp, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	2331      	movs	r3, #49	; 0x31
 8007588:	7013      	strb	r3, [r2, #0]
 800758a:	e6ce      	b.n	800732a <_dtoa_r+0x94a>
 800758c:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <_dtoa_r+0xbd4>)
 800758e:	f7ff ba95 	b.w	8006abc <_dtoa_r+0xdc>
 8007592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007594:	2b00      	cmp	r3, #0
 8007596:	f47f aa6e 	bne.w	8006a76 <_dtoa_r+0x96>
 800759a:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <_dtoa_r+0xbd8>)
 800759c:	f7ff ba8e 	b.w	8006abc <_dtoa_r+0xdc>
 80075a0:	9b02      	ldr	r3, [sp, #8]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dcae      	bgt.n	8007504 <_dtoa_r+0xb24>
 80075a6:	9b06      	ldr	r3, [sp, #24]
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	f73f aea8 	bgt.w	80072fe <_dtoa_r+0x91e>
 80075ae:	e7a9      	b.n	8007504 <_dtoa_r+0xb24>
 80075b0:	08011b7f 	.word	0x08011b7f
 80075b4:	08011adc 	.word	0x08011adc
 80075b8:	08011b00 	.word	0x08011b00

080075bc <__sflush_r>:
 80075bc:	898a      	ldrh	r2, [r1, #12]
 80075be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c2:	4605      	mov	r5, r0
 80075c4:	0710      	lsls	r0, r2, #28
 80075c6:	460c      	mov	r4, r1
 80075c8:	d458      	bmi.n	800767c <__sflush_r+0xc0>
 80075ca:	684b      	ldr	r3, [r1, #4]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	dc05      	bgt.n	80075dc <__sflush_r+0x20>
 80075d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	dc02      	bgt.n	80075dc <__sflush_r+0x20>
 80075d6:	2000      	movs	r0, #0
 80075d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80075de:	2e00      	cmp	r6, #0
 80075e0:	d0f9      	beq.n	80075d6 <__sflush_r+0x1a>
 80075e2:	2300      	movs	r3, #0
 80075e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80075e8:	682f      	ldr	r7, [r5, #0]
 80075ea:	602b      	str	r3, [r5, #0]
 80075ec:	d032      	beq.n	8007654 <__sflush_r+0x98>
 80075ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	075a      	lsls	r2, r3, #29
 80075f4:	d505      	bpl.n	8007602 <__sflush_r+0x46>
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	1ac0      	subs	r0, r0, r3
 80075fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80075fc:	b10b      	cbz	r3, 8007602 <__sflush_r+0x46>
 80075fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007600:	1ac0      	subs	r0, r0, r3
 8007602:	2300      	movs	r3, #0
 8007604:	4602      	mov	r2, r0
 8007606:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007608:	6a21      	ldr	r1, [r4, #32]
 800760a:	4628      	mov	r0, r5
 800760c:	47b0      	blx	r6
 800760e:	1c43      	adds	r3, r0, #1
 8007610:	89a3      	ldrh	r3, [r4, #12]
 8007612:	d106      	bne.n	8007622 <__sflush_r+0x66>
 8007614:	6829      	ldr	r1, [r5, #0]
 8007616:	291d      	cmp	r1, #29
 8007618:	d82c      	bhi.n	8007674 <__sflush_r+0xb8>
 800761a:	4a2a      	ldr	r2, [pc, #168]	; (80076c4 <__sflush_r+0x108>)
 800761c:	40ca      	lsrs	r2, r1
 800761e:	07d6      	lsls	r6, r2, #31
 8007620:	d528      	bpl.n	8007674 <__sflush_r+0xb8>
 8007622:	2200      	movs	r2, #0
 8007624:	6062      	str	r2, [r4, #4]
 8007626:	04d9      	lsls	r1, r3, #19
 8007628:	6922      	ldr	r2, [r4, #16]
 800762a:	6022      	str	r2, [r4, #0]
 800762c:	d504      	bpl.n	8007638 <__sflush_r+0x7c>
 800762e:	1c42      	adds	r2, r0, #1
 8007630:	d101      	bne.n	8007636 <__sflush_r+0x7a>
 8007632:	682b      	ldr	r3, [r5, #0]
 8007634:	b903      	cbnz	r3, 8007638 <__sflush_r+0x7c>
 8007636:	6560      	str	r0, [r4, #84]	; 0x54
 8007638:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800763a:	602f      	str	r7, [r5, #0]
 800763c:	2900      	cmp	r1, #0
 800763e:	d0ca      	beq.n	80075d6 <__sflush_r+0x1a>
 8007640:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007644:	4299      	cmp	r1, r3
 8007646:	d002      	beq.n	800764e <__sflush_r+0x92>
 8007648:	4628      	mov	r0, r5
 800764a:	f000 fd8b 	bl	8008164 <_free_r>
 800764e:	2000      	movs	r0, #0
 8007650:	6360      	str	r0, [r4, #52]	; 0x34
 8007652:	e7c1      	b.n	80075d8 <__sflush_r+0x1c>
 8007654:	6a21      	ldr	r1, [r4, #32]
 8007656:	2301      	movs	r3, #1
 8007658:	4628      	mov	r0, r5
 800765a:	47b0      	blx	r6
 800765c:	1c41      	adds	r1, r0, #1
 800765e:	d1c7      	bne.n	80075f0 <__sflush_r+0x34>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0c4      	beq.n	80075f0 <__sflush_r+0x34>
 8007666:	2b1d      	cmp	r3, #29
 8007668:	d001      	beq.n	800766e <__sflush_r+0xb2>
 800766a:	2b16      	cmp	r3, #22
 800766c:	d101      	bne.n	8007672 <__sflush_r+0xb6>
 800766e:	602f      	str	r7, [r5, #0]
 8007670:	e7b1      	b.n	80075d6 <__sflush_r+0x1a>
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	e7ad      	b.n	80075d8 <__sflush_r+0x1c>
 800767c:	690f      	ldr	r7, [r1, #16]
 800767e:	2f00      	cmp	r7, #0
 8007680:	d0a9      	beq.n	80075d6 <__sflush_r+0x1a>
 8007682:	0793      	lsls	r3, r2, #30
 8007684:	680e      	ldr	r6, [r1, #0]
 8007686:	bf08      	it	eq
 8007688:	694b      	ldreq	r3, [r1, #20]
 800768a:	600f      	str	r7, [r1, #0]
 800768c:	bf18      	it	ne
 800768e:	2300      	movne	r3, #0
 8007690:	eba6 0807 	sub.w	r8, r6, r7
 8007694:	608b      	str	r3, [r1, #8]
 8007696:	f1b8 0f00 	cmp.w	r8, #0
 800769a:	dd9c      	ble.n	80075d6 <__sflush_r+0x1a>
 800769c:	6a21      	ldr	r1, [r4, #32]
 800769e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076a0:	4643      	mov	r3, r8
 80076a2:	463a      	mov	r2, r7
 80076a4:	4628      	mov	r0, r5
 80076a6:	47b0      	blx	r6
 80076a8:	2800      	cmp	r0, #0
 80076aa:	dc06      	bgt.n	80076ba <__sflush_r+0xfe>
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b2:	81a3      	strh	r3, [r4, #12]
 80076b4:	f04f 30ff 	mov.w	r0, #4294967295
 80076b8:	e78e      	b.n	80075d8 <__sflush_r+0x1c>
 80076ba:	4407      	add	r7, r0
 80076bc:	eba8 0800 	sub.w	r8, r8, r0
 80076c0:	e7e9      	b.n	8007696 <__sflush_r+0xda>
 80076c2:	bf00      	nop
 80076c4:	20400001 	.word	0x20400001

080076c8 <_fflush_r>:
 80076c8:	b538      	push	{r3, r4, r5, lr}
 80076ca:	690b      	ldr	r3, [r1, #16]
 80076cc:	4605      	mov	r5, r0
 80076ce:	460c      	mov	r4, r1
 80076d0:	b913      	cbnz	r3, 80076d8 <_fflush_r+0x10>
 80076d2:	2500      	movs	r5, #0
 80076d4:	4628      	mov	r0, r5
 80076d6:	bd38      	pop	{r3, r4, r5, pc}
 80076d8:	b118      	cbz	r0, 80076e2 <_fflush_r+0x1a>
 80076da:	6983      	ldr	r3, [r0, #24]
 80076dc:	b90b      	cbnz	r3, 80076e2 <_fflush_r+0x1a>
 80076de:	f000 f887 	bl	80077f0 <__sinit>
 80076e2:	4b14      	ldr	r3, [pc, #80]	; (8007734 <_fflush_r+0x6c>)
 80076e4:	429c      	cmp	r4, r3
 80076e6:	d11b      	bne.n	8007720 <_fflush_r+0x58>
 80076e8:	686c      	ldr	r4, [r5, #4]
 80076ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d0ef      	beq.n	80076d2 <_fflush_r+0xa>
 80076f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80076f4:	07d0      	lsls	r0, r2, #31
 80076f6:	d404      	bmi.n	8007702 <_fflush_r+0x3a>
 80076f8:	0599      	lsls	r1, r3, #22
 80076fa:	d402      	bmi.n	8007702 <_fflush_r+0x3a>
 80076fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80076fe:	f000 f91a 	bl	8007936 <__retarget_lock_acquire_recursive>
 8007702:	4628      	mov	r0, r5
 8007704:	4621      	mov	r1, r4
 8007706:	f7ff ff59 	bl	80075bc <__sflush_r>
 800770a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800770c:	07da      	lsls	r2, r3, #31
 800770e:	4605      	mov	r5, r0
 8007710:	d4e0      	bmi.n	80076d4 <_fflush_r+0xc>
 8007712:	89a3      	ldrh	r3, [r4, #12]
 8007714:	059b      	lsls	r3, r3, #22
 8007716:	d4dd      	bmi.n	80076d4 <_fflush_r+0xc>
 8007718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800771a:	f000 f90d 	bl	8007938 <__retarget_lock_release_recursive>
 800771e:	e7d9      	b.n	80076d4 <_fflush_r+0xc>
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <_fflush_r+0x70>)
 8007722:	429c      	cmp	r4, r3
 8007724:	d101      	bne.n	800772a <_fflush_r+0x62>
 8007726:	68ac      	ldr	r4, [r5, #8]
 8007728:	e7df      	b.n	80076ea <_fflush_r+0x22>
 800772a:	4b04      	ldr	r3, [pc, #16]	; (800773c <_fflush_r+0x74>)
 800772c:	429c      	cmp	r4, r3
 800772e:	bf08      	it	eq
 8007730:	68ec      	ldreq	r4, [r5, #12]
 8007732:	e7da      	b.n	80076ea <_fflush_r+0x22>
 8007734:	08011bb0 	.word	0x08011bb0
 8007738:	08011bd0 	.word	0x08011bd0
 800773c:	08011b90 	.word	0x08011b90

08007740 <std>:
 8007740:	2300      	movs	r3, #0
 8007742:	b510      	push	{r4, lr}
 8007744:	4604      	mov	r4, r0
 8007746:	e9c0 3300 	strd	r3, r3, [r0]
 800774a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800774e:	6083      	str	r3, [r0, #8]
 8007750:	8181      	strh	r1, [r0, #12]
 8007752:	6643      	str	r3, [r0, #100]	; 0x64
 8007754:	81c2      	strh	r2, [r0, #14]
 8007756:	6183      	str	r3, [r0, #24]
 8007758:	4619      	mov	r1, r3
 800775a:	2208      	movs	r2, #8
 800775c:	305c      	adds	r0, #92	; 0x5c
 800775e:	f7fe fadd 	bl	8005d1c <memset>
 8007762:	4b05      	ldr	r3, [pc, #20]	; (8007778 <std+0x38>)
 8007764:	6263      	str	r3, [r4, #36]	; 0x24
 8007766:	4b05      	ldr	r3, [pc, #20]	; (800777c <std+0x3c>)
 8007768:	62a3      	str	r3, [r4, #40]	; 0x28
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <std+0x40>)
 800776c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <std+0x44>)
 8007770:	6224      	str	r4, [r4, #32]
 8007772:	6323      	str	r3, [r4, #48]	; 0x30
 8007774:	bd10      	pop	{r4, pc}
 8007776:	bf00      	nop
 8007778:	08008689 	.word	0x08008689
 800777c:	080086ab 	.word	0x080086ab
 8007780:	080086e3 	.word	0x080086e3
 8007784:	08008707 	.word	0x08008707

08007788 <_cleanup_r>:
 8007788:	4901      	ldr	r1, [pc, #4]	; (8007790 <_cleanup_r+0x8>)
 800778a:	f000 b8af 	b.w	80078ec <_fwalk_reent>
 800778e:	bf00      	nop
 8007790:	080076c9 	.word	0x080076c9

08007794 <__sfmoreglue>:
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	2268      	movs	r2, #104	; 0x68
 8007798:	1e4d      	subs	r5, r1, #1
 800779a:	4355      	muls	r5, r2
 800779c:	460e      	mov	r6, r1
 800779e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80077a2:	f000 fd4b 	bl	800823c <_malloc_r>
 80077a6:	4604      	mov	r4, r0
 80077a8:	b140      	cbz	r0, 80077bc <__sfmoreglue+0x28>
 80077aa:	2100      	movs	r1, #0
 80077ac:	e9c0 1600 	strd	r1, r6, [r0]
 80077b0:	300c      	adds	r0, #12
 80077b2:	60a0      	str	r0, [r4, #8]
 80077b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80077b8:	f7fe fab0 	bl	8005d1c <memset>
 80077bc:	4620      	mov	r0, r4
 80077be:	bd70      	pop	{r4, r5, r6, pc}

080077c0 <__sfp_lock_acquire>:
 80077c0:	4801      	ldr	r0, [pc, #4]	; (80077c8 <__sfp_lock_acquire+0x8>)
 80077c2:	f000 b8b8 	b.w	8007936 <__retarget_lock_acquire_recursive>
 80077c6:	bf00      	nop
 80077c8:	20002b19 	.word	0x20002b19

080077cc <__sfp_lock_release>:
 80077cc:	4801      	ldr	r0, [pc, #4]	; (80077d4 <__sfp_lock_release+0x8>)
 80077ce:	f000 b8b3 	b.w	8007938 <__retarget_lock_release_recursive>
 80077d2:	bf00      	nop
 80077d4:	20002b19 	.word	0x20002b19

080077d8 <__sinit_lock_acquire>:
 80077d8:	4801      	ldr	r0, [pc, #4]	; (80077e0 <__sinit_lock_acquire+0x8>)
 80077da:	f000 b8ac 	b.w	8007936 <__retarget_lock_acquire_recursive>
 80077de:	bf00      	nop
 80077e0:	20002b1a 	.word	0x20002b1a

080077e4 <__sinit_lock_release>:
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <__sinit_lock_release+0x8>)
 80077e6:	f000 b8a7 	b.w	8007938 <__retarget_lock_release_recursive>
 80077ea:	bf00      	nop
 80077ec:	20002b1a 	.word	0x20002b1a

080077f0 <__sinit>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4604      	mov	r4, r0
 80077f4:	f7ff fff0 	bl	80077d8 <__sinit_lock_acquire>
 80077f8:	69a3      	ldr	r3, [r4, #24]
 80077fa:	b11b      	cbz	r3, 8007804 <__sinit+0x14>
 80077fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007800:	f7ff bff0 	b.w	80077e4 <__sinit_lock_release>
 8007804:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007808:	6523      	str	r3, [r4, #80]	; 0x50
 800780a:	4b13      	ldr	r3, [pc, #76]	; (8007858 <__sinit+0x68>)
 800780c:	4a13      	ldr	r2, [pc, #76]	; (800785c <__sinit+0x6c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	62a2      	str	r2, [r4, #40]	; 0x28
 8007812:	42a3      	cmp	r3, r4
 8007814:	bf04      	itt	eq
 8007816:	2301      	moveq	r3, #1
 8007818:	61a3      	streq	r3, [r4, #24]
 800781a:	4620      	mov	r0, r4
 800781c:	f000 f820 	bl	8007860 <__sfp>
 8007820:	6060      	str	r0, [r4, #4]
 8007822:	4620      	mov	r0, r4
 8007824:	f000 f81c 	bl	8007860 <__sfp>
 8007828:	60a0      	str	r0, [r4, #8]
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f818 	bl	8007860 <__sfp>
 8007830:	2200      	movs	r2, #0
 8007832:	60e0      	str	r0, [r4, #12]
 8007834:	2104      	movs	r1, #4
 8007836:	6860      	ldr	r0, [r4, #4]
 8007838:	f7ff ff82 	bl	8007740 <std>
 800783c:	68a0      	ldr	r0, [r4, #8]
 800783e:	2201      	movs	r2, #1
 8007840:	2109      	movs	r1, #9
 8007842:	f7ff ff7d 	bl	8007740 <std>
 8007846:	68e0      	ldr	r0, [r4, #12]
 8007848:	2202      	movs	r2, #2
 800784a:	2112      	movs	r1, #18
 800784c:	f7ff ff78 	bl	8007740 <std>
 8007850:	2301      	movs	r3, #1
 8007852:	61a3      	str	r3, [r4, #24]
 8007854:	e7d2      	b.n	80077fc <__sinit+0xc>
 8007856:	bf00      	nop
 8007858:	08011ac8 	.word	0x08011ac8
 800785c:	08007789 	.word	0x08007789

08007860 <__sfp>:
 8007860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007862:	4607      	mov	r7, r0
 8007864:	f7ff ffac 	bl	80077c0 <__sfp_lock_acquire>
 8007868:	4b1e      	ldr	r3, [pc, #120]	; (80078e4 <__sfp+0x84>)
 800786a:	681e      	ldr	r6, [r3, #0]
 800786c:	69b3      	ldr	r3, [r6, #24]
 800786e:	b913      	cbnz	r3, 8007876 <__sfp+0x16>
 8007870:	4630      	mov	r0, r6
 8007872:	f7ff ffbd 	bl	80077f0 <__sinit>
 8007876:	3648      	adds	r6, #72	; 0x48
 8007878:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800787c:	3b01      	subs	r3, #1
 800787e:	d503      	bpl.n	8007888 <__sfp+0x28>
 8007880:	6833      	ldr	r3, [r6, #0]
 8007882:	b30b      	cbz	r3, 80078c8 <__sfp+0x68>
 8007884:	6836      	ldr	r6, [r6, #0]
 8007886:	e7f7      	b.n	8007878 <__sfp+0x18>
 8007888:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800788c:	b9d5      	cbnz	r5, 80078c4 <__sfp+0x64>
 800788e:	4b16      	ldr	r3, [pc, #88]	; (80078e8 <__sfp+0x88>)
 8007890:	60e3      	str	r3, [r4, #12]
 8007892:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007896:	6665      	str	r5, [r4, #100]	; 0x64
 8007898:	f000 f84c 	bl	8007934 <__retarget_lock_init_recursive>
 800789c:	f7ff ff96 	bl	80077cc <__sfp_lock_release>
 80078a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80078a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80078a8:	6025      	str	r5, [r4, #0]
 80078aa:	61a5      	str	r5, [r4, #24]
 80078ac:	2208      	movs	r2, #8
 80078ae:	4629      	mov	r1, r5
 80078b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80078b4:	f7fe fa32 	bl	8005d1c <memset>
 80078b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80078bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80078c0:	4620      	mov	r0, r4
 80078c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078c4:	3468      	adds	r4, #104	; 0x68
 80078c6:	e7d9      	b.n	800787c <__sfp+0x1c>
 80078c8:	2104      	movs	r1, #4
 80078ca:	4638      	mov	r0, r7
 80078cc:	f7ff ff62 	bl	8007794 <__sfmoreglue>
 80078d0:	4604      	mov	r4, r0
 80078d2:	6030      	str	r0, [r6, #0]
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d1d5      	bne.n	8007884 <__sfp+0x24>
 80078d8:	f7ff ff78 	bl	80077cc <__sfp_lock_release>
 80078dc:	230c      	movs	r3, #12
 80078de:	603b      	str	r3, [r7, #0]
 80078e0:	e7ee      	b.n	80078c0 <__sfp+0x60>
 80078e2:	bf00      	nop
 80078e4:	08011ac8 	.word	0x08011ac8
 80078e8:	ffff0001 	.word	0xffff0001

080078ec <_fwalk_reent>:
 80078ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f0:	4606      	mov	r6, r0
 80078f2:	4688      	mov	r8, r1
 80078f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80078f8:	2700      	movs	r7, #0
 80078fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007902:	d505      	bpl.n	8007910 <_fwalk_reent+0x24>
 8007904:	6824      	ldr	r4, [r4, #0]
 8007906:	2c00      	cmp	r4, #0
 8007908:	d1f7      	bne.n	80078fa <_fwalk_reent+0xe>
 800790a:	4638      	mov	r0, r7
 800790c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007910:	89ab      	ldrh	r3, [r5, #12]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d907      	bls.n	8007926 <_fwalk_reent+0x3a>
 8007916:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800791a:	3301      	adds	r3, #1
 800791c:	d003      	beq.n	8007926 <_fwalk_reent+0x3a>
 800791e:	4629      	mov	r1, r5
 8007920:	4630      	mov	r0, r6
 8007922:	47c0      	blx	r8
 8007924:	4307      	orrs	r7, r0
 8007926:	3568      	adds	r5, #104	; 0x68
 8007928:	e7e9      	b.n	80078fe <_fwalk_reent+0x12>
	...

0800792c <_localeconv_r>:
 800792c:	4800      	ldr	r0, [pc, #0]	; (8007930 <_localeconv_r+0x4>)
 800792e:	4770      	bx	lr
 8007930:	20000160 	.word	0x20000160

08007934 <__retarget_lock_init_recursive>:
 8007934:	4770      	bx	lr

08007936 <__retarget_lock_acquire_recursive>:
 8007936:	4770      	bx	lr

08007938 <__retarget_lock_release_recursive>:
 8007938:	4770      	bx	lr

0800793a <__swhatbuf_r>:
 800793a:	b570      	push	{r4, r5, r6, lr}
 800793c:	460e      	mov	r6, r1
 800793e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007942:	2900      	cmp	r1, #0
 8007944:	b096      	sub	sp, #88	; 0x58
 8007946:	4614      	mov	r4, r2
 8007948:	461d      	mov	r5, r3
 800794a:	da08      	bge.n	800795e <__swhatbuf_r+0x24>
 800794c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	602a      	str	r2, [r5, #0]
 8007954:	061a      	lsls	r2, r3, #24
 8007956:	d410      	bmi.n	800797a <__swhatbuf_r+0x40>
 8007958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800795c:	e00e      	b.n	800797c <__swhatbuf_r+0x42>
 800795e:	466a      	mov	r2, sp
 8007960:	f000 ff28 	bl	80087b4 <_fstat_r>
 8007964:	2800      	cmp	r0, #0
 8007966:	dbf1      	blt.n	800794c <__swhatbuf_r+0x12>
 8007968:	9a01      	ldr	r2, [sp, #4]
 800796a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800796e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007972:	425a      	negs	r2, r3
 8007974:	415a      	adcs	r2, r3
 8007976:	602a      	str	r2, [r5, #0]
 8007978:	e7ee      	b.n	8007958 <__swhatbuf_r+0x1e>
 800797a:	2340      	movs	r3, #64	; 0x40
 800797c:	2000      	movs	r0, #0
 800797e:	6023      	str	r3, [r4, #0]
 8007980:	b016      	add	sp, #88	; 0x58
 8007982:	bd70      	pop	{r4, r5, r6, pc}

08007984 <__smakebuf_r>:
 8007984:	898b      	ldrh	r3, [r1, #12]
 8007986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007988:	079d      	lsls	r5, r3, #30
 800798a:	4606      	mov	r6, r0
 800798c:	460c      	mov	r4, r1
 800798e:	d507      	bpl.n	80079a0 <__smakebuf_r+0x1c>
 8007990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007994:	6023      	str	r3, [r4, #0]
 8007996:	6123      	str	r3, [r4, #16]
 8007998:	2301      	movs	r3, #1
 800799a:	6163      	str	r3, [r4, #20]
 800799c:	b002      	add	sp, #8
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	ab01      	add	r3, sp, #4
 80079a2:	466a      	mov	r2, sp
 80079a4:	f7ff ffc9 	bl	800793a <__swhatbuf_r>
 80079a8:	9900      	ldr	r1, [sp, #0]
 80079aa:	4605      	mov	r5, r0
 80079ac:	4630      	mov	r0, r6
 80079ae:	f000 fc45 	bl	800823c <_malloc_r>
 80079b2:	b948      	cbnz	r0, 80079c8 <__smakebuf_r+0x44>
 80079b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079b8:	059a      	lsls	r2, r3, #22
 80079ba:	d4ef      	bmi.n	800799c <__smakebuf_r+0x18>
 80079bc:	f023 0303 	bic.w	r3, r3, #3
 80079c0:	f043 0302 	orr.w	r3, r3, #2
 80079c4:	81a3      	strh	r3, [r4, #12]
 80079c6:	e7e3      	b.n	8007990 <__smakebuf_r+0xc>
 80079c8:	4b0d      	ldr	r3, [pc, #52]	; (8007a00 <__smakebuf_r+0x7c>)
 80079ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	6020      	str	r0, [r4, #0]
 80079d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079d4:	81a3      	strh	r3, [r4, #12]
 80079d6:	9b00      	ldr	r3, [sp, #0]
 80079d8:	6163      	str	r3, [r4, #20]
 80079da:	9b01      	ldr	r3, [sp, #4]
 80079dc:	6120      	str	r0, [r4, #16]
 80079de:	b15b      	cbz	r3, 80079f8 <__smakebuf_r+0x74>
 80079e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079e4:	4630      	mov	r0, r6
 80079e6:	f000 fef7 	bl	80087d8 <_isatty_r>
 80079ea:	b128      	cbz	r0, 80079f8 <__smakebuf_r+0x74>
 80079ec:	89a3      	ldrh	r3, [r4, #12]
 80079ee:	f023 0303 	bic.w	r3, r3, #3
 80079f2:	f043 0301 	orr.w	r3, r3, #1
 80079f6:	81a3      	strh	r3, [r4, #12]
 80079f8:	89a0      	ldrh	r0, [r4, #12]
 80079fa:	4305      	orrs	r5, r0
 80079fc:	81a5      	strh	r5, [r4, #12]
 80079fe:	e7cd      	b.n	800799c <__smakebuf_r+0x18>
 8007a00:	08007789 	.word	0x08007789

08007a04 <malloc>:
 8007a04:	4b02      	ldr	r3, [pc, #8]	; (8007a10 <malloc+0xc>)
 8007a06:	4601      	mov	r1, r0
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	f000 bc17 	b.w	800823c <_malloc_r>
 8007a0e:	bf00      	nop
 8007a10:	2000000c 	.word	0x2000000c

08007a14 <memcpy>:
 8007a14:	440a      	add	r2, r1
 8007a16:	4291      	cmp	r1, r2
 8007a18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a1c:	d100      	bne.n	8007a20 <memcpy+0xc>
 8007a1e:	4770      	bx	lr
 8007a20:	b510      	push	{r4, lr}
 8007a22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a2a:	4291      	cmp	r1, r2
 8007a2c:	d1f9      	bne.n	8007a22 <memcpy+0xe>
 8007a2e:	bd10      	pop	{r4, pc}

08007a30 <_Balloc>:
 8007a30:	b570      	push	{r4, r5, r6, lr}
 8007a32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a34:	4604      	mov	r4, r0
 8007a36:	460d      	mov	r5, r1
 8007a38:	b976      	cbnz	r6, 8007a58 <_Balloc+0x28>
 8007a3a:	2010      	movs	r0, #16
 8007a3c:	f7ff ffe2 	bl	8007a04 <malloc>
 8007a40:	4602      	mov	r2, r0
 8007a42:	6260      	str	r0, [r4, #36]	; 0x24
 8007a44:	b920      	cbnz	r0, 8007a50 <_Balloc+0x20>
 8007a46:	4b18      	ldr	r3, [pc, #96]	; (8007aa8 <_Balloc+0x78>)
 8007a48:	4818      	ldr	r0, [pc, #96]	; (8007aac <_Balloc+0x7c>)
 8007a4a:	2166      	movs	r1, #102	; 0x66
 8007a4c:	f000 fe72 	bl	8008734 <__assert_func>
 8007a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a54:	6006      	str	r6, [r0, #0]
 8007a56:	60c6      	str	r6, [r0, #12]
 8007a58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a5a:	68f3      	ldr	r3, [r6, #12]
 8007a5c:	b183      	cbz	r3, 8007a80 <_Balloc+0x50>
 8007a5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a60:	68db      	ldr	r3, [r3, #12]
 8007a62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a66:	b9b8      	cbnz	r0, 8007a98 <_Balloc+0x68>
 8007a68:	2101      	movs	r1, #1
 8007a6a:	fa01 f605 	lsl.w	r6, r1, r5
 8007a6e:	1d72      	adds	r2, r6, #5
 8007a70:	0092      	lsls	r2, r2, #2
 8007a72:	4620      	mov	r0, r4
 8007a74:	f000 fb60 	bl	8008138 <_calloc_r>
 8007a78:	b160      	cbz	r0, 8007a94 <_Balloc+0x64>
 8007a7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a7e:	e00e      	b.n	8007a9e <_Balloc+0x6e>
 8007a80:	2221      	movs	r2, #33	; 0x21
 8007a82:	2104      	movs	r1, #4
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 fb57 	bl	8008138 <_calloc_r>
 8007a8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a8c:	60f0      	str	r0, [r6, #12]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d1e4      	bne.n	8007a5e <_Balloc+0x2e>
 8007a94:	2000      	movs	r0, #0
 8007a96:	bd70      	pop	{r4, r5, r6, pc}
 8007a98:	6802      	ldr	r2, [r0, #0]
 8007a9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007aa4:	e7f7      	b.n	8007a96 <_Balloc+0x66>
 8007aa6:	bf00      	nop
 8007aa8:	08011b0d 	.word	0x08011b0d
 8007aac:	08011bf0 	.word	0x08011bf0

08007ab0 <_Bfree>:
 8007ab0:	b570      	push	{r4, r5, r6, lr}
 8007ab2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007ab4:	4605      	mov	r5, r0
 8007ab6:	460c      	mov	r4, r1
 8007ab8:	b976      	cbnz	r6, 8007ad8 <_Bfree+0x28>
 8007aba:	2010      	movs	r0, #16
 8007abc:	f7ff ffa2 	bl	8007a04 <malloc>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	6268      	str	r0, [r5, #36]	; 0x24
 8007ac4:	b920      	cbnz	r0, 8007ad0 <_Bfree+0x20>
 8007ac6:	4b09      	ldr	r3, [pc, #36]	; (8007aec <_Bfree+0x3c>)
 8007ac8:	4809      	ldr	r0, [pc, #36]	; (8007af0 <_Bfree+0x40>)
 8007aca:	218a      	movs	r1, #138	; 0x8a
 8007acc:	f000 fe32 	bl	8008734 <__assert_func>
 8007ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ad4:	6006      	str	r6, [r0, #0]
 8007ad6:	60c6      	str	r6, [r0, #12]
 8007ad8:	b13c      	cbz	r4, 8007aea <_Bfree+0x3a>
 8007ada:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007adc:	6862      	ldr	r2, [r4, #4]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ae4:	6021      	str	r1, [r4, #0]
 8007ae6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007aea:	bd70      	pop	{r4, r5, r6, pc}
 8007aec:	08011b0d 	.word	0x08011b0d
 8007af0:	08011bf0 	.word	0x08011bf0

08007af4 <__multadd>:
 8007af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af8:	690d      	ldr	r5, [r1, #16]
 8007afa:	4607      	mov	r7, r0
 8007afc:	460c      	mov	r4, r1
 8007afe:	461e      	mov	r6, r3
 8007b00:	f101 0c14 	add.w	ip, r1, #20
 8007b04:	2000      	movs	r0, #0
 8007b06:	f8dc 3000 	ldr.w	r3, [ip]
 8007b0a:	b299      	uxth	r1, r3
 8007b0c:	fb02 6101 	mla	r1, r2, r1, r6
 8007b10:	0c1e      	lsrs	r6, r3, #16
 8007b12:	0c0b      	lsrs	r3, r1, #16
 8007b14:	fb02 3306 	mla	r3, r2, r6, r3
 8007b18:	b289      	uxth	r1, r1
 8007b1a:	3001      	adds	r0, #1
 8007b1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b20:	4285      	cmp	r5, r0
 8007b22:	f84c 1b04 	str.w	r1, [ip], #4
 8007b26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b2a:	dcec      	bgt.n	8007b06 <__multadd+0x12>
 8007b2c:	b30e      	cbz	r6, 8007b72 <__multadd+0x7e>
 8007b2e:	68a3      	ldr	r3, [r4, #8]
 8007b30:	42ab      	cmp	r3, r5
 8007b32:	dc19      	bgt.n	8007b68 <__multadd+0x74>
 8007b34:	6861      	ldr	r1, [r4, #4]
 8007b36:	4638      	mov	r0, r7
 8007b38:	3101      	adds	r1, #1
 8007b3a:	f7ff ff79 	bl	8007a30 <_Balloc>
 8007b3e:	4680      	mov	r8, r0
 8007b40:	b928      	cbnz	r0, 8007b4e <__multadd+0x5a>
 8007b42:	4602      	mov	r2, r0
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <__multadd+0x84>)
 8007b46:	480d      	ldr	r0, [pc, #52]	; (8007b7c <__multadd+0x88>)
 8007b48:	21b5      	movs	r1, #181	; 0xb5
 8007b4a:	f000 fdf3 	bl	8008734 <__assert_func>
 8007b4e:	6922      	ldr	r2, [r4, #16]
 8007b50:	3202      	adds	r2, #2
 8007b52:	f104 010c 	add.w	r1, r4, #12
 8007b56:	0092      	lsls	r2, r2, #2
 8007b58:	300c      	adds	r0, #12
 8007b5a:	f7ff ff5b 	bl	8007a14 <memcpy>
 8007b5e:	4621      	mov	r1, r4
 8007b60:	4638      	mov	r0, r7
 8007b62:	f7ff ffa5 	bl	8007ab0 <_Bfree>
 8007b66:	4644      	mov	r4, r8
 8007b68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b6c:	3501      	adds	r5, #1
 8007b6e:	615e      	str	r6, [r3, #20]
 8007b70:	6125      	str	r5, [r4, #16]
 8007b72:	4620      	mov	r0, r4
 8007b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b78:	08011b7f 	.word	0x08011b7f
 8007b7c:	08011bf0 	.word	0x08011bf0

08007b80 <__hi0bits>:
 8007b80:	0c03      	lsrs	r3, r0, #16
 8007b82:	041b      	lsls	r3, r3, #16
 8007b84:	b9d3      	cbnz	r3, 8007bbc <__hi0bits+0x3c>
 8007b86:	0400      	lsls	r0, r0, #16
 8007b88:	2310      	movs	r3, #16
 8007b8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007b8e:	bf04      	itt	eq
 8007b90:	0200      	lsleq	r0, r0, #8
 8007b92:	3308      	addeq	r3, #8
 8007b94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007b98:	bf04      	itt	eq
 8007b9a:	0100      	lsleq	r0, r0, #4
 8007b9c:	3304      	addeq	r3, #4
 8007b9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ba2:	bf04      	itt	eq
 8007ba4:	0080      	lsleq	r0, r0, #2
 8007ba6:	3302      	addeq	r3, #2
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	db05      	blt.n	8007bb8 <__hi0bits+0x38>
 8007bac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007bb0:	f103 0301 	add.w	r3, r3, #1
 8007bb4:	bf08      	it	eq
 8007bb6:	2320      	moveq	r3, #32
 8007bb8:	4618      	mov	r0, r3
 8007bba:	4770      	bx	lr
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	e7e4      	b.n	8007b8a <__hi0bits+0xa>

08007bc0 <__lo0bits>:
 8007bc0:	6803      	ldr	r3, [r0, #0]
 8007bc2:	f013 0207 	ands.w	r2, r3, #7
 8007bc6:	4601      	mov	r1, r0
 8007bc8:	d00b      	beq.n	8007be2 <__lo0bits+0x22>
 8007bca:	07da      	lsls	r2, r3, #31
 8007bcc:	d423      	bmi.n	8007c16 <__lo0bits+0x56>
 8007bce:	0798      	lsls	r0, r3, #30
 8007bd0:	bf49      	itett	mi
 8007bd2:	085b      	lsrmi	r3, r3, #1
 8007bd4:	089b      	lsrpl	r3, r3, #2
 8007bd6:	2001      	movmi	r0, #1
 8007bd8:	600b      	strmi	r3, [r1, #0]
 8007bda:	bf5c      	itt	pl
 8007bdc:	600b      	strpl	r3, [r1, #0]
 8007bde:	2002      	movpl	r0, #2
 8007be0:	4770      	bx	lr
 8007be2:	b298      	uxth	r0, r3
 8007be4:	b9a8      	cbnz	r0, 8007c12 <__lo0bits+0x52>
 8007be6:	0c1b      	lsrs	r3, r3, #16
 8007be8:	2010      	movs	r0, #16
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	b90a      	cbnz	r2, 8007bf2 <__lo0bits+0x32>
 8007bee:	3008      	adds	r0, #8
 8007bf0:	0a1b      	lsrs	r3, r3, #8
 8007bf2:	071a      	lsls	r2, r3, #28
 8007bf4:	bf04      	itt	eq
 8007bf6:	091b      	lsreq	r3, r3, #4
 8007bf8:	3004      	addeq	r0, #4
 8007bfa:	079a      	lsls	r2, r3, #30
 8007bfc:	bf04      	itt	eq
 8007bfe:	089b      	lsreq	r3, r3, #2
 8007c00:	3002      	addeq	r0, #2
 8007c02:	07da      	lsls	r2, r3, #31
 8007c04:	d403      	bmi.n	8007c0e <__lo0bits+0x4e>
 8007c06:	085b      	lsrs	r3, r3, #1
 8007c08:	f100 0001 	add.w	r0, r0, #1
 8007c0c:	d005      	beq.n	8007c1a <__lo0bits+0x5a>
 8007c0e:	600b      	str	r3, [r1, #0]
 8007c10:	4770      	bx	lr
 8007c12:	4610      	mov	r0, r2
 8007c14:	e7e9      	b.n	8007bea <__lo0bits+0x2a>
 8007c16:	2000      	movs	r0, #0
 8007c18:	4770      	bx	lr
 8007c1a:	2020      	movs	r0, #32
 8007c1c:	4770      	bx	lr
	...

08007c20 <__i2b>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	460c      	mov	r4, r1
 8007c24:	2101      	movs	r1, #1
 8007c26:	f7ff ff03 	bl	8007a30 <_Balloc>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	b928      	cbnz	r0, 8007c3a <__i2b+0x1a>
 8007c2e:	4b05      	ldr	r3, [pc, #20]	; (8007c44 <__i2b+0x24>)
 8007c30:	4805      	ldr	r0, [pc, #20]	; (8007c48 <__i2b+0x28>)
 8007c32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c36:	f000 fd7d 	bl	8008734 <__assert_func>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	6144      	str	r4, [r0, #20]
 8007c3e:	6103      	str	r3, [r0, #16]
 8007c40:	bd10      	pop	{r4, pc}
 8007c42:	bf00      	nop
 8007c44:	08011b7f 	.word	0x08011b7f
 8007c48:	08011bf0 	.word	0x08011bf0

08007c4c <__multiply>:
 8007c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c50:	4691      	mov	r9, r2
 8007c52:	690a      	ldr	r2, [r1, #16]
 8007c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	bfb8      	it	lt
 8007c5c:	460b      	movlt	r3, r1
 8007c5e:	460c      	mov	r4, r1
 8007c60:	bfbc      	itt	lt
 8007c62:	464c      	movlt	r4, r9
 8007c64:	4699      	movlt	r9, r3
 8007c66:	6927      	ldr	r7, [r4, #16]
 8007c68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c6c:	68a3      	ldr	r3, [r4, #8]
 8007c6e:	6861      	ldr	r1, [r4, #4]
 8007c70:	eb07 060a 	add.w	r6, r7, sl
 8007c74:	42b3      	cmp	r3, r6
 8007c76:	b085      	sub	sp, #20
 8007c78:	bfb8      	it	lt
 8007c7a:	3101      	addlt	r1, #1
 8007c7c:	f7ff fed8 	bl	8007a30 <_Balloc>
 8007c80:	b930      	cbnz	r0, 8007c90 <__multiply+0x44>
 8007c82:	4602      	mov	r2, r0
 8007c84:	4b44      	ldr	r3, [pc, #272]	; (8007d98 <__multiply+0x14c>)
 8007c86:	4845      	ldr	r0, [pc, #276]	; (8007d9c <__multiply+0x150>)
 8007c88:	f240 115d 	movw	r1, #349	; 0x15d
 8007c8c:	f000 fd52 	bl	8008734 <__assert_func>
 8007c90:	f100 0514 	add.w	r5, r0, #20
 8007c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007c98:	462b      	mov	r3, r5
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4543      	cmp	r3, r8
 8007c9e:	d321      	bcc.n	8007ce4 <__multiply+0x98>
 8007ca0:	f104 0314 	add.w	r3, r4, #20
 8007ca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007ca8:	f109 0314 	add.w	r3, r9, #20
 8007cac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cb0:	9202      	str	r2, [sp, #8]
 8007cb2:	1b3a      	subs	r2, r7, r4
 8007cb4:	3a15      	subs	r2, #21
 8007cb6:	f022 0203 	bic.w	r2, r2, #3
 8007cba:	3204      	adds	r2, #4
 8007cbc:	f104 0115 	add.w	r1, r4, #21
 8007cc0:	428f      	cmp	r7, r1
 8007cc2:	bf38      	it	cc
 8007cc4:	2204      	movcc	r2, #4
 8007cc6:	9201      	str	r2, [sp, #4]
 8007cc8:	9a02      	ldr	r2, [sp, #8]
 8007cca:	9303      	str	r3, [sp, #12]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d80c      	bhi.n	8007cea <__multiply+0x9e>
 8007cd0:	2e00      	cmp	r6, #0
 8007cd2:	dd03      	ble.n	8007cdc <__multiply+0x90>
 8007cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d05a      	beq.n	8007d92 <__multiply+0x146>
 8007cdc:	6106      	str	r6, [r0, #16]
 8007cde:	b005      	add	sp, #20
 8007ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce4:	f843 2b04 	str.w	r2, [r3], #4
 8007ce8:	e7d8      	b.n	8007c9c <__multiply+0x50>
 8007cea:	f8b3 a000 	ldrh.w	sl, [r3]
 8007cee:	f1ba 0f00 	cmp.w	sl, #0
 8007cf2:	d024      	beq.n	8007d3e <__multiply+0xf2>
 8007cf4:	f104 0e14 	add.w	lr, r4, #20
 8007cf8:	46a9      	mov	r9, r5
 8007cfa:	f04f 0c00 	mov.w	ip, #0
 8007cfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d02:	f8d9 1000 	ldr.w	r1, [r9]
 8007d06:	fa1f fb82 	uxth.w	fp, r2
 8007d0a:	b289      	uxth	r1, r1
 8007d0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d14:	f8d9 2000 	ldr.w	r2, [r9]
 8007d18:	4461      	add	r1, ip
 8007d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d26:	b289      	uxth	r1, r1
 8007d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d2c:	4577      	cmp	r7, lr
 8007d2e:	f849 1b04 	str.w	r1, [r9], #4
 8007d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d36:	d8e2      	bhi.n	8007cfe <__multiply+0xb2>
 8007d38:	9a01      	ldr	r2, [sp, #4]
 8007d3a:	f845 c002 	str.w	ip, [r5, r2]
 8007d3e:	9a03      	ldr	r2, [sp, #12]
 8007d40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d44:	3304      	adds	r3, #4
 8007d46:	f1b9 0f00 	cmp.w	r9, #0
 8007d4a:	d020      	beq.n	8007d8e <__multiply+0x142>
 8007d4c:	6829      	ldr	r1, [r5, #0]
 8007d4e:	f104 0c14 	add.w	ip, r4, #20
 8007d52:	46ae      	mov	lr, r5
 8007d54:	f04f 0a00 	mov.w	sl, #0
 8007d58:	f8bc b000 	ldrh.w	fp, [ip]
 8007d5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d60:	fb09 220b 	mla	r2, r9, fp, r2
 8007d64:	4492      	add	sl, r2
 8007d66:	b289      	uxth	r1, r1
 8007d68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d6c:	f84e 1b04 	str.w	r1, [lr], #4
 8007d70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d74:	f8be 1000 	ldrh.w	r1, [lr]
 8007d78:	0c12      	lsrs	r2, r2, #16
 8007d7a:	fb09 1102 	mla	r1, r9, r2, r1
 8007d7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d82:	4567      	cmp	r7, ip
 8007d84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007d88:	d8e6      	bhi.n	8007d58 <__multiply+0x10c>
 8007d8a:	9a01      	ldr	r2, [sp, #4]
 8007d8c:	50a9      	str	r1, [r5, r2]
 8007d8e:	3504      	adds	r5, #4
 8007d90:	e79a      	b.n	8007cc8 <__multiply+0x7c>
 8007d92:	3e01      	subs	r6, #1
 8007d94:	e79c      	b.n	8007cd0 <__multiply+0x84>
 8007d96:	bf00      	nop
 8007d98:	08011b7f 	.word	0x08011b7f
 8007d9c:	08011bf0 	.word	0x08011bf0

08007da0 <__pow5mult>:
 8007da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da4:	4615      	mov	r5, r2
 8007da6:	f012 0203 	ands.w	r2, r2, #3
 8007daa:	4606      	mov	r6, r0
 8007dac:	460f      	mov	r7, r1
 8007dae:	d007      	beq.n	8007dc0 <__pow5mult+0x20>
 8007db0:	4c25      	ldr	r4, [pc, #148]	; (8007e48 <__pow5mult+0xa8>)
 8007db2:	3a01      	subs	r2, #1
 8007db4:	2300      	movs	r3, #0
 8007db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dba:	f7ff fe9b 	bl	8007af4 <__multadd>
 8007dbe:	4607      	mov	r7, r0
 8007dc0:	10ad      	asrs	r5, r5, #2
 8007dc2:	d03d      	beq.n	8007e40 <__pow5mult+0xa0>
 8007dc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dc6:	b97c      	cbnz	r4, 8007de8 <__pow5mult+0x48>
 8007dc8:	2010      	movs	r0, #16
 8007dca:	f7ff fe1b 	bl	8007a04 <malloc>
 8007dce:	4602      	mov	r2, r0
 8007dd0:	6270      	str	r0, [r6, #36]	; 0x24
 8007dd2:	b928      	cbnz	r0, 8007de0 <__pow5mult+0x40>
 8007dd4:	4b1d      	ldr	r3, [pc, #116]	; (8007e4c <__pow5mult+0xac>)
 8007dd6:	481e      	ldr	r0, [pc, #120]	; (8007e50 <__pow5mult+0xb0>)
 8007dd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ddc:	f000 fcaa 	bl	8008734 <__assert_func>
 8007de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007de4:	6004      	str	r4, [r0, #0]
 8007de6:	60c4      	str	r4, [r0, #12]
 8007de8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007df0:	b94c      	cbnz	r4, 8007e06 <__pow5mult+0x66>
 8007df2:	f240 2171 	movw	r1, #625	; 0x271
 8007df6:	4630      	mov	r0, r6
 8007df8:	f7ff ff12 	bl	8007c20 <__i2b>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e02:	4604      	mov	r4, r0
 8007e04:	6003      	str	r3, [r0, #0]
 8007e06:	f04f 0900 	mov.w	r9, #0
 8007e0a:	07eb      	lsls	r3, r5, #31
 8007e0c:	d50a      	bpl.n	8007e24 <__pow5mult+0x84>
 8007e0e:	4639      	mov	r1, r7
 8007e10:	4622      	mov	r2, r4
 8007e12:	4630      	mov	r0, r6
 8007e14:	f7ff ff1a 	bl	8007c4c <__multiply>
 8007e18:	4639      	mov	r1, r7
 8007e1a:	4680      	mov	r8, r0
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff fe47 	bl	8007ab0 <_Bfree>
 8007e22:	4647      	mov	r7, r8
 8007e24:	106d      	asrs	r5, r5, #1
 8007e26:	d00b      	beq.n	8007e40 <__pow5mult+0xa0>
 8007e28:	6820      	ldr	r0, [r4, #0]
 8007e2a:	b938      	cbnz	r0, 8007e3c <__pow5mult+0x9c>
 8007e2c:	4622      	mov	r2, r4
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4630      	mov	r0, r6
 8007e32:	f7ff ff0b 	bl	8007c4c <__multiply>
 8007e36:	6020      	str	r0, [r4, #0]
 8007e38:	f8c0 9000 	str.w	r9, [r0]
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	e7e4      	b.n	8007e0a <__pow5mult+0x6a>
 8007e40:	4638      	mov	r0, r7
 8007e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e46:	bf00      	nop
 8007e48:	08011d40 	.word	0x08011d40
 8007e4c:	08011b0d 	.word	0x08011b0d
 8007e50:	08011bf0 	.word	0x08011bf0

08007e54 <__lshift>:
 8007e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e58:	460c      	mov	r4, r1
 8007e5a:	6849      	ldr	r1, [r1, #4]
 8007e5c:	6923      	ldr	r3, [r4, #16]
 8007e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e62:	68a3      	ldr	r3, [r4, #8]
 8007e64:	4607      	mov	r7, r0
 8007e66:	4691      	mov	r9, r2
 8007e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e6c:	f108 0601 	add.w	r6, r8, #1
 8007e70:	42b3      	cmp	r3, r6
 8007e72:	db0b      	blt.n	8007e8c <__lshift+0x38>
 8007e74:	4638      	mov	r0, r7
 8007e76:	f7ff fddb 	bl	8007a30 <_Balloc>
 8007e7a:	4605      	mov	r5, r0
 8007e7c:	b948      	cbnz	r0, 8007e92 <__lshift+0x3e>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	4b2a      	ldr	r3, [pc, #168]	; (8007f2c <__lshift+0xd8>)
 8007e82:	482b      	ldr	r0, [pc, #172]	; (8007f30 <__lshift+0xdc>)
 8007e84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007e88:	f000 fc54 	bl	8008734 <__assert_func>
 8007e8c:	3101      	adds	r1, #1
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	e7ee      	b.n	8007e70 <__lshift+0x1c>
 8007e92:	2300      	movs	r3, #0
 8007e94:	f100 0114 	add.w	r1, r0, #20
 8007e98:	f100 0210 	add.w	r2, r0, #16
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	4553      	cmp	r3, sl
 8007ea0:	db37      	blt.n	8007f12 <__lshift+0xbe>
 8007ea2:	6920      	ldr	r0, [r4, #16]
 8007ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ea8:	f104 0314 	add.w	r3, r4, #20
 8007eac:	f019 091f 	ands.w	r9, r9, #31
 8007eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007eb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007eb8:	d02f      	beq.n	8007f1a <__lshift+0xc6>
 8007eba:	f1c9 0e20 	rsb	lr, r9, #32
 8007ebe:	468a      	mov	sl, r1
 8007ec0:	f04f 0c00 	mov.w	ip, #0
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	fa02 f209 	lsl.w	r2, r2, r9
 8007eca:	ea42 020c 	orr.w	r2, r2, ip
 8007ece:	f84a 2b04 	str.w	r2, [sl], #4
 8007ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ed6:	4298      	cmp	r0, r3
 8007ed8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007edc:	d8f2      	bhi.n	8007ec4 <__lshift+0x70>
 8007ede:	1b03      	subs	r3, r0, r4
 8007ee0:	3b15      	subs	r3, #21
 8007ee2:	f023 0303 	bic.w	r3, r3, #3
 8007ee6:	3304      	adds	r3, #4
 8007ee8:	f104 0215 	add.w	r2, r4, #21
 8007eec:	4290      	cmp	r0, r2
 8007eee:	bf38      	it	cc
 8007ef0:	2304      	movcc	r3, #4
 8007ef2:	f841 c003 	str.w	ip, [r1, r3]
 8007ef6:	f1bc 0f00 	cmp.w	ip, #0
 8007efa:	d001      	beq.n	8007f00 <__lshift+0xac>
 8007efc:	f108 0602 	add.w	r6, r8, #2
 8007f00:	3e01      	subs	r6, #1
 8007f02:	4638      	mov	r0, r7
 8007f04:	612e      	str	r6, [r5, #16]
 8007f06:	4621      	mov	r1, r4
 8007f08:	f7ff fdd2 	bl	8007ab0 <_Bfree>
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f12:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f16:	3301      	adds	r3, #1
 8007f18:	e7c1      	b.n	8007e9e <__lshift+0x4a>
 8007f1a:	3904      	subs	r1, #4
 8007f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f20:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f24:	4298      	cmp	r0, r3
 8007f26:	d8f9      	bhi.n	8007f1c <__lshift+0xc8>
 8007f28:	e7ea      	b.n	8007f00 <__lshift+0xac>
 8007f2a:	bf00      	nop
 8007f2c:	08011b7f 	.word	0x08011b7f
 8007f30:	08011bf0 	.word	0x08011bf0

08007f34 <__mcmp>:
 8007f34:	b530      	push	{r4, r5, lr}
 8007f36:	6902      	ldr	r2, [r0, #16]
 8007f38:	690c      	ldr	r4, [r1, #16]
 8007f3a:	1b12      	subs	r2, r2, r4
 8007f3c:	d10e      	bne.n	8007f5c <__mcmp+0x28>
 8007f3e:	f100 0314 	add.w	r3, r0, #20
 8007f42:	3114      	adds	r1, #20
 8007f44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f48:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f4c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f50:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f54:	42a5      	cmp	r5, r4
 8007f56:	d003      	beq.n	8007f60 <__mcmp+0x2c>
 8007f58:	d305      	bcc.n	8007f66 <__mcmp+0x32>
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	4610      	mov	r0, r2
 8007f5e:	bd30      	pop	{r4, r5, pc}
 8007f60:	4283      	cmp	r3, r0
 8007f62:	d3f3      	bcc.n	8007f4c <__mcmp+0x18>
 8007f64:	e7fa      	b.n	8007f5c <__mcmp+0x28>
 8007f66:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6a:	e7f7      	b.n	8007f5c <__mcmp+0x28>

08007f6c <__mdiff>:
 8007f6c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f70:	460c      	mov	r4, r1
 8007f72:	4606      	mov	r6, r0
 8007f74:	4611      	mov	r1, r2
 8007f76:	4620      	mov	r0, r4
 8007f78:	4690      	mov	r8, r2
 8007f7a:	f7ff ffdb 	bl	8007f34 <__mcmp>
 8007f7e:	1e05      	subs	r5, r0, #0
 8007f80:	d110      	bne.n	8007fa4 <__mdiff+0x38>
 8007f82:	4629      	mov	r1, r5
 8007f84:	4630      	mov	r0, r6
 8007f86:	f7ff fd53 	bl	8007a30 <_Balloc>
 8007f8a:	b930      	cbnz	r0, 8007f9a <__mdiff+0x2e>
 8007f8c:	4b3a      	ldr	r3, [pc, #232]	; (8008078 <__mdiff+0x10c>)
 8007f8e:	4602      	mov	r2, r0
 8007f90:	f240 2132 	movw	r1, #562	; 0x232
 8007f94:	4839      	ldr	r0, [pc, #228]	; (800807c <__mdiff+0x110>)
 8007f96:	f000 fbcd 	bl	8008734 <__assert_func>
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fa0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	bfa4      	itt	ge
 8007fa6:	4643      	movge	r3, r8
 8007fa8:	46a0      	movge	r8, r4
 8007faa:	4630      	mov	r0, r6
 8007fac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fb0:	bfa6      	itte	ge
 8007fb2:	461c      	movge	r4, r3
 8007fb4:	2500      	movge	r5, #0
 8007fb6:	2501      	movlt	r5, #1
 8007fb8:	f7ff fd3a 	bl	8007a30 <_Balloc>
 8007fbc:	b920      	cbnz	r0, 8007fc8 <__mdiff+0x5c>
 8007fbe:	4b2e      	ldr	r3, [pc, #184]	; (8008078 <__mdiff+0x10c>)
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fc6:	e7e5      	b.n	8007f94 <__mdiff+0x28>
 8007fc8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fcc:	6926      	ldr	r6, [r4, #16]
 8007fce:	60c5      	str	r5, [r0, #12]
 8007fd0:	f104 0914 	add.w	r9, r4, #20
 8007fd4:	f108 0514 	add.w	r5, r8, #20
 8007fd8:	f100 0e14 	add.w	lr, r0, #20
 8007fdc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007fe0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007fe4:	f108 0210 	add.w	r2, r8, #16
 8007fe8:	46f2      	mov	sl, lr
 8007fea:	2100      	movs	r1, #0
 8007fec:	f859 3b04 	ldr.w	r3, [r9], #4
 8007ff0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007ff4:	fa1f f883 	uxth.w	r8, r3
 8007ff8:	fa11 f18b 	uxtah	r1, r1, fp
 8007ffc:	0c1b      	lsrs	r3, r3, #16
 8007ffe:	eba1 0808 	sub.w	r8, r1, r8
 8008002:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008006:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800800a:	fa1f f888 	uxth.w	r8, r8
 800800e:	1419      	asrs	r1, r3, #16
 8008010:	454e      	cmp	r6, r9
 8008012:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008016:	f84a 3b04 	str.w	r3, [sl], #4
 800801a:	d8e7      	bhi.n	8007fec <__mdiff+0x80>
 800801c:	1b33      	subs	r3, r6, r4
 800801e:	3b15      	subs	r3, #21
 8008020:	f023 0303 	bic.w	r3, r3, #3
 8008024:	3304      	adds	r3, #4
 8008026:	3415      	adds	r4, #21
 8008028:	42a6      	cmp	r6, r4
 800802a:	bf38      	it	cc
 800802c:	2304      	movcc	r3, #4
 800802e:	441d      	add	r5, r3
 8008030:	4473      	add	r3, lr
 8008032:	469e      	mov	lr, r3
 8008034:	462e      	mov	r6, r5
 8008036:	4566      	cmp	r6, ip
 8008038:	d30e      	bcc.n	8008058 <__mdiff+0xec>
 800803a:	f10c 0203 	add.w	r2, ip, #3
 800803e:	1b52      	subs	r2, r2, r5
 8008040:	f022 0203 	bic.w	r2, r2, #3
 8008044:	3d03      	subs	r5, #3
 8008046:	45ac      	cmp	ip, r5
 8008048:	bf38      	it	cc
 800804a:	2200      	movcc	r2, #0
 800804c:	441a      	add	r2, r3
 800804e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008052:	b17b      	cbz	r3, 8008074 <__mdiff+0x108>
 8008054:	6107      	str	r7, [r0, #16]
 8008056:	e7a3      	b.n	8007fa0 <__mdiff+0x34>
 8008058:	f856 8b04 	ldr.w	r8, [r6], #4
 800805c:	fa11 f288 	uxtah	r2, r1, r8
 8008060:	1414      	asrs	r4, r2, #16
 8008062:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008066:	b292      	uxth	r2, r2
 8008068:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800806c:	f84e 2b04 	str.w	r2, [lr], #4
 8008070:	1421      	asrs	r1, r4, #16
 8008072:	e7e0      	b.n	8008036 <__mdiff+0xca>
 8008074:	3f01      	subs	r7, #1
 8008076:	e7ea      	b.n	800804e <__mdiff+0xe2>
 8008078:	08011b7f 	.word	0x08011b7f
 800807c:	08011bf0 	.word	0x08011bf0

08008080 <__d2b>:
 8008080:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008084:	4689      	mov	r9, r1
 8008086:	2101      	movs	r1, #1
 8008088:	ec57 6b10 	vmov	r6, r7, d0
 800808c:	4690      	mov	r8, r2
 800808e:	f7ff fccf 	bl	8007a30 <_Balloc>
 8008092:	4604      	mov	r4, r0
 8008094:	b930      	cbnz	r0, 80080a4 <__d2b+0x24>
 8008096:	4602      	mov	r2, r0
 8008098:	4b25      	ldr	r3, [pc, #148]	; (8008130 <__d2b+0xb0>)
 800809a:	4826      	ldr	r0, [pc, #152]	; (8008134 <__d2b+0xb4>)
 800809c:	f240 310a 	movw	r1, #778	; 0x30a
 80080a0:	f000 fb48 	bl	8008734 <__assert_func>
 80080a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080ac:	bb35      	cbnz	r5, 80080fc <__d2b+0x7c>
 80080ae:	2e00      	cmp	r6, #0
 80080b0:	9301      	str	r3, [sp, #4]
 80080b2:	d028      	beq.n	8008106 <__d2b+0x86>
 80080b4:	4668      	mov	r0, sp
 80080b6:	9600      	str	r6, [sp, #0]
 80080b8:	f7ff fd82 	bl	8007bc0 <__lo0bits>
 80080bc:	9900      	ldr	r1, [sp, #0]
 80080be:	b300      	cbz	r0, 8008102 <__d2b+0x82>
 80080c0:	9a01      	ldr	r2, [sp, #4]
 80080c2:	f1c0 0320 	rsb	r3, r0, #32
 80080c6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ca:	430b      	orrs	r3, r1
 80080cc:	40c2      	lsrs	r2, r0
 80080ce:	6163      	str	r3, [r4, #20]
 80080d0:	9201      	str	r2, [sp, #4]
 80080d2:	9b01      	ldr	r3, [sp, #4]
 80080d4:	61a3      	str	r3, [r4, #24]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	bf14      	ite	ne
 80080da:	2202      	movne	r2, #2
 80080dc:	2201      	moveq	r2, #1
 80080de:	6122      	str	r2, [r4, #16]
 80080e0:	b1d5      	cbz	r5, 8008118 <__d2b+0x98>
 80080e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080e6:	4405      	add	r5, r0
 80080e8:	f8c9 5000 	str.w	r5, [r9]
 80080ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80080f0:	f8c8 0000 	str.w	r0, [r8]
 80080f4:	4620      	mov	r0, r4
 80080f6:	b003      	add	sp, #12
 80080f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008100:	e7d5      	b.n	80080ae <__d2b+0x2e>
 8008102:	6161      	str	r1, [r4, #20]
 8008104:	e7e5      	b.n	80080d2 <__d2b+0x52>
 8008106:	a801      	add	r0, sp, #4
 8008108:	f7ff fd5a 	bl	8007bc0 <__lo0bits>
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	6163      	str	r3, [r4, #20]
 8008110:	2201      	movs	r2, #1
 8008112:	6122      	str	r2, [r4, #16]
 8008114:	3020      	adds	r0, #32
 8008116:	e7e3      	b.n	80080e0 <__d2b+0x60>
 8008118:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800811c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008120:	f8c9 0000 	str.w	r0, [r9]
 8008124:	6918      	ldr	r0, [r3, #16]
 8008126:	f7ff fd2b 	bl	8007b80 <__hi0bits>
 800812a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800812e:	e7df      	b.n	80080f0 <__d2b+0x70>
 8008130:	08011b7f 	.word	0x08011b7f
 8008134:	08011bf0 	.word	0x08011bf0

08008138 <_calloc_r>:
 8008138:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800813a:	fba1 2402 	umull	r2, r4, r1, r2
 800813e:	b94c      	cbnz	r4, 8008154 <_calloc_r+0x1c>
 8008140:	4611      	mov	r1, r2
 8008142:	9201      	str	r2, [sp, #4]
 8008144:	f000 f87a 	bl	800823c <_malloc_r>
 8008148:	9a01      	ldr	r2, [sp, #4]
 800814a:	4605      	mov	r5, r0
 800814c:	b930      	cbnz	r0, 800815c <_calloc_r+0x24>
 800814e:	4628      	mov	r0, r5
 8008150:	b003      	add	sp, #12
 8008152:	bd30      	pop	{r4, r5, pc}
 8008154:	220c      	movs	r2, #12
 8008156:	6002      	str	r2, [r0, #0]
 8008158:	2500      	movs	r5, #0
 800815a:	e7f8      	b.n	800814e <_calloc_r+0x16>
 800815c:	4621      	mov	r1, r4
 800815e:	f7fd fddd 	bl	8005d1c <memset>
 8008162:	e7f4      	b.n	800814e <_calloc_r+0x16>

08008164 <_free_r>:
 8008164:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008166:	2900      	cmp	r1, #0
 8008168:	d044      	beq.n	80081f4 <_free_r+0x90>
 800816a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800816e:	9001      	str	r0, [sp, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	f1a1 0404 	sub.w	r4, r1, #4
 8008176:	bfb8      	it	lt
 8008178:	18e4      	addlt	r4, r4, r3
 800817a:	f000 fb61 	bl	8008840 <__malloc_lock>
 800817e:	4a1e      	ldr	r2, [pc, #120]	; (80081f8 <_free_r+0x94>)
 8008180:	9801      	ldr	r0, [sp, #4]
 8008182:	6813      	ldr	r3, [r2, #0]
 8008184:	b933      	cbnz	r3, 8008194 <_free_r+0x30>
 8008186:	6063      	str	r3, [r4, #4]
 8008188:	6014      	str	r4, [r2, #0]
 800818a:	b003      	add	sp, #12
 800818c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008190:	f000 bb5c 	b.w	800884c <__malloc_unlock>
 8008194:	42a3      	cmp	r3, r4
 8008196:	d908      	bls.n	80081aa <_free_r+0x46>
 8008198:	6825      	ldr	r5, [r4, #0]
 800819a:	1961      	adds	r1, r4, r5
 800819c:	428b      	cmp	r3, r1
 800819e:	bf01      	itttt	eq
 80081a0:	6819      	ldreq	r1, [r3, #0]
 80081a2:	685b      	ldreq	r3, [r3, #4]
 80081a4:	1949      	addeq	r1, r1, r5
 80081a6:	6021      	streq	r1, [r4, #0]
 80081a8:	e7ed      	b.n	8008186 <_free_r+0x22>
 80081aa:	461a      	mov	r2, r3
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	b10b      	cbz	r3, 80081b4 <_free_r+0x50>
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	d9fa      	bls.n	80081aa <_free_r+0x46>
 80081b4:	6811      	ldr	r1, [r2, #0]
 80081b6:	1855      	adds	r5, r2, r1
 80081b8:	42a5      	cmp	r5, r4
 80081ba:	d10b      	bne.n	80081d4 <_free_r+0x70>
 80081bc:	6824      	ldr	r4, [r4, #0]
 80081be:	4421      	add	r1, r4
 80081c0:	1854      	adds	r4, r2, r1
 80081c2:	42a3      	cmp	r3, r4
 80081c4:	6011      	str	r1, [r2, #0]
 80081c6:	d1e0      	bne.n	800818a <_free_r+0x26>
 80081c8:	681c      	ldr	r4, [r3, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	6053      	str	r3, [r2, #4]
 80081ce:	4421      	add	r1, r4
 80081d0:	6011      	str	r1, [r2, #0]
 80081d2:	e7da      	b.n	800818a <_free_r+0x26>
 80081d4:	d902      	bls.n	80081dc <_free_r+0x78>
 80081d6:	230c      	movs	r3, #12
 80081d8:	6003      	str	r3, [r0, #0]
 80081da:	e7d6      	b.n	800818a <_free_r+0x26>
 80081dc:	6825      	ldr	r5, [r4, #0]
 80081de:	1961      	adds	r1, r4, r5
 80081e0:	428b      	cmp	r3, r1
 80081e2:	bf04      	itt	eq
 80081e4:	6819      	ldreq	r1, [r3, #0]
 80081e6:	685b      	ldreq	r3, [r3, #4]
 80081e8:	6063      	str	r3, [r4, #4]
 80081ea:	bf04      	itt	eq
 80081ec:	1949      	addeq	r1, r1, r5
 80081ee:	6021      	streq	r1, [r4, #0]
 80081f0:	6054      	str	r4, [r2, #4]
 80081f2:	e7ca      	b.n	800818a <_free_r+0x26>
 80081f4:	b003      	add	sp, #12
 80081f6:	bd30      	pop	{r4, r5, pc}
 80081f8:	20002b1c 	.word	0x20002b1c

080081fc <sbrk_aligned>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	4e0e      	ldr	r6, [pc, #56]	; (8008238 <sbrk_aligned+0x3c>)
 8008200:	460c      	mov	r4, r1
 8008202:	6831      	ldr	r1, [r6, #0]
 8008204:	4605      	mov	r5, r0
 8008206:	b911      	cbnz	r1, 800820e <sbrk_aligned+0x12>
 8008208:	f000 fa2e 	bl	8008668 <_sbrk_r>
 800820c:	6030      	str	r0, [r6, #0]
 800820e:	4621      	mov	r1, r4
 8008210:	4628      	mov	r0, r5
 8008212:	f000 fa29 	bl	8008668 <_sbrk_r>
 8008216:	1c43      	adds	r3, r0, #1
 8008218:	d00a      	beq.n	8008230 <sbrk_aligned+0x34>
 800821a:	1cc4      	adds	r4, r0, #3
 800821c:	f024 0403 	bic.w	r4, r4, #3
 8008220:	42a0      	cmp	r0, r4
 8008222:	d007      	beq.n	8008234 <sbrk_aligned+0x38>
 8008224:	1a21      	subs	r1, r4, r0
 8008226:	4628      	mov	r0, r5
 8008228:	f000 fa1e 	bl	8008668 <_sbrk_r>
 800822c:	3001      	adds	r0, #1
 800822e:	d101      	bne.n	8008234 <sbrk_aligned+0x38>
 8008230:	f04f 34ff 	mov.w	r4, #4294967295
 8008234:	4620      	mov	r0, r4
 8008236:	bd70      	pop	{r4, r5, r6, pc}
 8008238:	20002b20 	.word	0x20002b20

0800823c <_malloc_r>:
 800823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008240:	1ccd      	adds	r5, r1, #3
 8008242:	f025 0503 	bic.w	r5, r5, #3
 8008246:	3508      	adds	r5, #8
 8008248:	2d0c      	cmp	r5, #12
 800824a:	bf38      	it	cc
 800824c:	250c      	movcc	r5, #12
 800824e:	2d00      	cmp	r5, #0
 8008250:	4607      	mov	r7, r0
 8008252:	db01      	blt.n	8008258 <_malloc_r+0x1c>
 8008254:	42a9      	cmp	r1, r5
 8008256:	d905      	bls.n	8008264 <_malloc_r+0x28>
 8008258:	230c      	movs	r3, #12
 800825a:	603b      	str	r3, [r7, #0]
 800825c:	2600      	movs	r6, #0
 800825e:	4630      	mov	r0, r6
 8008260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008264:	4e2e      	ldr	r6, [pc, #184]	; (8008320 <_malloc_r+0xe4>)
 8008266:	f000 faeb 	bl	8008840 <__malloc_lock>
 800826a:	6833      	ldr	r3, [r6, #0]
 800826c:	461c      	mov	r4, r3
 800826e:	bb34      	cbnz	r4, 80082be <_malloc_r+0x82>
 8008270:	4629      	mov	r1, r5
 8008272:	4638      	mov	r0, r7
 8008274:	f7ff ffc2 	bl	80081fc <sbrk_aligned>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	4604      	mov	r4, r0
 800827c:	d14d      	bne.n	800831a <_malloc_r+0xde>
 800827e:	6834      	ldr	r4, [r6, #0]
 8008280:	4626      	mov	r6, r4
 8008282:	2e00      	cmp	r6, #0
 8008284:	d140      	bne.n	8008308 <_malloc_r+0xcc>
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	4631      	mov	r1, r6
 800828a:	4638      	mov	r0, r7
 800828c:	eb04 0803 	add.w	r8, r4, r3
 8008290:	f000 f9ea 	bl	8008668 <_sbrk_r>
 8008294:	4580      	cmp	r8, r0
 8008296:	d13a      	bne.n	800830e <_malloc_r+0xd2>
 8008298:	6821      	ldr	r1, [r4, #0]
 800829a:	3503      	adds	r5, #3
 800829c:	1a6d      	subs	r5, r5, r1
 800829e:	f025 0503 	bic.w	r5, r5, #3
 80082a2:	3508      	adds	r5, #8
 80082a4:	2d0c      	cmp	r5, #12
 80082a6:	bf38      	it	cc
 80082a8:	250c      	movcc	r5, #12
 80082aa:	4629      	mov	r1, r5
 80082ac:	4638      	mov	r0, r7
 80082ae:	f7ff ffa5 	bl	80081fc <sbrk_aligned>
 80082b2:	3001      	adds	r0, #1
 80082b4:	d02b      	beq.n	800830e <_malloc_r+0xd2>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	442b      	add	r3, r5
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	e00e      	b.n	80082dc <_malloc_r+0xa0>
 80082be:	6822      	ldr	r2, [r4, #0]
 80082c0:	1b52      	subs	r2, r2, r5
 80082c2:	d41e      	bmi.n	8008302 <_malloc_r+0xc6>
 80082c4:	2a0b      	cmp	r2, #11
 80082c6:	d916      	bls.n	80082f6 <_malloc_r+0xba>
 80082c8:	1961      	adds	r1, r4, r5
 80082ca:	42a3      	cmp	r3, r4
 80082cc:	6025      	str	r5, [r4, #0]
 80082ce:	bf18      	it	ne
 80082d0:	6059      	strne	r1, [r3, #4]
 80082d2:	6863      	ldr	r3, [r4, #4]
 80082d4:	bf08      	it	eq
 80082d6:	6031      	streq	r1, [r6, #0]
 80082d8:	5162      	str	r2, [r4, r5]
 80082da:	604b      	str	r3, [r1, #4]
 80082dc:	4638      	mov	r0, r7
 80082de:	f104 060b 	add.w	r6, r4, #11
 80082e2:	f000 fab3 	bl	800884c <__malloc_unlock>
 80082e6:	f026 0607 	bic.w	r6, r6, #7
 80082ea:	1d23      	adds	r3, r4, #4
 80082ec:	1af2      	subs	r2, r6, r3
 80082ee:	d0b6      	beq.n	800825e <_malloc_r+0x22>
 80082f0:	1b9b      	subs	r3, r3, r6
 80082f2:	50a3      	str	r3, [r4, r2]
 80082f4:	e7b3      	b.n	800825e <_malloc_r+0x22>
 80082f6:	6862      	ldr	r2, [r4, #4]
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	bf0c      	ite	eq
 80082fc:	6032      	streq	r2, [r6, #0]
 80082fe:	605a      	strne	r2, [r3, #4]
 8008300:	e7ec      	b.n	80082dc <_malloc_r+0xa0>
 8008302:	4623      	mov	r3, r4
 8008304:	6864      	ldr	r4, [r4, #4]
 8008306:	e7b2      	b.n	800826e <_malloc_r+0x32>
 8008308:	4634      	mov	r4, r6
 800830a:	6876      	ldr	r6, [r6, #4]
 800830c:	e7b9      	b.n	8008282 <_malloc_r+0x46>
 800830e:	230c      	movs	r3, #12
 8008310:	603b      	str	r3, [r7, #0]
 8008312:	4638      	mov	r0, r7
 8008314:	f000 fa9a 	bl	800884c <__malloc_unlock>
 8008318:	e7a1      	b.n	800825e <_malloc_r+0x22>
 800831a:	6025      	str	r5, [r4, #0]
 800831c:	e7de      	b.n	80082dc <_malloc_r+0xa0>
 800831e:	bf00      	nop
 8008320:	20002b1c 	.word	0x20002b1c

08008324 <__sfputc_r>:
 8008324:	6893      	ldr	r3, [r2, #8]
 8008326:	3b01      	subs	r3, #1
 8008328:	2b00      	cmp	r3, #0
 800832a:	b410      	push	{r4}
 800832c:	6093      	str	r3, [r2, #8]
 800832e:	da08      	bge.n	8008342 <__sfputc_r+0x1e>
 8008330:	6994      	ldr	r4, [r2, #24]
 8008332:	42a3      	cmp	r3, r4
 8008334:	db01      	blt.n	800833a <__sfputc_r+0x16>
 8008336:	290a      	cmp	r1, #10
 8008338:	d103      	bne.n	8008342 <__sfputc_r+0x1e>
 800833a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800833e:	f7fe ba03 	b.w	8006748 <__swbuf_r>
 8008342:	6813      	ldr	r3, [r2, #0]
 8008344:	1c58      	adds	r0, r3, #1
 8008346:	6010      	str	r0, [r2, #0]
 8008348:	7019      	strb	r1, [r3, #0]
 800834a:	4608      	mov	r0, r1
 800834c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008350:	4770      	bx	lr

08008352 <__sfputs_r>:
 8008352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008354:	4606      	mov	r6, r0
 8008356:	460f      	mov	r7, r1
 8008358:	4614      	mov	r4, r2
 800835a:	18d5      	adds	r5, r2, r3
 800835c:	42ac      	cmp	r4, r5
 800835e:	d101      	bne.n	8008364 <__sfputs_r+0x12>
 8008360:	2000      	movs	r0, #0
 8008362:	e007      	b.n	8008374 <__sfputs_r+0x22>
 8008364:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008368:	463a      	mov	r2, r7
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff ffda 	bl	8008324 <__sfputc_r>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d1f3      	bne.n	800835c <__sfputs_r+0xa>
 8008374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008378 <_vfiprintf_r>:
 8008378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837c:	460d      	mov	r5, r1
 800837e:	b09d      	sub	sp, #116	; 0x74
 8008380:	4614      	mov	r4, r2
 8008382:	4698      	mov	r8, r3
 8008384:	4606      	mov	r6, r0
 8008386:	b118      	cbz	r0, 8008390 <_vfiprintf_r+0x18>
 8008388:	6983      	ldr	r3, [r0, #24]
 800838a:	b90b      	cbnz	r3, 8008390 <_vfiprintf_r+0x18>
 800838c:	f7ff fa30 	bl	80077f0 <__sinit>
 8008390:	4b89      	ldr	r3, [pc, #548]	; (80085b8 <_vfiprintf_r+0x240>)
 8008392:	429d      	cmp	r5, r3
 8008394:	d11b      	bne.n	80083ce <_vfiprintf_r+0x56>
 8008396:	6875      	ldr	r5, [r6, #4]
 8008398:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800839a:	07d9      	lsls	r1, r3, #31
 800839c:	d405      	bmi.n	80083aa <_vfiprintf_r+0x32>
 800839e:	89ab      	ldrh	r3, [r5, #12]
 80083a0:	059a      	lsls	r2, r3, #22
 80083a2:	d402      	bmi.n	80083aa <_vfiprintf_r+0x32>
 80083a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083a6:	f7ff fac6 	bl	8007936 <__retarget_lock_acquire_recursive>
 80083aa:	89ab      	ldrh	r3, [r5, #12]
 80083ac:	071b      	lsls	r3, r3, #28
 80083ae:	d501      	bpl.n	80083b4 <_vfiprintf_r+0x3c>
 80083b0:	692b      	ldr	r3, [r5, #16]
 80083b2:	b9eb      	cbnz	r3, 80083f0 <_vfiprintf_r+0x78>
 80083b4:	4629      	mov	r1, r5
 80083b6:	4630      	mov	r0, r6
 80083b8:	f7fe fa18 	bl	80067ec <__swsetup_r>
 80083bc:	b1c0      	cbz	r0, 80083f0 <_vfiprintf_r+0x78>
 80083be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083c0:	07dc      	lsls	r4, r3, #31
 80083c2:	d50e      	bpl.n	80083e2 <_vfiprintf_r+0x6a>
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	b01d      	add	sp, #116	; 0x74
 80083ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ce:	4b7b      	ldr	r3, [pc, #492]	; (80085bc <_vfiprintf_r+0x244>)
 80083d0:	429d      	cmp	r5, r3
 80083d2:	d101      	bne.n	80083d8 <_vfiprintf_r+0x60>
 80083d4:	68b5      	ldr	r5, [r6, #8]
 80083d6:	e7df      	b.n	8008398 <_vfiprintf_r+0x20>
 80083d8:	4b79      	ldr	r3, [pc, #484]	; (80085c0 <_vfiprintf_r+0x248>)
 80083da:	429d      	cmp	r5, r3
 80083dc:	bf08      	it	eq
 80083de:	68f5      	ldreq	r5, [r6, #12]
 80083e0:	e7da      	b.n	8008398 <_vfiprintf_r+0x20>
 80083e2:	89ab      	ldrh	r3, [r5, #12]
 80083e4:	0598      	lsls	r0, r3, #22
 80083e6:	d4ed      	bmi.n	80083c4 <_vfiprintf_r+0x4c>
 80083e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083ea:	f7ff faa5 	bl	8007938 <__retarget_lock_release_recursive>
 80083ee:	e7e9      	b.n	80083c4 <_vfiprintf_r+0x4c>
 80083f0:	2300      	movs	r3, #0
 80083f2:	9309      	str	r3, [sp, #36]	; 0x24
 80083f4:	2320      	movs	r3, #32
 80083f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80083fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80083fe:	2330      	movs	r3, #48	; 0x30
 8008400:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80085c4 <_vfiprintf_r+0x24c>
 8008404:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008408:	f04f 0901 	mov.w	r9, #1
 800840c:	4623      	mov	r3, r4
 800840e:	469a      	mov	sl, r3
 8008410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008414:	b10a      	cbz	r2, 800841a <_vfiprintf_r+0xa2>
 8008416:	2a25      	cmp	r2, #37	; 0x25
 8008418:	d1f9      	bne.n	800840e <_vfiprintf_r+0x96>
 800841a:	ebba 0b04 	subs.w	fp, sl, r4
 800841e:	d00b      	beq.n	8008438 <_vfiprintf_r+0xc0>
 8008420:	465b      	mov	r3, fp
 8008422:	4622      	mov	r2, r4
 8008424:	4629      	mov	r1, r5
 8008426:	4630      	mov	r0, r6
 8008428:	f7ff ff93 	bl	8008352 <__sfputs_r>
 800842c:	3001      	adds	r0, #1
 800842e:	f000 80aa 	beq.w	8008586 <_vfiprintf_r+0x20e>
 8008432:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008434:	445a      	add	r2, fp
 8008436:	9209      	str	r2, [sp, #36]	; 0x24
 8008438:	f89a 3000 	ldrb.w	r3, [sl]
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 80a2 	beq.w	8008586 <_vfiprintf_r+0x20e>
 8008442:	2300      	movs	r3, #0
 8008444:	f04f 32ff 	mov.w	r2, #4294967295
 8008448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800844c:	f10a 0a01 	add.w	sl, sl, #1
 8008450:	9304      	str	r3, [sp, #16]
 8008452:	9307      	str	r3, [sp, #28]
 8008454:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008458:	931a      	str	r3, [sp, #104]	; 0x68
 800845a:	4654      	mov	r4, sl
 800845c:	2205      	movs	r2, #5
 800845e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008462:	4858      	ldr	r0, [pc, #352]	; (80085c4 <_vfiprintf_r+0x24c>)
 8008464:	f7f7 febc 	bl	80001e0 <memchr>
 8008468:	9a04      	ldr	r2, [sp, #16]
 800846a:	b9d8      	cbnz	r0, 80084a4 <_vfiprintf_r+0x12c>
 800846c:	06d1      	lsls	r1, r2, #27
 800846e:	bf44      	itt	mi
 8008470:	2320      	movmi	r3, #32
 8008472:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008476:	0713      	lsls	r3, r2, #28
 8008478:	bf44      	itt	mi
 800847a:	232b      	movmi	r3, #43	; 0x2b
 800847c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008480:	f89a 3000 	ldrb.w	r3, [sl]
 8008484:	2b2a      	cmp	r3, #42	; 0x2a
 8008486:	d015      	beq.n	80084b4 <_vfiprintf_r+0x13c>
 8008488:	9a07      	ldr	r2, [sp, #28]
 800848a:	4654      	mov	r4, sl
 800848c:	2000      	movs	r0, #0
 800848e:	f04f 0c0a 	mov.w	ip, #10
 8008492:	4621      	mov	r1, r4
 8008494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008498:	3b30      	subs	r3, #48	; 0x30
 800849a:	2b09      	cmp	r3, #9
 800849c:	d94e      	bls.n	800853c <_vfiprintf_r+0x1c4>
 800849e:	b1b0      	cbz	r0, 80084ce <_vfiprintf_r+0x156>
 80084a0:	9207      	str	r2, [sp, #28]
 80084a2:	e014      	b.n	80084ce <_vfiprintf_r+0x156>
 80084a4:	eba0 0308 	sub.w	r3, r0, r8
 80084a8:	fa09 f303 	lsl.w	r3, r9, r3
 80084ac:	4313      	orrs	r3, r2
 80084ae:	9304      	str	r3, [sp, #16]
 80084b0:	46a2      	mov	sl, r4
 80084b2:	e7d2      	b.n	800845a <_vfiprintf_r+0xe2>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	1d19      	adds	r1, r3, #4
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	9103      	str	r1, [sp, #12]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	bfbb      	ittet	lt
 80084c0:	425b      	neglt	r3, r3
 80084c2:	f042 0202 	orrlt.w	r2, r2, #2
 80084c6:	9307      	strge	r3, [sp, #28]
 80084c8:	9307      	strlt	r3, [sp, #28]
 80084ca:	bfb8      	it	lt
 80084cc:	9204      	strlt	r2, [sp, #16]
 80084ce:	7823      	ldrb	r3, [r4, #0]
 80084d0:	2b2e      	cmp	r3, #46	; 0x2e
 80084d2:	d10c      	bne.n	80084ee <_vfiprintf_r+0x176>
 80084d4:	7863      	ldrb	r3, [r4, #1]
 80084d6:	2b2a      	cmp	r3, #42	; 0x2a
 80084d8:	d135      	bne.n	8008546 <_vfiprintf_r+0x1ce>
 80084da:	9b03      	ldr	r3, [sp, #12]
 80084dc:	1d1a      	adds	r2, r3, #4
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	9203      	str	r2, [sp, #12]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bfb8      	it	lt
 80084e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80084ea:	3402      	adds	r4, #2
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80085d4 <_vfiprintf_r+0x25c>
 80084f2:	7821      	ldrb	r1, [r4, #0]
 80084f4:	2203      	movs	r2, #3
 80084f6:	4650      	mov	r0, sl
 80084f8:	f7f7 fe72 	bl	80001e0 <memchr>
 80084fc:	b140      	cbz	r0, 8008510 <_vfiprintf_r+0x198>
 80084fe:	2340      	movs	r3, #64	; 0x40
 8008500:	eba0 000a 	sub.w	r0, r0, sl
 8008504:	fa03 f000 	lsl.w	r0, r3, r0
 8008508:	9b04      	ldr	r3, [sp, #16]
 800850a:	4303      	orrs	r3, r0
 800850c:	3401      	adds	r4, #1
 800850e:	9304      	str	r3, [sp, #16]
 8008510:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008514:	482c      	ldr	r0, [pc, #176]	; (80085c8 <_vfiprintf_r+0x250>)
 8008516:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800851a:	2206      	movs	r2, #6
 800851c:	f7f7 fe60 	bl	80001e0 <memchr>
 8008520:	2800      	cmp	r0, #0
 8008522:	d03f      	beq.n	80085a4 <_vfiprintf_r+0x22c>
 8008524:	4b29      	ldr	r3, [pc, #164]	; (80085cc <_vfiprintf_r+0x254>)
 8008526:	bb1b      	cbnz	r3, 8008570 <_vfiprintf_r+0x1f8>
 8008528:	9b03      	ldr	r3, [sp, #12]
 800852a:	3307      	adds	r3, #7
 800852c:	f023 0307 	bic.w	r3, r3, #7
 8008530:	3308      	adds	r3, #8
 8008532:	9303      	str	r3, [sp, #12]
 8008534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008536:	443b      	add	r3, r7
 8008538:	9309      	str	r3, [sp, #36]	; 0x24
 800853a:	e767      	b.n	800840c <_vfiprintf_r+0x94>
 800853c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008540:	460c      	mov	r4, r1
 8008542:	2001      	movs	r0, #1
 8008544:	e7a5      	b.n	8008492 <_vfiprintf_r+0x11a>
 8008546:	2300      	movs	r3, #0
 8008548:	3401      	adds	r4, #1
 800854a:	9305      	str	r3, [sp, #20]
 800854c:	4619      	mov	r1, r3
 800854e:	f04f 0c0a 	mov.w	ip, #10
 8008552:	4620      	mov	r0, r4
 8008554:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008558:	3a30      	subs	r2, #48	; 0x30
 800855a:	2a09      	cmp	r2, #9
 800855c:	d903      	bls.n	8008566 <_vfiprintf_r+0x1ee>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0c5      	beq.n	80084ee <_vfiprintf_r+0x176>
 8008562:	9105      	str	r1, [sp, #20]
 8008564:	e7c3      	b.n	80084ee <_vfiprintf_r+0x176>
 8008566:	fb0c 2101 	mla	r1, ip, r1, r2
 800856a:	4604      	mov	r4, r0
 800856c:	2301      	movs	r3, #1
 800856e:	e7f0      	b.n	8008552 <_vfiprintf_r+0x1da>
 8008570:	ab03      	add	r3, sp, #12
 8008572:	9300      	str	r3, [sp, #0]
 8008574:	462a      	mov	r2, r5
 8008576:	4b16      	ldr	r3, [pc, #88]	; (80085d0 <_vfiprintf_r+0x258>)
 8008578:	a904      	add	r1, sp, #16
 800857a:	4630      	mov	r0, r6
 800857c:	f7fd fc76 	bl	8005e6c <_printf_float>
 8008580:	4607      	mov	r7, r0
 8008582:	1c78      	adds	r0, r7, #1
 8008584:	d1d6      	bne.n	8008534 <_vfiprintf_r+0x1bc>
 8008586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008588:	07d9      	lsls	r1, r3, #31
 800858a:	d405      	bmi.n	8008598 <_vfiprintf_r+0x220>
 800858c:	89ab      	ldrh	r3, [r5, #12]
 800858e:	059a      	lsls	r2, r3, #22
 8008590:	d402      	bmi.n	8008598 <_vfiprintf_r+0x220>
 8008592:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008594:	f7ff f9d0 	bl	8007938 <__retarget_lock_release_recursive>
 8008598:	89ab      	ldrh	r3, [r5, #12]
 800859a:	065b      	lsls	r3, r3, #25
 800859c:	f53f af12 	bmi.w	80083c4 <_vfiprintf_r+0x4c>
 80085a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085a2:	e711      	b.n	80083c8 <_vfiprintf_r+0x50>
 80085a4:	ab03      	add	r3, sp, #12
 80085a6:	9300      	str	r3, [sp, #0]
 80085a8:	462a      	mov	r2, r5
 80085aa:	4b09      	ldr	r3, [pc, #36]	; (80085d0 <_vfiprintf_r+0x258>)
 80085ac:	a904      	add	r1, sp, #16
 80085ae:	4630      	mov	r0, r6
 80085b0:	f7fd ff00 	bl	80063b4 <_printf_i>
 80085b4:	e7e4      	b.n	8008580 <_vfiprintf_r+0x208>
 80085b6:	bf00      	nop
 80085b8:	08011bb0 	.word	0x08011bb0
 80085bc:	08011bd0 	.word	0x08011bd0
 80085c0:	08011b90 	.word	0x08011b90
 80085c4:	08011d4c 	.word	0x08011d4c
 80085c8:	08011d56 	.word	0x08011d56
 80085cc:	08005e6d 	.word	0x08005e6d
 80085d0:	08008353 	.word	0x08008353
 80085d4:	08011d52 	.word	0x08011d52

080085d8 <_putc_r>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	460d      	mov	r5, r1
 80085dc:	4614      	mov	r4, r2
 80085de:	4606      	mov	r6, r0
 80085e0:	b118      	cbz	r0, 80085ea <_putc_r+0x12>
 80085e2:	6983      	ldr	r3, [r0, #24]
 80085e4:	b90b      	cbnz	r3, 80085ea <_putc_r+0x12>
 80085e6:	f7ff f903 	bl	80077f0 <__sinit>
 80085ea:	4b1c      	ldr	r3, [pc, #112]	; (800865c <_putc_r+0x84>)
 80085ec:	429c      	cmp	r4, r3
 80085ee:	d124      	bne.n	800863a <_putc_r+0x62>
 80085f0:	6874      	ldr	r4, [r6, #4]
 80085f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085f4:	07d8      	lsls	r0, r3, #31
 80085f6:	d405      	bmi.n	8008604 <_putc_r+0x2c>
 80085f8:	89a3      	ldrh	r3, [r4, #12]
 80085fa:	0599      	lsls	r1, r3, #22
 80085fc:	d402      	bmi.n	8008604 <_putc_r+0x2c>
 80085fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008600:	f7ff f999 	bl	8007936 <__retarget_lock_acquire_recursive>
 8008604:	68a3      	ldr	r3, [r4, #8]
 8008606:	3b01      	subs	r3, #1
 8008608:	2b00      	cmp	r3, #0
 800860a:	60a3      	str	r3, [r4, #8]
 800860c:	da05      	bge.n	800861a <_putc_r+0x42>
 800860e:	69a2      	ldr	r2, [r4, #24]
 8008610:	4293      	cmp	r3, r2
 8008612:	db1c      	blt.n	800864e <_putc_r+0x76>
 8008614:	b2eb      	uxtb	r3, r5
 8008616:	2b0a      	cmp	r3, #10
 8008618:	d019      	beq.n	800864e <_putc_r+0x76>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	1c5a      	adds	r2, r3, #1
 800861e:	6022      	str	r2, [r4, #0]
 8008620:	701d      	strb	r5, [r3, #0]
 8008622:	b2ed      	uxtb	r5, r5
 8008624:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008626:	07da      	lsls	r2, r3, #31
 8008628:	d405      	bmi.n	8008636 <_putc_r+0x5e>
 800862a:	89a3      	ldrh	r3, [r4, #12]
 800862c:	059b      	lsls	r3, r3, #22
 800862e:	d402      	bmi.n	8008636 <_putc_r+0x5e>
 8008630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008632:	f7ff f981 	bl	8007938 <__retarget_lock_release_recursive>
 8008636:	4628      	mov	r0, r5
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	4b09      	ldr	r3, [pc, #36]	; (8008660 <_putc_r+0x88>)
 800863c:	429c      	cmp	r4, r3
 800863e:	d101      	bne.n	8008644 <_putc_r+0x6c>
 8008640:	68b4      	ldr	r4, [r6, #8]
 8008642:	e7d6      	b.n	80085f2 <_putc_r+0x1a>
 8008644:	4b07      	ldr	r3, [pc, #28]	; (8008664 <_putc_r+0x8c>)
 8008646:	429c      	cmp	r4, r3
 8008648:	bf08      	it	eq
 800864a:	68f4      	ldreq	r4, [r6, #12]
 800864c:	e7d1      	b.n	80085f2 <_putc_r+0x1a>
 800864e:	4629      	mov	r1, r5
 8008650:	4622      	mov	r2, r4
 8008652:	4630      	mov	r0, r6
 8008654:	f7fe f878 	bl	8006748 <__swbuf_r>
 8008658:	4605      	mov	r5, r0
 800865a:	e7e3      	b.n	8008624 <_putc_r+0x4c>
 800865c:	08011bb0 	.word	0x08011bb0
 8008660:	08011bd0 	.word	0x08011bd0
 8008664:	08011b90 	.word	0x08011b90

08008668 <_sbrk_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4d06      	ldr	r5, [pc, #24]	; (8008684 <_sbrk_r+0x1c>)
 800866c:	2300      	movs	r3, #0
 800866e:	4604      	mov	r4, r0
 8008670:	4608      	mov	r0, r1
 8008672:	602b      	str	r3, [r5, #0]
 8008674:	f7f8 ff04 	bl	8001480 <_sbrk>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_sbrk_r+0x1a>
 800867c:	682b      	ldr	r3, [r5, #0]
 800867e:	b103      	cbz	r3, 8008682 <_sbrk_r+0x1a>
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	20002b24 	.word	0x20002b24

08008688 <__sread>:
 8008688:	b510      	push	{r4, lr}
 800868a:	460c      	mov	r4, r1
 800868c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008690:	f000 f8e2 	bl	8008858 <_read_r>
 8008694:	2800      	cmp	r0, #0
 8008696:	bfab      	itete	ge
 8008698:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800869a:	89a3      	ldrhlt	r3, [r4, #12]
 800869c:	181b      	addge	r3, r3, r0
 800869e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086a2:	bfac      	ite	ge
 80086a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80086a6:	81a3      	strhlt	r3, [r4, #12]
 80086a8:	bd10      	pop	{r4, pc}

080086aa <__swrite>:
 80086aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ae:	461f      	mov	r7, r3
 80086b0:	898b      	ldrh	r3, [r1, #12]
 80086b2:	05db      	lsls	r3, r3, #23
 80086b4:	4605      	mov	r5, r0
 80086b6:	460c      	mov	r4, r1
 80086b8:	4616      	mov	r6, r2
 80086ba:	d505      	bpl.n	80086c8 <__swrite+0x1e>
 80086bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086c0:	2302      	movs	r3, #2
 80086c2:	2200      	movs	r2, #0
 80086c4:	f000 f898 	bl	80087f8 <_lseek_r>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086d2:	81a3      	strh	r3, [r4, #12]
 80086d4:	4632      	mov	r2, r6
 80086d6:	463b      	mov	r3, r7
 80086d8:	4628      	mov	r0, r5
 80086da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086de:	f000 b817 	b.w	8008710 <_write_r>

080086e2 <__sseek>:
 80086e2:	b510      	push	{r4, lr}
 80086e4:	460c      	mov	r4, r1
 80086e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086ea:	f000 f885 	bl	80087f8 <_lseek_r>
 80086ee:	1c43      	adds	r3, r0, #1
 80086f0:	89a3      	ldrh	r3, [r4, #12]
 80086f2:	bf15      	itete	ne
 80086f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80086f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086fe:	81a3      	strheq	r3, [r4, #12]
 8008700:	bf18      	it	ne
 8008702:	81a3      	strhne	r3, [r4, #12]
 8008704:	bd10      	pop	{r4, pc}

08008706 <__sclose>:
 8008706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800870a:	f000 b831 	b.w	8008770 <_close_r>
	...

08008710 <_write_r>:
 8008710:	b538      	push	{r3, r4, r5, lr}
 8008712:	4d07      	ldr	r5, [pc, #28]	; (8008730 <_write_r+0x20>)
 8008714:	4604      	mov	r4, r0
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	2200      	movs	r2, #0
 800871c:	602a      	str	r2, [r5, #0]
 800871e:	461a      	mov	r2, r3
 8008720:	f7f8 fe5d 	bl	80013de <_write>
 8008724:	1c43      	adds	r3, r0, #1
 8008726:	d102      	bne.n	800872e <_write_r+0x1e>
 8008728:	682b      	ldr	r3, [r5, #0]
 800872a:	b103      	cbz	r3, 800872e <_write_r+0x1e>
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	bd38      	pop	{r3, r4, r5, pc}
 8008730:	20002b24 	.word	0x20002b24

08008734 <__assert_func>:
 8008734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008736:	4614      	mov	r4, r2
 8008738:	461a      	mov	r2, r3
 800873a:	4b09      	ldr	r3, [pc, #36]	; (8008760 <__assert_func+0x2c>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	4605      	mov	r5, r0
 8008740:	68d8      	ldr	r0, [r3, #12]
 8008742:	b14c      	cbz	r4, 8008758 <__assert_func+0x24>
 8008744:	4b07      	ldr	r3, [pc, #28]	; (8008764 <__assert_func+0x30>)
 8008746:	9100      	str	r1, [sp, #0]
 8008748:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800874c:	4906      	ldr	r1, [pc, #24]	; (8008768 <__assert_func+0x34>)
 800874e:	462b      	mov	r3, r5
 8008750:	f000 f81e 	bl	8008790 <fiprintf>
 8008754:	f000 f89f 	bl	8008896 <abort>
 8008758:	4b04      	ldr	r3, [pc, #16]	; (800876c <__assert_func+0x38>)
 800875a:	461c      	mov	r4, r3
 800875c:	e7f3      	b.n	8008746 <__assert_func+0x12>
 800875e:	bf00      	nop
 8008760:	2000000c 	.word	0x2000000c
 8008764:	08011d5d 	.word	0x08011d5d
 8008768:	08011d6a 	.word	0x08011d6a
 800876c:	08011d98 	.word	0x08011d98

08008770 <_close_r>:
 8008770:	b538      	push	{r3, r4, r5, lr}
 8008772:	4d06      	ldr	r5, [pc, #24]	; (800878c <_close_r+0x1c>)
 8008774:	2300      	movs	r3, #0
 8008776:	4604      	mov	r4, r0
 8008778:	4608      	mov	r0, r1
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	f7f8 fe4b 	bl	8001416 <_close>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	d102      	bne.n	800878a <_close_r+0x1a>
 8008784:	682b      	ldr	r3, [r5, #0]
 8008786:	b103      	cbz	r3, 800878a <_close_r+0x1a>
 8008788:	6023      	str	r3, [r4, #0]
 800878a:	bd38      	pop	{r3, r4, r5, pc}
 800878c:	20002b24 	.word	0x20002b24

08008790 <fiprintf>:
 8008790:	b40e      	push	{r1, r2, r3}
 8008792:	b503      	push	{r0, r1, lr}
 8008794:	4601      	mov	r1, r0
 8008796:	ab03      	add	r3, sp, #12
 8008798:	4805      	ldr	r0, [pc, #20]	; (80087b0 <fiprintf+0x20>)
 800879a:	f853 2b04 	ldr.w	r2, [r3], #4
 800879e:	6800      	ldr	r0, [r0, #0]
 80087a0:	9301      	str	r3, [sp, #4]
 80087a2:	f7ff fde9 	bl	8008378 <_vfiprintf_r>
 80087a6:	b002      	add	sp, #8
 80087a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80087ac:	b003      	add	sp, #12
 80087ae:	4770      	bx	lr
 80087b0:	2000000c 	.word	0x2000000c

080087b4 <_fstat_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	4d07      	ldr	r5, [pc, #28]	; (80087d4 <_fstat_r+0x20>)
 80087b8:	2300      	movs	r3, #0
 80087ba:	4604      	mov	r4, r0
 80087bc:	4608      	mov	r0, r1
 80087be:	4611      	mov	r1, r2
 80087c0:	602b      	str	r3, [r5, #0]
 80087c2:	f7f8 fe34 	bl	800142e <_fstat>
 80087c6:	1c43      	adds	r3, r0, #1
 80087c8:	d102      	bne.n	80087d0 <_fstat_r+0x1c>
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	b103      	cbz	r3, 80087d0 <_fstat_r+0x1c>
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	bd38      	pop	{r3, r4, r5, pc}
 80087d2:	bf00      	nop
 80087d4:	20002b24 	.word	0x20002b24

080087d8 <_isatty_r>:
 80087d8:	b538      	push	{r3, r4, r5, lr}
 80087da:	4d06      	ldr	r5, [pc, #24]	; (80087f4 <_isatty_r+0x1c>)
 80087dc:	2300      	movs	r3, #0
 80087de:	4604      	mov	r4, r0
 80087e0:	4608      	mov	r0, r1
 80087e2:	602b      	str	r3, [r5, #0]
 80087e4:	f7f8 fe33 	bl	800144e <_isatty>
 80087e8:	1c43      	adds	r3, r0, #1
 80087ea:	d102      	bne.n	80087f2 <_isatty_r+0x1a>
 80087ec:	682b      	ldr	r3, [r5, #0]
 80087ee:	b103      	cbz	r3, 80087f2 <_isatty_r+0x1a>
 80087f0:	6023      	str	r3, [r4, #0]
 80087f2:	bd38      	pop	{r3, r4, r5, pc}
 80087f4:	20002b24 	.word	0x20002b24

080087f8 <_lseek_r>:
 80087f8:	b538      	push	{r3, r4, r5, lr}
 80087fa:	4d07      	ldr	r5, [pc, #28]	; (8008818 <_lseek_r+0x20>)
 80087fc:	4604      	mov	r4, r0
 80087fe:	4608      	mov	r0, r1
 8008800:	4611      	mov	r1, r2
 8008802:	2200      	movs	r2, #0
 8008804:	602a      	str	r2, [r5, #0]
 8008806:	461a      	mov	r2, r3
 8008808:	f7f8 fe2c 	bl	8001464 <_lseek>
 800880c:	1c43      	adds	r3, r0, #1
 800880e:	d102      	bne.n	8008816 <_lseek_r+0x1e>
 8008810:	682b      	ldr	r3, [r5, #0]
 8008812:	b103      	cbz	r3, 8008816 <_lseek_r+0x1e>
 8008814:	6023      	str	r3, [r4, #0]
 8008816:	bd38      	pop	{r3, r4, r5, pc}
 8008818:	20002b24 	.word	0x20002b24

0800881c <__ascii_mbtowc>:
 800881c:	b082      	sub	sp, #8
 800881e:	b901      	cbnz	r1, 8008822 <__ascii_mbtowc+0x6>
 8008820:	a901      	add	r1, sp, #4
 8008822:	b142      	cbz	r2, 8008836 <__ascii_mbtowc+0x1a>
 8008824:	b14b      	cbz	r3, 800883a <__ascii_mbtowc+0x1e>
 8008826:	7813      	ldrb	r3, [r2, #0]
 8008828:	600b      	str	r3, [r1, #0]
 800882a:	7812      	ldrb	r2, [r2, #0]
 800882c:	1e10      	subs	r0, r2, #0
 800882e:	bf18      	it	ne
 8008830:	2001      	movne	r0, #1
 8008832:	b002      	add	sp, #8
 8008834:	4770      	bx	lr
 8008836:	4610      	mov	r0, r2
 8008838:	e7fb      	b.n	8008832 <__ascii_mbtowc+0x16>
 800883a:	f06f 0001 	mvn.w	r0, #1
 800883e:	e7f8      	b.n	8008832 <__ascii_mbtowc+0x16>

08008840 <__malloc_lock>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__malloc_lock+0x8>)
 8008842:	f7ff b878 	b.w	8007936 <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	20002b18 	.word	0x20002b18

0800884c <__malloc_unlock>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__malloc_unlock+0x8>)
 800884e:	f7ff b873 	b.w	8007938 <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	20002b18 	.word	0x20002b18

08008858 <_read_r>:
 8008858:	b538      	push	{r3, r4, r5, lr}
 800885a:	4d07      	ldr	r5, [pc, #28]	; (8008878 <_read_r+0x20>)
 800885c:	4604      	mov	r4, r0
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	2200      	movs	r2, #0
 8008864:	602a      	str	r2, [r5, #0]
 8008866:	461a      	mov	r2, r3
 8008868:	f7f8 fd9c 	bl	80013a4 <_read>
 800886c:	1c43      	adds	r3, r0, #1
 800886e:	d102      	bne.n	8008876 <_read_r+0x1e>
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	b103      	cbz	r3, 8008876 <_read_r+0x1e>
 8008874:	6023      	str	r3, [r4, #0]
 8008876:	bd38      	pop	{r3, r4, r5, pc}
 8008878:	20002b24 	.word	0x20002b24

0800887c <__ascii_wctomb>:
 800887c:	b149      	cbz	r1, 8008892 <__ascii_wctomb+0x16>
 800887e:	2aff      	cmp	r2, #255	; 0xff
 8008880:	bf85      	ittet	hi
 8008882:	238a      	movhi	r3, #138	; 0x8a
 8008884:	6003      	strhi	r3, [r0, #0]
 8008886:	700a      	strbls	r2, [r1, #0]
 8008888:	f04f 30ff 	movhi.w	r0, #4294967295
 800888c:	bf98      	it	ls
 800888e:	2001      	movls	r0, #1
 8008890:	4770      	bx	lr
 8008892:	4608      	mov	r0, r1
 8008894:	4770      	bx	lr

08008896 <abort>:
 8008896:	b508      	push	{r3, lr}
 8008898:	2006      	movs	r0, #6
 800889a:	f000 f82b 	bl	80088f4 <raise>
 800889e:	2001      	movs	r0, #1
 80088a0:	f7f8 fd76 	bl	8001390 <_exit>

080088a4 <_raise_r>:
 80088a4:	291f      	cmp	r1, #31
 80088a6:	b538      	push	{r3, r4, r5, lr}
 80088a8:	4604      	mov	r4, r0
 80088aa:	460d      	mov	r5, r1
 80088ac:	d904      	bls.n	80088b8 <_raise_r+0x14>
 80088ae:	2316      	movs	r3, #22
 80088b0:	6003      	str	r3, [r0, #0]
 80088b2:	f04f 30ff 	mov.w	r0, #4294967295
 80088b6:	bd38      	pop	{r3, r4, r5, pc}
 80088b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80088ba:	b112      	cbz	r2, 80088c2 <_raise_r+0x1e>
 80088bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088c0:	b94b      	cbnz	r3, 80088d6 <_raise_r+0x32>
 80088c2:	4620      	mov	r0, r4
 80088c4:	f000 f830 	bl	8008928 <_getpid_r>
 80088c8:	462a      	mov	r2, r5
 80088ca:	4601      	mov	r1, r0
 80088cc:	4620      	mov	r0, r4
 80088ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088d2:	f000 b817 	b.w	8008904 <_kill_r>
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d00a      	beq.n	80088f0 <_raise_r+0x4c>
 80088da:	1c59      	adds	r1, r3, #1
 80088dc:	d103      	bne.n	80088e6 <_raise_r+0x42>
 80088de:	2316      	movs	r3, #22
 80088e0:	6003      	str	r3, [r0, #0]
 80088e2:	2001      	movs	r0, #1
 80088e4:	e7e7      	b.n	80088b6 <_raise_r+0x12>
 80088e6:	2400      	movs	r4, #0
 80088e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80088ec:	4628      	mov	r0, r5
 80088ee:	4798      	blx	r3
 80088f0:	2000      	movs	r0, #0
 80088f2:	e7e0      	b.n	80088b6 <_raise_r+0x12>

080088f4 <raise>:
 80088f4:	4b02      	ldr	r3, [pc, #8]	; (8008900 <raise+0xc>)
 80088f6:	4601      	mov	r1, r0
 80088f8:	6818      	ldr	r0, [r3, #0]
 80088fa:	f7ff bfd3 	b.w	80088a4 <_raise_r>
 80088fe:	bf00      	nop
 8008900:	2000000c 	.word	0x2000000c

08008904 <_kill_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4d07      	ldr	r5, [pc, #28]	; (8008924 <_kill_r+0x20>)
 8008908:	2300      	movs	r3, #0
 800890a:	4604      	mov	r4, r0
 800890c:	4608      	mov	r0, r1
 800890e:	4611      	mov	r1, r2
 8008910:	602b      	str	r3, [r5, #0]
 8008912:	f7f8 fd2d 	bl	8001370 <_kill>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d102      	bne.n	8008920 <_kill_r+0x1c>
 800891a:	682b      	ldr	r3, [r5, #0]
 800891c:	b103      	cbz	r3, 8008920 <_kill_r+0x1c>
 800891e:	6023      	str	r3, [r4, #0]
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	bf00      	nop
 8008924:	20002b24 	.word	0x20002b24

08008928 <_getpid_r>:
 8008928:	f7f8 bd1a 	b.w	8001360 <_getpid>

0800892c <sqrtf>:
 800892c:	b508      	push	{r3, lr}
 800892e:	ed2d 8b02 	vpush	{d8}
 8008932:	eeb0 8a40 	vmov.f32	s16, s0
 8008936:	f000 f817 	bl	8008968 <__ieee754_sqrtf>
 800893a:	eeb4 8a48 	vcmp.f32	s16, s16
 800893e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008942:	d60c      	bvs.n	800895e <sqrtf+0x32>
 8008944:	eddf 8a07 	vldr	s17, [pc, #28]	; 8008964 <sqrtf+0x38>
 8008948:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800894c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008950:	d505      	bpl.n	800895e <sqrtf+0x32>
 8008952:	f7fd f9b9 	bl	8005cc8 <__errno>
 8008956:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800895a:	2321      	movs	r3, #33	; 0x21
 800895c:	6003      	str	r3, [r0, #0]
 800895e:	ecbd 8b02 	vpop	{d8}
 8008962:	bd08      	pop	{r3, pc}
 8008964:	00000000 	.word	0x00000000

08008968 <__ieee754_sqrtf>:
 8008968:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800896c:	4770      	bx	lr
	...

08008970 <_init>:
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	bf00      	nop
 8008974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008976:	bc08      	pop	{r3}
 8008978:	469e      	mov	lr, r3
 800897a:	4770      	bx	lr

0800897c <_fini>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr
