
ASD_FFT_F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006be0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000536c  08006db0  08006db0  00016db0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c11c  0800c11c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c11c  0800c11c  0001c11c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c124  0800c124  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c124  0800c124  0001c124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c128  0800c128  0001c128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003080  200001dc  0800c308  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000325c  0800c308  0002325c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9ea  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e51  00000000  00000000  0002bbf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008a0  00000000  00000000  0002da48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002200c  00000000  00000000  0002eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b601  00000000  00000000  00050b1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cbb19  00000000  00000000  0005c11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000be  00000000  00000000  00127c36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003220  00000000  00000000  00127cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00002178  00000000  00000000  0012af14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006d98 	.word	0x08006d98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08006d98 	.word	0x08006d98

08000210 <arm_bitreversal_32>:
 8000210:	1c4b      	adds	r3, r1, #1
 8000212:	2b01      	cmp	r3, #1
 8000214:	bf98      	it	ls
 8000216:	4770      	bxls	lr
 8000218:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800021c:	1c91      	adds	r1, r2, #2
 800021e:	089b      	lsrs	r3, r3, #2

08000220 <arm_bitreversal_32_0>:
 8000220:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000224:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000228:	880a      	ldrh	r2, [r1, #0]
 800022a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800022e:	4480      	add	r8, r0
 8000230:	4481      	add	r9, r0
 8000232:	4402      	add	r2, r0
 8000234:	4484      	add	ip, r0
 8000236:	f8d9 7000 	ldr.w	r7, [r9]
 800023a:	f8d8 6000 	ldr.w	r6, [r8]
 800023e:	6815      	ldr	r5, [r2, #0]
 8000240:	f8dc 4000 	ldr.w	r4, [ip]
 8000244:	f8c9 6000 	str.w	r6, [r9]
 8000248:	f8c8 7000 	str.w	r7, [r8]
 800024c:	f8cc 5000 	str.w	r5, [ip]
 8000250:	6014      	str	r4, [r2, #0]
 8000252:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000256:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800025a:	6855      	ldr	r5, [r2, #4]
 800025c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000260:	f8c9 6004 	str.w	r6, [r9, #4]
 8000264:	f8c8 7004 	str.w	r7, [r8, #4]
 8000268:	f8cc 5004 	str.w	r5, [ip, #4]
 800026c:	6054      	str	r4, [r2, #4]
 800026e:	3108      	adds	r1, #8
 8000270:	3b01      	subs	r3, #1
 8000272:	d1d5      	bne.n	8000220 <arm_bitreversal_32_0>
 8000274:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000278:	4770      	bx	lr

0800027a <arm_bitreversal_16>:
 800027a:	1c4b      	adds	r3, r1, #1
 800027c:	2b01      	cmp	r3, #1
 800027e:	bf98      	it	ls
 8000280:	4770      	bxls	lr
 8000282:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	1c91      	adds	r1, r2, #2
 8000288:	089b      	lsrs	r3, r3, #2

0800028a <arm_bitreversal_16_0>:
 800028a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800028e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000292:	880a      	ldrh	r2, [r1, #0]
 8000294:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000298:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800029c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 80002a0:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 80002a4:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a8:	f8d9 7000 	ldr.w	r7, [r9]
 80002ac:	f8d8 6000 	ldr.w	r6, [r8]
 80002b0:	6815      	ldr	r5, [r2, #0]
 80002b2:	f8dc 4000 	ldr.w	r4, [ip]
 80002b6:	f8c9 6000 	str.w	r6, [r9]
 80002ba:	f8c8 7000 	str.w	r7, [r8]
 80002be:	f8cc 5000 	str.w	r5, [ip]
 80002c2:	6014      	str	r4, [r2, #0]
 80002c4:	3108      	adds	r1, #8
 80002c6:	3b01      	subs	r3, #1
 80002c8:	d1df      	bne.n	800028a <arm_bitreversal_16_0>
 80002ca:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002ce:	4770      	bx	lr

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b974 	b.w	8000fa8 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	468e      	mov	lr, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14d      	bne.n	8000d82 <__udivmoddi4+0xaa>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4694      	mov	ip, r2
 8000cea:	d969      	bls.n	8000dc0 <__udivmoddi4+0xe8>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b152      	cbz	r2, 8000d08 <__udivmoddi4+0x30>
 8000cf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cf6:	f1c2 0120 	rsb	r1, r2, #32
 8000cfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d02:	ea41 0e03 	orr.w	lr, r1, r3
 8000d06:	4094      	lsls	r4, r2
 8000d08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d0c:	0c21      	lsrs	r1, r4, #16
 8000d0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d12:	fa1f f78c 	uxth.w	r7, ip
 8000d16:	fb08 e316 	mls	r3, r8, r6, lr
 8000d1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d1e:	fb06 f107 	mul.w	r1, r6, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d90a      	bls.n	8000d3c <__udivmoddi4+0x64>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d2e:	f080 811f 	bcs.w	8000f70 <__udivmoddi4+0x298>
 8000d32:	4299      	cmp	r1, r3
 8000d34:	f240 811c 	bls.w	8000f70 <__udivmoddi4+0x298>
 8000d38:	3e02      	subs	r6, #2
 8000d3a:	4463      	add	r3, ip
 8000d3c:	1a5b      	subs	r3, r3, r1
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d44:	fb08 3310 	mls	r3, r8, r0, r3
 8000d48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d4c:	fb00 f707 	mul.w	r7, r0, r7
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x92>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5c:	f080 810a 	bcs.w	8000f74 <__udivmoddi4+0x29c>
 8000d60:	42a7      	cmp	r7, r4
 8000d62:	f240 8107 	bls.w	8000f74 <__udivmoddi4+0x29c>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d6e:	1be4      	subs	r4, r4, r7
 8000d70:	2600      	movs	r6, #0
 8000d72:	b11d      	cbz	r5, 8000d7c <__udivmoddi4+0xa4>
 8000d74:	40d4      	lsrs	r4, r2
 8000d76:	2300      	movs	r3, #0
 8000d78:	e9c5 4300 	strd	r4, r3, [r5]
 8000d7c:	4631      	mov	r1, r6
 8000d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d909      	bls.n	8000d9a <__udivmoddi4+0xc2>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	f000 80ef 	beq.w	8000f6a <__udivmoddi4+0x292>
 8000d8c:	2600      	movs	r6, #0
 8000d8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d92:	4630      	mov	r0, r6
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	fab3 f683 	clz	r6, r3
 8000d9e:	2e00      	cmp	r6, #0
 8000da0:	d14a      	bne.n	8000e38 <__udivmoddi4+0x160>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d302      	bcc.n	8000dac <__udivmoddi4+0xd4>
 8000da6:	4282      	cmp	r2, r0
 8000da8:	f200 80f9 	bhi.w	8000f9e <__udivmoddi4+0x2c6>
 8000dac:	1a84      	subs	r4, r0, r2
 8000dae:	eb61 0303 	sbc.w	r3, r1, r3
 8000db2:	2001      	movs	r0, #1
 8000db4:	469e      	mov	lr, r3
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	d0e0      	beq.n	8000d7c <__udivmoddi4+0xa4>
 8000dba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dbe:	e7dd      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000dc0:	b902      	cbnz	r2, 8000dc4 <__udivmoddi4+0xec>
 8000dc2:	deff      	udf	#255	; 0xff
 8000dc4:	fab2 f282 	clz	r2, r2
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	f040 8092 	bne.w	8000ef2 <__udivmoddi4+0x21a>
 8000dce:	eba1 010c 	sub.w	r1, r1, ip
 8000dd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd6:	fa1f fe8c 	uxth.w	lr, ip
 8000dda:	2601      	movs	r6, #1
 8000ddc:	0c20      	lsrs	r0, r4, #16
 8000dde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000de2:	fb07 1113 	mls	r1, r7, r3, r1
 8000de6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dea:	fb0e f003 	mul.w	r0, lr, r3
 8000dee:	4288      	cmp	r0, r1
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x12c>
 8000df2:	eb1c 0101 	adds.w	r1, ip, r1
 8000df6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x12a>
 8000dfc:	4288      	cmp	r0, r1
 8000dfe:	f200 80cb 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e02:	4643      	mov	r3, r8
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e14:	fb0e fe00 	mul.w	lr, lr, r0
 8000e18:	45a6      	cmp	lr, r4
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x156>
 8000e1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e24:	d202      	bcs.n	8000e2c <__udivmoddi4+0x154>
 8000e26:	45a6      	cmp	lr, r4
 8000e28:	f200 80bb 	bhi.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	eba4 040e 	sub.w	r4, r4, lr
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	e79c      	b.n	8000d72 <__udivmoddi4+0x9a>
 8000e38:	f1c6 0720 	rsb	r7, r6, #32
 8000e3c:	40b3      	lsls	r3, r6
 8000e3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e46:	fa20 f407 	lsr.w	r4, r0, r7
 8000e4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e4e:	431c      	orrs	r4, r3
 8000e50:	40f9      	lsrs	r1, r7
 8000e52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e56:	fa00 f306 	lsl.w	r3, r0, r6
 8000e5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e5e:	0c20      	lsrs	r0, r4, #16
 8000e60:	fa1f fe8c 	uxth.w	lr, ip
 8000e64:	fb09 1118 	mls	r1, r9, r8, r1
 8000e68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e70:	4288      	cmp	r0, r1
 8000e72:	fa02 f206 	lsl.w	r2, r2, r6
 8000e76:	d90b      	bls.n	8000e90 <__udivmoddi4+0x1b8>
 8000e78:	eb1c 0101 	adds.w	r1, ip, r1
 8000e7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e80:	f080 8088 	bcs.w	8000f94 <__udivmoddi4+0x2bc>
 8000e84:	4288      	cmp	r0, r1
 8000e86:	f240 8085 	bls.w	8000f94 <__udivmoddi4+0x2bc>
 8000e8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e98:	fb09 1110 	mls	r1, r9, r0, r1
 8000e9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ea0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ea4:	458e      	cmp	lr, r1
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x1e2>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eb0:	d26c      	bcs.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb2:	458e      	cmp	lr, r1
 8000eb4:	d96a      	bls.n	8000f8c <__udivmoddi4+0x2b4>
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	4461      	add	r1, ip
 8000eba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ebe:	fba0 9402 	umull	r9, r4, r0, r2
 8000ec2:	eba1 010e 	sub.w	r1, r1, lr
 8000ec6:	42a1      	cmp	r1, r4
 8000ec8:	46c8      	mov	r8, r9
 8000eca:	46a6      	mov	lr, r4
 8000ecc:	d356      	bcc.n	8000f7c <__udivmoddi4+0x2a4>
 8000ece:	d053      	beq.n	8000f78 <__udivmoddi4+0x2a0>
 8000ed0:	b15d      	cbz	r5, 8000eea <__udivmoddi4+0x212>
 8000ed2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ed6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eda:	fa01 f707 	lsl.w	r7, r1, r7
 8000ede:	fa22 f306 	lsr.w	r3, r2, r6
 8000ee2:	40f1      	lsrs	r1, r6
 8000ee4:	431f      	orrs	r7, r3
 8000ee6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eea:	2600      	movs	r6, #0
 8000eec:	4631      	mov	r1, r6
 8000eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef2:	f1c2 0320 	rsb	r3, r2, #32
 8000ef6:	40d8      	lsrs	r0, r3
 8000ef8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000efc:	fa21 f303 	lsr.w	r3, r1, r3
 8000f00:	4091      	lsls	r1, r2
 8000f02:	4301      	orrs	r1, r0
 8000f04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f08:	fa1f fe8c 	uxth.w	lr, ip
 8000f0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f10:	fb07 3610 	mls	r6, r7, r0, r3
 8000f14:	0c0b      	lsrs	r3, r1, #16
 8000f16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f1e:	429e      	cmp	r6, r3
 8000f20:	fa04 f402 	lsl.w	r4, r4, r2
 8000f24:	d908      	bls.n	8000f38 <__udivmoddi4+0x260>
 8000f26:	eb1c 0303 	adds.w	r3, ip, r3
 8000f2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f2e:	d22f      	bcs.n	8000f90 <__udivmoddi4+0x2b8>
 8000f30:	429e      	cmp	r6, r3
 8000f32:	d92d      	bls.n	8000f90 <__udivmoddi4+0x2b8>
 8000f34:	3802      	subs	r0, #2
 8000f36:	4463      	add	r3, ip
 8000f38:	1b9b      	subs	r3, r3, r6
 8000f3a:	b289      	uxth	r1, r1
 8000f3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f40:	fb07 3316 	mls	r3, r7, r6, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb06 f30e 	mul.w	r3, r6, lr
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d908      	bls.n	8000f62 <__udivmoddi4+0x28a>
 8000f50:	eb1c 0101 	adds.w	r1, ip, r1
 8000f54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f58:	d216      	bcs.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d914      	bls.n	8000f88 <__udivmoddi4+0x2b0>
 8000f5e:	3e02      	subs	r6, #2
 8000f60:	4461      	add	r1, ip
 8000f62:	1ac9      	subs	r1, r1, r3
 8000f64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f68:	e738      	b.n	8000ddc <__udivmoddi4+0x104>
 8000f6a:	462e      	mov	r6, r5
 8000f6c:	4628      	mov	r0, r5
 8000f6e:	e705      	b.n	8000d7c <__udivmoddi4+0xa4>
 8000f70:	4606      	mov	r6, r0
 8000f72:	e6e3      	b.n	8000d3c <__udivmoddi4+0x64>
 8000f74:	4618      	mov	r0, r3
 8000f76:	e6f8      	b.n	8000d6a <__udivmoddi4+0x92>
 8000f78:	454b      	cmp	r3, r9
 8000f7a:	d2a9      	bcs.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f84:	3801      	subs	r0, #1
 8000f86:	e7a3      	b.n	8000ed0 <__udivmoddi4+0x1f8>
 8000f88:	4646      	mov	r6, r8
 8000f8a:	e7ea      	b.n	8000f62 <__udivmoddi4+0x28a>
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	e794      	b.n	8000eba <__udivmoddi4+0x1e2>
 8000f90:	4640      	mov	r0, r8
 8000f92:	e7d1      	b.n	8000f38 <__udivmoddi4+0x260>
 8000f94:	46d0      	mov	r8, sl
 8000f96:	e77b      	b.n	8000e90 <__udivmoddi4+0x1b8>
 8000f98:	3b02      	subs	r3, #2
 8000f9a:	4461      	add	r1, ip
 8000f9c:	e732      	b.n	8000e04 <__udivmoddi4+0x12c>
 8000f9e:	4630      	mov	r0, r6
 8000fa0:	e709      	b.n	8000db6 <__udivmoddi4+0xde>
 8000fa2:	4464      	add	r4, ip
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	e742      	b.n	8000e2e <__udivmoddi4+0x156>

08000fa8 <__aeabi_idiv0>:
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop

08000fac <get_comparison_error>:
float32_t Output[TEST_SAMPLES_COUNT];

/* Reference index at which max energy of bin ocuurs */
uint32_t refIndex = 213, testIndex = 0;

static float32_t get_comparison_error(const float32_t* ref_mags, const float32_t* test_mags, int count) {
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	static float32_t cmp_error = 0, rel_error=0;

	for (int i = 0; i < count; ++i) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e034      	b.n	8001028 <get_comparison_error+0x7c>
		rel_error = (ref_mags[i] - test_mags[i]) / ref_mags[i];
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	68fa      	ldr	r2, [r7, #12]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	ed93 7a00 	vldr	s14, [r3]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	edd3 7a00 	vldr	s15, [r3]
 8000fd6:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	ed93 7a00 	vldr	s14, [r3]
 8000fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fea:	4b1d      	ldr	r3, [pc, #116]	; (8001060 <get_comparison_error+0xb4>)
 8000fec:	edc3 7a00 	vstr	s15, [r3]
		cmp_error += rel_error < 0 ? -rel_error : rel_error;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <get_comparison_error+0xb4>)
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ffe:	d505      	bpl.n	800100c <get_comparison_error+0x60>
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <get_comparison_error+0xb4>)
 8001002:	edd3 7a00 	vldr	s15, [r3]
 8001006:	eef1 7a67 	vneg.f32	s15, s15
 800100a:	e002      	b.n	8001012 <get_comparison_error+0x66>
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <get_comparison_error+0xb4>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <get_comparison_error+0xb8>)
 8001014:	ed93 7a00 	vldr	s14, [r3]
 8001018:	ee77 7a87 	vadd.f32	s15, s15, s14
 800101c:	4b11      	ldr	r3, [pc, #68]	; (8001064 <get_comparison_error+0xb8>)
 800101e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < count; ++i) {
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3301      	adds	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697a      	ldr	r2, [r7, #20]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	429a      	cmp	r2, r3
 800102e:	dbc6      	blt.n	8000fbe <get_comparison_error+0x12>
	}
	return 100*cmp_error/count;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <get_comparison_error+0xb8>)
 8001032:	edd3 7a00 	vldr	s15, [r3]
 8001036:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001068 <get_comparison_error+0xbc>
 800103a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001048:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800104c:	eef0 7a66 	vmov.f32	s15, s13
}
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	2000323c 	.word	0x2000323c
 8001064:	20003240 	.word	0x20003240
 8001068:	42c80000 	.word	0x42c80000

0800106c <execute_testbench>:

void execute_testbench() {
 800106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106e:	b08d      	sub	sp, #52	; 0x34
 8001070:	af04      	add	r7, sp, #16
	float32_t maxValue;				/* Max FFT value is stored here */
	uint32_t maxIndex;				/* Index in Output array where max value is */
	int i = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]

	/* Real part, make offset by ADC / 2 */
	for (i = 0; i < TEST_SAMPLES_COUNT*2; i+=2)
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
 800107a:	e00f      	b.n	800109c <execute_testbench+0x30>
		Input[i] = (float32_t)(test_signal[i/2]);
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	0fda      	lsrs	r2, r3, #31
 8001080:	4413      	add	r3, r2
 8001082:	105b      	asrs	r3, r3, #1
 8001084:	4aa1      	ldr	r2, [pc, #644]	; (800130c <execute_testbench+0x2a0>)
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	49a0      	ldr	r1, [pc, #640]	; (8001310 <execute_testbench+0x2a4>)
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	601a      	str	r2, [r3, #0]
	for (i = 0; i < TEST_SAMPLES_COUNT*2; i+=2)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3302      	adds	r3, #2
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a2:	dbeb      	blt.n	800107c <execute_testbench+0x10>

	/* Imaginary part, make offset by ADC / 2 + 1 */
	for (i = 1; i < TEST_SAMPLES_COUNT*2; i+=2)
 80010a4:	2301      	movs	r3, #1
 80010a6:	61fb      	str	r3, [r7, #28]
 80010a8:	e009      	b.n	80010be <execute_testbench+0x52>
		Input[i] = 0;
 80010aa:	4a99      	ldr	r2, [pc, #612]	; (8001310 <execute_testbench+0x2a4>)
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4413      	add	r3, r2
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
	for (i = 1; i < TEST_SAMPLES_COUNT*2; i+=2)
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	3302      	adds	r3, #2
 80010bc:	61fb      	str	r3, [r7, #28]
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010c4:	dbf1      	blt.n	80010aa <execute_testbench+0x3e>

	/* Process the data through the CFFT/CIFFT module */
	assert(TEST_SAMPLES_COUNT == 1024);
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, Input, 0, 1);
 80010c6:	2301      	movs	r3, #1
 80010c8:	2200      	movs	r2, #0
 80010ca:	4991      	ldr	r1, [pc, #580]	; (8001310 <execute_testbench+0x2a4>)
 80010cc:	4891      	ldr	r0, [pc, #580]	; (8001314 <execute_testbench+0x2a8>)
 80010ce:	f002 fbb9 	bl	8003844 <arm_cfft_f32>

	/* Process the data through the Complex Magniture Module for calculating the magnitude at each bin */
	arm_cmplx_mag_f32(Input, Output, TEST_SAMPLES_COUNT);
 80010d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010d6:	4990      	ldr	r1, [pc, #576]	; (8001318 <execute_testbench+0x2ac>)
 80010d8:	488d      	ldr	r0, [pc, #564]	; (8001310 <execute_testbench+0x2a4>)
 80010da:	f002 fc2d 	bl	8003938 <arm_cmplx_mag_f32>

	/* Calculates maxValue and returns corresponding value */
	arm_max_f32(Output, TEST_SAMPLES_COUNT, &maxValue, &maxIndex);
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	f107 0208 	add.w	r2, r7, #8
 80010e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e8:	488b      	ldr	r0, [pc, #556]	; (8001318 <execute_testbench+0x2ac>)
 80010ea:	f002 f815 	bl	8003118 <arm_max_f32>

	float32_t mean_rel_error = get_comparison_error(test_megs, Output, TEST_SAMPLES_COUNT);
 80010ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010f2:	4989      	ldr	r1, [pc, #548]	; (8001318 <execute_testbench+0x2ac>)
 80010f4:	4889      	ldr	r0, [pc, #548]	; (800131c <execute_testbench+0x2b0>)
 80010f6:	f7ff ff59 	bl	8000fac <get_comparison_error>
 80010fa:	ed87 0a05 	vstr	s0, [r7, #20]
	printf("FFT EVALUATION DONE with error: %.3f %%\n\n", mean_rel_error);
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff faa2 	bl	8000648 <__aeabi_f2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4885      	ldr	r0, [pc, #532]	; (8001320 <execute_testbench+0x2b4>)
 800110a:	f003 fc8b 	bl	8004a24 <iprintf>

	printf("START INPUT SIGNAL %d:\n", TEST_SAMPLES_COUNT);
 800110e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001112:	4884      	ldr	r0, [pc, #528]	; (8001324 <execute_testbench+0x2b8>)
 8001114:	f003 fc86 	bl	8004a24 <iprintf>
	for (i = 0; i < TEST_SAMPLES_COUNT; i++)
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
 800111c:	e00f      	b.n	800113e <execute_testbench+0xd2>
		printf("%f, ",  test_signal[i]);
 800111e:	4a7b      	ldr	r2, [pc, #492]	; (800130c <execute_testbench+0x2a0>)
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fa8d 	bl	8000648 <__aeabi_f2d>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	487d      	ldr	r0, [pc, #500]	; (8001328 <execute_testbench+0x2bc>)
 8001134:	f003 fc76 	bl	8004a24 <iprintf>
	for (i = 0; i < TEST_SAMPLES_COUNT; i++)
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3301      	adds	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001144:	dbeb      	blt.n	800111e <execute_testbench+0xb2>
	printf("\n");
 8001146:	200a      	movs	r0, #10
 8001148:	f003 fc84 	bl	8004a54 <putchar>
	printf("STOP INPUT SIGNAL\n\n");
 800114c:	4877      	ldr	r0, [pc, #476]	; (800132c <execute_testbench+0x2c0>)
 800114e:	f003 fd05 	bl	8004b5c <puts>


	//retrive half
	printf("START MAGNITUDES %d:\n", TEST_SAMPLES_COUNT/2);
 8001152:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001156:	4876      	ldr	r0, [pc, #472]	; (8001330 <execute_testbench+0x2c4>)
 8001158:	f003 fc64 	bl	8004a24 <iprintf>
	for (i = 0; i < TEST_SAMPLES_COUNT/2; i++)
 800115c:	2300      	movs	r3, #0
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	e00f      	b.n	8001182 <execute_testbench+0x116>
		printf("%f, ",  Output[i]);
 8001162:	4a6d      	ldr	r2, [pc, #436]	; (8001318 <execute_testbench+0x2ac>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4413      	add	r3, r2
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fa6b 	bl	8000648 <__aeabi_f2d>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	486c      	ldr	r0, [pc, #432]	; (8001328 <execute_testbench+0x2bc>)
 8001178:	f003 fc54 	bl	8004a24 <iprintf>
	for (i = 0; i < TEST_SAMPLES_COUNT/2; i++)
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	3301      	adds	r3, #1
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001188:	dbeb      	blt.n	8001162 <execute_testbench+0xf6>
	printf("\n");
 800118a:	200a      	movs	r0, #10
 800118c:	f003 fc62 	bl	8004a54 <putchar>
	printf("STOP MAGNITUDES\n\n");
 8001190:	4868      	ldr	r0, [pc, #416]	; (8001334 <execute_testbench+0x2c8>)
 8001192:	f003 fce3 	bl	8004b5c <puts>


	//full to reconstruct
	printf("START REAL %d:\n", TEST_SAMPLES_COUNT);
 8001196:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800119a:	4867      	ldr	r0, [pc, #412]	; (8001338 <execute_testbench+0x2cc>)
 800119c:	f003 fc42 	bl	8004a24 <iprintf>
	for (i = 0; i < TEST_SAMPLES_COUNT*2; i+=2)
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	e00f      	b.n	80011c6 <execute_testbench+0x15a>
		printf("%f, ",  Input[i]);
 80011a6:	4a5a      	ldr	r2, [pc, #360]	; (8001310 <execute_testbench+0x2a4>)
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_f2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	485b      	ldr	r0, [pc, #364]	; (8001328 <execute_testbench+0x2bc>)
 80011bc:	f003 fc32 	bl	8004a24 <iprintf>
	for (i = 0; i < TEST_SAMPLES_COUNT*2; i+=2)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3302      	adds	r3, #2
 80011c4:	61fb      	str	r3, [r7, #28]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011cc:	dbeb      	blt.n	80011a6 <execute_testbench+0x13a>
	printf("\n");
 80011ce:	200a      	movs	r0, #10
 80011d0:	f003 fc40 	bl	8004a54 <putchar>
	printf("STOP REAL\n\n");
 80011d4:	4859      	ldr	r0, [pc, #356]	; (800133c <execute_testbench+0x2d0>)
 80011d6:	f003 fcc1 	bl	8004b5c <puts>


	//full to reconstruct
	printf("START IMAG %d:\n", TEST_SAMPLES_COUNT);
 80011da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011de:	4858      	ldr	r0, [pc, #352]	; (8001340 <execute_testbench+0x2d4>)
 80011e0:	f003 fc20 	bl	8004a24 <iprintf>
	for (i = 1; i < TEST_SAMPLES_COUNT*2; i+=2)
 80011e4:	2301      	movs	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	e00f      	b.n	800120a <execute_testbench+0x19e>
		printf("%f, ",  Input[i]);
 80011ea:	4a49      	ldr	r2, [pc, #292]	; (8001310 <execute_testbench+0x2a4>)
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fa27 	bl	8000648 <__aeabi_f2d>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	484a      	ldr	r0, [pc, #296]	; (8001328 <execute_testbench+0x2bc>)
 8001200:	f003 fc10 	bl	8004a24 <iprintf>
	for (i = 1; i < TEST_SAMPLES_COUNT*2; i+=2)
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	3302      	adds	r3, #2
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001210:	dbeb      	blt.n	80011ea <execute_testbench+0x17e>
	printf("\n");
 8001212:	200a      	movs	r0, #10
 8001214:	f003 fc1e 	bl	8004a54 <putchar>
	printf("STOP IMAG\n\n");
 8001218:	484a      	ldr	r0, [pc, #296]	; (8001344 <execute_testbench+0x2d8>)
 800121a:	f003 fc9f 	bl	8004b5c <puts>


	printf("START TEST, IT WILL TAKE %d MS...\n", INTERVAL);
 800121e:	f242 7110 	movw	r1, #10000	; 0x2710
 8001222:	4849      	ldr	r0, [pc, #292]	; (8001348 <execute_testbench+0x2dc>)
 8001224:	f003 fbfe 	bl	8004a24 <iprintf>
	uint32_t start_millis = HAL_GetTick();
 8001228:	f000 fb7c 	bl	8001924 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]
	float delta_millis = 0;
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	60fb      	str	r3, [r7, #12]
	int counter = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	61bb      	str	r3, [r7, #24]

	while(HAL_GetTick() - start_millis < INTERVAL) {
 8001238:	e008      	b.n	800124c <execute_testbench+0x1e0>
		arm_cmplx_mag_f32(Input, Output, TEST_SAMPLES_COUNT);
 800123a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123e:	4936      	ldr	r1, [pc, #216]	; (8001318 <execute_testbench+0x2ac>)
 8001240:	4833      	ldr	r0, [pc, #204]	; (8001310 <execute_testbench+0x2a4>)
 8001242:	f002 fb79 	bl	8003938 <arm_cmplx_mag_f32>
		++counter;
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	3301      	adds	r3, #1
 800124a:	61bb      	str	r3, [r7, #24]
	while(HAL_GetTick() - start_millis < INTERVAL) {
 800124c:	f000 fb6a 	bl	8001924 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f242 720f 	movw	r2, #9999	; 0x270f
 800125a:	4293      	cmp	r3, r2
 800125c:	d9ed      	bls.n	800123a <execute_testbench+0x1ce>
	}

	delta_millis = HAL_GetTick() - start_millis;
 800125e:	f000 fb61 	bl	8001924 <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	ee07 3a90 	vmov	s15, r3
 800126c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001270:	edc7 7a03 	vstr	s15, [r7, #12]
	printf("STOP TEST! DONE %d ITERATIONS AND (WITH %d FFT POINTS) GOT %d Hz REFRESH RATE (T = %d US), ERROR: %.3f%%.\n", counter, TEST_SAMPLES_COUNT, (int)(counter*1000.0/delta_millis), (int)(delta_millis*1000.0/counter), mean_rel_error);
 8001274:	69b8      	ldr	r0, [r7, #24]
 8001276:	f7ff f9d5 	bl	8000624 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b33      	ldr	r3, [pc, #204]	; (800134c <execute_testbench+0x2e0>)
 8001280:	f7ff fa3a 	bl	80006f8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	68f8      	ldr	r0, [r7, #12]
 800128e:	f7ff f9db 	bl	8000648 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4620      	mov	r0, r4
 8001298:	4629      	mov	r1, r5
 800129a:	f7ff fb57 	bl	800094c <__aeabi_ddiv>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fcd7 	bl	8000c58 <__aeabi_d2iz>
 80012aa:	4606      	mov	r6, r0
 80012ac:	68f8      	ldr	r0, [r7, #12]
 80012ae:	f7ff f9cb 	bl	8000648 <__aeabi_f2d>
 80012b2:	f04f 0200 	mov.w	r2, #0
 80012b6:	4b25      	ldr	r3, [pc, #148]	; (800134c <execute_testbench+0x2e0>)
 80012b8:	f7ff fa1e 	bl	80006f8 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4614      	mov	r4, r2
 80012c2:	461d      	mov	r5, r3
 80012c4:	69b8      	ldr	r0, [r7, #24]
 80012c6:	f7ff f9ad 	bl	8000624 <__aeabi_i2d>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4620      	mov	r0, r4
 80012d0:	4629      	mov	r1, r5
 80012d2:	f7ff fb3b 	bl	800094c <__aeabi_ddiv>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fcbb 	bl	8000c58 <__aeabi_d2iz>
 80012e2:	4604      	mov	r4, r0
 80012e4:	6978      	ldr	r0, [r7, #20]
 80012e6:	f7ff f9af 	bl	8000648 <__aeabi_f2d>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012f2:	9400      	str	r4, [sp, #0]
 80012f4:	4633      	mov	r3, r6
 80012f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012fa:	69b9      	ldr	r1, [r7, #24]
 80012fc:	4814      	ldr	r0, [pc, #80]	; (8001350 <execute_testbench+0x2e4>)
 80012fe:	f003 fb91 	bl	8004a24 <iprintf>
}
 8001302:	bf00      	nop
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800130a:	bf00      	nop
 800130c:	08006f0c 	.word	0x08006f0c
 8001310:	200001f8 	.word	0x200001f8
 8001314:	08008f24 	.word	0x08008f24
 8001318:	200021f8 	.word	0x200021f8
 800131c:	08007f0c 	.word	0x08007f0c
 8001320:	08006db0 	.word	0x08006db0
 8001324:	08006ddc 	.word	0x08006ddc
 8001328:	08006df4 	.word	0x08006df4
 800132c:	08006dfc 	.word	0x08006dfc
 8001330:	08006e10 	.word	0x08006e10
 8001334:	08006e28 	.word	0x08006e28
 8001338:	08006e3c 	.word	0x08006e3c
 800133c:	08006e4c 	.word	0x08006e4c
 8001340:	08006e58 	.word	0x08006e58
 8001344:	08006e68 	.word	0x08006e68
 8001348:	08006e74 	.word	0x08006e74
 800134c:	408f4000 	.word	0x408f4000
 8001350:	08006e98 	.word	0x08006e98

08001354 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b0a      	cmp	r3, #10
 8001360:	d102      	bne.n	8001368 <__io_putchar+0x14>
    __io_putchar('\r');
 8001362:	200d      	movs	r0, #13
 8001364:	f7ff fff6 	bl	8001354 <__io_putchar>
  }

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001368:	1d39      	adds	r1, r7, #4
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	2201      	movs	r2, #1
 8001370:	4803      	ldr	r0, [pc, #12]	; (8001380 <__io_putchar+0x2c>)
 8001372:	f001 fb5c 	bl	8002a2e <HAL_UART_Transmit>

  return 1;
 8001376:	2301      	movs	r3, #1
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200031f8 	.word	0x200031f8

08001384 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001388:	f000 fa66 	bl	8001858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800138c:	f000 f80c 	bl	80013a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001390:	f000 f8a6 	bl	80014e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001394:	f000 f87a 	bl	800148c <MX_USART2_UART_Init>

//  volatile static uint16_t value[2048];

//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)value, 2048);
	printf("Hello!\n");
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <main+0x20>)
 800139a:	f003 fbdf 	bl	8004b5c <puts>

	execute_testbench();
 800139e:	f7ff fe65 	bl	800106c <execute_testbench>


  while (1)
 80013a2:	e7fe      	b.n	80013a2 <main+0x1e>
 80013a4:	08006f04 	.word	0x08006f04

080013a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b094      	sub	sp, #80	; 0x50
 80013ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2234      	movs	r2, #52	; 0x34
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 fec2 	bl	8004140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013cc:	2300      	movs	r3, #0
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <SystemClock_Config+0xdc>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	4a2b      	ldr	r2, [pc, #172]	; (8001484 <SystemClock_Config+0xdc>)
 80013d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013da:	6413      	str	r3, [r2, #64]	; 0x40
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <SystemClock_Config+0xdc>)
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013e8:	2300      	movs	r3, #0
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	4b26      	ldr	r3, [pc, #152]	; (8001488 <SystemClock_Config+0xe0>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a25      	ldr	r2, [pc, #148]	; (8001488 <SystemClock_Config+0xe0>)
 80013f2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b23      	ldr	r3, [pc, #140]	; (8001488 <SystemClock_Config+0xe0>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001404:	2302      	movs	r3, #2
 8001406:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001408:	2301      	movs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140c:	2310      	movs	r3, #16
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001410:	2302      	movs	r3, #2
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001414:	2300      	movs	r3, #0
 8001416:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001418:	2308      	movs	r3, #8
 800141a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800141c:	23b4      	movs	r3, #180	; 0xb4
 800141e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001420:	2302      	movs	r3, #2
 8001422:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001428:	2302      	movs	r3, #2
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4618      	mov	r0, r3
 8001432:	f001 f811 	bl	8002458 <HAL_RCC_OscConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800143c:	f000 f86a 	bl	8001514 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001440:	f000 fcf6 	bl	8001e30 <HAL_PWREx_EnableOverDrive>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800144a:	f000 f863 	bl	8001514 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144e:	230f      	movs	r3, #15
 8001450:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001452:	2302      	movs	r3, #2
 8001454:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800145e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2105      	movs	r1, #5
 800146c:	4618      	mov	r0, r3
 800146e:	f000 fd2f 	bl	8001ed0 <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001478:	f000 f84c 	bl	8001514 <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3750      	adds	r7, #80	; 0x50
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART2_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f001 fa66 	bl	8002994 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014ce:	f000 f821 	bl	8001514 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200031f8 	.word	0x200031f8
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_GPIO_Init+0x30>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <MX_GPIO_Init+0x30>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_GPIO_Init+0x30>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]

}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800

08001514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001518:	b672      	cpsid	i
}
 800151a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800151c:	e7fe      	b.n	800151c <Error_Handler+0x8>
	...

08001520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b10      	ldr	r3, [pc, #64]	; (800156c <HAL_MspInit+0x4c>)
 800152c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152e:	4a0f      	ldr	r2, [pc, #60]	; (800156c <HAL_MspInit+0x4c>)
 8001530:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001534:	6453      	str	r3, [r2, #68]	; 0x44
 8001536:	4b0d      	ldr	r3, [pc, #52]	; (800156c <HAL_MspInit+0x4c>)
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <HAL_MspInit+0x4c>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	4a08      	ldr	r2, [pc, #32]	; (800156c <HAL_MspInit+0x4c>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001550:	6413      	str	r3, [r2, #64]	; 0x40
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_MspInit+0x4c>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a19      	ldr	r2, [pc, #100]	; (80015f4 <HAL_UART_MspInit+0x84>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d12b      	bne.n	80015ea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_UART_MspInit+0x88>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159a:	4a17      	ldr	r2, [pc, #92]	; (80015f8 <HAL_UART_MspInit+0x88>)
 800159c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a0:	6413      	str	r3, [r2, #64]	; 0x40
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_UART_MspInit+0x88>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_UART_MspInit+0x88>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a10      	ldr	r2, [pc, #64]	; (80015f8 <HAL_UART_MspInit+0x88>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <HAL_UART_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ca:	230c      	movs	r3, #12
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ce:	2302      	movs	r3, #2
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d6:	2303      	movs	r3, #3
 80015d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015da:	2307      	movs	r3, #7
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0314 	add.w	r3, r7, #20
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	; (80015fc <HAL_UART_MspInit+0x8c>)
 80015e6:	f000 fa8f 	bl	8001b08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ea:	bf00      	nop
 80015ec:	3728      	adds	r7, #40	; 0x28
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40004400 	.word	0x40004400
 80015f8:	40023800 	.word	0x40023800
 80015fc:	40020000 	.word	0x40020000

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <NMI_Handler+0x4>

08001606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <HardFault_Handler+0x4>

0800160c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <MemManage_Handler+0x4>

08001612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <BusFault_Handler+0x4>

08001618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler+0x4>

0800161e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr

0800163a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr

08001648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800164c:	f000 f956 	bl	80018fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	return 1;
 8001658:	2301      	movs	r3, #1
}
 800165a:	4618      	mov	r0, r3
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_kill>:

int _kill(int pid, int sig)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800166e:	f002 fd3d 	bl	80040ec <__errno>
 8001672:	4603      	mov	r3, r0
 8001674:	2216      	movs	r2, #22
 8001676:	601a      	str	r2, [r3, #0]
	return -1;
 8001678:	f04f 33ff 	mov.w	r3, #4294967295
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_exit>:

void _exit (int status)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800168c:	f04f 31ff 	mov.w	r1, #4294967295
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff ffe7 	bl	8001664 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001696:	e7fe      	b.n	8001696 <_exit+0x12>

08001698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	e00a      	b.n	80016c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	4601      	mov	r1, r0
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	1c5a      	adds	r2, r3, #1
 80016b4:	60ba      	str	r2, [r7, #8]
 80016b6:	b2ca      	uxtb	r2, r1
 80016b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	429a      	cmp	r2, r3
 80016c6:	dbf0      	blt.n	80016aa <_read+0x12>
	}

return len;
 80016c8:	687b      	ldr	r3, [r7, #4]
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	60f8      	str	r0, [r7, #12]
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	e009      	b.n	80016f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	1c5a      	adds	r2, r3, #1
 80016e8:	60ba      	str	r2, [r7, #8]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fe31 	bl	8001354 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3301      	adds	r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697a      	ldr	r2, [r7, #20]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	dbf1      	blt.n	80016e4 <_write+0x12>
	}
	return len;
 8001700:	687b      	ldr	r3, [r7, #4]
}
 8001702:	4618      	mov	r0, r3
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <_close>:

int _close(int file)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
	return -1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001732:	605a      	str	r2, [r3, #4]
	return 0;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr

08001742 <_isatty>:

int _isatty(int file)
{
 8001742:	b480      	push	{r7}
 8001744:	b083      	sub	sp, #12
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	return 1;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001758:	b480      	push	{r7}
 800175a:	b085      	sub	sp, #20
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	return 0;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <_sbrk+0x5c>)
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <_sbrk+0x60>)
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <_sbrk+0x64>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001790:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <_sbrk+0x64>)
 8001792:	4a12      	ldr	r2, [pc, #72]	; (80017dc <_sbrk+0x68>)
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <_sbrk+0x64>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4413      	add	r3, r2
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d207      	bcs.n	80017b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a4:	f002 fca2 	bl	80040ec <__errno>
 80017a8:	4603      	mov	r3, r0
 80017aa:	220c      	movs	r2, #12
 80017ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
 80017b2:	e009      	b.n	80017c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b4:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	4a05      	ldr	r2, [pc, #20]	; (80017d8 <_sbrk+0x64>)
 80017c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017c6:	68fb      	ldr	r3, [r7, #12]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20020000 	.word	0x20020000
 80017d4:	00000400 	.word	0x00000400
 80017d8:	20003244 	.word	0x20003244
 80017dc:	20003260 	.word	0x20003260

080017e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <SystemInit+0x20>)
 80017e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <SystemInit+0x20>)
 80017ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800183c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001808:	480d      	ldr	r0, [pc, #52]	; (8001840 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800180a:	490e      	ldr	r1, [pc, #56]	; (8001844 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001810:	e002      	b.n	8001818 <LoopCopyDataInit>

08001812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001816:	3304      	adds	r3, #4

08001818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800181a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800181c:	d3f9      	bcc.n	8001812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800181e:	4a0b      	ldr	r2, [pc, #44]	; (800184c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001820:	4c0b      	ldr	r4, [pc, #44]	; (8001850 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001824:	e001      	b.n	800182a <LoopFillZerobss>

08001826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001828:	3204      	adds	r2, #4

0800182a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800182a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800182c:	d3fb      	bcc.n	8001826 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800182e:	f7ff ffd7 	bl	80017e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001832:	f002 fc61 	bl	80040f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001836:	f7ff fda5 	bl	8001384 <main>
  bx  lr    
 800183a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800183c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001840:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001844:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001848:	0800c12c 	.word	0x0800c12c
  ldr r2, =_sbss
 800184c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001850:	2000325c 	.word	0x2000325c

08001854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001854:	e7fe      	b.n	8001854 <ADC_IRQHandler>
	...

08001858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800185c:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_Init+0x40>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a0d      	ldr	r2, [pc, #52]	; (8001898 <HAL_Init+0x40>)
 8001862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001866:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001868:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <HAL_Init+0x40>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a0a      	ldr	r2, [pc, #40]	; (8001898 <HAL_Init+0x40>)
 800186e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001872:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <HAL_Init+0x40>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a07      	ldr	r2, [pc, #28]	; (8001898 <HAL_Init+0x40>)
 800187a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001880:	2003      	movs	r0, #3
 8001882:	f000 f90d 	bl	8001aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001886:	200f      	movs	r0, #15
 8001888:	f000 f808 	bl	800189c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800188c:	f7ff fe48 	bl	8001520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	40023c00 	.word	0x40023c00

0800189c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_InitTick+0x54>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_InitTick+0x58>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	4619      	mov	r1, r3
 80018ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80018b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 f917 	bl	8001aee <HAL_SYSTICK_Config>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e00e      	b.n	80018e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b0f      	cmp	r3, #15
 80018ce:	d80a      	bhi.n	80018e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018d0:	2200      	movs	r2, #0
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	f04f 30ff 	mov.w	r0, #4294967295
 80018d8:	f000 f8ed 	bl	8001ab6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <HAL_InitTick+0x5c>)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	e000      	b.n	80018e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000008 	.word	0x20000008
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_IncTick+0x20>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	4b06      	ldr	r3, [pc, #24]	; (8001920 <HAL_IncTick+0x24>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4413      	add	r3, r2
 800190c:	4a04      	ldr	r2, [pc, #16]	; (8001920 <HAL_IncTick+0x24>)
 800190e:	6013      	str	r3, [r2, #0]
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000008 	.word	0x20000008
 8001920:	20003248 	.word	0x20003248

08001924 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b03      	ldr	r3, [pc, #12]	; (8001938 <HAL_GetTick+0x14>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	20003248 	.word	0x20003248

0800193c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001958:	4013      	ands	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001964:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800196c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <__NVIC_SetPriorityGrouping+0x44>)
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	60d3      	str	r3, [r2, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <__NVIC_GetPriorityGrouping+0x18>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	f003 0307 	and.w	r3, r3, #7
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	6039      	str	r1, [r7, #0]
 80019aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	db0a      	blt.n	80019ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	490c      	ldr	r1, [pc, #48]	; (80019ec <__NVIC_SetPriority+0x4c>)
 80019ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019be:	0112      	lsls	r2, r2, #4
 80019c0:	b2d2      	uxtb	r2, r2
 80019c2:	440b      	add	r3, r1
 80019c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c8:	e00a      	b.n	80019e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4908      	ldr	r1, [pc, #32]	; (80019f0 <__NVIC_SetPriority+0x50>)
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	3b04      	subs	r3, #4
 80019d8:	0112      	lsls	r2, r2, #4
 80019da:	b2d2      	uxtb	r2, r2
 80019dc:	440b      	add	r3, r1
 80019de:	761a      	strb	r2, [r3, #24]
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000e100 	.word	0xe000e100
 80019f0:	e000ed00 	.word	0xe000ed00

080019f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b089      	sub	sp, #36	; 0x24
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	60b9      	str	r1, [r7, #8]
 80019fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f1c3 0307 	rsb	r3, r3, #7
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	bf28      	it	cs
 8001a12:	2304      	movcs	r3, #4
 8001a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3304      	adds	r3, #4
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d902      	bls.n	8001a24 <NVIC_EncodePriority+0x30>
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	3b03      	subs	r3, #3
 8001a22:	e000      	b.n	8001a26 <NVIC_EncodePriority+0x32>
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43da      	mvns	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	401a      	ands	r2, r3
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa01 f303 	lsl.w	r3, r1, r3
 8001a46:	43d9      	mvns	r1, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a4c:	4313      	orrs	r3, r2
         );
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3724      	adds	r7, #36	; 0x24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
	...

08001a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a6c:	d301      	bcc.n	8001a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e00f      	b.n	8001a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a72:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <SysTick_Config+0x40>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	3b01      	subs	r3, #1
 8001a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a7a:	210f      	movs	r1, #15
 8001a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a80:	f7ff ff8e 	bl	80019a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a84:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <SysTick_Config+0x40>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a8a:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <SysTick_Config+0x40>)
 8001a8c:	2207      	movs	r2, #7
 8001a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	e000e010 	.word	0xe000e010

08001aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff ff47 	bl	800193c <__NVIC_SetPriorityGrouping>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	4603      	mov	r3, r0
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac8:	f7ff ff5c 	bl	8001984 <__NVIC_GetPriorityGrouping>
 8001acc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68b9      	ldr	r1, [r7, #8]
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f7ff ff8e 	bl	80019f4 <NVIC_EncodePriority>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ade:	4611      	mov	r1, r2
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff ff5d 	bl	80019a0 <__NVIC_SetPriority>
}
 8001ae6:	bf00      	nop
 8001ae8:	3718      	adds	r7, #24
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b082      	sub	sp, #8
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ffb0 	bl	8001a5c <SysTick_Config>
 8001afc:	4603      	mov	r3, r0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61fb      	str	r3, [r7, #28]
 8001b22:	e165      	b.n	8001df0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b24:	2201      	movs	r2, #1
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b38:	693a      	ldr	r2, [r7, #16]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	f040 8154 	bne.w	8001dea <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d130      	bne.n	8001bbc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	2203      	movs	r2, #3
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	68da      	ldr	r2, [r3, #12]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b90:	2201      	movs	r2, #1
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 0201 	and.w	r2, r3, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 0303 	and.w	r3, r3, #3
 8001bc4:	2b03      	cmp	r3, #3
 8001bc6:	d017      	beq.n	8001bf8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b02      	cmp	r3, #2
 8001c02:	d123      	bne.n	8001c4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	08da      	lsrs	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	3208      	adds	r2, #8
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	f003 0307 	and.w	r3, r3, #7
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	220f      	movs	r2, #15
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	43db      	mvns	r3, r3
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	4013      	ands	r3, r2
 8001c26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	691a      	ldr	r2, [r3, #16]
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	08da      	lsrs	r2, r3, #3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3208      	adds	r2, #8
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0203 	and.w	r2, r3, #3
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f000 80ae 	beq.w	8001dea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	4a5c      	ldr	r2, [pc, #368]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_GPIO_Init+0x300>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001caa:	4a58      	ldr	r2, [pc, #352]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	089b      	lsrs	r3, r3, #2
 8001cb0:	3302      	adds	r3, #2
 8001cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	220f      	movs	r2, #15
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4f      	ldr	r2, [pc, #316]	; (8001e10 <HAL_GPIO_Init+0x308>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d025      	beq.n	8001d22 <HAL_GPIO_Init+0x21a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <HAL_GPIO_Init+0x30c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d01f      	beq.n	8001d1e <HAL_GPIO_Init+0x216>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4d      	ldr	r2, [pc, #308]	; (8001e18 <HAL_GPIO_Init+0x310>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d019      	beq.n	8001d1a <HAL_GPIO_Init+0x212>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	; (8001e1c <HAL_GPIO_Init+0x314>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d013      	beq.n	8001d16 <HAL_GPIO_Init+0x20e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4b      	ldr	r2, [pc, #300]	; (8001e20 <HAL_GPIO_Init+0x318>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00d      	beq.n	8001d12 <HAL_GPIO_Init+0x20a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_GPIO_Init+0x31c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d007      	beq.n	8001d0e <HAL_GPIO_Init+0x206>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a49      	ldr	r2, [pc, #292]	; (8001e28 <HAL_GPIO_Init+0x320>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_GPIO_Init+0x202>
 8001d06:	2306      	movs	r3, #6
 8001d08:	e00c      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d0a:	2307      	movs	r3, #7
 8001d0c:	e00a      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x21c>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d34:	4935      	ldr	r1, [pc, #212]	; (8001e0c <HAL_GPIO_Init+0x304>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d42:	4b3a      	ldr	r3, [pc, #232]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d66:	4a31      	ldr	r2, [pc, #196]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d6c:	4b2f      	ldr	r3, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d96:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dba:	4a1c      	ldr	r2, [pc, #112]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc0:	4b1a      	ldr	r3, [pc, #104]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_GPIO_Init+0x324>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f ae96 	bls.w	8001b24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40013c00 	.word	0x40013c00

08001e30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	603b      	str	r3, [r7, #0]
 8001e3e:	4b20      	ldr	r3, [pc, #128]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	4a1f      	ldr	r2, [pc, #124]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e48:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e52:	603b      	str	r3, [r7, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e5c:	f7ff fd62 	bl	8001924 <HAL_GetTick>
 8001e60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e62:	e009      	b.n	8001e78 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e64:	f7ff fd5e 	bl	8001924 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e72:	d901      	bls.n	8001e78 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e01f      	b.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d1ee      	bne.n	8001e64 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e8c:	f7ff fd4a 	bl	8001924 <HAL_GetTick>
 8001e90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001e92:	e009      	b.n	8001ea8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001e94:	f7ff fd46 	bl	8001924 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ea2:	d901      	bls.n	8001ea8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e007      	b.n	8001eb8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001eb4:	d1ee      	bne.n	8001e94 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	420e0040 	.word	0x420e0040
 8001ec8:	40007000 	.word	0x40007000
 8001ecc:	420e0044 	.word	0x420e0044

08001ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d101      	bne.n	8001ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e0cc      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee4:	4b68      	ldr	r3, [pc, #416]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 030f 	and.w	r3, r3, #15
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	d90c      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef2:	4b65      	ldr	r3, [pc, #404]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	b2d2      	uxtb	r2, r2
 8001ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b8      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	494d      	ldr	r1, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d044      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d119      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d107      	bne.n	8001f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8e:	4b3f      	ldr	r3, [pc, #252]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e06f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9e:	4b3b      	ldr	r3, [pc, #236]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e067      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fae:	4b37      	ldr	r3, [pc, #220]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f023 0203 	bic.w	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4934      	ldr	r1, [pc, #208]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fc0:	f7ff fcb0 	bl	8001924 <HAL_GetTick>
 8001fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc6:	e00a      	b.n	8001fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc8:	f7ff fcac 	bl	8001924 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e04f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	4b2b      	ldr	r3, [pc, #172]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	f003 020c 	and.w	r2, r3, #12
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d1eb      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d20c      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffe:	4b22      	ldr	r3, [pc, #136]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_ClockConfig+0x1b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e032      	b.n	800207e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4916      	ldr	r1, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002056:	f000 f855 	bl	8002104 <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1bc>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1c0>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1c4>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1c8>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff fc10 	bl	800189c <HAL_InitTick>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023c00 	.word	0x40023c00
 800208c:	40023800 	.word	0x40023800
 8002090:	08008f0c 	.word	0x08008f0c
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	20000000 	.word	0x20000000

080020b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020b8:	f7ff fff0 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020bc:	4602      	mov	r2, r0
 80020be:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	0a9b      	lsrs	r3, r3, #10
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	4903      	ldr	r1, [pc, #12]	; (80020d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020ca:	5ccb      	ldrb	r3, [r1, r3]
 80020cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08008f1c 	.word	0x08008f1c

080020dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80020e0:	f7ff ffdc 	bl	800209c <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0b5b      	lsrs	r3, r3, #13
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4903      	ldr	r1, [pc, #12]	; (8002100 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40023800 	.word	0x40023800
 8002100:	08008f1c 	.word	0x08008f1c

08002104 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002104:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002108:	b0a6      	sub	sp, #152	; 0x98
 800210a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800210c:	2300      	movs	r3, #0
 800210e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800212a:	4bc8      	ldr	r3, [pc, #800]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
 8002132:	2b0c      	cmp	r3, #12
 8002134:	f200 817e 	bhi.w	8002434 <HAL_RCC_GetSysClockFreq+0x330>
 8002138:	a201      	add	r2, pc, #4	; (adr r2, 8002140 <HAL_RCC_GetSysClockFreq+0x3c>)
 800213a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213e:	bf00      	nop
 8002140:	08002175 	.word	0x08002175
 8002144:	08002435 	.word	0x08002435
 8002148:	08002435 	.word	0x08002435
 800214c:	08002435 	.word	0x08002435
 8002150:	0800217d 	.word	0x0800217d
 8002154:	08002435 	.word	0x08002435
 8002158:	08002435 	.word	0x08002435
 800215c:	08002435 	.word	0x08002435
 8002160:	08002185 	.word	0x08002185
 8002164:	08002435 	.word	0x08002435
 8002168:	08002435 	.word	0x08002435
 800216c:	08002435 	.word	0x08002435
 8002170:	080022ef 	.word	0x080022ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002174:	4bb6      	ldr	r3, [pc, #728]	; (8002450 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 800217a:	e15f      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800217c:	4bb5      	ldr	r3, [pc, #724]	; (8002454 <HAL_RCC_GetSysClockFreq+0x350>)
 800217e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002182:	e15b      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002184:	4bb1      	ldr	r3, [pc, #708]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800218c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002190:	4bae      	ldr	r3, [pc, #696]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d031      	beq.n	8002200 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219c:	4bab      	ldr	r3, [pc, #684]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	099b      	lsrs	r3, r3, #6
 80021a2:	2200      	movs	r2, #0
 80021a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80021a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021ae:	663b      	str	r3, [r7, #96]	; 0x60
 80021b0:	2300      	movs	r3, #0
 80021b2:	667b      	str	r3, [r7, #100]	; 0x64
 80021b4:	4ba7      	ldr	r3, [pc, #668]	; (8002454 <HAL_RCC_GetSysClockFreq+0x350>)
 80021b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80021ba:	462a      	mov	r2, r5
 80021bc:	fb03 f202 	mul.w	r2, r3, r2
 80021c0:	2300      	movs	r3, #0
 80021c2:	4621      	mov	r1, r4
 80021c4:	fb01 f303 	mul.w	r3, r1, r3
 80021c8:	4413      	add	r3, r2
 80021ca:	4aa2      	ldr	r2, [pc, #648]	; (8002454 <HAL_RCC_GetSysClockFreq+0x350>)
 80021cc:	4621      	mov	r1, r4
 80021ce:	fba1 1202 	umull	r1, r2, r1, r2
 80021d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021d4:	460a      	mov	r2, r1
 80021d6:	67ba      	str	r2, [r7, #120]	; 0x78
 80021d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80021da:	4413      	add	r3, r2
 80021dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80021de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80021e2:	2200      	movs	r2, #0
 80021e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80021e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80021e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80021ec:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80021f0:	f7fe fd5a 	bl	8000ca8 <__aeabi_uldivmod>
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	4613      	mov	r3, r2
 80021fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80021fe:	e064      	b.n	80022ca <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002200:	4b92      	ldr	r3, [pc, #584]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	099b      	lsrs	r3, r3, #6
 8002206:	2200      	movs	r2, #0
 8002208:	653b      	str	r3, [r7, #80]	; 0x50
 800220a:	657a      	str	r2, [r7, #84]	; 0x54
 800220c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800220e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
 8002214:	2300      	movs	r3, #0
 8002216:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002218:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800221c:	4622      	mov	r2, r4
 800221e:	462b      	mov	r3, r5
 8002220:	f04f 0000 	mov.w	r0, #0
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	0159      	lsls	r1, r3, #5
 800222a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800222e:	0150      	lsls	r0, r2, #5
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4621      	mov	r1, r4
 8002236:	1a51      	subs	r1, r2, r1
 8002238:	6139      	str	r1, [r7, #16]
 800223a:	4629      	mov	r1, r5
 800223c:	eb63 0301 	sbc.w	r3, r3, r1
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800224e:	4659      	mov	r1, fp
 8002250:	018b      	lsls	r3, r1, #6
 8002252:	4651      	mov	r1, sl
 8002254:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002258:	4651      	mov	r1, sl
 800225a:	018a      	lsls	r2, r1, #6
 800225c:	4651      	mov	r1, sl
 800225e:	ebb2 0801 	subs.w	r8, r2, r1
 8002262:	4659      	mov	r1, fp
 8002264:	eb63 0901 	sbc.w	r9, r3, r1
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002274:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002278:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800227c:	4690      	mov	r8, r2
 800227e:	4699      	mov	r9, r3
 8002280:	4623      	mov	r3, r4
 8002282:	eb18 0303 	adds.w	r3, r8, r3
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	462b      	mov	r3, r5
 800228a:	eb49 0303 	adc.w	r3, r9, r3
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800229c:	4629      	mov	r1, r5
 800229e:	028b      	lsls	r3, r1, #10
 80022a0:	4621      	mov	r1, r4
 80022a2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022a6:	4621      	mov	r1, r4
 80022a8:	028a      	lsls	r2, r1, #10
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b2:	2200      	movs	r2, #0
 80022b4:	643b      	str	r3, [r7, #64]	; 0x40
 80022b6:	647a      	str	r2, [r7, #68]	; 0x44
 80022b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80022bc:	f7fe fcf4 	bl	8000ca8 <__aeabi_uldivmod>
 80022c0:	4602      	mov	r2, r0
 80022c2:	460b      	mov	r3, r1
 80022c4:	4613      	mov	r3, r2
 80022c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022ca:	4b60      	ldr	r3, [pc, #384]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	0c1b      	lsrs	r3, r3, #16
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	3301      	adds	r3, #1
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80022dc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80022e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80022ec:	e0a6      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022ee:	4b57      	ldr	r3, [pc, #348]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fa:	4b54      	ldr	r3, [pc, #336]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02a      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002306:	4b51      	ldr	r3, [pc, #324]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	2200      	movs	r2, #0
 800230e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002310:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002314:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002318:	2100      	movs	r1, #0
 800231a:	4b4e      	ldr	r3, [pc, #312]	; (8002454 <HAL_RCC_GetSysClockFreq+0x350>)
 800231c:	fb03 f201 	mul.w	r2, r3, r1
 8002320:	2300      	movs	r3, #0
 8002322:	fb00 f303 	mul.w	r3, r0, r3
 8002326:	4413      	add	r3, r2
 8002328:	4a4a      	ldr	r2, [pc, #296]	; (8002454 <HAL_RCC_GetSysClockFreq+0x350>)
 800232a:	fba0 1202 	umull	r1, r2, r0, r2
 800232e:	677a      	str	r2, [r7, #116]	; 0x74
 8002330:	460a      	mov	r2, r1
 8002332:	673a      	str	r2, [r7, #112]	; 0x70
 8002334:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002336:	4413      	add	r3, r2
 8002338:	677b      	str	r3, [r7, #116]	; 0x74
 800233a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800233e:	2200      	movs	r2, #0
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
 8002342:	637a      	str	r2, [r7, #52]	; 0x34
 8002344:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002348:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 800234c:	f7fe fcac 	bl	8000ca8 <__aeabi_uldivmod>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4613      	mov	r3, r2
 8002356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800235a:	e05b      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235c:	4b3b      	ldr	r3, [pc, #236]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	099b      	lsrs	r3, r3, #6
 8002362:	2200      	movs	r2, #0
 8002364:	62bb      	str	r3, [r7, #40]	; 0x28
 8002366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	2300      	movs	r3, #0
 8002372:	627b      	str	r3, [r7, #36]	; 0x24
 8002374:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002378:	4642      	mov	r2, r8
 800237a:	464b      	mov	r3, r9
 800237c:	f04f 0000 	mov.w	r0, #0
 8002380:	f04f 0100 	mov.w	r1, #0
 8002384:	0159      	lsls	r1, r3, #5
 8002386:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800238a:	0150      	lsls	r0, r2, #5
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4641      	mov	r1, r8
 8002392:	ebb2 0a01 	subs.w	sl, r2, r1
 8002396:	4649      	mov	r1, r9
 8002398:	eb63 0b01 	sbc.w	fp, r3, r1
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023b0:	ebb2 040a 	subs.w	r4, r2, sl
 80023b4:	eb63 050b 	sbc.w	r5, r3, fp
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	00eb      	lsls	r3, r5, #3
 80023c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023c6:	00e2      	lsls	r2, r4, #3
 80023c8:	4614      	mov	r4, r2
 80023ca:	461d      	mov	r5, r3
 80023cc:	4643      	mov	r3, r8
 80023ce:	18e3      	adds	r3, r4, r3
 80023d0:	603b      	str	r3, [r7, #0]
 80023d2:	464b      	mov	r3, r9
 80023d4:	eb45 0303 	adc.w	r3, r5, r3
 80023d8:	607b      	str	r3, [r7, #4]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	f04f 0300 	mov.w	r3, #0
 80023e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023e6:	4629      	mov	r1, r5
 80023e8:	028b      	lsls	r3, r1, #10
 80023ea:	4621      	mov	r1, r4
 80023ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023f0:	4621      	mov	r1, r4
 80023f2:	028a      	lsls	r2, r1, #10
 80023f4:	4610      	mov	r0, r2
 80023f6:	4619      	mov	r1, r3
 80023f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80023fc:	2200      	movs	r2, #0
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	61fa      	str	r2, [r7, #28]
 8002402:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002406:	f7fe fc4f 	bl	8000ca8 <__aeabi_uldivmod>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4613      	mov	r3, r2
 8002410:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002414:	4b0d      	ldr	r3, [pc, #52]	; (800244c <HAL_RCC_GetSysClockFreq+0x348>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	0f1b      	lsrs	r3, r3, #28
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 8002422:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002426:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800242a:	fbb2 f3f3 	udiv	r3, r2, r3
 800242e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8002432:	e003      	b.n	800243c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002434:	4b06      	ldr	r3, [pc, #24]	; (8002450 <HAL_RCC_GetSysClockFreq+0x34c>)
 8002436:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800243a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800243c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 8002440:	4618      	mov	r0, r3
 8002442:	3798      	adds	r7, #152	; 0x98
 8002444:	46bd      	mov	sp, r7
 8002446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800
 8002450:	00f42400 	.word	0x00f42400
 8002454:	017d7840 	.word	0x017d7840

08002458 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b086      	sub	sp, #24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e28d      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	f000 8083 	beq.w	800257e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002478:	4b94      	ldr	r3, [pc, #592]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	2b04      	cmp	r3, #4
 8002482:	d019      	beq.n	80024b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002484:	4b91      	ldr	r3, [pc, #580]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800248c:	2b08      	cmp	r3, #8
 800248e:	d106      	bne.n	800249e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002490:	4b8e      	ldr	r3, [pc, #568]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800249c:	d00c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b8b      	ldr	r3, [pc, #556]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80024a6:	2b0c      	cmp	r3, #12
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b88      	ldr	r3, [pc, #544]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	4b84      	ldr	r3, [pc, #528]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05b      	beq.n	800257c <HAL_RCC_OscConfig+0x124>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d157      	bne.n	800257c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e25a      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d106      	bne.n	80024e8 <HAL_RCC_OscConfig+0x90>
 80024da:	4b7c      	ldr	r3, [pc, #496]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a7b      	ldr	r2, [pc, #492]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xcc>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0xb4>
 80024f2:	4b76      	ldr	r3, [pc, #472]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a75      	ldr	r2, [pc, #468]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b73      	ldr	r3, [pc, #460]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a72      	ldr	r2, [pc, #456]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xcc>
 800250c:	4b6f      	ldr	r3, [pc, #444]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a6e      	ldr	r2, [pc, #440]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b6c      	ldr	r3, [pc, #432]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a6b      	ldr	r2, [pc, #428]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff f9fa 	bl	8001924 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff f9f6 	bl	8001924 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e21f      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b61      	ldr	r3, [pc, #388]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xdc>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002554:	f7ff f9e6 	bl	8001924 <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff f9e2 	bl	8001924 <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e20b      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	4b57      	ldr	r3, [pc, #348]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0x104>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d06f      	beq.n	800266a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800258a:	4b50      	ldr	r3, [pc, #320]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b00      	cmp	r3, #0
 8002594:	d017      	beq.n	80025c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002596:	4b4d      	ldr	r3, [pc, #308]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d105      	bne.n	80025ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025a2:	4b4a      	ldr	r3, [pc, #296]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00b      	beq.n	80025c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ae:	4b47      	ldr	r3, [pc, #284]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80025b6:	2b0c      	cmp	r3, #12
 80025b8:	d11c      	bne.n	80025f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ba:	4b44      	ldr	r3, [pc, #272]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d116      	bne.n	80025f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c6:	4b41      	ldr	r3, [pc, #260]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d005      	beq.n	80025de <HAL_RCC_OscConfig+0x186>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e1d3      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025de:	4b3b      	ldr	r3, [pc, #236]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	00db      	lsls	r3, r3, #3
 80025ec:	4937      	ldr	r1, [pc, #220]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f2:	e03a      	b.n	800266a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025fc:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <HAL_RCC_OscConfig+0x278>)
 80025fe:	2201      	movs	r2, #1
 8002600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7ff f98f 	bl	8001924 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800260a:	f7ff f98b 	bl	8001924 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e1b4      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b28      	ldr	r3, [pc, #160]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4925      	ldr	r1, [pc, #148]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002638:	4313      	orrs	r3, r2
 800263a:	600b      	str	r3, [r1, #0]
 800263c:	e015      	b.n	800266a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800263e:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_RCC_OscConfig+0x278>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7ff f96e 	bl	8001924 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800264c:	f7ff f96a 	bl	8001924 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e193      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d036      	beq.n	80026e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	695b      	ldr	r3, [r3, #20]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d016      	beq.n	80026ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <HAL_RCC_OscConfig+0x27c>)
 8002680:	2201      	movs	r2, #1
 8002682:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7ff f94e 	bl	8001924 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268c:	f7ff f94a 	bl	8001924 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e173      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_OscConfig+0x274>)
 80026a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0x234>
 80026aa:	e01b      	b.n	80026e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_OscConfig+0x27c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b2:	f7ff f937 	bl	8001924 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	e00e      	b.n	80026d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ba:	f7ff f933 	bl	8001924 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d907      	bls.n	80026d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e15c      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
 80026cc:	40023800 	.word	0x40023800
 80026d0:	42470000 	.word	0x42470000
 80026d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026d8:	4b8a      	ldr	r3, [pc, #552]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 80026da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d1ea      	bne.n	80026ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 8097 	beq.w	8002820 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026f2:	2300      	movs	r3, #0
 80026f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026f6:	4b83      	ldr	r3, [pc, #524]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10f      	bne.n	8002722 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	2300      	movs	r3, #0
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	4b7f      	ldr	r3, [pc, #508]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	4a7e      	ldr	r2, [pc, #504]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 800270c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002710:	6413      	str	r3, [r2, #64]	; 0x40
 8002712:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800271e:	2301      	movs	r3, #1
 8002720:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002722:	4b79      	ldr	r3, [pc, #484]	; (8002908 <HAL_RCC_OscConfig+0x4b0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272a:	2b00      	cmp	r3, #0
 800272c:	d118      	bne.n	8002760 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800272e:	4b76      	ldr	r3, [pc, #472]	; (8002908 <HAL_RCC_OscConfig+0x4b0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a75      	ldr	r2, [pc, #468]	; (8002908 <HAL_RCC_OscConfig+0x4b0>)
 8002734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002738:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800273a:	f7ff f8f3 	bl	8001924 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002742:	f7ff f8ef 	bl	8001924 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e118      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	4b6c      	ldr	r3, [pc, #432]	; (8002908 <HAL_RCC_OscConfig+0x4b0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f0      	beq.n	8002742 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d106      	bne.n	8002776 <HAL_RCC_OscConfig+0x31e>
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4a65      	ldr	r2, [pc, #404]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
 8002774:	e01c      	b.n	80027b0 <HAL_RCC_OscConfig+0x358>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2b05      	cmp	r3, #5
 800277c:	d10c      	bne.n	8002798 <HAL_RCC_OscConfig+0x340>
 800277e:	4b61      	ldr	r3, [pc, #388]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a60      	ldr	r2, [pc, #384]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002784:	f043 0304 	orr.w	r3, r3, #4
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a5d      	ldr	r2, [pc, #372]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
 8002796:	e00b      	b.n	80027b0 <HAL_RCC_OscConfig+0x358>
 8002798:	4b5a      	ldr	r3, [pc, #360]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 800279a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279c:	4a59      	ldr	r2, [pc, #356]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 800279e:	f023 0301 	bic.w	r3, r3, #1
 80027a2:	6713      	str	r3, [r2, #112]	; 0x70
 80027a4:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 80027a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027a8:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	f023 0304 	bic.w	r3, r3, #4
 80027ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b8:	f7ff f8b4 	bl	8001924 <HAL_GetTick>
 80027bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027be:	e00a      	b.n	80027d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027c0:	f7ff f8b0 	bl	8001924 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	1ad3      	subs	r3, r2, r3
 80027ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e0d7      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d6:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ee      	beq.n	80027c0 <HAL_RCC_OscConfig+0x368>
 80027e2:	e014      	b.n	800280e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7ff f89e 	bl	8001924 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ea:	e00a      	b.n	8002802 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ec:	f7ff f89a 	bl	8001924 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e0c1      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002802:	4b40      	ldr	r3, [pc, #256]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1ee      	bne.n	80027ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800280e:	7dfb      	ldrb	r3, [r7, #23]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d105      	bne.n	8002820 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002814:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002818:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 800281a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 80ad 	beq.w	8002984 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800282a:	4b36      	ldr	r3, [pc, #216]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
 8002832:	2b08      	cmp	r3, #8
 8002834:	d060      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	2b02      	cmp	r3, #2
 800283c:	d145      	bne.n	80028ca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283e:	4b33      	ldr	r3, [pc, #204]	; (800290c <HAL_RCC_OscConfig+0x4b4>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff f86e 	bl	8001924 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800284c:	f7ff f86a 	bl	8001924 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e093      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69da      	ldr	r2, [r3, #28]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	431a      	orrs	r2, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	019b      	lsls	r3, r3, #6
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	3b01      	subs	r3, #1
 8002884:	041b      	lsls	r3, r3, #16
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002894:	071b      	lsls	r3, r3, #28
 8002896:	491b      	ldr	r1, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	; (800290c <HAL_RCC_OscConfig+0x4b4>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a2:	f7ff f83f 	bl	8001924 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028aa:	f7ff f83b 	bl	8001924 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e064      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x452>
 80028c8:	e05c      	b.n	8002984 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_RCC_OscConfig+0x4b4>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d0:	f7ff f828 	bl	8001924 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028d8:	f7ff f824 	bl	8001924 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e04d      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_RCC_OscConfig+0x4ac>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x480>
 80028f6:	e045      	b.n	8002984 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e040      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
 8002904:	40023800 	.word	0x40023800
 8002908:	40007000 	.word	0x40007000
 800290c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002910:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_RCC_OscConfig+0x538>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d030      	beq.n	8002980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002928:	429a      	cmp	r2, r3
 800292a:	d129      	bne.n	8002980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	429a      	cmp	r2, r3
 8002938:	d122      	bne.n	8002980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002940:	4013      	ands	r3, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002946:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002948:	4293      	cmp	r3, r2
 800294a:	d119      	bne.n	8002980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	3b01      	subs	r3, #1
 800295a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800295c:	429a      	cmp	r2, r3
 800295e:	d10f      	bne.n	8002980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800296c:	429a      	cmp	r2, r3
 800296e:	d107      	bne.n	8002980 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e000      	b.n	8002986 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023800 	.word	0x40023800

08002994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e03f      	b.n	8002a26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d106      	bne.n	80029c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fdd8 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68da      	ldr	r2, [r3, #12]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f929 	bl	8002c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	695a      	ldr	r2, [r3, #20]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b08a      	sub	sp, #40	; 0x28
 8002a32:	af02      	add	r7, sp, #8
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b20      	cmp	r3, #32
 8002a4c:	d17c      	bne.n	8002b48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <HAL_UART_Transmit+0x2c>
 8002a54:	88fb      	ldrh	r3, [r7, #6]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e075      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d101      	bne.n	8002a6c <HAL_UART_Transmit+0x3e>
 8002a68:	2302      	movs	r3, #2
 8002a6a:	e06e      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2221      	movs	r2, #33	; 0x21
 8002a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a82:	f7fe ff4f 	bl	8001924 <HAL_GetTick>
 8002a86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a9c:	d108      	bne.n	8002ab0 <HAL_UART_Transmit+0x82>
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d104      	bne.n	8002ab0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	61bb      	str	r3, [r7, #24]
 8002aae:	e003      	b.n	8002ab8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002ac0:	e02a      	b.n	8002b18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 f840 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e036      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10b      	bne.n	8002afa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002af0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	3302      	adds	r3, #2
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	e007      	b.n	8002b0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	3b01      	subs	r3, #1
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1cf      	bne.n	8002ac2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2140      	movs	r1, #64	; 0x40
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f810 	bl	8002b52 <UART_WaitOnFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d001      	beq.n	8002b3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e006      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b090      	sub	sp, #64	; 0x40
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b62:	e050      	b.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b6a:	d04c      	beq.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d007      	beq.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b72:	f7fe fed7 	bl	8001924 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d241      	bcs.n	8002c06 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330c      	adds	r3, #12
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8c:	e853 3f00 	ldrex	r3, [r3]
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002ba2:	637a      	str	r2, [r7, #52]	; 0x34
 8002ba4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e5      	bne.n	8002b82 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3314      	adds	r3, #20
 8002bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	e853 3f00 	ldrex	r3, [r3]
 8002bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	f023 0301 	bic.w	r3, r3, #1
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	3314      	adds	r3, #20
 8002bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd6:	623a      	str	r2, [r7, #32]
 8002bd8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	69f9      	ldr	r1, [r7, #28]
 8002bdc:	6a3a      	ldr	r2, [r7, #32]
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1e5      	bne.n	8002bb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e00f      	b.n	8002c26 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	68ba      	ldr	r2, [r7, #8]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	79fb      	ldrb	r3, [r7, #7]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d09f      	beq.n	8002b64 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3740      	adds	r7, #64	; 0x40
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c34:	b0c0      	sub	sp, #256	; 0x100
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	691b      	ldr	r3, [r3, #16]
 8002c44:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c4c:	68d9      	ldr	r1, [r3, #12]
 8002c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	ea40 0301 	orr.w	r3, r0, r1
 8002c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002c88:	f021 010c 	bic.w	r1, r1, #12
 8002c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002c96:	430b      	orrs	r3, r1
 8002c98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	695b      	ldr	r3, [r3, #20]
 8002ca2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002caa:	6999      	ldr	r1, [r3, #24]
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	ea40 0301 	orr.w	r3, r0, r1
 8002cb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	4b8f      	ldr	r3, [pc, #572]	; (8002efc <UART_SetConfig+0x2cc>)
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d005      	beq.n	8002cd0 <UART_SetConfig+0xa0>
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	4b8d      	ldr	r3, [pc, #564]	; (8002f00 <UART_SetConfig+0x2d0>)
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d104      	bne.n	8002cda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002cd0:	f7ff fa04 	bl	80020dc <HAL_RCC_GetPCLK2Freq>
 8002cd4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cd8:	e003      	b.n	8002ce2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cda:	f7ff f9eb 	bl	80020b4 <HAL_RCC_GetPCLK1Freq>
 8002cde:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cec:	f040 810c 	bne.w	8002f08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002cfa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d02:	4622      	mov	r2, r4
 8002d04:	462b      	mov	r3, r5
 8002d06:	1891      	adds	r1, r2, r2
 8002d08:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d0a:	415b      	adcs	r3, r3
 8002d0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d12:	4621      	mov	r1, r4
 8002d14:	eb12 0801 	adds.w	r8, r2, r1
 8002d18:	4629      	mov	r1, r5
 8002d1a:	eb43 0901 	adc.w	r9, r3, r1
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	f04f 0300 	mov.w	r3, #0
 8002d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d32:	4690      	mov	r8, r2
 8002d34:	4699      	mov	r9, r3
 8002d36:	4623      	mov	r3, r4
 8002d38:	eb18 0303 	adds.w	r3, r8, r3
 8002d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d40:	462b      	mov	r3, r5
 8002d42:	eb49 0303 	adc.w	r3, r9, r3
 8002d46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d56:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d5e:	460b      	mov	r3, r1
 8002d60:	18db      	adds	r3, r3, r3
 8002d62:	653b      	str	r3, [r7, #80]	; 0x50
 8002d64:	4613      	mov	r3, r2
 8002d66:	eb42 0303 	adc.w	r3, r2, r3
 8002d6a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d74:	f7fd ff98 	bl	8000ca8 <__aeabi_uldivmod>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4b61      	ldr	r3, [pc, #388]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	011c      	lsls	r4, r3, #4
 8002d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d90:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002d94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002d98:	4642      	mov	r2, r8
 8002d9a:	464b      	mov	r3, r9
 8002d9c:	1891      	adds	r1, r2, r2
 8002d9e:	64b9      	str	r1, [r7, #72]	; 0x48
 8002da0:	415b      	adcs	r3, r3
 8002da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002da4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002da8:	4641      	mov	r1, r8
 8002daa:	eb12 0a01 	adds.w	sl, r2, r1
 8002dae:	4649      	mov	r1, r9
 8002db0:	eb43 0b01 	adc.w	fp, r3, r1
 8002db4:	f04f 0200 	mov.w	r2, #0
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dc8:	4692      	mov	sl, r2
 8002dca:	469b      	mov	fp, r3
 8002dcc:	4643      	mov	r3, r8
 8002dce:	eb1a 0303 	adds.w	r3, sl, r3
 8002dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dd6:	464b      	mov	r3, r9
 8002dd8:	eb4b 0303 	adc.w	r3, fp, r3
 8002ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002dec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002df0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002df4:	460b      	mov	r3, r1
 8002df6:	18db      	adds	r3, r3, r3
 8002df8:	643b      	str	r3, [r7, #64]	; 0x40
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	eb42 0303 	adc.w	r3, r2, r3
 8002e00:	647b      	str	r3, [r7, #68]	; 0x44
 8002e02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e0a:	f7fd ff4d 	bl	8000ca8 <__aeabi_uldivmod>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4611      	mov	r1, r2
 8002e14:	4b3b      	ldr	r3, [pc, #236]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002e16:	fba3 2301 	umull	r2, r3, r3, r1
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2264      	movs	r2, #100	; 0x64
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	1acb      	subs	r3, r1, r3
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e2a:	4b36      	ldr	r3, [pc, #216]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002e2c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e30:	095b      	lsrs	r3, r3, #5
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e38:	441c      	add	r4, r3
 8002e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e44:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e4c:	4642      	mov	r2, r8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	1891      	adds	r1, r2, r2
 8002e52:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e54:	415b      	adcs	r3, r3
 8002e56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	1851      	adds	r1, r2, r1
 8002e60:	6339      	str	r1, [r7, #48]	; 0x30
 8002e62:	4649      	mov	r1, r9
 8002e64:	414b      	adcs	r3, r1
 8002e66:	637b      	str	r3, [r7, #52]	; 0x34
 8002e68:	f04f 0200 	mov.w	r2, #0
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e74:	4659      	mov	r1, fp
 8002e76:	00cb      	lsls	r3, r1, #3
 8002e78:	4651      	mov	r1, sl
 8002e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e7e:	4651      	mov	r1, sl
 8002e80:	00ca      	lsls	r2, r1, #3
 8002e82:	4610      	mov	r0, r2
 8002e84:	4619      	mov	r1, r3
 8002e86:	4603      	mov	r3, r0
 8002e88:	4642      	mov	r2, r8
 8002e8a:	189b      	adds	r3, r3, r2
 8002e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e90:	464b      	mov	r3, r9
 8002e92:	460a      	mov	r2, r1
 8002e94:	eb42 0303 	adc.w	r3, r2, r3
 8002e98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ea8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002eac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	18db      	adds	r3, r3, r3
 8002eb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	eb42 0303 	adc.w	r3, r2, r3
 8002ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ec2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ec6:	f7fd feef 	bl	8000ca8 <__aeabi_uldivmod>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	460b      	mov	r3, r1
 8002ece:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	2164      	movs	r1, #100	; 0x64
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	00db      	lsls	r3, r3, #3
 8002ee0:	3332      	adds	r3, #50	; 0x32
 8002ee2:	4a08      	ldr	r2, [pc, #32]	; (8002f04 <UART_SetConfig+0x2d4>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	f003 0207 	and.w	r2, r3, #7
 8002eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4422      	add	r2, r4
 8002ef6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002ef8:	e105      	b.n	8003106 <UART_SetConfig+0x4d6>
 8002efa:	bf00      	nop
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40011400 	.word	0x40011400
 8002f04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f12:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f1a:	4642      	mov	r2, r8
 8002f1c:	464b      	mov	r3, r9
 8002f1e:	1891      	adds	r1, r2, r2
 8002f20:	6239      	str	r1, [r7, #32]
 8002f22:	415b      	adcs	r3, r3
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f2a:	4641      	mov	r1, r8
 8002f2c:	1854      	adds	r4, r2, r1
 8002f2e:	4649      	mov	r1, r9
 8002f30:	eb43 0501 	adc.w	r5, r3, r1
 8002f34:	f04f 0200 	mov.w	r2, #0
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	00eb      	lsls	r3, r5, #3
 8002f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f42:	00e2      	lsls	r2, r4, #3
 8002f44:	4614      	mov	r4, r2
 8002f46:	461d      	mov	r5, r3
 8002f48:	4643      	mov	r3, r8
 8002f4a:	18e3      	adds	r3, r4, r3
 8002f4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f50:	464b      	mov	r3, r9
 8002f52:	eb45 0303 	adc.w	r3, r5, r3
 8002f56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f66:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f6a:	f04f 0200 	mov.w	r2, #0
 8002f6e:	f04f 0300 	mov.w	r3, #0
 8002f72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f76:	4629      	mov	r1, r5
 8002f78:	008b      	lsls	r3, r1, #2
 8002f7a:	4621      	mov	r1, r4
 8002f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f80:	4621      	mov	r1, r4
 8002f82:	008a      	lsls	r2, r1, #2
 8002f84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002f88:	f7fd fe8e 	bl	8000ca8 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4b60      	ldr	r3, [pc, #384]	; (8003114 <UART_SetConfig+0x4e4>)
 8002f92:	fba3 2302 	umull	r2, r3, r3, r2
 8002f96:	095b      	lsrs	r3, r3, #5
 8002f98:	011c      	lsls	r4, r3, #4
 8002f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fa4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	1891      	adds	r1, r2, r2
 8002fb2:	61b9      	str	r1, [r7, #24]
 8002fb4:	415b      	adcs	r3, r3
 8002fb6:	61fb      	str	r3, [r7, #28]
 8002fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fbc:	4641      	mov	r1, r8
 8002fbe:	1851      	adds	r1, r2, r1
 8002fc0:	6139      	str	r1, [r7, #16]
 8002fc2:	4649      	mov	r1, r9
 8002fc4:	414b      	adcs	r3, r1
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	f04f 0300 	mov.w	r3, #0
 8002fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fd4:	4659      	mov	r1, fp
 8002fd6:	00cb      	lsls	r3, r1, #3
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fde:	4651      	mov	r1, sl
 8002fe0:	00ca      	lsls	r2, r1, #3
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	4642      	mov	r2, r8
 8002fea:	189b      	adds	r3, r3, r2
 8002fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff0:	464b      	mov	r3, r9
 8002ff2:	460a      	mov	r2, r1
 8002ff4:	eb42 0303 	adc.w	r3, r2, r3
 8002ff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	67bb      	str	r3, [r7, #120]	; 0x78
 8003006:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003014:	4649      	mov	r1, r9
 8003016:	008b      	lsls	r3, r1, #2
 8003018:	4641      	mov	r1, r8
 800301a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800301e:	4641      	mov	r1, r8
 8003020:	008a      	lsls	r2, r1, #2
 8003022:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003026:	f7fd fe3f 	bl	8000ca8 <__aeabi_uldivmod>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <UART_SetConfig+0x4e4>)
 8003030:	fba3 1302 	umull	r1, r3, r3, r2
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	2164      	movs	r1, #100	; 0x64
 8003038:	fb01 f303 	mul.w	r3, r1, r3
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	011b      	lsls	r3, r3, #4
 8003040:	3332      	adds	r3, #50	; 0x32
 8003042:	4a34      	ldr	r2, [pc, #208]	; (8003114 <UART_SetConfig+0x4e4>)
 8003044:	fba2 2303 	umull	r2, r3, r2, r3
 8003048:	095b      	lsrs	r3, r3, #5
 800304a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304e:	441c      	add	r4, r3
 8003050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003054:	2200      	movs	r2, #0
 8003056:	673b      	str	r3, [r7, #112]	; 0x70
 8003058:	677a      	str	r2, [r7, #116]	; 0x74
 800305a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800305e:	4642      	mov	r2, r8
 8003060:	464b      	mov	r3, r9
 8003062:	1891      	adds	r1, r2, r2
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	415b      	adcs	r3, r3
 8003068:	60fb      	str	r3, [r7, #12]
 800306a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800306e:	4641      	mov	r1, r8
 8003070:	1851      	adds	r1, r2, r1
 8003072:	6039      	str	r1, [r7, #0]
 8003074:	4649      	mov	r1, r9
 8003076:	414b      	adcs	r3, r1
 8003078:	607b      	str	r3, [r7, #4]
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003086:	4659      	mov	r1, fp
 8003088:	00cb      	lsls	r3, r1, #3
 800308a:	4651      	mov	r1, sl
 800308c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003090:	4651      	mov	r1, sl
 8003092:	00ca      	lsls	r2, r1, #3
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	4603      	mov	r3, r0
 800309a:	4642      	mov	r2, r8
 800309c:	189b      	adds	r3, r3, r2
 800309e:	66bb      	str	r3, [r7, #104]	; 0x68
 80030a0:	464b      	mov	r3, r9
 80030a2:	460a      	mov	r2, r1
 80030a4:	eb42 0303 	adc.w	r3, r2, r3
 80030a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	663b      	str	r3, [r7, #96]	; 0x60
 80030b4:	667a      	str	r2, [r7, #100]	; 0x64
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030c2:	4649      	mov	r1, r9
 80030c4:	008b      	lsls	r3, r1, #2
 80030c6:	4641      	mov	r1, r8
 80030c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030cc:	4641      	mov	r1, r8
 80030ce:	008a      	lsls	r2, r1, #2
 80030d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030d4:	f7fd fde8 	bl	8000ca8 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <UART_SetConfig+0x4e4>)
 80030de:	fba3 1302 	umull	r1, r3, r3, r2
 80030e2:	095b      	lsrs	r3, r3, #5
 80030e4:	2164      	movs	r1, #100	; 0x64
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	3332      	adds	r3, #50	; 0x32
 80030f0:	4a08      	ldr	r2, [pc, #32]	; (8003114 <UART_SetConfig+0x4e4>)
 80030f2:	fba2 2303 	umull	r2, r3, r2, r3
 80030f6:	095b      	lsrs	r3, r3, #5
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4422      	add	r2, r4
 8003104:	609a      	str	r2, [r3, #8]
}
 8003106:	bf00      	nop
 8003108:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800310c:	46bd      	mov	sp, r7
 800310e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003112:	bf00      	nop
 8003114:	51eb851f 	.word	0x51eb851f

08003118 <arm_max_f32>:
 8003118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311c:	1e4f      	subs	r7, r1, #1
 800311e:	ea5f 0897 	movs.w	r8, r7, lsr #2
 8003122:	f100 0e04 	add.w	lr, r0, #4
 8003126:	edd0 7a00 	vldr	s15, [r0]
 800312a:	d058      	beq.n	80031de <arm_max_f32+0xc6>
 800312c:	3014      	adds	r0, #20
 800312e:	46c4      	mov	ip, r8
 8003130:	2604      	movs	r6, #4
 8003132:	2400      	movs	r4, #0
 8003134:	ed10 6a04 	vldr	s12, [r0, #-16]
 8003138:	ed50 6a03 	vldr	s13, [r0, #-12]
 800313c:	ed10 7a02 	vldr	s14, [r0, #-8]
 8003140:	ed50 5a01 	vldr	s11, [r0, #-4]
 8003144:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8003148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314c:	bfc8      	it	gt
 800314e:	eef0 7a46 	vmovgt.f32	s15, s12
 8003152:	f1a6 0503 	sub.w	r5, r6, #3
 8003156:	eef4 7ae6 	vcmpe.f32	s15, s13
 800315a:	bfc8      	it	gt
 800315c:	462c      	movgt	r4, r5
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	bf48      	it	mi
 8003164:	eef0 7a66 	vmovmi.f32	s15, s13
 8003168:	f1a6 0502 	sub.w	r5, r6, #2
 800316c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003170:	bf48      	it	mi
 8003172:	462c      	movmi	r4, r5
 8003174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003178:	bf48      	it	mi
 800317a:	eef0 7a47 	vmovmi.f32	s15, s14
 800317e:	f106 35ff 	add.w	r5, r6, #4294967295
 8003182:	eef4 7ae5 	vcmpe.f32	s15, s11
 8003186:	bf48      	it	mi
 8003188:	462c      	movmi	r4, r5
 800318a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800318e:	bf48      	it	mi
 8003190:	4634      	movmi	r4, r6
 8003192:	bf48      	it	mi
 8003194:	eef0 7a65 	vmovmi.f32	s15, s11
 8003198:	f1bc 0c01 	subs.w	ip, ip, #1
 800319c:	f100 0010 	add.w	r0, r0, #16
 80031a0:	f106 0604 	add.w	r6, r6, #4
 80031a4:	d1c6      	bne.n	8003134 <arm_max_f32+0x1c>
 80031a6:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 80031aa:	f017 0003 	ands.w	r0, r7, #3
 80031ae:	d018      	beq.n	80031e2 <arm_max_f32+0xca>
 80031b0:	1a08      	subs	r0, r1, r0
 80031b2:	ecbe 7a01 	vldmia	lr!, {s14}
 80031b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80031ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031be:	bfc8      	it	gt
 80031c0:	4604      	movgt	r4, r0
 80031c2:	f100 0001 	add.w	r0, r0, #1
 80031c6:	bfd8      	it	le
 80031c8:	eeb0 7a67 	vmovle.f32	s14, s15
 80031cc:	4281      	cmp	r1, r0
 80031ce:	eef0 7a47 	vmov.f32	s15, s14
 80031d2:	d1ee      	bne.n	80031b2 <arm_max_f32+0x9a>
 80031d4:	ed82 7a00 	vstr	s14, [r2]
 80031d8:	601c      	str	r4, [r3, #0]
 80031da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031de:	4644      	mov	r4, r8
 80031e0:	e7e3      	b.n	80031aa <arm_max_f32+0x92>
 80031e2:	eeb0 7a67 	vmov.f32	s14, s15
 80031e6:	e7f5      	b.n	80031d4 <arm_max_f32+0xbc>

080031e8 <arm_cfft_radix8by2_f32>:
 80031e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031ec:	ed2d 8b08 	vpush	{d8-d11}
 80031f0:	4607      	mov	r7, r0
 80031f2:	4608      	mov	r0, r1
 80031f4:	f8b7 e000 	ldrh.w	lr, [r7]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	ea4f 015e 	mov.w	r1, lr, lsr #1
 80031fe:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8003202:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8003206:	f000 80b0 	beq.w	800336a <arm_cfft_radix8by2_f32+0x182>
 800320a:	008b      	lsls	r3, r1, #2
 800320c:	3310      	adds	r3, #16
 800320e:	18c6      	adds	r6, r0, r3
 8003210:	3210      	adds	r2, #16
 8003212:	4443      	add	r3, r8
 8003214:	f100 0510 	add.w	r5, r0, #16
 8003218:	f108 0410 	add.w	r4, r8, #16
 800321c:	ed54 1a04 	vldr	s3, [r4, #-16]
 8003220:	ed54 6a03 	vldr	s13, [r4, #-12]
 8003224:	ed13 4a04 	vldr	s8, [r3, #-16]
 8003228:	ed53 3a03 	vldr	s7, [r3, #-12]
 800322c:	ed53 5a02 	vldr	s11, [r3, #-8]
 8003230:	ed13 5a01 	vldr	s10, [r3, #-4]
 8003234:	ed14 0a02 	vldr	s0, [r4, #-8]
 8003238:	ed54 7a01 	vldr	s15, [r4, #-4]
 800323c:	ed16 2a04 	vldr	s4, [r6, #-16]
 8003240:	ed56 2a03 	vldr	s5, [r6, #-12]
 8003244:	ed15 6a03 	vldr	s12, [r5, #-12]
 8003248:	ed15 7a01 	vldr	s14, [r5, #-4]
 800324c:	ed15 3a04 	vldr	s6, [r5, #-16]
 8003250:	ed56 0a02 	vldr	s1, [r6, #-8]
 8003254:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003258:	ed55 4a02 	vldr	s9, [r5, #-8]
 800325c:	ee73 ba21 	vadd.f32	s23, s6, s3
 8003260:	ee36 ba26 	vadd.f32	s22, s12, s13
 8003264:	ee37 aa27 	vadd.f32	s20, s14, s15
 8003268:	ee72 9a04 	vadd.f32	s19, s4, s8
 800326c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8003270:	ee31 8a05 	vadd.f32	s16, s2, s10
 8003274:	ee74 aa80 	vadd.f32	s21, s9, s0
 8003278:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800327c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8003280:	ed05 ba03 	vstr	s22, [r5, #-12]
 8003284:	ed45 aa02 	vstr	s21, [r5, #-8]
 8003288:	ed05 aa01 	vstr	s20, [r5, #-4]
 800328c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8003290:	ed46 9a04 	vstr	s19, [r6, #-16]
 8003294:	ed06 9a03 	vstr	s18, [r6, #-12]
 8003298:	ed46 8a02 	vstr	s17, [r6, #-8]
 800329c:	ee76 6a66 	vsub.f32	s13, s12, s13
 80032a0:	ee73 3ae2 	vsub.f32	s7, s7, s5
 80032a4:	ed12 6a03 	vldr	s12, [r2, #-12]
 80032a8:	ed52 2a04 	vldr	s5, [r2, #-16]
 80032ac:	ee33 3a61 	vsub.f32	s6, s6, s3
 80032b0:	ee34 4a42 	vsub.f32	s8, s8, s4
 80032b4:	ee26 8a86 	vmul.f32	s16, s13, s12
 80032b8:	ee24 2a06 	vmul.f32	s4, s8, s12
 80032bc:	ee63 1a22 	vmul.f32	s3, s6, s5
 80032c0:	ee24 4a22 	vmul.f32	s8, s8, s5
 80032c4:	ee23 3a06 	vmul.f32	s6, s6, s12
 80032c8:	ee66 6aa2 	vmul.f32	s13, s13, s5
 80032cc:	ee23 6a86 	vmul.f32	s12, s7, s12
 80032d0:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80032d4:	ee36 6a04 	vadd.f32	s12, s12, s8
 80032d8:	ee76 6ac3 	vsub.f32	s13, s13, s6
 80032dc:	ee72 3a63 	vsub.f32	s7, s4, s7
 80032e0:	ee71 2a88 	vadd.f32	s5, s3, s16
 80032e4:	ed44 6a03 	vstr	s13, [r4, #-12]
 80032e8:	ed44 2a04 	vstr	s5, [r4, #-16]
 80032ec:	ed43 3a04 	vstr	s7, [r3, #-16]
 80032f0:	ed03 6a03 	vstr	s12, [r3, #-12]
 80032f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f8:	ee75 6ae0 	vsub.f32	s13, s11, s1
 80032fc:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003300:	ed52 5a02 	vldr	s11, [r2, #-8]
 8003304:	ee35 6a41 	vsub.f32	s12, s10, s2
 8003308:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800330c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8003310:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003314:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8003318:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800331c:	ee64 4a87 	vmul.f32	s9, s9, s14
 8003320:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8003324:	ee26 7a07 	vmul.f32	s14, s12, s14
 8003328:	ee26 6a25 	vmul.f32	s12, s12, s11
 800332c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003330:	ee74 5a23 	vadd.f32	s11, s8, s7
 8003334:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003338:	ee37 7a26 	vadd.f32	s14, s14, s13
 800333c:	f1be 0e01 	subs.w	lr, lr, #1
 8003340:	ed44 5a02 	vstr	s11, [r4, #-8]
 8003344:	f105 0510 	add.w	r5, r5, #16
 8003348:	ed44 7a01 	vstr	s15, [r4, #-4]
 800334c:	f106 0610 	add.w	r6, r6, #16
 8003350:	ed03 6a02 	vstr	s12, [r3, #-8]
 8003354:	ed03 7a01 	vstr	s14, [r3, #-4]
 8003358:	f102 0210 	add.w	r2, r2, #16
 800335c:	f104 0410 	add.w	r4, r4, #16
 8003360:	f103 0310 	add.w	r3, r3, #16
 8003364:	f47f af5a 	bne.w	800321c <arm_cfft_radix8by2_f32+0x34>
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	b28c      	uxth	r4, r1
 800336c:	4621      	mov	r1, r4
 800336e:	2302      	movs	r3, #2
 8003370:	f000 fbca 	bl	8003b08 <arm_radix8_butterfly_f32>
 8003374:	ecbd 8b08 	vpop	{d8-d11}
 8003378:	4621      	mov	r1, r4
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4640      	mov	r0, r8
 800337e:	2302      	movs	r3, #2
 8003380:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003384:	f000 bbc0 	b.w	8003b08 <arm_radix8_butterfly_f32>

08003388 <arm_cfft_radix8by4_f32>:
 8003388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800338c:	ed2d 8b0a 	vpush	{d8-d12}
 8003390:	8802      	ldrh	r2, [r0, #0]
 8003392:	ed91 6a00 	vldr	s12, [r1]
 8003396:	b08f      	sub	sp, #60	; 0x3c
 8003398:	460f      	mov	r7, r1
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	6841      	ldr	r1, [r0, #4]
 800339e:	900c      	str	r0, [sp, #48]	; 0x30
 80033a0:	0093      	lsls	r3, r2, #2
 80033a2:	4638      	mov	r0, r7
 80033a4:	4418      	add	r0, r3
 80033a6:	4606      	mov	r6, r0
 80033a8:	9009      	str	r0, [sp, #36]	; 0x24
 80033aa:	4418      	add	r0, r3
 80033ac:	edd0 6a00 	vldr	s13, [r0]
 80033b0:	ed96 4a00 	vldr	s8, [r6]
 80033b4:	edd6 2a01 	vldr	s5, [r6, #4]
 80033b8:	edd0 7a01 	vldr	s15, [r0, #4]
 80033bc:	900a      	str	r0, [sp, #40]	; 0x28
 80033be:	ee76 5a26 	vadd.f32	s11, s12, s13
 80033c2:	4604      	mov	r4, r0
 80033c4:	4625      	mov	r5, r4
 80033c6:	441c      	add	r4, r3
 80033c8:	edd4 4a00 	vldr	s9, [r4]
 80033cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80033d0:	ed94 3a01 	vldr	s6, [r4, #4]
 80033d4:	9401      	str	r4, [sp, #4]
 80033d6:	ee35 5a84 	vadd.f32	s10, s11, s8
 80033da:	4630      	mov	r0, r6
 80033dc:	ee35 5a24 	vadd.f32	s10, s10, s9
 80033e0:	463e      	mov	r6, r7
 80033e2:	ee15 ea10 	vmov	lr, s10
 80033e6:	ee76 6a66 	vsub.f32	s13, s12, s13
 80033ea:	f846 eb08 	str.w	lr, [r6], #8
 80033ee:	ee37 6a27 	vadd.f32	s12, s14, s15
 80033f2:	ed90 5a01 	vldr	s10, [r0, #4]
 80033f6:	9605      	str	r6, [sp, #20]
 80033f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fc:	9e01      	ldr	r6, [sp, #4]
 80033fe:	9707      	str	r7, [sp, #28]
 8003400:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8003404:	ed96 2a01 	vldr	s4, [r6, #4]
 8003408:	ee36 7a05 	vadd.f32	s14, s12, s10
 800340c:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8003410:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8003414:	ee77 7a84 	vadd.f32	s15, s15, s8
 8003418:	ee33 4ac3 	vsub.f32	s8, s7, s6
 800341c:	4604      	mov	r4, r0
 800341e:	46a3      	mov	fp, r4
 8003420:	ee37 7a02 	vadd.f32	s14, s14, s4
 8003424:	ee35 5a24 	vadd.f32	s10, s10, s9
 8003428:	ee14 8a10 	vmov	r8, s8
 800342c:	46a4      	mov	ip, r4
 800342e:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8003432:	ed87 7a01 	vstr	s14, [r7, #4]
 8003436:	f84b 8b08 	str.w	r8, [fp], #8
 800343a:	f1ac 0704 	sub.w	r7, ip, #4
 800343e:	ed8c 5a01 	vstr	s10, [ip, #4]
 8003442:	f101 0c08 	add.w	ip, r1, #8
 8003446:	462c      	mov	r4, r5
 8003448:	f8cd c010 	str.w	ip, [sp, #16]
 800344c:	ee15 ca90 	vmov	ip, s11
 8003450:	ee36 6a62 	vsub.f32	s12, s12, s5
 8003454:	f844 cb08 	str.w	ip, [r4], #8
 8003458:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800345c:	ee36 6a43 	vsub.f32	s12, s12, s6
 8003460:	9406      	str	r4, [sp, #24]
 8003462:	ee76 6a83 	vadd.f32	s13, s13, s6
 8003466:	f101 0410 	add.w	r4, r1, #16
 800346a:	0852      	lsrs	r2, r2, #1
 800346c:	9402      	str	r4, [sp, #8]
 800346e:	ed85 6a01 	vstr	s12, [r5, #4]
 8003472:	462c      	mov	r4, r5
 8003474:	f101 0518 	add.w	r5, r1, #24
 8003478:	920b      	str	r2, [sp, #44]	; 0x2c
 800347a:	46b2      	mov	sl, r6
 800347c:	9503      	str	r5, [sp, #12]
 800347e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8003482:	3a02      	subs	r2, #2
 8003484:	ee16 5a90 	vmov	r5, s13
 8003488:	46b6      	mov	lr, r6
 800348a:	4630      	mov	r0, r6
 800348c:	0852      	lsrs	r2, r2, #1
 800348e:	f84a 5b08 	str.w	r5, [sl], #8
 8003492:	f1a0 0604 	sub.w	r6, r0, #4
 8003496:	edce 7a01 	vstr	s15, [lr, #4]
 800349a:	9208      	str	r2, [sp, #32]
 800349c:	f000 8130 	beq.w	8003700 <arm_cfft_radix8by4_f32+0x378>
 80034a0:	4691      	mov	r9, r2
 80034a2:	9a07      	ldr	r2, [sp, #28]
 80034a4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80034a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80034ac:	3b08      	subs	r3, #8
 80034ae:	f102 0510 	add.w	r5, r2, #16
 80034b2:	f101 0c20 	add.w	ip, r1, #32
 80034b6:	f1a4 020c 	sub.w	r2, r4, #12
 80034ba:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 80034be:	4433      	add	r3, r6
 80034c0:	3410      	adds	r4, #16
 80034c2:	4650      	mov	r0, sl
 80034c4:	4659      	mov	r1, fp
 80034c6:	ed55 3a02 	vldr	s7, [r5, #-8]
 80034ca:	ed14 5a02 	vldr	s10, [r4, #-8]
 80034ce:	ed91 7a00 	vldr	s14, [r1]
 80034d2:	edd0 7a00 	vldr	s15, [r0]
 80034d6:	ed54 5a01 	vldr	s11, [r4, #-4]
 80034da:	ed15 4a01 	vldr	s8, [r5, #-4]
 80034de:	edd0 6a01 	vldr	s13, [r0, #4]
 80034e2:	ed91 6a01 	vldr	s12, [r1, #4]
 80034e6:	ee33 8a85 	vadd.f32	s16, s7, s10
 80034ea:	ee34 0a25 	vadd.f32	s0, s8, s11
 80034ee:	ee78 4a07 	vadd.f32	s9, s16, s14
 80034f2:	ee74 5a65 	vsub.f32	s11, s8, s11
 80034f6:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80034fa:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80034fe:	ed45 4a02 	vstr	s9, [r5, #-8]
 8003502:	edd1 4a01 	vldr	s9, [r1, #4]
 8003506:	ed90 4a01 	vldr	s8, [r0, #4]
 800350a:	ee70 4a24 	vadd.f32	s9, s0, s9
 800350e:	ee75 aa06 	vadd.f32	s21, s10, s12
 8003512:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003516:	ee35 aac7 	vsub.f32	s20, s11, s14
 800351a:	ed45 4a01 	vstr	s9, [r5, #-4]
 800351e:	edd6 1a00 	vldr	s3, [r6]
 8003522:	edd7 0a00 	vldr	s1, [r7]
 8003526:	ed92 4a02 	vldr	s8, [r2, #8]
 800352a:	edd3 3a02 	vldr	s7, [r3, #8]
 800352e:	ed93 2a01 	vldr	s4, [r3, #4]
 8003532:	ed16 1a01 	vldr	s2, [r6, #-4]
 8003536:	edd2 2a01 	vldr	s5, [r2, #4]
 800353a:	ed57 9a01 	vldr	s19, [r7, #-4]
 800353e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8003542:	ee39 3a81 	vadd.f32	s6, s19, s2
 8003546:	ee74 8a84 	vadd.f32	s17, s9, s8
 800354a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800354e:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8003552:	ee7a aae6 	vsub.f32	s21, s21, s13
 8003556:	ee18 aa90 	vmov	sl, s17
 800355a:	f847 a908 	str.w	sl, [r7], #-8
 800355e:	edd2 8a01 	vldr	s17, [r2, #4]
 8003562:	ed93 9a01 	vldr	s18, [r3, #4]
 8003566:	ee73 8a28 	vadd.f32	s17, s6, s17
 800356a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800356e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8003572:	ee74 0a63 	vsub.f32	s1, s8, s7
 8003576:	edc7 8a01 	vstr	s17, [r7, #4]
 800357a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800357e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8003582:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8003586:	ee6a ba28 	vmul.f32	s23, s20, s17
 800358a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800358e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8003592:	ee31 9a20 	vadd.f32	s18, s2, s1
 8003596:	ee79 9a82 	vadd.f32	s19, s19, s4
 800359a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800359e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 80035a2:	ee69 baa8 	vmul.f32	s23, s19, s17
 80035a6:	ee2a aa0b 	vmul.f32	s20, s20, s22
 80035aa:	ee69 9a8b 	vmul.f32	s19, s19, s22
 80035ae:	ee69 8a28 	vmul.f32	s17, s18, s17
 80035b2:	ee29 ba0b 	vmul.f32	s22, s18, s22
 80035b6:	ee1c aa10 	vmov	sl, s24
 80035ba:	ee78 8aa9 	vadd.f32	s17, s17, s19
 80035be:	f841 ab08 	str.w	sl, [r1], #8
 80035c2:	ee3a aa6a 	vsub.f32	s20, s20, s21
 80035c6:	ee3b bacb 	vsub.f32	s22, s23, s22
 80035ca:	ee34 4ac4 	vsub.f32	s8, s9, s8
 80035ce:	ee33 3a62 	vsub.f32	s6, s6, s5
 80035d2:	ed01 aa01 	vstr	s20, [r1, #-4]
 80035d6:	edc2 8a01 	vstr	s17, [r2, #4]
 80035da:	ed82 ba02 	vstr	s22, [r2, #8]
 80035de:	ed5c 4a04 	vldr	s9, [ip, #-16]
 80035e2:	ee74 3a63 	vsub.f32	s7, s8, s7
 80035e6:	ee38 8a47 	vsub.f32	s16, s16, s14
 80035ea:	ed1c 4a03 	vldr	s8, [ip, #-12]
 80035ee:	ee30 0a46 	vsub.f32	s0, s0, s12
 80035f2:	ee33 3a42 	vsub.f32	s6, s6, s4
 80035f6:	ee38 8a67 	vsub.f32	s16, s16, s15
 80035fa:	ee30 0a66 	vsub.f32	s0, s0, s13
 80035fe:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8003602:	ee63 8a04 	vmul.f32	s17, s6, s8
 8003606:	ee28 aa24 	vmul.f32	s20, s16, s9
 800360a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800360e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8003612:	ee20 0a24 	vmul.f32	s0, s0, s9
 8003616:	ee63 3a84 	vmul.f32	s7, s7, s8
 800361a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800361e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8003622:	ee14 aa10 	vmov	sl, s8
 8003626:	ee30 0a48 	vsub.f32	s0, s0, s16
 800362a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800362e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8003632:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8003636:	ed04 0a01 	vstr	s0, [r4, #-4]
 800363a:	f846 a908 	str.w	sl, [r6], #-8
 800363e:	ee35 6a46 	vsub.f32	s12, s10, s12
 8003642:	ee35 7a87 	vadd.f32	s14, s11, s14
 8003646:	edc6 3a01 	vstr	s7, [r6, #4]
 800364a:	ee76 6a26 	vadd.f32	s13, s12, s13
 800364e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003652:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8003656:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 800365a:	ee67 5a86 	vmul.f32	s11, s15, s12
 800365e:	ee26 5a87 	vmul.f32	s10, s13, s14
 8003662:	ee72 2a62 	vsub.f32	s5, s4, s5
 8003666:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800366a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800366e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8003672:	ee62 0a86 	vmul.f32	s1, s5, s12
 8003676:	ee66 6a86 	vmul.f32	s13, s13, s12
 800367a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800367e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8003682:	ee62 2a87 	vmul.f32	s5, s5, s14
 8003686:	ee21 1a07 	vmul.f32	s2, s2, s14
 800368a:	ee15 aa90 	vmov	sl, s11
 800368e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003692:	f840 ab08 	str.w	sl, [r0], #8
 8003696:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800369a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800369e:	f1b9 0901 	subs.w	r9, r9, #1
 80036a2:	ed40 7a01 	vstr	s15, [r0, #-4]
 80036a6:	f105 0508 	add.w	r5, r5, #8
 80036aa:	ed83 1a02 	vstr	s2, [r3, #8]
 80036ae:	edc3 2a01 	vstr	s5, [r3, #4]
 80036b2:	f108 0808 	add.w	r8, r8, #8
 80036b6:	f1a2 0208 	sub.w	r2, r2, #8
 80036ba:	f10c 0c10 	add.w	ip, ip, #16
 80036be:	f104 0408 	add.w	r4, r4, #8
 80036c2:	f10e 0e18 	add.w	lr, lr, #24
 80036c6:	f1a3 0308 	sub.w	r3, r3, #8
 80036ca:	f47f aefc 	bne.w	80034c6 <arm_cfft_radix8by4_f32+0x13e>
 80036ce:	9908      	ldr	r1, [sp, #32]
 80036d0:	9802      	ldr	r0, [sp, #8]
 80036d2:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 80036d6:	00cb      	lsls	r3, r1, #3
 80036d8:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80036dc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80036e0:	9102      	str	r1, [sp, #8]
 80036e2:	9905      	ldr	r1, [sp, #20]
 80036e4:	4419      	add	r1, r3
 80036e6:	9105      	str	r1, [sp, #20]
 80036e8:	9904      	ldr	r1, [sp, #16]
 80036ea:	4419      	add	r1, r3
 80036ec:	9104      	str	r1, [sp, #16]
 80036ee:	9906      	ldr	r1, [sp, #24]
 80036f0:	449b      	add	fp, r3
 80036f2:	4419      	add	r1, r3
 80036f4:	449a      	add	sl, r3
 80036f6:	9b03      	ldr	r3, [sp, #12]
 80036f8:	9106      	str	r1, [sp, #24]
 80036fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80036fe:	9303      	str	r3, [sp, #12]
 8003700:	9a05      	ldr	r2, [sp, #20]
 8003702:	9806      	ldr	r0, [sp, #24]
 8003704:	ed92 4a00 	vldr	s8, [r2]
 8003708:	ed90 7a00 	vldr	s14, [r0]
 800370c:	ed9b 3a00 	vldr	s6, [fp]
 8003710:	edda 3a00 	vldr	s7, [sl]
 8003714:	edd2 4a01 	vldr	s9, [r2, #4]
 8003718:	edd0 6a01 	vldr	s13, [r0, #4]
 800371c:	ed9a 2a01 	vldr	s4, [sl, #4]
 8003720:	eddb 7a01 	vldr	s15, [fp, #4]
 8003724:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8003728:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800372a:	ee34 6a07 	vadd.f32	s12, s8, s14
 800372e:	ee74 5aa6 	vadd.f32	s11, s9, s13
 8003732:	ee36 5a03 	vadd.f32	s10, s12, s6
 8003736:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800373a:	ee35 5a23 	vadd.f32	s10, s10, s7
 800373e:	ee34 7a47 	vsub.f32	s14, s8, s14
 8003742:	ed82 5a00 	vstr	s10, [r2]
 8003746:	ed9b 5a01 	vldr	s10, [fp, #4]
 800374a:	edda 4a01 	vldr	s9, [sl, #4]
 800374e:	ee35 5a85 	vadd.f32	s10, s11, s10
 8003752:	ee37 4a27 	vadd.f32	s8, s14, s15
 8003756:	ee35 5a24 	vadd.f32	s10, s10, s9
 800375a:	ee76 4ac3 	vsub.f32	s9, s13, s6
 800375e:	ed82 5a01 	vstr	s10, [r2, #4]
 8003762:	9a04      	ldr	r2, [sp, #16]
 8003764:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8003768:	edd2 1a00 	vldr	s3, [r2]
 800376c:	edd2 2a01 	vldr	s5, [r2, #4]
 8003770:	9a02      	ldr	r2, [sp, #8]
 8003772:	ee34 4a42 	vsub.f32	s8, s8, s4
 8003776:	ee36 6a43 	vsub.f32	s12, s12, s6
 800377a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800377e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8003782:	ee65 2a22 	vmul.f32	s5, s10, s5
 8003786:	ee25 5a21 	vmul.f32	s10, s10, s3
 800378a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800378e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8003792:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8003796:	edcb 2a00 	vstr	s5, [fp]
 800379a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800379e:	ed92 4a01 	vldr	s8, [r2, #4]
 80037a2:	ed92 5a00 	vldr	s10, [r2]
 80037a6:	9a03      	ldr	r2, [sp, #12]
 80037a8:	ee36 6a63 	vsub.f32	s12, s12, s7
 80037ac:	ee75 5ac2 	vsub.f32	s11, s11, s4
 80037b0:	ee66 4a05 	vmul.f32	s9, s12, s10
 80037b4:	ee25 5a85 	vmul.f32	s10, s11, s10
 80037b8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80037bc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80037c0:	ee35 6a46 	vsub.f32	s12, s10, s12
 80037c4:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80037c8:	ee76 6a83 	vadd.f32	s13, s13, s6
 80037cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037d0:	ed80 6a01 	vstr	s12, [r0, #4]
 80037d4:	edc0 5a00 	vstr	s11, [r0]
 80037d8:	edd2 5a01 	vldr	s11, [r2, #4]
 80037dc:	9807      	ldr	r0, [sp, #28]
 80037de:	ee77 7a02 	vadd.f32	s15, s14, s4
 80037e2:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80037e6:	edd2 6a00 	vldr	s13, [r2]
 80037ea:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80037ee:	ee67 6a26 	vmul.f32	s13, s14, s13
 80037f2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80037f6:	ee27 7a25 	vmul.f32	s14, s14, s11
 80037fa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037fe:	ee36 7a07 	vadd.f32	s14, s12, s14
 8003802:	edca 7a01 	vstr	s15, [sl, #4]
 8003806:	ed8a 7a00 	vstr	s14, [sl]
 800380a:	6872      	ldr	r2, [r6, #4]
 800380c:	4621      	mov	r1, r4
 800380e:	2304      	movs	r3, #4
 8003810:	f000 f97a 	bl	8003b08 <arm_radix8_butterfly_f32>
 8003814:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003816:	6872      	ldr	r2, [r6, #4]
 8003818:	4621      	mov	r1, r4
 800381a:	2304      	movs	r3, #4
 800381c:	f000 f974 	bl	8003b08 <arm_radix8_butterfly_f32>
 8003820:	980a      	ldr	r0, [sp, #40]	; 0x28
 8003822:	6872      	ldr	r2, [r6, #4]
 8003824:	4621      	mov	r1, r4
 8003826:	2304      	movs	r3, #4
 8003828:	f000 f96e 	bl	8003b08 <arm_radix8_butterfly_f32>
 800382c:	6872      	ldr	r2, [r6, #4]
 800382e:	9801      	ldr	r0, [sp, #4]
 8003830:	4621      	mov	r1, r4
 8003832:	2304      	movs	r3, #4
 8003834:	b00f      	add	sp, #60	; 0x3c
 8003836:	ecbd 8b0a 	vpop	{d8-d12}
 800383a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800383e:	f000 b963 	b.w	8003b08 <arm_radix8_butterfly_f32>
 8003842:	bf00      	nop

08003844 <arm_cfft_f32>:
 8003844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003848:	2a01      	cmp	r2, #1
 800384a:	4606      	mov	r6, r0
 800384c:	4617      	mov	r7, r2
 800384e:	460c      	mov	r4, r1
 8003850:	4698      	mov	r8, r3
 8003852:	8805      	ldrh	r5, [r0, #0]
 8003854:	d054      	beq.n	8003900 <arm_cfft_f32+0xbc>
 8003856:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800385a:	d04c      	beq.n	80038f6 <arm_cfft_f32+0xb2>
 800385c:	d916      	bls.n	800388c <arm_cfft_f32+0x48>
 800385e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8003862:	d01a      	beq.n	800389a <arm_cfft_f32+0x56>
 8003864:	d95c      	bls.n	8003920 <arm_cfft_f32+0xdc>
 8003866:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800386a:	d044      	beq.n	80038f6 <arm_cfft_f32+0xb2>
 800386c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8003870:	d105      	bne.n	800387e <arm_cfft_f32+0x3a>
 8003872:	2301      	movs	r3, #1
 8003874:	6872      	ldr	r2, [r6, #4]
 8003876:	4629      	mov	r1, r5
 8003878:	4620      	mov	r0, r4
 800387a:	f000 f945 	bl	8003b08 <arm_radix8_butterfly_f32>
 800387e:	f1b8 0f00 	cmp.w	r8, #0
 8003882:	d111      	bne.n	80038a8 <arm_cfft_f32+0x64>
 8003884:	2f01      	cmp	r7, #1
 8003886:	d016      	beq.n	80038b6 <arm_cfft_f32+0x72>
 8003888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800388c:	2d20      	cmp	r5, #32
 800388e:	d032      	beq.n	80038f6 <arm_cfft_f32+0xb2>
 8003890:	d94a      	bls.n	8003928 <arm_cfft_f32+0xe4>
 8003892:	2d40      	cmp	r5, #64	; 0x40
 8003894:	d0ed      	beq.n	8003872 <arm_cfft_f32+0x2e>
 8003896:	2d80      	cmp	r5, #128	; 0x80
 8003898:	d1f1      	bne.n	800387e <arm_cfft_f32+0x3a>
 800389a:	4621      	mov	r1, r4
 800389c:	4630      	mov	r0, r6
 800389e:	f7ff fca3 	bl	80031e8 <arm_cfft_radix8by2_f32>
 80038a2:	f1b8 0f00 	cmp.w	r8, #0
 80038a6:	d0ed      	beq.n	8003884 <arm_cfft_f32+0x40>
 80038a8:	68b2      	ldr	r2, [r6, #8]
 80038aa:	89b1      	ldrh	r1, [r6, #12]
 80038ac:	4620      	mov	r0, r4
 80038ae:	f7fc fcaf 	bl	8000210 <arm_bitreversal_32>
 80038b2:	2f01      	cmp	r7, #1
 80038b4:	d1e8      	bne.n	8003888 <arm_cfft_f32+0x44>
 80038b6:	ee07 5a90 	vmov	s15, r5
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80038c2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038c6:	2d00      	cmp	r5, #0
 80038c8:	d0de      	beq.n	8003888 <arm_cfft_f32+0x44>
 80038ca:	f104 0108 	add.w	r1, r4, #8
 80038ce:	2300      	movs	r3, #0
 80038d0:	3301      	adds	r3, #1
 80038d2:	429d      	cmp	r5, r3
 80038d4:	f101 0108 	add.w	r1, r1, #8
 80038d8:	ed11 7a04 	vldr	s14, [r1, #-16]
 80038dc:	ed51 7a03 	vldr	s15, [r1, #-12]
 80038e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80038e4:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80038e8:	ed01 7a04 	vstr	s14, [r1, #-16]
 80038ec:	ed41 7a03 	vstr	s15, [r1, #-12]
 80038f0:	d1ee      	bne.n	80038d0 <arm_cfft_f32+0x8c>
 80038f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f6:	4621      	mov	r1, r4
 80038f8:	4630      	mov	r0, r6
 80038fa:	f7ff fd45 	bl	8003388 <arm_cfft_radix8by4_f32>
 80038fe:	e7be      	b.n	800387e <arm_cfft_f32+0x3a>
 8003900:	b1ad      	cbz	r5, 800392e <arm_cfft_f32+0xea>
 8003902:	f101 030c 	add.w	r3, r1, #12
 8003906:	2200      	movs	r2, #0
 8003908:	ed53 7a02 	vldr	s15, [r3, #-8]
 800390c:	3201      	adds	r2, #1
 800390e:	eef1 7a67 	vneg.f32	s15, s15
 8003912:	4295      	cmp	r5, r2
 8003914:	ed43 7a02 	vstr	s15, [r3, #-8]
 8003918:	f103 0308 	add.w	r3, r3, #8
 800391c:	d1f4      	bne.n	8003908 <arm_cfft_f32+0xc4>
 800391e:	e79a      	b.n	8003856 <arm_cfft_f32+0x12>
 8003920:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8003924:	d0a5      	beq.n	8003872 <arm_cfft_f32+0x2e>
 8003926:	e7aa      	b.n	800387e <arm_cfft_f32+0x3a>
 8003928:	2d10      	cmp	r5, #16
 800392a:	d0b6      	beq.n	800389a <arm_cfft_f32+0x56>
 800392c:	e7a7      	b.n	800387e <arm_cfft_f32+0x3a>
 800392e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8003932:	d894      	bhi.n	800385e <arm_cfft_f32+0x1a>
 8003934:	e7aa      	b.n	800388c <arm_cfft_f32+0x48>
 8003936:	bf00      	nop

08003938 <arm_cmplx_mag_f32>:
 8003938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800393c:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8003940:	b084      	sub	sp, #16
 8003942:	d07f      	beq.n	8003a44 <arm_cmplx_mag_f32+0x10c>
 8003944:	2700      	movs	r7, #0
 8003946:	f100 0420 	add.w	r4, r0, #32
 800394a:	f101 0510 	add.w	r5, r1, #16
 800394e:	4646      	mov	r6, r8
 8003950:	e05a      	b.n	8003a08 <arm_cmplx_mag_f32+0xd0>
 8003952:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003956:	eeb4 0a40 	vcmp.f32	s0, s0
 800395a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395e:	f040 80a4 	bne.w	8003aaa <arm_cmplx_mag_f32+0x172>
 8003962:	ed05 0a04 	vstr	s0, [r5, #-16]
 8003966:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800396a:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 800396e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003972:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003976:	ee77 7a80 	vadd.f32	s15, s15, s0
 800397a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800397e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003982:	f2c0 808f 	blt.w	8003aa4 <arm_cmplx_mag_f32+0x16c>
 8003986:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800398a:	eeb4 0a40 	vcmp.f32	s0, s0
 800398e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003992:	f040 80af 	bne.w	8003af4 <arm_cmplx_mag_f32+0x1bc>
 8003996:	ed05 0a03 	vstr	s0, [r5, #-12]
 800399a:	ed54 7a04 	vldr	s15, [r4, #-16]
 800399e:	ed14 0a03 	vldr	s0, [r4, #-12]
 80039a2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039a6:	ee20 0a00 	vmul.f32	s0, s0, s0
 80039aa:	ee77 7a80 	vadd.f32	s15, s15, s0
 80039ae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039b6:	db72      	blt.n	8003a9e <arm_cmplx_mag_f32+0x166>
 80039b8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80039bc:	eeb4 0a40 	vcmp.f32	s0, s0
 80039c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c4:	f040 808c 	bne.w	8003ae0 <arm_cmplx_mag_f32+0x1a8>
 80039c8:	ed05 0a02 	vstr	s0, [r5, #-8]
 80039cc:	ed54 7a02 	vldr	s15, [r4, #-8]
 80039d0:	ed14 0a01 	vldr	s0, [r4, #-4]
 80039d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80039d8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80039dc:	ee77 7a80 	vadd.f32	s15, s15, s0
 80039e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e8:	db20      	blt.n	8003a2c <arm_cmplx_mag_f32+0xf4>
 80039ea:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80039ee:	eeb4 0a40 	vcmp.f32	s0, s0
 80039f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f6:	d169      	bne.n	8003acc <arm_cmplx_mag_f32+0x194>
 80039f8:	3e01      	subs	r6, #1
 80039fa:	ed05 0a01 	vstr	s0, [r5, #-4]
 80039fe:	f104 0420 	add.w	r4, r4, #32
 8003a02:	f105 0510 	add.w	r5, r5, #16
 8003a06:	d019      	beq.n	8003a3c <arm_cmplx_mag_f32+0x104>
 8003a08:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8003a0c:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8003a10:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003a18:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	da95      	bge.n	8003952 <arm_cmplx_mag_f32+0x1a>
 8003a26:	f845 7c10 	str.w	r7, [r5, #-16]
 8003a2a:	e79c      	b.n	8003966 <arm_cmplx_mag_f32+0x2e>
 8003a2c:	3e01      	subs	r6, #1
 8003a2e:	f845 7c04 	str.w	r7, [r5, #-4]
 8003a32:	f104 0420 	add.w	r4, r4, #32
 8003a36:	f105 0510 	add.w	r5, r5, #16
 8003a3a:	d1e5      	bne.n	8003a08 <arm_cmplx_mag_f32+0xd0>
 8003a3c:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8003a40:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8003a44:	f012 0503 	ands.w	r5, r2, #3
 8003a48:	d026      	beq.n	8003a98 <arm_cmplx_mag_f32+0x160>
 8003a4a:	2600      	movs	r6, #0
 8003a4c:	f100 0408 	add.w	r4, r0, #8
 8003a50:	e00c      	b.n	8003a6c <arm_cmplx_mag_f32+0x134>
 8003a52:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8003a56:	eeb4 0a40 	vcmp.f32	s0, s0
 8003a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5e:	d12e      	bne.n	8003abe <arm_cmplx_mag_f32+0x186>
 8003a60:	3d01      	subs	r5, #1
 8003a62:	ed01 0a01 	vstr	s0, [r1, #-4]
 8003a66:	f104 0408 	add.w	r4, r4, #8
 8003a6a:	d015      	beq.n	8003a98 <arm_cmplx_mag_f32+0x160>
 8003a6c:	ed54 7a02 	vldr	s15, [r4, #-8]
 8003a70:	ed14 0a01 	vldr	s0, [r4, #-4]
 8003a74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a78:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003a7c:	3104      	adds	r1, #4
 8003a7e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8003a82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a8a:	dae2      	bge.n	8003a52 <arm_cmplx_mag_f32+0x11a>
 8003a8c:	3d01      	subs	r5, #1
 8003a8e:	f841 6c04 	str.w	r6, [r1, #-4]
 8003a92:	f104 0408 	add.w	r4, r4, #8
 8003a96:	d1e9      	bne.n	8003a6c <arm_cmplx_mag_f32+0x134>
 8003a98:	b004      	add	sp, #16
 8003a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a9e:	f845 7c08 	str.w	r7, [r5, #-8]
 8003aa2:	e793      	b.n	80039cc <arm_cmplx_mag_f32+0x94>
 8003aa4:	f845 7c0c 	str.w	r7, [r5, #-12]
 8003aa8:	e777      	b.n	800399a <arm_cmplx_mag_f32+0x62>
 8003aaa:	eeb0 0a67 	vmov.f32	s0, s15
 8003aae:	9203      	str	r2, [sp, #12]
 8003ab0:	9102      	str	r1, [sp, #8]
 8003ab2:	9001      	str	r0, [sp, #4]
 8003ab4:	f003 f94e 	bl	8006d54 <sqrtf>
 8003ab8:	a801      	add	r0, sp, #4
 8003aba:	c807      	ldmia	r0, {r0, r1, r2}
 8003abc:	e751      	b.n	8003962 <arm_cmplx_mag_f32+0x2a>
 8003abe:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac2:	9101      	str	r1, [sp, #4]
 8003ac4:	f003 f946 	bl	8006d54 <sqrtf>
 8003ac8:	9901      	ldr	r1, [sp, #4]
 8003aca:	e7c9      	b.n	8003a60 <arm_cmplx_mag_f32+0x128>
 8003acc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ad0:	9203      	str	r2, [sp, #12]
 8003ad2:	9102      	str	r1, [sp, #8]
 8003ad4:	9001      	str	r0, [sp, #4]
 8003ad6:	f003 f93d 	bl	8006d54 <sqrtf>
 8003ada:	a801      	add	r0, sp, #4
 8003adc:	c807      	ldmia	r0, {r0, r1, r2}
 8003ade:	e78b      	b.n	80039f8 <arm_cmplx_mag_f32+0xc0>
 8003ae0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ae4:	9203      	str	r2, [sp, #12]
 8003ae6:	9102      	str	r1, [sp, #8]
 8003ae8:	9001      	str	r0, [sp, #4]
 8003aea:	f003 f933 	bl	8006d54 <sqrtf>
 8003aee:	a801      	add	r0, sp, #4
 8003af0:	c807      	ldmia	r0, {r0, r1, r2}
 8003af2:	e769      	b.n	80039c8 <arm_cmplx_mag_f32+0x90>
 8003af4:	eeb0 0a67 	vmov.f32	s0, s15
 8003af8:	9203      	str	r2, [sp, #12]
 8003afa:	9102      	str	r1, [sp, #8]
 8003afc:	9001      	str	r0, [sp, #4]
 8003afe:	f003 f929 	bl	8006d54 <sqrtf>
 8003b02:	a801      	add	r0, sp, #4
 8003b04:	c807      	ldmia	r0, {r0, r1, r2}
 8003b06:	e746      	b.n	8003996 <arm_cmplx_mag_f32+0x5e>

08003b08 <arm_radix8_butterfly_f32>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	ed2d 8b10 	vpush	{d8-d15}
 8003b10:	461c      	mov	r4, r3
 8003b12:	b09d      	sub	sp, #116	; 0x74
 8003b14:	4603      	mov	r3, r0
 8003b16:	3304      	adds	r3, #4
 8003b18:	ed9f bac4 	vldr	s22, [pc, #784]	; 8003e2c <arm_radix8_butterfly_f32+0x324>
 8003b1c:	9019      	str	r0, [sp, #100]	; 0x64
 8003b1e:	921a      	str	r2, [sp, #104]	; 0x68
 8003b20:	468b      	mov	fp, r1
 8003b22:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b24:	468a      	mov	sl, r1
 8003b26:	46a1      	mov	r9, r4
 8003b28:	4607      	mov	r7, r0
 8003b2a:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8003b2e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8003b32:	eb03 0508 	add.w	r5, r3, r8
 8003b36:	195c      	adds	r4, r3, r5
 8003b38:	00de      	lsls	r6, r3, #3
 8003b3a:	191a      	adds	r2, r3, r4
 8003b3c:	9600      	str	r6, [sp, #0]
 8003b3e:	1898      	adds	r0, r3, r2
 8003b40:	4619      	mov	r1, r3
 8003b42:	9e00      	ldr	r6, [sp, #0]
 8003b44:	9311      	str	r3, [sp, #68]	; 0x44
 8003b46:	4401      	add	r1, r0
 8003b48:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8003b4c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8003b50:	19be      	adds	r6, r7, r6
 8003b52:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 8003b56:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8003b5a:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8003b5e:	9f00      	ldr	r7, [sp, #0]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	eb06 0e07 	add.w	lr, r6, r7
 8003b66:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8003b68:	9302      	str	r3, [sp, #8]
 8003b6a:	3204      	adds	r2, #4
 8003b6c:	3104      	adds	r1, #4
 8003b6e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b72:	f04f 0c00 	mov.w	ip, #0
 8003b76:	edde 7a00 	vldr	s15, [lr]
 8003b7a:	edd6 6a00 	vldr	s13, [r6]
 8003b7e:	ed95 2a00 	vldr	s4, [r5]
 8003b82:	ed17 aa01 	vldr	s20, [r7, #-4]
 8003b86:	edd4 4a00 	vldr	s9, [r4]
 8003b8a:	ed90 5a00 	vldr	s10, [r0]
 8003b8e:	ed12 7a01 	vldr	s14, [r2, #-4]
 8003b92:	ed51 0a01 	vldr	s1, [r1, #-4]
 8003b96:	ee77 8a85 	vadd.f32	s17, s15, s10
 8003b9a:	ee76 3a87 	vadd.f32	s7, s13, s14
 8003b9e:	ee32 4a20 	vadd.f32	s8, s4, s1
 8003ba2:	ee3a 3a24 	vadd.f32	s6, s20, s9
 8003ba6:	ee33 6a84 	vadd.f32	s12, s7, s8
 8003baa:	ee73 5a28 	vadd.f32	s11, s6, s17
 8003bae:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003bb2:	ee75 6a86 	vadd.f32	s13, s11, s12
 8003bb6:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8003bba:	ed47 6a01 	vstr	s13, [r7, #-4]
 8003bbe:	edc4 5a00 	vstr	s11, [r4]
 8003bc2:	ed92 9a00 	vldr	s18, [r2]
 8003bc6:	ed95 1a01 	vldr	s2, [r5, #4]
 8003bca:	edd6 5a01 	vldr	s11, [r6, #4]
 8003bce:	ed91 6a00 	vldr	s12, [r1]
 8003bd2:	edd7 2a00 	vldr	s5, [r7]
 8003bd6:	edd4 1a01 	vldr	s3, [r4, #4]
 8003bda:	edde 6a01 	vldr	s13, [lr, #4]
 8003bde:	edd0 9a01 	vldr	s19, [r0, #4]
 8003be2:	ee72 0a60 	vsub.f32	s1, s4, s1
 8003be6:	ee71 aa46 	vsub.f32	s21, s2, s12
 8003bea:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8003bee:	ee37 0a60 	vsub.f32	s0, s14, s1
 8003bf2:	ee32 8a2a 	vadd.f32	s16, s4, s21
 8003bf6:	ee37 7a20 	vadd.f32	s14, s14, s1
 8003bfa:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8003bfe:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8003c02:	ee75 5a89 	vadd.f32	s11, s11, s18
 8003c06:	ee60 0a0b 	vmul.f32	s1, s0, s22
 8003c0a:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8003c0e:	ee31 6a06 	vadd.f32	s12, s2, s12
 8003c12:	ee36 9aa9 	vadd.f32	s18, s13, s19
 8003c16:	ee32 1aa1 	vadd.f32	s2, s5, s3
 8003c1a:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8003c1e:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8003c22:	ee28 8a0b 	vmul.f32	s16, s16, s22
 8003c26:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8003c2a:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8003c2e:	ee33 3a68 	vsub.f32	s6, s6, s17
 8003c32:	ee36 0a88 	vadd.f32	s0, s13, s16
 8003c36:	ee75 8a86 	vadd.f32	s17, s11, s12
 8003c3a:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8003c3e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8003c42:	ee74 6ae0 	vsub.f32	s13, s9, s1
 8003c46:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8003c4a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8003c4e:	ee75 4a27 	vadd.f32	s9, s10, s15
 8003c52:	ee71 5a49 	vsub.f32	s11, s2, s18
 8003c56:	ee31 2a09 	vadd.f32	s4, s2, s18
 8003c5a:	ee75 7a67 	vsub.f32	s15, s10, s15
 8003c5e:	ee31 1aa2 	vadd.f32	s2, s3, s5
 8003c62:	ee71 2ae2 	vsub.f32	s5, s3, s5
 8003c66:	ee73 0a06 	vadd.f32	s1, s6, s12
 8003c6a:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8003c6e:	ee36 5a87 	vadd.f32	s10, s13, s14
 8003c72:	ee32 8a28 	vadd.f32	s16, s4, s17
 8003c76:	ee33 6a46 	vsub.f32	s12, s6, s12
 8003c7a:	ee34 4a25 	vadd.f32	s8, s8, s11
 8003c7e:	ee33 3a80 	vadd.f32	s6, s7, s0
 8003c82:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8003c86:	ee71 5a64 	vsub.f32	s11, s2, s9
 8003c8a:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8003c8e:	ee32 2a68 	vsub.f32	s4, s4, s17
 8003c92:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8003c96:	ee74 4a81 	vadd.f32	s9, s9, s2
 8003c9a:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8003c9e:	44dc      	add	ip, fp
 8003ca0:	45e2      	cmp	sl, ip
 8003ca2:	ed87 8a00 	vstr	s16, [r7]
 8003ca6:	ed84 2a01 	vstr	s4, [r4, #4]
 8003caa:	441f      	add	r7, r3
 8003cac:	edce 0a00 	vstr	s1, [lr]
 8003cb0:	441c      	add	r4, r3
 8003cb2:	ed80 6a00 	vstr	s12, [r0]
 8003cb6:	edce 1a01 	vstr	s3, [lr, #4]
 8003cba:	ed80 4a01 	vstr	s8, [r0, #4]
 8003cbe:	449e      	add	lr, r3
 8003cc0:	ed86 3a00 	vstr	s6, [r6]
 8003cc4:	4418      	add	r0, r3
 8003cc6:	ed41 3a01 	vstr	s7, [r1, #-4]
 8003cca:	ed02 5a01 	vstr	s10, [r2, #-4]
 8003cce:	ed85 7a00 	vstr	s14, [r5]
 8003cd2:	edc6 5a01 	vstr	s11, [r6, #4]
 8003cd6:	edc1 4a00 	vstr	s9, [r1]
 8003cda:	441e      	add	r6, r3
 8003cdc:	edc2 6a00 	vstr	s13, [r2]
 8003ce0:	4419      	add	r1, r3
 8003ce2:	edc5 7a01 	vstr	s15, [r5, #4]
 8003ce6:	441a      	add	r2, r3
 8003ce8:	441d      	add	r5, r3
 8003cea:	f63f af44 	bhi.w	8003b76 <arm_radix8_butterfly_f32+0x6e>
 8003cee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003cf0:	2a07      	cmp	r2, #7
 8003cf2:	f240 81f5 	bls.w	80040e0 <arm_radix8_butterfly_f32+0x5d8>
 8003cf6:	f108 0101 	add.w	r1, r8, #1
 8003cfa:	188f      	adds	r7, r1, r2
 8003cfc:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8003d00:	19d6      	adds	r6, r2, r7
 8003d02:	eb08 0c09 	add.w	ip, r8, r9
 8003d06:	1994      	adds	r4, r2, r6
 8003d08:	eb0c 0e09 	add.w	lr, ip, r9
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	9701      	str	r7, [sp, #4]
 8003d10:	4420      	add	r0, r4
 8003d12:	eb0e 0709 	add.w	r7, lr, r9
 8003d16:	1815      	adds	r5, r2, r0
 8003d18:	eb07 0209 	add.w	r2, r7, r9
 8003d1c:	9203      	str	r2, [sp, #12]
 8003d1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8003d20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d24:	9117      	str	r1, [sp, #92]	; 0x5c
 8003d26:	440a      	add	r2, r1
 8003d28:	9900      	ldr	r1, [sp, #0]
 8003d2a:	3108      	adds	r1, #8
 8003d2c:	9100      	str	r1, [sp, #0]
 8003d2e:	9902      	ldr	r1, [sp, #8]
 8003d30:	3108      	adds	r1, #8
 8003d32:	9102      	str	r1, [sp, #8]
 8003d34:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003d36:	00ff      	lsls	r7, r7, #3
 8003d38:	9715      	str	r7, [sp, #84]	; 0x54
 8003d3a:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8003d3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8003d42:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8003d46:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8003d48:	9903      	ldr	r1, [sp, #12]
 8003d4a:	19d7      	adds	r7, r2, r7
 8003d4c:	00c9      	lsls	r1, r1, #3
 8003d4e:	9114      	str	r1, [sp, #80]	; 0x50
 8003d50:	9710      	str	r7, [sp, #64]	; 0x40
 8003d52:	9919      	ldr	r1, [sp, #100]	; 0x64
 8003d54:	9f00      	ldr	r7, [sp, #0]
 8003d56:	19cf      	adds	r7, r1, r7
 8003d58:	970d      	str	r7, [sp, #52]	; 0x34
 8003d5a:	9f02      	ldr	r7, [sp, #8]
 8003d5c:	19cf      	adds	r7, r1, r7
 8003d5e:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8003d62:	970c      	str	r7, [sp, #48]	; 0x30
 8003d64:	9f01      	ldr	r7, [sp, #4]
 8003d66:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8003d6a:	3504      	adds	r5, #4
 8003d6c:	3004      	adds	r0, #4
 8003d6e:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 8003d72:	9508      	str	r5, [sp, #32]
 8003d74:	9009      	str	r0, [sp, #36]	; 0x24
 8003d76:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8003d78:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003d7a:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8003d7e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8003d82:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 8003d86:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8003d88:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8003d8c:	1945      	adds	r5, r0, r5
 8003d8e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8003d92:	460f      	mov	r7, r1
 8003d94:	3404      	adds	r4, #4
 8003d96:	4641      	mov	r1, r8
 8003d98:	1841      	adds	r1, r0, r1
 8003d9a:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8003d9e:	940a      	str	r4, [sp, #40]	; 0x28
 8003da0:	eb00 0c06 	add.w	ip, r0, r6
 8003da4:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003da8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8003daa:	9506      	str	r5, [sp, #24]
 8003dac:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8003dae:	9105      	str	r1, [sp, #20]
 8003db0:	4639      	mov	r1, r7
 8003db2:	1905      	adds	r5, r0, r4
 8003db4:	3108      	adds	r1, #8
 8003db6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8003db8:	9507      	str	r5, [sp, #28]
 8003dba:	910f      	str	r1, [sp, #60]	; 0x3c
 8003dbc:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	eb00 0e06 	add.w	lr, r0, r6
 8003dc6:	9518      	str	r5, [sp, #96]	; 0x60
 8003dc8:	9404      	str	r4, [sp, #16]
 8003dca:	9103      	str	r1, [sp, #12]
 8003dcc:	4620      	mov	r0, r4
 8003dce:	4689      	mov	r9, r1
 8003dd0:	9e06      	ldr	r6, [sp, #24]
 8003dd2:	ed90 fa00 	vldr	s30, [r0]
 8003dd6:	edd6 7a01 	vldr	s15, [r6, #4]
 8003dda:	edd0 ba01 	vldr	s23, [r0, #4]
 8003dde:	edcd 7a00 	vstr	s15, [sp]
 8003de2:	a80d      	add	r0, sp, #52	; 0x34
 8003de4:	edde 7a01 	vldr	s15, [lr, #4]
 8003de8:	9c05      	ldr	r4, [sp, #20]
 8003dea:	9d07      	ldr	r5, [sp, #28]
 8003dec:	edd2 fa00 	vldr	s31, [r2]
 8003df0:	ed92 ca01 	vldr	s24, [r2, #4]
 8003df4:	edcd 7a01 	vstr	s15, [sp, #4]
 8003df8:	c807      	ldmia	r0, {r0, r1, r2}
 8003dfa:	eddc 7a01 	vldr	s15, [ip, #4]
 8003dfe:	edd4 ea00 	vldr	s29, [r4]
 8003e02:	ed95 ea00 	vldr	s28, [r5]
 8003e06:	edd6 da00 	vldr	s27, [r6]
 8003e0a:	edd4 aa01 	vldr	s21, [r4, #4]
 8003e0e:	ed95 aa01 	vldr	s20, [r5, #4]
 8003e12:	ed9e da00 	vldr	s26, [lr]
 8003e16:	eddc ca00 	vldr	s25, [ip]
 8003e1a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e1e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003e20:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8003e22:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003e24:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8003e26:	edcd 7a02 	vstr	s15, [sp, #8]
 8003e2a:	e001      	b.n	8003e30 <arm_radix8_butterfly_f32+0x328>
 8003e2c:	3f3504f3 	.word	0x3f3504f3
 8003e30:	ed16 6a01 	vldr	s12, [r6, #-4]
 8003e34:	ed91 5a00 	vldr	s10, [r1]
 8003e38:	ed57 9a01 	vldr	s19, [r7, #-4]
 8003e3c:	edd5 7a00 	vldr	s15, [r5]
 8003e40:	ed18 7a01 	vldr	s14, [r8, #-4]
 8003e44:	edd2 3a00 	vldr	s7, [r2]
 8003e48:	ed94 3a00 	vldr	s6, [r4]
 8003e4c:	ed90 2a00 	vldr	s4, [r0]
 8003e50:	ed92 0a01 	vldr	s0, [r2, #4]
 8003e54:	ee33 8a85 	vadd.f32	s16, s7, s10
 8003e58:	ee32 1a06 	vadd.f32	s2, s4, s12
 8003e5c:	ee33 4a29 	vadd.f32	s8, s6, s19
 8003e60:	ee77 4a87 	vadd.f32	s9, s15, s14
 8003e64:	ee78 1a04 	vadd.f32	s3, s16, s8
 8003e68:	ee71 6a24 	vadd.f32	s13, s2, s9
 8003e6c:	ee32 2a46 	vsub.f32	s4, s4, s12
 8003e70:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8003e74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003e78:	ed82 6a00 	vstr	s12, [r2]
 8003e7c:	edd5 8a01 	vldr	s17, [r5, #4]
 8003e80:	ed90 9a01 	vldr	s18, [r0, #4]
 8003e84:	edd6 2a00 	vldr	s5, [r6]
 8003e88:	ed98 7a00 	vldr	s14, [r8]
 8003e8c:	edd4 0a01 	vldr	s1, [r4, #4]
 8003e90:	ed91 6a01 	vldr	s12, [r1, #4]
 8003e94:	edd7 5a00 	vldr	s11, [r7]
 8003e98:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8003e9c:	ee33 3a69 	vsub.f32	s6, s6, s19
 8003ea0:	ee39 5a62 	vsub.f32	s10, s18, s5
 8003ea4:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8003ea8:	ee38 4a44 	vsub.f32	s8, s16, s8
 8003eac:	ee38 7a87 	vadd.f32	s14, s17, s14
 8003eb0:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8003eb4:	ee79 2a22 	vadd.f32	s5, s18, s5
 8003eb8:	ee75 8a69 	vsub.f32	s17, s10, s19
 8003ebc:	ee32 9a27 	vadd.f32	s18, s4, s15
 8003ec0:	ee35 5a29 	vadd.f32	s10, s10, s19
 8003ec4:	ee72 7a67 	vsub.f32	s15, s4, s15
 8003ec8:	ee30 2a06 	vadd.f32	s4, s0, s12
 8003ecc:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8003ed0:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8003ed4:	ee32 9a08 	vadd.f32	s18, s4, s16
 8003ed8:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8003edc:	ee32 2a48 	vsub.f32	s4, s4, s16
 8003ee0:	ee71 4a64 	vsub.f32	s9, s2, s9
 8003ee4:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8003ee8:	ee32 1a87 	vadd.f32	s2, s5, s14
 8003eec:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8003ef0:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8003ef4:	ee30 6a46 	vsub.f32	s12, s0, s12
 8003ef8:	ee73 0a29 	vadd.f32	s1, s6, s19
 8003efc:	ee36 0a28 	vadd.f32	s0, s12, s17
 8003f00:	ee33 3a69 	vsub.f32	s6, s6, s19
 8003f04:	ee32 7a64 	vsub.f32	s14, s4, s9
 8003f08:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8003f0c:	ee36 6a68 	vsub.f32	s12, s12, s17
 8003f10:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8003f14:	ee75 8a85 	vadd.f32	s17, s11, s10
 8003f18:	ee74 3a22 	vadd.f32	s7, s8, s5
 8003f1c:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8003f20:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8003f24:	ee79 1a41 	vsub.f32	s3, s18, s2
 8003f28:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8003f2c:	ee76 5a43 	vsub.f32	s11, s12, s6
 8003f30:	ee74 2a62 	vsub.f32	s5, s8, s5
 8003f34:	ee74 4a82 	vadd.f32	s9, s9, s4
 8003f38:	ee30 4a60 	vsub.f32	s8, s0, s1
 8003f3c:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8003f40:	ee30 0a80 	vadd.f32	s0, s1, s0
 8003f44:	ee77 9a85 	vadd.f32	s19, s15, s10
 8003f48:	ee33 6a06 	vadd.f32	s12, s6, s12
 8003f4c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8003f50:	ee2e 2a21 	vmul.f32	s4, s28, s3
 8003f54:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8003f58:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8003f5c:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8003f60:	ee39 1a01 	vadd.f32	s2, s18, s2
 8003f64:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8003f68:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8003f6c:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8003f70:	ee2f 7a07 	vmul.f32	s14, s30, s14
 8003f74:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8003f78:	ee35 3a03 	vadd.f32	s6, s10, s6
 8003f7c:	ee72 6a66 	vsub.f32	s13, s4, s13
 8003f80:	ee2c 5a04 	vmul.f32	s10, s24, s8
 8003f84:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8003f88:	ed9d 4a02 	vldr	s8, [sp, #8]
 8003f8c:	ed82 1a01 	vstr	s2, [r2, #4]
 8003f90:	ee77 3a63 	vsub.f32	s7, s14, s7
 8003f94:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8003f98:	ed9d 7a01 	vldr	s14, [sp, #4]
 8003f9c:	ed81 3a00 	vstr	s6, [r1]
 8003fa0:	ee30 9a89 	vadd.f32	s18, s1, s18
 8003fa4:	ee32 2a05 	vadd.f32	s4, s4, s10
 8003fa8:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8003fac:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8003fb0:	ee67 2a22 	vmul.f32	s5, s14, s5
 8003fb4:	ee64 1a00 	vmul.f32	s3, s8, s0
 8003fb8:	ee27 7a24 	vmul.f32	s14, s14, s9
 8003fbc:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8003fc0:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8003fc4:	ee64 8a28 	vmul.f32	s17, s8, s17
 8003fc8:	ed9d 4a00 	vldr	s8, [sp]
 8003fcc:	edc1 6a01 	vstr	s13, [r1, #4]
 8003fd0:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8003fd4:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 8003fd8:	ee64 9a29 	vmul.f32	s19, s8, s19
 8003fdc:	ee24 4a25 	vmul.f32	s8, s8, s11
 8003fe0:	ee30 7a87 	vadd.f32	s14, s1, s14
 8003fe4:	ee74 4a84 	vadd.f32	s9, s9, s8
 8003fe8:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8003fec:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8003ff0:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8003ff4:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 8003ff8:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8003ffc:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8004000:	ee75 1a21 	vadd.f32	s3, s10, s3
 8004004:	ee30 0a68 	vsub.f32	s0, s0, s17
 8004008:	ee75 9ae9 	vsub.f32	s19, s11, s19
 800400c:	ee70 0a84 	vadd.f32	s1, s1, s8
 8004010:	ee36 6a67 	vsub.f32	s12, s12, s15
 8004014:	44d9      	add	r9, fp
 8004016:	45ca      	cmp	sl, r9
 8004018:	ed84 9a00 	vstr	s18, [r4]
 800401c:	edc4 3a01 	vstr	s7, [r4, #4]
 8004020:	441a      	add	r2, r3
 8004022:	ed07 7a01 	vstr	s14, [r7, #-4]
 8004026:	edc7 2a00 	vstr	s5, [r7]
 800402a:	4419      	add	r1, r3
 800402c:	ed80 2a00 	vstr	s4, [r0]
 8004030:	ed80 8a01 	vstr	s16, [r0, #4]
 8004034:	441c      	add	r4, r3
 8004036:	ed48 1a01 	vstr	s3, [r8, #-4]
 800403a:	ed88 0a00 	vstr	s0, [r8]
 800403e:	441f      	add	r7, r3
 8004040:	ed46 4a01 	vstr	s9, [r6, #-4]
 8004044:	4418      	add	r0, r3
 8004046:	edc6 9a00 	vstr	s19, [r6]
 800404a:	4498      	add	r8, r3
 800404c:	edc5 0a00 	vstr	s1, [r5]
 8004050:	ed85 6a01 	vstr	s12, [r5, #4]
 8004054:	441e      	add	r6, r3
 8004056:	441d      	add	r5, r3
 8004058:	f63f aeea 	bhi.w	8003e30 <arm_radix8_butterfly_f32+0x328>
 800405c:	9a03      	ldr	r2, [sp, #12]
 800405e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004060:	3201      	adds	r2, #1
 8004062:	4611      	mov	r1, r2
 8004064:	9203      	str	r2, [sp, #12]
 8004066:	9a04      	ldr	r2, [sp, #16]
 8004068:	4402      	add	r2, r0
 800406a:	9204      	str	r2, [sp, #16]
 800406c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800406e:	9a05      	ldr	r2, [sp, #20]
 8004070:	4402      	add	r2, r0
 8004072:	9205      	str	r2, [sp, #20]
 8004074:	9812      	ldr	r0, [sp, #72]	; 0x48
 8004076:	9a07      	ldr	r2, [sp, #28]
 8004078:	4402      	add	r2, r0
 800407a:	9207      	str	r2, [sp, #28]
 800407c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800407e:	9a06      	ldr	r2, [sp, #24]
 8004080:	4402      	add	r2, r0
 8004082:	9206      	str	r2, [sp, #24]
 8004084:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004086:	4496      	add	lr, r2
 8004088:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800408a:	4494      	add	ip, r2
 800408c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800408e:	3208      	adds	r2, #8
 8004090:	920f      	str	r2, [sp, #60]	; 0x3c
 8004092:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004094:	3208      	adds	r2, #8
 8004096:	920e      	str	r2, [sp, #56]	; 0x38
 8004098:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800409a:	3208      	adds	r2, #8
 800409c:	920d      	str	r2, [sp, #52]	; 0x34
 800409e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80040a0:	3208      	adds	r2, #8
 80040a2:	920c      	str	r2, [sp, #48]	; 0x30
 80040a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80040a6:	3208      	adds	r2, #8
 80040a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80040aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80040ac:	3208      	adds	r2, #8
 80040ae:	920a      	str	r2, [sp, #40]	; 0x28
 80040b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040b2:	3208      	adds	r2, #8
 80040b4:	9209      	str	r2, [sp, #36]	; 0x24
 80040b6:	9a08      	ldr	r2, [sp, #32]
 80040b8:	3208      	adds	r2, #8
 80040ba:	9208      	str	r2, [sp, #32]
 80040bc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80040be:	9811      	ldr	r0, [sp, #68]	; 0x44
 80040c0:	4288      	cmp	r0, r1
 80040c2:	4622      	mov	r2, r4
 80040c4:	d007      	beq.n	80040d6 <arm_radix8_butterfly_f32+0x5ce>
 80040c6:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80040c8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80040cc:	4621      	mov	r1, r4
 80040ce:	4401      	add	r1, r0
 80040d0:	9110      	str	r1, [sp, #64]	; 0x40
 80040d2:	9804      	ldr	r0, [sp, #16]
 80040d4:	e67c      	b.n	8003dd0 <arm_radix8_butterfly_f32+0x2c8>
 80040d6:	4683      	mov	fp, r0
 80040d8:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80040dc:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80040de:	e524      	b.n	8003b2a <arm_radix8_butterfly_f32+0x22>
 80040e0:	b01d      	add	sp, #116	; 0x74
 80040e2:	ecbd 8b10 	vpop	{d8-d15}
 80040e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ea:	bf00      	nop

080040ec <__errno>:
 80040ec:	4b01      	ldr	r3, [pc, #4]	; (80040f4 <__errno+0x8>)
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	2000000c 	.word	0x2000000c

080040f8 <__libc_init_array>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	4d0d      	ldr	r5, [pc, #52]	; (8004130 <__libc_init_array+0x38>)
 80040fc:	4c0d      	ldr	r4, [pc, #52]	; (8004134 <__libc_init_array+0x3c>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	2600      	movs	r6, #0
 8004104:	42a6      	cmp	r6, r4
 8004106:	d109      	bne.n	800411c <__libc_init_array+0x24>
 8004108:	4d0b      	ldr	r5, [pc, #44]	; (8004138 <__libc_init_array+0x40>)
 800410a:	4c0c      	ldr	r4, [pc, #48]	; (800413c <__libc_init_array+0x44>)
 800410c:	f002 fe44 	bl	8006d98 <_init>
 8004110:	1b64      	subs	r4, r4, r5
 8004112:	10a4      	asrs	r4, r4, #2
 8004114:	2600      	movs	r6, #0
 8004116:	42a6      	cmp	r6, r4
 8004118:	d105      	bne.n	8004126 <__libc_init_array+0x2e>
 800411a:	bd70      	pop	{r4, r5, r6, pc}
 800411c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004120:	4798      	blx	r3
 8004122:	3601      	adds	r6, #1
 8004124:	e7ee      	b.n	8004104 <__libc_init_array+0xc>
 8004126:	f855 3b04 	ldr.w	r3, [r5], #4
 800412a:	4798      	blx	r3
 800412c:	3601      	adds	r6, #1
 800412e:	e7f2      	b.n	8004116 <__libc_init_array+0x1e>
 8004130:	0800c124 	.word	0x0800c124
 8004134:	0800c124 	.word	0x0800c124
 8004138:	0800c124 	.word	0x0800c124
 800413c:	0800c128 	.word	0x0800c128

08004140 <memset>:
 8004140:	4402      	add	r2, r0
 8004142:	4603      	mov	r3, r0
 8004144:	4293      	cmp	r3, r2
 8004146:	d100      	bne.n	800414a <memset+0xa>
 8004148:	4770      	bx	lr
 800414a:	f803 1b01 	strb.w	r1, [r3], #1
 800414e:	e7f9      	b.n	8004144 <memset+0x4>

08004150 <__cvt>:
 8004150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004154:	ec55 4b10 	vmov	r4, r5, d0
 8004158:	2d00      	cmp	r5, #0
 800415a:	460e      	mov	r6, r1
 800415c:	4619      	mov	r1, r3
 800415e:	462b      	mov	r3, r5
 8004160:	bfbb      	ittet	lt
 8004162:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004166:	461d      	movlt	r5, r3
 8004168:	2300      	movge	r3, #0
 800416a:	232d      	movlt	r3, #45	; 0x2d
 800416c:	700b      	strb	r3, [r1, #0]
 800416e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004170:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004174:	4691      	mov	r9, r2
 8004176:	f023 0820 	bic.w	r8, r3, #32
 800417a:	bfbc      	itt	lt
 800417c:	4622      	movlt	r2, r4
 800417e:	4614      	movlt	r4, r2
 8004180:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004184:	d005      	beq.n	8004192 <__cvt+0x42>
 8004186:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800418a:	d100      	bne.n	800418e <__cvt+0x3e>
 800418c:	3601      	adds	r6, #1
 800418e:	2102      	movs	r1, #2
 8004190:	e000      	b.n	8004194 <__cvt+0x44>
 8004192:	2103      	movs	r1, #3
 8004194:	ab03      	add	r3, sp, #12
 8004196:	9301      	str	r3, [sp, #4]
 8004198:	ab02      	add	r3, sp, #8
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	ec45 4b10 	vmov	d0, r4, r5
 80041a0:	4653      	mov	r3, sl
 80041a2:	4632      	mov	r2, r6
 80041a4:	f000 fe30 	bl	8004e08 <_dtoa_r>
 80041a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80041ac:	4607      	mov	r7, r0
 80041ae:	d102      	bne.n	80041b6 <__cvt+0x66>
 80041b0:	f019 0f01 	tst.w	r9, #1
 80041b4:	d022      	beq.n	80041fc <__cvt+0xac>
 80041b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80041ba:	eb07 0906 	add.w	r9, r7, r6
 80041be:	d110      	bne.n	80041e2 <__cvt+0x92>
 80041c0:	783b      	ldrb	r3, [r7, #0]
 80041c2:	2b30      	cmp	r3, #48	; 0x30
 80041c4:	d10a      	bne.n	80041dc <__cvt+0x8c>
 80041c6:	2200      	movs	r2, #0
 80041c8:	2300      	movs	r3, #0
 80041ca:	4620      	mov	r0, r4
 80041cc:	4629      	mov	r1, r5
 80041ce:	f7fc fcfb 	bl	8000bc8 <__aeabi_dcmpeq>
 80041d2:	b918      	cbnz	r0, 80041dc <__cvt+0x8c>
 80041d4:	f1c6 0601 	rsb	r6, r6, #1
 80041d8:	f8ca 6000 	str.w	r6, [sl]
 80041dc:	f8da 3000 	ldr.w	r3, [sl]
 80041e0:	4499      	add	r9, r3
 80041e2:	2200      	movs	r2, #0
 80041e4:	2300      	movs	r3, #0
 80041e6:	4620      	mov	r0, r4
 80041e8:	4629      	mov	r1, r5
 80041ea:	f7fc fced 	bl	8000bc8 <__aeabi_dcmpeq>
 80041ee:	b108      	cbz	r0, 80041f4 <__cvt+0xa4>
 80041f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80041f4:	2230      	movs	r2, #48	; 0x30
 80041f6:	9b03      	ldr	r3, [sp, #12]
 80041f8:	454b      	cmp	r3, r9
 80041fa:	d307      	bcc.n	800420c <__cvt+0xbc>
 80041fc:	9b03      	ldr	r3, [sp, #12]
 80041fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004200:	1bdb      	subs	r3, r3, r7
 8004202:	4638      	mov	r0, r7
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	b004      	add	sp, #16
 8004208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800420c:	1c59      	adds	r1, r3, #1
 800420e:	9103      	str	r1, [sp, #12]
 8004210:	701a      	strb	r2, [r3, #0]
 8004212:	e7f0      	b.n	80041f6 <__cvt+0xa6>

08004214 <__exponent>:
 8004214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004216:	4603      	mov	r3, r0
 8004218:	2900      	cmp	r1, #0
 800421a:	bfb8      	it	lt
 800421c:	4249      	neglt	r1, r1
 800421e:	f803 2b02 	strb.w	r2, [r3], #2
 8004222:	bfb4      	ite	lt
 8004224:	222d      	movlt	r2, #45	; 0x2d
 8004226:	222b      	movge	r2, #43	; 0x2b
 8004228:	2909      	cmp	r1, #9
 800422a:	7042      	strb	r2, [r0, #1]
 800422c:	dd2a      	ble.n	8004284 <__exponent+0x70>
 800422e:	f10d 0407 	add.w	r4, sp, #7
 8004232:	46a4      	mov	ip, r4
 8004234:	270a      	movs	r7, #10
 8004236:	46a6      	mov	lr, r4
 8004238:	460a      	mov	r2, r1
 800423a:	fb91 f6f7 	sdiv	r6, r1, r7
 800423e:	fb07 1516 	mls	r5, r7, r6, r1
 8004242:	3530      	adds	r5, #48	; 0x30
 8004244:	2a63      	cmp	r2, #99	; 0x63
 8004246:	f104 34ff 	add.w	r4, r4, #4294967295
 800424a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800424e:	4631      	mov	r1, r6
 8004250:	dcf1      	bgt.n	8004236 <__exponent+0x22>
 8004252:	3130      	adds	r1, #48	; 0x30
 8004254:	f1ae 0502 	sub.w	r5, lr, #2
 8004258:	f804 1c01 	strb.w	r1, [r4, #-1]
 800425c:	1c44      	adds	r4, r0, #1
 800425e:	4629      	mov	r1, r5
 8004260:	4561      	cmp	r1, ip
 8004262:	d30a      	bcc.n	800427a <__exponent+0x66>
 8004264:	f10d 0209 	add.w	r2, sp, #9
 8004268:	eba2 020e 	sub.w	r2, r2, lr
 800426c:	4565      	cmp	r5, ip
 800426e:	bf88      	it	hi
 8004270:	2200      	movhi	r2, #0
 8004272:	4413      	add	r3, r2
 8004274:	1a18      	subs	r0, r3, r0
 8004276:	b003      	add	sp, #12
 8004278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800427a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800427e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004282:	e7ed      	b.n	8004260 <__exponent+0x4c>
 8004284:	2330      	movs	r3, #48	; 0x30
 8004286:	3130      	adds	r1, #48	; 0x30
 8004288:	7083      	strb	r3, [r0, #2]
 800428a:	70c1      	strb	r1, [r0, #3]
 800428c:	1d03      	adds	r3, r0, #4
 800428e:	e7f1      	b.n	8004274 <__exponent+0x60>

08004290 <_printf_float>:
 8004290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004294:	ed2d 8b02 	vpush	{d8}
 8004298:	b08d      	sub	sp, #52	; 0x34
 800429a:	460c      	mov	r4, r1
 800429c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80042a0:	4616      	mov	r6, r2
 80042a2:	461f      	mov	r7, r3
 80042a4:	4605      	mov	r5, r0
 80042a6:	f001 fd55 	bl	8005d54 <_localeconv_r>
 80042aa:	f8d0 a000 	ldr.w	sl, [r0]
 80042ae:	4650      	mov	r0, sl
 80042b0:	f7fc f80e 	bl	80002d0 <strlen>
 80042b4:	2300      	movs	r3, #0
 80042b6:	930a      	str	r3, [sp, #40]	; 0x28
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	9305      	str	r3, [sp, #20]
 80042bc:	f8d8 3000 	ldr.w	r3, [r8]
 80042c0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80042c4:	3307      	adds	r3, #7
 80042c6:	f023 0307 	bic.w	r3, r3, #7
 80042ca:	f103 0208 	add.w	r2, r3, #8
 80042ce:	f8c8 2000 	str.w	r2, [r8]
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80042da:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80042de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80042e2:	9307      	str	r3, [sp, #28]
 80042e4:	f8cd 8018 	str.w	r8, [sp, #24]
 80042e8:	ee08 0a10 	vmov	s16, r0
 80042ec:	4b9f      	ldr	r3, [pc, #636]	; (800456c <_printf_float+0x2dc>)
 80042ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80042f2:	f04f 32ff 	mov.w	r2, #4294967295
 80042f6:	f7fc fc99 	bl	8000c2c <__aeabi_dcmpun>
 80042fa:	bb88      	cbnz	r0, 8004360 <_printf_float+0xd0>
 80042fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004300:	4b9a      	ldr	r3, [pc, #616]	; (800456c <_printf_float+0x2dc>)
 8004302:	f04f 32ff 	mov.w	r2, #4294967295
 8004306:	f7fc fc73 	bl	8000bf0 <__aeabi_dcmple>
 800430a:	bb48      	cbnz	r0, 8004360 <_printf_float+0xd0>
 800430c:	2200      	movs	r2, #0
 800430e:	2300      	movs	r3, #0
 8004310:	4640      	mov	r0, r8
 8004312:	4649      	mov	r1, r9
 8004314:	f7fc fc62 	bl	8000bdc <__aeabi_dcmplt>
 8004318:	b110      	cbz	r0, 8004320 <_printf_float+0x90>
 800431a:	232d      	movs	r3, #45	; 0x2d
 800431c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004320:	4b93      	ldr	r3, [pc, #588]	; (8004570 <_printf_float+0x2e0>)
 8004322:	4894      	ldr	r0, [pc, #592]	; (8004574 <_printf_float+0x2e4>)
 8004324:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004328:	bf94      	ite	ls
 800432a:	4698      	movls	r8, r3
 800432c:	4680      	movhi	r8, r0
 800432e:	2303      	movs	r3, #3
 8004330:	6123      	str	r3, [r4, #16]
 8004332:	9b05      	ldr	r3, [sp, #20]
 8004334:	f023 0204 	bic.w	r2, r3, #4
 8004338:	6022      	str	r2, [r4, #0]
 800433a:	f04f 0900 	mov.w	r9, #0
 800433e:	9700      	str	r7, [sp, #0]
 8004340:	4633      	mov	r3, r6
 8004342:	aa0b      	add	r2, sp, #44	; 0x2c
 8004344:	4621      	mov	r1, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f9d8 	bl	80046fc <_printf_common>
 800434c:	3001      	adds	r0, #1
 800434e:	f040 8090 	bne.w	8004472 <_printf_float+0x1e2>
 8004352:	f04f 30ff 	mov.w	r0, #4294967295
 8004356:	b00d      	add	sp, #52	; 0x34
 8004358:	ecbd 8b02 	vpop	{d8}
 800435c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004360:	4642      	mov	r2, r8
 8004362:	464b      	mov	r3, r9
 8004364:	4640      	mov	r0, r8
 8004366:	4649      	mov	r1, r9
 8004368:	f7fc fc60 	bl	8000c2c <__aeabi_dcmpun>
 800436c:	b140      	cbz	r0, 8004380 <_printf_float+0xf0>
 800436e:	464b      	mov	r3, r9
 8004370:	2b00      	cmp	r3, #0
 8004372:	bfbc      	itt	lt
 8004374:	232d      	movlt	r3, #45	; 0x2d
 8004376:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800437a:	487f      	ldr	r0, [pc, #508]	; (8004578 <_printf_float+0x2e8>)
 800437c:	4b7f      	ldr	r3, [pc, #508]	; (800457c <_printf_float+0x2ec>)
 800437e:	e7d1      	b.n	8004324 <_printf_float+0x94>
 8004380:	6863      	ldr	r3, [r4, #4]
 8004382:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004386:	9206      	str	r2, [sp, #24]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	d13f      	bne.n	800440c <_printf_float+0x17c>
 800438c:	2306      	movs	r3, #6
 800438e:	6063      	str	r3, [r4, #4]
 8004390:	9b05      	ldr	r3, [sp, #20]
 8004392:	6861      	ldr	r1, [r4, #4]
 8004394:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004398:	2300      	movs	r3, #0
 800439a:	9303      	str	r3, [sp, #12]
 800439c:	ab0a      	add	r3, sp, #40	; 0x28
 800439e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80043a2:	ab09      	add	r3, sp, #36	; 0x24
 80043a4:	ec49 8b10 	vmov	d0, r8, r9
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	6022      	str	r2, [r4, #0]
 80043ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80043b0:	4628      	mov	r0, r5
 80043b2:	f7ff fecd 	bl	8004150 <__cvt>
 80043b6:	9b06      	ldr	r3, [sp, #24]
 80043b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80043ba:	2b47      	cmp	r3, #71	; 0x47
 80043bc:	4680      	mov	r8, r0
 80043be:	d108      	bne.n	80043d2 <_printf_float+0x142>
 80043c0:	1cc8      	adds	r0, r1, #3
 80043c2:	db02      	blt.n	80043ca <_printf_float+0x13a>
 80043c4:	6863      	ldr	r3, [r4, #4]
 80043c6:	4299      	cmp	r1, r3
 80043c8:	dd41      	ble.n	800444e <_printf_float+0x1be>
 80043ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80043ce:	fa5f fb8b 	uxtb.w	fp, fp
 80043d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80043d6:	d820      	bhi.n	800441a <_printf_float+0x18a>
 80043d8:	3901      	subs	r1, #1
 80043da:	465a      	mov	r2, fp
 80043dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80043e0:	9109      	str	r1, [sp, #36]	; 0x24
 80043e2:	f7ff ff17 	bl	8004214 <__exponent>
 80043e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043e8:	1813      	adds	r3, r2, r0
 80043ea:	2a01      	cmp	r2, #1
 80043ec:	4681      	mov	r9, r0
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	dc02      	bgt.n	80043f8 <_printf_float+0x168>
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	07d2      	lsls	r2, r2, #31
 80043f6:	d501      	bpl.n	80043fc <_printf_float+0x16c>
 80043f8:	3301      	adds	r3, #1
 80043fa:	6123      	str	r3, [r4, #16]
 80043fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004400:	2b00      	cmp	r3, #0
 8004402:	d09c      	beq.n	800433e <_printf_float+0xae>
 8004404:	232d      	movs	r3, #45	; 0x2d
 8004406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800440a:	e798      	b.n	800433e <_printf_float+0xae>
 800440c:	9a06      	ldr	r2, [sp, #24]
 800440e:	2a47      	cmp	r2, #71	; 0x47
 8004410:	d1be      	bne.n	8004390 <_printf_float+0x100>
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1bc      	bne.n	8004390 <_printf_float+0x100>
 8004416:	2301      	movs	r3, #1
 8004418:	e7b9      	b.n	800438e <_printf_float+0xfe>
 800441a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800441e:	d118      	bne.n	8004452 <_printf_float+0x1c2>
 8004420:	2900      	cmp	r1, #0
 8004422:	6863      	ldr	r3, [r4, #4]
 8004424:	dd0b      	ble.n	800443e <_printf_float+0x1ae>
 8004426:	6121      	str	r1, [r4, #16]
 8004428:	b913      	cbnz	r3, 8004430 <_printf_float+0x1a0>
 800442a:	6822      	ldr	r2, [r4, #0]
 800442c:	07d0      	lsls	r0, r2, #31
 800442e:	d502      	bpl.n	8004436 <_printf_float+0x1a6>
 8004430:	3301      	adds	r3, #1
 8004432:	440b      	add	r3, r1
 8004434:	6123      	str	r3, [r4, #16]
 8004436:	65a1      	str	r1, [r4, #88]	; 0x58
 8004438:	f04f 0900 	mov.w	r9, #0
 800443c:	e7de      	b.n	80043fc <_printf_float+0x16c>
 800443e:	b913      	cbnz	r3, 8004446 <_printf_float+0x1b6>
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	07d2      	lsls	r2, r2, #31
 8004444:	d501      	bpl.n	800444a <_printf_float+0x1ba>
 8004446:	3302      	adds	r3, #2
 8004448:	e7f4      	b.n	8004434 <_printf_float+0x1a4>
 800444a:	2301      	movs	r3, #1
 800444c:	e7f2      	b.n	8004434 <_printf_float+0x1a4>
 800444e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004452:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004454:	4299      	cmp	r1, r3
 8004456:	db05      	blt.n	8004464 <_printf_float+0x1d4>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	6121      	str	r1, [r4, #16]
 800445c:	07d8      	lsls	r0, r3, #31
 800445e:	d5ea      	bpl.n	8004436 <_printf_float+0x1a6>
 8004460:	1c4b      	adds	r3, r1, #1
 8004462:	e7e7      	b.n	8004434 <_printf_float+0x1a4>
 8004464:	2900      	cmp	r1, #0
 8004466:	bfd4      	ite	le
 8004468:	f1c1 0202 	rsble	r2, r1, #2
 800446c:	2201      	movgt	r2, #1
 800446e:	4413      	add	r3, r2
 8004470:	e7e0      	b.n	8004434 <_printf_float+0x1a4>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	055a      	lsls	r2, r3, #21
 8004476:	d407      	bmi.n	8004488 <_printf_float+0x1f8>
 8004478:	6923      	ldr	r3, [r4, #16]
 800447a:	4642      	mov	r2, r8
 800447c:	4631      	mov	r1, r6
 800447e:	4628      	mov	r0, r5
 8004480:	47b8      	blx	r7
 8004482:	3001      	adds	r0, #1
 8004484:	d12c      	bne.n	80044e0 <_printf_float+0x250>
 8004486:	e764      	b.n	8004352 <_printf_float+0xc2>
 8004488:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800448c:	f240 80e0 	bls.w	8004650 <_printf_float+0x3c0>
 8004490:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004494:	2200      	movs	r2, #0
 8004496:	2300      	movs	r3, #0
 8004498:	f7fc fb96 	bl	8000bc8 <__aeabi_dcmpeq>
 800449c:	2800      	cmp	r0, #0
 800449e:	d034      	beq.n	800450a <_printf_float+0x27a>
 80044a0:	4a37      	ldr	r2, [pc, #220]	; (8004580 <_printf_float+0x2f0>)
 80044a2:	2301      	movs	r3, #1
 80044a4:	4631      	mov	r1, r6
 80044a6:	4628      	mov	r0, r5
 80044a8:	47b8      	blx	r7
 80044aa:	3001      	adds	r0, #1
 80044ac:	f43f af51 	beq.w	8004352 <_printf_float+0xc2>
 80044b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044b4:	429a      	cmp	r2, r3
 80044b6:	db02      	blt.n	80044be <_printf_float+0x22e>
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	07d8      	lsls	r0, r3, #31
 80044bc:	d510      	bpl.n	80044e0 <_printf_float+0x250>
 80044be:	ee18 3a10 	vmov	r3, s16
 80044c2:	4652      	mov	r2, sl
 80044c4:	4631      	mov	r1, r6
 80044c6:	4628      	mov	r0, r5
 80044c8:	47b8      	blx	r7
 80044ca:	3001      	adds	r0, #1
 80044cc:	f43f af41 	beq.w	8004352 <_printf_float+0xc2>
 80044d0:	f04f 0800 	mov.w	r8, #0
 80044d4:	f104 091a 	add.w	r9, r4, #26
 80044d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044da:	3b01      	subs	r3, #1
 80044dc:	4543      	cmp	r3, r8
 80044de:	dc09      	bgt.n	80044f4 <_printf_float+0x264>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	079b      	lsls	r3, r3, #30
 80044e4:	f100 8105 	bmi.w	80046f2 <_printf_float+0x462>
 80044e8:	68e0      	ldr	r0, [r4, #12]
 80044ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044ec:	4298      	cmp	r0, r3
 80044ee:	bfb8      	it	lt
 80044f0:	4618      	movlt	r0, r3
 80044f2:	e730      	b.n	8004356 <_printf_float+0xc6>
 80044f4:	2301      	movs	r3, #1
 80044f6:	464a      	mov	r2, r9
 80044f8:	4631      	mov	r1, r6
 80044fa:	4628      	mov	r0, r5
 80044fc:	47b8      	blx	r7
 80044fe:	3001      	adds	r0, #1
 8004500:	f43f af27 	beq.w	8004352 <_printf_float+0xc2>
 8004504:	f108 0801 	add.w	r8, r8, #1
 8004508:	e7e6      	b.n	80044d8 <_printf_float+0x248>
 800450a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	dc39      	bgt.n	8004584 <_printf_float+0x2f4>
 8004510:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <_printf_float+0x2f0>)
 8004512:	2301      	movs	r3, #1
 8004514:	4631      	mov	r1, r6
 8004516:	4628      	mov	r0, r5
 8004518:	47b8      	blx	r7
 800451a:	3001      	adds	r0, #1
 800451c:	f43f af19 	beq.w	8004352 <_printf_float+0xc2>
 8004520:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004524:	4313      	orrs	r3, r2
 8004526:	d102      	bne.n	800452e <_printf_float+0x29e>
 8004528:	6823      	ldr	r3, [r4, #0]
 800452a:	07d9      	lsls	r1, r3, #31
 800452c:	d5d8      	bpl.n	80044e0 <_printf_float+0x250>
 800452e:	ee18 3a10 	vmov	r3, s16
 8004532:	4652      	mov	r2, sl
 8004534:	4631      	mov	r1, r6
 8004536:	4628      	mov	r0, r5
 8004538:	47b8      	blx	r7
 800453a:	3001      	adds	r0, #1
 800453c:	f43f af09 	beq.w	8004352 <_printf_float+0xc2>
 8004540:	f04f 0900 	mov.w	r9, #0
 8004544:	f104 0a1a 	add.w	sl, r4, #26
 8004548:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800454a:	425b      	negs	r3, r3
 800454c:	454b      	cmp	r3, r9
 800454e:	dc01      	bgt.n	8004554 <_printf_float+0x2c4>
 8004550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004552:	e792      	b.n	800447a <_printf_float+0x1ea>
 8004554:	2301      	movs	r3, #1
 8004556:	4652      	mov	r2, sl
 8004558:	4631      	mov	r1, r6
 800455a:	4628      	mov	r0, r5
 800455c:	47b8      	blx	r7
 800455e:	3001      	adds	r0, #1
 8004560:	f43f aef7 	beq.w	8004352 <_printf_float+0xc2>
 8004564:	f109 0901 	add.w	r9, r9, #1
 8004568:	e7ee      	b.n	8004548 <_printf_float+0x2b8>
 800456a:	bf00      	nop
 800456c:	7fefffff 	.word	0x7fefffff
 8004570:	0800bd48 	.word	0x0800bd48
 8004574:	0800bd4c 	.word	0x0800bd4c
 8004578:	0800bd54 	.word	0x0800bd54
 800457c:	0800bd50 	.word	0x0800bd50
 8004580:	0800bd58 	.word	0x0800bd58
 8004584:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004586:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004588:	429a      	cmp	r2, r3
 800458a:	bfa8      	it	ge
 800458c:	461a      	movge	r2, r3
 800458e:	2a00      	cmp	r2, #0
 8004590:	4691      	mov	r9, r2
 8004592:	dc37      	bgt.n	8004604 <_printf_float+0x374>
 8004594:	f04f 0b00 	mov.w	fp, #0
 8004598:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800459c:	f104 021a 	add.w	r2, r4, #26
 80045a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80045a2:	9305      	str	r3, [sp, #20]
 80045a4:	eba3 0309 	sub.w	r3, r3, r9
 80045a8:	455b      	cmp	r3, fp
 80045aa:	dc33      	bgt.n	8004614 <_printf_float+0x384>
 80045ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045b0:	429a      	cmp	r2, r3
 80045b2:	db3b      	blt.n	800462c <_printf_float+0x39c>
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	07da      	lsls	r2, r3, #31
 80045b8:	d438      	bmi.n	800462c <_printf_float+0x39c>
 80045ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80045bc:	9a05      	ldr	r2, [sp, #20]
 80045be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80045c0:	1a9a      	subs	r2, r3, r2
 80045c2:	eba3 0901 	sub.w	r9, r3, r1
 80045c6:	4591      	cmp	r9, r2
 80045c8:	bfa8      	it	ge
 80045ca:	4691      	movge	r9, r2
 80045cc:	f1b9 0f00 	cmp.w	r9, #0
 80045d0:	dc35      	bgt.n	800463e <_printf_float+0x3ae>
 80045d2:	f04f 0800 	mov.w	r8, #0
 80045d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80045da:	f104 0a1a 	add.w	sl, r4, #26
 80045de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	eba3 0309 	sub.w	r3, r3, r9
 80045e8:	4543      	cmp	r3, r8
 80045ea:	f77f af79 	ble.w	80044e0 <_printf_float+0x250>
 80045ee:	2301      	movs	r3, #1
 80045f0:	4652      	mov	r2, sl
 80045f2:	4631      	mov	r1, r6
 80045f4:	4628      	mov	r0, r5
 80045f6:	47b8      	blx	r7
 80045f8:	3001      	adds	r0, #1
 80045fa:	f43f aeaa 	beq.w	8004352 <_printf_float+0xc2>
 80045fe:	f108 0801 	add.w	r8, r8, #1
 8004602:	e7ec      	b.n	80045de <_printf_float+0x34e>
 8004604:	4613      	mov	r3, r2
 8004606:	4631      	mov	r1, r6
 8004608:	4642      	mov	r2, r8
 800460a:	4628      	mov	r0, r5
 800460c:	47b8      	blx	r7
 800460e:	3001      	adds	r0, #1
 8004610:	d1c0      	bne.n	8004594 <_printf_float+0x304>
 8004612:	e69e      	b.n	8004352 <_printf_float+0xc2>
 8004614:	2301      	movs	r3, #1
 8004616:	4631      	mov	r1, r6
 8004618:	4628      	mov	r0, r5
 800461a:	9205      	str	r2, [sp, #20]
 800461c:	47b8      	blx	r7
 800461e:	3001      	adds	r0, #1
 8004620:	f43f ae97 	beq.w	8004352 <_printf_float+0xc2>
 8004624:	9a05      	ldr	r2, [sp, #20]
 8004626:	f10b 0b01 	add.w	fp, fp, #1
 800462a:	e7b9      	b.n	80045a0 <_printf_float+0x310>
 800462c:	ee18 3a10 	vmov	r3, s16
 8004630:	4652      	mov	r2, sl
 8004632:	4631      	mov	r1, r6
 8004634:	4628      	mov	r0, r5
 8004636:	47b8      	blx	r7
 8004638:	3001      	adds	r0, #1
 800463a:	d1be      	bne.n	80045ba <_printf_float+0x32a>
 800463c:	e689      	b.n	8004352 <_printf_float+0xc2>
 800463e:	9a05      	ldr	r2, [sp, #20]
 8004640:	464b      	mov	r3, r9
 8004642:	4442      	add	r2, r8
 8004644:	4631      	mov	r1, r6
 8004646:	4628      	mov	r0, r5
 8004648:	47b8      	blx	r7
 800464a:	3001      	adds	r0, #1
 800464c:	d1c1      	bne.n	80045d2 <_printf_float+0x342>
 800464e:	e680      	b.n	8004352 <_printf_float+0xc2>
 8004650:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004652:	2a01      	cmp	r2, #1
 8004654:	dc01      	bgt.n	800465a <_printf_float+0x3ca>
 8004656:	07db      	lsls	r3, r3, #31
 8004658:	d538      	bpl.n	80046cc <_printf_float+0x43c>
 800465a:	2301      	movs	r3, #1
 800465c:	4642      	mov	r2, r8
 800465e:	4631      	mov	r1, r6
 8004660:	4628      	mov	r0, r5
 8004662:	47b8      	blx	r7
 8004664:	3001      	adds	r0, #1
 8004666:	f43f ae74 	beq.w	8004352 <_printf_float+0xc2>
 800466a:	ee18 3a10 	vmov	r3, s16
 800466e:	4652      	mov	r2, sl
 8004670:	4631      	mov	r1, r6
 8004672:	4628      	mov	r0, r5
 8004674:	47b8      	blx	r7
 8004676:	3001      	adds	r0, #1
 8004678:	f43f ae6b 	beq.w	8004352 <_printf_float+0xc2>
 800467c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004680:	2200      	movs	r2, #0
 8004682:	2300      	movs	r3, #0
 8004684:	f7fc faa0 	bl	8000bc8 <__aeabi_dcmpeq>
 8004688:	b9d8      	cbnz	r0, 80046c2 <_printf_float+0x432>
 800468a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800468c:	f108 0201 	add.w	r2, r8, #1
 8004690:	3b01      	subs	r3, #1
 8004692:	4631      	mov	r1, r6
 8004694:	4628      	mov	r0, r5
 8004696:	47b8      	blx	r7
 8004698:	3001      	adds	r0, #1
 800469a:	d10e      	bne.n	80046ba <_printf_float+0x42a>
 800469c:	e659      	b.n	8004352 <_printf_float+0xc2>
 800469e:	2301      	movs	r3, #1
 80046a0:	4652      	mov	r2, sl
 80046a2:	4631      	mov	r1, r6
 80046a4:	4628      	mov	r0, r5
 80046a6:	47b8      	blx	r7
 80046a8:	3001      	adds	r0, #1
 80046aa:	f43f ae52 	beq.w	8004352 <_printf_float+0xc2>
 80046ae:	f108 0801 	add.w	r8, r8, #1
 80046b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	4543      	cmp	r3, r8
 80046b8:	dcf1      	bgt.n	800469e <_printf_float+0x40e>
 80046ba:	464b      	mov	r3, r9
 80046bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80046c0:	e6dc      	b.n	800447c <_printf_float+0x1ec>
 80046c2:	f04f 0800 	mov.w	r8, #0
 80046c6:	f104 0a1a 	add.w	sl, r4, #26
 80046ca:	e7f2      	b.n	80046b2 <_printf_float+0x422>
 80046cc:	2301      	movs	r3, #1
 80046ce:	4642      	mov	r2, r8
 80046d0:	e7df      	b.n	8004692 <_printf_float+0x402>
 80046d2:	2301      	movs	r3, #1
 80046d4:	464a      	mov	r2, r9
 80046d6:	4631      	mov	r1, r6
 80046d8:	4628      	mov	r0, r5
 80046da:	47b8      	blx	r7
 80046dc:	3001      	adds	r0, #1
 80046de:	f43f ae38 	beq.w	8004352 <_printf_float+0xc2>
 80046e2:	f108 0801 	add.w	r8, r8, #1
 80046e6:	68e3      	ldr	r3, [r4, #12]
 80046e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046ea:	1a5b      	subs	r3, r3, r1
 80046ec:	4543      	cmp	r3, r8
 80046ee:	dcf0      	bgt.n	80046d2 <_printf_float+0x442>
 80046f0:	e6fa      	b.n	80044e8 <_printf_float+0x258>
 80046f2:	f04f 0800 	mov.w	r8, #0
 80046f6:	f104 0919 	add.w	r9, r4, #25
 80046fa:	e7f4      	b.n	80046e6 <_printf_float+0x456>

080046fc <_printf_common>:
 80046fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004700:	4616      	mov	r6, r2
 8004702:	4699      	mov	r9, r3
 8004704:	688a      	ldr	r2, [r1, #8]
 8004706:	690b      	ldr	r3, [r1, #16]
 8004708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800470c:	4293      	cmp	r3, r2
 800470e:	bfb8      	it	lt
 8004710:	4613      	movlt	r3, r2
 8004712:	6033      	str	r3, [r6, #0]
 8004714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004718:	4607      	mov	r7, r0
 800471a:	460c      	mov	r4, r1
 800471c:	b10a      	cbz	r2, 8004722 <_printf_common+0x26>
 800471e:	3301      	adds	r3, #1
 8004720:	6033      	str	r3, [r6, #0]
 8004722:	6823      	ldr	r3, [r4, #0]
 8004724:	0699      	lsls	r1, r3, #26
 8004726:	bf42      	ittt	mi
 8004728:	6833      	ldrmi	r3, [r6, #0]
 800472a:	3302      	addmi	r3, #2
 800472c:	6033      	strmi	r3, [r6, #0]
 800472e:	6825      	ldr	r5, [r4, #0]
 8004730:	f015 0506 	ands.w	r5, r5, #6
 8004734:	d106      	bne.n	8004744 <_printf_common+0x48>
 8004736:	f104 0a19 	add.w	sl, r4, #25
 800473a:	68e3      	ldr	r3, [r4, #12]
 800473c:	6832      	ldr	r2, [r6, #0]
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	42ab      	cmp	r3, r5
 8004742:	dc26      	bgt.n	8004792 <_printf_common+0x96>
 8004744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004748:	1e13      	subs	r3, r2, #0
 800474a:	6822      	ldr	r2, [r4, #0]
 800474c:	bf18      	it	ne
 800474e:	2301      	movne	r3, #1
 8004750:	0692      	lsls	r2, r2, #26
 8004752:	d42b      	bmi.n	80047ac <_printf_common+0xb0>
 8004754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004758:	4649      	mov	r1, r9
 800475a:	4638      	mov	r0, r7
 800475c:	47c0      	blx	r8
 800475e:	3001      	adds	r0, #1
 8004760:	d01e      	beq.n	80047a0 <_printf_common+0xa4>
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	68e5      	ldr	r5, [r4, #12]
 8004766:	6832      	ldr	r2, [r6, #0]
 8004768:	f003 0306 	and.w	r3, r3, #6
 800476c:	2b04      	cmp	r3, #4
 800476e:	bf08      	it	eq
 8004770:	1aad      	subeq	r5, r5, r2
 8004772:	68a3      	ldr	r3, [r4, #8]
 8004774:	6922      	ldr	r2, [r4, #16]
 8004776:	bf0c      	ite	eq
 8004778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800477c:	2500      	movne	r5, #0
 800477e:	4293      	cmp	r3, r2
 8004780:	bfc4      	itt	gt
 8004782:	1a9b      	subgt	r3, r3, r2
 8004784:	18ed      	addgt	r5, r5, r3
 8004786:	2600      	movs	r6, #0
 8004788:	341a      	adds	r4, #26
 800478a:	42b5      	cmp	r5, r6
 800478c:	d11a      	bne.n	80047c4 <_printf_common+0xc8>
 800478e:	2000      	movs	r0, #0
 8004790:	e008      	b.n	80047a4 <_printf_common+0xa8>
 8004792:	2301      	movs	r3, #1
 8004794:	4652      	mov	r2, sl
 8004796:	4649      	mov	r1, r9
 8004798:	4638      	mov	r0, r7
 800479a:	47c0      	blx	r8
 800479c:	3001      	adds	r0, #1
 800479e:	d103      	bne.n	80047a8 <_printf_common+0xac>
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047a8:	3501      	adds	r5, #1
 80047aa:	e7c6      	b.n	800473a <_printf_common+0x3e>
 80047ac:	18e1      	adds	r1, r4, r3
 80047ae:	1c5a      	adds	r2, r3, #1
 80047b0:	2030      	movs	r0, #48	; 0x30
 80047b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047b6:	4422      	add	r2, r4
 80047b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80047bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80047c0:	3302      	adds	r3, #2
 80047c2:	e7c7      	b.n	8004754 <_printf_common+0x58>
 80047c4:	2301      	movs	r3, #1
 80047c6:	4622      	mov	r2, r4
 80047c8:	4649      	mov	r1, r9
 80047ca:	4638      	mov	r0, r7
 80047cc:	47c0      	blx	r8
 80047ce:	3001      	adds	r0, #1
 80047d0:	d0e6      	beq.n	80047a0 <_printf_common+0xa4>
 80047d2:	3601      	adds	r6, #1
 80047d4:	e7d9      	b.n	800478a <_printf_common+0x8e>
	...

080047d8 <_printf_i>:
 80047d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80047dc:	7e0f      	ldrb	r7, [r1, #24]
 80047de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047e0:	2f78      	cmp	r7, #120	; 0x78
 80047e2:	4691      	mov	r9, r2
 80047e4:	4680      	mov	r8, r0
 80047e6:	460c      	mov	r4, r1
 80047e8:	469a      	mov	sl, r3
 80047ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80047ee:	d807      	bhi.n	8004800 <_printf_i+0x28>
 80047f0:	2f62      	cmp	r7, #98	; 0x62
 80047f2:	d80a      	bhi.n	800480a <_printf_i+0x32>
 80047f4:	2f00      	cmp	r7, #0
 80047f6:	f000 80d8 	beq.w	80049aa <_printf_i+0x1d2>
 80047fa:	2f58      	cmp	r7, #88	; 0x58
 80047fc:	f000 80a3 	beq.w	8004946 <_printf_i+0x16e>
 8004800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004808:	e03a      	b.n	8004880 <_printf_i+0xa8>
 800480a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800480e:	2b15      	cmp	r3, #21
 8004810:	d8f6      	bhi.n	8004800 <_printf_i+0x28>
 8004812:	a101      	add	r1, pc, #4	; (adr r1, 8004818 <_printf_i+0x40>)
 8004814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004818:	08004871 	.word	0x08004871
 800481c:	08004885 	.word	0x08004885
 8004820:	08004801 	.word	0x08004801
 8004824:	08004801 	.word	0x08004801
 8004828:	08004801 	.word	0x08004801
 800482c:	08004801 	.word	0x08004801
 8004830:	08004885 	.word	0x08004885
 8004834:	08004801 	.word	0x08004801
 8004838:	08004801 	.word	0x08004801
 800483c:	08004801 	.word	0x08004801
 8004840:	08004801 	.word	0x08004801
 8004844:	08004991 	.word	0x08004991
 8004848:	080048b5 	.word	0x080048b5
 800484c:	08004973 	.word	0x08004973
 8004850:	08004801 	.word	0x08004801
 8004854:	08004801 	.word	0x08004801
 8004858:	080049b3 	.word	0x080049b3
 800485c:	08004801 	.word	0x08004801
 8004860:	080048b5 	.word	0x080048b5
 8004864:	08004801 	.word	0x08004801
 8004868:	08004801 	.word	0x08004801
 800486c:	0800497b 	.word	0x0800497b
 8004870:	682b      	ldr	r3, [r5, #0]
 8004872:	1d1a      	adds	r2, r3, #4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	602a      	str	r2, [r5, #0]
 8004878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800487c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004880:	2301      	movs	r3, #1
 8004882:	e0a3      	b.n	80049cc <_printf_i+0x1f4>
 8004884:	6820      	ldr	r0, [r4, #0]
 8004886:	6829      	ldr	r1, [r5, #0]
 8004888:	0606      	lsls	r6, r0, #24
 800488a:	f101 0304 	add.w	r3, r1, #4
 800488e:	d50a      	bpl.n	80048a6 <_printf_i+0xce>
 8004890:	680e      	ldr	r6, [r1, #0]
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	2e00      	cmp	r6, #0
 8004896:	da03      	bge.n	80048a0 <_printf_i+0xc8>
 8004898:	232d      	movs	r3, #45	; 0x2d
 800489a:	4276      	negs	r6, r6
 800489c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048a0:	485e      	ldr	r0, [pc, #376]	; (8004a1c <_printf_i+0x244>)
 80048a2:	230a      	movs	r3, #10
 80048a4:	e019      	b.n	80048da <_printf_i+0x102>
 80048a6:	680e      	ldr	r6, [r1, #0]
 80048a8:	602b      	str	r3, [r5, #0]
 80048aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048ae:	bf18      	it	ne
 80048b0:	b236      	sxthne	r6, r6
 80048b2:	e7ef      	b.n	8004894 <_printf_i+0xbc>
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	6820      	ldr	r0, [r4, #0]
 80048b8:	1d19      	adds	r1, r3, #4
 80048ba:	6029      	str	r1, [r5, #0]
 80048bc:	0601      	lsls	r1, r0, #24
 80048be:	d501      	bpl.n	80048c4 <_printf_i+0xec>
 80048c0:	681e      	ldr	r6, [r3, #0]
 80048c2:	e002      	b.n	80048ca <_printf_i+0xf2>
 80048c4:	0646      	lsls	r6, r0, #25
 80048c6:	d5fb      	bpl.n	80048c0 <_printf_i+0xe8>
 80048c8:	881e      	ldrh	r6, [r3, #0]
 80048ca:	4854      	ldr	r0, [pc, #336]	; (8004a1c <_printf_i+0x244>)
 80048cc:	2f6f      	cmp	r7, #111	; 0x6f
 80048ce:	bf0c      	ite	eq
 80048d0:	2308      	moveq	r3, #8
 80048d2:	230a      	movne	r3, #10
 80048d4:	2100      	movs	r1, #0
 80048d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80048da:	6865      	ldr	r5, [r4, #4]
 80048dc:	60a5      	str	r5, [r4, #8]
 80048de:	2d00      	cmp	r5, #0
 80048e0:	bfa2      	ittt	ge
 80048e2:	6821      	ldrge	r1, [r4, #0]
 80048e4:	f021 0104 	bicge.w	r1, r1, #4
 80048e8:	6021      	strge	r1, [r4, #0]
 80048ea:	b90e      	cbnz	r6, 80048f0 <_printf_i+0x118>
 80048ec:	2d00      	cmp	r5, #0
 80048ee:	d04d      	beq.n	800498c <_printf_i+0x1b4>
 80048f0:	4615      	mov	r5, r2
 80048f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80048f6:	fb03 6711 	mls	r7, r3, r1, r6
 80048fa:	5dc7      	ldrb	r7, [r0, r7]
 80048fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004900:	4637      	mov	r7, r6
 8004902:	42bb      	cmp	r3, r7
 8004904:	460e      	mov	r6, r1
 8004906:	d9f4      	bls.n	80048f2 <_printf_i+0x11a>
 8004908:	2b08      	cmp	r3, #8
 800490a:	d10b      	bne.n	8004924 <_printf_i+0x14c>
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	07de      	lsls	r6, r3, #31
 8004910:	d508      	bpl.n	8004924 <_printf_i+0x14c>
 8004912:	6923      	ldr	r3, [r4, #16]
 8004914:	6861      	ldr	r1, [r4, #4]
 8004916:	4299      	cmp	r1, r3
 8004918:	bfde      	ittt	le
 800491a:	2330      	movle	r3, #48	; 0x30
 800491c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004920:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004924:	1b52      	subs	r2, r2, r5
 8004926:	6122      	str	r2, [r4, #16]
 8004928:	f8cd a000 	str.w	sl, [sp]
 800492c:	464b      	mov	r3, r9
 800492e:	aa03      	add	r2, sp, #12
 8004930:	4621      	mov	r1, r4
 8004932:	4640      	mov	r0, r8
 8004934:	f7ff fee2 	bl	80046fc <_printf_common>
 8004938:	3001      	adds	r0, #1
 800493a:	d14c      	bne.n	80049d6 <_printf_i+0x1fe>
 800493c:	f04f 30ff 	mov.w	r0, #4294967295
 8004940:	b004      	add	sp, #16
 8004942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004946:	4835      	ldr	r0, [pc, #212]	; (8004a1c <_printf_i+0x244>)
 8004948:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800494c:	6829      	ldr	r1, [r5, #0]
 800494e:	6823      	ldr	r3, [r4, #0]
 8004950:	f851 6b04 	ldr.w	r6, [r1], #4
 8004954:	6029      	str	r1, [r5, #0]
 8004956:	061d      	lsls	r5, r3, #24
 8004958:	d514      	bpl.n	8004984 <_printf_i+0x1ac>
 800495a:	07df      	lsls	r7, r3, #31
 800495c:	bf44      	itt	mi
 800495e:	f043 0320 	orrmi.w	r3, r3, #32
 8004962:	6023      	strmi	r3, [r4, #0]
 8004964:	b91e      	cbnz	r6, 800496e <_printf_i+0x196>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	f023 0320 	bic.w	r3, r3, #32
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	2310      	movs	r3, #16
 8004970:	e7b0      	b.n	80048d4 <_printf_i+0xfc>
 8004972:	6823      	ldr	r3, [r4, #0]
 8004974:	f043 0320 	orr.w	r3, r3, #32
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	2378      	movs	r3, #120	; 0x78
 800497c:	4828      	ldr	r0, [pc, #160]	; (8004a20 <_printf_i+0x248>)
 800497e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004982:	e7e3      	b.n	800494c <_printf_i+0x174>
 8004984:	0659      	lsls	r1, r3, #25
 8004986:	bf48      	it	mi
 8004988:	b2b6      	uxthmi	r6, r6
 800498a:	e7e6      	b.n	800495a <_printf_i+0x182>
 800498c:	4615      	mov	r5, r2
 800498e:	e7bb      	b.n	8004908 <_printf_i+0x130>
 8004990:	682b      	ldr	r3, [r5, #0]
 8004992:	6826      	ldr	r6, [r4, #0]
 8004994:	6961      	ldr	r1, [r4, #20]
 8004996:	1d18      	adds	r0, r3, #4
 8004998:	6028      	str	r0, [r5, #0]
 800499a:	0635      	lsls	r5, r6, #24
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	d501      	bpl.n	80049a4 <_printf_i+0x1cc>
 80049a0:	6019      	str	r1, [r3, #0]
 80049a2:	e002      	b.n	80049aa <_printf_i+0x1d2>
 80049a4:	0670      	lsls	r0, r6, #25
 80049a6:	d5fb      	bpl.n	80049a0 <_printf_i+0x1c8>
 80049a8:	8019      	strh	r1, [r3, #0]
 80049aa:	2300      	movs	r3, #0
 80049ac:	6123      	str	r3, [r4, #16]
 80049ae:	4615      	mov	r5, r2
 80049b0:	e7ba      	b.n	8004928 <_printf_i+0x150>
 80049b2:	682b      	ldr	r3, [r5, #0]
 80049b4:	1d1a      	adds	r2, r3, #4
 80049b6:	602a      	str	r2, [r5, #0]
 80049b8:	681d      	ldr	r5, [r3, #0]
 80049ba:	6862      	ldr	r2, [r4, #4]
 80049bc:	2100      	movs	r1, #0
 80049be:	4628      	mov	r0, r5
 80049c0:	f7fb fc8e 	bl	80002e0 <memchr>
 80049c4:	b108      	cbz	r0, 80049ca <_printf_i+0x1f2>
 80049c6:	1b40      	subs	r0, r0, r5
 80049c8:	6060      	str	r0, [r4, #4]
 80049ca:	6863      	ldr	r3, [r4, #4]
 80049cc:	6123      	str	r3, [r4, #16]
 80049ce:	2300      	movs	r3, #0
 80049d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d4:	e7a8      	b.n	8004928 <_printf_i+0x150>
 80049d6:	6923      	ldr	r3, [r4, #16]
 80049d8:	462a      	mov	r2, r5
 80049da:	4649      	mov	r1, r9
 80049dc:	4640      	mov	r0, r8
 80049de:	47d0      	blx	sl
 80049e0:	3001      	adds	r0, #1
 80049e2:	d0ab      	beq.n	800493c <_printf_i+0x164>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	079b      	lsls	r3, r3, #30
 80049e8:	d413      	bmi.n	8004a12 <_printf_i+0x23a>
 80049ea:	68e0      	ldr	r0, [r4, #12]
 80049ec:	9b03      	ldr	r3, [sp, #12]
 80049ee:	4298      	cmp	r0, r3
 80049f0:	bfb8      	it	lt
 80049f2:	4618      	movlt	r0, r3
 80049f4:	e7a4      	b.n	8004940 <_printf_i+0x168>
 80049f6:	2301      	movs	r3, #1
 80049f8:	4632      	mov	r2, r6
 80049fa:	4649      	mov	r1, r9
 80049fc:	4640      	mov	r0, r8
 80049fe:	47d0      	blx	sl
 8004a00:	3001      	adds	r0, #1
 8004a02:	d09b      	beq.n	800493c <_printf_i+0x164>
 8004a04:	3501      	adds	r5, #1
 8004a06:	68e3      	ldr	r3, [r4, #12]
 8004a08:	9903      	ldr	r1, [sp, #12]
 8004a0a:	1a5b      	subs	r3, r3, r1
 8004a0c:	42ab      	cmp	r3, r5
 8004a0e:	dcf2      	bgt.n	80049f6 <_printf_i+0x21e>
 8004a10:	e7eb      	b.n	80049ea <_printf_i+0x212>
 8004a12:	2500      	movs	r5, #0
 8004a14:	f104 0619 	add.w	r6, r4, #25
 8004a18:	e7f5      	b.n	8004a06 <_printf_i+0x22e>
 8004a1a:	bf00      	nop
 8004a1c:	0800bd5a 	.word	0x0800bd5a
 8004a20:	0800bd6b 	.word	0x0800bd6b

08004a24 <iprintf>:
 8004a24:	b40f      	push	{r0, r1, r2, r3}
 8004a26:	4b0a      	ldr	r3, [pc, #40]	; (8004a50 <iprintf+0x2c>)
 8004a28:	b513      	push	{r0, r1, r4, lr}
 8004a2a:	681c      	ldr	r4, [r3, #0]
 8004a2c:	b124      	cbz	r4, 8004a38 <iprintf+0x14>
 8004a2e:	69a3      	ldr	r3, [r4, #24]
 8004a30:	b913      	cbnz	r3, 8004a38 <iprintf+0x14>
 8004a32:	4620      	mov	r0, r4
 8004a34:	f001 f8f0 	bl	8005c18 <__sinit>
 8004a38:	ab05      	add	r3, sp, #20
 8004a3a:	9a04      	ldr	r2, [sp, #16]
 8004a3c:	68a1      	ldr	r1, [r4, #8]
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	4620      	mov	r0, r4
 8004a42:	f001 fead 	bl	80067a0 <_vfiprintf_r>
 8004a46:	b002      	add	sp, #8
 8004a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4c:	b004      	add	sp, #16
 8004a4e:	4770      	bx	lr
 8004a50:	2000000c 	.word	0x2000000c

08004a54 <putchar>:
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <putchar+0x28>)
 8004a56:	b513      	push	{r0, r1, r4, lr}
 8004a58:	681c      	ldr	r4, [r3, #0]
 8004a5a:	4601      	mov	r1, r0
 8004a5c:	b134      	cbz	r4, 8004a6c <putchar+0x18>
 8004a5e:	69a3      	ldr	r3, [r4, #24]
 8004a60:	b923      	cbnz	r3, 8004a6c <putchar+0x18>
 8004a62:	9001      	str	r0, [sp, #4]
 8004a64:	4620      	mov	r0, r4
 8004a66:	f001 f8d7 	bl	8005c18 <__sinit>
 8004a6a:	9901      	ldr	r1, [sp, #4]
 8004a6c:	68a2      	ldr	r2, [r4, #8]
 8004a6e:	4620      	mov	r0, r4
 8004a70:	b002      	add	sp, #8
 8004a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a76:	f001 bfc3 	b.w	8006a00 <_putc_r>
 8004a7a:	bf00      	nop
 8004a7c:	2000000c 	.word	0x2000000c

08004a80 <_puts_r>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	460e      	mov	r6, r1
 8004a84:	4605      	mov	r5, r0
 8004a86:	b118      	cbz	r0, 8004a90 <_puts_r+0x10>
 8004a88:	6983      	ldr	r3, [r0, #24]
 8004a8a:	b90b      	cbnz	r3, 8004a90 <_puts_r+0x10>
 8004a8c:	f001 f8c4 	bl	8005c18 <__sinit>
 8004a90:	69ab      	ldr	r3, [r5, #24]
 8004a92:	68ac      	ldr	r4, [r5, #8]
 8004a94:	b913      	cbnz	r3, 8004a9c <_puts_r+0x1c>
 8004a96:	4628      	mov	r0, r5
 8004a98:	f001 f8be 	bl	8005c18 <__sinit>
 8004a9c:	4b2c      	ldr	r3, [pc, #176]	; (8004b50 <_puts_r+0xd0>)
 8004a9e:	429c      	cmp	r4, r3
 8004aa0:	d120      	bne.n	8004ae4 <_puts_r+0x64>
 8004aa2:	686c      	ldr	r4, [r5, #4]
 8004aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004aa6:	07db      	lsls	r3, r3, #31
 8004aa8:	d405      	bmi.n	8004ab6 <_puts_r+0x36>
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	0598      	lsls	r0, r3, #22
 8004aae:	d402      	bmi.n	8004ab6 <_puts_r+0x36>
 8004ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ab2:	f001 f954 	bl	8005d5e <__retarget_lock_acquire_recursive>
 8004ab6:	89a3      	ldrh	r3, [r4, #12]
 8004ab8:	0719      	lsls	r1, r3, #28
 8004aba:	d51d      	bpl.n	8004af8 <_puts_r+0x78>
 8004abc:	6923      	ldr	r3, [r4, #16]
 8004abe:	b1db      	cbz	r3, 8004af8 <_puts_r+0x78>
 8004ac0:	3e01      	subs	r6, #1
 8004ac2:	68a3      	ldr	r3, [r4, #8]
 8004ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	60a3      	str	r3, [r4, #8]
 8004acc:	bb39      	cbnz	r1, 8004b1e <_puts_r+0x9e>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	da38      	bge.n	8004b44 <_puts_r+0xc4>
 8004ad2:	4622      	mov	r2, r4
 8004ad4:	210a      	movs	r1, #10
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	f000 f848 	bl	8004b6c <__swbuf_r>
 8004adc:	3001      	adds	r0, #1
 8004ade:	d011      	beq.n	8004b04 <_puts_r+0x84>
 8004ae0:	250a      	movs	r5, #10
 8004ae2:	e011      	b.n	8004b08 <_puts_r+0x88>
 8004ae4:	4b1b      	ldr	r3, [pc, #108]	; (8004b54 <_puts_r+0xd4>)
 8004ae6:	429c      	cmp	r4, r3
 8004ae8:	d101      	bne.n	8004aee <_puts_r+0x6e>
 8004aea:	68ac      	ldr	r4, [r5, #8]
 8004aec:	e7da      	b.n	8004aa4 <_puts_r+0x24>
 8004aee:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <_puts_r+0xd8>)
 8004af0:	429c      	cmp	r4, r3
 8004af2:	bf08      	it	eq
 8004af4:	68ec      	ldreq	r4, [r5, #12]
 8004af6:	e7d5      	b.n	8004aa4 <_puts_r+0x24>
 8004af8:	4621      	mov	r1, r4
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 f888 	bl	8004c10 <__swsetup_r>
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d0dd      	beq.n	8004ac0 <_puts_r+0x40>
 8004b04:	f04f 35ff 	mov.w	r5, #4294967295
 8004b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b0a:	07da      	lsls	r2, r3, #31
 8004b0c:	d405      	bmi.n	8004b1a <_puts_r+0x9a>
 8004b0e:	89a3      	ldrh	r3, [r4, #12]
 8004b10:	059b      	lsls	r3, r3, #22
 8004b12:	d402      	bmi.n	8004b1a <_puts_r+0x9a>
 8004b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b16:	f001 f923 	bl	8005d60 <__retarget_lock_release_recursive>
 8004b1a:	4628      	mov	r0, r5
 8004b1c:	bd70      	pop	{r4, r5, r6, pc}
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da04      	bge.n	8004b2c <_puts_r+0xac>
 8004b22:	69a2      	ldr	r2, [r4, #24]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	dc06      	bgt.n	8004b36 <_puts_r+0xb6>
 8004b28:	290a      	cmp	r1, #10
 8004b2a:	d004      	beq.n	8004b36 <_puts_r+0xb6>
 8004b2c:	6823      	ldr	r3, [r4, #0]
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	6022      	str	r2, [r4, #0]
 8004b32:	7019      	strb	r1, [r3, #0]
 8004b34:	e7c5      	b.n	8004ac2 <_puts_r+0x42>
 8004b36:	4622      	mov	r2, r4
 8004b38:	4628      	mov	r0, r5
 8004b3a:	f000 f817 	bl	8004b6c <__swbuf_r>
 8004b3e:	3001      	adds	r0, #1
 8004b40:	d1bf      	bne.n	8004ac2 <_puts_r+0x42>
 8004b42:	e7df      	b.n	8004b04 <_puts_r+0x84>
 8004b44:	6823      	ldr	r3, [r4, #0]
 8004b46:	250a      	movs	r5, #10
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	6022      	str	r2, [r4, #0]
 8004b4c:	701d      	strb	r5, [r3, #0]
 8004b4e:	e7db      	b.n	8004b08 <_puts_r+0x88>
 8004b50:	0800be2c 	.word	0x0800be2c
 8004b54:	0800be4c 	.word	0x0800be4c
 8004b58:	0800be0c 	.word	0x0800be0c

08004b5c <puts>:
 8004b5c:	4b02      	ldr	r3, [pc, #8]	; (8004b68 <puts+0xc>)
 8004b5e:	4601      	mov	r1, r0
 8004b60:	6818      	ldr	r0, [r3, #0]
 8004b62:	f7ff bf8d 	b.w	8004a80 <_puts_r>
 8004b66:	bf00      	nop
 8004b68:	2000000c 	.word	0x2000000c

08004b6c <__swbuf_r>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	460e      	mov	r6, r1
 8004b70:	4614      	mov	r4, r2
 8004b72:	4605      	mov	r5, r0
 8004b74:	b118      	cbz	r0, 8004b7e <__swbuf_r+0x12>
 8004b76:	6983      	ldr	r3, [r0, #24]
 8004b78:	b90b      	cbnz	r3, 8004b7e <__swbuf_r+0x12>
 8004b7a:	f001 f84d 	bl	8005c18 <__sinit>
 8004b7e:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <__swbuf_r+0x98>)
 8004b80:	429c      	cmp	r4, r3
 8004b82:	d12b      	bne.n	8004bdc <__swbuf_r+0x70>
 8004b84:	686c      	ldr	r4, [r5, #4]
 8004b86:	69a3      	ldr	r3, [r4, #24]
 8004b88:	60a3      	str	r3, [r4, #8]
 8004b8a:	89a3      	ldrh	r3, [r4, #12]
 8004b8c:	071a      	lsls	r2, r3, #28
 8004b8e:	d52f      	bpl.n	8004bf0 <__swbuf_r+0x84>
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	b36b      	cbz	r3, 8004bf0 <__swbuf_r+0x84>
 8004b94:	6923      	ldr	r3, [r4, #16]
 8004b96:	6820      	ldr	r0, [r4, #0]
 8004b98:	1ac0      	subs	r0, r0, r3
 8004b9a:	6963      	ldr	r3, [r4, #20]
 8004b9c:	b2f6      	uxtb	r6, r6
 8004b9e:	4283      	cmp	r3, r0
 8004ba0:	4637      	mov	r7, r6
 8004ba2:	dc04      	bgt.n	8004bae <__swbuf_r+0x42>
 8004ba4:	4621      	mov	r1, r4
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 ffa2 	bl	8005af0 <_fflush_r>
 8004bac:	bb30      	cbnz	r0, 8004bfc <__swbuf_r+0x90>
 8004bae:	68a3      	ldr	r3, [r4, #8]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	60a3      	str	r3, [r4, #8]
 8004bb4:	6823      	ldr	r3, [r4, #0]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	6022      	str	r2, [r4, #0]
 8004bba:	701e      	strb	r6, [r3, #0]
 8004bbc:	6963      	ldr	r3, [r4, #20]
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	4283      	cmp	r3, r0
 8004bc2:	d004      	beq.n	8004bce <__swbuf_r+0x62>
 8004bc4:	89a3      	ldrh	r3, [r4, #12]
 8004bc6:	07db      	lsls	r3, r3, #31
 8004bc8:	d506      	bpl.n	8004bd8 <__swbuf_r+0x6c>
 8004bca:	2e0a      	cmp	r6, #10
 8004bcc:	d104      	bne.n	8004bd8 <__swbuf_r+0x6c>
 8004bce:	4621      	mov	r1, r4
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f000 ff8d 	bl	8005af0 <_fflush_r>
 8004bd6:	b988      	cbnz	r0, 8004bfc <__swbuf_r+0x90>
 8004bd8:	4638      	mov	r0, r7
 8004bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bdc:	4b0a      	ldr	r3, [pc, #40]	; (8004c08 <__swbuf_r+0x9c>)
 8004bde:	429c      	cmp	r4, r3
 8004be0:	d101      	bne.n	8004be6 <__swbuf_r+0x7a>
 8004be2:	68ac      	ldr	r4, [r5, #8]
 8004be4:	e7cf      	b.n	8004b86 <__swbuf_r+0x1a>
 8004be6:	4b09      	ldr	r3, [pc, #36]	; (8004c0c <__swbuf_r+0xa0>)
 8004be8:	429c      	cmp	r4, r3
 8004bea:	bf08      	it	eq
 8004bec:	68ec      	ldreq	r4, [r5, #12]
 8004bee:	e7ca      	b.n	8004b86 <__swbuf_r+0x1a>
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 f80c 	bl	8004c10 <__swsetup_r>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d0cb      	beq.n	8004b94 <__swbuf_r+0x28>
 8004bfc:	f04f 37ff 	mov.w	r7, #4294967295
 8004c00:	e7ea      	b.n	8004bd8 <__swbuf_r+0x6c>
 8004c02:	bf00      	nop
 8004c04:	0800be2c 	.word	0x0800be2c
 8004c08:	0800be4c 	.word	0x0800be4c
 8004c0c:	0800be0c 	.word	0x0800be0c

08004c10 <__swsetup_r>:
 8004c10:	4b32      	ldr	r3, [pc, #200]	; (8004cdc <__swsetup_r+0xcc>)
 8004c12:	b570      	push	{r4, r5, r6, lr}
 8004c14:	681d      	ldr	r5, [r3, #0]
 8004c16:	4606      	mov	r6, r0
 8004c18:	460c      	mov	r4, r1
 8004c1a:	b125      	cbz	r5, 8004c26 <__swsetup_r+0x16>
 8004c1c:	69ab      	ldr	r3, [r5, #24]
 8004c1e:	b913      	cbnz	r3, 8004c26 <__swsetup_r+0x16>
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 fff9 	bl	8005c18 <__sinit>
 8004c26:	4b2e      	ldr	r3, [pc, #184]	; (8004ce0 <__swsetup_r+0xd0>)
 8004c28:	429c      	cmp	r4, r3
 8004c2a:	d10f      	bne.n	8004c4c <__swsetup_r+0x3c>
 8004c2c:	686c      	ldr	r4, [r5, #4]
 8004c2e:	89a3      	ldrh	r3, [r4, #12]
 8004c30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c34:	0719      	lsls	r1, r3, #28
 8004c36:	d42c      	bmi.n	8004c92 <__swsetup_r+0x82>
 8004c38:	06dd      	lsls	r5, r3, #27
 8004c3a:	d411      	bmi.n	8004c60 <__swsetup_r+0x50>
 8004c3c:	2309      	movs	r3, #9
 8004c3e:	6033      	str	r3, [r6, #0]
 8004c40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c44:	81a3      	strh	r3, [r4, #12]
 8004c46:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4a:	e03e      	b.n	8004cca <__swsetup_r+0xba>
 8004c4c:	4b25      	ldr	r3, [pc, #148]	; (8004ce4 <__swsetup_r+0xd4>)
 8004c4e:	429c      	cmp	r4, r3
 8004c50:	d101      	bne.n	8004c56 <__swsetup_r+0x46>
 8004c52:	68ac      	ldr	r4, [r5, #8]
 8004c54:	e7eb      	b.n	8004c2e <__swsetup_r+0x1e>
 8004c56:	4b24      	ldr	r3, [pc, #144]	; (8004ce8 <__swsetup_r+0xd8>)
 8004c58:	429c      	cmp	r4, r3
 8004c5a:	bf08      	it	eq
 8004c5c:	68ec      	ldreq	r4, [r5, #12]
 8004c5e:	e7e6      	b.n	8004c2e <__swsetup_r+0x1e>
 8004c60:	0758      	lsls	r0, r3, #29
 8004c62:	d512      	bpl.n	8004c8a <__swsetup_r+0x7a>
 8004c64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c66:	b141      	cbz	r1, 8004c7a <__swsetup_r+0x6a>
 8004c68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c6c:	4299      	cmp	r1, r3
 8004c6e:	d002      	beq.n	8004c76 <__swsetup_r+0x66>
 8004c70:	4630      	mov	r0, r6
 8004c72:	f001 fc8b 	bl	800658c <_free_r>
 8004c76:	2300      	movs	r3, #0
 8004c78:	6363      	str	r3, [r4, #52]	; 0x34
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c80:	81a3      	strh	r3, [r4, #12]
 8004c82:	2300      	movs	r3, #0
 8004c84:	6063      	str	r3, [r4, #4]
 8004c86:	6923      	ldr	r3, [r4, #16]
 8004c88:	6023      	str	r3, [r4, #0]
 8004c8a:	89a3      	ldrh	r3, [r4, #12]
 8004c8c:	f043 0308 	orr.w	r3, r3, #8
 8004c90:	81a3      	strh	r3, [r4, #12]
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	b94b      	cbnz	r3, 8004caa <__swsetup_r+0x9a>
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca0:	d003      	beq.n	8004caa <__swsetup_r+0x9a>
 8004ca2:	4621      	mov	r1, r4
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	f001 f881 	bl	8005dac <__smakebuf_r>
 8004caa:	89a0      	ldrh	r0, [r4, #12]
 8004cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004cb0:	f010 0301 	ands.w	r3, r0, #1
 8004cb4:	d00a      	beq.n	8004ccc <__swsetup_r+0xbc>
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60a3      	str	r3, [r4, #8]
 8004cba:	6963      	ldr	r3, [r4, #20]
 8004cbc:	425b      	negs	r3, r3
 8004cbe:	61a3      	str	r3, [r4, #24]
 8004cc0:	6923      	ldr	r3, [r4, #16]
 8004cc2:	b943      	cbnz	r3, 8004cd6 <__swsetup_r+0xc6>
 8004cc4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004cc8:	d1ba      	bne.n	8004c40 <__swsetup_r+0x30>
 8004cca:	bd70      	pop	{r4, r5, r6, pc}
 8004ccc:	0781      	lsls	r1, r0, #30
 8004cce:	bf58      	it	pl
 8004cd0:	6963      	ldrpl	r3, [r4, #20]
 8004cd2:	60a3      	str	r3, [r4, #8]
 8004cd4:	e7f4      	b.n	8004cc0 <__swsetup_r+0xb0>
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	e7f7      	b.n	8004cca <__swsetup_r+0xba>
 8004cda:	bf00      	nop
 8004cdc:	2000000c 	.word	0x2000000c
 8004ce0:	0800be2c 	.word	0x0800be2c
 8004ce4:	0800be4c 	.word	0x0800be4c
 8004ce8:	0800be0c 	.word	0x0800be0c

08004cec <quorem>:
 8004cec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	6903      	ldr	r3, [r0, #16]
 8004cf2:	690c      	ldr	r4, [r1, #16]
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	4607      	mov	r7, r0
 8004cf8:	f2c0 8081 	blt.w	8004dfe <quorem+0x112>
 8004cfc:	3c01      	subs	r4, #1
 8004cfe:	f101 0814 	add.w	r8, r1, #20
 8004d02:	f100 0514 	add.w	r5, r0, #20
 8004d06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d14:	3301      	adds	r3, #1
 8004d16:	429a      	cmp	r2, r3
 8004d18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004d1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d20:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d24:	d331      	bcc.n	8004d8a <quorem+0x9e>
 8004d26:	f04f 0e00 	mov.w	lr, #0
 8004d2a:	4640      	mov	r0, r8
 8004d2c:	46ac      	mov	ip, r5
 8004d2e:	46f2      	mov	sl, lr
 8004d30:	f850 2b04 	ldr.w	r2, [r0], #4
 8004d34:	b293      	uxth	r3, r2
 8004d36:	fb06 e303 	mla	r3, r6, r3, lr
 8004d3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	ebaa 0303 	sub.w	r3, sl, r3
 8004d44:	f8dc a000 	ldr.w	sl, [ip]
 8004d48:	0c12      	lsrs	r2, r2, #16
 8004d4a:	fa13 f38a 	uxtah	r3, r3, sl
 8004d4e:	fb06 e202 	mla	r2, r6, r2, lr
 8004d52:	9300      	str	r3, [sp, #0]
 8004d54:	9b00      	ldr	r3, [sp, #0]
 8004d56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d64:	f8bd 3000 	ldrh.w	r3, [sp]
 8004d68:	4581      	cmp	r9, r0
 8004d6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d6e:	f84c 3b04 	str.w	r3, [ip], #4
 8004d72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d76:	d2db      	bcs.n	8004d30 <quorem+0x44>
 8004d78:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d7c:	b92b      	cbnz	r3, 8004d8a <quorem+0x9e>
 8004d7e:	9b01      	ldr	r3, [sp, #4]
 8004d80:	3b04      	subs	r3, #4
 8004d82:	429d      	cmp	r5, r3
 8004d84:	461a      	mov	r2, r3
 8004d86:	d32e      	bcc.n	8004de6 <quorem+0xfa>
 8004d88:	613c      	str	r4, [r7, #16]
 8004d8a:	4638      	mov	r0, r7
 8004d8c:	f001 fae6 	bl	800635c <__mcmp>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	db24      	blt.n	8004dde <quorem+0xf2>
 8004d94:	3601      	adds	r6, #1
 8004d96:	4628      	mov	r0, r5
 8004d98:	f04f 0c00 	mov.w	ip, #0
 8004d9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8004da0:	f8d0 e000 	ldr.w	lr, [r0]
 8004da4:	b293      	uxth	r3, r2
 8004da6:	ebac 0303 	sub.w	r3, ip, r3
 8004daa:	0c12      	lsrs	r2, r2, #16
 8004dac:	fa13 f38e 	uxtah	r3, r3, lr
 8004db0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004db4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dbe:	45c1      	cmp	r9, r8
 8004dc0:	f840 3b04 	str.w	r3, [r0], #4
 8004dc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004dc8:	d2e8      	bcs.n	8004d9c <quorem+0xb0>
 8004dca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dd2:	b922      	cbnz	r2, 8004dde <quorem+0xf2>
 8004dd4:	3b04      	subs	r3, #4
 8004dd6:	429d      	cmp	r5, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	d30a      	bcc.n	8004df2 <quorem+0x106>
 8004ddc:	613c      	str	r4, [r7, #16]
 8004dde:	4630      	mov	r0, r6
 8004de0:	b003      	add	sp, #12
 8004de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	3b04      	subs	r3, #4
 8004dea:	2a00      	cmp	r2, #0
 8004dec:	d1cc      	bne.n	8004d88 <quorem+0x9c>
 8004dee:	3c01      	subs	r4, #1
 8004df0:	e7c7      	b.n	8004d82 <quorem+0x96>
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	3b04      	subs	r3, #4
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	d1f0      	bne.n	8004ddc <quorem+0xf0>
 8004dfa:	3c01      	subs	r4, #1
 8004dfc:	e7eb      	b.n	8004dd6 <quorem+0xea>
 8004dfe:	2000      	movs	r0, #0
 8004e00:	e7ee      	b.n	8004de0 <quorem+0xf4>
 8004e02:	0000      	movs	r0, r0
 8004e04:	0000      	movs	r0, r0
	...

08004e08 <_dtoa_r>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	ed2d 8b04 	vpush	{d8-d9}
 8004e10:	ec57 6b10 	vmov	r6, r7, d0
 8004e14:	b093      	sub	sp, #76	; 0x4c
 8004e16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004e18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004e1c:	9106      	str	r1, [sp, #24]
 8004e1e:	ee10 aa10 	vmov	sl, s0
 8004e22:	4604      	mov	r4, r0
 8004e24:	9209      	str	r2, [sp, #36]	; 0x24
 8004e26:	930c      	str	r3, [sp, #48]	; 0x30
 8004e28:	46bb      	mov	fp, r7
 8004e2a:	b975      	cbnz	r5, 8004e4a <_dtoa_r+0x42>
 8004e2c:	2010      	movs	r0, #16
 8004e2e:	f000 fffd 	bl	8005e2c <malloc>
 8004e32:	4602      	mov	r2, r0
 8004e34:	6260      	str	r0, [r4, #36]	; 0x24
 8004e36:	b920      	cbnz	r0, 8004e42 <_dtoa_r+0x3a>
 8004e38:	4ba7      	ldr	r3, [pc, #668]	; (80050d8 <_dtoa_r+0x2d0>)
 8004e3a:	21ea      	movs	r1, #234	; 0xea
 8004e3c:	48a7      	ldr	r0, [pc, #668]	; (80050dc <_dtoa_r+0x2d4>)
 8004e3e:	f001 fe8d 	bl	8006b5c <__assert_func>
 8004e42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e46:	6005      	str	r5, [r0, #0]
 8004e48:	60c5      	str	r5, [r0, #12]
 8004e4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e4c:	6819      	ldr	r1, [r3, #0]
 8004e4e:	b151      	cbz	r1, 8004e66 <_dtoa_r+0x5e>
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	604a      	str	r2, [r1, #4]
 8004e54:	2301      	movs	r3, #1
 8004e56:	4093      	lsls	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f001 f83c 	bl	8005ed8 <_Bfree>
 8004e60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	1e3b      	subs	r3, r7, #0
 8004e68:	bfaa      	itet	ge
 8004e6a:	2300      	movge	r3, #0
 8004e6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004e70:	f8c8 3000 	strge.w	r3, [r8]
 8004e74:	4b9a      	ldr	r3, [pc, #616]	; (80050e0 <_dtoa_r+0x2d8>)
 8004e76:	bfbc      	itt	lt
 8004e78:	2201      	movlt	r2, #1
 8004e7a:	f8c8 2000 	strlt.w	r2, [r8]
 8004e7e:	ea33 030b 	bics.w	r3, r3, fp
 8004e82:	d11b      	bne.n	8004ebc <_dtoa_r+0xb4>
 8004e84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e86:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e90:	4333      	orrs	r3, r6
 8004e92:	f000 8592 	beq.w	80059ba <_dtoa_r+0xbb2>
 8004e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e98:	b963      	cbnz	r3, 8004eb4 <_dtoa_r+0xac>
 8004e9a:	4b92      	ldr	r3, [pc, #584]	; (80050e4 <_dtoa_r+0x2dc>)
 8004e9c:	e022      	b.n	8004ee4 <_dtoa_r+0xdc>
 8004e9e:	4b92      	ldr	r3, [pc, #584]	; (80050e8 <_dtoa_r+0x2e0>)
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	3308      	adds	r3, #8
 8004ea4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	9801      	ldr	r0, [sp, #4]
 8004eaa:	b013      	add	sp, #76	; 0x4c
 8004eac:	ecbd 8b04 	vpop	{d8-d9}
 8004eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eb4:	4b8b      	ldr	r3, [pc, #556]	; (80050e4 <_dtoa_r+0x2dc>)
 8004eb6:	9301      	str	r3, [sp, #4]
 8004eb8:	3303      	adds	r3, #3
 8004eba:	e7f3      	b.n	8004ea4 <_dtoa_r+0x9c>
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	4650      	mov	r0, sl
 8004ec2:	4659      	mov	r1, fp
 8004ec4:	f7fb fe80 	bl	8000bc8 <__aeabi_dcmpeq>
 8004ec8:	ec4b ab19 	vmov	d9, sl, fp
 8004ecc:	4680      	mov	r8, r0
 8004ece:	b158      	cbz	r0, 8004ee8 <_dtoa_r+0xe0>
 8004ed0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 856b 	beq.w	80059b4 <_dtoa_r+0xbac>
 8004ede:	4883      	ldr	r0, [pc, #524]	; (80050ec <_dtoa_r+0x2e4>)
 8004ee0:	6018      	str	r0, [r3, #0]
 8004ee2:	1e43      	subs	r3, r0, #1
 8004ee4:	9301      	str	r3, [sp, #4]
 8004ee6:	e7df      	b.n	8004ea8 <_dtoa_r+0xa0>
 8004ee8:	ec4b ab10 	vmov	d0, sl, fp
 8004eec:	aa10      	add	r2, sp, #64	; 0x40
 8004eee:	a911      	add	r1, sp, #68	; 0x44
 8004ef0:	4620      	mov	r0, r4
 8004ef2:	f001 fad9 	bl	80064a8 <__d2b>
 8004ef6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004efa:	ee08 0a10 	vmov	s16, r0
 8004efe:	2d00      	cmp	r5, #0
 8004f00:	f000 8084 	beq.w	800500c <_dtoa_r+0x204>
 8004f04:	ee19 3a90 	vmov	r3, s19
 8004f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004f10:	4656      	mov	r6, sl
 8004f12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8004f16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004f1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004f1e:	4b74      	ldr	r3, [pc, #464]	; (80050f0 <_dtoa_r+0x2e8>)
 8004f20:	2200      	movs	r2, #0
 8004f22:	4630      	mov	r0, r6
 8004f24:	4639      	mov	r1, r7
 8004f26:	f7fb fa2f 	bl	8000388 <__aeabi_dsub>
 8004f2a:	a365      	add	r3, pc, #404	; (adr r3, 80050c0 <_dtoa_r+0x2b8>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	f7fb fbe2 	bl	80006f8 <__aeabi_dmul>
 8004f34:	a364      	add	r3, pc, #400	; (adr r3, 80050c8 <_dtoa_r+0x2c0>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f7fb fa27 	bl	800038c <__adddf3>
 8004f3e:	4606      	mov	r6, r0
 8004f40:	4628      	mov	r0, r5
 8004f42:	460f      	mov	r7, r1
 8004f44:	f7fb fb6e 	bl	8000624 <__aeabi_i2d>
 8004f48:	a361      	add	r3, pc, #388	; (adr r3, 80050d0 <_dtoa_r+0x2c8>)
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	f7fb fbd3 	bl	80006f8 <__aeabi_dmul>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4630      	mov	r0, r6
 8004f58:	4639      	mov	r1, r7
 8004f5a:	f7fb fa17 	bl	800038c <__adddf3>
 8004f5e:	4606      	mov	r6, r0
 8004f60:	460f      	mov	r7, r1
 8004f62:	f7fb fe79 	bl	8000c58 <__aeabi_d2iz>
 8004f66:	2200      	movs	r2, #0
 8004f68:	9000      	str	r0, [sp, #0]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	4639      	mov	r1, r7
 8004f70:	f7fb fe34 	bl	8000bdc <__aeabi_dcmplt>
 8004f74:	b150      	cbz	r0, 8004f8c <_dtoa_r+0x184>
 8004f76:	9800      	ldr	r0, [sp, #0]
 8004f78:	f7fb fb54 	bl	8000624 <__aeabi_i2d>
 8004f7c:	4632      	mov	r2, r6
 8004f7e:	463b      	mov	r3, r7
 8004f80:	f7fb fe22 	bl	8000bc8 <__aeabi_dcmpeq>
 8004f84:	b910      	cbnz	r0, 8004f8c <_dtoa_r+0x184>
 8004f86:	9b00      	ldr	r3, [sp, #0]
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	9300      	str	r3, [sp, #0]
 8004f8c:	9b00      	ldr	r3, [sp, #0]
 8004f8e:	2b16      	cmp	r3, #22
 8004f90:	d85a      	bhi.n	8005048 <_dtoa_r+0x240>
 8004f92:	9a00      	ldr	r2, [sp, #0]
 8004f94:	4b57      	ldr	r3, [pc, #348]	; (80050f4 <_dtoa_r+0x2ec>)
 8004f96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	ec51 0b19 	vmov	r0, r1, d9
 8004fa2:	f7fb fe1b 	bl	8000bdc <__aeabi_dcmplt>
 8004fa6:	2800      	cmp	r0, #0
 8004fa8:	d050      	beq.n	800504c <_dtoa_r+0x244>
 8004faa:	9b00      	ldr	r3, [sp, #0]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004fb6:	1b5d      	subs	r5, r3, r5
 8004fb8:	1e6b      	subs	r3, r5, #1
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	bf45      	ittet	mi
 8004fbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8004fc2:	9304      	strmi	r3, [sp, #16]
 8004fc4:	2300      	movpl	r3, #0
 8004fc6:	2300      	movmi	r3, #0
 8004fc8:	bf4c      	ite	mi
 8004fca:	9305      	strmi	r3, [sp, #20]
 8004fcc:	9304      	strpl	r3, [sp, #16]
 8004fce:	9b00      	ldr	r3, [sp, #0]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	db3d      	blt.n	8005050 <_dtoa_r+0x248>
 8004fd4:	9b05      	ldr	r3, [sp, #20]
 8004fd6:	9a00      	ldr	r2, [sp, #0]
 8004fd8:	920a      	str	r2, [sp, #40]	; 0x28
 8004fda:	4413      	add	r3, r2
 8004fdc:	9305      	str	r3, [sp, #20]
 8004fde:	2300      	movs	r3, #0
 8004fe0:	9307      	str	r3, [sp, #28]
 8004fe2:	9b06      	ldr	r3, [sp, #24]
 8004fe4:	2b09      	cmp	r3, #9
 8004fe6:	f200 8089 	bhi.w	80050fc <_dtoa_r+0x2f4>
 8004fea:	2b05      	cmp	r3, #5
 8004fec:	bfc4      	itt	gt
 8004fee:	3b04      	subgt	r3, #4
 8004ff0:	9306      	strgt	r3, [sp, #24]
 8004ff2:	9b06      	ldr	r3, [sp, #24]
 8004ff4:	f1a3 0302 	sub.w	r3, r3, #2
 8004ff8:	bfcc      	ite	gt
 8004ffa:	2500      	movgt	r5, #0
 8004ffc:	2501      	movle	r5, #1
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	f200 8087 	bhi.w	8005112 <_dtoa_r+0x30a>
 8005004:	e8df f003 	tbb	[pc, r3]
 8005008:	59383a2d 	.word	0x59383a2d
 800500c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005010:	441d      	add	r5, r3
 8005012:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005016:	2b20      	cmp	r3, #32
 8005018:	bfc1      	itttt	gt
 800501a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800501e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005022:	fa0b f303 	lslgt.w	r3, fp, r3
 8005026:	fa26 f000 	lsrgt.w	r0, r6, r0
 800502a:	bfda      	itte	le
 800502c:	f1c3 0320 	rsble	r3, r3, #32
 8005030:	fa06 f003 	lslle.w	r0, r6, r3
 8005034:	4318      	orrgt	r0, r3
 8005036:	f7fb fae5 	bl	8000604 <__aeabi_ui2d>
 800503a:	2301      	movs	r3, #1
 800503c:	4606      	mov	r6, r0
 800503e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005042:	3d01      	subs	r5, #1
 8005044:	930e      	str	r3, [sp, #56]	; 0x38
 8005046:	e76a      	b.n	8004f1e <_dtoa_r+0x116>
 8005048:	2301      	movs	r3, #1
 800504a:	e7b2      	b.n	8004fb2 <_dtoa_r+0x1aa>
 800504c:	900b      	str	r0, [sp, #44]	; 0x2c
 800504e:	e7b1      	b.n	8004fb4 <_dtoa_r+0x1ac>
 8005050:	9b04      	ldr	r3, [sp, #16]
 8005052:	9a00      	ldr	r2, [sp, #0]
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	9304      	str	r3, [sp, #16]
 8005058:	4253      	negs	r3, r2
 800505a:	9307      	str	r3, [sp, #28]
 800505c:	2300      	movs	r3, #0
 800505e:	930a      	str	r3, [sp, #40]	; 0x28
 8005060:	e7bf      	b.n	8004fe2 <_dtoa_r+0x1da>
 8005062:	2300      	movs	r3, #0
 8005064:	9308      	str	r3, [sp, #32]
 8005066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	dc55      	bgt.n	8005118 <_dtoa_r+0x310>
 800506c:	2301      	movs	r3, #1
 800506e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005072:	461a      	mov	r2, r3
 8005074:	9209      	str	r2, [sp, #36]	; 0x24
 8005076:	e00c      	b.n	8005092 <_dtoa_r+0x28a>
 8005078:	2301      	movs	r3, #1
 800507a:	e7f3      	b.n	8005064 <_dtoa_r+0x25c>
 800507c:	2300      	movs	r3, #0
 800507e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005080:	9308      	str	r3, [sp, #32]
 8005082:	9b00      	ldr	r3, [sp, #0]
 8005084:	4413      	add	r3, r2
 8005086:	9302      	str	r3, [sp, #8]
 8005088:	3301      	adds	r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	9303      	str	r3, [sp, #12]
 800508e:	bfb8      	it	lt
 8005090:	2301      	movlt	r3, #1
 8005092:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005094:	2200      	movs	r2, #0
 8005096:	6042      	str	r2, [r0, #4]
 8005098:	2204      	movs	r2, #4
 800509a:	f102 0614 	add.w	r6, r2, #20
 800509e:	429e      	cmp	r6, r3
 80050a0:	6841      	ldr	r1, [r0, #4]
 80050a2:	d93d      	bls.n	8005120 <_dtoa_r+0x318>
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 fed7 	bl	8005e58 <_Balloc>
 80050aa:	9001      	str	r0, [sp, #4]
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d13b      	bne.n	8005128 <_dtoa_r+0x320>
 80050b0:	4b11      	ldr	r3, [pc, #68]	; (80050f8 <_dtoa_r+0x2f0>)
 80050b2:	4602      	mov	r2, r0
 80050b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80050b8:	e6c0      	b.n	8004e3c <_dtoa_r+0x34>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e7df      	b.n	800507e <_dtoa_r+0x276>
 80050be:	bf00      	nop
 80050c0:	636f4361 	.word	0x636f4361
 80050c4:	3fd287a7 	.word	0x3fd287a7
 80050c8:	8b60c8b3 	.word	0x8b60c8b3
 80050cc:	3fc68a28 	.word	0x3fc68a28
 80050d0:	509f79fb 	.word	0x509f79fb
 80050d4:	3fd34413 	.word	0x3fd34413
 80050d8:	0800bd89 	.word	0x0800bd89
 80050dc:	0800bda0 	.word	0x0800bda0
 80050e0:	7ff00000 	.word	0x7ff00000
 80050e4:	0800bd85 	.word	0x0800bd85
 80050e8:	0800bd7c 	.word	0x0800bd7c
 80050ec:	0800bd59 	.word	0x0800bd59
 80050f0:	3ff80000 	.word	0x3ff80000
 80050f4:	0800bef0 	.word	0x0800bef0
 80050f8:	0800bdfb 	.word	0x0800bdfb
 80050fc:	2501      	movs	r5, #1
 80050fe:	2300      	movs	r3, #0
 8005100:	9306      	str	r3, [sp, #24]
 8005102:	9508      	str	r5, [sp, #32]
 8005104:	f04f 33ff 	mov.w	r3, #4294967295
 8005108:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800510c:	2200      	movs	r2, #0
 800510e:	2312      	movs	r3, #18
 8005110:	e7b0      	b.n	8005074 <_dtoa_r+0x26c>
 8005112:	2301      	movs	r3, #1
 8005114:	9308      	str	r3, [sp, #32]
 8005116:	e7f5      	b.n	8005104 <_dtoa_r+0x2fc>
 8005118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800511a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800511e:	e7b8      	b.n	8005092 <_dtoa_r+0x28a>
 8005120:	3101      	adds	r1, #1
 8005122:	6041      	str	r1, [r0, #4]
 8005124:	0052      	lsls	r2, r2, #1
 8005126:	e7b8      	b.n	800509a <_dtoa_r+0x292>
 8005128:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800512a:	9a01      	ldr	r2, [sp, #4]
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	9b03      	ldr	r3, [sp, #12]
 8005130:	2b0e      	cmp	r3, #14
 8005132:	f200 809d 	bhi.w	8005270 <_dtoa_r+0x468>
 8005136:	2d00      	cmp	r5, #0
 8005138:	f000 809a 	beq.w	8005270 <_dtoa_r+0x468>
 800513c:	9b00      	ldr	r3, [sp, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	dd32      	ble.n	80051a8 <_dtoa_r+0x3a0>
 8005142:	4ab7      	ldr	r2, [pc, #732]	; (8005420 <_dtoa_r+0x618>)
 8005144:	f003 030f 	and.w	r3, r3, #15
 8005148:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800514c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005150:	9b00      	ldr	r3, [sp, #0]
 8005152:	05d8      	lsls	r0, r3, #23
 8005154:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005158:	d516      	bpl.n	8005188 <_dtoa_r+0x380>
 800515a:	4bb2      	ldr	r3, [pc, #712]	; (8005424 <_dtoa_r+0x61c>)
 800515c:	ec51 0b19 	vmov	r0, r1, d9
 8005160:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005164:	f7fb fbf2 	bl	800094c <__aeabi_ddiv>
 8005168:	f007 070f 	and.w	r7, r7, #15
 800516c:	4682      	mov	sl, r0
 800516e:	468b      	mov	fp, r1
 8005170:	2503      	movs	r5, #3
 8005172:	4eac      	ldr	r6, [pc, #688]	; (8005424 <_dtoa_r+0x61c>)
 8005174:	b957      	cbnz	r7, 800518c <_dtoa_r+0x384>
 8005176:	4642      	mov	r2, r8
 8005178:	464b      	mov	r3, r9
 800517a:	4650      	mov	r0, sl
 800517c:	4659      	mov	r1, fp
 800517e:	f7fb fbe5 	bl	800094c <__aeabi_ddiv>
 8005182:	4682      	mov	sl, r0
 8005184:	468b      	mov	fp, r1
 8005186:	e028      	b.n	80051da <_dtoa_r+0x3d2>
 8005188:	2502      	movs	r5, #2
 800518a:	e7f2      	b.n	8005172 <_dtoa_r+0x36a>
 800518c:	07f9      	lsls	r1, r7, #31
 800518e:	d508      	bpl.n	80051a2 <_dtoa_r+0x39a>
 8005190:	4640      	mov	r0, r8
 8005192:	4649      	mov	r1, r9
 8005194:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005198:	f7fb faae 	bl	80006f8 <__aeabi_dmul>
 800519c:	3501      	adds	r5, #1
 800519e:	4680      	mov	r8, r0
 80051a0:	4689      	mov	r9, r1
 80051a2:	107f      	asrs	r7, r7, #1
 80051a4:	3608      	adds	r6, #8
 80051a6:	e7e5      	b.n	8005174 <_dtoa_r+0x36c>
 80051a8:	f000 809b 	beq.w	80052e2 <_dtoa_r+0x4da>
 80051ac:	9b00      	ldr	r3, [sp, #0]
 80051ae:	4f9d      	ldr	r7, [pc, #628]	; (8005424 <_dtoa_r+0x61c>)
 80051b0:	425e      	negs	r6, r3
 80051b2:	4b9b      	ldr	r3, [pc, #620]	; (8005420 <_dtoa_r+0x618>)
 80051b4:	f006 020f 	and.w	r2, r6, #15
 80051b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	ec51 0b19 	vmov	r0, r1, d9
 80051c4:	f7fb fa98 	bl	80006f8 <__aeabi_dmul>
 80051c8:	1136      	asrs	r6, r6, #4
 80051ca:	4682      	mov	sl, r0
 80051cc:	468b      	mov	fp, r1
 80051ce:	2300      	movs	r3, #0
 80051d0:	2502      	movs	r5, #2
 80051d2:	2e00      	cmp	r6, #0
 80051d4:	d17a      	bne.n	80052cc <_dtoa_r+0x4c4>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1d3      	bne.n	8005182 <_dtoa_r+0x37a>
 80051da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8082 	beq.w	80052e6 <_dtoa_r+0x4de>
 80051e2:	4b91      	ldr	r3, [pc, #580]	; (8005428 <_dtoa_r+0x620>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	4650      	mov	r0, sl
 80051e8:	4659      	mov	r1, fp
 80051ea:	f7fb fcf7 	bl	8000bdc <__aeabi_dcmplt>
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d079      	beq.n	80052e6 <_dtoa_r+0x4de>
 80051f2:	9b03      	ldr	r3, [sp, #12]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d076      	beq.n	80052e6 <_dtoa_r+0x4de>
 80051f8:	9b02      	ldr	r3, [sp, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	dd36      	ble.n	800526c <_dtoa_r+0x464>
 80051fe:	9b00      	ldr	r3, [sp, #0]
 8005200:	4650      	mov	r0, sl
 8005202:	4659      	mov	r1, fp
 8005204:	1e5f      	subs	r7, r3, #1
 8005206:	2200      	movs	r2, #0
 8005208:	4b88      	ldr	r3, [pc, #544]	; (800542c <_dtoa_r+0x624>)
 800520a:	f7fb fa75 	bl	80006f8 <__aeabi_dmul>
 800520e:	9e02      	ldr	r6, [sp, #8]
 8005210:	4682      	mov	sl, r0
 8005212:	468b      	mov	fp, r1
 8005214:	3501      	adds	r5, #1
 8005216:	4628      	mov	r0, r5
 8005218:	f7fb fa04 	bl	8000624 <__aeabi_i2d>
 800521c:	4652      	mov	r2, sl
 800521e:	465b      	mov	r3, fp
 8005220:	f7fb fa6a 	bl	80006f8 <__aeabi_dmul>
 8005224:	4b82      	ldr	r3, [pc, #520]	; (8005430 <_dtoa_r+0x628>)
 8005226:	2200      	movs	r2, #0
 8005228:	f7fb f8b0 	bl	800038c <__adddf3>
 800522c:	46d0      	mov	r8, sl
 800522e:	46d9      	mov	r9, fp
 8005230:	4682      	mov	sl, r0
 8005232:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005236:	2e00      	cmp	r6, #0
 8005238:	d158      	bne.n	80052ec <_dtoa_r+0x4e4>
 800523a:	4b7e      	ldr	r3, [pc, #504]	; (8005434 <_dtoa_r+0x62c>)
 800523c:	2200      	movs	r2, #0
 800523e:	4640      	mov	r0, r8
 8005240:	4649      	mov	r1, r9
 8005242:	f7fb f8a1 	bl	8000388 <__aeabi_dsub>
 8005246:	4652      	mov	r2, sl
 8005248:	465b      	mov	r3, fp
 800524a:	4680      	mov	r8, r0
 800524c:	4689      	mov	r9, r1
 800524e:	f7fb fce3 	bl	8000c18 <__aeabi_dcmpgt>
 8005252:	2800      	cmp	r0, #0
 8005254:	f040 8295 	bne.w	8005782 <_dtoa_r+0x97a>
 8005258:	4652      	mov	r2, sl
 800525a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800525e:	4640      	mov	r0, r8
 8005260:	4649      	mov	r1, r9
 8005262:	f7fb fcbb 	bl	8000bdc <__aeabi_dcmplt>
 8005266:	2800      	cmp	r0, #0
 8005268:	f040 8289 	bne.w	800577e <_dtoa_r+0x976>
 800526c:	ec5b ab19 	vmov	sl, fp, d9
 8005270:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005272:	2b00      	cmp	r3, #0
 8005274:	f2c0 8148 	blt.w	8005508 <_dtoa_r+0x700>
 8005278:	9a00      	ldr	r2, [sp, #0]
 800527a:	2a0e      	cmp	r2, #14
 800527c:	f300 8144 	bgt.w	8005508 <_dtoa_r+0x700>
 8005280:	4b67      	ldr	r3, [pc, #412]	; (8005420 <_dtoa_r+0x618>)
 8005282:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005286:	e9d3 8900 	ldrd	r8, r9, [r3]
 800528a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800528c:	2b00      	cmp	r3, #0
 800528e:	f280 80d5 	bge.w	800543c <_dtoa_r+0x634>
 8005292:	9b03      	ldr	r3, [sp, #12]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f300 80d1 	bgt.w	800543c <_dtoa_r+0x634>
 800529a:	f040 826f 	bne.w	800577c <_dtoa_r+0x974>
 800529e:	4b65      	ldr	r3, [pc, #404]	; (8005434 <_dtoa_r+0x62c>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	4640      	mov	r0, r8
 80052a4:	4649      	mov	r1, r9
 80052a6:	f7fb fa27 	bl	80006f8 <__aeabi_dmul>
 80052aa:	4652      	mov	r2, sl
 80052ac:	465b      	mov	r3, fp
 80052ae:	f7fb fca9 	bl	8000c04 <__aeabi_dcmpge>
 80052b2:	9e03      	ldr	r6, [sp, #12]
 80052b4:	4637      	mov	r7, r6
 80052b6:	2800      	cmp	r0, #0
 80052b8:	f040 8245 	bne.w	8005746 <_dtoa_r+0x93e>
 80052bc:	9d01      	ldr	r5, [sp, #4]
 80052be:	2331      	movs	r3, #49	; 0x31
 80052c0:	f805 3b01 	strb.w	r3, [r5], #1
 80052c4:	9b00      	ldr	r3, [sp, #0]
 80052c6:	3301      	adds	r3, #1
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	e240      	b.n	800574e <_dtoa_r+0x946>
 80052cc:	07f2      	lsls	r2, r6, #31
 80052ce:	d505      	bpl.n	80052dc <_dtoa_r+0x4d4>
 80052d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d4:	f7fb fa10 	bl	80006f8 <__aeabi_dmul>
 80052d8:	3501      	adds	r5, #1
 80052da:	2301      	movs	r3, #1
 80052dc:	1076      	asrs	r6, r6, #1
 80052de:	3708      	adds	r7, #8
 80052e0:	e777      	b.n	80051d2 <_dtoa_r+0x3ca>
 80052e2:	2502      	movs	r5, #2
 80052e4:	e779      	b.n	80051da <_dtoa_r+0x3d2>
 80052e6:	9f00      	ldr	r7, [sp, #0]
 80052e8:	9e03      	ldr	r6, [sp, #12]
 80052ea:	e794      	b.n	8005216 <_dtoa_r+0x40e>
 80052ec:	9901      	ldr	r1, [sp, #4]
 80052ee:	4b4c      	ldr	r3, [pc, #304]	; (8005420 <_dtoa_r+0x618>)
 80052f0:	4431      	add	r1, r6
 80052f2:	910d      	str	r1, [sp, #52]	; 0x34
 80052f4:	9908      	ldr	r1, [sp, #32]
 80052f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80052fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052fe:	2900      	cmp	r1, #0
 8005300:	d043      	beq.n	800538a <_dtoa_r+0x582>
 8005302:	494d      	ldr	r1, [pc, #308]	; (8005438 <_dtoa_r+0x630>)
 8005304:	2000      	movs	r0, #0
 8005306:	f7fb fb21 	bl	800094c <__aeabi_ddiv>
 800530a:	4652      	mov	r2, sl
 800530c:	465b      	mov	r3, fp
 800530e:	f7fb f83b 	bl	8000388 <__aeabi_dsub>
 8005312:	9d01      	ldr	r5, [sp, #4]
 8005314:	4682      	mov	sl, r0
 8005316:	468b      	mov	fp, r1
 8005318:	4649      	mov	r1, r9
 800531a:	4640      	mov	r0, r8
 800531c:	f7fb fc9c 	bl	8000c58 <__aeabi_d2iz>
 8005320:	4606      	mov	r6, r0
 8005322:	f7fb f97f 	bl	8000624 <__aeabi_i2d>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	4640      	mov	r0, r8
 800532c:	4649      	mov	r1, r9
 800532e:	f7fb f82b 	bl	8000388 <__aeabi_dsub>
 8005332:	3630      	adds	r6, #48	; 0x30
 8005334:	f805 6b01 	strb.w	r6, [r5], #1
 8005338:	4652      	mov	r2, sl
 800533a:	465b      	mov	r3, fp
 800533c:	4680      	mov	r8, r0
 800533e:	4689      	mov	r9, r1
 8005340:	f7fb fc4c 	bl	8000bdc <__aeabi_dcmplt>
 8005344:	2800      	cmp	r0, #0
 8005346:	d163      	bne.n	8005410 <_dtoa_r+0x608>
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	4936      	ldr	r1, [pc, #216]	; (8005428 <_dtoa_r+0x620>)
 800534e:	2000      	movs	r0, #0
 8005350:	f7fb f81a 	bl	8000388 <__aeabi_dsub>
 8005354:	4652      	mov	r2, sl
 8005356:	465b      	mov	r3, fp
 8005358:	f7fb fc40 	bl	8000bdc <__aeabi_dcmplt>
 800535c:	2800      	cmp	r0, #0
 800535e:	f040 80b5 	bne.w	80054cc <_dtoa_r+0x6c4>
 8005362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005364:	429d      	cmp	r5, r3
 8005366:	d081      	beq.n	800526c <_dtoa_r+0x464>
 8005368:	4b30      	ldr	r3, [pc, #192]	; (800542c <_dtoa_r+0x624>)
 800536a:	2200      	movs	r2, #0
 800536c:	4650      	mov	r0, sl
 800536e:	4659      	mov	r1, fp
 8005370:	f7fb f9c2 	bl	80006f8 <__aeabi_dmul>
 8005374:	4b2d      	ldr	r3, [pc, #180]	; (800542c <_dtoa_r+0x624>)
 8005376:	4682      	mov	sl, r0
 8005378:	468b      	mov	fp, r1
 800537a:	4640      	mov	r0, r8
 800537c:	4649      	mov	r1, r9
 800537e:	2200      	movs	r2, #0
 8005380:	f7fb f9ba 	bl	80006f8 <__aeabi_dmul>
 8005384:	4680      	mov	r8, r0
 8005386:	4689      	mov	r9, r1
 8005388:	e7c6      	b.n	8005318 <_dtoa_r+0x510>
 800538a:	4650      	mov	r0, sl
 800538c:	4659      	mov	r1, fp
 800538e:	f7fb f9b3 	bl	80006f8 <__aeabi_dmul>
 8005392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005394:	9d01      	ldr	r5, [sp, #4]
 8005396:	930f      	str	r3, [sp, #60]	; 0x3c
 8005398:	4682      	mov	sl, r0
 800539a:	468b      	mov	fp, r1
 800539c:	4649      	mov	r1, r9
 800539e:	4640      	mov	r0, r8
 80053a0:	f7fb fc5a 	bl	8000c58 <__aeabi_d2iz>
 80053a4:	4606      	mov	r6, r0
 80053a6:	f7fb f93d 	bl	8000624 <__aeabi_i2d>
 80053aa:	3630      	adds	r6, #48	; 0x30
 80053ac:	4602      	mov	r2, r0
 80053ae:	460b      	mov	r3, r1
 80053b0:	4640      	mov	r0, r8
 80053b2:	4649      	mov	r1, r9
 80053b4:	f7fa ffe8 	bl	8000388 <__aeabi_dsub>
 80053b8:	f805 6b01 	strb.w	r6, [r5], #1
 80053bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053be:	429d      	cmp	r5, r3
 80053c0:	4680      	mov	r8, r0
 80053c2:	4689      	mov	r9, r1
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	d124      	bne.n	8005414 <_dtoa_r+0x60c>
 80053ca:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <_dtoa_r+0x630>)
 80053cc:	4650      	mov	r0, sl
 80053ce:	4659      	mov	r1, fp
 80053d0:	f7fa ffdc 	bl	800038c <__adddf3>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4640      	mov	r0, r8
 80053da:	4649      	mov	r1, r9
 80053dc:	f7fb fc1c 	bl	8000c18 <__aeabi_dcmpgt>
 80053e0:	2800      	cmp	r0, #0
 80053e2:	d173      	bne.n	80054cc <_dtoa_r+0x6c4>
 80053e4:	4652      	mov	r2, sl
 80053e6:	465b      	mov	r3, fp
 80053e8:	4913      	ldr	r1, [pc, #76]	; (8005438 <_dtoa_r+0x630>)
 80053ea:	2000      	movs	r0, #0
 80053ec:	f7fa ffcc 	bl	8000388 <__aeabi_dsub>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4640      	mov	r0, r8
 80053f6:	4649      	mov	r1, r9
 80053f8:	f7fb fbf0 	bl	8000bdc <__aeabi_dcmplt>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	f43f af35 	beq.w	800526c <_dtoa_r+0x464>
 8005402:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005404:	1e6b      	subs	r3, r5, #1
 8005406:	930f      	str	r3, [sp, #60]	; 0x3c
 8005408:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800540c:	2b30      	cmp	r3, #48	; 0x30
 800540e:	d0f8      	beq.n	8005402 <_dtoa_r+0x5fa>
 8005410:	9700      	str	r7, [sp, #0]
 8005412:	e049      	b.n	80054a8 <_dtoa_r+0x6a0>
 8005414:	4b05      	ldr	r3, [pc, #20]	; (800542c <_dtoa_r+0x624>)
 8005416:	f7fb f96f 	bl	80006f8 <__aeabi_dmul>
 800541a:	4680      	mov	r8, r0
 800541c:	4689      	mov	r9, r1
 800541e:	e7bd      	b.n	800539c <_dtoa_r+0x594>
 8005420:	0800bef0 	.word	0x0800bef0
 8005424:	0800bec8 	.word	0x0800bec8
 8005428:	3ff00000 	.word	0x3ff00000
 800542c:	40240000 	.word	0x40240000
 8005430:	401c0000 	.word	0x401c0000
 8005434:	40140000 	.word	0x40140000
 8005438:	3fe00000 	.word	0x3fe00000
 800543c:	9d01      	ldr	r5, [sp, #4]
 800543e:	4656      	mov	r6, sl
 8005440:	465f      	mov	r7, fp
 8005442:	4642      	mov	r2, r8
 8005444:	464b      	mov	r3, r9
 8005446:	4630      	mov	r0, r6
 8005448:	4639      	mov	r1, r7
 800544a:	f7fb fa7f 	bl	800094c <__aeabi_ddiv>
 800544e:	f7fb fc03 	bl	8000c58 <__aeabi_d2iz>
 8005452:	4682      	mov	sl, r0
 8005454:	f7fb f8e6 	bl	8000624 <__aeabi_i2d>
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	f7fb f94c 	bl	80006f8 <__aeabi_dmul>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4630      	mov	r0, r6
 8005466:	4639      	mov	r1, r7
 8005468:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800546c:	f7fa ff8c 	bl	8000388 <__aeabi_dsub>
 8005470:	f805 6b01 	strb.w	r6, [r5], #1
 8005474:	9e01      	ldr	r6, [sp, #4]
 8005476:	9f03      	ldr	r7, [sp, #12]
 8005478:	1bae      	subs	r6, r5, r6
 800547a:	42b7      	cmp	r7, r6
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	d135      	bne.n	80054ee <_dtoa_r+0x6e6>
 8005482:	f7fa ff83 	bl	800038c <__adddf3>
 8005486:	4642      	mov	r2, r8
 8005488:	464b      	mov	r3, r9
 800548a:	4606      	mov	r6, r0
 800548c:	460f      	mov	r7, r1
 800548e:	f7fb fbc3 	bl	8000c18 <__aeabi_dcmpgt>
 8005492:	b9d0      	cbnz	r0, 80054ca <_dtoa_r+0x6c2>
 8005494:	4642      	mov	r2, r8
 8005496:	464b      	mov	r3, r9
 8005498:	4630      	mov	r0, r6
 800549a:	4639      	mov	r1, r7
 800549c:	f7fb fb94 	bl	8000bc8 <__aeabi_dcmpeq>
 80054a0:	b110      	cbz	r0, 80054a8 <_dtoa_r+0x6a0>
 80054a2:	f01a 0f01 	tst.w	sl, #1
 80054a6:	d110      	bne.n	80054ca <_dtoa_r+0x6c2>
 80054a8:	4620      	mov	r0, r4
 80054aa:	ee18 1a10 	vmov	r1, s16
 80054ae:	f000 fd13 	bl	8005ed8 <_Bfree>
 80054b2:	2300      	movs	r3, #0
 80054b4:	9800      	ldr	r0, [sp, #0]
 80054b6:	702b      	strb	r3, [r5, #0]
 80054b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80054ba:	3001      	adds	r0, #1
 80054bc:	6018      	str	r0, [r3, #0]
 80054be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f43f acf1 	beq.w	8004ea8 <_dtoa_r+0xa0>
 80054c6:	601d      	str	r5, [r3, #0]
 80054c8:	e4ee      	b.n	8004ea8 <_dtoa_r+0xa0>
 80054ca:	9f00      	ldr	r7, [sp, #0]
 80054cc:	462b      	mov	r3, r5
 80054ce:	461d      	mov	r5, r3
 80054d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054d4:	2a39      	cmp	r2, #57	; 0x39
 80054d6:	d106      	bne.n	80054e6 <_dtoa_r+0x6de>
 80054d8:	9a01      	ldr	r2, [sp, #4]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d1f7      	bne.n	80054ce <_dtoa_r+0x6c6>
 80054de:	9901      	ldr	r1, [sp, #4]
 80054e0:	2230      	movs	r2, #48	; 0x30
 80054e2:	3701      	adds	r7, #1
 80054e4:	700a      	strb	r2, [r1, #0]
 80054e6:	781a      	ldrb	r2, [r3, #0]
 80054e8:	3201      	adds	r2, #1
 80054ea:	701a      	strb	r2, [r3, #0]
 80054ec:	e790      	b.n	8005410 <_dtoa_r+0x608>
 80054ee:	4ba6      	ldr	r3, [pc, #664]	; (8005788 <_dtoa_r+0x980>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	f7fb f901 	bl	80006f8 <__aeabi_dmul>
 80054f6:	2200      	movs	r2, #0
 80054f8:	2300      	movs	r3, #0
 80054fa:	4606      	mov	r6, r0
 80054fc:	460f      	mov	r7, r1
 80054fe:	f7fb fb63 	bl	8000bc8 <__aeabi_dcmpeq>
 8005502:	2800      	cmp	r0, #0
 8005504:	d09d      	beq.n	8005442 <_dtoa_r+0x63a>
 8005506:	e7cf      	b.n	80054a8 <_dtoa_r+0x6a0>
 8005508:	9a08      	ldr	r2, [sp, #32]
 800550a:	2a00      	cmp	r2, #0
 800550c:	f000 80d7 	beq.w	80056be <_dtoa_r+0x8b6>
 8005510:	9a06      	ldr	r2, [sp, #24]
 8005512:	2a01      	cmp	r2, #1
 8005514:	f300 80ba 	bgt.w	800568c <_dtoa_r+0x884>
 8005518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800551a:	2a00      	cmp	r2, #0
 800551c:	f000 80b2 	beq.w	8005684 <_dtoa_r+0x87c>
 8005520:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005524:	9e07      	ldr	r6, [sp, #28]
 8005526:	9d04      	ldr	r5, [sp, #16]
 8005528:	9a04      	ldr	r2, [sp, #16]
 800552a:	441a      	add	r2, r3
 800552c:	9204      	str	r2, [sp, #16]
 800552e:	9a05      	ldr	r2, [sp, #20]
 8005530:	2101      	movs	r1, #1
 8005532:	441a      	add	r2, r3
 8005534:	4620      	mov	r0, r4
 8005536:	9205      	str	r2, [sp, #20]
 8005538:	f000 fd86 	bl	8006048 <__i2b>
 800553c:	4607      	mov	r7, r0
 800553e:	2d00      	cmp	r5, #0
 8005540:	dd0c      	ble.n	800555c <_dtoa_r+0x754>
 8005542:	9b05      	ldr	r3, [sp, #20]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dd09      	ble.n	800555c <_dtoa_r+0x754>
 8005548:	42ab      	cmp	r3, r5
 800554a:	9a04      	ldr	r2, [sp, #16]
 800554c:	bfa8      	it	ge
 800554e:	462b      	movge	r3, r5
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	9204      	str	r2, [sp, #16]
 8005554:	9a05      	ldr	r2, [sp, #20]
 8005556:	1aed      	subs	r5, r5, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	9305      	str	r3, [sp, #20]
 800555c:	9b07      	ldr	r3, [sp, #28]
 800555e:	b31b      	cbz	r3, 80055a8 <_dtoa_r+0x7a0>
 8005560:	9b08      	ldr	r3, [sp, #32]
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80af 	beq.w	80056c6 <_dtoa_r+0x8be>
 8005568:	2e00      	cmp	r6, #0
 800556a:	dd13      	ble.n	8005594 <_dtoa_r+0x78c>
 800556c:	4639      	mov	r1, r7
 800556e:	4632      	mov	r2, r6
 8005570:	4620      	mov	r0, r4
 8005572:	f000 fe29 	bl	80061c8 <__pow5mult>
 8005576:	ee18 2a10 	vmov	r2, s16
 800557a:	4601      	mov	r1, r0
 800557c:	4607      	mov	r7, r0
 800557e:	4620      	mov	r0, r4
 8005580:	f000 fd78 	bl	8006074 <__multiply>
 8005584:	ee18 1a10 	vmov	r1, s16
 8005588:	4680      	mov	r8, r0
 800558a:	4620      	mov	r0, r4
 800558c:	f000 fca4 	bl	8005ed8 <_Bfree>
 8005590:	ee08 8a10 	vmov	s16, r8
 8005594:	9b07      	ldr	r3, [sp, #28]
 8005596:	1b9a      	subs	r2, r3, r6
 8005598:	d006      	beq.n	80055a8 <_dtoa_r+0x7a0>
 800559a:	ee18 1a10 	vmov	r1, s16
 800559e:	4620      	mov	r0, r4
 80055a0:	f000 fe12 	bl	80061c8 <__pow5mult>
 80055a4:	ee08 0a10 	vmov	s16, r0
 80055a8:	2101      	movs	r1, #1
 80055aa:	4620      	mov	r0, r4
 80055ac:	f000 fd4c 	bl	8006048 <__i2b>
 80055b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	4606      	mov	r6, r0
 80055b6:	f340 8088 	ble.w	80056ca <_dtoa_r+0x8c2>
 80055ba:	461a      	mov	r2, r3
 80055bc:	4601      	mov	r1, r0
 80055be:	4620      	mov	r0, r4
 80055c0:	f000 fe02 	bl	80061c8 <__pow5mult>
 80055c4:	9b06      	ldr	r3, [sp, #24]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	4606      	mov	r6, r0
 80055ca:	f340 8081 	ble.w	80056d0 <_dtoa_r+0x8c8>
 80055ce:	f04f 0800 	mov.w	r8, #0
 80055d2:	6933      	ldr	r3, [r6, #16]
 80055d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80055d8:	6918      	ldr	r0, [r3, #16]
 80055da:	f000 fce5 	bl	8005fa8 <__hi0bits>
 80055de:	f1c0 0020 	rsb	r0, r0, #32
 80055e2:	9b05      	ldr	r3, [sp, #20]
 80055e4:	4418      	add	r0, r3
 80055e6:	f010 001f 	ands.w	r0, r0, #31
 80055ea:	f000 8092 	beq.w	8005712 <_dtoa_r+0x90a>
 80055ee:	f1c0 0320 	rsb	r3, r0, #32
 80055f2:	2b04      	cmp	r3, #4
 80055f4:	f340 808a 	ble.w	800570c <_dtoa_r+0x904>
 80055f8:	f1c0 001c 	rsb	r0, r0, #28
 80055fc:	9b04      	ldr	r3, [sp, #16]
 80055fe:	4403      	add	r3, r0
 8005600:	9304      	str	r3, [sp, #16]
 8005602:	9b05      	ldr	r3, [sp, #20]
 8005604:	4403      	add	r3, r0
 8005606:	4405      	add	r5, r0
 8005608:	9305      	str	r3, [sp, #20]
 800560a:	9b04      	ldr	r3, [sp, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	dd07      	ble.n	8005620 <_dtoa_r+0x818>
 8005610:	ee18 1a10 	vmov	r1, s16
 8005614:	461a      	mov	r2, r3
 8005616:	4620      	mov	r0, r4
 8005618:	f000 fe30 	bl	800627c <__lshift>
 800561c:	ee08 0a10 	vmov	s16, r0
 8005620:	9b05      	ldr	r3, [sp, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	dd05      	ble.n	8005632 <_dtoa_r+0x82a>
 8005626:	4631      	mov	r1, r6
 8005628:	461a      	mov	r2, r3
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fe26 	bl	800627c <__lshift>
 8005630:	4606      	mov	r6, r0
 8005632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005634:	2b00      	cmp	r3, #0
 8005636:	d06e      	beq.n	8005716 <_dtoa_r+0x90e>
 8005638:	ee18 0a10 	vmov	r0, s16
 800563c:	4631      	mov	r1, r6
 800563e:	f000 fe8d 	bl	800635c <__mcmp>
 8005642:	2800      	cmp	r0, #0
 8005644:	da67      	bge.n	8005716 <_dtoa_r+0x90e>
 8005646:	9b00      	ldr	r3, [sp, #0]
 8005648:	3b01      	subs	r3, #1
 800564a:	ee18 1a10 	vmov	r1, s16
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	220a      	movs	r2, #10
 8005652:	2300      	movs	r3, #0
 8005654:	4620      	mov	r0, r4
 8005656:	f000 fc61 	bl	8005f1c <__multadd>
 800565a:	9b08      	ldr	r3, [sp, #32]
 800565c:	ee08 0a10 	vmov	s16, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 81b1 	beq.w	80059c8 <_dtoa_r+0xbc0>
 8005666:	2300      	movs	r3, #0
 8005668:	4639      	mov	r1, r7
 800566a:	220a      	movs	r2, #10
 800566c:	4620      	mov	r0, r4
 800566e:	f000 fc55 	bl	8005f1c <__multadd>
 8005672:	9b02      	ldr	r3, [sp, #8]
 8005674:	2b00      	cmp	r3, #0
 8005676:	4607      	mov	r7, r0
 8005678:	f300 808e 	bgt.w	8005798 <_dtoa_r+0x990>
 800567c:	9b06      	ldr	r3, [sp, #24]
 800567e:	2b02      	cmp	r3, #2
 8005680:	dc51      	bgt.n	8005726 <_dtoa_r+0x91e>
 8005682:	e089      	b.n	8005798 <_dtoa_r+0x990>
 8005684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005686:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800568a:	e74b      	b.n	8005524 <_dtoa_r+0x71c>
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	1e5e      	subs	r6, r3, #1
 8005690:	9b07      	ldr	r3, [sp, #28]
 8005692:	42b3      	cmp	r3, r6
 8005694:	bfbf      	itttt	lt
 8005696:	9b07      	ldrlt	r3, [sp, #28]
 8005698:	9607      	strlt	r6, [sp, #28]
 800569a:	1af2      	sublt	r2, r6, r3
 800569c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800569e:	bfb6      	itet	lt
 80056a0:	189b      	addlt	r3, r3, r2
 80056a2:	1b9e      	subge	r6, r3, r6
 80056a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80056a6:	9b03      	ldr	r3, [sp, #12]
 80056a8:	bfb8      	it	lt
 80056aa:	2600      	movlt	r6, #0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	bfb7      	itett	lt
 80056b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80056b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80056b8:	1a9d      	sublt	r5, r3, r2
 80056ba:	2300      	movlt	r3, #0
 80056bc:	e734      	b.n	8005528 <_dtoa_r+0x720>
 80056be:	9e07      	ldr	r6, [sp, #28]
 80056c0:	9d04      	ldr	r5, [sp, #16]
 80056c2:	9f08      	ldr	r7, [sp, #32]
 80056c4:	e73b      	b.n	800553e <_dtoa_r+0x736>
 80056c6:	9a07      	ldr	r2, [sp, #28]
 80056c8:	e767      	b.n	800559a <_dtoa_r+0x792>
 80056ca:	9b06      	ldr	r3, [sp, #24]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	dc18      	bgt.n	8005702 <_dtoa_r+0x8fa>
 80056d0:	f1ba 0f00 	cmp.w	sl, #0
 80056d4:	d115      	bne.n	8005702 <_dtoa_r+0x8fa>
 80056d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056da:	b993      	cbnz	r3, 8005702 <_dtoa_r+0x8fa>
 80056dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056e0:	0d1b      	lsrs	r3, r3, #20
 80056e2:	051b      	lsls	r3, r3, #20
 80056e4:	b183      	cbz	r3, 8005708 <_dtoa_r+0x900>
 80056e6:	9b04      	ldr	r3, [sp, #16]
 80056e8:	3301      	adds	r3, #1
 80056ea:	9304      	str	r3, [sp, #16]
 80056ec:	9b05      	ldr	r3, [sp, #20]
 80056ee:	3301      	adds	r3, #1
 80056f0:	9305      	str	r3, [sp, #20]
 80056f2:	f04f 0801 	mov.w	r8, #1
 80056f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f47f af6a 	bne.w	80055d2 <_dtoa_r+0x7ca>
 80056fe:	2001      	movs	r0, #1
 8005700:	e76f      	b.n	80055e2 <_dtoa_r+0x7da>
 8005702:	f04f 0800 	mov.w	r8, #0
 8005706:	e7f6      	b.n	80056f6 <_dtoa_r+0x8ee>
 8005708:	4698      	mov	r8, r3
 800570a:	e7f4      	b.n	80056f6 <_dtoa_r+0x8ee>
 800570c:	f43f af7d 	beq.w	800560a <_dtoa_r+0x802>
 8005710:	4618      	mov	r0, r3
 8005712:	301c      	adds	r0, #28
 8005714:	e772      	b.n	80055fc <_dtoa_r+0x7f4>
 8005716:	9b03      	ldr	r3, [sp, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	dc37      	bgt.n	800578c <_dtoa_r+0x984>
 800571c:	9b06      	ldr	r3, [sp, #24]
 800571e:	2b02      	cmp	r3, #2
 8005720:	dd34      	ble.n	800578c <_dtoa_r+0x984>
 8005722:	9b03      	ldr	r3, [sp, #12]
 8005724:	9302      	str	r3, [sp, #8]
 8005726:	9b02      	ldr	r3, [sp, #8]
 8005728:	b96b      	cbnz	r3, 8005746 <_dtoa_r+0x93e>
 800572a:	4631      	mov	r1, r6
 800572c:	2205      	movs	r2, #5
 800572e:	4620      	mov	r0, r4
 8005730:	f000 fbf4 	bl	8005f1c <__multadd>
 8005734:	4601      	mov	r1, r0
 8005736:	4606      	mov	r6, r0
 8005738:	ee18 0a10 	vmov	r0, s16
 800573c:	f000 fe0e 	bl	800635c <__mcmp>
 8005740:	2800      	cmp	r0, #0
 8005742:	f73f adbb 	bgt.w	80052bc <_dtoa_r+0x4b4>
 8005746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005748:	9d01      	ldr	r5, [sp, #4]
 800574a:	43db      	mvns	r3, r3
 800574c:	9300      	str	r3, [sp, #0]
 800574e:	f04f 0800 	mov.w	r8, #0
 8005752:	4631      	mov	r1, r6
 8005754:	4620      	mov	r0, r4
 8005756:	f000 fbbf 	bl	8005ed8 <_Bfree>
 800575a:	2f00      	cmp	r7, #0
 800575c:	f43f aea4 	beq.w	80054a8 <_dtoa_r+0x6a0>
 8005760:	f1b8 0f00 	cmp.w	r8, #0
 8005764:	d005      	beq.n	8005772 <_dtoa_r+0x96a>
 8005766:	45b8      	cmp	r8, r7
 8005768:	d003      	beq.n	8005772 <_dtoa_r+0x96a>
 800576a:	4641      	mov	r1, r8
 800576c:	4620      	mov	r0, r4
 800576e:	f000 fbb3 	bl	8005ed8 <_Bfree>
 8005772:	4639      	mov	r1, r7
 8005774:	4620      	mov	r0, r4
 8005776:	f000 fbaf 	bl	8005ed8 <_Bfree>
 800577a:	e695      	b.n	80054a8 <_dtoa_r+0x6a0>
 800577c:	2600      	movs	r6, #0
 800577e:	4637      	mov	r7, r6
 8005780:	e7e1      	b.n	8005746 <_dtoa_r+0x93e>
 8005782:	9700      	str	r7, [sp, #0]
 8005784:	4637      	mov	r7, r6
 8005786:	e599      	b.n	80052bc <_dtoa_r+0x4b4>
 8005788:	40240000 	.word	0x40240000
 800578c:	9b08      	ldr	r3, [sp, #32]
 800578e:	2b00      	cmp	r3, #0
 8005790:	f000 80ca 	beq.w	8005928 <_dtoa_r+0xb20>
 8005794:	9b03      	ldr	r3, [sp, #12]
 8005796:	9302      	str	r3, [sp, #8]
 8005798:	2d00      	cmp	r5, #0
 800579a:	dd05      	ble.n	80057a8 <_dtoa_r+0x9a0>
 800579c:	4639      	mov	r1, r7
 800579e:	462a      	mov	r2, r5
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 fd6b 	bl	800627c <__lshift>
 80057a6:	4607      	mov	r7, r0
 80057a8:	f1b8 0f00 	cmp.w	r8, #0
 80057ac:	d05b      	beq.n	8005866 <_dtoa_r+0xa5e>
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	4620      	mov	r0, r4
 80057b2:	f000 fb51 	bl	8005e58 <_Balloc>
 80057b6:	4605      	mov	r5, r0
 80057b8:	b928      	cbnz	r0, 80057c6 <_dtoa_r+0x9be>
 80057ba:	4b87      	ldr	r3, [pc, #540]	; (80059d8 <_dtoa_r+0xbd0>)
 80057bc:	4602      	mov	r2, r0
 80057be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80057c2:	f7ff bb3b 	b.w	8004e3c <_dtoa_r+0x34>
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	3202      	adds	r2, #2
 80057ca:	0092      	lsls	r2, r2, #2
 80057cc:	f107 010c 	add.w	r1, r7, #12
 80057d0:	300c      	adds	r0, #12
 80057d2:	f000 fb33 	bl	8005e3c <memcpy>
 80057d6:	2201      	movs	r2, #1
 80057d8:	4629      	mov	r1, r5
 80057da:	4620      	mov	r0, r4
 80057dc:	f000 fd4e 	bl	800627c <__lshift>
 80057e0:	9b01      	ldr	r3, [sp, #4]
 80057e2:	f103 0901 	add.w	r9, r3, #1
 80057e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80057ea:	4413      	add	r3, r2
 80057ec:	9305      	str	r3, [sp, #20]
 80057ee:	f00a 0301 	and.w	r3, sl, #1
 80057f2:	46b8      	mov	r8, r7
 80057f4:	9304      	str	r3, [sp, #16]
 80057f6:	4607      	mov	r7, r0
 80057f8:	4631      	mov	r1, r6
 80057fa:	ee18 0a10 	vmov	r0, s16
 80057fe:	f7ff fa75 	bl	8004cec <quorem>
 8005802:	4641      	mov	r1, r8
 8005804:	9002      	str	r0, [sp, #8]
 8005806:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800580a:	ee18 0a10 	vmov	r0, s16
 800580e:	f000 fda5 	bl	800635c <__mcmp>
 8005812:	463a      	mov	r2, r7
 8005814:	9003      	str	r0, [sp, #12]
 8005816:	4631      	mov	r1, r6
 8005818:	4620      	mov	r0, r4
 800581a:	f000 fdbb 	bl	8006394 <__mdiff>
 800581e:	68c2      	ldr	r2, [r0, #12]
 8005820:	f109 3bff 	add.w	fp, r9, #4294967295
 8005824:	4605      	mov	r5, r0
 8005826:	bb02      	cbnz	r2, 800586a <_dtoa_r+0xa62>
 8005828:	4601      	mov	r1, r0
 800582a:	ee18 0a10 	vmov	r0, s16
 800582e:	f000 fd95 	bl	800635c <__mcmp>
 8005832:	4602      	mov	r2, r0
 8005834:	4629      	mov	r1, r5
 8005836:	4620      	mov	r0, r4
 8005838:	9207      	str	r2, [sp, #28]
 800583a:	f000 fb4d 	bl	8005ed8 <_Bfree>
 800583e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005842:	ea43 0102 	orr.w	r1, r3, r2
 8005846:	9b04      	ldr	r3, [sp, #16]
 8005848:	430b      	orrs	r3, r1
 800584a:	464d      	mov	r5, r9
 800584c:	d10f      	bne.n	800586e <_dtoa_r+0xa66>
 800584e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005852:	d02a      	beq.n	80058aa <_dtoa_r+0xaa2>
 8005854:	9b03      	ldr	r3, [sp, #12]
 8005856:	2b00      	cmp	r3, #0
 8005858:	dd02      	ble.n	8005860 <_dtoa_r+0xa58>
 800585a:	9b02      	ldr	r3, [sp, #8]
 800585c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005860:	f88b a000 	strb.w	sl, [fp]
 8005864:	e775      	b.n	8005752 <_dtoa_r+0x94a>
 8005866:	4638      	mov	r0, r7
 8005868:	e7ba      	b.n	80057e0 <_dtoa_r+0x9d8>
 800586a:	2201      	movs	r2, #1
 800586c:	e7e2      	b.n	8005834 <_dtoa_r+0xa2c>
 800586e:	9b03      	ldr	r3, [sp, #12]
 8005870:	2b00      	cmp	r3, #0
 8005872:	db04      	blt.n	800587e <_dtoa_r+0xa76>
 8005874:	9906      	ldr	r1, [sp, #24]
 8005876:	430b      	orrs	r3, r1
 8005878:	9904      	ldr	r1, [sp, #16]
 800587a:	430b      	orrs	r3, r1
 800587c:	d122      	bne.n	80058c4 <_dtoa_r+0xabc>
 800587e:	2a00      	cmp	r2, #0
 8005880:	ddee      	ble.n	8005860 <_dtoa_r+0xa58>
 8005882:	ee18 1a10 	vmov	r1, s16
 8005886:	2201      	movs	r2, #1
 8005888:	4620      	mov	r0, r4
 800588a:	f000 fcf7 	bl	800627c <__lshift>
 800588e:	4631      	mov	r1, r6
 8005890:	ee08 0a10 	vmov	s16, r0
 8005894:	f000 fd62 	bl	800635c <__mcmp>
 8005898:	2800      	cmp	r0, #0
 800589a:	dc03      	bgt.n	80058a4 <_dtoa_r+0xa9c>
 800589c:	d1e0      	bne.n	8005860 <_dtoa_r+0xa58>
 800589e:	f01a 0f01 	tst.w	sl, #1
 80058a2:	d0dd      	beq.n	8005860 <_dtoa_r+0xa58>
 80058a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058a8:	d1d7      	bne.n	800585a <_dtoa_r+0xa52>
 80058aa:	2339      	movs	r3, #57	; 0x39
 80058ac:	f88b 3000 	strb.w	r3, [fp]
 80058b0:	462b      	mov	r3, r5
 80058b2:	461d      	mov	r5, r3
 80058b4:	3b01      	subs	r3, #1
 80058b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80058ba:	2a39      	cmp	r2, #57	; 0x39
 80058bc:	d071      	beq.n	80059a2 <_dtoa_r+0xb9a>
 80058be:	3201      	adds	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e746      	b.n	8005752 <_dtoa_r+0x94a>
 80058c4:	2a00      	cmp	r2, #0
 80058c6:	dd07      	ble.n	80058d8 <_dtoa_r+0xad0>
 80058c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80058cc:	d0ed      	beq.n	80058aa <_dtoa_r+0xaa2>
 80058ce:	f10a 0301 	add.w	r3, sl, #1
 80058d2:	f88b 3000 	strb.w	r3, [fp]
 80058d6:	e73c      	b.n	8005752 <_dtoa_r+0x94a>
 80058d8:	9b05      	ldr	r3, [sp, #20]
 80058da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80058de:	4599      	cmp	r9, r3
 80058e0:	d047      	beq.n	8005972 <_dtoa_r+0xb6a>
 80058e2:	ee18 1a10 	vmov	r1, s16
 80058e6:	2300      	movs	r3, #0
 80058e8:	220a      	movs	r2, #10
 80058ea:	4620      	mov	r0, r4
 80058ec:	f000 fb16 	bl	8005f1c <__multadd>
 80058f0:	45b8      	cmp	r8, r7
 80058f2:	ee08 0a10 	vmov	s16, r0
 80058f6:	f04f 0300 	mov.w	r3, #0
 80058fa:	f04f 020a 	mov.w	r2, #10
 80058fe:	4641      	mov	r1, r8
 8005900:	4620      	mov	r0, r4
 8005902:	d106      	bne.n	8005912 <_dtoa_r+0xb0a>
 8005904:	f000 fb0a 	bl	8005f1c <__multadd>
 8005908:	4680      	mov	r8, r0
 800590a:	4607      	mov	r7, r0
 800590c:	f109 0901 	add.w	r9, r9, #1
 8005910:	e772      	b.n	80057f8 <_dtoa_r+0x9f0>
 8005912:	f000 fb03 	bl	8005f1c <__multadd>
 8005916:	4639      	mov	r1, r7
 8005918:	4680      	mov	r8, r0
 800591a:	2300      	movs	r3, #0
 800591c:	220a      	movs	r2, #10
 800591e:	4620      	mov	r0, r4
 8005920:	f000 fafc 	bl	8005f1c <__multadd>
 8005924:	4607      	mov	r7, r0
 8005926:	e7f1      	b.n	800590c <_dtoa_r+0xb04>
 8005928:	9b03      	ldr	r3, [sp, #12]
 800592a:	9302      	str	r3, [sp, #8]
 800592c:	9d01      	ldr	r5, [sp, #4]
 800592e:	ee18 0a10 	vmov	r0, s16
 8005932:	4631      	mov	r1, r6
 8005934:	f7ff f9da 	bl	8004cec <quorem>
 8005938:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800593c:	9b01      	ldr	r3, [sp, #4]
 800593e:	f805 ab01 	strb.w	sl, [r5], #1
 8005942:	1aea      	subs	r2, r5, r3
 8005944:	9b02      	ldr	r3, [sp, #8]
 8005946:	4293      	cmp	r3, r2
 8005948:	dd09      	ble.n	800595e <_dtoa_r+0xb56>
 800594a:	ee18 1a10 	vmov	r1, s16
 800594e:	2300      	movs	r3, #0
 8005950:	220a      	movs	r2, #10
 8005952:	4620      	mov	r0, r4
 8005954:	f000 fae2 	bl	8005f1c <__multadd>
 8005958:	ee08 0a10 	vmov	s16, r0
 800595c:	e7e7      	b.n	800592e <_dtoa_r+0xb26>
 800595e:	9b02      	ldr	r3, [sp, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	bfc8      	it	gt
 8005964:	461d      	movgt	r5, r3
 8005966:	9b01      	ldr	r3, [sp, #4]
 8005968:	bfd8      	it	le
 800596a:	2501      	movle	r5, #1
 800596c:	441d      	add	r5, r3
 800596e:	f04f 0800 	mov.w	r8, #0
 8005972:	ee18 1a10 	vmov	r1, s16
 8005976:	2201      	movs	r2, #1
 8005978:	4620      	mov	r0, r4
 800597a:	f000 fc7f 	bl	800627c <__lshift>
 800597e:	4631      	mov	r1, r6
 8005980:	ee08 0a10 	vmov	s16, r0
 8005984:	f000 fcea 	bl	800635c <__mcmp>
 8005988:	2800      	cmp	r0, #0
 800598a:	dc91      	bgt.n	80058b0 <_dtoa_r+0xaa8>
 800598c:	d102      	bne.n	8005994 <_dtoa_r+0xb8c>
 800598e:	f01a 0f01 	tst.w	sl, #1
 8005992:	d18d      	bne.n	80058b0 <_dtoa_r+0xaa8>
 8005994:	462b      	mov	r3, r5
 8005996:	461d      	mov	r5, r3
 8005998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800599c:	2a30      	cmp	r2, #48	; 0x30
 800599e:	d0fa      	beq.n	8005996 <_dtoa_r+0xb8e>
 80059a0:	e6d7      	b.n	8005752 <_dtoa_r+0x94a>
 80059a2:	9a01      	ldr	r2, [sp, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d184      	bne.n	80058b2 <_dtoa_r+0xaaa>
 80059a8:	9b00      	ldr	r3, [sp, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	2331      	movs	r3, #49	; 0x31
 80059b0:	7013      	strb	r3, [r2, #0]
 80059b2:	e6ce      	b.n	8005752 <_dtoa_r+0x94a>
 80059b4:	4b09      	ldr	r3, [pc, #36]	; (80059dc <_dtoa_r+0xbd4>)
 80059b6:	f7ff ba95 	b.w	8004ee4 <_dtoa_r+0xdc>
 80059ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f47f aa6e 	bne.w	8004e9e <_dtoa_r+0x96>
 80059c2:	4b07      	ldr	r3, [pc, #28]	; (80059e0 <_dtoa_r+0xbd8>)
 80059c4:	f7ff ba8e 	b.w	8004ee4 <_dtoa_r+0xdc>
 80059c8:	9b02      	ldr	r3, [sp, #8]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	dcae      	bgt.n	800592c <_dtoa_r+0xb24>
 80059ce:	9b06      	ldr	r3, [sp, #24]
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	f73f aea8 	bgt.w	8005726 <_dtoa_r+0x91e>
 80059d6:	e7a9      	b.n	800592c <_dtoa_r+0xb24>
 80059d8:	0800bdfb 	.word	0x0800bdfb
 80059dc:	0800bd58 	.word	0x0800bd58
 80059e0:	0800bd7c 	.word	0x0800bd7c

080059e4 <__sflush_r>:
 80059e4:	898a      	ldrh	r2, [r1, #12]
 80059e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059ea:	4605      	mov	r5, r0
 80059ec:	0710      	lsls	r0, r2, #28
 80059ee:	460c      	mov	r4, r1
 80059f0:	d458      	bmi.n	8005aa4 <__sflush_r+0xc0>
 80059f2:	684b      	ldr	r3, [r1, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	dc05      	bgt.n	8005a04 <__sflush_r+0x20>
 80059f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	dc02      	bgt.n	8005a04 <__sflush_r+0x20>
 80059fe:	2000      	movs	r0, #0
 8005a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a06:	2e00      	cmp	r6, #0
 8005a08:	d0f9      	beq.n	80059fe <__sflush_r+0x1a>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005a10:	682f      	ldr	r7, [r5, #0]
 8005a12:	602b      	str	r3, [r5, #0]
 8005a14:	d032      	beq.n	8005a7c <__sflush_r+0x98>
 8005a16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	075a      	lsls	r2, r3, #29
 8005a1c:	d505      	bpl.n	8005a2a <__sflush_r+0x46>
 8005a1e:	6863      	ldr	r3, [r4, #4]
 8005a20:	1ac0      	subs	r0, r0, r3
 8005a22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a24:	b10b      	cbz	r3, 8005a2a <__sflush_r+0x46>
 8005a26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005a28:	1ac0      	subs	r0, r0, r3
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005a30:	6a21      	ldr	r1, [r4, #32]
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b0      	blx	r6
 8005a36:	1c43      	adds	r3, r0, #1
 8005a38:	89a3      	ldrh	r3, [r4, #12]
 8005a3a:	d106      	bne.n	8005a4a <__sflush_r+0x66>
 8005a3c:	6829      	ldr	r1, [r5, #0]
 8005a3e:	291d      	cmp	r1, #29
 8005a40:	d82c      	bhi.n	8005a9c <__sflush_r+0xb8>
 8005a42:	4a2a      	ldr	r2, [pc, #168]	; (8005aec <__sflush_r+0x108>)
 8005a44:	40ca      	lsrs	r2, r1
 8005a46:	07d6      	lsls	r6, r2, #31
 8005a48:	d528      	bpl.n	8005a9c <__sflush_r+0xb8>
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	6062      	str	r2, [r4, #4]
 8005a4e:	04d9      	lsls	r1, r3, #19
 8005a50:	6922      	ldr	r2, [r4, #16]
 8005a52:	6022      	str	r2, [r4, #0]
 8005a54:	d504      	bpl.n	8005a60 <__sflush_r+0x7c>
 8005a56:	1c42      	adds	r2, r0, #1
 8005a58:	d101      	bne.n	8005a5e <__sflush_r+0x7a>
 8005a5a:	682b      	ldr	r3, [r5, #0]
 8005a5c:	b903      	cbnz	r3, 8005a60 <__sflush_r+0x7c>
 8005a5e:	6560      	str	r0, [r4, #84]	; 0x54
 8005a60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a62:	602f      	str	r7, [r5, #0]
 8005a64:	2900      	cmp	r1, #0
 8005a66:	d0ca      	beq.n	80059fe <__sflush_r+0x1a>
 8005a68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <__sflush_r+0x92>
 8005a70:	4628      	mov	r0, r5
 8005a72:	f000 fd8b 	bl	800658c <_free_r>
 8005a76:	2000      	movs	r0, #0
 8005a78:	6360      	str	r0, [r4, #52]	; 0x34
 8005a7a:	e7c1      	b.n	8005a00 <__sflush_r+0x1c>
 8005a7c:	6a21      	ldr	r1, [r4, #32]
 8005a7e:	2301      	movs	r3, #1
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b0      	blx	r6
 8005a84:	1c41      	adds	r1, r0, #1
 8005a86:	d1c7      	bne.n	8005a18 <__sflush_r+0x34>
 8005a88:	682b      	ldr	r3, [r5, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d0c4      	beq.n	8005a18 <__sflush_r+0x34>
 8005a8e:	2b1d      	cmp	r3, #29
 8005a90:	d001      	beq.n	8005a96 <__sflush_r+0xb2>
 8005a92:	2b16      	cmp	r3, #22
 8005a94:	d101      	bne.n	8005a9a <__sflush_r+0xb6>
 8005a96:	602f      	str	r7, [r5, #0]
 8005a98:	e7b1      	b.n	80059fe <__sflush_r+0x1a>
 8005a9a:	89a3      	ldrh	r3, [r4, #12]
 8005a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aa0:	81a3      	strh	r3, [r4, #12]
 8005aa2:	e7ad      	b.n	8005a00 <__sflush_r+0x1c>
 8005aa4:	690f      	ldr	r7, [r1, #16]
 8005aa6:	2f00      	cmp	r7, #0
 8005aa8:	d0a9      	beq.n	80059fe <__sflush_r+0x1a>
 8005aaa:	0793      	lsls	r3, r2, #30
 8005aac:	680e      	ldr	r6, [r1, #0]
 8005aae:	bf08      	it	eq
 8005ab0:	694b      	ldreq	r3, [r1, #20]
 8005ab2:	600f      	str	r7, [r1, #0]
 8005ab4:	bf18      	it	ne
 8005ab6:	2300      	movne	r3, #0
 8005ab8:	eba6 0807 	sub.w	r8, r6, r7
 8005abc:	608b      	str	r3, [r1, #8]
 8005abe:	f1b8 0f00 	cmp.w	r8, #0
 8005ac2:	dd9c      	ble.n	80059fe <__sflush_r+0x1a>
 8005ac4:	6a21      	ldr	r1, [r4, #32]
 8005ac6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ac8:	4643      	mov	r3, r8
 8005aca:	463a      	mov	r2, r7
 8005acc:	4628      	mov	r0, r5
 8005ace:	47b0      	blx	r6
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	dc06      	bgt.n	8005ae2 <__sflush_r+0xfe>
 8005ad4:	89a3      	ldrh	r3, [r4, #12]
 8005ad6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ada:	81a3      	strh	r3, [r4, #12]
 8005adc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ae0:	e78e      	b.n	8005a00 <__sflush_r+0x1c>
 8005ae2:	4407      	add	r7, r0
 8005ae4:	eba8 0800 	sub.w	r8, r8, r0
 8005ae8:	e7e9      	b.n	8005abe <__sflush_r+0xda>
 8005aea:	bf00      	nop
 8005aec:	20400001 	.word	0x20400001

08005af0 <_fflush_r>:
 8005af0:	b538      	push	{r3, r4, r5, lr}
 8005af2:	690b      	ldr	r3, [r1, #16]
 8005af4:	4605      	mov	r5, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	b913      	cbnz	r3, 8005b00 <_fflush_r+0x10>
 8005afa:	2500      	movs	r5, #0
 8005afc:	4628      	mov	r0, r5
 8005afe:	bd38      	pop	{r3, r4, r5, pc}
 8005b00:	b118      	cbz	r0, 8005b0a <_fflush_r+0x1a>
 8005b02:	6983      	ldr	r3, [r0, #24]
 8005b04:	b90b      	cbnz	r3, 8005b0a <_fflush_r+0x1a>
 8005b06:	f000 f887 	bl	8005c18 <__sinit>
 8005b0a:	4b14      	ldr	r3, [pc, #80]	; (8005b5c <_fflush_r+0x6c>)
 8005b0c:	429c      	cmp	r4, r3
 8005b0e:	d11b      	bne.n	8005b48 <_fflush_r+0x58>
 8005b10:	686c      	ldr	r4, [r5, #4]
 8005b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0ef      	beq.n	8005afa <_fflush_r+0xa>
 8005b1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b1c:	07d0      	lsls	r0, r2, #31
 8005b1e:	d404      	bmi.n	8005b2a <_fflush_r+0x3a>
 8005b20:	0599      	lsls	r1, r3, #22
 8005b22:	d402      	bmi.n	8005b2a <_fflush_r+0x3a>
 8005b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b26:	f000 f91a 	bl	8005d5e <__retarget_lock_acquire_recursive>
 8005b2a:	4628      	mov	r0, r5
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f7ff ff59 	bl	80059e4 <__sflush_r>
 8005b32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b34:	07da      	lsls	r2, r3, #31
 8005b36:	4605      	mov	r5, r0
 8005b38:	d4e0      	bmi.n	8005afc <_fflush_r+0xc>
 8005b3a:	89a3      	ldrh	r3, [r4, #12]
 8005b3c:	059b      	lsls	r3, r3, #22
 8005b3e:	d4dd      	bmi.n	8005afc <_fflush_r+0xc>
 8005b40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b42:	f000 f90d 	bl	8005d60 <__retarget_lock_release_recursive>
 8005b46:	e7d9      	b.n	8005afc <_fflush_r+0xc>
 8005b48:	4b05      	ldr	r3, [pc, #20]	; (8005b60 <_fflush_r+0x70>)
 8005b4a:	429c      	cmp	r4, r3
 8005b4c:	d101      	bne.n	8005b52 <_fflush_r+0x62>
 8005b4e:	68ac      	ldr	r4, [r5, #8]
 8005b50:	e7df      	b.n	8005b12 <_fflush_r+0x22>
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <_fflush_r+0x74>)
 8005b54:	429c      	cmp	r4, r3
 8005b56:	bf08      	it	eq
 8005b58:	68ec      	ldreq	r4, [r5, #12]
 8005b5a:	e7da      	b.n	8005b12 <_fflush_r+0x22>
 8005b5c:	0800be2c 	.word	0x0800be2c
 8005b60:	0800be4c 	.word	0x0800be4c
 8005b64:	0800be0c 	.word	0x0800be0c

08005b68 <std>:
 8005b68:	2300      	movs	r3, #0
 8005b6a:	b510      	push	{r4, lr}
 8005b6c:	4604      	mov	r4, r0
 8005b6e:	e9c0 3300 	strd	r3, r3, [r0]
 8005b72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b76:	6083      	str	r3, [r0, #8]
 8005b78:	8181      	strh	r1, [r0, #12]
 8005b7a:	6643      	str	r3, [r0, #100]	; 0x64
 8005b7c:	81c2      	strh	r2, [r0, #14]
 8005b7e:	6183      	str	r3, [r0, #24]
 8005b80:	4619      	mov	r1, r3
 8005b82:	2208      	movs	r2, #8
 8005b84:	305c      	adds	r0, #92	; 0x5c
 8005b86:	f7fe fadb 	bl	8004140 <memset>
 8005b8a:	4b05      	ldr	r3, [pc, #20]	; (8005ba0 <std+0x38>)
 8005b8c:	6263      	str	r3, [r4, #36]	; 0x24
 8005b8e:	4b05      	ldr	r3, [pc, #20]	; (8005ba4 <std+0x3c>)
 8005b90:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b92:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <std+0x40>)
 8005b94:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b96:	4b05      	ldr	r3, [pc, #20]	; (8005bac <std+0x44>)
 8005b98:	6224      	str	r4, [r4, #32]
 8005b9a:	6323      	str	r3, [r4, #48]	; 0x30
 8005b9c:	bd10      	pop	{r4, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08006ab1 	.word	0x08006ab1
 8005ba4:	08006ad3 	.word	0x08006ad3
 8005ba8:	08006b0b 	.word	0x08006b0b
 8005bac:	08006b2f 	.word	0x08006b2f

08005bb0 <_cleanup_r>:
 8005bb0:	4901      	ldr	r1, [pc, #4]	; (8005bb8 <_cleanup_r+0x8>)
 8005bb2:	f000 b8af 	b.w	8005d14 <_fwalk_reent>
 8005bb6:	bf00      	nop
 8005bb8:	08005af1 	.word	0x08005af1

08005bbc <__sfmoreglue>:
 8005bbc:	b570      	push	{r4, r5, r6, lr}
 8005bbe:	2268      	movs	r2, #104	; 0x68
 8005bc0:	1e4d      	subs	r5, r1, #1
 8005bc2:	4355      	muls	r5, r2
 8005bc4:	460e      	mov	r6, r1
 8005bc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bca:	f000 fd4b 	bl	8006664 <_malloc_r>
 8005bce:	4604      	mov	r4, r0
 8005bd0:	b140      	cbz	r0, 8005be4 <__sfmoreglue+0x28>
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	e9c0 1600 	strd	r1, r6, [r0]
 8005bd8:	300c      	adds	r0, #12
 8005bda:	60a0      	str	r0, [r4, #8]
 8005bdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005be0:	f7fe faae 	bl	8004140 <memset>
 8005be4:	4620      	mov	r0, r4
 8005be6:	bd70      	pop	{r4, r5, r6, pc}

08005be8 <__sfp_lock_acquire>:
 8005be8:	4801      	ldr	r0, [pc, #4]	; (8005bf0 <__sfp_lock_acquire+0x8>)
 8005bea:	f000 b8b8 	b.w	8005d5e <__retarget_lock_acquire_recursive>
 8005bee:	bf00      	nop
 8005bf0:	2000324d 	.word	0x2000324d

08005bf4 <__sfp_lock_release>:
 8005bf4:	4801      	ldr	r0, [pc, #4]	; (8005bfc <__sfp_lock_release+0x8>)
 8005bf6:	f000 b8b3 	b.w	8005d60 <__retarget_lock_release_recursive>
 8005bfa:	bf00      	nop
 8005bfc:	2000324d 	.word	0x2000324d

08005c00 <__sinit_lock_acquire>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__sinit_lock_acquire+0x8>)
 8005c02:	f000 b8ac 	b.w	8005d5e <__retarget_lock_acquire_recursive>
 8005c06:	bf00      	nop
 8005c08:	2000324e 	.word	0x2000324e

08005c0c <__sinit_lock_release>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <__sinit_lock_release+0x8>)
 8005c0e:	f000 b8a7 	b.w	8005d60 <__retarget_lock_release_recursive>
 8005c12:	bf00      	nop
 8005c14:	2000324e 	.word	0x2000324e

08005c18 <__sinit>:
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	4604      	mov	r4, r0
 8005c1c:	f7ff fff0 	bl	8005c00 <__sinit_lock_acquire>
 8005c20:	69a3      	ldr	r3, [r4, #24]
 8005c22:	b11b      	cbz	r3, 8005c2c <__sinit+0x14>
 8005c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c28:	f7ff bff0 	b.w	8005c0c <__sinit_lock_release>
 8005c2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c30:	6523      	str	r3, [r4, #80]	; 0x50
 8005c32:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <__sinit+0x68>)
 8005c34:	4a13      	ldr	r2, [pc, #76]	; (8005c84 <__sinit+0x6c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c3a:	42a3      	cmp	r3, r4
 8005c3c:	bf04      	itt	eq
 8005c3e:	2301      	moveq	r3, #1
 8005c40:	61a3      	streq	r3, [r4, #24]
 8005c42:	4620      	mov	r0, r4
 8005c44:	f000 f820 	bl	8005c88 <__sfp>
 8005c48:	6060      	str	r0, [r4, #4]
 8005c4a:	4620      	mov	r0, r4
 8005c4c:	f000 f81c 	bl	8005c88 <__sfp>
 8005c50:	60a0      	str	r0, [r4, #8]
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 f818 	bl	8005c88 <__sfp>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	60e0      	str	r0, [r4, #12]
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	6860      	ldr	r0, [r4, #4]
 8005c60:	f7ff ff82 	bl	8005b68 <std>
 8005c64:	68a0      	ldr	r0, [r4, #8]
 8005c66:	2201      	movs	r2, #1
 8005c68:	2109      	movs	r1, #9
 8005c6a:	f7ff ff7d 	bl	8005b68 <std>
 8005c6e:	68e0      	ldr	r0, [r4, #12]
 8005c70:	2202      	movs	r2, #2
 8005c72:	2112      	movs	r1, #18
 8005c74:	f7ff ff78 	bl	8005b68 <std>
 8005c78:	2301      	movs	r3, #1
 8005c7a:	61a3      	str	r3, [r4, #24]
 8005c7c:	e7d2      	b.n	8005c24 <__sinit+0xc>
 8005c7e:	bf00      	nop
 8005c80:	0800bd44 	.word	0x0800bd44
 8005c84:	08005bb1 	.word	0x08005bb1

08005c88 <__sfp>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	4607      	mov	r7, r0
 8005c8c:	f7ff ffac 	bl	8005be8 <__sfp_lock_acquire>
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <__sfp+0x84>)
 8005c92:	681e      	ldr	r6, [r3, #0]
 8005c94:	69b3      	ldr	r3, [r6, #24]
 8005c96:	b913      	cbnz	r3, 8005c9e <__sfp+0x16>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f7ff ffbd 	bl	8005c18 <__sinit>
 8005c9e:	3648      	adds	r6, #72	; 0x48
 8005ca0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	d503      	bpl.n	8005cb0 <__sfp+0x28>
 8005ca8:	6833      	ldr	r3, [r6, #0]
 8005caa:	b30b      	cbz	r3, 8005cf0 <__sfp+0x68>
 8005cac:	6836      	ldr	r6, [r6, #0]
 8005cae:	e7f7      	b.n	8005ca0 <__sfp+0x18>
 8005cb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cb4:	b9d5      	cbnz	r5, 8005cec <__sfp+0x64>
 8005cb6:	4b16      	ldr	r3, [pc, #88]	; (8005d10 <__sfp+0x88>)
 8005cb8:	60e3      	str	r3, [r4, #12]
 8005cba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cbe:	6665      	str	r5, [r4, #100]	; 0x64
 8005cc0:	f000 f84c 	bl	8005d5c <__retarget_lock_init_recursive>
 8005cc4:	f7ff ff96 	bl	8005bf4 <__sfp_lock_release>
 8005cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005cd0:	6025      	str	r5, [r4, #0]
 8005cd2:	61a5      	str	r5, [r4, #24]
 8005cd4:	2208      	movs	r2, #8
 8005cd6:	4629      	mov	r1, r5
 8005cd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cdc:	f7fe fa30 	bl	8004140 <memset>
 8005ce0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ce4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ce8:	4620      	mov	r0, r4
 8005cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cec:	3468      	adds	r4, #104	; 0x68
 8005cee:	e7d9      	b.n	8005ca4 <__sfp+0x1c>
 8005cf0:	2104      	movs	r1, #4
 8005cf2:	4638      	mov	r0, r7
 8005cf4:	f7ff ff62 	bl	8005bbc <__sfmoreglue>
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	6030      	str	r0, [r6, #0]
 8005cfc:	2800      	cmp	r0, #0
 8005cfe:	d1d5      	bne.n	8005cac <__sfp+0x24>
 8005d00:	f7ff ff78 	bl	8005bf4 <__sfp_lock_release>
 8005d04:	230c      	movs	r3, #12
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	e7ee      	b.n	8005ce8 <__sfp+0x60>
 8005d0a:	bf00      	nop
 8005d0c:	0800bd44 	.word	0x0800bd44
 8005d10:	ffff0001 	.word	0xffff0001

08005d14 <_fwalk_reent>:
 8005d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d18:	4606      	mov	r6, r0
 8005d1a:	4688      	mov	r8, r1
 8005d1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d20:	2700      	movs	r7, #0
 8005d22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d26:	f1b9 0901 	subs.w	r9, r9, #1
 8005d2a:	d505      	bpl.n	8005d38 <_fwalk_reent+0x24>
 8005d2c:	6824      	ldr	r4, [r4, #0]
 8005d2e:	2c00      	cmp	r4, #0
 8005d30:	d1f7      	bne.n	8005d22 <_fwalk_reent+0xe>
 8005d32:	4638      	mov	r0, r7
 8005d34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d38:	89ab      	ldrh	r3, [r5, #12]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d907      	bls.n	8005d4e <_fwalk_reent+0x3a>
 8005d3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d42:	3301      	adds	r3, #1
 8005d44:	d003      	beq.n	8005d4e <_fwalk_reent+0x3a>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4630      	mov	r0, r6
 8005d4a:	47c0      	blx	r8
 8005d4c:	4307      	orrs	r7, r0
 8005d4e:	3568      	adds	r5, #104	; 0x68
 8005d50:	e7e9      	b.n	8005d26 <_fwalk_reent+0x12>
	...

08005d54 <_localeconv_r>:
 8005d54:	4800      	ldr	r0, [pc, #0]	; (8005d58 <_localeconv_r+0x4>)
 8005d56:	4770      	bx	lr
 8005d58:	20000160 	.word	0x20000160

08005d5c <__retarget_lock_init_recursive>:
 8005d5c:	4770      	bx	lr

08005d5e <__retarget_lock_acquire_recursive>:
 8005d5e:	4770      	bx	lr

08005d60 <__retarget_lock_release_recursive>:
 8005d60:	4770      	bx	lr

08005d62 <__swhatbuf_r>:
 8005d62:	b570      	push	{r4, r5, r6, lr}
 8005d64:	460e      	mov	r6, r1
 8005d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d6a:	2900      	cmp	r1, #0
 8005d6c:	b096      	sub	sp, #88	; 0x58
 8005d6e:	4614      	mov	r4, r2
 8005d70:	461d      	mov	r5, r3
 8005d72:	da08      	bge.n	8005d86 <__swhatbuf_r+0x24>
 8005d74:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	602a      	str	r2, [r5, #0]
 8005d7c:	061a      	lsls	r2, r3, #24
 8005d7e:	d410      	bmi.n	8005da2 <__swhatbuf_r+0x40>
 8005d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005d84:	e00e      	b.n	8005da4 <__swhatbuf_r+0x42>
 8005d86:	466a      	mov	r2, sp
 8005d88:	f000 ff28 	bl	8006bdc <_fstat_r>
 8005d8c:	2800      	cmp	r0, #0
 8005d8e:	dbf1      	blt.n	8005d74 <__swhatbuf_r+0x12>
 8005d90:	9a01      	ldr	r2, [sp, #4]
 8005d92:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005d96:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005d9a:	425a      	negs	r2, r3
 8005d9c:	415a      	adcs	r2, r3
 8005d9e:	602a      	str	r2, [r5, #0]
 8005da0:	e7ee      	b.n	8005d80 <__swhatbuf_r+0x1e>
 8005da2:	2340      	movs	r3, #64	; 0x40
 8005da4:	2000      	movs	r0, #0
 8005da6:	6023      	str	r3, [r4, #0]
 8005da8:	b016      	add	sp, #88	; 0x58
 8005daa:	bd70      	pop	{r4, r5, r6, pc}

08005dac <__smakebuf_r>:
 8005dac:	898b      	ldrh	r3, [r1, #12]
 8005dae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005db0:	079d      	lsls	r5, r3, #30
 8005db2:	4606      	mov	r6, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	d507      	bpl.n	8005dc8 <__smakebuf_r+0x1c>
 8005db8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005dbc:	6023      	str	r3, [r4, #0]
 8005dbe:	6123      	str	r3, [r4, #16]
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	6163      	str	r3, [r4, #20]
 8005dc4:	b002      	add	sp, #8
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	ab01      	add	r3, sp, #4
 8005dca:	466a      	mov	r2, sp
 8005dcc:	f7ff ffc9 	bl	8005d62 <__swhatbuf_r>
 8005dd0:	9900      	ldr	r1, [sp, #0]
 8005dd2:	4605      	mov	r5, r0
 8005dd4:	4630      	mov	r0, r6
 8005dd6:	f000 fc45 	bl	8006664 <_malloc_r>
 8005dda:	b948      	cbnz	r0, 8005df0 <__smakebuf_r+0x44>
 8005ddc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005de0:	059a      	lsls	r2, r3, #22
 8005de2:	d4ef      	bmi.n	8005dc4 <__smakebuf_r+0x18>
 8005de4:	f023 0303 	bic.w	r3, r3, #3
 8005de8:	f043 0302 	orr.w	r3, r3, #2
 8005dec:	81a3      	strh	r3, [r4, #12]
 8005dee:	e7e3      	b.n	8005db8 <__smakebuf_r+0xc>
 8005df0:	4b0d      	ldr	r3, [pc, #52]	; (8005e28 <__smakebuf_r+0x7c>)
 8005df2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005df4:	89a3      	ldrh	r3, [r4, #12]
 8005df6:	6020      	str	r0, [r4, #0]
 8005df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dfc:	81a3      	strh	r3, [r4, #12]
 8005dfe:	9b00      	ldr	r3, [sp, #0]
 8005e00:	6163      	str	r3, [r4, #20]
 8005e02:	9b01      	ldr	r3, [sp, #4]
 8005e04:	6120      	str	r0, [r4, #16]
 8005e06:	b15b      	cbz	r3, 8005e20 <__smakebuf_r+0x74>
 8005e08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e0c:	4630      	mov	r0, r6
 8005e0e:	f000 fef7 	bl	8006c00 <_isatty_r>
 8005e12:	b128      	cbz	r0, 8005e20 <__smakebuf_r+0x74>
 8005e14:	89a3      	ldrh	r3, [r4, #12]
 8005e16:	f023 0303 	bic.w	r3, r3, #3
 8005e1a:	f043 0301 	orr.w	r3, r3, #1
 8005e1e:	81a3      	strh	r3, [r4, #12]
 8005e20:	89a0      	ldrh	r0, [r4, #12]
 8005e22:	4305      	orrs	r5, r0
 8005e24:	81a5      	strh	r5, [r4, #12]
 8005e26:	e7cd      	b.n	8005dc4 <__smakebuf_r+0x18>
 8005e28:	08005bb1 	.word	0x08005bb1

08005e2c <malloc>:
 8005e2c:	4b02      	ldr	r3, [pc, #8]	; (8005e38 <malloc+0xc>)
 8005e2e:	4601      	mov	r1, r0
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	f000 bc17 	b.w	8006664 <_malloc_r>
 8005e36:	bf00      	nop
 8005e38:	2000000c 	.word	0x2000000c

08005e3c <memcpy>:
 8005e3c:	440a      	add	r2, r1
 8005e3e:	4291      	cmp	r1, r2
 8005e40:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e44:	d100      	bne.n	8005e48 <memcpy+0xc>
 8005e46:	4770      	bx	lr
 8005e48:	b510      	push	{r4, lr}
 8005e4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e52:	4291      	cmp	r1, r2
 8005e54:	d1f9      	bne.n	8005e4a <memcpy+0xe>
 8005e56:	bd10      	pop	{r4, pc}

08005e58 <_Balloc>:
 8005e58:	b570      	push	{r4, r5, r6, lr}
 8005e5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e5c:	4604      	mov	r4, r0
 8005e5e:	460d      	mov	r5, r1
 8005e60:	b976      	cbnz	r6, 8005e80 <_Balloc+0x28>
 8005e62:	2010      	movs	r0, #16
 8005e64:	f7ff ffe2 	bl	8005e2c <malloc>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6260      	str	r0, [r4, #36]	; 0x24
 8005e6c:	b920      	cbnz	r0, 8005e78 <_Balloc+0x20>
 8005e6e:	4b18      	ldr	r3, [pc, #96]	; (8005ed0 <_Balloc+0x78>)
 8005e70:	4818      	ldr	r0, [pc, #96]	; (8005ed4 <_Balloc+0x7c>)
 8005e72:	2166      	movs	r1, #102	; 0x66
 8005e74:	f000 fe72 	bl	8006b5c <__assert_func>
 8005e78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e7c:	6006      	str	r6, [r0, #0]
 8005e7e:	60c6      	str	r6, [r0, #12]
 8005e80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005e82:	68f3      	ldr	r3, [r6, #12]
 8005e84:	b183      	cbz	r3, 8005ea8 <_Balloc+0x50>
 8005e86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005e8e:	b9b8      	cbnz	r0, 8005ec0 <_Balloc+0x68>
 8005e90:	2101      	movs	r1, #1
 8005e92:	fa01 f605 	lsl.w	r6, r1, r5
 8005e96:	1d72      	adds	r2, r6, #5
 8005e98:	0092      	lsls	r2, r2, #2
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 fb60 	bl	8006560 <_calloc_r>
 8005ea0:	b160      	cbz	r0, 8005ebc <_Balloc+0x64>
 8005ea2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005ea6:	e00e      	b.n	8005ec6 <_Balloc+0x6e>
 8005ea8:	2221      	movs	r2, #33	; 0x21
 8005eaa:	2104      	movs	r1, #4
 8005eac:	4620      	mov	r0, r4
 8005eae:	f000 fb57 	bl	8006560 <_calloc_r>
 8005eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb4:	60f0      	str	r0, [r6, #12]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1e4      	bne.n	8005e86 <_Balloc+0x2e>
 8005ebc:	2000      	movs	r0, #0
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	6802      	ldr	r2, [r0, #0]
 8005ec2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ecc:	e7f7      	b.n	8005ebe <_Balloc+0x66>
 8005ece:	bf00      	nop
 8005ed0:	0800bd89 	.word	0x0800bd89
 8005ed4:	0800be6c 	.word	0x0800be6c

08005ed8 <_Bfree>:
 8005ed8:	b570      	push	{r4, r5, r6, lr}
 8005eda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005edc:	4605      	mov	r5, r0
 8005ede:	460c      	mov	r4, r1
 8005ee0:	b976      	cbnz	r6, 8005f00 <_Bfree+0x28>
 8005ee2:	2010      	movs	r0, #16
 8005ee4:	f7ff ffa2 	bl	8005e2c <malloc>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	6268      	str	r0, [r5, #36]	; 0x24
 8005eec:	b920      	cbnz	r0, 8005ef8 <_Bfree+0x20>
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <_Bfree+0x3c>)
 8005ef0:	4809      	ldr	r0, [pc, #36]	; (8005f18 <_Bfree+0x40>)
 8005ef2:	218a      	movs	r1, #138	; 0x8a
 8005ef4:	f000 fe32 	bl	8006b5c <__assert_func>
 8005ef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005efc:	6006      	str	r6, [r0, #0]
 8005efe:	60c6      	str	r6, [r0, #12]
 8005f00:	b13c      	cbz	r4, 8005f12 <_Bfree+0x3a>
 8005f02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005f04:	6862      	ldr	r2, [r4, #4]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f0c:	6021      	str	r1, [r4, #0]
 8005f0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005f12:	bd70      	pop	{r4, r5, r6, pc}
 8005f14:	0800bd89 	.word	0x0800bd89
 8005f18:	0800be6c 	.word	0x0800be6c

08005f1c <__multadd>:
 8005f1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f20:	690d      	ldr	r5, [r1, #16]
 8005f22:	4607      	mov	r7, r0
 8005f24:	460c      	mov	r4, r1
 8005f26:	461e      	mov	r6, r3
 8005f28:	f101 0c14 	add.w	ip, r1, #20
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f8dc 3000 	ldr.w	r3, [ip]
 8005f32:	b299      	uxth	r1, r3
 8005f34:	fb02 6101 	mla	r1, r2, r1, r6
 8005f38:	0c1e      	lsrs	r6, r3, #16
 8005f3a:	0c0b      	lsrs	r3, r1, #16
 8005f3c:	fb02 3306 	mla	r3, r2, r6, r3
 8005f40:	b289      	uxth	r1, r1
 8005f42:	3001      	adds	r0, #1
 8005f44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005f48:	4285      	cmp	r5, r0
 8005f4a:	f84c 1b04 	str.w	r1, [ip], #4
 8005f4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005f52:	dcec      	bgt.n	8005f2e <__multadd+0x12>
 8005f54:	b30e      	cbz	r6, 8005f9a <__multadd+0x7e>
 8005f56:	68a3      	ldr	r3, [r4, #8]
 8005f58:	42ab      	cmp	r3, r5
 8005f5a:	dc19      	bgt.n	8005f90 <__multadd+0x74>
 8005f5c:	6861      	ldr	r1, [r4, #4]
 8005f5e:	4638      	mov	r0, r7
 8005f60:	3101      	adds	r1, #1
 8005f62:	f7ff ff79 	bl	8005e58 <_Balloc>
 8005f66:	4680      	mov	r8, r0
 8005f68:	b928      	cbnz	r0, 8005f76 <__multadd+0x5a>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	4b0c      	ldr	r3, [pc, #48]	; (8005fa0 <__multadd+0x84>)
 8005f6e:	480d      	ldr	r0, [pc, #52]	; (8005fa4 <__multadd+0x88>)
 8005f70:	21b5      	movs	r1, #181	; 0xb5
 8005f72:	f000 fdf3 	bl	8006b5c <__assert_func>
 8005f76:	6922      	ldr	r2, [r4, #16]
 8005f78:	3202      	adds	r2, #2
 8005f7a:	f104 010c 	add.w	r1, r4, #12
 8005f7e:	0092      	lsls	r2, r2, #2
 8005f80:	300c      	adds	r0, #12
 8005f82:	f7ff ff5b 	bl	8005e3c <memcpy>
 8005f86:	4621      	mov	r1, r4
 8005f88:	4638      	mov	r0, r7
 8005f8a:	f7ff ffa5 	bl	8005ed8 <_Bfree>
 8005f8e:	4644      	mov	r4, r8
 8005f90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f94:	3501      	adds	r5, #1
 8005f96:	615e      	str	r6, [r3, #20]
 8005f98:	6125      	str	r5, [r4, #16]
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fa0:	0800bdfb 	.word	0x0800bdfb
 8005fa4:	0800be6c 	.word	0x0800be6c

08005fa8 <__hi0bits>:
 8005fa8:	0c03      	lsrs	r3, r0, #16
 8005faa:	041b      	lsls	r3, r3, #16
 8005fac:	b9d3      	cbnz	r3, 8005fe4 <__hi0bits+0x3c>
 8005fae:	0400      	lsls	r0, r0, #16
 8005fb0:	2310      	movs	r3, #16
 8005fb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005fb6:	bf04      	itt	eq
 8005fb8:	0200      	lsleq	r0, r0, #8
 8005fba:	3308      	addeq	r3, #8
 8005fbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005fc0:	bf04      	itt	eq
 8005fc2:	0100      	lsleq	r0, r0, #4
 8005fc4:	3304      	addeq	r3, #4
 8005fc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005fca:	bf04      	itt	eq
 8005fcc:	0080      	lsleq	r0, r0, #2
 8005fce:	3302      	addeq	r3, #2
 8005fd0:	2800      	cmp	r0, #0
 8005fd2:	db05      	blt.n	8005fe0 <__hi0bits+0x38>
 8005fd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005fd8:	f103 0301 	add.w	r3, r3, #1
 8005fdc:	bf08      	it	eq
 8005fde:	2320      	moveq	r3, #32
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	4770      	bx	lr
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	e7e4      	b.n	8005fb2 <__hi0bits+0xa>

08005fe8 <__lo0bits>:
 8005fe8:	6803      	ldr	r3, [r0, #0]
 8005fea:	f013 0207 	ands.w	r2, r3, #7
 8005fee:	4601      	mov	r1, r0
 8005ff0:	d00b      	beq.n	800600a <__lo0bits+0x22>
 8005ff2:	07da      	lsls	r2, r3, #31
 8005ff4:	d423      	bmi.n	800603e <__lo0bits+0x56>
 8005ff6:	0798      	lsls	r0, r3, #30
 8005ff8:	bf49      	itett	mi
 8005ffa:	085b      	lsrmi	r3, r3, #1
 8005ffc:	089b      	lsrpl	r3, r3, #2
 8005ffe:	2001      	movmi	r0, #1
 8006000:	600b      	strmi	r3, [r1, #0]
 8006002:	bf5c      	itt	pl
 8006004:	600b      	strpl	r3, [r1, #0]
 8006006:	2002      	movpl	r0, #2
 8006008:	4770      	bx	lr
 800600a:	b298      	uxth	r0, r3
 800600c:	b9a8      	cbnz	r0, 800603a <__lo0bits+0x52>
 800600e:	0c1b      	lsrs	r3, r3, #16
 8006010:	2010      	movs	r0, #16
 8006012:	b2da      	uxtb	r2, r3
 8006014:	b90a      	cbnz	r2, 800601a <__lo0bits+0x32>
 8006016:	3008      	adds	r0, #8
 8006018:	0a1b      	lsrs	r3, r3, #8
 800601a:	071a      	lsls	r2, r3, #28
 800601c:	bf04      	itt	eq
 800601e:	091b      	lsreq	r3, r3, #4
 8006020:	3004      	addeq	r0, #4
 8006022:	079a      	lsls	r2, r3, #30
 8006024:	bf04      	itt	eq
 8006026:	089b      	lsreq	r3, r3, #2
 8006028:	3002      	addeq	r0, #2
 800602a:	07da      	lsls	r2, r3, #31
 800602c:	d403      	bmi.n	8006036 <__lo0bits+0x4e>
 800602e:	085b      	lsrs	r3, r3, #1
 8006030:	f100 0001 	add.w	r0, r0, #1
 8006034:	d005      	beq.n	8006042 <__lo0bits+0x5a>
 8006036:	600b      	str	r3, [r1, #0]
 8006038:	4770      	bx	lr
 800603a:	4610      	mov	r0, r2
 800603c:	e7e9      	b.n	8006012 <__lo0bits+0x2a>
 800603e:	2000      	movs	r0, #0
 8006040:	4770      	bx	lr
 8006042:	2020      	movs	r0, #32
 8006044:	4770      	bx	lr
	...

08006048 <__i2b>:
 8006048:	b510      	push	{r4, lr}
 800604a:	460c      	mov	r4, r1
 800604c:	2101      	movs	r1, #1
 800604e:	f7ff ff03 	bl	8005e58 <_Balloc>
 8006052:	4602      	mov	r2, r0
 8006054:	b928      	cbnz	r0, 8006062 <__i2b+0x1a>
 8006056:	4b05      	ldr	r3, [pc, #20]	; (800606c <__i2b+0x24>)
 8006058:	4805      	ldr	r0, [pc, #20]	; (8006070 <__i2b+0x28>)
 800605a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800605e:	f000 fd7d 	bl	8006b5c <__assert_func>
 8006062:	2301      	movs	r3, #1
 8006064:	6144      	str	r4, [r0, #20]
 8006066:	6103      	str	r3, [r0, #16]
 8006068:	bd10      	pop	{r4, pc}
 800606a:	bf00      	nop
 800606c:	0800bdfb 	.word	0x0800bdfb
 8006070:	0800be6c 	.word	0x0800be6c

08006074 <__multiply>:
 8006074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	4691      	mov	r9, r2
 800607a:	690a      	ldr	r2, [r1, #16]
 800607c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006080:	429a      	cmp	r2, r3
 8006082:	bfb8      	it	lt
 8006084:	460b      	movlt	r3, r1
 8006086:	460c      	mov	r4, r1
 8006088:	bfbc      	itt	lt
 800608a:	464c      	movlt	r4, r9
 800608c:	4699      	movlt	r9, r3
 800608e:	6927      	ldr	r7, [r4, #16]
 8006090:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006094:	68a3      	ldr	r3, [r4, #8]
 8006096:	6861      	ldr	r1, [r4, #4]
 8006098:	eb07 060a 	add.w	r6, r7, sl
 800609c:	42b3      	cmp	r3, r6
 800609e:	b085      	sub	sp, #20
 80060a0:	bfb8      	it	lt
 80060a2:	3101      	addlt	r1, #1
 80060a4:	f7ff fed8 	bl	8005e58 <_Balloc>
 80060a8:	b930      	cbnz	r0, 80060b8 <__multiply+0x44>
 80060aa:	4602      	mov	r2, r0
 80060ac:	4b44      	ldr	r3, [pc, #272]	; (80061c0 <__multiply+0x14c>)
 80060ae:	4845      	ldr	r0, [pc, #276]	; (80061c4 <__multiply+0x150>)
 80060b0:	f240 115d 	movw	r1, #349	; 0x15d
 80060b4:	f000 fd52 	bl	8006b5c <__assert_func>
 80060b8:	f100 0514 	add.w	r5, r0, #20
 80060bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80060c0:	462b      	mov	r3, r5
 80060c2:	2200      	movs	r2, #0
 80060c4:	4543      	cmp	r3, r8
 80060c6:	d321      	bcc.n	800610c <__multiply+0x98>
 80060c8:	f104 0314 	add.w	r3, r4, #20
 80060cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80060d0:	f109 0314 	add.w	r3, r9, #20
 80060d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	1b3a      	subs	r2, r7, r4
 80060dc:	3a15      	subs	r2, #21
 80060de:	f022 0203 	bic.w	r2, r2, #3
 80060e2:	3204      	adds	r2, #4
 80060e4:	f104 0115 	add.w	r1, r4, #21
 80060e8:	428f      	cmp	r7, r1
 80060ea:	bf38      	it	cc
 80060ec:	2204      	movcc	r2, #4
 80060ee:	9201      	str	r2, [sp, #4]
 80060f0:	9a02      	ldr	r2, [sp, #8]
 80060f2:	9303      	str	r3, [sp, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d80c      	bhi.n	8006112 <__multiply+0x9e>
 80060f8:	2e00      	cmp	r6, #0
 80060fa:	dd03      	ble.n	8006104 <__multiply+0x90>
 80060fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006100:	2b00      	cmp	r3, #0
 8006102:	d05a      	beq.n	80061ba <__multiply+0x146>
 8006104:	6106      	str	r6, [r0, #16]
 8006106:	b005      	add	sp, #20
 8006108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610c:	f843 2b04 	str.w	r2, [r3], #4
 8006110:	e7d8      	b.n	80060c4 <__multiply+0x50>
 8006112:	f8b3 a000 	ldrh.w	sl, [r3]
 8006116:	f1ba 0f00 	cmp.w	sl, #0
 800611a:	d024      	beq.n	8006166 <__multiply+0xf2>
 800611c:	f104 0e14 	add.w	lr, r4, #20
 8006120:	46a9      	mov	r9, r5
 8006122:	f04f 0c00 	mov.w	ip, #0
 8006126:	f85e 2b04 	ldr.w	r2, [lr], #4
 800612a:	f8d9 1000 	ldr.w	r1, [r9]
 800612e:	fa1f fb82 	uxth.w	fp, r2
 8006132:	b289      	uxth	r1, r1
 8006134:	fb0a 110b 	mla	r1, sl, fp, r1
 8006138:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800613c:	f8d9 2000 	ldr.w	r2, [r9]
 8006140:	4461      	add	r1, ip
 8006142:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006146:	fb0a c20b 	mla	r2, sl, fp, ip
 800614a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800614e:	b289      	uxth	r1, r1
 8006150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006154:	4577      	cmp	r7, lr
 8006156:	f849 1b04 	str.w	r1, [r9], #4
 800615a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800615e:	d8e2      	bhi.n	8006126 <__multiply+0xb2>
 8006160:	9a01      	ldr	r2, [sp, #4]
 8006162:	f845 c002 	str.w	ip, [r5, r2]
 8006166:	9a03      	ldr	r2, [sp, #12]
 8006168:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800616c:	3304      	adds	r3, #4
 800616e:	f1b9 0f00 	cmp.w	r9, #0
 8006172:	d020      	beq.n	80061b6 <__multiply+0x142>
 8006174:	6829      	ldr	r1, [r5, #0]
 8006176:	f104 0c14 	add.w	ip, r4, #20
 800617a:	46ae      	mov	lr, r5
 800617c:	f04f 0a00 	mov.w	sl, #0
 8006180:	f8bc b000 	ldrh.w	fp, [ip]
 8006184:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006188:	fb09 220b 	mla	r2, r9, fp, r2
 800618c:	4492      	add	sl, r2
 800618e:	b289      	uxth	r1, r1
 8006190:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006194:	f84e 1b04 	str.w	r1, [lr], #4
 8006198:	f85c 2b04 	ldr.w	r2, [ip], #4
 800619c:	f8be 1000 	ldrh.w	r1, [lr]
 80061a0:	0c12      	lsrs	r2, r2, #16
 80061a2:	fb09 1102 	mla	r1, r9, r2, r1
 80061a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80061aa:	4567      	cmp	r7, ip
 80061ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80061b0:	d8e6      	bhi.n	8006180 <__multiply+0x10c>
 80061b2:	9a01      	ldr	r2, [sp, #4]
 80061b4:	50a9      	str	r1, [r5, r2]
 80061b6:	3504      	adds	r5, #4
 80061b8:	e79a      	b.n	80060f0 <__multiply+0x7c>
 80061ba:	3e01      	subs	r6, #1
 80061bc:	e79c      	b.n	80060f8 <__multiply+0x84>
 80061be:	bf00      	nop
 80061c0:	0800bdfb 	.word	0x0800bdfb
 80061c4:	0800be6c 	.word	0x0800be6c

080061c8 <__pow5mult>:
 80061c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061cc:	4615      	mov	r5, r2
 80061ce:	f012 0203 	ands.w	r2, r2, #3
 80061d2:	4606      	mov	r6, r0
 80061d4:	460f      	mov	r7, r1
 80061d6:	d007      	beq.n	80061e8 <__pow5mult+0x20>
 80061d8:	4c25      	ldr	r4, [pc, #148]	; (8006270 <__pow5mult+0xa8>)
 80061da:	3a01      	subs	r2, #1
 80061dc:	2300      	movs	r3, #0
 80061de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061e2:	f7ff fe9b 	bl	8005f1c <__multadd>
 80061e6:	4607      	mov	r7, r0
 80061e8:	10ad      	asrs	r5, r5, #2
 80061ea:	d03d      	beq.n	8006268 <__pow5mult+0xa0>
 80061ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80061ee:	b97c      	cbnz	r4, 8006210 <__pow5mult+0x48>
 80061f0:	2010      	movs	r0, #16
 80061f2:	f7ff fe1b 	bl	8005e2c <malloc>
 80061f6:	4602      	mov	r2, r0
 80061f8:	6270      	str	r0, [r6, #36]	; 0x24
 80061fa:	b928      	cbnz	r0, 8006208 <__pow5mult+0x40>
 80061fc:	4b1d      	ldr	r3, [pc, #116]	; (8006274 <__pow5mult+0xac>)
 80061fe:	481e      	ldr	r0, [pc, #120]	; (8006278 <__pow5mult+0xb0>)
 8006200:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006204:	f000 fcaa 	bl	8006b5c <__assert_func>
 8006208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800620c:	6004      	str	r4, [r0, #0]
 800620e:	60c4      	str	r4, [r0, #12]
 8006210:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006218:	b94c      	cbnz	r4, 800622e <__pow5mult+0x66>
 800621a:	f240 2171 	movw	r1, #625	; 0x271
 800621e:	4630      	mov	r0, r6
 8006220:	f7ff ff12 	bl	8006048 <__i2b>
 8006224:	2300      	movs	r3, #0
 8006226:	f8c8 0008 	str.w	r0, [r8, #8]
 800622a:	4604      	mov	r4, r0
 800622c:	6003      	str	r3, [r0, #0]
 800622e:	f04f 0900 	mov.w	r9, #0
 8006232:	07eb      	lsls	r3, r5, #31
 8006234:	d50a      	bpl.n	800624c <__pow5mult+0x84>
 8006236:	4639      	mov	r1, r7
 8006238:	4622      	mov	r2, r4
 800623a:	4630      	mov	r0, r6
 800623c:	f7ff ff1a 	bl	8006074 <__multiply>
 8006240:	4639      	mov	r1, r7
 8006242:	4680      	mov	r8, r0
 8006244:	4630      	mov	r0, r6
 8006246:	f7ff fe47 	bl	8005ed8 <_Bfree>
 800624a:	4647      	mov	r7, r8
 800624c:	106d      	asrs	r5, r5, #1
 800624e:	d00b      	beq.n	8006268 <__pow5mult+0xa0>
 8006250:	6820      	ldr	r0, [r4, #0]
 8006252:	b938      	cbnz	r0, 8006264 <__pow5mult+0x9c>
 8006254:	4622      	mov	r2, r4
 8006256:	4621      	mov	r1, r4
 8006258:	4630      	mov	r0, r6
 800625a:	f7ff ff0b 	bl	8006074 <__multiply>
 800625e:	6020      	str	r0, [r4, #0]
 8006260:	f8c0 9000 	str.w	r9, [r0]
 8006264:	4604      	mov	r4, r0
 8006266:	e7e4      	b.n	8006232 <__pow5mult+0x6a>
 8006268:	4638      	mov	r0, r7
 800626a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800626e:	bf00      	nop
 8006270:	0800bfb8 	.word	0x0800bfb8
 8006274:	0800bd89 	.word	0x0800bd89
 8006278:	0800be6c 	.word	0x0800be6c

0800627c <__lshift>:
 800627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006280:	460c      	mov	r4, r1
 8006282:	6849      	ldr	r1, [r1, #4]
 8006284:	6923      	ldr	r3, [r4, #16]
 8006286:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800628a:	68a3      	ldr	r3, [r4, #8]
 800628c:	4607      	mov	r7, r0
 800628e:	4691      	mov	r9, r2
 8006290:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006294:	f108 0601 	add.w	r6, r8, #1
 8006298:	42b3      	cmp	r3, r6
 800629a:	db0b      	blt.n	80062b4 <__lshift+0x38>
 800629c:	4638      	mov	r0, r7
 800629e:	f7ff fddb 	bl	8005e58 <_Balloc>
 80062a2:	4605      	mov	r5, r0
 80062a4:	b948      	cbnz	r0, 80062ba <__lshift+0x3e>
 80062a6:	4602      	mov	r2, r0
 80062a8:	4b2a      	ldr	r3, [pc, #168]	; (8006354 <__lshift+0xd8>)
 80062aa:	482b      	ldr	r0, [pc, #172]	; (8006358 <__lshift+0xdc>)
 80062ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80062b0:	f000 fc54 	bl	8006b5c <__assert_func>
 80062b4:	3101      	adds	r1, #1
 80062b6:	005b      	lsls	r3, r3, #1
 80062b8:	e7ee      	b.n	8006298 <__lshift+0x1c>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f100 0114 	add.w	r1, r0, #20
 80062c0:	f100 0210 	add.w	r2, r0, #16
 80062c4:	4618      	mov	r0, r3
 80062c6:	4553      	cmp	r3, sl
 80062c8:	db37      	blt.n	800633a <__lshift+0xbe>
 80062ca:	6920      	ldr	r0, [r4, #16]
 80062cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062d0:	f104 0314 	add.w	r3, r4, #20
 80062d4:	f019 091f 	ands.w	r9, r9, #31
 80062d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80062e0:	d02f      	beq.n	8006342 <__lshift+0xc6>
 80062e2:	f1c9 0e20 	rsb	lr, r9, #32
 80062e6:	468a      	mov	sl, r1
 80062e8:	f04f 0c00 	mov.w	ip, #0
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	fa02 f209 	lsl.w	r2, r2, r9
 80062f2:	ea42 020c 	orr.w	r2, r2, ip
 80062f6:	f84a 2b04 	str.w	r2, [sl], #4
 80062fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80062fe:	4298      	cmp	r0, r3
 8006300:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006304:	d8f2      	bhi.n	80062ec <__lshift+0x70>
 8006306:	1b03      	subs	r3, r0, r4
 8006308:	3b15      	subs	r3, #21
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	3304      	adds	r3, #4
 8006310:	f104 0215 	add.w	r2, r4, #21
 8006314:	4290      	cmp	r0, r2
 8006316:	bf38      	it	cc
 8006318:	2304      	movcc	r3, #4
 800631a:	f841 c003 	str.w	ip, [r1, r3]
 800631e:	f1bc 0f00 	cmp.w	ip, #0
 8006322:	d001      	beq.n	8006328 <__lshift+0xac>
 8006324:	f108 0602 	add.w	r6, r8, #2
 8006328:	3e01      	subs	r6, #1
 800632a:	4638      	mov	r0, r7
 800632c:	612e      	str	r6, [r5, #16]
 800632e:	4621      	mov	r1, r4
 8006330:	f7ff fdd2 	bl	8005ed8 <_Bfree>
 8006334:	4628      	mov	r0, r5
 8006336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633a:	f842 0f04 	str.w	r0, [r2, #4]!
 800633e:	3301      	adds	r3, #1
 8006340:	e7c1      	b.n	80062c6 <__lshift+0x4a>
 8006342:	3904      	subs	r1, #4
 8006344:	f853 2b04 	ldr.w	r2, [r3], #4
 8006348:	f841 2f04 	str.w	r2, [r1, #4]!
 800634c:	4298      	cmp	r0, r3
 800634e:	d8f9      	bhi.n	8006344 <__lshift+0xc8>
 8006350:	e7ea      	b.n	8006328 <__lshift+0xac>
 8006352:	bf00      	nop
 8006354:	0800bdfb 	.word	0x0800bdfb
 8006358:	0800be6c 	.word	0x0800be6c

0800635c <__mcmp>:
 800635c:	b530      	push	{r4, r5, lr}
 800635e:	6902      	ldr	r2, [r0, #16]
 8006360:	690c      	ldr	r4, [r1, #16]
 8006362:	1b12      	subs	r2, r2, r4
 8006364:	d10e      	bne.n	8006384 <__mcmp+0x28>
 8006366:	f100 0314 	add.w	r3, r0, #20
 800636a:	3114      	adds	r1, #20
 800636c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006370:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006374:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006378:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800637c:	42a5      	cmp	r5, r4
 800637e:	d003      	beq.n	8006388 <__mcmp+0x2c>
 8006380:	d305      	bcc.n	800638e <__mcmp+0x32>
 8006382:	2201      	movs	r2, #1
 8006384:	4610      	mov	r0, r2
 8006386:	bd30      	pop	{r4, r5, pc}
 8006388:	4283      	cmp	r3, r0
 800638a:	d3f3      	bcc.n	8006374 <__mcmp+0x18>
 800638c:	e7fa      	b.n	8006384 <__mcmp+0x28>
 800638e:	f04f 32ff 	mov.w	r2, #4294967295
 8006392:	e7f7      	b.n	8006384 <__mcmp+0x28>

08006394 <__mdiff>:
 8006394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006398:	460c      	mov	r4, r1
 800639a:	4606      	mov	r6, r0
 800639c:	4611      	mov	r1, r2
 800639e:	4620      	mov	r0, r4
 80063a0:	4690      	mov	r8, r2
 80063a2:	f7ff ffdb 	bl	800635c <__mcmp>
 80063a6:	1e05      	subs	r5, r0, #0
 80063a8:	d110      	bne.n	80063cc <__mdiff+0x38>
 80063aa:	4629      	mov	r1, r5
 80063ac:	4630      	mov	r0, r6
 80063ae:	f7ff fd53 	bl	8005e58 <_Balloc>
 80063b2:	b930      	cbnz	r0, 80063c2 <__mdiff+0x2e>
 80063b4:	4b3a      	ldr	r3, [pc, #232]	; (80064a0 <__mdiff+0x10c>)
 80063b6:	4602      	mov	r2, r0
 80063b8:	f240 2132 	movw	r1, #562	; 0x232
 80063bc:	4839      	ldr	r0, [pc, #228]	; (80064a4 <__mdiff+0x110>)
 80063be:	f000 fbcd 	bl	8006b5c <__assert_func>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063cc:	bfa4      	itt	ge
 80063ce:	4643      	movge	r3, r8
 80063d0:	46a0      	movge	r8, r4
 80063d2:	4630      	mov	r0, r6
 80063d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80063d8:	bfa6      	itte	ge
 80063da:	461c      	movge	r4, r3
 80063dc:	2500      	movge	r5, #0
 80063de:	2501      	movlt	r5, #1
 80063e0:	f7ff fd3a 	bl	8005e58 <_Balloc>
 80063e4:	b920      	cbnz	r0, 80063f0 <__mdiff+0x5c>
 80063e6:	4b2e      	ldr	r3, [pc, #184]	; (80064a0 <__mdiff+0x10c>)
 80063e8:	4602      	mov	r2, r0
 80063ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80063ee:	e7e5      	b.n	80063bc <__mdiff+0x28>
 80063f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80063f4:	6926      	ldr	r6, [r4, #16]
 80063f6:	60c5      	str	r5, [r0, #12]
 80063f8:	f104 0914 	add.w	r9, r4, #20
 80063fc:	f108 0514 	add.w	r5, r8, #20
 8006400:	f100 0e14 	add.w	lr, r0, #20
 8006404:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006408:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800640c:	f108 0210 	add.w	r2, r8, #16
 8006410:	46f2      	mov	sl, lr
 8006412:	2100      	movs	r1, #0
 8006414:	f859 3b04 	ldr.w	r3, [r9], #4
 8006418:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800641c:	fa1f f883 	uxth.w	r8, r3
 8006420:	fa11 f18b 	uxtah	r1, r1, fp
 8006424:	0c1b      	lsrs	r3, r3, #16
 8006426:	eba1 0808 	sub.w	r8, r1, r8
 800642a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800642e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006432:	fa1f f888 	uxth.w	r8, r8
 8006436:	1419      	asrs	r1, r3, #16
 8006438:	454e      	cmp	r6, r9
 800643a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800643e:	f84a 3b04 	str.w	r3, [sl], #4
 8006442:	d8e7      	bhi.n	8006414 <__mdiff+0x80>
 8006444:	1b33      	subs	r3, r6, r4
 8006446:	3b15      	subs	r3, #21
 8006448:	f023 0303 	bic.w	r3, r3, #3
 800644c:	3304      	adds	r3, #4
 800644e:	3415      	adds	r4, #21
 8006450:	42a6      	cmp	r6, r4
 8006452:	bf38      	it	cc
 8006454:	2304      	movcc	r3, #4
 8006456:	441d      	add	r5, r3
 8006458:	4473      	add	r3, lr
 800645a:	469e      	mov	lr, r3
 800645c:	462e      	mov	r6, r5
 800645e:	4566      	cmp	r6, ip
 8006460:	d30e      	bcc.n	8006480 <__mdiff+0xec>
 8006462:	f10c 0203 	add.w	r2, ip, #3
 8006466:	1b52      	subs	r2, r2, r5
 8006468:	f022 0203 	bic.w	r2, r2, #3
 800646c:	3d03      	subs	r5, #3
 800646e:	45ac      	cmp	ip, r5
 8006470:	bf38      	it	cc
 8006472:	2200      	movcc	r2, #0
 8006474:	441a      	add	r2, r3
 8006476:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800647a:	b17b      	cbz	r3, 800649c <__mdiff+0x108>
 800647c:	6107      	str	r7, [r0, #16]
 800647e:	e7a3      	b.n	80063c8 <__mdiff+0x34>
 8006480:	f856 8b04 	ldr.w	r8, [r6], #4
 8006484:	fa11 f288 	uxtah	r2, r1, r8
 8006488:	1414      	asrs	r4, r2, #16
 800648a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800648e:	b292      	uxth	r2, r2
 8006490:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006494:	f84e 2b04 	str.w	r2, [lr], #4
 8006498:	1421      	asrs	r1, r4, #16
 800649a:	e7e0      	b.n	800645e <__mdiff+0xca>
 800649c:	3f01      	subs	r7, #1
 800649e:	e7ea      	b.n	8006476 <__mdiff+0xe2>
 80064a0:	0800bdfb 	.word	0x0800bdfb
 80064a4:	0800be6c 	.word	0x0800be6c

080064a8 <__d2b>:
 80064a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064ac:	4689      	mov	r9, r1
 80064ae:	2101      	movs	r1, #1
 80064b0:	ec57 6b10 	vmov	r6, r7, d0
 80064b4:	4690      	mov	r8, r2
 80064b6:	f7ff fccf 	bl	8005e58 <_Balloc>
 80064ba:	4604      	mov	r4, r0
 80064bc:	b930      	cbnz	r0, 80064cc <__d2b+0x24>
 80064be:	4602      	mov	r2, r0
 80064c0:	4b25      	ldr	r3, [pc, #148]	; (8006558 <__d2b+0xb0>)
 80064c2:	4826      	ldr	r0, [pc, #152]	; (800655c <__d2b+0xb4>)
 80064c4:	f240 310a 	movw	r1, #778	; 0x30a
 80064c8:	f000 fb48 	bl	8006b5c <__assert_func>
 80064cc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80064d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80064d4:	bb35      	cbnz	r5, 8006524 <__d2b+0x7c>
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	9301      	str	r3, [sp, #4]
 80064da:	d028      	beq.n	800652e <__d2b+0x86>
 80064dc:	4668      	mov	r0, sp
 80064de:	9600      	str	r6, [sp, #0]
 80064e0:	f7ff fd82 	bl	8005fe8 <__lo0bits>
 80064e4:	9900      	ldr	r1, [sp, #0]
 80064e6:	b300      	cbz	r0, 800652a <__d2b+0x82>
 80064e8:	9a01      	ldr	r2, [sp, #4]
 80064ea:	f1c0 0320 	rsb	r3, r0, #32
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	430b      	orrs	r3, r1
 80064f4:	40c2      	lsrs	r2, r0
 80064f6:	6163      	str	r3, [r4, #20]
 80064f8:	9201      	str	r2, [sp, #4]
 80064fa:	9b01      	ldr	r3, [sp, #4]
 80064fc:	61a3      	str	r3, [r4, #24]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bf14      	ite	ne
 8006502:	2202      	movne	r2, #2
 8006504:	2201      	moveq	r2, #1
 8006506:	6122      	str	r2, [r4, #16]
 8006508:	b1d5      	cbz	r5, 8006540 <__d2b+0x98>
 800650a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800650e:	4405      	add	r5, r0
 8006510:	f8c9 5000 	str.w	r5, [r9]
 8006514:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006518:	f8c8 0000 	str.w	r0, [r8]
 800651c:	4620      	mov	r0, r4
 800651e:	b003      	add	sp, #12
 8006520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006528:	e7d5      	b.n	80064d6 <__d2b+0x2e>
 800652a:	6161      	str	r1, [r4, #20]
 800652c:	e7e5      	b.n	80064fa <__d2b+0x52>
 800652e:	a801      	add	r0, sp, #4
 8006530:	f7ff fd5a 	bl	8005fe8 <__lo0bits>
 8006534:	9b01      	ldr	r3, [sp, #4]
 8006536:	6163      	str	r3, [r4, #20]
 8006538:	2201      	movs	r2, #1
 800653a:	6122      	str	r2, [r4, #16]
 800653c:	3020      	adds	r0, #32
 800653e:	e7e3      	b.n	8006508 <__d2b+0x60>
 8006540:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006544:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006548:	f8c9 0000 	str.w	r0, [r9]
 800654c:	6918      	ldr	r0, [r3, #16]
 800654e:	f7ff fd2b 	bl	8005fa8 <__hi0bits>
 8006552:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006556:	e7df      	b.n	8006518 <__d2b+0x70>
 8006558:	0800bdfb 	.word	0x0800bdfb
 800655c:	0800be6c 	.word	0x0800be6c

08006560 <_calloc_r>:
 8006560:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006562:	fba1 2402 	umull	r2, r4, r1, r2
 8006566:	b94c      	cbnz	r4, 800657c <_calloc_r+0x1c>
 8006568:	4611      	mov	r1, r2
 800656a:	9201      	str	r2, [sp, #4]
 800656c:	f000 f87a 	bl	8006664 <_malloc_r>
 8006570:	9a01      	ldr	r2, [sp, #4]
 8006572:	4605      	mov	r5, r0
 8006574:	b930      	cbnz	r0, 8006584 <_calloc_r+0x24>
 8006576:	4628      	mov	r0, r5
 8006578:	b003      	add	sp, #12
 800657a:	bd30      	pop	{r4, r5, pc}
 800657c:	220c      	movs	r2, #12
 800657e:	6002      	str	r2, [r0, #0]
 8006580:	2500      	movs	r5, #0
 8006582:	e7f8      	b.n	8006576 <_calloc_r+0x16>
 8006584:	4621      	mov	r1, r4
 8006586:	f7fd fddb 	bl	8004140 <memset>
 800658a:	e7f4      	b.n	8006576 <_calloc_r+0x16>

0800658c <_free_r>:
 800658c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800658e:	2900      	cmp	r1, #0
 8006590:	d044      	beq.n	800661c <_free_r+0x90>
 8006592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006596:	9001      	str	r0, [sp, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f1a1 0404 	sub.w	r4, r1, #4
 800659e:	bfb8      	it	lt
 80065a0:	18e4      	addlt	r4, r4, r3
 80065a2:	f000 fb61 	bl	8006c68 <__malloc_lock>
 80065a6:	4a1e      	ldr	r2, [pc, #120]	; (8006620 <_free_r+0x94>)
 80065a8:	9801      	ldr	r0, [sp, #4]
 80065aa:	6813      	ldr	r3, [r2, #0]
 80065ac:	b933      	cbnz	r3, 80065bc <_free_r+0x30>
 80065ae:	6063      	str	r3, [r4, #4]
 80065b0:	6014      	str	r4, [r2, #0]
 80065b2:	b003      	add	sp, #12
 80065b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065b8:	f000 bb5c 	b.w	8006c74 <__malloc_unlock>
 80065bc:	42a3      	cmp	r3, r4
 80065be:	d908      	bls.n	80065d2 <_free_r+0x46>
 80065c0:	6825      	ldr	r5, [r4, #0]
 80065c2:	1961      	adds	r1, r4, r5
 80065c4:	428b      	cmp	r3, r1
 80065c6:	bf01      	itttt	eq
 80065c8:	6819      	ldreq	r1, [r3, #0]
 80065ca:	685b      	ldreq	r3, [r3, #4]
 80065cc:	1949      	addeq	r1, r1, r5
 80065ce:	6021      	streq	r1, [r4, #0]
 80065d0:	e7ed      	b.n	80065ae <_free_r+0x22>
 80065d2:	461a      	mov	r2, r3
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	b10b      	cbz	r3, 80065dc <_free_r+0x50>
 80065d8:	42a3      	cmp	r3, r4
 80065da:	d9fa      	bls.n	80065d2 <_free_r+0x46>
 80065dc:	6811      	ldr	r1, [r2, #0]
 80065de:	1855      	adds	r5, r2, r1
 80065e0:	42a5      	cmp	r5, r4
 80065e2:	d10b      	bne.n	80065fc <_free_r+0x70>
 80065e4:	6824      	ldr	r4, [r4, #0]
 80065e6:	4421      	add	r1, r4
 80065e8:	1854      	adds	r4, r2, r1
 80065ea:	42a3      	cmp	r3, r4
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	d1e0      	bne.n	80065b2 <_free_r+0x26>
 80065f0:	681c      	ldr	r4, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	6053      	str	r3, [r2, #4]
 80065f6:	4421      	add	r1, r4
 80065f8:	6011      	str	r1, [r2, #0]
 80065fa:	e7da      	b.n	80065b2 <_free_r+0x26>
 80065fc:	d902      	bls.n	8006604 <_free_r+0x78>
 80065fe:	230c      	movs	r3, #12
 8006600:	6003      	str	r3, [r0, #0]
 8006602:	e7d6      	b.n	80065b2 <_free_r+0x26>
 8006604:	6825      	ldr	r5, [r4, #0]
 8006606:	1961      	adds	r1, r4, r5
 8006608:	428b      	cmp	r3, r1
 800660a:	bf04      	itt	eq
 800660c:	6819      	ldreq	r1, [r3, #0]
 800660e:	685b      	ldreq	r3, [r3, #4]
 8006610:	6063      	str	r3, [r4, #4]
 8006612:	bf04      	itt	eq
 8006614:	1949      	addeq	r1, r1, r5
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	6054      	str	r4, [r2, #4]
 800661a:	e7ca      	b.n	80065b2 <_free_r+0x26>
 800661c:	b003      	add	sp, #12
 800661e:	bd30      	pop	{r4, r5, pc}
 8006620:	20003250 	.word	0x20003250

08006624 <sbrk_aligned>:
 8006624:	b570      	push	{r4, r5, r6, lr}
 8006626:	4e0e      	ldr	r6, [pc, #56]	; (8006660 <sbrk_aligned+0x3c>)
 8006628:	460c      	mov	r4, r1
 800662a:	6831      	ldr	r1, [r6, #0]
 800662c:	4605      	mov	r5, r0
 800662e:	b911      	cbnz	r1, 8006636 <sbrk_aligned+0x12>
 8006630:	f000 fa2e 	bl	8006a90 <_sbrk_r>
 8006634:	6030      	str	r0, [r6, #0]
 8006636:	4621      	mov	r1, r4
 8006638:	4628      	mov	r0, r5
 800663a:	f000 fa29 	bl	8006a90 <_sbrk_r>
 800663e:	1c43      	adds	r3, r0, #1
 8006640:	d00a      	beq.n	8006658 <sbrk_aligned+0x34>
 8006642:	1cc4      	adds	r4, r0, #3
 8006644:	f024 0403 	bic.w	r4, r4, #3
 8006648:	42a0      	cmp	r0, r4
 800664a:	d007      	beq.n	800665c <sbrk_aligned+0x38>
 800664c:	1a21      	subs	r1, r4, r0
 800664e:	4628      	mov	r0, r5
 8006650:	f000 fa1e 	bl	8006a90 <_sbrk_r>
 8006654:	3001      	adds	r0, #1
 8006656:	d101      	bne.n	800665c <sbrk_aligned+0x38>
 8006658:	f04f 34ff 	mov.w	r4, #4294967295
 800665c:	4620      	mov	r0, r4
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	20003254 	.word	0x20003254

08006664 <_malloc_r>:
 8006664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006668:	1ccd      	adds	r5, r1, #3
 800666a:	f025 0503 	bic.w	r5, r5, #3
 800666e:	3508      	adds	r5, #8
 8006670:	2d0c      	cmp	r5, #12
 8006672:	bf38      	it	cc
 8006674:	250c      	movcc	r5, #12
 8006676:	2d00      	cmp	r5, #0
 8006678:	4607      	mov	r7, r0
 800667a:	db01      	blt.n	8006680 <_malloc_r+0x1c>
 800667c:	42a9      	cmp	r1, r5
 800667e:	d905      	bls.n	800668c <_malloc_r+0x28>
 8006680:	230c      	movs	r3, #12
 8006682:	603b      	str	r3, [r7, #0]
 8006684:	2600      	movs	r6, #0
 8006686:	4630      	mov	r0, r6
 8006688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800668c:	4e2e      	ldr	r6, [pc, #184]	; (8006748 <_malloc_r+0xe4>)
 800668e:	f000 faeb 	bl	8006c68 <__malloc_lock>
 8006692:	6833      	ldr	r3, [r6, #0]
 8006694:	461c      	mov	r4, r3
 8006696:	bb34      	cbnz	r4, 80066e6 <_malloc_r+0x82>
 8006698:	4629      	mov	r1, r5
 800669a:	4638      	mov	r0, r7
 800669c:	f7ff ffc2 	bl	8006624 <sbrk_aligned>
 80066a0:	1c43      	adds	r3, r0, #1
 80066a2:	4604      	mov	r4, r0
 80066a4:	d14d      	bne.n	8006742 <_malloc_r+0xde>
 80066a6:	6834      	ldr	r4, [r6, #0]
 80066a8:	4626      	mov	r6, r4
 80066aa:	2e00      	cmp	r6, #0
 80066ac:	d140      	bne.n	8006730 <_malloc_r+0xcc>
 80066ae:	6823      	ldr	r3, [r4, #0]
 80066b0:	4631      	mov	r1, r6
 80066b2:	4638      	mov	r0, r7
 80066b4:	eb04 0803 	add.w	r8, r4, r3
 80066b8:	f000 f9ea 	bl	8006a90 <_sbrk_r>
 80066bc:	4580      	cmp	r8, r0
 80066be:	d13a      	bne.n	8006736 <_malloc_r+0xd2>
 80066c0:	6821      	ldr	r1, [r4, #0]
 80066c2:	3503      	adds	r5, #3
 80066c4:	1a6d      	subs	r5, r5, r1
 80066c6:	f025 0503 	bic.w	r5, r5, #3
 80066ca:	3508      	adds	r5, #8
 80066cc:	2d0c      	cmp	r5, #12
 80066ce:	bf38      	it	cc
 80066d0:	250c      	movcc	r5, #12
 80066d2:	4629      	mov	r1, r5
 80066d4:	4638      	mov	r0, r7
 80066d6:	f7ff ffa5 	bl	8006624 <sbrk_aligned>
 80066da:	3001      	adds	r0, #1
 80066dc:	d02b      	beq.n	8006736 <_malloc_r+0xd2>
 80066de:	6823      	ldr	r3, [r4, #0]
 80066e0:	442b      	add	r3, r5
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	e00e      	b.n	8006704 <_malloc_r+0xa0>
 80066e6:	6822      	ldr	r2, [r4, #0]
 80066e8:	1b52      	subs	r2, r2, r5
 80066ea:	d41e      	bmi.n	800672a <_malloc_r+0xc6>
 80066ec:	2a0b      	cmp	r2, #11
 80066ee:	d916      	bls.n	800671e <_malloc_r+0xba>
 80066f0:	1961      	adds	r1, r4, r5
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	6025      	str	r5, [r4, #0]
 80066f6:	bf18      	it	ne
 80066f8:	6059      	strne	r1, [r3, #4]
 80066fa:	6863      	ldr	r3, [r4, #4]
 80066fc:	bf08      	it	eq
 80066fe:	6031      	streq	r1, [r6, #0]
 8006700:	5162      	str	r2, [r4, r5]
 8006702:	604b      	str	r3, [r1, #4]
 8006704:	4638      	mov	r0, r7
 8006706:	f104 060b 	add.w	r6, r4, #11
 800670a:	f000 fab3 	bl	8006c74 <__malloc_unlock>
 800670e:	f026 0607 	bic.w	r6, r6, #7
 8006712:	1d23      	adds	r3, r4, #4
 8006714:	1af2      	subs	r2, r6, r3
 8006716:	d0b6      	beq.n	8006686 <_malloc_r+0x22>
 8006718:	1b9b      	subs	r3, r3, r6
 800671a:	50a3      	str	r3, [r4, r2]
 800671c:	e7b3      	b.n	8006686 <_malloc_r+0x22>
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	42a3      	cmp	r3, r4
 8006722:	bf0c      	ite	eq
 8006724:	6032      	streq	r2, [r6, #0]
 8006726:	605a      	strne	r2, [r3, #4]
 8006728:	e7ec      	b.n	8006704 <_malloc_r+0xa0>
 800672a:	4623      	mov	r3, r4
 800672c:	6864      	ldr	r4, [r4, #4]
 800672e:	e7b2      	b.n	8006696 <_malloc_r+0x32>
 8006730:	4634      	mov	r4, r6
 8006732:	6876      	ldr	r6, [r6, #4]
 8006734:	e7b9      	b.n	80066aa <_malloc_r+0x46>
 8006736:	230c      	movs	r3, #12
 8006738:	603b      	str	r3, [r7, #0]
 800673a:	4638      	mov	r0, r7
 800673c:	f000 fa9a 	bl	8006c74 <__malloc_unlock>
 8006740:	e7a1      	b.n	8006686 <_malloc_r+0x22>
 8006742:	6025      	str	r5, [r4, #0]
 8006744:	e7de      	b.n	8006704 <_malloc_r+0xa0>
 8006746:	bf00      	nop
 8006748:	20003250 	.word	0x20003250

0800674c <__sfputc_r>:
 800674c:	6893      	ldr	r3, [r2, #8]
 800674e:	3b01      	subs	r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	b410      	push	{r4}
 8006754:	6093      	str	r3, [r2, #8]
 8006756:	da08      	bge.n	800676a <__sfputc_r+0x1e>
 8006758:	6994      	ldr	r4, [r2, #24]
 800675a:	42a3      	cmp	r3, r4
 800675c:	db01      	blt.n	8006762 <__sfputc_r+0x16>
 800675e:	290a      	cmp	r1, #10
 8006760:	d103      	bne.n	800676a <__sfputc_r+0x1e>
 8006762:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006766:	f7fe ba01 	b.w	8004b6c <__swbuf_r>
 800676a:	6813      	ldr	r3, [r2, #0]
 800676c:	1c58      	adds	r0, r3, #1
 800676e:	6010      	str	r0, [r2, #0]
 8006770:	7019      	strb	r1, [r3, #0]
 8006772:	4608      	mov	r0, r1
 8006774:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006778:	4770      	bx	lr

0800677a <__sfputs_r>:
 800677a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677c:	4606      	mov	r6, r0
 800677e:	460f      	mov	r7, r1
 8006780:	4614      	mov	r4, r2
 8006782:	18d5      	adds	r5, r2, r3
 8006784:	42ac      	cmp	r4, r5
 8006786:	d101      	bne.n	800678c <__sfputs_r+0x12>
 8006788:	2000      	movs	r0, #0
 800678a:	e007      	b.n	800679c <__sfputs_r+0x22>
 800678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006790:	463a      	mov	r2, r7
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ffda 	bl	800674c <__sfputc_r>
 8006798:	1c43      	adds	r3, r0, #1
 800679a:	d1f3      	bne.n	8006784 <__sfputs_r+0xa>
 800679c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067a0 <_vfiprintf_r>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	460d      	mov	r5, r1
 80067a6:	b09d      	sub	sp, #116	; 0x74
 80067a8:	4614      	mov	r4, r2
 80067aa:	4698      	mov	r8, r3
 80067ac:	4606      	mov	r6, r0
 80067ae:	b118      	cbz	r0, 80067b8 <_vfiprintf_r+0x18>
 80067b0:	6983      	ldr	r3, [r0, #24]
 80067b2:	b90b      	cbnz	r3, 80067b8 <_vfiprintf_r+0x18>
 80067b4:	f7ff fa30 	bl	8005c18 <__sinit>
 80067b8:	4b89      	ldr	r3, [pc, #548]	; (80069e0 <_vfiprintf_r+0x240>)
 80067ba:	429d      	cmp	r5, r3
 80067bc:	d11b      	bne.n	80067f6 <_vfiprintf_r+0x56>
 80067be:	6875      	ldr	r5, [r6, #4]
 80067c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c2:	07d9      	lsls	r1, r3, #31
 80067c4:	d405      	bmi.n	80067d2 <_vfiprintf_r+0x32>
 80067c6:	89ab      	ldrh	r3, [r5, #12]
 80067c8:	059a      	lsls	r2, r3, #22
 80067ca:	d402      	bmi.n	80067d2 <_vfiprintf_r+0x32>
 80067cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067ce:	f7ff fac6 	bl	8005d5e <__retarget_lock_acquire_recursive>
 80067d2:	89ab      	ldrh	r3, [r5, #12]
 80067d4:	071b      	lsls	r3, r3, #28
 80067d6:	d501      	bpl.n	80067dc <_vfiprintf_r+0x3c>
 80067d8:	692b      	ldr	r3, [r5, #16]
 80067da:	b9eb      	cbnz	r3, 8006818 <_vfiprintf_r+0x78>
 80067dc:	4629      	mov	r1, r5
 80067de:	4630      	mov	r0, r6
 80067e0:	f7fe fa16 	bl	8004c10 <__swsetup_r>
 80067e4:	b1c0      	cbz	r0, 8006818 <_vfiprintf_r+0x78>
 80067e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067e8:	07dc      	lsls	r4, r3, #31
 80067ea:	d50e      	bpl.n	800680a <_vfiprintf_r+0x6a>
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295
 80067f0:	b01d      	add	sp, #116	; 0x74
 80067f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067f6:	4b7b      	ldr	r3, [pc, #492]	; (80069e4 <_vfiprintf_r+0x244>)
 80067f8:	429d      	cmp	r5, r3
 80067fa:	d101      	bne.n	8006800 <_vfiprintf_r+0x60>
 80067fc:	68b5      	ldr	r5, [r6, #8]
 80067fe:	e7df      	b.n	80067c0 <_vfiprintf_r+0x20>
 8006800:	4b79      	ldr	r3, [pc, #484]	; (80069e8 <_vfiprintf_r+0x248>)
 8006802:	429d      	cmp	r5, r3
 8006804:	bf08      	it	eq
 8006806:	68f5      	ldreq	r5, [r6, #12]
 8006808:	e7da      	b.n	80067c0 <_vfiprintf_r+0x20>
 800680a:	89ab      	ldrh	r3, [r5, #12]
 800680c:	0598      	lsls	r0, r3, #22
 800680e:	d4ed      	bmi.n	80067ec <_vfiprintf_r+0x4c>
 8006810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006812:	f7ff faa5 	bl	8005d60 <__retarget_lock_release_recursive>
 8006816:	e7e9      	b.n	80067ec <_vfiprintf_r+0x4c>
 8006818:	2300      	movs	r3, #0
 800681a:	9309      	str	r3, [sp, #36]	; 0x24
 800681c:	2320      	movs	r3, #32
 800681e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006822:	f8cd 800c 	str.w	r8, [sp, #12]
 8006826:	2330      	movs	r3, #48	; 0x30
 8006828:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069ec <_vfiprintf_r+0x24c>
 800682c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006830:	f04f 0901 	mov.w	r9, #1
 8006834:	4623      	mov	r3, r4
 8006836:	469a      	mov	sl, r3
 8006838:	f813 2b01 	ldrb.w	r2, [r3], #1
 800683c:	b10a      	cbz	r2, 8006842 <_vfiprintf_r+0xa2>
 800683e:	2a25      	cmp	r2, #37	; 0x25
 8006840:	d1f9      	bne.n	8006836 <_vfiprintf_r+0x96>
 8006842:	ebba 0b04 	subs.w	fp, sl, r4
 8006846:	d00b      	beq.n	8006860 <_vfiprintf_r+0xc0>
 8006848:	465b      	mov	r3, fp
 800684a:	4622      	mov	r2, r4
 800684c:	4629      	mov	r1, r5
 800684e:	4630      	mov	r0, r6
 8006850:	f7ff ff93 	bl	800677a <__sfputs_r>
 8006854:	3001      	adds	r0, #1
 8006856:	f000 80aa 	beq.w	80069ae <_vfiprintf_r+0x20e>
 800685a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800685c:	445a      	add	r2, fp
 800685e:	9209      	str	r2, [sp, #36]	; 0x24
 8006860:	f89a 3000 	ldrb.w	r3, [sl]
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80a2 	beq.w	80069ae <_vfiprintf_r+0x20e>
 800686a:	2300      	movs	r3, #0
 800686c:	f04f 32ff 	mov.w	r2, #4294967295
 8006870:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006874:	f10a 0a01 	add.w	sl, sl, #1
 8006878:	9304      	str	r3, [sp, #16]
 800687a:	9307      	str	r3, [sp, #28]
 800687c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006880:	931a      	str	r3, [sp, #104]	; 0x68
 8006882:	4654      	mov	r4, sl
 8006884:	2205      	movs	r2, #5
 8006886:	f814 1b01 	ldrb.w	r1, [r4], #1
 800688a:	4858      	ldr	r0, [pc, #352]	; (80069ec <_vfiprintf_r+0x24c>)
 800688c:	f7f9 fd28 	bl	80002e0 <memchr>
 8006890:	9a04      	ldr	r2, [sp, #16]
 8006892:	b9d8      	cbnz	r0, 80068cc <_vfiprintf_r+0x12c>
 8006894:	06d1      	lsls	r1, r2, #27
 8006896:	bf44      	itt	mi
 8006898:	2320      	movmi	r3, #32
 800689a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800689e:	0713      	lsls	r3, r2, #28
 80068a0:	bf44      	itt	mi
 80068a2:	232b      	movmi	r3, #43	; 0x2b
 80068a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068a8:	f89a 3000 	ldrb.w	r3, [sl]
 80068ac:	2b2a      	cmp	r3, #42	; 0x2a
 80068ae:	d015      	beq.n	80068dc <_vfiprintf_r+0x13c>
 80068b0:	9a07      	ldr	r2, [sp, #28]
 80068b2:	4654      	mov	r4, sl
 80068b4:	2000      	movs	r0, #0
 80068b6:	f04f 0c0a 	mov.w	ip, #10
 80068ba:	4621      	mov	r1, r4
 80068bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068c0:	3b30      	subs	r3, #48	; 0x30
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	d94e      	bls.n	8006964 <_vfiprintf_r+0x1c4>
 80068c6:	b1b0      	cbz	r0, 80068f6 <_vfiprintf_r+0x156>
 80068c8:	9207      	str	r2, [sp, #28]
 80068ca:	e014      	b.n	80068f6 <_vfiprintf_r+0x156>
 80068cc:	eba0 0308 	sub.w	r3, r0, r8
 80068d0:	fa09 f303 	lsl.w	r3, r9, r3
 80068d4:	4313      	orrs	r3, r2
 80068d6:	9304      	str	r3, [sp, #16]
 80068d8:	46a2      	mov	sl, r4
 80068da:	e7d2      	b.n	8006882 <_vfiprintf_r+0xe2>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	1d19      	adds	r1, r3, #4
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	9103      	str	r1, [sp, #12]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	bfbb      	ittet	lt
 80068e8:	425b      	neglt	r3, r3
 80068ea:	f042 0202 	orrlt.w	r2, r2, #2
 80068ee:	9307      	strge	r3, [sp, #28]
 80068f0:	9307      	strlt	r3, [sp, #28]
 80068f2:	bfb8      	it	lt
 80068f4:	9204      	strlt	r2, [sp, #16]
 80068f6:	7823      	ldrb	r3, [r4, #0]
 80068f8:	2b2e      	cmp	r3, #46	; 0x2e
 80068fa:	d10c      	bne.n	8006916 <_vfiprintf_r+0x176>
 80068fc:	7863      	ldrb	r3, [r4, #1]
 80068fe:	2b2a      	cmp	r3, #42	; 0x2a
 8006900:	d135      	bne.n	800696e <_vfiprintf_r+0x1ce>
 8006902:	9b03      	ldr	r3, [sp, #12]
 8006904:	1d1a      	adds	r2, r3, #4
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	9203      	str	r2, [sp, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	bfb8      	it	lt
 800690e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006912:	3402      	adds	r4, #2
 8006914:	9305      	str	r3, [sp, #20]
 8006916:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069fc <_vfiprintf_r+0x25c>
 800691a:	7821      	ldrb	r1, [r4, #0]
 800691c:	2203      	movs	r2, #3
 800691e:	4650      	mov	r0, sl
 8006920:	f7f9 fcde 	bl	80002e0 <memchr>
 8006924:	b140      	cbz	r0, 8006938 <_vfiprintf_r+0x198>
 8006926:	2340      	movs	r3, #64	; 0x40
 8006928:	eba0 000a 	sub.w	r0, r0, sl
 800692c:	fa03 f000 	lsl.w	r0, r3, r0
 8006930:	9b04      	ldr	r3, [sp, #16]
 8006932:	4303      	orrs	r3, r0
 8006934:	3401      	adds	r4, #1
 8006936:	9304      	str	r3, [sp, #16]
 8006938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693c:	482c      	ldr	r0, [pc, #176]	; (80069f0 <_vfiprintf_r+0x250>)
 800693e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006942:	2206      	movs	r2, #6
 8006944:	f7f9 fccc 	bl	80002e0 <memchr>
 8006948:	2800      	cmp	r0, #0
 800694a:	d03f      	beq.n	80069cc <_vfiprintf_r+0x22c>
 800694c:	4b29      	ldr	r3, [pc, #164]	; (80069f4 <_vfiprintf_r+0x254>)
 800694e:	bb1b      	cbnz	r3, 8006998 <_vfiprintf_r+0x1f8>
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	3307      	adds	r3, #7
 8006954:	f023 0307 	bic.w	r3, r3, #7
 8006958:	3308      	adds	r3, #8
 800695a:	9303      	str	r3, [sp, #12]
 800695c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800695e:	443b      	add	r3, r7
 8006960:	9309      	str	r3, [sp, #36]	; 0x24
 8006962:	e767      	b.n	8006834 <_vfiprintf_r+0x94>
 8006964:	fb0c 3202 	mla	r2, ip, r2, r3
 8006968:	460c      	mov	r4, r1
 800696a:	2001      	movs	r0, #1
 800696c:	e7a5      	b.n	80068ba <_vfiprintf_r+0x11a>
 800696e:	2300      	movs	r3, #0
 8006970:	3401      	adds	r4, #1
 8006972:	9305      	str	r3, [sp, #20]
 8006974:	4619      	mov	r1, r3
 8006976:	f04f 0c0a 	mov.w	ip, #10
 800697a:	4620      	mov	r0, r4
 800697c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006980:	3a30      	subs	r2, #48	; 0x30
 8006982:	2a09      	cmp	r2, #9
 8006984:	d903      	bls.n	800698e <_vfiprintf_r+0x1ee>
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0c5      	beq.n	8006916 <_vfiprintf_r+0x176>
 800698a:	9105      	str	r1, [sp, #20]
 800698c:	e7c3      	b.n	8006916 <_vfiprintf_r+0x176>
 800698e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006992:	4604      	mov	r4, r0
 8006994:	2301      	movs	r3, #1
 8006996:	e7f0      	b.n	800697a <_vfiprintf_r+0x1da>
 8006998:	ab03      	add	r3, sp, #12
 800699a:	9300      	str	r3, [sp, #0]
 800699c:	462a      	mov	r2, r5
 800699e:	4b16      	ldr	r3, [pc, #88]	; (80069f8 <_vfiprintf_r+0x258>)
 80069a0:	a904      	add	r1, sp, #16
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7fd fc74 	bl	8004290 <_printf_float>
 80069a8:	4607      	mov	r7, r0
 80069aa:	1c78      	adds	r0, r7, #1
 80069ac:	d1d6      	bne.n	800695c <_vfiprintf_r+0x1bc>
 80069ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069b0:	07d9      	lsls	r1, r3, #31
 80069b2:	d405      	bmi.n	80069c0 <_vfiprintf_r+0x220>
 80069b4:	89ab      	ldrh	r3, [r5, #12]
 80069b6:	059a      	lsls	r2, r3, #22
 80069b8:	d402      	bmi.n	80069c0 <_vfiprintf_r+0x220>
 80069ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069bc:	f7ff f9d0 	bl	8005d60 <__retarget_lock_release_recursive>
 80069c0:	89ab      	ldrh	r3, [r5, #12]
 80069c2:	065b      	lsls	r3, r3, #25
 80069c4:	f53f af12 	bmi.w	80067ec <_vfiprintf_r+0x4c>
 80069c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069ca:	e711      	b.n	80067f0 <_vfiprintf_r+0x50>
 80069cc:	ab03      	add	r3, sp, #12
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	462a      	mov	r2, r5
 80069d2:	4b09      	ldr	r3, [pc, #36]	; (80069f8 <_vfiprintf_r+0x258>)
 80069d4:	a904      	add	r1, sp, #16
 80069d6:	4630      	mov	r0, r6
 80069d8:	f7fd fefe 	bl	80047d8 <_printf_i>
 80069dc:	e7e4      	b.n	80069a8 <_vfiprintf_r+0x208>
 80069de:	bf00      	nop
 80069e0:	0800be2c 	.word	0x0800be2c
 80069e4:	0800be4c 	.word	0x0800be4c
 80069e8:	0800be0c 	.word	0x0800be0c
 80069ec:	0800bfc4 	.word	0x0800bfc4
 80069f0:	0800bfce 	.word	0x0800bfce
 80069f4:	08004291 	.word	0x08004291
 80069f8:	0800677b 	.word	0x0800677b
 80069fc:	0800bfca 	.word	0x0800bfca

08006a00 <_putc_r>:
 8006a00:	b570      	push	{r4, r5, r6, lr}
 8006a02:	460d      	mov	r5, r1
 8006a04:	4614      	mov	r4, r2
 8006a06:	4606      	mov	r6, r0
 8006a08:	b118      	cbz	r0, 8006a12 <_putc_r+0x12>
 8006a0a:	6983      	ldr	r3, [r0, #24]
 8006a0c:	b90b      	cbnz	r3, 8006a12 <_putc_r+0x12>
 8006a0e:	f7ff f903 	bl	8005c18 <__sinit>
 8006a12:	4b1c      	ldr	r3, [pc, #112]	; (8006a84 <_putc_r+0x84>)
 8006a14:	429c      	cmp	r4, r3
 8006a16:	d124      	bne.n	8006a62 <_putc_r+0x62>
 8006a18:	6874      	ldr	r4, [r6, #4]
 8006a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a1c:	07d8      	lsls	r0, r3, #31
 8006a1e:	d405      	bmi.n	8006a2c <_putc_r+0x2c>
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	0599      	lsls	r1, r3, #22
 8006a24:	d402      	bmi.n	8006a2c <_putc_r+0x2c>
 8006a26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a28:	f7ff f999 	bl	8005d5e <__retarget_lock_acquire_recursive>
 8006a2c:	68a3      	ldr	r3, [r4, #8]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	60a3      	str	r3, [r4, #8]
 8006a34:	da05      	bge.n	8006a42 <_putc_r+0x42>
 8006a36:	69a2      	ldr	r2, [r4, #24]
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	db1c      	blt.n	8006a76 <_putc_r+0x76>
 8006a3c:	b2eb      	uxtb	r3, r5
 8006a3e:	2b0a      	cmp	r3, #10
 8006a40:	d019      	beq.n	8006a76 <_putc_r+0x76>
 8006a42:	6823      	ldr	r3, [r4, #0]
 8006a44:	1c5a      	adds	r2, r3, #1
 8006a46:	6022      	str	r2, [r4, #0]
 8006a48:	701d      	strb	r5, [r3, #0]
 8006a4a:	b2ed      	uxtb	r5, r5
 8006a4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a4e:	07da      	lsls	r2, r3, #31
 8006a50:	d405      	bmi.n	8006a5e <_putc_r+0x5e>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	059b      	lsls	r3, r3, #22
 8006a56:	d402      	bmi.n	8006a5e <_putc_r+0x5e>
 8006a58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a5a:	f7ff f981 	bl	8005d60 <__retarget_lock_release_recursive>
 8006a5e:	4628      	mov	r0, r5
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <_putc_r+0x88>)
 8006a64:	429c      	cmp	r4, r3
 8006a66:	d101      	bne.n	8006a6c <_putc_r+0x6c>
 8006a68:	68b4      	ldr	r4, [r6, #8]
 8006a6a:	e7d6      	b.n	8006a1a <_putc_r+0x1a>
 8006a6c:	4b07      	ldr	r3, [pc, #28]	; (8006a8c <_putc_r+0x8c>)
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	bf08      	it	eq
 8006a72:	68f4      	ldreq	r4, [r6, #12]
 8006a74:	e7d1      	b.n	8006a1a <_putc_r+0x1a>
 8006a76:	4629      	mov	r1, r5
 8006a78:	4622      	mov	r2, r4
 8006a7a:	4630      	mov	r0, r6
 8006a7c:	f7fe f876 	bl	8004b6c <__swbuf_r>
 8006a80:	4605      	mov	r5, r0
 8006a82:	e7e3      	b.n	8006a4c <_putc_r+0x4c>
 8006a84:	0800be2c 	.word	0x0800be2c
 8006a88:	0800be4c 	.word	0x0800be4c
 8006a8c:	0800be0c 	.word	0x0800be0c

08006a90 <_sbrk_r>:
 8006a90:	b538      	push	{r3, r4, r5, lr}
 8006a92:	4d06      	ldr	r5, [pc, #24]	; (8006aac <_sbrk_r+0x1c>)
 8006a94:	2300      	movs	r3, #0
 8006a96:	4604      	mov	r4, r0
 8006a98:	4608      	mov	r0, r1
 8006a9a:	602b      	str	r3, [r5, #0]
 8006a9c:	f7fa fe6a 	bl	8001774 <_sbrk>
 8006aa0:	1c43      	adds	r3, r0, #1
 8006aa2:	d102      	bne.n	8006aaa <_sbrk_r+0x1a>
 8006aa4:	682b      	ldr	r3, [r5, #0]
 8006aa6:	b103      	cbz	r3, 8006aaa <_sbrk_r+0x1a>
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	bd38      	pop	{r3, r4, r5, pc}
 8006aac:	20003258 	.word	0x20003258

08006ab0 <__sread>:
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab8:	f000 f8e2 	bl	8006c80 <_read_r>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	bfab      	itete	ge
 8006ac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ac4:	181b      	addge	r3, r3, r0
 8006ac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006aca:	bfac      	ite	ge
 8006acc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006ace:	81a3      	strhlt	r3, [r4, #12]
 8006ad0:	bd10      	pop	{r4, pc}

08006ad2 <__swrite>:
 8006ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ad6:	461f      	mov	r7, r3
 8006ad8:	898b      	ldrh	r3, [r1, #12]
 8006ada:	05db      	lsls	r3, r3, #23
 8006adc:	4605      	mov	r5, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	4616      	mov	r6, r2
 8006ae2:	d505      	bpl.n	8006af0 <__swrite+0x1e>
 8006ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ae8:	2302      	movs	r3, #2
 8006aea:	2200      	movs	r2, #0
 8006aec:	f000 f898 	bl	8006c20 <_lseek_r>
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	4632      	mov	r2, r6
 8006afe:	463b      	mov	r3, r7
 8006b00:	4628      	mov	r0, r5
 8006b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b06:	f000 b817 	b.w	8006b38 <_write_r>

08006b0a <__sseek>:
 8006b0a:	b510      	push	{r4, lr}
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b12:	f000 f885 	bl	8006c20 <_lseek_r>
 8006b16:	1c43      	adds	r3, r0, #1
 8006b18:	89a3      	ldrh	r3, [r4, #12]
 8006b1a:	bf15      	itete	ne
 8006b1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006b1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006b22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006b26:	81a3      	strheq	r3, [r4, #12]
 8006b28:	bf18      	it	ne
 8006b2a:	81a3      	strhne	r3, [r4, #12]
 8006b2c:	bd10      	pop	{r4, pc}

08006b2e <__sclose>:
 8006b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b32:	f000 b831 	b.w	8006b98 <_close_r>
	...

08006b38 <_write_r>:
 8006b38:	b538      	push	{r3, r4, r5, lr}
 8006b3a:	4d07      	ldr	r5, [pc, #28]	; (8006b58 <_write_r+0x20>)
 8006b3c:	4604      	mov	r4, r0
 8006b3e:	4608      	mov	r0, r1
 8006b40:	4611      	mov	r1, r2
 8006b42:	2200      	movs	r2, #0
 8006b44:	602a      	str	r2, [r5, #0]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7fa fdc3 	bl	80016d2 <_write>
 8006b4c:	1c43      	adds	r3, r0, #1
 8006b4e:	d102      	bne.n	8006b56 <_write_r+0x1e>
 8006b50:	682b      	ldr	r3, [r5, #0]
 8006b52:	b103      	cbz	r3, 8006b56 <_write_r+0x1e>
 8006b54:	6023      	str	r3, [r4, #0]
 8006b56:	bd38      	pop	{r3, r4, r5, pc}
 8006b58:	20003258 	.word	0x20003258

08006b5c <__assert_func>:
 8006b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b5e:	4614      	mov	r4, r2
 8006b60:	461a      	mov	r2, r3
 8006b62:	4b09      	ldr	r3, [pc, #36]	; (8006b88 <__assert_func+0x2c>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4605      	mov	r5, r0
 8006b68:	68d8      	ldr	r0, [r3, #12]
 8006b6a:	b14c      	cbz	r4, 8006b80 <__assert_func+0x24>
 8006b6c:	4b07      	ldr	r3, [pc, #28]	; (8006b8c <__assert_func+0x30>)
 8006b6e:	9100      	str	r1, [sp, #0]
 8006b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b74:	4906      	ldr	r1, [pc, #24]	; (8006b90 <__assert_func+0x34>)
 8006b76:	462b      	mov	r3, r5
 8006b78:	f000 f81e 	bl	8006bb8 <fiprintf>
 8006b7c:	f000 f89f 	bl	8006cbe <abort>
 8006b80:	4b04      	ldr	r3, [pc, #16]	; (8006b94 <__assert_func+0x38>)
 8006b82:	461c      	mov	r4, r3
 8006b84:	e7f3      	b.n	8006b6e <__assert_func+0x12>
 8006b86:	bf00      	nop
 8006b88:	2000000c 	.word	0x2000000c
 8006b8c:	0800bfd5 	.word	0x0800bfd5
 8006b90:	0800bfe2 	.word	0x0800bfe2
 8006b94:	0800c010 	.word	0x0800c010

08006b98 <_close_r>:
 8006b98:	b538      	push	{r3, r4, r5, lr}
 8006b9a:	4d06      	ldr	r5, [pc, #24]	; (8006bb4 <_close_r+0x1c>)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	4604      	mov	r4, r0
 8006ba0:	4608      	mov	r0, r1
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	f7fa fdb1 	bl	800170a <_close>
 8006ba8:	1c43      	adds	r3, r0, #1
 8006baa:	d102      	bne.n	8006bb2 <_close_r+0x1a>
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	b103      	cbz	r3, 8006bb2 <_close_r+0x1a>
 8006bb0:	6023      	str	r3, [r4, #0]
 8006bb2:	bd38      	pop	{r3, r4, r5, pc}
 8006bb4:	20003258 	.word	0x20003258

08006bb8 <fiprintf>:
 8006bb8:	b40e      	push	{r1, r2, r3}
 8006bba:	b503      	push	{r0, r1, lr}
 8006bbc:	4601      	mov	r1, r0
 8006bbe:	ab03      	add	r3, sp, #12
 8006bc0:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <fiprintf+0x20>)
 8006bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bc6:	6800      	ldr	r0, [r0, #0]
 8006bc8:	9301      	str	r3, [sp, #4]
 8006bca:	f7ff fde9 	bl	80067a0 <_vfiprintf_r>
 8006bce:	b002      	add	sp, #8
 8006bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bd4:	b003      	add	sp, #12
 8006bd6:	4770      	bx	lr
 8006bd8:	2000000c 	.word	0x2000000c

08006bdc <_fstat_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	4d07      	ldr	r5, [pc, #28]	; (8006bfc <_fstat_r+0x20>)
 8006be0:	2300      	movs	r3, #0
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	4611      	mov	r1, r2
 8006be8:	602b      	str	r3, [r5, #0]
 8006bea:	f7fa fd9a 	bl	8001722 <_fstat>
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	d102      	bne.n	8006bf8 <_fstat_r+0x1c>
 8006bf2:	682b      	ldr	r3, [r5, #0]
 8006bf4:	b103      	cbz	r3, 8006bf8 <_fstat_r+0x1c>
 8006bf6:	6023      	str	r3, [r4, #0]
 8006bf8:	bd38      	pop	{r3, r4, r5, pc}
 8006bfa:	bf00      	nop
 8006bfc:	20003258 	.word	0x20003258

08006c00 <_isatty_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d06      	ldr	r5, [pc, #24]	; (8006c1c <_isatty_r+0x1c>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fa fd99 	bl	8001742 <_isatty>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_isatty_r+0x1a>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_isatty_r+0x1a>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20003258 	.word	0x20003258

08006c20 <_lseek_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	4d07      	ldr	r5, [pc, #28]	; (8006c40 <_lseek_r+0x20>)
 8006c24:	4604      	mov	r4, r0
 8006c26:	4608      	mov	r0, r1
 8006c28:	4611      	mov	r1, r2
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	602a      	str	r2, [r5, #0]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	f7fa fd92 	bl	8001758 <_lseek>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	d102      	bne.n	8006c3e <_lseek_r+0x1e>
 8006c38:	682b      	ldr	r3, [r5, #0]
 8006c3a:	b103      	cbz	r3, 8006c3e <_lseek_r+0x1e>
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	bd38      	pop	{r3, r4, r5, pc}
 8006c40:	20003258 	.word	0x20003258

08006c44 <__ascii_mbtowc>:
 8006c44:	b082      	sub	sp, #8
 8006c46:	b901      	cbnz	r1, 8006c4a <__ascii_mbtowc+0x6>
 8006c48:	a901      	add	r1, sp, #4
 8006c4a:	b142      	cbz	r2, 8006c5e <__ascii_mbtowc+0x1a>
 8006c4c:	b14b      	cbz	r3, 8006c62 <__ascii_mbtowc+0x1e>
 8006c4e:	7813      	ldrb	r3, [r2, #0]
 8006c50:	600b      	str	r3, [r1, #0]
 8006c52:	7812      	ldrb	r2, [r2, #0]
 8006c54:	1e10      	subs	r0, r2, #0
 8006c56:	bf18      	it	ne
 8006c58:	2001      	movne	r0, #1
 8006c5a:	b002      	add	sp, #8
 8006c5c:	4770      	bx	lr
 8006c5e:	4610      	mov	r0, r2
 8006c60:	e7fb      	b.n	8006c5a <__ascii_mbtowc+0x16>
 8006c62:	f06f 0001 	mvn.w	r0, #1
 8006c66:	e7f8      	b.n	8006c5a <__ascii_mbtowc+0x16>

08006c68 <__malloc_lock>:
 8006c68:	4801      	ldr	r0, [pc, #4]	; (8006c70 <__malloc_lock+0x8>)
 8006c6a:	f7ff b878 	b.w	8005d5e <__retarget_lock_acquire_recursive>
 8006c6e:	bf00      	nop
 8006c70:	2000324c 	.word	0x2000324c

08006c74 <__malloc_unlock>:
 8006c74:	4801      	ldr	r0, [pc, #4]	; (8006c7c <__malloc_unlock+0x8>)
 8006c76:	f7ff b873 	b.w	8005d60 <__retarget_lock_release_recursive>
 8006c7a:	bf00      	nop
 8006c7c:	2000324c 	.word	0x2000324c

08006c80 <_read_r>:
 8006c80:	b538      	push	{r3, r4, r5, lr}
 8006c82:	4d07      	ldr	r5, [pc, #28]	; (8006ca0 <_read_r+0x20>)
 8006c84:	4604      	mov	r4, r0
 8006c86:	4608      	mov	r0, r1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	602a      	str	r2, [r5, #0]
 8006c8e:	461a      	mov	r2, r3
 8006c90:	f7fa fd02 	bl	8001698 <_read>
 8006c94:	1c43      	adds	r3, r0, #1
 8006c96:	d102      	bne.n	8006c9e <_read_r+0x1e>
 8006c98:	682b      	ldr	r3, [r5, #0]
 8006c9a:	b103      	cbz	r3, 8006c9e <_read_r+0x1e>
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	bd38      	pop	{r3, r4, r5, pc}
 8006ca0:	20003258 	.word	0x20003258

08006ca4 <__ascii_wctomb>:
 8006ca4:	b149      	cbz	r1, 8006cba <__ascii_wctomb+0x16>
 8006ca6:	2aff      	cmp	r2, #255	; 0xff
 8006ca8:	bf85      	ittet	hi
 8006caa:	238a      	movhi	r3, #138	; 0x8a
 8006cac:	6003      	strhi	r3, [r0, #0]
 8006cae:	700a      	strbls	r2, [r1, #0]
 8006cb0:	f04f 30ff 	movhi.w	r0, #4294967295
 8006cb4:	bf98      	it	ls
 8006cb6:	2001      	movls	r0, #1
 8006cb8:	4770      	bx	lr
 8006cba:	4608      	mov	r0, r1
 8006cbc:	4770      	bx	lr

08006cbe <abort>:
 8006cbe:	b508      	push	{r3, lr}
 8006cc0:	2006      	movs	r0, #6
 8006cc2:	f000 f82b 	bl	8006d1c <raise>
 8006cc6:	2001      	movs	r0, #1
 8006cc8:	f7fa fcdc 	bl	8001684 <_exit>

08006ccc <_raise_r>:
 8006ccc:	291f      	cmp	r1, #31
 8006cce:	b538      	push	{r3, r4, r5, lr}
 8006cd0:	4604      	mov	r4, r0
 8006cd2:	460d      	mov	r5, r1
 8006cd4:	d904      	bls.n	8006ce0 <_raise_r+0x14>
 8006cd6:	2316      	movs	r3, #22
 8006cd8:	6003      	str	r3, [r0, #0]
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ce2:	b112      	cbz	r2, 8006cea <_raise_r+0x1e>
 8006ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ce8:	b94b      	cbnz	r3, 8006cfe <_raise_r+0x32>
 8006cea:	4620      	mov	r0, r4
 8006cec:	f000 f830 	bl	8006d50 <_getpid_r>
 8006cf0:	462a      	mov	r2, r5
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	4620      	mov	r0, r4
 8006cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cfa:	f000 b817 	b.w	8006d2c <_kill_r>
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d00a      	beq.n	8006d18 <_raise_r+0x4c>
 8006d02:	1c59      	adds	r1, r3, #1
 8006d04:	d103      	bne.n	8006d0e <_raise_r+0x42>
 8006d06:	2316      	movs	r3, #22
 8006d08:	6003      	str	r3, [r0, #0]
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	e7e7      	b.n	8006cde <_raise_r+0x12>
 8006d0e:	2400      	movs	r4, #0
 8006d10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006d14:	4628      	mov	r0, r5
 8006d16:	4798      	blx	r3
 8006d18:	2000      	movs	r0, #0
 8006d1a:	e7e0      	b.n	8006cde <_raise_r+0x12>

08006d1c <raise>:
 8006d1c:	4b02      	ldr	r3, [pc, #8]	; (8006d28 <raise+0xc>)
 8006d1e:	4601      	mov	r1, r0
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f7ff bfd3 	b.w	8006ccc <_raise_r>
 8006d26:	bf00      	nop
 8006d28:	2000000c 	.word	0x2000000c

08006d2c <_kill_r>:
 8006d2c:	b538      	push	{r3, r4, r5, lr}
 8006d2e:	4d07      	ldr	r5, [pc, #28]	; (8006d4c <_kill_r+0x20>)
 8006d30:	2300      	movs	r3, #0
 8006d32:	4604      	mov	r4, r0
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	602b      	str	r3, [r5, #0]
 8006d3a:	f7fa fc93 	bl	8001664 <_kill>
 8006d3e:	1c43      	adds	r3, r0, #1
 8006d40:	d102      	bne.n	8006d48 <_kill_r+0x1c>
 8006d42:	682b      	ldr	r3, [r5, #0]
 8006d44:	b103      	cbz	r3, 8006d48 <_kill_r+0x1c>
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	bd38      	pop	{r3, r4, r5, pc}
 8006d4a:	bf00      	nop
 8006d4c:	20003258 	.word	0x20003258

08006d50 <_getpid_r>:
 8006d50:	f7fa bc80 	b.w	8001654 <_getpid>

08006d54 <sqrtf>:
 8006d54:	b508      	push	{r3, lr}
 8006d56:	ed2d 8b02 	vpush	{d8}
 8006d5a:	eeb0 8a40 	vmov.f32	s16, s0
 8006d5e:	f000 f817 	bl	8006d90 <__ieee754_sqrtf>
 8006d62:	eeb4 8a48 	vcmp.f32	s16, s16
 8006d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6a:	d60c      	bvs.n	8006d86 <sqrtf+0x32>
 8006d6c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006d8c <sqrtf+0x38>
 8006d70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d78:	d505      	bpl.n	8006d86 <sqrtf+0x32>
 8006d7a:	f7fd f9b7 	bl	80040ec <__errno>
 8006d7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006d82:	2321      	movs	r3, #33	; 0x21
 8006d84:	6003      	str	r3, [r0, #0]
 8006d86:	ecbd 8b02 	vpop	{d8}
 8006d8a:	bd08      	pop	{r3, pc}
 8006d8c:	00000000 	.word	0x00000000

08006d90 <__ieee754_sqrtf>:
 8006d90:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006d94:	4770      	bx	lr
	...

08006d98 <_init>:
 8006d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9a:	bf00      	nop
 8006d9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d9e:	bc08      	pop	{r3}
 8006da0:	469e      	mov	lr, r3
 8006da2:	4770      	bx	lr

08006da4 <_fini>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	bf00      	nop
 8006da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006daa:	bc08      	pop	{r3}
 8006dac:	469e      	mov	lr, r3
 8006dae:	4770      	bx	lr
